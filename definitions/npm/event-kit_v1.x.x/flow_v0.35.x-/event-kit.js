/**
 * Flowtype definitions for event-kit
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface AtomEventKit$IDisposable {
    dispose(): void
}


/**
 * Static side of the Disposable class. 
 */
declare interface AtomEventKit$DisposableStatic {
    prototype: AtomEventKit$Disposable,
        new(disposalAction: Function): AtomEventKit$Disposable
}


/**
 * Instance side of the Disposable class. 
 */
declare type AtomEventKit$Disposable = {
    disposed: boolean,
    constructor: AtomEventKit$DisposableStatic
} & AtomEventKit$IDisposable


declare
var Disposable: AtomEventKit$DisposableStatic;


/**
 * Static side of the CompositeDisposable class. 
 */
declare interface AtomEventKit$CompositeDisposableStatic {
    prototype: AtomEventKit$CompositeDisposable,
        new(...disposables: AtomEventKit$IDisposable[]): AtomEventKit$CompositeDisposable
}


/**
 * Instance side of the CompositeDisposable class. 
 */
declare type AtomEventKit$CompositeDisposable = {
    disposed: boolean,
    constructor: AtomEventKit$CompositeDisposableStatic,
    add(...disposables: AtomEventKit$IDisposable[]): void,
    remove(disposable: AtomEventKit$IDisposable): void,
    clear(): void
} & AtomEventKit$IDisposable


declare
var CompositeDisposable: AtomEventKit$CompositeDisposableStatic;


/**
 * Static side of the Emitter class. 
 */
declare interface AtomEventKit$EmitterStatic {
    prototype: AtomEventKit$Emitter,
        new(): AtomEventKit$Emitter
}


/**
 * Instance side of the Emitter class. 
 */
declare interface AtomEventKit$Emitter {
    isDisposed: boolean,
        constructor: AtomEventKit$EmitterStatic,
        dispose(): void,

        /**
         * Registers a handler to be invoked whenever the given event is emitted.
         * @return  An object that will unregister the handler when disposed.
         */
        on(
            eventName: string,
            handler: (value: any) => void,
            unshift?: boolean): AtomEventKit$Disposable,

        /**
         * Registers a handler to be invoked before all previously registered handlers for
         * the given event.
         * @return  An object that will unregister the handler when disposed.
         */
        preempt(eventName: string, handler: (value: any) => void): AtomEventKit$Disposable,

        /**
         * Invokes any registered handlers for the given event. 
         */
        emit(eventName: string, value: any): void
}

declare
var Emitter: AtomEventKit$EmitterStatic;
declare module 'event-kit' {
    declare module.exports: typeof AtomEventKit
}