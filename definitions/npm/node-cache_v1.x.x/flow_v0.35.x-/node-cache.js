// @flow
/**
 * Flowtype definitions for node-cache
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface NodeCacheTypes$NodeCache {

    /**
     * container for cached data 
     */
    data: NodeCacheTypes$Data,

        /**
         * module options 
         */
        options: NodeCacheTypes$Options,

        /**
         * statistics container 
         */
        stats: NodeCacheTypes$Stats,

        /**
         * get a cached key and change the stats
         * @param key cache key or an array of keys
         * @param cb Callback function
         */
        get<T>(key: string, cb?: NodeCacheTypes$Callback<T>): T,

        /**
         * get multiple cached keys at once and change the stats
         * @param keys an array of keys
         * @param cb Callback function
         */
        mget<T>(
            keys: string[],
            cb?: NodeCacheTypes$Callback<{
                [key: string]: T
            }>): {
            [key: string]: T
        },

        /**
         * set a cached key and change the stats
         * @param key cache key
         * @param value A element to cache. If the option `option.forceString` is `true` the module trys to translate
        it to a serialized JSON
         * @param ttl The time to live in seconds.
         * @param cb Callback function
        */
        set<T>(
            key: string,
            value: T,
            ttl: number | string,
            cb?: NodeCacheTypes$Callback<boolean>): boolean,
        set<T>(key: string, value: T, cb?: NodeCacheTypes$Callback<boolean>): boolean,

        /**
         * remove keys
         * @param keys cache key to delete or a array of cache keys
         * @param cb Callback function
         * @returns  Number of deleted keys
         */
        del(keys: string | string[], cb?: NodeCacheTypes$Callback<number>): number,

        /**
         * reset or redefine the ttl of a key. If `ttl` is not passed or set to 0 it's similar to `.del()`
         */
        ttl(key: string, ttl: number, cb?: NodeCacheTypes$Callback<boolean>): boolean,
        ttl(key: string, cb?: NodeCacheTypes$Callback<boolean>, ttl?: number): boolean,

        /**
         * list all keys within this cache
         * @param cb Callback function
         * @returns  An array of all keys
         */
        keys(cb?: NodeCacheTypes$Callback<string[]>): string[],

        /**
         * get the stats
         * @returns  Stats data
         */
        getStats(): NodeCacheTypes$Stats,

        /**
         * flush the hole data and reset the stats
         */
        flushAll(): void,

        /**
         * This will clear the interval timeout which is set on checkperiod option.
         */
        close(): void
}

declare interface NodeCacheTypes$Data {
    [key: string]: NodeCacheTypes$WrappedValue<any >
}

declare interface NodeCacheTypes$Options {
    forceString?: boolean,
        objectValueSize?: number,
        arrayValueSize?: number,
        stdTTL?: number,
        checkperiod?: number,
        useClones?: boolean
}

declare interface NodeCacheTypes$Stats {
    hits: number,
        misses: number,
        keys: number,
        ksize: number,
        vsize: number
}

declare interface NodeCacheTypes$WrappedValue<T>{
    t: number,
    v: T
}

declare interface NodeCacheTypes$Callback<T>{
    (err: any, data: T): void
}
declare module 'node-cache' {
    declare module.exports: typeof NodeCache
}