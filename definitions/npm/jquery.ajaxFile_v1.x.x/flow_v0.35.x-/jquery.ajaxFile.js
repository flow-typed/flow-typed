/**
 * Flowtype definitions for jquery.ajaxFile
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JQueryAjaxFile$IFileData {
    name: string,
        element: HTMLInputElement
}

declare interface JQueryAjaxFile$IOption {
    method?: string,
        url?: string,
        data?: any,
        files?: JQueryAjaxFile$IFileData[],
        desiredResponseDataType?: DataType,
        timeoutInSeconds?: number
}

declare interface JQueryAjaxFile$IResponseStatus {
    code: number,
        text: string,
        isSuccess: boolean
}

declare interface JQueryAjaxFile$IAjaxFileResult<T>{
    error?: any,
    data?: any,
    status?: JQueryAjaxFile$IResponseStatus
}

declare interface JQueryAjaxFile$IAjaxFileResultCallback<T>{
    (result: JQueryAjaxFile$IAjaxFileResult<T>): void
}

declare interface JQueryAjaxFile$IAjaxFilePromise<T>{
    then(
        success: JQueryAjaxFile$IAjaxFileResultCallback<T>,
        error?: JQueryAjaxFile$IAjaxFileResultCallback<T>): JQueryAjaxFile$IAjaxFilePromise<T>,
    done(
        success: JQueryAjaxFile$IAjaxFileResultCallback<T>): JQueryAjaxFile$IAjaxFilePromise<T>,
    fail(
        error: JQueryAjaxFile$IAjaxFileResultCallback<T>): JQueryAjaxFile$IAjaxFilePromise<T>,
    always(
        error: JQueryAjaxFile$IAjaxFileResultCallback<T>): JQueryAjaxFile$IAjaxFilePromise<T>,
    abord(): void
}

declare interface JQueryAjaxFile$IAjaxFileStatic {
    DataType: typeof DataType,
        send<T>(option: JQueryAjaxFile$IOption): JQueryAjaxFile$IAjaxFilePromise<T >
}

declare interface JQueryAjaxFile$IJQueryXHR {
    readyState: any,
        status: number,
        statusText: string,
        responseXML: Document,
        responseText: string,
        statusCode?: {
            [key: string]: any
        },
        abort(statusText?: string): void,
        setRequestHeader(header: string, value: string): void,
        getAllResponseHeaders(): string,
        getResponseHeader(header: string): string,
        beforeSend(jqXHR: JQueryAjaxFile$IJQueryXHR, settings: JQueryAjaxSettings): any,
        dataFilter(data: any, ty: any): any,
        success(data: any, textStatus: string, jqXHR: JQueryAjaxFile$IJQueryXHR): any,
        error(jqXHR: JQueryAjaxFile$IJQueryXHR, textStatus: string, errorThrown: string): any,
        complete(jqXHR: JQueryAjaxFile$IJQueryXHR, textStatus: string): any
}

declare interface JQueryAjaxFile$IJQueryOption {
    type?: string,
        url?: string,
        data?: any,
        files?: JQueryAjaxFile$IFileData[],
        dataType?: string,
        timeout?: number,
        global?: boolean,
        error(jqXHR: JQueryAjaxFile$IJQueryXHR, textStatus: string, errorThrown: string): any,
        success(data: any, textStatus: string, jqXHR: JQueryAjaxFile$IJQueryXHR): any,
        complete(jqXHR: JQueryAjaxFile$IJQueryXHR, textStatus: string): any
}

declare interface JQueryAjaxFile$IAjaxFileJQueryExtension {
    ajaxWithFile<T>(jqueryOption: JQueryAjaxFile$IJQueryOption): JQueryDeferred<T >
}
declare
var AjaxFile: JQueryAjaxFile$IAjaxFileStatic;
declare module 'ajaxfile' {
    declare module.exports: typeof AjaxFile
}
declare interface AjaxFileKnockout$IFileInputWrapper {
    getElement(): HTMLInputElement,
        fileSelected(): boolean
}
declare interface KnockoutBindingHandlers {
    file: KnockoutBindingHandler
}