/**
 * Flowtype definitions for react-redux-toastr
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'react-redux-toastr' {
    declare interface ToastrOptions {

        /**
         * Timeout in miliseconds.
         */
        timeOut?: number,

            /**
             * Show newest on top or bottom.
             */
            newestOnTop?: boolean,

            /**
             * Position of the toastr: top-left, top-center, top-right, bottom-left, bottom-center and bottom-right
             */
            position?: string,
            confirmText?: ConfirmText
    }
    declare interface ConfirmText {
        okText: string,
            cancelText: string
    }

    /**
     * Toastr react component.
     */
    declare export default class ReduxToastr mixins R.Component<ToastrOptions, any>{}
    declare interface EmitterOptions {

        /**
         * Notification popup icon.
         * icon-close-round, icon-information-circle, icon-check-1, icon-exclamation-triangle, icon-exclamation-alert
         */
        icon?: string,

            /**
             * Timeout in miliseconds.
             */
            timeOut?: number,
            removeOnHover?: boolean,
            removeOnClick?: boolean,
            component?: R.Component<any, any>,
            onShowComplete(): void,
            onHideComplete(): void
    }
    declare interface ToastrConfirmOptions {
        onOk(): void,
            onCancel(): void
    }
    declare interface ToastrEmitter {

        /**
         * Used to provide a large amount of information.
         * It will not close unless a timeOut is provided.
         */
        message(title: string, message: string, options?: EmitterOptions): void,
            info(title: string, message: string, options?: EmitterOptions): void,
            success(title: string, message: string, options?: EmitterOptions): void,
            warning(title: string, message: string, options?: EmitterOptions): void,
            error(title: string, message: string, options?: EmitterOptions): void,

            /**
             * Clear all notifications
             */
            clean(): void,

            /**
             * Hook confirmation toastr with callback.
             */
            confirm(message: string, options: ToastrConfirmOptions): void
    }

    /**
     * Possible actions to dispatch.
     */
    declare interface Actions {
        addToastrAction: Redux.Action,
            clean: Redux.Action,
            remove: Redux.Action,
            success: Redux.Action,
            info: Redux.Action,
            warning: Redux.Action,
            error: Redux.Action,
            showConfirm: Redux.Action,
            hideConfirm: Redux.Action
    }
    declare export var actions: Redux.ActionCreator<Actions>;
    declare export var reducer: Redux.Reducer<any>;
    declare export var toastr: ToastrEmitter;
}