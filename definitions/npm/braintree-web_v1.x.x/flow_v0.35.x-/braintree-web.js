// @flow
/**
 * Flowtype definitions for braintree-web
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * 
 * @global  * 
 * @callback  callback
 * @param  `null` or `undefined` if there was no error.
 * @param  The successful result of the asynchronous function call (if data exists).
 * @description  The Node.js-style callback pattern used throughout the SDK.
 * @returns  
 */
declare type BraintreeWeb$callback = (err?: BraintreeError, data?: any) => void;
declare interface ApplePayPaymentRequest {
    total: {
            label: string,
            amount: string
        },
        countryCode: string,
        currencyCode: string,
        supportedNetworks: string[],
        merchantCapabilities: string[],
        billingContact?: any,
        shippingContact?: any,
        shippingMethods?: any,
        shippingType?: any,
        requiredBillingContactFields?: any,
        requiredShippingContactFields?: any
}
declare interface ApplePayPayload {
    merchantIdentifier: string,
        domainName: string,
        displayName: string
}
declare class ApplePaySession {
    constructor(version: number, request: ApplePayPaymentRequest): this;
    canMakePayments(): boolean;
    canMakePaymentsWithActiveCard(merchantIdentifier: string): boolean;
    completeMerchantValidation(merchantSession: any): void;
    abort(): void;
    begin(): void;
    completePayment(status: ApplePayStatusCodes): void;
    completePaymentMethodSelection(newTotal: any, newLineItems: any): void;
    completeShippingContactSelection(
        status: ApplePayStatusCodes,
        newShippingMethods: any,
        newTotal: any,
        newLineItems: any): void;
    completeShippingMethodSelection(status: ApplePayStatusCodes, newTotal: any, newLineItems: any): void;
    supportsVersion(version: number): boolean;
    oncancel: (event: any) => void;
    onpaymentauthorized: (event: any) => void;
    onpaymentmethodselected: (event: any) => void;
    onshippingcontactselected: (event: any) => void;
    onshippingmethodselected: (event: any) => void;
    onvalidatemerchant: (event: any) => void
}
/**
 * 
 * @class  * 
 * @global  * 
 * @param  Construction options
 * @classdesc  This class is used to report error conditions, frequently as the first parameter to callbacks throughout the Braintree SDK.
 * @description  <strong>You cannot use this constructor directly. Interact with instances of this class through {
 * @link  callback callbacks}.</strong>
 */
declare class BraintreeError {

    /**
     * 
     * @class  * 
     * @global  * 
     * @param  Construction options
     * @classdesc  This class is used to report error conditions, frequently as the first parameter to callbacks throughout the Braintree SDK.
     * @description  <strong>You cannot use this constructor directly. Interact with instances of this class through {
     * @link  callback callbacks}.</strong>
     */
    constructor(options: any): this;

    /**
     * 
     * @type  * 
     * @description  A code that corresponds to specific errors.
     */
    code: string;

    /**
     * 
     * @type  * 
     * @description  A short description of the error.
     */
    message: string;

    /**
     * 
     * @type  * 
     * @description  The type of error.
     */
    type: BraintreeError$Types;

    /**
     * 
     * @type  * 
     * @description  Additional information about the error, such as an underlying network error response.
     */
    details: any
}
/**
 * 
 * @module  braintree-web
 * @description  This is the top-level module exported by the Braintree JavaScript SDK. In a browser environment, this will be the global <code>braintree</code> object. In a CommonJS environment (like Browserify or Webpack), it will be the default export of the <code>braintree-web</code> package. In AMD environments (like RequireJS), it can be `require`d like other modules.
 * @example  * <caption>CommonJS</caption>
var braintree = require('braintree-web');

braintree.client.create(...);
 * @example  * <caption>In the browser</caption>
<script src="https://js.braintreegateway.com/web/3.0.2/js/client.min.js"></script>
<script>
window.braintree.client.create(...);
</script>
 * @example  * <caption>AMD</caption>
// main.js
require.config({
paths: {
braintreeClient: 'https://js.braintreegateway.com/web/3.0.2/js/client.min'
}
});

require(['braintreeClient'], function (braintreeClient) {
braintreeClient.create(...);
});
*/
declare interface BraintreeStatic {

    /**
     * 
     * @type  :braintree-web/client} 
     */
    client: BraintreeWeb$Client,

        /**
         * 
         * @type  :braintree-web/paypal} 
         */
        paypal: BraintreeWeb$PayPal,

        /**
         * 
         * @type  :braintree-web/hosted-fields} 
         */
        hostedFields: BraintreeWeb$HostedFields,

        /**
         * 
         * @type  :braintree-web/three-d-secure} 
         */
        threeDSecure: BraintreeWeb$ThreeDSecure,

        /**
         * 
         * @type  :braintree-web/data-collector} 
         */
        dataCollector: BraintreeWeb$DataCollector,

        /**
         * 
         * @type  :braintree-web/american-express} 
         */
        americanExpress: BraintreeWeb$AmericanExpress,

        /**
         * 
         * @type  :braintree-web/unionpay} 
         */
        unionpay: BraintreeWeb$UnionPay,

        /**
         * 
         * @type  :braintree-web/apple-pay} 
         */
        applePay: BraintreeWeb$ApplePay,

        /**
         * 
         * @description  The current version of the SDK, i.e. `3.0.2`.
         * @type  
         */
        VERSION: string
}
declare var braintree: BraintreeStatic;