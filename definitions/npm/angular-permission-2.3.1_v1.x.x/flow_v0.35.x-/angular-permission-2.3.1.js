/**
 * Flowtype definitions for angular-permission-2.3.1
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'permission' {
    declare export interface PermissionStore {

        /**
         * Allows to define permission on application configuration
         * @method  *
         * @param permissionName Name of defined permission
         * @param validationFunction Function used to validate if permission is valid
         */
        definePermission(
                name: string,
                validationFunction: (
                    stateParams?: undefined.IStateParamsService,
                    permission?: string) => boolean | angular$IPromise<any>): void,

            /**
             * Allows to define set of permissionNames with shared validation function on application configuration
             * @method  * 
             * @throws  {TypeError}
             * @param permissionNames Set of permission names
             * @param validationFunction Function used to validate if permission is valid
             */
            defineManyPermissions(
                permissions: string[],
                validationFunction: (
                    stateParams?: undefined.IStateParamsService,
                    permission?: string) => boolean | angular$IPromise<any>): void,
            clearStore(): void,

            /**
             * Deletes permission
             * @method  *
             * @param permissionName Name of defined permission
             */
            removePermissionDefinition(permission: string): void,

            /**
             * Checks if permission exists
             * @method  *
             * @param permissionName Name of defined permission
             * @returns  
             */
            hasPermissionDefinition(permissionName: string): boolean,

            /**
             * Returns all permissions
             * @method  *
             * @returns  Permissions collection
             */
            getStore(): Permission[]
    }
    declare export interface RoleStore {

        /**
         * Allows to define role
         * @method  *
         * @param roleName Name of defined role
         * @param permissions Set of permission names
         * @param validationFunction Function used to validate if permissions in role are valid
         */
        defineRole(
                role: string,
                permissions: Array<string>,
                validationFunction: RoleValidationFunction): void,

            /**
             * Allows to define role
             * @method  *
             * @param roleName Name of defined role
             * @param permissions Set of permission names
             */
            defineRole(role: string, permissions: Array<string>): void,

            /**
             * Checks if role is defined in store
             * @method  *
             * @param roleName Name of role
             * @returns  
             */
            hasRoleDefinition(role: string): boolean,

            /**
             * Returns role definition object by it's name
             * @method  *
             * @returns  Role definition object
             */
            getRoleDefinition(roleName: string): Role,

            /**
             * Removes all role definitions
             * @method  
             */
            clearStore(): void,

            /**
             * Deletes role from store
             * @method  *
             * @param roleName Name of defined permission
             */
            removeRoleDefinition(roleName: string): void,

            /**
             * Returns all role definitions
             * @method  *
             * @returns  Defined roles collection
             */
            getStore(): Role[]
    }
    declare export interface Role {
        roleName: string,
            permissionNames: string[],
            validationFunction?: RoleValidationFunction
    }
    declare export interface Permission {
        permissionName: string,
            validationFunction?: PermissionValidationFunction
    }
    declare interface RoleValidationFunction {
        (stateParams?: undefined.IStateParamsService, permission?: string): boolean | angular$IPromise<any >
    }
    declare interface PermissionValidationFunction {
        (stateParams?: undefined.IStateParamsService, permission?: string): boolean | angular$IPromise<any >
    }
    declare export type IPermissionState = {
        data?: any | DataWithPermissions
    }
    declare export interface DataWithPermissions {
        permissions?: {
            only?: (() => void) | Array<string>| angular$IPromise<any>,
            except?: (() => void) | Array<string>| angular$IPromise<any>,
            redirectTo: string | (() => string) | (() => PermissionRedirectConfigation) | {
                [index: string]: PermissionRedirectConfigation
            }
        }
    }
    declare export interface PermissionRedirectConfigation {
        state: string,
            params?: {},
            options?: undefined.IStateOptions
    }
}