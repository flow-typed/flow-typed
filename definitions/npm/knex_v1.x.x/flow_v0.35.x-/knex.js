/**
 * Flowtype definitions for knex
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'knex' {

    declare type Callback = Function;
    declare type Client = Function;
    declare type Value = string |
        number |
        boolean |
        Date |
        Array<string >
        |
        Array<number >
        |
        Array<Date >
        |
        Array<boolean >
        |
        Buffer |
        Knex$Raw;
    declare type ColumnName = string | Knex$Raw | Knex$QueryBuilder;
    declare type TableName = string | Knex$Raw | Knex$QueryBuilder;
    declare module.exports: typeof Knex
    declare interface Knex$QueryInterface {
        select: Knex$Select,
            as: Knex$As,
            columns: Knex$Select,
            column: Knex$Select,
            from: Knex$Table,
            into: Knex$Table,
            table: Knex$Table,
            distinct: Knex$Distinct,
            join: Knex$Join,
            joinRaw: Knex$JoinRaw,
            innerJoin: Knex$Join,
            leftJoin: Knex$Join,
            leftOuterJoin: Knex$Join,
            rightJoin: Knex$Join,
            rightOuterJoin: Knex$Join,
            outerJoin: Knex$Join,
            fullOuterJoin: Knex$Join,
            crossJoin: Knex$Join,
            where: Knex$Where,
            andWhere: Knex$Where,
            orWhere: Knex$Where,
            whereNot: Knex$Where,
            andWhereNot: Knex$Where,
            orWhereNot: Knex$Where,
            whereRaw: Knex$WhereRaw,
            orWhereRaw: Knex$WhereRaw,
            andWhereRaw: Knex$WhereRaw,
            whereWrapped: Knex$WhereWrapped,
            havingWrapped: Knex$WhereWrapped,
            whereExists: Knex$WhereExists,
            orWhereExists: Knex$WhereExists,
            whereNotExists: Knex$WhereExists,
            orWhereNotExists: Knex$WhereExists,
            whereIn: Knex$WhereIn,
            orWhereIn: Knex$WhereIn,
            whereNotIn: Knex$WhereIn,
            orWhereNotIn: Knex$WhereIn,
            whereNull: Knex$WhereNull,
            orWhereNull: Knex$WhereNull,
            whereNotNull: Knex$WhereNull,
            orWhereNotNull: Knex$WhereNull,
            whereBetween: Knex$WhereBetween,
            orWhereBetween: Knex$WhereBetween,
            andWhereBetween: Knex$WhereBetween,
            whereNotBetween: Knex$WhereBetween,
            orWhereNotBetween: Knex$WhereBetween,
            andWhereNotBetween: Knex$WhereBetween,
            groupBy: Knex$GroupBy,
            groupByRaw: Knex$RawQueryBuilder,
            orderBy: Knex$OrderBy,
            orderByRaw: Knex$RawQueryBuilder,
            union: Knex$Union,
            unionAll(callback: Function): Knex$QueryBuilder,
            having: Knex$Having,
            andHaving: Knex$Having,
            havingRaw: Knex$RawQueryBuilder,
            orHaving: Knex$Having,
            orHavingRaw: Knex$RawQueryBuilder,
            offset(offset: number): Knex$QueryBuilder,
            limit(limit: number): Knex$QueryBuilder,
            count(columnName?: string): Knex$QueryBuilder,
            min(columnName: string): Knex$QueryBuilder,
            max(columnName: string): Knex$QueryBuilder,
            sum(columnName: string): Knex$QueryBuilder,
            avg(columnName: string): Knex$QueryBuilder,
            increment(columnName: string, amount?: number): Knex$QueryBuilder,
            decrement(columnName: string, amount?: number): Knex$QueryBuilder,
            first(...columns: string[]): Knex$QueryBuilder,
            debug(enabled?: boolean): Knex$QueryBuilder,
            pluck(column: string): Knex$QueryBuilder,
            insert(data: any, returning?: string | string[]): Knex$QueryBuilder,
            update(data: any, returning?: string | string[]): Knex$QueryBuilder,
            update(
                columnName: string,
                value: Value,
                returning?: string | string[]): Knex$QueryBuilder,
            returning(column: string | string[]): Knex$QueryBuilder,
            del(returning?: string | string[]): Knex$QueryBuilder,
            delete(returning?: string | string[]): Knex$QueryBuilder,
            truncate(): Knex$QueryBuilder,
            transacting(trx: Knex$Transaction): Knex$QueryBuilder,
            connection(connection: any): Knex$QueryBuilder,
            clone(): Knex$QueryBuilder
    }

    declare interface Knex$As {
        (columnName: string): Knex$QueryBuilder
    }

    declare type Knex$Select = {} & Knex$ColumnNameQueryBuilder


    declare interface Knex$Table {
        (tableName: string): Knex$QueryBuilder,
        (callback: Function): Knex$QueryBuilder
    }

    declare type Knex$Distinct = {} & Knex$ColumnNameQueryBuilder


    declare interface Knex$Join {
        (raw: Knex$Raw): Knex$QueryBuilder,
        (tableName: TableName, callback: (joinClause: Knex$JoinClause) => any): Knex$QueryBuilder,
        (tableName: TableName, columns: {
            [key: string]: string | Knex$Raw
        }): Knex$QueryBuilder,
        (tableName: TableName, raw: Knex$Raw): Knex$QueryBuilder,
        (tableName: TableName, column1: string, column2: string): Knex$QueryBuilder,
        (tableName: TableName, column1: string, raw: Knex$Raw): Knex$QueryBuilder,
        (tableName: TableName, column1: string, operator: string, column2: string): Knex$QueryBuilder
    }

    declare interface Knex$JoinClause {
        on(raw: Knex$Raw): Knex$JoinClause,
            on(callback: Function): Knex$JoinClause,
            on(columns: {
                [key: string]: string | Knex$Raw
            }): Knex$JoinClause,
            on(column1: string, column2: string): Knex$JoinClause,
            on(column1: string, raw: Knex$Raw): Knex$JoinClause,
            on(column1: string, operator: string, column2: string): Knex$JoinClause,
            andOn(raw: Knex$Raw): Knex$JoinClause,
            andOn(callback: Function): Knex$JoinClause,
            andOn(columns: {
                [key: string]: string | Knex$Raw
            }): Knex$JoinClause,
            andOn(column1: string, column2: string): Knex$JoinClause,
            andOn(column1: string, raw: Knex$Raw): Knex$JoinClause,
            andOn(column1: string, operator: string, column2: string): Knex$JoinClause,
            orOn(raw: Knex$Raw): Knex$JoinClause,
            orOn(callback: Function): Knex$JoinClause,
            orOn(columns: {
                [key: string]: string | Knex$Raw
            }): Knex$JoinClause,
            orOn(column1: string, column2: string): Knex$JoinClause,
            orOn(column1: string, raw: Knex$Raw): Knex$JoinClause,
            orOn(column1: string, operator: string, column2: string): Knex$JoinClause,
            using(
                column: string | string[] | Knex$Raw | {
                    [key: string]: string | Knex$Raw
                }): Knex$JoinClause,
            type(type: string): Knex$JoinClause
    }

    declare interface Knex$JoinRaw {
        (tableName: string, binding?: Value): Knex$QueryBuilder
    }

    declare type Knex$Where = {
        (raw: Knex$Raw): Knex$QueryBuilder,
        (callback: (queryBuilder: Knex$QueryBuilder) => any): Knex$QueryBuilder,
        (object: Object): Knex$QueryBuilder,
        (columnName: string, value: Value): Knex$QueryBuilder,
        (columnName: string, operator: string, value: Value): Knex$QueryBuilder,
        (columnName: string, operator: string, query: Knex$QueryBuilder): Knex$QueryBuilder
    } & Knex$WhereRaw & Knex$WhereWrapped & Knex$WhereNull


    declare type Knex$WhereRaw = {
        (condition: boolean): Knex$QueryBuilder
    } & Knex$RawQueryBuilder


    declare interface Knex$WhereWrapped {
        (callback: Function): Knex$QueryBuilder
    }

    declare interface Knex$WhereNull {
        (columnName: string): Knex$QueryBuilder
    }

    declare interface Knex$WhereIn {
        (columnName: string, values: Value[]): Knex$QueryBuilder,
        (columnName: string, callback: Function): Knex$QueryBuilder,
        (columnName: string, query: Knex$QueryBuilder): Knex$QueryBuilder
    }

    declare interface Knex$WhereBetween {
        (columnName: string, range: [Value, Value]): Knex$QueryBuilder
    }

    declare interface Knex$WhereExists {
        (callback: Function): Knex$QueryBuilder,
        (query: Knex$QueryBuilder): Knex$QueryBuilder
    }

    declare type Knex$GroupBy = {} & Knex$RawQueryBuilder & Knex$ColumnNameQueryBuilder


    declare interface Knex$OrderBy {
        (columnName: string, direction?: string): Knex$QueryBuilder
    }

    declare interface Knex$Union {
        (callback: Function, wrap?: boolean): Knex$QueryBuilder,
        (callbacks: Function[], wrap?: boolean): Knex$QueryBuilder,
        (...callbacks: Function[]): Knex$QueryBuilder
    }

    declare type Knex$Having = {
        (tableName: string, column1: string, operator: string, column2: string): Knex$QueryBuilder
    } & Knex$RawQueryBuilder & Knex$WhereWrapped


    declare interface Knex$ColumnNameQueryBuilder {
        (...columnNames: ColumnName[]): Knex$QueryBuilder,
        (columnNames: ColumnName[]): Knex$QueryBuilder
    }

    declare interface Knex$RawQueryBuilder {
        (sql: string, ...bindings: Value[]): Knex$QueryBuilder,
        (sql: string, bindings: Value[]): Knex$QueryBuilder,
        (raw: Knex$Raw): Knex$QueryBuilder
    }

    declare type Knex$Raw = {
        wrap(before: string, after: string): Knex$Raw
    } & & Knex$ChainableInterface


    declare interface Knex$RawBuilder {
        (value: Value): Knex$Raw,
        (sql: string, ...bindings: Value[]): Knex$Raw,
        (sql: string, bindings: Value[]): Knex$Raw,
        (sql: string, bindings: Object): Knex$Raw
    }

    declare type Knex$QueryBuilder = {
        or: Knex$QueryBuilder,
        and: Knex$QueryBuilder,
        columnInfo(column?: string): Promise<Knex$ColumnInfo>,
        forUpdate(): Knex$QueryBuilder,
        forShare(): Knex$QueryBuilder,
        toSQL(): Knex$Sql,
        on(event: string, callback: Function): Knex$QueryBuilder
    } & Knex$QueryInterface & Knex$ChainableInterface


    declare interface Knex$Sql {
        method: string,
            options: any,
            bindings: Value[],
            sql: string
    }

    declare type Knex$ChainableInterface = {
        toQuery(): string,
        options(options: any): Knex$QueryBuilder,
        stream(
            options?: any,
            callback?: (builder: Knex$QueryBuilder) => any): Knex$QueryBuilder,
        stream(callback?: (builder: Knex$QueryBuilder) => any): Knex$QueryBuilder,
        pipe(writable: any): Knex$QueryBuilder,
        exec(callback: Function): Knex$QueryBuilder
    } & Promise


    declare type Knex$Transaction = {
        commit: any,
        rollback: any,
        raw: Knex$RawBuilder
    } & Knex$QueryBuilder


    declare type Knex$SchemaBuilder = {
        createTable(
            tableName: string,
            callback: (tableBuilder: Knex$CreateTableBuilder) => any): Knex$SchemaBuilder,
        createTableIfNotExists(
            tableName: string,
            callback: (tableBuilder: Knex$CreateTableBuilder) => any): Knex$SchemaBuilder,
        renameTable(oldTableName: string, newTableName: string): Promise<void>,
        dropTable(tableName: string): Knex$SchemaBuilder,
        hasTable(tableName: string): Promise<boolean>,
        hasColumn(tableName: string, columnName: string): Promise<boolean>,
        table(
            tableName: string,
            callback: (tableBuilder: Knex$AlterTableBuilder) => any): Promise<void>,
        dropTableIfExists(tableName: string): Promise<void>,
        raw(statement: string): Knex$SchemaBuilder,
        withSchema(schemaName: string): Knex$SchemaBuilder
    } & Promise


    declare interface Knex$TableBuilder {
        increments(columnName?: string): Knex$ColumnBuilder,
            bigIncrements(columnName?: string): Knex$ColumnBuilder,
            dropColumn(columnName: string): Knex$TableBuilder,
            dropColumns(...columnNames: string[]): Knex$TableBuilder,
            renameColumn(from: string, to: string): Knex$ColumnBuilder,
            integer(columnName: string): Knex$ColumnBuilder,
            bigInteger(columnName: string): Knex$ColumnBuilder,
            text(columnName: string, textType?: string): Knex$ColumnBuilder,
            string(columnName: string, length?: number): Knex$ColumnBuilder,
            float(columnName: string, precision?: number, scale?: number): Knex$ColumnBuilder,
            decimal(columnName: string, precision?: number, scale?: number): Knex$ColumnBuilder,
            boolean(columnName: string): Knex$ColumnBuilder,
            date(columnName: string): Knex$ColumnBuilder,
            dateTime(columnName: string): Knex$ColumnBuilder,
            time(columnName: string): Knex$ColumnBuilder,
            timestamp(columnName: string): Knex$ColumnBuilder,
            timestamps(): Knex$ColumnBuilder,
            binary(columnName: string): Knex$ColumnBuilder,
            enum(columnName: string, values: Value[]): Knex$ColumnBuilder,
            enu(columnName: string, values: Value[]): Knex$ColumnBuilder,
            json(columnName: string): Knex$ColumnBuilder,
            jsonb(columnName: string): Knex$ColumnBuilder,
            uuid(columnName: string): Knex$ColumnBuilder,
            comment(val: string): Knex$TableBuilder,
            specificType(columnName: string, type: string): Knex$ColumnBuilder,
            primary(columnNames: string[]): Knex$TableBuilder,
            index(
                columnNames: string[],
                indexName?: string,
                indexType?: string): Knex$TableBuilder,
            unique(columnNames: string[], indexName?: string): Knex$TableBuilder,
            foreign(column: string): Knex$ForeignConstraintBuilder,
            foreign(columns: string[]): Knex$MultikeyForeignConstraintBuilder,
            dropForeign(columnNames: string[], foreignKeyName?: string): Knex$TableBuilder,
            dropUnique(columnNames: string[], indexName?: string): Knex$TableBuilder,
            dropPrimary(constraintName?: string): Knex$TableBuilder
    }

    declare type Knex$CreateTableBuilder = {} & Knex$TableBuilder


    declare type Knex$MySqlTableBuilder = {
        engine(val: string): Knex$CreateTableBuilder,
        charset(val: string): Knex$CreateTableBuilder,
        collate(val: string): Knex$CreateTableBuilder
    } & Knex$CreateTableBuilder


    declare type Knex$AlterTableBuilder = {} & Knex$TableBuilder


    declare type Knex$MySqlAlterTableBuilder = {} & Knex$AlterTableBuilder


    declare interface Knex$ColumnBuilder {
        index(indexName?: string): Knex$ColumnBuilder,
            primary(): Knex$ColumnBuilder,
            unique(): Knex$ColumnBuilder,
            references(columnName: string): Knex$ReferencingColumnBuilder,
            onDelete(command: string): Knex$ColumnBuilder,
            onUpdate(command: string): Knex$ColumnBuilder,
            defaultTo(value: Value): Knex$ColumnBuilder,
            unsigned(): Knex$ColumnBuilder,
            notNullable(): Knex$ColumnBuilder,
            nullable(): Knex$ColumnBuilder,
            comment(value: string): Knex$ColumnBuilder
    }

    declare interface Knex$ForeignConstraintBuilder {
        references(columnName: string): Knex$ReferencingColumnBuilder
    }

    declare interface Knex$MultikeyForeignConstraintBuilder {
        references(columnNames: string[]): Knex$ReferencingColumnBuilder
    }

    declare type Knex$PostgreSqlColumnBuilder = {
        index(indexName?: string, indexType?: string): Knex$ColumnBuilder
    } & Knex$ColumnBuilder


    declare interface Knex$ReferencingColumnBuilder {
        inTable(tableName: string): Knex$ColumnBuilder
    }

    declare type Knex$AlterColumnBuilder = {} & Knex$ColumnBuilder


    declare type Knex$MySqlAlterColumnBuilder = {
        first(): Knex$AlterColumnBuilder,
        after(columnName: string): Knex$AlterColumnBuilder
    } & Knex$AlterColumnBuilder


    declare interface Knex$ColumnInfo {
        defaultValue: Value,
            type: string,
            maxLength: number,
            nullable: boolean
    }

    declare interface Knex$Config {
        debug?: boolean,
            client?: string,
            dialect?: string,
            connection?: string |
            Knex$ConnectionConfig |
            Knex$MariaSqlConnectionConfig |
            Knex$Sqlite3ConnectionConfig |
            Knex$SocketConnectionConfig,
            pool?: Knex$PoolConfig,
            migrations?: Knex$MigratorConfig,
            acquireConnectionTimeout?: number,
            useNullAsDefault?: boolean,
            searchPath?: string
    }

    declare interface Knex$ConnectionConfig {
        host: string,
            user: string,
            password: string,
            database: string,
            debug?: boolean
    }

    declare interface Knex$MariaSqlConnectionConfig {
        user?: string,
            password?: string,
            host?: string,
            port?: number,
            unixSocket?: string,
            protocol?: string,
            db?: string,
            keepQueries?: boolean,
            multiStatements?: boolean,
            connTimeout?: number,
            pingInterval?: number,
            secureAuth?: boolean,
            compress?: boolean,
            ssl?: boolean | Knex$MariaSslConfiguration,
            local_infile?: boolean,
            read_default_file?: string,
            read_default_group?: string,
            charset?: string,
            streamHWM?: number
    }

    declare interface Knex$MariaSslConfiguration {
        key?: string,
            cert?: string,
            ca?: string,
            capath?: string,
            cipher?: string,
            rejectUnauthorized?: boolean
    }


    /**
     * Used with SQLite3 adapter 
     */
    declare interface Knex$Sqlite3ConnectionConfig {
        filename: string,
            debug?: boolean
    }

    declare interface Knex$SocketConnectionConfig {
        socketPath: string,
            user: string,
            password: string,
            database: string,
            debug?: boolean
    }

    declare interface Knex$PoolConfig {
        name?: string,
            create?: Function,
            afterCreate?: Function,
            destroy?: Function,
            beforeDestroy?: Function,
            min?: number,
            max?: number,
            refreshIdle?: boolean,
            idleTimeoutMillis?: number,
            reapIntervalMillis?: number,
            returnToHead?: boolean,
            priorityRange?: number,
            validate?: Function,
            log?: boolean
    }

    declare interface Knex$MigratorConfig {
        directory?: string,
            extension?: string,
            tableName?: string,
            disableTransactions?: boolean
    }

    declare interface Knex$Migrator {
        make(name: string, config?: Knex$MigratorConfig): Promise<string>,
            latest(config?: Knex$MigratorConfig): Promise<any>,
            rollback(config?: Knex$MigratorConfig): Promise<any>,
            status(config?: Knex$MigratorConfig): Promise<number>,
            currentVersion(config?: Knex$MigratorConfig): Promise<string >
    }

    declare interface Knex$FunctionHelper {
        now(): Knex$Raw
    }
}