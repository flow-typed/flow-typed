/**
 * Flowtype definitions for multiparty
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'multiparty' {
    declare export class Form mixins events.EventEmitter {
        constructor(options?: FormOptions): this;

        /**
         * Parses an incoming node.js request containing form data.
         * This will cause form to emit events based off the incoming request
         * @param request 
         * @param callback 
         */
        parse(
            request: http.IncomingMessage,
            callback?: (error: Error, fields: any, files: any) => any): void
    }
    declare export interface File {

        /**
         * same as name - the field name for this file
         */
        fieldName: string,

            /**
             * the filename that the user reports for the file
             */
            originalFileName: string,

            /**
             * the absolute path of the uploaded file on disk
             */
            path: string,

            /**
             * the HTTP headers that were sent along with this file
             */
            headers: any,

            /**
             * size of the file in bytes
             */
            size: number
    }
    declare type Part = {

        /**
         * the headers for this part. For example, you may be interested in content-type
         */
        headers: any,

        /**
         * the field name for this part
         */
        name: string,

        /**
         * only if the part is an incoming file
         */
        filename: string,

        /**
         * the byte offset of this part in the request body
         */
        byteOffset: number,

        /**
         * assuming that this is the last part in the request, this is the size of this part in bytes.
         * You could use this, for example, to set the Content-Length header if uploading to S3.
        If the part had a Content-Length header then that value is used here instead.
        */
        byteCount: number
    }
    declare export interface FormOptions {

        /**
         * sets encoding for the incoming form fields. Defaults to utf8.
         */
        encoding?: string,

            /**
             * Limits the amount of memory all fields (not files) can allocate in bytes.
             * If this value is exceeded, an error event is emitted. The default size is 2MB.
             */
            maxFieldsSize?: number,

            /**
             * Limits the number of fields that will be parsed before emitting an error event.
             * A file counts as a field in this case. Defaults to 1000.
             */
            maxFields?: number,

            /**
             * Only relevant when autoFiles is true.
             * Limits the total bytes accepted for all files combined.
            If this value is exceeded, an error event is emitted.
            The default is Infinity.
            */
            maxFilesSize?: number,

            /**
             * Enables field events and disables part events for fields.
             * This is automatically set to true if you add a field listener.
             */
            autoFields?: boolean,

            /**
             * Enables file events and disables part events for files.
             * This is automatically set to true if you add a file listener.
             */
            autoFiles?: boolean,

            /**
             * Only relevant when autoFiles is true.
             * The directory for placing file uploads in.
            You can move them later using fs.rename(). Defaults to os.tmpDir().
            */
            uploadDir?: string
    }
}