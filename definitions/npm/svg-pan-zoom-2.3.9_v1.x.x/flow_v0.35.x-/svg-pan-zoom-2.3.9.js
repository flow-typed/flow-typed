/**
 * Flowtype definitions for svg-pan-zoom-2.3.9
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface SvgPanZoom$OptionConfig {
    panEnabled?: boolean,
        controlIconsEnabled?: boolean,
        zoomEnabled?: boolean,
        dblClickZoomEnabled?: boolean,
        zoomScaleSensitivity?: number,
        minZoom?: number,
        maxZoom?: number,
        fit?: boolean,
        center?: boolean,
        beforeZoom?: (scale: number) => void,
        onZoom?: (scale: number) => void,
        beforePan?: (point: SvgPanZoom$IPoint) => void,
        onPan?: (x: number, y: number) => void,
        refreshRate?: any
}

declare interface SvgPanZoom$IPoint {
    x: number,
        y: number
}

declare interface SvgPanZoom$ISvgPanZoom {

    /**
     * Creates a new SvgPanZoom instance with given element selector.
     * @param svg selector of the tag on which it is to be applied.
     * @param options provides customization options at the initialization of the object.
     */
    (svg: any, options?: SvgPanZoom$OptionConfig): SvgPanZoom$ISvgPanZoom,

    /**
     * Enables Panning on svg element
     */
    enablePan(): void,

        /**
         * Disables panning on svg element
         */
        disablePan(): void,

        /**
         * Checks if Panning is enabled or not
         * @return  true or false based on panning settings
         */
        isPanEnabled(): boolean,
        setBeforePan(fn: (point: SvgPanZoom$IPoint) => void): void,
        setOnPan(fn: (x: number, y: number) => void): void,
        enableZoom(): void,
        disableZoom(): void,
        isZoomEnabled(): boolean,
        enableControlIcons(): void,
        disableControlIcons(): void,
        isControlIconsEnabled(): boolean,
        enableDblClickZoom(): void,
        disableDblClickZoom(): void,
        setZoomScaleSensitivity(scale: number): void,
        setMinZoom(zoom: number): void,
        setMaxZoom(zoom: number): void,
        setBeforeZoom(fn: (scale: number) => void): void,
        setOnZoom(fn: (scale: number) => void): void,
        zoom(scale: number): void,
        zoomIn(): void,
        zoomOut(): void,
        zoomBy(scale: number): void,
        resetZoom(): void,

        /**
         * Get zoom scale/level
         * @return  zoom scale
         */
        getZoom(): number,

        /**
         * Adjust viewport size (only) so it will fit in SVG
         * Does not center image
         * @param  drop viewBox cache and recalculate SVG's viewport sizes. Default false
         */
        fit(dropCache?: boolean): void,

        /**
         * Adjust viewport pan (only) so it will be centered in SVG
         * Does not zoom/fit image
         * @param  drop viewBox cache and recalculate SVG's viewport sizes. Default false
         */
        center(dropCache?: boolean): void,

        /**
         * Recalculates cached svg dimensions and controls position
         */
        resize(): void,

        /**
         * Pan to a rendered position
         * @param  {x: 0, y: 0}
         */
        pan(point: SvgPanZoom$IPoint): void,

        /**
         * Relatively pan the graph by a specified rendered position vector
         * @param  {x: 0, y: 0}
         */
        panBy(point: SvgPanZoom$IPoint): void,

        /**
         * Get pan vector
         * @return  {x: 0, y: 0}
         */
        getPan(): SvgPanZoom$IPoint,
        zoomAtPoint(scale: number, point: SvgPanZoom$IPoint): boolean,
        zoomAtPointBy(scale: number, point: SvgPanZoom$IPoint): boolean
}
declare var svgPanZoom: SvgPanZoom$ISvgPanZoom;