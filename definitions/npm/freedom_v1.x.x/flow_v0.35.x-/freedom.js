// @flow
/**
 * Flowtype definitions for freedom
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'Social' {
    declare interface ClientState {
        userId: string,
            clientId: string,
            status: string,
            timestamp: number
    }
    declare interface UserProfile {
        userId: string,
            name: string,
            status?: number,
            url?: string,
            imageData?: string,
            timestamp?: number
    }
    declare interface Users {
        [userId: string]: UserProfile
    }
    declare interface Clients {
        [clientId: string]: ClientState
    }
    declare interface IncomingMessage {
        from: ClientState,
            message: string
    }
    declare interface LoginRequest {
        agent: string,
            version: string,
            url: string,
            interactive: boolean,
            rememberLogin: boolean
    }
    declare interface Social {
        on(eventType: string, f: Function): void,
            on(eventType: "onMessage", f: (message: IncomingMessage) => void): void,
            on(eventType: "onUserProfile", f: (profile: UserProfile) => void): void,
            on(eventType: "onClientState", f: (status: ClientState) => void): void,
            once(eventType: string, f: Function): void,
            login(loginRequest: LoginRequest): Promise<ClientState>,
            getUsers(): Promise<Users>,
            getClients(): Promise<Clients>,
            sendMessage(destinationId: string, message: string): Promise<void>,
            logout(): Promise<void>,
            clearCachedCredentials(): Promise<void >
    }
}