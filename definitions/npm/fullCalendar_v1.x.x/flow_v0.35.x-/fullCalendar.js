/**
 * Flowtype definitions for fullCalendar
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface FullCalendar$Calendar {

    /**
     * Formats a Date object into a string.
     */
    formatDate(date: Date, format: string, options?: FullCalendar$Options): string,

        /**
         * Formats a date range (two Date objects) into a string.
         */
        formatDates(
            date1: Date,
            date2: Date,
            format: string,
            options?: FullCalendar$Options): string,

        /**
         * Parses a string into a Date object.
         */
        parseDate(dateString: string, ignoreTimezone?: boolean): Date,

        /**
         * Parses an ISO8601 string into a Date object.
         */
        parseISO8601(dateString: string, ignoreTimezone?: boolean): Date,

        /**
         * Gets the version of Fullcalendar
         */
        version: string
}

declare export interface FullCalendar$BusinessHours {
    start: moment.Duration,
        end: moment.Duration,
        dow: Array<number >
}

declare export interface FullCalendar$Timespan {
    start: moment.Moment,
        end: moment.Moment
}

declare export type FullCalendar$Options = {
    header?: {
        left: string,
        center: string,
        right: string
    },
    theme?: boolean,
    buttonIcons?: {
        prev: string,
        next: string
    },
    firstDay?: number,
    isRTL?: boolean,
    weekends?: boolean,
    hiddenDays?: number[],
    weekMode?: string,
    weekNumbers?: boolean,
    weekNumberCalculation?: any,
    businessHours?: boolean | FullCalendar$BusinessHours,
    height?: number,
    contentHeight?: number,
    aspectRatio?: number,
    handleWindowResize?: boolean,
    viewRender?: (view: FullCalendar$ViewObject, element: JQuery) => void,
    viewDestroy?: (view: FullCalendar$ViewObject, element: JQuery) => void,
    dayRender?: (date: Date, cell: HTMLTableDataCellElement) => void,
    windowResize?: (view: FullCalendar$ViewObject) => void,
    timezone?: string | boolean,
    now?: moment.Moment | Date | string | (() => moment.Moment),
    defaultView?: string,
    defaultDate?: moment.Moment | Date | string,
    year?: number,
    month?: number,
    date?: number,
    timeFormat?: any,
    columnFormat?: any,
    titleFormat?: any,
    buttonText?: FullCalendar$ButtonTextObject,
    monthNames?: Array<string>,
    monthNamesShort?: Array<string>,
    dayNames?: Array<string>,
    dayNamesShort?: Array<string>,
    weekNumberTitle?: string,
    dayClick?: (
        date: Date,
        allDay: boolean,
        jsEvent: MouseEvent,
        view: FullCalendar$ViewObject) => void,
    eventClick?: (
        event: FullCalendar$EventObject,
        jsEvent: MouseEvent,
        view: FullCalendar$ViewObject) => any,
    eventMouseover?: (
        event: FullCalendar$EventObject,
        jsEvent: MouseEvent,
        view: FullCalendar$ViewObject) => void,
    eventMouseout?: (
        event: FullCalendar$EventObject,
        jsEvent: MouseEvent,
        view: FullCalendar$ViewObject) => void,

    /**
     * This has one of the following types:
     * 
    - EventObject[]
    - string (JSON feed)
    - (start: Date | string, end: Date | string, callback: {(events: EventObject[]) => void;}) => void;
    */
    events?: any,

    /**
     * An array, each element being one of the following types:
     * 
    - EventSource
    - EventObject[]
    - string (JSON feed)
    - (start: Date | string, end: Date | string, callback: {(events: EventObject[]) => void;}) => void;
    */
    eventSources?: any[],
    allDayDefault?: boolean,
    ignoreTimezone?: boolean,
    startParam?: string,
    endParam?: string,
    lazyFetching?: boolean,
    eventDataTransform?: (eventData: any) => FullCalendar$EventObject,
    loading?: (isLoading: boolean, view: FullCalendar$ViewObject) => void,
    eventColor?: string,
    eventBackgroundColor?: string,
    eventBorderColor?: string,
    eventTextColor?: string,
    eventRender?: (
        event: FullCalendar$EventObject,
        element: HTMLDivElement,
        view: FullCalendar$ViewObject) => void,
    eventAfterRender?: (
        event: FullCalendar$EventObject,
        element: HTMLDivElement,
        view: FullCalendar$ViewObject) => void,
    eventAfterAllRender?: (view: FullCalendar$ViewObject) => void,
    eventDestroy?: (
        event: FullCalendar$EventObject,
        element: JQuery,
        view: FullCalendar$ViewObject) => void
} & FullCalendar$AgendaOptions & FullCalendar$EventDraggingResizingOptions & FullCalendar$DroppingExternalElementsOptions & FullCalendar$SelectionOptions


declare export interface FullCalendar$ViewOptionHash {
    month?: any,
        week?: any,
        day?: any,
        agenda?: any,
        agendaDay?: any,
        agendaWeek?: any,
        basic?: any,
        basicDay?: any,
        basicWeek?: any, ?
        : any
}


/**
 * Agenda Options - http://arshaw.com/fullcalendar/docs/agenda/
 */
declare export interface FullCalendar$AgendaOptions {
    allDaySlot?: boolean,
        allDayText?: string,
        slotDuration?: moment.Duration,
        slotLabelFormat?: string,
        slotLabelInterval?: moment.Duration,
        snapDuration?: moment.Duration,
        scrollTime?: moment.Duration,
        minTime?: moment.Duration,
        maxTime?: moment.Duration,
        slotEventOverlap?: boolean
}

declare export interface FullCalendar$EventDraggingResizingOptions {
    editable?: boolean,
        eventStartEditable?: boolean,
        eventDurationEditable?: boolean,
        dragRevertDuration?: number,
        dragOpacity?: number,
        dragScroll?: boolean,
        eventOverlap?: boolean | ((
            stillEvent: FullCalendar$EventObject,
            movingEvent: FullCalendar$EventObject) => boolean),
        eventConstraint?: FullCalendar$BusinessHours | FullCalendar$Timespan,
        eventDragStart?: (
            event: FullCalendar$EventObject,
            jsEvent: MouseEvent,
            ui: any,
            view: FullCalendar$ViewObject) => void,
        eventDragStop?: (
            event: FullCalendar$EventObject,
            jsEvent: MouseEvent,
            ui: any,
            view: FullCalendar$ViewObject) => void,
        eventDrop?: (
            event: FullCalendar$EventObject,
            delta: moment.Duration,
            revertFunc: Function,
            jsEvent: Event,
            ui: any,
            view: FullCalendar$ViewObject) => void,
        eventResizeStart?: (
            event: FullCalendar$EventObject,
            jsEvent: MouseEvent,
            ui: any,
            view: FullCalendar$ViewObject) => void,
        eventResizeStop?: (
            event: FullCalendar$EventObject,
            jsEvent: MouseEvent,
            ui: any,
            view: FullCalendar$ViewObject) => void,
        eventResize?: (
            event: FullCalendar$EventObject,
            delta: moment.Duration,
            revertFunc: Function,
            jsEvent: Event,
            ui: any,
            view: FullCalendar$ViewObject) => void
}

declare export interface FullCalendar$SelectionOptions {
    selectable?: boolean,
        selectHelper?: boolean | ((start: moment.Moment, end: moment.Moment) => HTMLElement),
        unselectAuto?: boolean,
        unselectCancel?: string,
        selectOverlap?: boolean | ((event: FullCalendar$EventObject) => boolean),
        selectConstraint?: FullCalendar$Timespan | FullCalendar$BusinessHours,
        select?: (
            start: moment.Moment,
            end: moment.Moment,
            jsEvent: MouseEvent,
            view: FullCalendar$ViewObject,
            resource?: any) => void,
        unselect?: (view: FullCalendar$ViewObject, jsEvent: Event) => void
}

declare export interface FullCalendar$DroppingExternalElementsOptions {
    droppable?: boolean,
        dropAccept?: string | ((draggable: any) => boolean),
        drop?: (date: moment.Moment, jsEvent: MouseEvent, ui: any) => void,
        eventReceive?: (event: FullCalendar$EventObject) => void
}

declare export interface FullCalendar$ButtonTextObject {
    prev?: string,
        next?: string,
        prevYear?: string,
        nextYear?: string,
        today?: string,
        month?: string,
        week?: string,
        day?: string
}

declare export type FullCalendar$EventObject = {
    id?: any,
    title: string,
    allDay?: boolean,
    url?: string,
    className?: any,
    editable?: boolean,
    source?: FullCalendar$EventSource,
    color?: string,
    backgroundColor?: string,
    borderColor?: string,
    textColor?: string,
    rendering?: string
} & FullCalendar$Timespan


declare export type FullCalendar$ViewObject = {
    name: string,
    title: string,
    intervalStart: moment.Moment,
    intervalEnd: moment.Moment
} & FullCalendar$Timespan


declare export type FullCalendar$EventSource = {

    /**
     * This has one of the following types:
     * 
    - EventObject[]
    - string (JSON feed)
    - (start: Date | string, end: Date | string, callback: {(events: EventObject[]) => void;}) => void;
    */
    events?: any,
    color?: string,
    backgroundColor?: string,
    borderColor?: string,
    textColor?: string,
    className?: any,
    editable?: boolean,
    allDayDefault?: boolean,
    ignoreTimezone?: boolean,
    eventTransform?: any,
    startParam?: string,
    endParam?: string
} & JQueryAjaxSettings
declare interface JQuery {

    /**
     * Get/Set option value
     */
    fullCalendar(method: "option", option: string, value?: any): void,

        /**
         * Immediately forces the calendar to render and/or readjusts its size.
         */
        fullCalendar(method: "render"): void,

        /**
         * Restores the element to the state before FullCalendar was initialized.
         */
        fullCalendar(method: "destroy"): void,

        /**
         * Returns the View Object for the current view.
         */
        fullCalendar(method: "getView"): FullCalendar$ViewObject,

        /**
         * Immediately switches to a different view.
         */
        fullCalendar(method: "changeView", viewName: string): void,

        /**
         * Moves the calendar one step back (either by a month, week, or day).
         */
        fullCalendar(method: "prev"): void,

        /**
         * Moves the calendar one step forward (either by a month, week, or day).
         */
        fullCalendar(method: "next"): void,

        /**
         * Moves the calendar back one year.
         */
        fullCalendar(method: "prevYear"): void,

        /**
         * Moves the calendar forward one year.
         */
        fullCalendar(method: "nextYear"): void,

        /**
         * Moves the calendar to the current date.
         */
        fullCalendar(method: "today"): void,

        /**
         * Moves the calendar to an arbitrary year/month/date.
         */
        fullCalendar(method: "gotoDate", year: number, month?: number, date?: number): void,

        /**
         * Moves the calendar to an arbitrary date.
         */
        fullCalendar(method: "gotoDate", date: Date | string): void,

        /**
         * Moves the calendar forward/backward an arbitrary amount of time.
         */
        fullCalendar(method: "incrementDate", year: number, month?: number, date?: number): void,

        /**
         * Returns a Date object for the current date of the calendar.
         */
        fullCalendar(method: "getDate"): Date,

        /**
         * A method for programmatically selecting a period of time.
         */
        fullCalendar(method: "select", startDate: Date, endDate: Date, allDay: boolean): void,

        /**
         * A method for programmatically clearing the current selection.
         */
        fullCalendar(method: "unselect"): void,

        /**
         * Reports changes to an event and renders them on the calendar.
         */
        fullCalendar(method: "updateEvent", event: FullCalendar$EventObject): void,

        /**
         * Retrieves events that FullCalendar has in memory.
         */
        fullCalendar(method: "clientEvents", idOrfilter?: any): Array<FullCalendar$EventObject>,

        /**
         * Retrieves events that FullCalendar has in memory.
         */
        fullCalendar(
            method: "clientEvents",
            idOrfilter?: (e: FullCalendar$EventObject) => boolean): Array<FullCalendar$EventObject>,

        /**
         * Removes events from the calendar.
         */
        fullCalendar(method: "removeEvents", idOrfilter?: any): void,

        /**
         * Removes events from the calendar.
         */
        fullCalendar(
            method: "removeEvents",
            idOrfilter?: (e: FullCalendar$EventObject) => boolean): void,

        /**
         * Refetches events from all sources and rerenders them on the screen.
         */
        fullCalendar(method: "refetchEvents"): void,

        /**
         * Dynamically adds an event source.
         */
        fullCalendar(method: "addEventSource", source: any): void,

        /**
         * Dynamically removes an event source.
         */
        fullCalendar(method: "removeEventSource", source: any): void,

        /**
         * Renders a new event on the calendar.
         */
        fullCalendar(method: "renderEvent", event: FullCalendar$EventObject, stick?: boolean): void,

        /**
         * Rerenders all events on the calendar.
         */
        fullCalendar(method: "rerenderEvents"): void,

        /**
         * Create calendar object
         */
        fullCalendar(options: FullCalendar$Options): JQuery,

        /**
         * Generic method function
         */
        fullCalendar(method: string, arg1: any, arg2: any, arg3: any): void
}
declare interface JQueryStatic {
    fullCalendar: FullCalendar$Calendar
}