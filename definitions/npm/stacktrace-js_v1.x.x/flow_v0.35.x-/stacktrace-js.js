/**
 * Flowtype definitions for stacktrace-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$StackTrace: {
    get: typeof StackTrace$get,
    fromError: typeof StackTrace$fromError,
    generateArtificially: typeof StackTrace$generateArtificially,
    instrument: typeof StackTrace$instrument,
    deinstrument: typeof StackTrace$deinstrument,
    report: typeof StackTrace$report,
}
declare
export interface StackTrace$SourceCache {
    [key: string]: string | Promise<string >
}


/**
 * Options for StackTrace
 * @param filter Function(StackFrame => Boolean) - Only include stack entries matching for which filter returns true
 * @param sourceCache Object (String URL => String Source) - Pre-populate source cache to avoid network requests
 * @param offline Boolean (default: false) - Set to true to prevent all network requests
 */
declare
export interface StackTrace$StackTraceOptions {
    filter?: (stackFrame: StackTrace$StackFrame) => boolean,
        sourceCache?: StackTrace$SourceCache,
        offline?: boolean
}

declare
export interface StackTrace$StackFrame {
    constructor(
            functionName: string,
            args: any,
            fileName: string,
            lineNumber: number,
            columnNumber: number): StackTrace$StackFrame,
        functionName: string,
        args: any,
        fileName: string,
        lineNumber: number,
        columnNumber: number,
        source: string,
        isEval: boolean,
        isNative: boolean,
        toString(): string
}


/**
 * Get a backtrace from invocation point.
 * @param options Options Object
 * @return  Array[StackFrame]
 */
declare
export function StackTrace$get(options?: StackTrace$StackTraceOptions): Promise<StackTrace$StackFrame[] >


    /**
     * Given an error object, parse it.
     * @param error Error object
     * @param options Object for options
     * @return  Array[StackFrame]
     */
    declare
export function StackTrace$fromError(
    error: Error,
    options?: StackTrace$StackTraceOptions): Promise<StackTrace$StackFrame[] >


    /**
     * Use StackGenerator to generate a backtrace.
     * @param options Object options
     * @returns  Array[StackFrame]
     */
    declare
export function StackTrace$generateArtificially(options?: StackTrace$StackTraceOptions): Promise<StackTrace$StackFrame[] >


    /**
     * Given a function, wrap it such that invocations trigger a callback that
     * is called with a stack trace.
     * @param  to be instrumented
     * @param  function to call with a stack trace on invocation
     * @param  optional function to call with error if unable to get stack trace.
     * @param  optional context object (e.g. window)
     * @return  instrumented function
     */
    declare
export function StackTrace$instrument<TFunc>(
    fn: TFunc,
    callback: (stackFrames: StackTrace$StackFrame[]) => void,
    errback?: (error: Error) => void,
    thisArg?: any): TFunc


/**
 * Given a function that has been instrumented,
 * revert the function to it's original (non-instrumented) state.
 * @param fn * 
 * @return  original function
 */
declare
export function StackTrace$deinstrument<TFunc>(fn: TFunc): TFunc


/**
 * Given an Array of StackFrames, serialize and POST to given URL.
 * @param stackframes - Array[StackFrame]
 * @param url - URL as String
 * @return  Promise<string>
 */
declare
export function StackTrace$report(stackframes: StackTrace$StackFrame[], url: string): Promise<string>declare module 'stacktrace-js' {
    declare module.exports: typeof StackTrace
}