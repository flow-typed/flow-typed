/**
 * Flowtype definitions for nock
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'nock' {
    declare function nock(basePath: string | RegExp, options?: nock$Options): nock$Scope

    declare var npm$namespace$nock: {
        cleanAll: typeof nock$cleanAll,
        activate: typeof nock$activate,
        isActive: typeof nock$isActive,
        isDone: typeof nock$isDone,
        pendingMocks: typeof nock$pendingMocks,
        removeInterceptor: typeof nock$removeInterceptor,
        disableNetConnect: typeof nock$disableNetConnect,
        enableNetConnect: typeof nock$enableNetConnect,
        load: typeof nock$load,
        loadDefs: typeof nock$loadDefs,
        define: typeof nock$define,
        restore: typeof nock$restore,
    }
    declare export function nock$cleanAll(): void

    declare export function nock$activate(): void

    declare export function nock$isActive(): boolean

    declare export function nock$isDone(): boolean

    declare export function nock$pendingMocks(): void

    declare export function nock$removeInterceptor(interceptor: nock$Interceptor | nock$RequestOptions): boolean

    declare export function nock$disableNetConnect(): void

    declare export function nock$enableNetConnect(matcher?: string | RegExp): void

    declare export function nock$load(path: string): nock$Scope[]

    declare export function nock$loadDefs(path: string): nock$NockDefinition[]

    declare export function nock$define(defs: nock$NockDefinition[]): nock$Scope[]

    declare export var emitter: NodeJS.EventEmitter;

    declare export var recorder: nock$Recorder;

    declare export function nock$restore(): void

    declare export var back: nock$NockBack;

    declare type nock$HttpHeaders = {
        [key: string]: string | {
            (req: any, res: any, body: string): any
        }
    };

    declare type nock$InterceptFunction = (
        uri: string | RegExp | {
            (uri: string): boolean
        },
        requestBody?: string | RegExp | {
            (body: any): boolean
        } | any) => nock$Interceptor;

    declare export type nock$ReplyCallback = (err: any, result: nock$ReplyCallbackResult) => void;

    declare type nock$ReplyCallbackResult = string | [number, string | any] | [number, string | any, nock$HttpHeaders] | any;

    declare export type nock$Scope = {
        get: nock$InterceptFunction,
        post: nock$InterceptFunction,
        put: nock$InterceptFunction,
        head: nock$InterceptFunction,
        patch: nock$InterceptFunction,
        merge: nock$InterceptFunction,
        delete: nock$InterceptFunction,
        intercept: (
            uri: string | RegExp | {
                (uri: string): boolean
            },
            method: string,
            requestBody?: string | RegExp | {
                (body: any): boolean
            } | any,
            options?: nock$Options) => nock$Interceptor,
        defaultReplyHeaders(headers: nock$HttpHeaders): this,
        matchHeader(name: string, value: string | RegExp | {
            (value: string): boolean
        }): this,
        filteringPath(regex: RegExp, replace: string): this,
        filteringPath(fn: (path: string) => string): this,
        filteringRequestBody(regex: RegExp, replace: string): this,
        filteringRequestBody(fn: (body: string) => string): this,
        log(out: () => void): this,
        persist(): this,
        shouldPersist(): boolean,
        replyContentLength(): this,
        replyDate(d?: Date): this,
        done(): void,
        isDone(): boolean,
        restore(): void,
        pendingMocks(): string[]
    }

    declare export interface nock$Interceptor {
        query(params: boolean | {
                (querObject: any): boolean
            } | any): this,
            reply(
                responseCode: number,
                body?: string | any,
                headers?: nock$HttpHeaders): nock$Scope,
            reply(
                responseCode: number,
                callback: (uri: string, body: string, cb?: nock$ReplyCallback) => nock$ReplyCallbackResult,
                headers?: nock$HttpHeaders): nock$Scope,
            reply(
                callback: (uri: string, body: string, cb?: nock$ReplyCallback) => nock$ReplyCallbackResult,
                headers?: nock$HttpHeaders): nock$Scope,
            replyWithError(errorMessage: string | any): nock$Scope,
            replyWithFile(responseCode: number, fileName: string, headers?: nock$HttpHeaders): nock$Scope,
            basicAuth(options: {
                user: string,
                pass?: string
            }): this,
            times(newCounter: number): this,
            once(): this,
            twice(): this,
            thrice(): this,
            delay(opts: number | {
                head?: number,
                body?: number
            }): this,
            delayBody(timeMs: number): this,
            delayConnection(timeMs: number): this,
            getTotalDelay(): number,
            socketDelay(timeMs: number): this
    }

    declare export interface nock$Options {
        allowUnmocked?: boolean,
            reqheaders?: {
                [key: string]: string | RegExp | {
                    (headerValue: string): boolean
                }
            },
            badheaders?: string[],
            filteringScope?: {
                (scope: string): boolean
            }
    }

    declare export interface nock$RequestOptions {
        proto?: string,
            _https_?: boolean,
            hostname?: string,
            host?: string,
            port?: number,
            method?: string,
            path?: string
    }

    declare export interface nock$Recorder {
        rec(options?: boolean | nock$RecorderOptions): void,
            clear(): void,
            play(): string[] | nock$NockDefinition[]
    }

    declare export interface nock$RecorderOptions {
        dont_print?: boolean,
            output_objects?: boolean,
            enable_reqheaders_recording?: boolean,
            logging?: (content: string) => void,
            use_separator?: boolean
    }

    declare export interface nock$NockDefinition {
        scope: string,
            port?: number | string,
            method?: string,
            path: string,
            body?: string | any,
            status?: number,
            response?: string | any,
            headers?: nock$HttpHeaders,
            reqheaders?: {
                [key: string]: string | RegExp | {
                    (headerValue: string): boolean
                }
            },
            options?: nock$Options
    }

    declare export type nock$NockBackMode = "wild" | "dryrun" | "record" | "lockdown";

    declare export interface nock$NockBack {
        fixtures: string,
            setMode(mode: nock$NockBackMode): void,
            (fixtureName: string, nockedFn: (nockDone: () => void) => void): void,
            (fixtureName: string, options: nock$NockBackOptions, nockedFn: (nockDone: () => void) => void): void
    }

    declare export interface nock$NockBackOptions {
        before?: (def: nock$NockDefinition) => void,
            after?: (scope: nock$Scope) => void,
            afterRecord?: (defs: nock$NockDefinition[]) => nock$NockDefinition[],
            recorder?: nock$RecorderOptions
    }
}