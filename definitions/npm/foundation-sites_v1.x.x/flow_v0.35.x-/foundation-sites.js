/**
 * Flowtype definitions for foundation-sites
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface FoundationSites$Abide {
    requiredChecked(element: Object): boolean,
        findFormError($el: Object): Object,
        findLabel(element: Object): boolean,
        addErrorClasses(element: Object): void,
        removeErrorClasses(element: Object): void,
        validateInput(element: Object, form: Object): void,
        validateForm(element: Object): void,
        validateText(element: Object): boolean,
        validateRadio(group: string): boolean,
        matchValidation($el: Object, validators: string, required: boolean): boolean,
        resetForm($form: Object): void,
        destroy(): void
}

declare interface FoundationSites$IAbidePatterns {
    alpha?: RegExp,
        alpha_numeric?: RegExp,
        integer?: RegExp,
        number?: RegExp,
        card?: RegExp,
        cvv?: RegExp,
        email?: RegExp,
        url?: RegExp,
        domain?: RegExp,
        datetime?: RegExp,
        date?: RegExp,
        time?: RegExp,
        dateISO?: RegExp,
        month_day_year?: RegExp,
        day_month_year?: RegExp,
        color?: RegExp
}

declare interface FoundationSites$IAbideOptions {
    validateOn?: string,
        labelErrorClass?: string,
        inputErrorClass?: string,
        formErrorSelector?: string,
        formErrorClass?: string,
        liveValidate?: boolean,
        validators?: any
}

declare interface FoundationSites$Accordion {
    toggle($target: JQuery): void,
        down($target: JQuery, firstTime: boolean): void,
        up($target: JQuery): void,
        destroy(): void
}

declare interface FoundationSites$IAccordionOptions {
    slideSpeed?: number,
        multiOpen?: boolean,
        allowAllClosed?: boolean
}

declare interface FoundationSites$AccordionMenu {
    hideAll(): void,
        toggle($target: JQuery): void,
        down($target: JQuery, firstTime: boolean): void,
        up($target: JQuery): void,
        destroy(): void
}

declare interface FoundationSites$IAccordionMenuOptions {
    slideSpeed?: number,
        multiOpen?: boolean
}

declare interface FoundationSites$Drilldown {
    _hideAll(): void,
        _back($elem: JQuery): void,
        _show($elem: JQuery): void,
        _hide($elem: JQuery): void,
        destroy(): void
}

declare interface FoundationSites$IDrilldownOptions {
    backButton?: string,
        wrapper?: string,
        closeOnClick?: boolean
}

declare interface FoundationSites$Dropdown {
    getPositionClass(): string,
        open(): void,
        close(): void,
        toggle(): void,
        destroy(): void
}

declare interface FoundationSites$IDropdownOptions {
    hoverDelay?: number,
        hover?: boolean,
        hoverPane?: boolean,
        vOffset?: number,
        hOffset?: number,
        positionClass?: string,
        trapFocus?: boolean,
        autoFocus?: boolean,
        closeOnClick?: boolean
}

declare interface FoundationSites$DropdownMenu {
    destroy(): void
}

declare interface FoundationSites$IDropdownMenuOptions {
    disableHover?: boolean,
        autoclose?: boolean,
        hoverDelay?: number,
        clickOpen?: boolean,
        closingTime?: number,
        alignment?: string,
        closeOnClick?: boolean,
        verticalClass?: string,
        rightClass?: string,
        forceFollow?: boolean
}

declare interface FoundationSites$Equalizer {
    getHeights(element: Object): Array<any>,
        getHeightsByRow(cb: Function): void,
        applyHeight(heights: Array<any>): void,
        applyHeightByRow(groups: Array<any>): void,
        destroy(): void
}

declare interface FoundationSites$IEqualizerOptions {
    equalizeOnStack?: boolean,
        equalizeByRow?: boolean,
        equalizeOn?: string
}

declare interface FoundationSites$Interchange {
    replace(path: string): void,
        destroy(): void
}

declare interface FoundationSites$IInterchangeOptions {
    rules?: Array<any >
}

declare interface FoundationSites$Magellan {
    calcPoints(): void,
        reflow(): void,
        destroy(): void
}

declare interface FoundationSites$IMagellanOptions {
    animationDuration?: number,
        animationEasing?: string,
        threshold?: number,
        activeClass?: string,
        deepLinking?: boolean,
        barOffset?: number
}

declare interface FoundationSites$OffCanvas {
    reveal(isRevealed: boolean): void,
        open(event: Object, trigger: JQuery): void,
        close(): void,
        toggle(event: Object, trigger: JQuery): void,
        destroy(): void
}

declare interface FoundationSites$IOffCanvasOptions {
    closeOnClick?: boolean,
        transitionTime?: number,
        position?: string,
        forceTop?: boolean,
        isRevealed?: boolean,
        revealOn?: string,
        autoFocus?: boolean,
        revealClass?: string
}

declare interface FoundationSites$Orbit {
    geoSync(): void,
        changeSlide(isLTR: boolean, chosenSlide?: Object, idx?: number): void,
        destroy(): void
}

declare interface FoundationSites$IOrbitOptions {
    bullets?: boolean,
        navButtons?: boolean,
        animInFromRight?: string,
        animOutToRight?: string,
        animInFromLeft?: string,
        animOutToLeft?: string,
        autoPlay?: boolean,
        timerDelay?: number,
        infiniteWrap?: boolean,
        swipe?: boolean,
        pauseOnHover?: boolean,
        accessible?: boolean,
        containerClass?: string,
        slideClass?: string,
        boxOfBullets?: string,
        nextClass?: string,
        prevClass?: string,
        useMUI?: boolean
}

declare interface FoundationSites$Reveal {
    open(): void,
        toggle(): void,
        close(): void,
        destroy(): void
}

declare interface FoundationSites$IRevealOptions {
    animationIn?: string,
        animationOut?: string,
        showDelay?: number,
        hideDelay?: number,
        closeOnClick?: boolean,
        closeOnEsc?: boolean,
        multipleOpened?: boolean,
        vOffset?: number,
        hOffset?: number,
        fullScreen?: boolean,
        btmOffsetPct?: number,
        overlay?: boolean,
        resetOnClose?: boolean
}

declare interface FoundationSites$Slider {
    destroy(): void
}

declare interface FoundationSites$ISliderOptions {
    start?: number,
        end?: number,
        step?: number,
        initialStart?: number,
        initialEnd?: number,
        binding?: boolean,
        clickSelect?: boolean,
        vertical?: boolean,
        draggable?: boolean,
        disabled?: boolean,
        doubleSided?: boolean,
        decimal?: number,
        moveTime?: number,
        disabledClass?: string
}

declare interface FoundationSites$Sticky {
    _pauseListeners(scrollListener: string): void,
        _calc(checkSizes: boolean, scroll: number): void,
        destroy(): void,
        emCalc(Number: number): void
}

declare interface FoundationSites$IStickyOptions {
    container?: string,
        stickTo?: string,
        anchor?: string,
        topAnchor?: string,
        btmAnchor?: string,
        marginTop?: number,
        marginBottom?: number,
        stickyOn?: string,
        stickyClass?: string,
        containerClass?: string,
        checkEvery?: number
}

declare interface FoundationSites$Tabs {
    _handleTabChange($target: JQuery): void,
        selectTab($target: JQuery): void,
        destroy(): void
}

declare interface FoundationSites$ITabsOptions {
    autoFocus?: boolean,
        wrapOnKeys?: boolean,
        matchHeight?: boolean,
        linkClass?: string,
        panelClass?: string
}

declare interface FoundationSites$Toggler {
    toggle(): void,
        destroy(): void
}

declare interface FoundationSites$ITogglerOptions {
    animate?: boolean
}

declare interface FoundationSites$Tooltip {
    show(): void,
        hide(): void,
        toggle(): void,
        destroy(): void
}

declare interface FoundationSites$ITooltipOptions {
    hoverDelay?: number,
        fadeInDuration?: number,
        fadeOutDuration?: number,
        disableHover?: boolean,
        templateClasses?: string,
        tooltipClass?: string,
        triggerClass?: string,
        showOn?: string,
        template?: string,
        tipText?: string,
        clickOpen?: boolean,
        positionClass?: string,
        vOffset?: number,
        hOffset?: number
}

declare interface FoundationSites$Box {
    ImNotTouchingYou(element: Object, parent?: Object, lrOnly?: boolean, tbOnly?: boolean): boolean,
        GetDimensions(element: Object): Object,
        GetOffsets(
            element: Object,
            anchor: Object,
            position: string,
            vOffset: number,
            hOffset: number,
            isOverflow: boolean): Object
}

declare interface FoundationSites$KeyBoard {
    parseKey(event: any): string,
        handleKey(event: any, component: any, functions: any): void,
        findFocusable($element: Object): Object
}

declare interface FoundationSites$MediaQuery {
    get(size: string): string,
        atLeast(size: string): boolean,
        queries: Array<string>,
        current: string
}

declare interface FoundationSites$Motion {
    animateIn(element: Object, animation: any, cb: Function): void,
        animateOut(element: Object, animation: any, cb: Function): void
}

declare interface FoundationSites$Move {}

declare interface FoundationSites$Nest {
    Feather(menu: any, type: any): void,
        Burn(menu: any, type: any): void
}

declare interface FoundationSites$Timer {
    start(): void,
        restart(): void,
        pause(): void
}

declare interface FoundationSites$Touch {}

declare interface FoundationSites$Triggers {}

declare interface FoundationSites$FoundationSitesStatic {
    version: string,
        rtl(): boolean,
        plugin(plugin: Object, name: string): void,
        registerPlugin(plugin: Object): void,
        unregisterPlugin(plugin: Object): void,
        reInit(plugins: Array<any>): void,
        GetYoDigits(length: number, namespace?: string): string,
        reflow(elem: Object, plugins?: Array<string>| string): void,
        getFnName(fn: string): string,
        transitionend(): string,
        util: {
            throttle(func: (...args: any[]) => any, delay: number): (...args: any[]) => any
        },
        Abide(
            element: Object,
            options?: FoundationSites$IAbideOptions): FoundationSites$Abide,
        Accordion(
            element: Object,
            options?: FoundationSites$IAccordionOptions): FoundationSites$Accordion,
        AccordionMenu(
            element: Object,
            options?: FoundationSites$IAccordionMenuOptions): FoundationSites$AccordionMenu,
        DrillDown(
            element: Object,
            options?: FoundationSites$IDrilldownOptions): FoundationSites$Drilldown,
        Dropdown(
            element: Object,
            options?: FoundationSites$IDropdownOptions): FoundationSites$Dropdown,
        DropdownMenu(
            element: Object,
            options?: FoundationSites$IDropdownMenuOptions): FoundationSites$DropdownMenu,
        Equalizer(
            element: Object,
            options?: FoundationSites$IEqualizerOptions): FoundationSites$Equalizer,
        Interchange(
            element: Object,
            options?: FoundationSites$IInterchangeOptions): FoundationSites$Interchange,
        Magellan(
            element: Object,
            options?: FoundationSites$IMagellanOptions): FoundationSites$Magellan,
        OffCanvas(
            element: Object,
            options?: FoundationSites$IOffCanvasOptions): FoundationSites$OffCanvas,
        Orbit(
            element: Object,
            options?: FoundationSites$IOrbitOptions): FoundationSites$Orbit,
        Reveal(
            element: Object,
            options?: FoundationSites$IRevealOptions): FoundationSites$Reveal,
        Slider(
            element: Object,
            options?: FoundationSites$ISliderOptions): FoundationSites$Slider,
        Sticky(
            element: Object,
            options?: FoundationSites$IStickyOptions): FoundationSites$Sticky,
        Tabs(element: Object, options?: FoundationSites$ITabsOptions): FoundationSites$Tabs,
        Toggler(
            element: Object,
            options?: FoundationSites$ITogglerOptions): FoundationSites$Toggler,
        Tooltip(
            element: Object,
            options?: FoundationSites$ITooltipOptions): FoundationSites$Tooltip,
        Box: FoundationSites$Box,
        KeyBoard: FoundationSites$KeyBoard,
        MediaQuery: FoundationSites$MediaQuery,
        Motion: FoundationSites$Motion,
        Move: FoundationSites$Move,
        Nest: FoundationSites$Nest,
        Timer: FoundationSites$Timer,
        Touch: FoundationSites$Touch,
        Triggers: FoundationSites$Triggers
}
declare interface JQuery {
    foundation(method?: string | Array<any>): JQuery
}
declare var Foundation: FoundationSites$FoundationSitesStatic;
declare module 'Foundation' {
    declare module.exports: typeof Foundation
}