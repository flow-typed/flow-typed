/**
 * Flowtype definitions for better-curry
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
var BetterCurry: BetterCurryModule$BetterCurry;
declare
export interface BetterCurryModule$DelegateOptions {
    as?: string,
        len?: number,
        args?: any[],
        name?: string
}

declare
export class Delegate<T>{
    proto: T;
    target: string;
    methods: any[];
    getters: any[];
    setters: any[];
    all: (skip?: string[]) => void;
    method: (
        name: string | BetterCurryModule$DelegateOptions) => BetterCurryModule$Delegate<T>;
    getter: (
        name: string | BetterCurryModule$DelegateOptions) => BetterCurryModule$Delegate<T>;
    setter: (
        name: string | BetterCurryModule$DelegateOptions) => BetterCurryModule$Delegate<T>;
    access: (
        name: string | BetterCurryModule$DelegateOptions) => BetterCurryModule$Delegate<T>;
    revoke: (name: string) => BetterCurryModule$Delegate<T>;
    constructor(proto: T, target: string): this
}

declare
export type BetterCurryModule$OriginalFunctionReminder<T>= {
    ___length: number
} & Function


declare
export interface BetterCurryModule$BetterCurry {
    predefine:<T>(
            fn: T,
            args: any[],
            context?: Object,
            len?: number,
            checkArguments?: boolean) => BetterCurryModule$OriginalFunctionReminder<T>,
        wrap:<T>(
            fn: T,
            context?: Object,
            len?: number,
            checkArguments?: boolean) => BetterCurryModule$OriginalFunctionReminder<T>,
        flatten: (...args: Array<Array<any>| any>) => any[],
        delegate:<T>(proto: T, target: string) => BetterCurryModule$Delegate<T>,
        MAX_OPTIMIZED: number
}
declare module 'better-curry' {
    declare var bc: BetterCurryModule$BetterCurry;
    declare module.exports: typeof bc
}