// @flow
/**
 * Flowtype definitions for radium
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'radium' {


    declare     var npm$namespace$Radium: {
        getState: typeof Radium$getState,
        keyframes: typeof Radium$keyframes,
    }
    declare interface Radium$StyleRules {
        [index: string]: React.CSSProperties
    }


    /**
     * Style component properties
     */
    declare     export interface Radium$StyleProps {

        /**
         * An object of styles, or an object of CSS rules to render. Each key of the rules object is a CSS
         * selector and the value is an object of styles. If rules is empty, the component will render nothing.
         */
        rules: React.CSSProperties | Radium$StyleRules,

            /**
             * A string that any included selectors in rules will be appended to.
             * Use to scope styles in the component to a particular element. A good use case might be to generate a unique
            ID for a component to scope any styles to the particular component that owns the <Style> component instance.
            */
            scopeSelector?: string
    }


    /**
     * <Style />
     */
    declare     export class Style mixins React.Component<Radium$StyleProps, any>{}


    /**
     * StyleRoot component properties
     */
    declare     export type Radium$StyleRootProps = {}


    /**
     * <StyleRoot />
     */
    declare     export class StyleRoot mixins React.Component<Radium$StyleRootProps, any>{}


    /**
     * Radium configuration
     */
    declare     export interface Radium$RadiumConfig {

        /**
         * Allow to replace matchMedia function that Radium uses. The default one is window.matchMedia
         * @param mediaQuery 
         */
        matchMedia?: (mediaQuery: string) => MediaQueryList,

            /**
             * Set the user agent passed to inline-style-prefixer to perform prefixing on style objects.
             * Mainly used during server rendering
             */
            userAgent?: string,

            /**
             * List of plugins
             */
            plugins?: Array<any >
    }


    /**
     * Query Radium's knowledge of the browser state for a given element key.
     * This is particularly useful if you would like to set styles for one element when another element is in a particular state,
    e.g. show a message when a button is hovered.

    Note that the target element specified by elementKey must have the state you'd like to check defined in
    its style object so that Radium knows to add the handlers. It can be empty, e.g. ':hover': {}.
     * @param state you'll usually pass this.state, but sometimes you may want to pass a previous state, like in shouldComponentUpdate, componentWillUpdate, and componentDidUpdate
     * @param elementKey if you used multiple elements, pass the same key="" or ref="". If you only have one element, you can leave it blank ('main' will be inferred)
     * @param value one of the following: :active, :focus, and :hover
    */
    declare     export function Radium$getState(
        state: any,
        elementKey: string | void,
        value: ":active" | ":focus" | ":hover"): boolean


    /**
     * Create a keyframes animation for use in an inline style.
     * @param keyframes 
     * @param name 
     */
    declare     export function Radium$keyframes(keyframes: Radium$StyleRules, name?: string): Object


    /**
     * Used to control internal Radium state and behavior during tests. It is only available in non-production builds.
     */
    declare interface Radium$RadiumTestMode {

        /**
         * Clears the global Radium state, currently only the cache of media query listeners.
         */
        clearState(): void,

            /**
             * Enables "test mode", which doesn’t throw or warn as much. Currently it just doesn’t throw when using addCSS without StyleRoot.
             */
            enable(): void,

            /**
             * Disables "test mode"
             */
            disable(): void
    }

    declare     var TestMode: Radium$RadiumTestMode;
    declare module.exports: typeof Radium
}