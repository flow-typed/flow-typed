// @flow
/**
 * Flowtype definitions for hapi-decorators
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'hapi-decorators' {

    declare interface ControllerStatic {
        new(): Controller
    }
    declare     export interface Controller {
        baseUrl: string,
            routes: () => hapi.IRouteConfiguration[]
    }
    declare     export function controller(baseUrl: string): (target: ControllerStatic) => void
    declare interface IRouteSetup {
        (target: any, key: any, descriptor: any): any
    }
    declare interface IRouteDecorator {
        (method: string, path: string): IRouteSetup
    }
    declare interface IRouteConfig {
        (path: string): IRouteSetup
    }
    declare     export var route: IRouteDecorator;
    declare     export var get: IRouteConfig;
    declare     export var post: IRouteConfig;
    declare     export var put: IRouteConfig;
    declare     export var patch: IRouteConfig;
    declare     export var all: IRouteConfig;
    declare     export function config(
        config: hapi.IRouteAdditionalConfigurationOptions): (target: any, key: any, descriptor: any) => any
    declare interface IValidateConfig {

        /**
         * validation rules for incoming request headers.Values allowed:
         * trueany headers allowed (no validation performed).This is the default.
        falseno headers allowed (this will cause all valid HTTP requests to fail).
        a Joi validation object.
        a validation function using the signature function(value, options, next) where:
        valuethe object containing the request headers.
        optionsthe server validation options.
        next(err, value)the callback function called when validation is completed.
        */
        headers?: boolean | hapi.IJoi | hapi.IValidationFunction,

            /**
             * validation rules for incoming request path parameters, after matching the path against the route and extracting any parameters then stored in request.params.Values allowed:
             * trueany path parameters allowed (no validation performed).This is the default.
            falseno path variables allowed.
            a Joi validation object.
            a validation function using the signature function(value, options, next) where:
            valuethe object containing the path parameters.
            optionsthe server validation options.
            next(err, value)the callback function called when validation is completed. 
            */
            params?: boolean | hapi.IJoi | hapi.IValidationFunction,

            /**
             * validation rules for an incoming request URI query component (the key- value part of the URI between '?' and '#').The query is parsed into its individual key- value pairs (using the qs module) and stored in request.query prior to validation.Values allowed:
             * trueany query parameters allowed (no validation performed).This is the default.
            falseno query parameters allowed.
            a Joi validation object.
            a validation function using the signature function(value, options, next) where:
            valuethe object containing the query parameters.
            optionsthe server validation options.
            next(err, value)the callback function called when validation is completed. 
            */
            query?: boolean | hapi.IJoi | hapi.IValidationFunction,

            /**
             * validation rules for an incoming request payload (request body).Values allowed:
             * trueany payload allowed (no validation performed).This is the default.
            falseno payload allowed.
            a Joi validation object.
            a validation function using the signature function(value, options, next) where:
            valuethe object containing the payload object.
            optionsthe server validation options.
            next(err, value)the callback function called when validation is completed.  
            */
            payload?: boolean | hapi.IJoi | hapi.IValidationFunction,

            /**
             * an optional object with error fields copied into every validation error response. 
             */
            errorFields?: any,

            /**
             * determines how to handle invalid requests.Allowed values are:
             * 'error'return a Bad Request (400) error response.This is the default value.
            'log'log the error but continue processing the request.
            'ignore'take no action.
            OR a custom error handler function with the signature 'function(request, reply, source, error)` where:
            requestthe request object.
            replythe continuation reply interface.
            sourcethe source of the invalid field (e.g. 'path', 'query', 'payload').
            errorthe error object prepared for the client response (including the validation function error under error.data). 
            */
            failAction?: string | hapi.IRouteFailFunction,

            /**
             * options to pass to Joi.Useful to set global options such as stripUnknown or abortEarly (the complete list is available here: https://github.com/hapijs/joi#validatevalue-schema-options-callback ).Defaults to no options. 
             */
            options?: any
    }
    declare     export function validate(config: IValidateConfig): (target: any, key: any, descriptor: any) => any
    declare interface ICacheConfig {
        privacy?: string,
            expiresIn?: number,
            expiresAt?: number
    }
    declare     export function cache(cacheConfig: ICacheConfig): (target: any, key: any, descriptor: any) => any
    declare     export function pre(pre: {
        [key: string]: any
    }): (target: any, key: any, descriptor: any) => any
}