/**
 * Flowtype definitions for poly2tri
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface poly2tri$IPointLike {
    x: number,
        y: number
}

declare class Point mixins IPointLike {
    x: number;
    y: number;
    constructor(x: number, y: number): this;
    toString(): string;
    toJSON(): JSON;
    clone(): poly2tri$Point;
    set_zero(): poly2tri$Point;
    set(x: number, y: number): poly2tri$Point;
    negate(): poly2tri$Point;
    add(n: poly2tri$IPointLike): poly2tri$Point;
    sub(n: poly2tri$IPointLike): poly2tri$Point;
    mul(s: number): poly2tri$Point;
    length(): number;
    normalize(): number;
    equals(p: poly2tri$IPointLike): boolean;
    negate(p: poly2tri$IPointLike): poly2tri$Point;
    add(a: poly2tri$IPointLike, b: poly2tri$IPointLike): poly2tri$Point;
    sub(a: poly2tri$IPointLike, b: poly2tri$IPointLike): poly2tri$Point;
    mul(s: number, p: poly2tri$IPointLike): poly2tri$Point;
    cross(a: number, b: number): number;
    cross(a: poly2tri$IPointLike, b: number): number;
    cross(a: poly2tri$IPointLike, b: poly2tri$IPointLike): number;
    cross(a: number, b: poly2tri$IPointLike): number;
    toStringBase(p: poly2tri$IPointLike): string;
    toString(p: poly2tri$IPointLike): string;
    compare(a: poly2tri$IPointLike, b: poly2tri$IPointLike): number;
    equals(a: poly2tri$IPointLike, b: poly2tri$IPointLike): boolean;
    dot(a: poly2tri$IPointLike, b: poly2tri$IPointLike): number
}

declare class SweepContext {
    constructor(contour: Array<poly2tri$IPointLike>): this;
    constructor(contour: Array<poly2tri$IPointLike>, options: JSON): this;
    addHole(polyline: Array<poly2tri$IPointLike>): poly2tri$SweepContext;
    addHoles(holes: Array<Array<poly2tri$IPointLike >> ): poly2tri$SweepContext;
    addPoint(point: poly2tri$IPointLike): poly2tri$SweepContext;
    addPoints(point: Array<poly2tri$IPointLike>): poly2tri$SweepContext;
    triangulate(): poly2tri$SweepContext;
    getBoundingBox(): {
        min: poly2tri$IPointLike,
        max: poly2tri$IPointLike
    };
    getTriangles(): Array<poly2tri$Triangle >
}

declare class Triangle {
    constructor(a: poly2tri$IPointLike, b: poly2tri$IPointLike, c: poly2tri$IPointLike): this;
    toString(): string;
    getPoint(index: number): poly2tri$IPointLike;
    getPoints(): Array<poly2tri$IPointLike>;
    containsPoint(point: poly2tri$IPointLike): boolean;
    containsPoints(p1: poly2tri$IPointLike, p2: poly2tri$IPointLike): boolean;
    isInterior(): boolean
}