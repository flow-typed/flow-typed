// @flow
/**
 * Flowtype definitions for chrome
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Window {
    chrome: typeof chrome
}
declare module 'windows' {
    declare interface Window {
        chrome: typeof chrome
    }
    declare interface GetInfo {

        /**
         * Optional.
         * If true, the windows.Window object will have a tabs property that contains a list of the tabs.Tab objects. The Tab objects only contain the url, title and favIconUrl properties if the extension's manifest file includes the "tabs" permission.
         */
        populate?: boolean,

            /**
             * If set, the windows.Window returned will be filtered based on its type. If unset the default filter is set to ['app', 'normal', 'panel', 'popup'], with 'app' and 'panel' window types limited to the extension's own windows.
             * Each one of: "normal", "popup", "panel", "app", or "devtools"
             * @since  Chrome 46. Warning: this is the current Beta channel.
             */
            windowTypes?: string[]
    }
    declare interface CreateData {

        /**
         * Optional. The id of the tab for which you want to adopt to the new window.
         * @since  Chrome 10.
         */
        tabId?: number,

            /**
             * Optional.
             * A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page.
             */
            url?: string | string[],

            /**
             * Optional.
             * The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
             */
            top?: number,

            /**
             * Optional.
             * The height in pixels of the new window, including the frame. If not specified defaults to a natural height.
             */
            height?: number,

            /**
             * Optional.
             * The width in pixels of the new window, including the frame. If not specified defaults to a natural width.
             */
            width?: number,

            /**
             * Optional. If true, opens an active window. If false, opens an inactive window.
             * @since  Chrome 12.
             */
            focused?: boolean,

            /**
             * Optional. Whether the new window should be an incognito window. 
             */
            incognito?: boolean,

            /**
             * Optional. Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set.
             * One of: "normal", "popup", "panel", or "detached_panel"
             */
            type?: string,

            /**
             * Optional.
             * The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
             */
            left?: number,

            /**
             * Optional. The initial state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'.
             * One of: "normal", "minimized", "maximized", "fullscreen", or "docked"
             * @since  Chrome 44.
             */
            state?: string
    }
    declare interface UpdateInfo {

        /**
         * Optional. The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels. 
         */
        top?: number,

            /**
             * Optional. If true, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to false to cancel a previous draw attention request.
             * @since  Chrome 14.
             */
            drawAttention?: boolean,

            /**
             * Optional. The height to resize the window to in pixels. This value is ignored for panels. 
             */
            height?: number,

            /**
             * Optional. The width to resize the window to in pixels. This value is ignored for panels. 
             */
            width?: number,

            /**
             * Optional. The new state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'.
             * One of: "normal", "minimized", "maximized", "fullscreen", or "docked"
             * @since  Chrome 17.
             */
            state?: string,

            /**
             * Optional. If true, brings the window to the front. If false, brings the next window in the z-order to the front.
             * @since  Chrome 8.
             */
            focused?: boolean,

            /**
             * Optional. The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels. 
             */
            left?: number
    }
    declare interface WindowEventFilter {

        /**
         * Conditions that the window's type being created must satisfy. By default it will satisfy ['app', 'normal', 'panel', 'popup'], with 'app' and 'panel' window types limited to the extension's own windows.
         * Each one of: "normal", "popup", "panel", "app", or "devtools"
         */
        windowTypes: string[]
    }
    declare type WindowIdEvent = {}
    declare type WindowReferenceEvent = {}
    declare     var WINDOW_ID_CURRENT: number;
    declare     var WINDOW_ID_NONE: number;

    /**
     * Retrieves details about the specified alarm.
     * @param callback The callback parameter should be a function that looks like this:
    function( Alarm alarm) {...};
    */
    declare     export function get(callback: (alarm: Alarm) => void): void

    /**
     * Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view). 
     */
    declare     export function getCurrent(callback: (tab?: Tab) => void): void

    /**
     * Creates an alarm. Near the time(s) specified by alarmInfo, the onAlarm event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.
     * In order to reduce the load on the user's machine, Chrome limits alarms to at most once every 1 minute but may delay them an arbitrary amount more. That is, setting delayInMinutes or periodInMinutes to less than 1 will not be honored and will cause a warning. when can be set to less than 1 minute after "now" without warning but won't actually cause the alarm to fire for at least 1 minute.
    To help you debug your app or extension, when you've loaded it unpacked, there's no limit to how often the alarm can fire.
     * @param alarmInfo Describes when the alarm should fire. The initial time must be specified by either when or delayInMinutes (but not both). If periodInMinutes is set, the alarm will repeat every periodInMinutes minutes after the initial event. If neither when or delayInMinutes is set for a repeating alarm, periodInMinutes is used as the default for delayInMinutes.
    */
    declare     export function create(alarmInfo: AlarmCreateInfo): void

    /**
     * Gets an array of all the alarms.
     * @param callback The callback parameter should be a function that looks like this:
    function(array of Alarm alarms) {...};
    */
    declare     export function getAll(callback: (alarms: Alarm[]) => void): void

    /**
     * Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. Note: Currently, only 'title' and 'url' are supported.
     * @param callback If you specify the callback parameter, it should be a function that looks like this:
    function( BookmarkTreeNode result) {...};
    */
    declare     export function update(
        id: string,
        changes: BookmarkChangesArg,
        callback?: (result: BookmarkTreeNode) => void): void

    /**
     * Removes a bookmark or an empty bookmark folder.
     * @param callback If you specify the callback parameter, it should be a function that looks like this:
    function() {...};
    */
    declare     export function remove(id: string, callback?: Function): void

    /**
     * Gets the window that was most recently focused â€” typically the window 'on top'.
     */
    declare     export function getLastFocused(callback: (window: undefined.Window) => void): void
    declare     var onRemoved: WindowIdEvent;
    declare     var onCreated: WindowReferenceEvent;
    declare     var onFocusChanged: WindowIdEvent;
}
declare module 'chrome.debugger' {

    /**
     * Debuggee identifier. Either tabId or extensionId must be specified 
     */
    declare interface Debuggee {

        /**
         * Optional. The id of the tab which you intend to debug.  
         */
        tabId?: number,

            /**
             * Optional.
             *  Since Chrome 27.
            The id of the extension which you intend to debug. Attaching to an extension background page is only possible when 'silent-debugger-extension-api' flag is enabled on the target browser.
            */
            extensionId?: string,

            /**
             * Optional.
             *  Since Chrome 28.
            The opaque id of the debug target.
            */
            targetId?: string
    }

    /**
     * Since Chrome 28.
     * Debug target information
     */
    declare interface TargetInfo {

        /**
         * Target type. 
         */
        type: string,

            /**
             * Target id. 
             */
            id: string,

            /**
             * Optional.
             *  Since Chrome 30.
            The tab id, defined if type == 'page'.
            */
            tabId?: number,

            /**
             * Optional.
             *  Since Chrome 30.
            The extension id, defined if type = 'background_page'.
            */
            extensionId?: string,

            /**
             * True if debugger is already attached. 
             */
            attached: boolean,

            /**
             * Target page title. 
             */
            title: string,

            /**
             * Target URL. 
             */
            url: string,

            /**
             * Optional. Target favicon URL.  
             */
            faviconUrl?: string
    }
    declare type DebuggerDetachedEvent = {}
    declare type DebuggerEventEvent = {}

    /**
     * Attaches debugger to the given target.
     * @param target Debugging target to which you want to attach.
     * @param requiredVersion Required debugging protocol version ("0.1"). One can only attach to the debuggee with matching major version and greater or equal minor version. List of the protocol versions can be obtained in the documentation pages.
     * @param callback Called once the attach operation succeeds or fails. Callback receives no arguments. If the attach fails, runtime.lastError will be set to the error message.
    If you specify the callback parameter, it should be a function that looks like this:
    function() {...};
    */
    declare     export function attach(target: Debuggee, requiredVersion: string, callback?: () => void): void

    /**
     * Detaches debugger from the given target.
     * @param target Debugging target from which you want to detach.
     * @param callback Called once the detach operation succeeds or fails. Callback receives no arguments. If the detach fails, runtime.lastError will be set to the error message.
    If you specify the callback parameter, it should be a function that looks like this:
    function() {...};
    */
    declare     export function detach(target: Debuggee, callback?: () => void): void

    /**
     * Sends given command to the debugging target.
     * @param target Debugging target to which you want to send the command.
     * @param method Method name. Should be one of the methods defined by the remote debugging protocol.
     * @param commandParams Since Chrome 22.
    JSON object with request parameters. This object must conform to the remote debugging params scheme for given method.
     * @param callback Response body. If an error occurs while posting the message, the callback will be called with no arguments and runtime.lastError will be set to the error message.
    If you specify the callback parameter, it should be a function that looks like this:
    function(object result) {...};
    */
    declare     export function sendCommand(
        target: Debuggee,
        method: string,
        commandParams?: Object,
        callback?: (result?: Object) => void): void

    /**
     * Since Chrome 28.
     * Returns the list of available debug targets.
     * @param callback The callback parameter should be a function that looks like this:
    function(array of TargetInfo result) {...};
    Parameter result: Array of TargetInfo objects corresponding to the available debug targets.
    */
    declare     export function getTargets(callback: (result: TargetInfo[]) => void): void
    declare     var onDetach: DebuggerDetachedEvent;
    declare     var onEvent: DebuggerEventEvent;
}