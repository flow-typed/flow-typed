/**
 * Flowtype definitions for dojox.dtl
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl.html
 * 
Deprecated.  Should require dojox/dtl modules directly rather than trying to access them through
this module.
*/
declare interface dojox$dtl {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_Templated.html
 * 
The base-class for DTL-templated widgets.
 * @param params Hash of initialization parameters for widget, including scalar values (like title, duration etc.)and functions, typically callbacks like onClick.The hash can contain any of the widget's properties, excluding read-only properties.
 * @param srcNodeRef OptionalIf a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.
*/
declare class _Templated mixins dijit._TemplatedMixin {
    constructor(params?: Object, srcNodeRef?: HTMLElement): this;

    /**
     * Object to which attach points and events will be scoped.  Defaults
     * to 'this'.
     */
    attachScope: Object;

    /**
     * 
     */
    searchContainerNode: boolean;

    /**
     * Path to template (HTML file) for this widget relative to dojo.baseUrl.
     * Deprecated: use templateString with require([... "dojo/text!..."], ...) instead
     */
    templatePath: string;

    /**
     * A string that represents the widget template.
     * Use in conjunction with dojo.cache() to load from a file.
     */
    templateString: string;

    /**
     * 
     */
    buildRendering(): void;

    /**
     * 
     */
    destroyRendering(): void;

    /**
     * Layer for dijit._Templated.getCachedTemplate
     * @param templatePath 
     * @param templateString 
     * @param alwaysUseString 
     */
    getCachedTemplate(templatePath: any, templateString: any, alwaysUseString: any): any;

    /**
     * Renders the widget.
     */
    render(): void;

    /**
     * 
     */
    startup(): void;

    /**
     * Static method to get a template based on the templatePath or
     * templateString key
     */
    getCachedTemplate(): any
}

declare module '_base' {

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.html
     */
    declare interface _base {

        /**
         * 
         */
        BOOLS: Object,

            /**
             * 
             */
            data: Object,

            /**
             * 
             */
            date: Object,

            /**
             * 
             */
            dates: Object,

            /**
             * 
             */
            dijit: Object,

            /**
             * 
             */
            dom: Object,

            /**
             * 
             */
            html: Object,

            /**
             * 
             */
            htmlstrings: Object,

            /**
             * 
             */
            integers: Object,

            /**
             * 
             */
            lists: Object,

            /**
             * 
             */
            loader: Object,

            /**
             * 
             */
            logic: Object,

            /**
             * 
             */
            loop: Object,

            /**
             * 
             */
            misc: Object,

            /**
             * 
             */
            objects: Object,

            /**
             * A register for filters and tags.
             */
            register: Object,

            /**
             * 
             */
            strings: Object,

            /**
             * 
             */
            text: Object,

            /**
             * 
             */
            TOKEN_ATTR: number,

            /**
             * 
             */
            TOKEN_BLOCK: number,

            /**
             * 
             */
            TOKEN_CHANGE: number,

            /**
             * 
             */
            TOKEN_COMMENT: number,

            /**
             * 
             */
            TOKEN_CUSTOM: number,

            /**
             * 
             */
            TOKEN_NODE: number,

            /**
             * 
             */
            TOKEN_TEXT: number,

            /**
             * 
             */
            TOKEN_VAR: number,

            /**
             * 
             * @param key 
             * @param value 
             */
            AttributeNode(key: any, value: any): void,

            /**
             * Changes the parent during render/unrender
             * @param node 
             * @param up Optional
             * @param root 
             */
            ChangeNode(node: any, up: boolean, root: boolean): void,

            /**
             * Represents a runtime context used by DTL templates.
             * @param dict 
             */
            Context(dict: Object): void,

            /**
             * Allows the manipulation of DOM
             * Use this to append a child, change the parent, or
            change the attribute of the current node.
             * @param parent The parent node.
            */
            DomBuffer(parent: HTMLElement): void,

            /**
             * 
             * @param args 
             * @param node 
             */
            DomInline(args: any, node: any): void,

            /**
             * The template class for DOM templating.
             * @param obj 
             */
            DomTemplate(obj: String): void,

            /**
             * The template class for DOM templating.
             * @param obj 
             */
            DomTemplate(obj: HTMLElement): void,

            /**
             * The template class for DOM templating.
             * @param obj 
             */
            DomTemplate(obj: undefined.url): void,

            /**
             * 
             * @param args 
             * @param node 
             */
            Inline(args: any, node: any): void,

            /**
             * 
             * @param value 
             */
            mark_safe(value: any): void,

            /**
             * 
             * @param str 
             */
            quickFilter(str: any): void,

            /**
             * The base class for text-based templates.
             * @param template The string or location of the string touse as a template
             * @param isString Indicates whether the template is a string or a url.
             */
            Template(template: String, isString: boolean): void,

            /**
             * The base class for text-based templates.
             * @param template The string or location of the string touse as a template
             * @param isString Indicates whether the template is a string or a url.
             */
            Template(template: undefined.url, isString: boolean): void
    }

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.BOOLS.html
     */
    declare interface BOOLS {

        /**
         * 
         */
        checked: number,

            /**
             * 
             */
            disabled: number,

            /**
             * 
             */
            readonly: number
    }

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.date.html
     */
    declare interface date {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.data.html
     */
    declare interface data {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dates.html
     */
    declare interface dates {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dijit.html
     */
    declare interface dijit {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dom.html
     */
    declare interface dom {

        /**
         * 
         * @param text 
         */
        getTemplate(text: any): Object,

            /**
             * 
             * @param nodes 
             */
            tokenize(nodes: HTMLElement): any[]
    }

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.html.html
     */
    declare interface html {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.htmlstrings.html
     */
    declare interface htmlstrings {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.integers.html
     */
    declare interface integers {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.loader.html
     */
    declare interface loader {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.lists.html
     */
    declare interface lists {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.loop.html
     */
    declare interface loop {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.logic.html
     */
    declare interface logic {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.misc.html
     */
    declare interface misc {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.objects.html
     */
    declare interface objects {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.register.html
     * 
    A register for filters and tags.
    */
    declare interface register {

        /**
         * Register the specified filter libraries.
         * The locations parameter defines the contents of each library as a hash whose keys are the library names and values
        an array of the filters exported by the library. For example, the filters exported by the date library would be:

        { "dates": ["date", "time", "timesince", "timeuntil"] }
         * @param base The base path of the libraries.
         * @param locations An object defining the filters for each library as a hash whose keys are the library names and values an array of the filters exported by the library.
        */
        filters(base: String, locations: Object): void,

            /**
             * Register the specified tag libraries.
             * The locations parameter defines the contents of each library as a hash whose keys are the library names and values
            an array of the tags exported by the library. For example, the tags exported by the logic library would be:

            { logic: ["if", "for", "ifequal", "ifnotequal"] }
             * @param base The base path of the libraries.
             * @param locations An object defining the tags for each library as a hash whose keys are the library names and values an array of the tags or filters exported by the library.
            */
            tags(base: String, locations: Object): void
    }

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.strings.html
     */
    declare interface strings {}

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.text.html
     */
    declare interface text {

        /**
         * 
         * @param name 
         * @param errorless 
         */
        getFilter(name: any, errorless: any): any,

            /**
             * 
             * @param name 
             * @param errorless 
             */
            getTag(name: any, errorless: any): any,

            /**
             * 
             * @param file 
             */
            getTemplate(file: any): any,

            /**
             * 
             * @param file 
             */
            getTemplateString(file: any): String,

            /**
             * 
             * @param str 
             */
            tokenize(str: any): any
    }
}



/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dom.html
 */
declare interface dtl$dom {

    /**
     * 
     * @param text 
     */
    getTemplate(text: any): Object,

        /**
         * 
         * @param nodes 
         */
        tokenize(nodes: HTMLElement): any[]
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/dom._uppers.html
 */
declare interface dom$_uppers {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/dom._attributes.html
 */
declare interface dom$_attributes {}

declare module '_DomTemplated' {

    /**
     * Constructs the DOM representation.
     */
    declare interface buildRendering {
        (): void
    }

    /**
     * Renders this template.
     * @param context OptionalThe runtime context.
     * @param tpl OptionalThe template to render. Optional.
     */
    declare interface render {
        (context: undefined.Context, tpl: undefined._DomTemplated): void
    }

    /**
     * Quickly switch between templated by location
     * @param template The new template.
     * @param context OptionalThe runtime context.
     */
    declare interface setTemplate {
        (template: String, context: undefined.Context): void
    }
}



/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/Context.html
 * 
Represents a runtime context used by DTL templates.
 * @param dict 
*/
declare interface dtl$Context {
    (dict: Object): void
}


/**
 * Returns a clone of this context object, with the items from the passed objecct mixed in.
 * @param obj The object to extend.
 */
declare interface Context$extend {
    (obj: undefined.Context): any
}


/**
 * Returns a clone of this context, only containing the items defined in the filter.
 * @param filter 
 */
declare interface Context$filter {
    (filter: undefined.Context): any
}


/**
 * 
 * @param key 
 * @param otherwise 
 */
declare interface Context$get {
    (key: any, otherwise: any): any
}


/**
 * Returns the set of keys exported by this context.
 */
declare interface Context$getKeys {
    (): any[]
}


/**
 * Gets the object on which to perform operations.
 */
declare interface Context$getThis {
    (): any
}


/**
 * Indicates whether the specified key is defined on this context.
 * @param key The key to look up.
 */
declare interface Context$hasKey {
    (key: String): boolean
}


/**
 * 
 */
declare interface Context$pop {
    (): void
}


/**
 * 
 */
declare interface Context$push {
    (): any
}


/**
 * Sets the object on which to perform operations.
 * @param scope the this ref.
 */
declare interface Context$setThis {
    (scope: Object): void
}


/**
 * 
 * @param dict 
 */
declare interface Context$update {
    (dict: any): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/DomInline.html
 * @param args 
 * @param node 
 */
declare class DomInline {
    constructor(args: Object, node: HTMLElement): this;

    /**
     * Deprecated. Instead of attributeMap, widget should have a _setXXXAttr attribute
     * for each XXX attribute to be mapped to the DOM.

    attributeMap sets up a "binding" between attributes (aka properties)
    of the widget and the widget's DOM.
    Changes to widget attributes listed in attributeMap will be
    reflected into the DOM.

    For example, calling set('title', 'hello')
    on a TitlePane will automatically cause the TitlePane's DOM to update
    with the new title.

    attributeMap is a hash where the key is an attribute of the widget,
    and the value reflects a binding to a:

    DOM node attribute
       focus: {node: "focusNode", type: "attribute"}
    Maps this.focus to this.focusNode.focus

    DOM node innerHTML
       title: { node: "titleNode", type: "innerHTML" }
    Maps this.title to this.titleNode.innerHTML

    DOM node innerText
       title: { node: "titleNode", type: "innerText" }
    Maps this.title to this.titleNode.innerText

    DOM node CSS class
       myClass: { node: "domNode", type: "class" }
    Maps this.myClass to this.domNode.className

    If the value is an array, then each element in the array matches one of the
    formats of the above list.

    There are also some shorthands for backwards compatibility:

    string --> { node: string, type: "attribute" }, for example:
    "focusNode" ---> { node: "focusNode", type: "attribute" }
    "" --> { node: "domNode", type: "attribute" }
    */
    attributeMap: Object;

    /**
     * Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
     * widget state.
     */
    baseClass: string;

    /**
     * 
     */
    class: string;

    /**
     * Designates where children of the source DOM node will be placed.
     * "Children" in this case refers to both DOM nodes and widgets.
    For example, for myWidget:

    <div data-dojo-type=myWidget>
         <b> here's a plain DOM node
         <span data-dojo-type=subWidget>and a widget</span>
         <i> and another plain DOM node </i>
    </div>
    containerNode would point to:

    <b> here's a plain DOM node
    <span data-dojo-type=subWidget>and a widget</span>
    <i> and another plain DOM node </i>
    In templated widgets, "containerNode" is set via a
    data-dojo-attach-point assignment.

    containerNode must be defined for any widget that accepts innerHTML
    (like ContentPane or BorderContainer or even Button), and conversely
    is null for widgets that don't, like TextBox.
    */
    containerNode: HTMLElement;

    /**
     * 
     */
    context: Object;

    /**
     * 
     */
    declaredClass: string;

    /**
     * Bi-directional support, as defined by the HTML DIR
     * attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
    default direction.
    */
    dir: string;

    /**
     * This is our visible representation of the widget! Other DOM
     * Nodes may by assigned to other properties, usually through the
    template system's data-dojo-attach-point syntax, but the domNode
    property is the canonical "top level" node in widget UI.
    */
    domNode: HTMLElement;

    /**
     * This widget or a widget it contains has focus, or is "active" because
     * it was recently clicked.
     */
    focused: boolean;

    /**
     * A unique, opaque ID string that can be assigned by users or by the
     * system. If the developer passes an ID which is known not to be
    unique, the specified ID is ignored and the system-generated ID is
    used instead.
    */
    id: string;

    /**
     * Rarely used.  Overrides the default Dojo locale used to render this widget,
     * as defined by the HTML LANG attribute.
    Value must be among the list of locales specified during by the Dojo bootstrap,
    formatted according to RFC 3066 (like en-us).
    */
    lang: string;

    /**
     * The document this widget belongs to.  If not specified to constructor, will default to
     * srcNodeRef.ownerDocument, or if no sourceRef specified, then to the document global
     */
    ownerDocument: Object;

    /**
     * pointer to original DOM node
     */
    srcNodeRef: HTMLElement;

    /**
     * HTML style attributes as cssText string or name/value hash
     */
    style: string;

    /**
     * HTML title attribute.
     * 
    For form widgets this specifies a tooltip to display when hovering over
    the widget (just like the native HTML title attribute).

    For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
    etc., it's used to specify the tab label, accordion pane title, etc.  In this case it's
    interpreted as HTML.
    */
    title: string;

    /**
     * When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
     * this specifies the tooltip to appear when the mouse is hovered over that text.
     */
    tooltip: string;

    /**
     * 
     */
    buildRendering(): void;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: String, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: String, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: Function, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: Function, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: String, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: String, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: Function, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: Function, method: Function): any;

    /**
     * Wrapper to setTimeout to avoid deferred functions executing
     * after the originating widget has been destroyed.
    Returns an object handle with a remove method (that returns null) (replaces clearTimeout).
     * @param fcn Function reference.
     * @param delay OptionalDelay, defaults to 0.
    */
    defer(fcn: Function, delay: number): Object;

    /**
     * Destroy this widget, but not its descendants.  Descendants means widgets inside of
     * this.containerNode.   Will also destroy any resources (including widgets) registered via this.own().

    This method will also destroy internal widgets such as those created from a template,
    assuming those widgets exist inside of this.domNode but outside of this.containerNode.

    For 2.0 it's planned that this method will also destroy descendant widgets, so apps should not
    depend on the current ability to destroy a widget without destroying its descendants.   Generally
    they should use destroyRecursive() for widgets with children.
     * @param preserveDom If true, this method will leave the original DOM structure alone.Note: This will not yet work with _TemplatedMixin widgets
    */
    destroy(preserveDom: boolean): void;

    /**
     * Recursively destroy the children of this widget and their
     * descendants.
     * @param preserveDom OptionalIf true, the preserveDom attribute is passed to all descendantwidget's .destroy() method. Not for use with _Templatedwidgets.
     */
    destroyDescendants(preserveDom: boolean): void;

    /**
     * Destroy this widget and its descendants
     * This is the generic "destructor" function that all widget users
    should call to cleanly discard with a widget. Once a widget is
    destroyed, it is removed from the manager object.
     * @param preserveDom OptionalIf true, this method will leave the original DOM structurealone of descendant Widgets. Note: This will NOT work withdijit._TemplatedMixin widgets.
    */
    destroyRecursive(preserveDom: boolean): void;

    /**
     * Destroys the DOM nodes associated with this widget.
     * @param preserveDom OptionalIf true, this method will leave the original DOM structure aloneduring tear-down. Note: this will not work with _Templatedwidgets yet.
     */
    destroyRendering(preserveDom: boolean): void;

    /**
     * Deprecated, will be removed in 2.0, use handle.remove() instead.
     * 
    Disconnects handle created by connect.
     * @param handle 
    */
    disconnect(handle: any): void;

    /**
     * Used by widgets to signal that a synthetic event occurred, ex:
     * 
    myWidget.emit("attrmodified-selectedChildWidget", ).
    Emits an event on this.domNode named type.toLowerCase(), based on eventObj.
    Also calls onType() method, if present, and returns value from that method.
    By default passes eventObj to callback, but will pass callbackArgs instead, if specified.
    Modifies eventObj by adding missing parameters (bubbles, cancelable, widget).
     * @param type 
     * @param eventObj Optional
     * @param callbackArgs Optional
    */
    emit(type: String, eventObj: Object, callbackArgs: any[]): any;

    /**
     * Get a property from a widget.
     * Get a named property from a widget. The property may
    potentially be retrieved via a getter method. If no getter is defined, this
    just retrieves the object's property.

    For example, if the widget has properties foo and bar
    and a method named _getFooAttr(), calling:
    myWidget.get("foo") would be equivalent to calling
    widget._getFooAttr() and myWidget.get("bar")
    would be equivalent to the expression
    widget.bar2
     * @param name The property to get.
    */
    get(name: any): any;

    /**
     * Returns all direct children of this widget, i.e. all widgets underneath this.containerNode whose parent
     * is this widget.   Note that it does not return all descendants, but rather just direct children.
    Analogous to Node.childNodes,
    except containing widgets rather than DOMNodes.

    The result intentionally excludes internally created widgets (a.k.a. supporting widgets)
    outside of this.containerNode.

    Note that the array returned is a simple array.  Application code should not assume
    existence of methods like forEach().
    */
    getChildren(): any[];

    /**
     * Returns the parent widget of this widget.
     */
    getParent(): any;

    /**
     * Return true if this widget can currently be focused
     * and false if not
     */
    isFocusable(): any;

    /**
     * Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
     */
    isLeftToRight(): any;

    /**
     * Call specified function when event occurs, ex: myWidget.on("click", function() ... ).
     * Call specified function when event type occurs, ex: myWidget.on("click", function() ... ).
    Note that the function is not run in any particular scope, so if (for example) you want it to run in the
    widget's scope you must do myWidget.on("click", lang.hitch(myWidget, func)).
     * @param type Name of event (ex: "click") or extension event like touch.press.
     * @param func 
    */
    on(type: String, func: Function): any;

    /**
     * Call specified function when event occurs, ex: myWidget.on("click", function() ... ).
     * Call specified function when event type occurs, ex: myWidget.on("click", function() ... ).
    Note that the function is not run in any particular scope, so if (for example) you want it to run in the
    widget's scope you must do myWidget.on("click", lang.hitch(myWidget, func)).
     * @param type Name of event (ex: "click") or extension event like touch.press.
     * @param func 
    */
    on(type: Function, func: Function): any;

    /**
     * Track specified handles and remove/destroy them when this instance is destroyed, unless they were
     * already removed/destroyed manually.
     */
    own(): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: String, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: HTMLElement, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: dijit._WidgetBase, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: String, position: number): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: HTMLElement, position: number): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: dijit._WidgetBase, position: number): any;

    /**
     * Processing after the DOM fragment is created
     * Called after the DOM fragment has been created, but not necessarily
    added to the document.  Do not include any operations which rely on
    node dimensions or placement.
    */
    postCreate(): void;

    /**
     * 
     */
    postMixInProperties(): void;

    /**
     * 
     * @param context Optional
     */
    render(context: undefined.Context): void;

    /**
     * Set a property on a widget
     * Sets named properties on a widget which may potentially be handled by a
    setter in the widget.

    For example, if the widget has properties foo and bar
    and a method named _setFooAttr(), calling
    myWidget.set("foo", "Howdy!") would be equivalent to calling
    widget._setFooAttr("Howdy!") and myWidget.set("bar", 3)
    would be equivalent to the statement widget.bar = 3;

    set() may also be called with a hash of name/value pairs, ex:

    myWidget.set({
         foo: "Howdy",
         bar: 3
    });
    This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
     * @param name The property to set.
     * @param value The value to set in the property.
    */
    set(name: any, value: any): any;

    /**
     * Processing after the DOM fragment is added to the document
     * Called after a widget and its children have been created and added to the page,
    and all related widgets have finished their create() cycle, up through postCreate().

    Note that startup() may be called while the widget is still hidden, for example if the widget is
    inside a hidden dijit/Dialog or an unselected tab of a dijit/layout/TabContainer.
    For widgets that need to do layout, it's best to put that layout code inside resize(), and then
    extend dijit/layout/_LayoutWidget so that resize() is called when the widget is visible.
    */
    startup(): void;

    /**
     * Deprecated, will be removed in 2.0, use this.own(topic.subscribe()) instead.
     * 
    Subscribes to the specified topic and calls the specified method
    of this object and registers for unsubscribe() on widget destroy.

    Provide widget-specific analog to dojo.subscribe, except with the
    implicit use of this widget as the target object.
     * @param t The topic
     * @param method The callback
    */
    subscribe(t: String, method: Function): any;

    /**
     * Returns a string that represents the widget.
     * When a widget is cast to a string, this method will be used to generate the
    output. Currently, it does not implement any sort of reversible
    serialization.
    */
    toString(): string;

    /**
     * Deprecated. Override destroy() instead to implement custom widget tear-down
     * behavior.
     */
    uninitialize(): boolean;

    /**
     * Deprecated, will be removed in 2.0, use handle.remove() instead.
     * 
    Unsubscribes handle created by this.subscribe.
    Also removes handle from this widget's list of subscriptions
     * @param handle 
    */
    unsubscribe(handle: Object): void;

    /**
     * Watches a property for changes
     * @param name OptionalIndicates the property to watch. This is optional (the callback may be theonly parameter), and if omitted, all the properties will be watched
     * @param callback The function to execute when the property changes. This will be called afterthe property has been changed. The callback will be called with the |this|set to the instance, the first argument as the name of the property, thesecond argument as the old value and the third argument as the new value.
     */
    watch(name: String, callback: Function): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/Inline.html
 * @param args 
 * @param node 
 */
declare class Inline {
    constructor(args: Object, node: HTMLElement): this;

    /**
     * Deprecated. Instead of attributeMap, widget should have a _setXXXAttr attribute
     * for each XXX attribute to be mapped to the DOM.

    attributeMap sets up a "binding" between attributes (aka properties)
    of the widget and the widget's DOM.
    Changes to widget attributes listed in attributeMap will be
    reflected into the DOM.

    For example, calling set('title', 'hello')
    on a TitlePane will automatically cause the TitlePane's DOM to update
    with the new title.

    attributeMap is a hash where the key is an attribute of the widget,
    and the value reflects a binding to a:

    DOM node attribute
       focus: {node: "focusNode", type: "attribute"}
    Maps this.focus to this.focusNode.focus

    DOM node innerHTML
       title: { node: "titleNode", type: "innerHTML" }
    Maps this.title to this.titleNode.innerHTML

    DOM node innerText
       title: { node: "titleNode", type: "innerText" }
    Maps this.title to this.titleNode.innerText

    DOM node CSS class
       myClass: { node: "domNode", type: "class" }
    Maps this.myClass to this.domNode.className

    If the value is an array, then each element in the array matches one of the
    formats of the above list.

    There are also some shorthands for backwards compatibility:

    string --> { node: string, type: "attribute" }, for example:
    "focusNode" ---> { node: "focusNode", type: "attribute" }
    "" --> { node: "domNode", type: "attribute" }
    */
    attributeMap: Object;

    /**
     * Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
     * widget state.
     */
    baseClass: string;

    /**
     * 
     */
    class: string;

    /**
     * Designates where children of the source DOM node will be placed.
     * "Children" in this case refers to both DOM nodes and widgets.
    For example, for myWidget:

    <div data-dojo-type=myWidget>
         <b> here's a plain DOM node
         <span data-dojo-type=subWidget>and a widget</span>
         <i> and another plain DOM node </i>
    </div>
    containerNode would point to:

    <b> here's a plain DOM node
    <span data-dojo-type=subWidget>and a widget</span>
    <i> and another plain DOM node </i>
    In templated widgets, "containerNode" is set via a
    data-dojo-attach-point assignment.

    containerNode must be defined for any widget that accepts innerHTML
    (like ContentPane or BorderContainer or even Button), and conversely
    is null for widgets that don't, like TextBox.
    */
    containerNode: HTMLElement;

    /**
     * 
     */
    context: Object;

    /**
     * 
     */
    declaredClass: string;

    /**
     * Bi-directional support, as defined by the HTML DIR
     * attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
    default direction.
    */
    dir: string;

    /**
     * This is our visible representation of the widget! Other DOM
     * Nodes may by assigned to other properties, usually through the
    template system's data-dojo-attach-point syntax, but the domNode
    property is the canonical "top level" node in widget UI.
    */
    domNode: HTMLElement;

    /**
     * This widget or a widget it contains has focus, or is "active" because
     * it was recently clicked.
     */
    focused: boolean;

    /**
     * A unique, opaque ID string that can be assigned by users or by the
     * system. If the developer passes an ID which is known not to be
    unique, the specified ID is ignored and the system-generated ID is
    used instead.
    */
    id: string;

    /**
     * Rarely used.  Overrides the default Dojo locale used to render this widget,
     * as defined by the HTML LANG attribute.
    Value must be among the list of locales specified during by the Dojo bootstrap,
    formatted according to RFC 3066 (like en-us).
    */
    lang: string;

    /**
     * The document this widget belongs to.  If not specified to constructor, will default to
     * srcNodeRef.ownerDocument, or if no sourceRef specified, then to the document global
     */
    ownerDocument: Object;

    /**
     * pointer to original DOM node
     */
    srcNodeRef: HTMLElement;

    /**
     * HTML style attributes as cssText string or name/value hash
     */
    style: string;

    /**
     * HTML title attribute.
     * 
    For form widgets this specifies a tooltip to display when hovering over
    the widget (just like the native HTML title attribute).

    For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
    etc., it's used to specify the tab label, accordion pane title, etc.  In this case it's
    interpreted as HTML.
    */
    title: string;

    /**
     * When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
     * this specifies the tooltip to appear when the mouse is hovered over that text.
     */
    tooltip: string;

    /**
     * 
     */
    buildRendering(): void;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: String, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: String, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: Function, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: Function, method: String): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: String, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: String, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: Object, event: Function, method: Function): any;

    /**
     * Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
     * 
    Connects specified obj/event to specified method of this object
    and registers for disconnect() on widget destroy.

    Provide widget-specific analog to dojo.connect, except with the
    implicit use of this widget as the target object.
    Events connected with this.connect are disconnected upon
    destruction.
     * @param obj 
     * @param event 
     * @param method 
    */
    connect(obj: any, event: Function, method: Function): any;

    /**
     * Wrapper to setTimeout to avoid deferred functions executing
     * after the originating widget has been destroyed.
    Returns an object handle with a remove method (that returns null) (replaces clearTimeout).
     * @param fcn Function reference.
     * @param delay OptionalDelay, defaults to 0.
    */
    defer(fcn: Function, delay: number): Object;

    /**
     * Destroy this widget, but not its descendants.  Descendants means widgets inside of
     * this.containerNode.   Will also destroy any resources (including widgets) registered via this.own().

    This method will also destroy internal widgets such as those created from a template,
    assuming those widgets exist inside of this.domNode but outside of this.containerNode.

    For 2.0 it's planned that this method will also destroy descendant widgets, so apps should not
    depend on the current ability to destroy a widget without destroying its descendants.   Generally
    they should use destroyRecursive() for widgets with children.
     * @param preserveDom If true, this method will leave the original DOM structure alone.Note: This will not yet work with _TemplatedMixin widgets
    */
    destroy(preserveDom: boolean): void;

    /**
     * Recursively destroy the children of this widget and their
     * descendants.
     * @param preserveDom OptionalIf true, the preserveDom attribute is passed to all descendantwidget's .destroy() method. Not for use with _Templatedwidgets.
     */
    destroyDescendants(preserveDom: boolean): void;

    /**
     * Destroy this widget and its descendants
     * This is the generic "destructor" function that all widget users
    should call to cleanly discard with a widget. Once a widget is
    destroyed, it is removed from the manager object.
     * @param preserveDom OptionalIf true, this method will leave the original DOM structurealone of descendant Widgets. Note: This will NOT work withdijit._TemplatedMixin widgets.
    */
    destroyRecursive(preserveDom: boolean): void;

    /**
     * Destroys the DOM nodes associated with this widget.
     * @param preserveDom OptionalIf true, this method will leave the original DOM structure aloneduring tear-down. Note: this will not work with _Templatedwidgets yet.
     */
    destroyRendering(preserveDom: boolean): void;

    /**
     * Deprecated, will be removed in 2.0, use handle.remove() instead.
     * 
    Disconnects handle created by connect.
     * @param handle 
    */
    disconnect(handle: any): void;

    /**
     * Used by widgets to signal that a synthetic event occurred, ex:
     * 
    myWidget.emit("attrmodified-selectedChildWidget", {}).
    Emits an event on this.domNode named type.toLowerCase(), based on eventObj.
    Also calls onType() method, if present, and returns value from that method.
    By default passes eventObj to callback, but will pass callbackArgs instead, if specified.
    Modifies eventObj by adding missing parameters (bubbles, cancelable, widget).
     * @param type 
     * @param eventObj Optional
     * @param callbackArgs Optional
    */
    emit(type: String, eventObj: Object, callbackArgs: any[]): any;

    /**
     * Get a property from a widget.
     * Get a named property from a widget. The property may
    potentially be retrieved via a getter method. If no getter is defined, this
    just retrieves the object's property.

    For example, if the widget has properties foo and bar
    and a method named _getFooAttr(), calling:
    myWidget.get("foo") would be equivalent to calling
    widget._getFooAttr() and myWidget.get("bar")
    would be equivalent to the expression
    widget.bar2
     * @param name The property to get.
    */
    get(name: any): any;

    /**
     * Returns all direct children of this widget, i.e. all widgets underneath this.containerNode whose parent
     * is this widget.   Note that it does not return all descendants, but rather just direct children.
    Analogous to Node.childNodes,
    except containing widgets rather than DOMNodes.

    The result intentionally excludes internally created widgets (a.k.a. supporting widgets)
    outside of this.containerNode.

    Note that the array returned is a simple array.  Application code should not assume
    existence of methods like forEach().
    */
    getChildren(): any[];

    /**
     * Returns the parent widget of this widget.
     */
    getParent(): any;

    /**
     * Return true if this widget can currently be focused
     * and false if not
     */
    isFocusable(): any;

    /**
     * Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
     */
    isLeftToRight(): any;

    /**
     * Call specified function when event occurs, ex: myWidget.on("click", function(){ ... }).
     * Call specified function when event type occurs, ex: myWidget.on("click", function(){ ... }).
    Note that the function is not run in any particular scope, so if (for example) you want it to run in the
    widget's scope you must do myWidget.on("click", lang.hitch(myWidget, func)).
     * @param type Name of event (ex: "click") or extension event like touch.press.
     * @param func 
    */
    on(type: String, func: Function): any;

    /**
     * Call specified function when event occurs, ex: myWidget.on("click", function(){ ... }).
     * Call specified function when event type occurs, ex: myWidget.on("click", function(){ ... }).
    Note that the function is not run in any particular scope, so if (for example) you want it to run in the
    widget's scope you must do myWidget.on("click", lang.hitch(myWidget, func)).
     * @param type Name of event (ex: "click") or extension event like touch.press.
     * @param func 
    */
    on(type: Function, func: Function): any;

    /**
     * Track specified handles and remove/destroy them when this instance is destroyed, unless they were
     * already removed/destroyed manually.
     */
    own(): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: String, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: HTMLElement, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: dijit._WidgetBase, position: String): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: String, position: number): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: HTMLElement, position: number): any;

    /**
     * Place this widget somewhere in the DOM based
     * on standard domConstruct.place() conventions.
    A convenience function provided in all _Widgets, providing a simple
    shorthand mechanism to put an existing (or newly created) Widget
    somewhere in the dom, and allow chaining.
     * @param reference Widget, DOMNode, or id of widget or DOMNode
     * @param position OptionalIf reference is a widget (or id of widget), and that widget has an ".addChild" method,it will be called passing this widget instance into that method, supplying the optionalposition index passed.  In this case position (if specified) should be an integer.If reference is a DOMNode (or id matching a DOMNode but not a widget),the position argument can be a numeric index or a string"first", "last", "before", or "after", same as dojo/dom-construct::place().
    */
    placeAt(reference: dijit._WidgetBase, position: number): any;

    /**
     * Processing after the DOM fragment is created
     * Called after the DOM fragment has been created, but not necessarily
    added to the document.  Do not include any operations which rely on
    node dimensions or placement.
    */
    postCreate(): void;

    /**
     * 
     */
    postMixInProperties(): void;

    /**
     * 
     * @param context Optional
     */
    render(context: Object): void;

    /**
     * 
     * @param context Optional
     */
    render(context: undefined.Context): void;

    /**
     * Set a property on a widget
     * Sets named properties on a widget which may potentially be handled by a
    setter in the widget.

    For example, if the widget has properties foo and bar
    and a method named _setFooAttr(), calling
    myWidget.set("foo", "Howdy!") would be equivalent to calling
    widget._setFooAttr("Howdy!") and myWidget.set("bar", 3)
    would be equivalent to the statement widget.bar = 3;

    set() may also be called with a hash of name/value pairs, ex:

    myWidget.set({
         foo: "Howdy",
         bar: 3
    });
    This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
     * @param name The property to set.
     * @param value The value to set in the property.
    */
    set(name: any, value: any): any;

    /**
     * Processing after the DOM fragment is added to the document
     * Called after a widget and its children have been created and added to the page,
    and all related widgets have finished their create() cycle, up through postCreate().

    Note that startup() may be called while the widget is still hidden, for example if the widget is
    inside a hidden dijit/Dialog or an unselected tab of a dijit/layout/TabContainer.
    For widgets that need to do layout, it's best to put that layout code inside resize(), and then
    extend dijit/layout/_LayoutWidget so that resize() is called when the widget is visible.
    */
    startup(): void;

    /**
     * Deprecated, will be removed in 2.0, use this.own(topic.subscribe()) instead.
     * 
    Subscribes to the specified topic and calls the specified method
    of this object and registers for unsubscribe() on widget destroy.

    Provide widget-specific analog to dojo.subscribe, except with the
    implicit use of this widget as the target object.
     * @param t The topic
     * @param method The callback
    */
    subscribe(t: String, method: Function): any;

    /**
     * Returns a string that represents the widget.
     * When a widget is cast to a string, this method will be used to generate the
    output. Currently, it does not implement any sort of reversible
    serialization.
    */
    toString(): string;

    /**
     * Deprecated. Override destroy() instead to implement custom widget tear-down
     * behavior.
     */
    uninitialize(): boolean;

    /**
     * Deprecated, will be removed in 2.0, use handle.remove() instead.
     * 
    Unsubscribes handle created by this.subscribe.
    Also removes handle from this widget's list of subscriptions
     * @param handle 
    */
    unsubscribe(handle: Object): void;

    /**
     * Watches a property for changes
     * @param name OptionalIndicates the property to watch. This is optional (the callback may be theonly parameter), and if omitted, all the properties will be watched
     * @param callback The function to execute when the property changes. This will be called afterthe property has been changed. The callback will be called with the |this|set to the instance, the first argument as the name of the property, thesecond argument as the old value and the third argument as the new value.
     */
    watch(name: String, callback: Function): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.objects.html
 */
declare interface contrib$objects {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dijit.html
 */
declare interface contrib$dijit {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.data.html
 */
declare interface contrib$data {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dom.html
 */
declare interface contrib$dom {

    /**
     * 
     * @param text 
     */
    getTemplate(text: any): Object,

        /**
         * 
         * @param nodes 
         */
        tokenize(nodes: HTMLElement): any[]
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/ext-dojo/NodeList.html
 * 
Array-like object which adds syntactic
sugar for chaining, common iteration operations, animation, and
node manipulation. NodeLists are most often returned as the
result of dojo/query() calls.
NodeList instances provide many utilities that reflect
core Dojo APIs for Array iteration and manipulation, DOM
manipulation, and event handling. Instead of needing to dig up
functions in the dojo package, NodeLists generally make the
full power of Dojo available for DOM manipulation tasks in a
simple, chainable way.
 * @param array 
*/
declare interface ext_dojo$NodeList {
    (array: any): void
}

declare var events: any[];


/**
 * adds the specified class to every node in the list
 * @param className A String class name to add, or several space-separated class names,or an array of class names.
 */
declare interface NodeList$addClass {
    (className: String): void
}


/**
 * Animate the effects of adding a class to all nodes in this list.
 * see dojox.fx.addClass
 * @param cssClass 
 * @param args 
 */
declare interface NodeList$addClassFx {
    (cssClass: any, args: any): {
        type: Function,
        value: any
    }
}


/**
 * add a node, NodeList or some HTML as a string to every item in the
 * list.  Returns the original list.
a copy of the HTML content is added to each item in the
list, with an optional position argument. If no position
argument is provided, the content is appended to the end of
each item.
 * @param content the content to be set on the parent element.This can be an html string, a node reference or a NodeList, dojo/NodeList, Array or other enumerable list of nodes
 * @param position Optionalcan be one of:"last"||"end" (default)"first||"start""before""after""replace" (replaces nodes in this NodeList with new content)"only" (removes other children of the nodes so new content is the only child)or an offset in the childNodes property
*/
declare interface NodeList$addContent {
    (content: String, position: String): Function
}


/**
 * places any/all elements in queryOrListOrNode at a
 * position relative to the first element in this list.
Returns a dojo/NodeList of the adopted elements.
 * @param queryOrListOrNode a DOM node or a query string or a query result.Represents the nodes to be adopted relative to thefirst element of this NodeList.
 * @param position Optionalcan be one of:"last" (default)"first""before""after""only""replace"or an offset in the childNodes property
*/
declare interface NodeList$adopt {
    (queryOrListOrNode: String, position: String): any
}


/**
 * Places the content after every node in the NodeList.
 * The content will be cloned if the length of NodeList
is greater than 1. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param content 
*/
declare interface NodeList$after {
    (content: String): any
}


/**
 * Adds the nodes from the previous dojo/NodeList to the current dojo/NodeList.
 * .end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
*/
declare interface NodeList$andSelf {
    (): any
}


/**
 * Animate one or more CSS properties for all nodes in this list.
 * The returned animation object will already be playing when it
is returned. See the docs for dojo.anim for full details.
 * @param properties the properties to animate. does NOT support the auto parameter like otherNodeList-fx methods.
 * @param duration OptionalOptional. The time to run the animations for
 * @param easing OptionalOptional. The easing function to use.
 * @param onEnd OptionalA function to be called when the animation ends
 * @param delay Optionalhow long to delay playing the returned animation
*/
declare interface NodeList$anim {
    (properties: Object, duration: number, easing: Function, onEnd: Function, delay: number): any
}


/**
 * Animate all elements of this NodeList across the properties specified.
 * syntax identical to dojo.animateProperty
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$animateProperty {
    (args: Object): any
}


/**
 * appends the content to every node in the NodeList.
 * The content will be cloned if the length of NodeList
is greater than 1. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param content 
*/
declare interface NodeList$append {
    (content: String): any
}


/**
 * appends nodes in this NodeList to the nodes matched by
 * the query passed to appendTo.
The nodes in this NodeList will be cloned if the query
matches more than one element. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param query 
*/
declare interface NodeList$appendTo {
    (query: String): any
}


/**
 * Returns a new NodeList comprised of items in this NodeList
 * at the given index or indices.
 * @param index One or more 0-based indices of items in the currentNodeList. A negative index will start at the end of thelist and go backwards.
 */
declare interface NodeList$at {
    (index: number[]): any
}


/**
 * gets or sets the DOM attribute for every element in the
 * NodeList. See also dojo/dom-attr
 * @param property the attribute to get/set
 * @param value Optionaloptional. The value to set the property to
 */
declare interface NodeList$attr {
    (property: String, value: String): any
}


/**
 * Places the content before every node in the NodeList.
 * The content will be cloned if the length of NodeList
is greater than 1. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param content 
*/
declare interface NodeList$before {
    (content: String): any
}


/**
 * Returns all immediate child elements for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the child elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$children {
    (query: String): any
}


/**
 * Clones all the nodes in this NodeList and returns them as a new NodeList.
 * Only the DOM nodes are cloned, not any attached event handlers.
 */
declare interface NodeList$clone {
    (): any
}


/**
 * Returns closest parent that matches query, including current node in this
 * dojo/NodeList if it matches the query.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query a CSS selector.
 * @param root OptionalIf specified, query is relative to "root" rather than document body.
*/
declare interface NodeList$closest {
    (query: String, root: String): any
}


/**
 * Returns a new NodeList comprised of items in this NodeList
 * as well as items passed in as parameters
This method behaves exactly like the Array.concat method
with the caveat that it returns a NodeList and not a
raw Array. For more details, see the Array.concat
docs
 * @param item OptionalAny number of optional parameters may be passed in to bespliced into the NodeList
*/
declare interface NodeList$concat {
    (item: Object): any
}


/**
 * Attach event handlers to every item of the NodeList. Uses dojo.connect()
 * so event properties are normalized.

Application must manually require() "dojo/_base/connect" before using this method.
 * @param methodName the name of the method to attach to. For DOM events, this should bethe lower-case name of the event
 * @param objOrFunc if 2 arguments are passed (methodName, objOrFunc), objOrFunc shouldreference a function or be the name of the function in the globalnamespace to attach. If 3 arguments are provided(methodName, objOrFunc, funcName), objOrFunc must be the scope tolocate the bound function in
 * @param funcName Optionaloptional. A string naming the function in objOrFunc to bind to theevent. May also be a function reference.
*/
declare interface NodeList$connect {
    (methodName: String, objOrFunc: Object, funcName: String): void
}


/**
 * Deprecated: Use position() for border-box x/y/w/h
 * or marginBox() for margin-box w/h/l/t.
Returns the box objects of all elements in a node list as
an Array (not a NodeList). Acts like domGeom.coords, though assumes
the node passed is each node in this list.
*/
declare interface NodeList$coords {
    (): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.data.html
 */
declare interface NodeList$data {}


/**
 * Monitor nodes in this NodeList for [bubbled] events on nodes that match selector.
 * Calls fn(evt) for those events, where (inside of fn()), this == the node
that matches the selector.
Sets up event handlers that can catch events on any subnodes matching a given selector,
including nodes created after delegate() has been called.

This allows an app to setup a single event handler on a high level node, rather than many
event handlers on subnodes. For example, one onclick handler for a Tree widget, rather than separate
handlers for each node in the tree.
Since setting up many event handlers is expensive, this can increase performance.

Note that delegate() will not work for events that don't bubble, like focus.
onmouseenter/onmouseleave also don't currently work.
 * @param selector CSS selector valid to dojo.query, like ".foo" or "div>span".  Theselector is relative to the nodes in this NodeList, not the document root.For example myNodeList.delegate("> a", "onclick", ...) will catch events onanchor nodes which are (immediate) children of the nodes in myNodeList.
 * @param eventName Standard event name used as an argument to dojo.connect, like "onclick".
 * @param fn Callback function passed the event object, and where this == the node that matches the selector.That means that for example, after setting up a handler viadojo.query("body").delegate("fieldset", "onclick", ...)clicking on a fieldset or any nodes inside of a fieldset will be reportedas a click on the fieldset itself.
*/
declare interface NodeList$delegate {
    (selector: String, eventName: String, fn: Function): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl.html
 * 
Deprecated.  Should require dojox/dtl modules directly rather than trying to access them through
this module.
*/
declare interface NodeList$dtl {}


/**
 * clears all content from each node in the list. Effectively
 * equivalent to removing all child nodes from every item in
the list.
*/
declare interface NodeList$empty {
    (): any
}


/**
 * Ends use of the current NodeList by returning the previous NodeList
 * that generated the current NodeList.
Returns the NodeList that generated the current NodeList. If there
is no parent NodeList, an empty NodeList is returned.
*/
declare interface NodeList$end {
    (): any
}


/**
 * Returns the even nodes in this dojo/NodeList as a dojo/NodeList.
 * .end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
*/
declare interface NodeList$even {
    (): any
}


/**
 * see dojo/_base/array.every() and the Array.every
 * docs.
Takes the same structure of arguments and returns as
dojo/_base/array.every() with the caveat that the passed array is
implicitly this NodeList
 * @param callback the callback
 * @param thisObject Optionalthe context
*/
declare interface NodeList$every {
    (callback: Function, thisObject: Object): any
}


/**
 * fade in all elements of this NodeList via dojo.fadeIn
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$fadeIn {
    (args: Object): any
}


/**
 * fade out all elements of this NodeList via dojo.fadeOut
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$fadeOut {
    (args: Object): any
}


/**
 * Returns a clone of this context, only containing the items defined in the filter.
 * @param filter 
 */
declare interface NodeList$filter {
    (filter: undefined.Context): any
}


/**
 * Returns the first node in this dojo/NodeList as a dojo/NodeList.
 * .end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
*/
declare interface NodeList$first {
    (): any
}


/**
 * see dojo/_base/array.forEach(). The primary difference is that the acted-on
 * array is implicitly this NodeList. If you want the option to break out
of the forEach loop, use every() or some() instead.
 * @param callback 
 * @param thisObj 
*/
declare interface NodeList$forEach {
    (callback: any, thisObj: any): Function
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.html.html
 */
declare interface NodeList$html {}


/**
 * see dojo/_base/array.indexOf(). The primary difference is that the acted-on
 * array is implicitly this NodeList
For more details on the behavior of indexOf, see Mozilla's
indexOf
docs
 * @param value The value to search for.
 * @param fromIndex OptionalThe location to start searching from. Optional. Defaults to 0.
*/
declare interface NodeList$indexOf {
    (value: Object, fromIndex: number): any
}


/**
 * allows setting the innerHTML of each node in the NodeList,
 * if there is a value passed in, otherwise, reads the innerHTML value of the first node.
This method is simpler than the dojo/NodeList.html() method provided by
dojo/NodeList-html. This method just does proper innerHTML insertion of HTML fragments,
and it allows for the innerHTML to be read for the first node in the node list.
Since dojo/NodeList-html already took the "html" name, this method is called
"innerHTML". However, if dojo/NodeList-html has not been loaded yet, this
module will define an "html" method that can be used instead. Be careful if you
are working in an environment where it is possible that dojo/NodeList-html could
have been loaded, since its definition of "html" will take precedence.
The nodes represented by the value argument will be cloned if more than one
node is in this NodeList. The nodes in this NodeList are returned in the "set"
usage of this method, not the HTML that was inserted.
 * @param value Optional
*/
declare interface NodeList$innerHTML {
    (value: String): any
}


/**
 * The nodes in this NodeList will be placed after the nodes
 * matched by the query passed to insertAfter.
The nodes in this NodeList will be cloned if the query
matches more than one element. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param query 
*/
declare interface NodeList$insertAfter {
    (query: String): any
}


/**
 * The nodes in this NodeList will be placed after the nodes
 * matched by the query passed to insertAfter.
The nodes in this NodeList will be cloned if the query
matches more than one element. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param query 
*/
declare interface NodeList$insertBefore {
    (query: String): any
}


/**
 * Create a new instance of a specified class, using the
 * specified properties and each node in the NodeList as a
srcNodeRef.
 * @param declaredClass 
 * @param properties Optional
*/
declare interface NodeList$instantiate {
    (declaredClass: String, properties: Object): any
}


/**
 * Returns the last node in this dojo/NodeList as a dojo/NodeList.
 * .end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
*/
declare interface NodeList$last {
    (): any
}


/**
 * see dojo/_base/array.lastIndexOf(). The primary difference is that the
 * acted-on array is implicitly this NodeList
For more details on the behavior of lastIndexOf, see
Mozilla's lastIndexOf
docs
 * @param value The value to search for.
 * @param fromIndex OptionalThe location to start searching from. Optional. Defaults to 0.
*/
declare interface NodeList$lastIndexOf {
    (value: Object, fromIndex: number): any
}


/**
 * see dojo/_base/array.map(). The primary difference is that the acted-on
 * array is implicitly this NodeList and the return is a
NodeList (a subclass of Array)
 * @param func 
 * @param obj Optional
*/
declare interface NodeList$map {
    (func: Function, obj: Function): any
}


/**
 * Returns margin-box size of nodes
 */
declare interface NodeList$marginBox {
    (): void
}


/**
 * Returns the next element for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the next elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$next {
    (query: String): any
}


/**
 * Returns all sibling elements that come after the nodes in this dojo/NodeList.
 * Optionally takes a query to filter the sibling elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$nextAll {
    (query: String): any
}


/**
 * Returns the odd nodes in this dojo/NodeList as a dojo/NodeList.
 * .end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
*/
declare interface NodeList$odd {
    (): any
}


/**
 * Listen for events on the nodes in the NodeList. Basic usage is:
 * @param eventName 
 * @param listener 
 */
declare interface NodeList$on {
    (eventName: any, listener: any): any
}


/**
 * removes elements in this list that match the filter
 * from their parents and returns them as a new NodeList.
 * @param filter OptionalCSS selector like ".foo" or "div>span"
 */
declare interface NodeList$orphan {
    (filter: String): any
}


/**
 * Returns immediate parent elements for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the parent elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$parent {
    (query: String): any
}


/**
 * Returns all parent elements for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the child elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$parents {
    (query: String): any
}


/**
 * places elements of this node list relative to the first element matched
 * by queryOrNode. Returns the original NodeList. See: dojo/dom-construct.place
 * @param queryOrNode may be a string representing any valid CSS3 selector or a DOM node.In the selector case, only the first matching element will be usedfor relative positioning.
 * @param position can be one of:"last" (default)"first""before""after""only""replace"or an offset in the childNodes property
 */
declare interface NodeList$place {
    (queryOrNode: String, position: String): any
}


/**
 * Returns border-box objects (x/y/w/h) of all elements in a node list
 * as an Array (not a NodeList). Acts like dojo/dom-geometry-position, though
assumes the node passed is each node in this list.
*/
declare interface NodeList$position {
    (): any
}


/**
 * prepends the content to every node in the NodeList.
 * The content will be cloned if the length of NodeList
is greater than 1. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param content 
*/
declare interface NodeList$prepend {
    (content: String): any
}


/**
 * prepends nodes in this NodeList to the nodes matched by
 * the query passed to prependTo.
The nodes in this NodeList will be cloned if the query
matches more than one element. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param query 
*/
declare interface NodeList$prependTo {
    (query: String): any
}


/**
 * Returns the previous element for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the previous elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$prev {
    (query: String): any
}


/**
 * Returns all sibling elements that come before the nodes in this dojo/NodeList.
 * Optionally takes a query to filter the sibling elements.
The returned nodes will be in reverse DOM order -- the first node in the list will
be the node closest to the original node/NodeList.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$prevAll {
    (query: String): any
}


/**
 * Returns a new list whose members match the passed query,
 * assuming elements of the current NodeList as the root for
each search.
 * @param queryStr 
*/
declare interface NodeList$query {
    (queryStr: String): any
}


/**
 * removes elements in this list that match the filter
 * from their parents and returns them as a new NodeList.
 * @param filter OptionalCSS selector like ".foo" or "div>span"
 */
declare interface NodeList$remove {
    (filter: String): any
}


/**
 * Removes an attribute from each node in the list.
 * @param name the name of the attribute to remove
 */
declare interface NodeList$removeAttr {
    (name: String): void
}


/**
 * removes the specified class from every node in the list
 * @param className OptionalAn optional String class name to remove, or several space-separatedclass names, or an array of class names. If omitted, all class nameswill be deleted.
 */
declare interface NodeList$removeClass {
    (className: String): any
}


/**
 * Animate the effect of removing a class to all nodes in this list.
 * see dojox.fx.removeClass
 * @param cssClass 
 * @param args 
 */
declare interface NodeList$removeClassFx {
    (cssClass: any, args: any): {
        type: Function,
        value: any
    }
}


/**
 * Remove the data associated with these nodes.
 * @param key OptionalIf omitted, clean all data for this node.If passed, remove the data item found at key
 */
declare interface NodeList$removeData {
    (key: String): void
}


/**
 * replaces nodes matched by the query passed to replaceAll with the nodes
 * in this NodeList.
The nodes in this NodeList will be cloned if the query
matches more than one element. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param query 
*/
declare interface NodeList$replaceAll {
    (query: String): any
}


/**
 * Replaces one or more classes on a node if not present.
 * Operates more quickly than calling removeClass() and addClass()
 * @param addClassStr A String class name to add, or several space-separated class names,or an array of class names.
 * @param removeClassStr OptionalA String class name to remove, or several space-separated class names,or an array of class names.
 */
declare interface NodeList$replaceClass {
    (addClassStr: String, removeClassStr: String): void
}


/**
 * Replaces each node in ths NodeList with the content passed to replaceWith.
 * The content will be cloned if the length of NodeList
is greater than 1. Only the DOM nodes are cloned, not
any attached event handlers.
 * @param content 
*/
declare interface NodeList$replaceWith {
    (content: String): any
}


/**
 * Returns all sibling elements for nodes in this dojo/NodeList.
 * Optionally takes a query to filter the sibling elements.
.end() can be used on the returned dojo/NodeList to get back to the
original dojo/NodeList.
 * @param query Optionala CSS selector.
*/
declare interface NodeList$siblings {
    (query: String): any
}


/**
 * Returns a new NodeList, maintaining this one in place
 * This method behaves exactly like the Array.slice method
with the caveat that it returns a dojo/NodeList and not a
raw Array. For more details, see Mozilla's slice
documentation
 * @param begin Can be a positive or negative integer, with positiveintegers noting the offset to begin at, and negativeintegers denoting an offset from the end (i.e., to the leftof the end)
 * @param end OptionalOptional parameter to describe what position relative tothe NodeList's zero index to end the slice at. Like begin,can be positive or negative.
*/
declare interface NodeList$slice {
    (begin: number, end: number): any
}


/**
 * slide all elements of the node list to the specified place via dojo/fx.slideTo()
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$slideTo {
    (args: Object): any
}


/**
 * Takes the same structure of arguments and returns as
 * dojo/_base/array.some() with the caveat that the passed array is
implicitly this NodeList.  See dojo/_base/array.some() and Mozilla's
Array.some
documentation.
 * @param callback the callback
 * @param thisObject Optionalthe context
*/
declare interface NodeList$some {
    (callback: Function, thisObject: Object): any
}


/**
 * Returns a new NodeList, manipulating this NodeList based on
 * the arguments passed, potentially splicing in new elements
at an offset, optionally deleting elements
This method behaves exactly like the Array.splice method
with the caveat that it returns a dojo/NodeList and not a
raw Array. For more details, see Mozilla's splice
documentation
For backwards compatibility, calling .end() on the spliced NodeList
does not return the original NodeList -- splice alters the NodeList in place.
 * @param index begin can be a positive or negative integer, with positiveintegers noting the offset to begin at, and negativeintegers denoting an offset from the end (i.e., to the leftof the end)
 * @param howmany OptionalOptional parameter to describe what position relative tothe NodeList's zero index to end the slice at. Like begin,can be positive or negative.
 * @param item OptionalAny number of optional parameters may be passed in to bespliced into the NodeList
*/
declare interface NodeList$splice {
    (index: number, howmany: number, item: Object[]): any
}


/**
 * gets or sets the CSS property for every element in the NodeList
 * @param property the CSS property to get/set, in JavaScript notation("lineHieght" instead of "line-height")
 * @param value Optionaloptional. The value to set the property to
 */
declare interface NodeList$style {
    (property: String, value: String): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.text.html
 */
declare interface NodeList$text {

    /**
     * 
     * @param name 
     * @param errorless 
     */
    getFilter(name: any, errorless: any): any,

        /**
         * 
         * @param name 
         * @param errorless 
         */
        getTag(name: any, errorless: any): any,

        /**
         * 
         * @param file 
         */
        getTemplate(file: any): any,

        /**
         * 
         * @param file 
         */
        getTemplateString(file: any): String,

        /**
         * 
         * @param str 
         */
        tokenize(str: any): any
}


/**
 * Adds a class to node if not present, or removes if present.
 * Pass a boolean condition if you want to explicitly add or remove.
 * @param className the CSS class to add
 * @param condition OptionalIf passed, true means to add the class, false means to remove.
 */
declare interface NodeList$toggleClass {
    (className: String, condition: boolean): void
}


/**
 * Animate the effect of adding or removing a class to all nodes in this list.
 * see dojox.fx.toggleClass
 * @param cssClass 
 * @param force 
 * @param args 
 */
declare interface NodeList$toggleClassFx {
    (cssClass: any, force: any, args: any): {
        type: Function,
        value: any
    }
}


/**
 * 
 */
declare interface NodeList$toString {
    (): any
}


/**
 * If a value is passed, allows seting the value property of form elements in this
 * NodeList, or properly selecting/checking the right value for radio/checkbox/select
elements. If no value is passed, the value of the first node in this NodeList
is returned.
 * @param value 
*/
declare interface NodeList$val {
    (value: String): any
}


/**
 * wipe in all elements of this NodeList via dojo/fx.wipeIn()
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$wipeIn {
    (args: Object): any
}


/**
 * wipe out all elements of this NodeList via dojo/fx.wipeOut()
 * @param args OptionalAdditional dojo/_base/fx.Animation arguments to mix into this set with the addition ofan auto parameter.
 */
declare interface NodeList$wipeOut {
    (args: Object): any
}


/**
 * Wrap each node in the NodeList with html passed to wrap.
 * html will be cloned if the NodeList has more than one
element. Only DOM nodes are cloned, not any attached
event handlers.
 * @param html 
*/
declare interface NodeList$wrap {
    (html: String): any
}


/**
 * Insert html where the first node in this NodeList lives, then place all
 * nodes in this NodeList as the child of the html.
 * @param html 
 */
declare interface NodeList$wrapAll {
    (html: String): any
}


/**
 * For each node in the NodeList, wrap all its children with the passed in html.
 * html will be cloned if the NodeList has more than one
element. Only DOM nodes are cloned, not any attached
event handlers.
 * @param html 
*/
declare interface NodeList$wrapInner {
    (html: String): any
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/ext-dojo/NodeList._nodeDataCache.html
 */
declare interface NodeList$_nodeDataCache {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dates.html
 */
declare interface filter$dates {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.htmlstrings.html
 */
declare interface filter$htmlstrings {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.integers.html
 */
declare interface filter$integers {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.logic.html
 */
declare interface filter$logic {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.misc.html
 */
declare interface filter$misc {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/filter/misc._phone2numeric.html
 */
declare interface misc$_phone2numeric {

    /**
     * 
     */
    a: number,

        /**
         * 
         */
        b: number,

        /**
         * 
         */
        c: number,

        /**
         * 
         */
        d: number,

        /**
         * 
         */
        e: number,

        /**
         * 
         */
        f: number,

        /**
         * 
         */
        g: number,

        /**
         * 
         */
        h: number,

        /**
         * 
         */
        i: number,

        /**
         * 
         */
        j: number,

        /**
         * 
         */
        k: number,

        /**
         * 
         */
        l: number,

        /**
         * 
         */
        m: number,

        /**
         * 
         */
        n: number,

        /**
         * 
         */
        o: number,

        /**
         * 
         */
        p: number,

        /**
         * 
         */
        r: number,

        /**
         * 
         */
        s: number,

        /**
         * 
         */
        t: number,

        /**
         * 
         */
        u: number,

        /**
         * 
         */
        v: number,

        /**
         * 
         */
        w: number,

        /**
         * 
         */
        x: number,

        /**
         * 
         */
        y: number
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.lists.html
 */
declare interface filter$lists {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.strings.html
 */
declare interface filter$strings {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/filter/strings._strings.html
 */
declare interface strings$_strings {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/filter/strings._truncate_singlets.html
 */
declare interface strings$_truncate_singlets {

    /**
     * 
     */
    area: boolean,

        /**
         * 
         */
        base: boolean,

        /**
         * 
         */
        br: boolean,

        /**
         * 
         */
        col: boolean,

        /**
         * 
         */
        hr: boolean,

        /**
         * 
         */
        img: boolean,

        /**
         * 
         */
        input: boolean,

        /**
         * 
         */
        link: boolean,

        /**
         * 
         */
        param: boolean
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.dom.html
 */
declare interface render$dom {

    /**
     * 
     * @param text 
     */
    getTemplate(text: any): Object,

        /**
         * 
         * @param nodes 
         */
        tokenize(nodes: HTMLElement): any[]
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.html.html
 */
declare interface render$html {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.date.html
 */
declare interface tag$date {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.logic.html
 */
declare interface tag$logic {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.loader.html
 */
declare interface tag$loader {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.loop.html
 */
declare interface tag$loop {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.misc.html
 */
declare interface tag$misc {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/dtl/_base.date.html
 */
declare interface utils$date {}
declare module 'dojox/dtl' {
    declare var exp: dojox$dtl;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_Templated' {
    declare var exp: undefined._Templated;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/Context' {
    declare var exp: undefined.Context;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_DomTemplated' {
    declare var exp: undefined._DomTemplated;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/DomInline' {
    declare var exp: undefined.DomInline;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/Inline' {
    declare var exp: undefined.Inline;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base' {
    declare var exp: undefined._base;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base._base' {
    declare var exp: undefined._base;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.BOOLS' {
    declare var exp: undefined.BOOLS;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.data' {
    declare var exp: undefined.data;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.date' {
    declare var exp: undefined.date;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.dates' {
    declare var exp: undefined.dates;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.dijit' {
    declare var exp: undefined.dijit;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.html' {
    declare var exp: undefined.html;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.htmlstrings' {
    declare var exp: undefined.htmlstrings;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.dom' {
    declare var exp: undefined.dom;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.integers' {
    declare var exp: undefined.integers;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.logic' {
    declare var exp: undefined.logic;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.loader' {
    declare var exp: undefined.loader;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.loop' {
    declare var exp: undefined.loop;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.misc' {
    declare var exp: undefined.misc;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.objects' {
    declare var exp: undefined.objects;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.strings' {
    declare var exp: undefined.strings;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.register' {
    declare var exp: undefined.register;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/_base.text' {
    declare var exp: undefined.text;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/dom' {
    declare var exp: undefined.dom;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/dom._uppers' {
    declare var exp: undefined._uppers;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/dom._attributes' {
    declare var exp: undefined._attributes;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/contrib/data' {
    declare var exp: undefined.data;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/contrib/objects' {
    declare var exp: undefined.objects;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/contrib/dom' {
    declare var exp: undefined.dom;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/contrib/dijit' {
    declare var exp: undefined.dijit;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/ext-dojo/NodeList' {
    declare var exp: undefined.NodeList;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/ext-dojo/NodeList._nodeDataCache' {
    declare var exp: undefined._nodeDataCache;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/dates' {
    declare var exp: undefined.dates;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/htmlstrings' {
    declare var exp: undefined.htmlstrings;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/integers' {
    declare var exp: undefined.integers;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/logic' {
    declare var exp: undefined.logic;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/misc' {
    declare var exp: undefined.misc;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/misc._phone2numeric' {
    declare var exp: undefined._phone2numeric;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/lists' {
    declare var exp: undefined.lists;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/strings' {
    declare var exp: undefined.strings;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/strings._strings' {
    declare var exp: undefined._strings;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/filter/strings._truncate_singlets' {
    declare var exp: undefined._truncate_singlets;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/render/html' {
    declare var exp: undefined.html;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/render/dom' {
    declare var exp: undefined.dom;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/tag/date' {
    declare var exp: undefined.date;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/tag/loader' {
    declare var exp: undefined.loader;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/tag/logic' {
    declare var exp: undefined.logic;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/tag/loop' {
    declare var exp: undefined.loop;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/tag/misc' {
    declare var exp: undefined.misc;
    declare module.exports: typeof exp
}
declare module 'dojox/dtl/utils/date' {
    declare var exp: undefined.date;
    declare module.exports: typeof exp
}