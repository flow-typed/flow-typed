/**
 * Flowtype definitions for react-color
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$ReactColor: {
    CustomPicker: typeof ReactColor$CustomPicker,
}
declare interface ReactColor$HSLColor {
    a?: number,
        h: number,
        l: number,
        s: number
}

declare interface ReactColor$RGBColor {
    a?: number,
        b: number,
        g: number,
        r: number
}

declare type ReactColor$Color = string | ReactColor$HSLColor | ReactColor$RGBColor;

declare interface ReactColor$ColorResult {
    hex: string,
        hsl: ReactColor$HSLColor,
        rgb: ReactColor$RGBColor
}

declare type ReactColor$ColorChangeHandler = (color: ReactColor$ColorResult) => void;

declare type ReactColor$ColorPickerProps<A>= {
    color?: ReactColor$Color,
    onChange?: ReactColor$ColorChangeHandler,
    onChangeComplete?: ReactColor$ColorChangeHandler
}

declare type ReactColor$AlphaPickerProps = {
    height?: string,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$AlphaPicker = {}

declare
var AlphaPicker: ReactColor$AlphaPicker;

declare type ReactColor$BlockPickerProps = {
    colors?: Array<string>,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$BlockPicker = {}

declare
var BlockPicker: ReactColor$BlockPicker;

declare type ReactColor$ChromePickerProps = {
    disableAlpha?: boolean
} & ReactColor$ColorPickerProps


declare type ReactColor$ChromePicker = {}

declare
var ChromePicker: ReactColor$ChromePicker;

declare type ReactColor$CirclePickerProps = {
    colors?: Array<string>,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$CirclePicker = {}

declare
var CirclePicker: ReactColor$CirclePicker;

declare type ReactColor$CompactPickerProps = {
    colors?: Array<string >
} & ReactColor$ColorPickerProps


declare type ReactColor$CompactPicker = {}

declare
var CompactPicker: ReactColor$CompactPicker;

declare type ReactColor$GithubPickerProps = {
    colors?: Array<string>,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$GithubPicker = {}

declare
var GithubPicker: ReactColor$GithubPicker;

declare type ReactColor$HuePickerProps = {
    height?: string,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$HuePicker = {}

declare
var HuePicker: ReactColor$HuePicker;

declare type ReactColor$MaterialPickerProps = {} & ReactColor$ColorPickerProps


declare type ReactColor$MaterialPicker = {}

declare
var MaterialPicker: ReactColor$MaterialPicker;

declare type ReactColor$PhotoshopPickerProps = {
    header?: string,
    onAccept?: ReactColor$ColorChangeHandler,
    onCancel?: ReactColor$ColorChangeHandler
} & ReactColor$ColorPickerProps


declare type ReactColor$PhotoshopPicker = {}

declare
var PhotoshopPicker: ReactColor$PhotoshopPicker;

declare type ReactColor$SketchPickerProps = {
    disableAlpha?: boolean,
    presetColors?: Array<string>,
    width?: string
} & ReactColor$ColorPickerProps


declare type ReactColor$SketchPicker = {}

declare
var SketchPicker: ReactColor$SketchPicker;

declare type ReactColor$SliderPickerProps = {} & ReactColor$ColorPickerProps


declare type ReactColor$SliderPicker = {}

declare
var SliderPicker: ReactColor$SliderPicker;

declare type ReactColor$SwatchesPickerProps = {
    colors?: Array<Array<string >> ,
    height?: number,
    width?: number
} & ReactColor$ColorPickerProps


declare type ReactColor$SwatchesPicker = {}

declare
var SwatchesPicker: ReactColor$SwatchesPicker;

declare type ReactColor$TwitterPickerProps = {} & ReactColor$ColorPickerProps


declare type ReactColor$TwitterPicker = {}

declare
var TwitterPicker: ReactColor$TwitterPicker;

declare interface ReactColor$InjectedColorProps {
    hex?: string,
        hsl?: ReactColor$HSLColor,
        rgb?: ReactColor$RGBColor,
        onChange?: ReactColor$ColorChangeHandler
}

declare
function ReactColor$CustomPicker<A>(
        component: React.ComponentClass<A>| React.StatelessComponent<A>): React.ComponentClass<A & ReactColor$InjectedColorProps >

    declare type ReactColor$CustomPickerProps<A>= {
        color?: ReactColor$Color,
        pointer?: React.ReactNode,
        onChange?: ReactColor$ColorChangeHandler
    }

declare type ReactColor$AlphaProps = {} & ReactColor$CustomPickerProps


declare type ReactColor$Alpha = {}

declare
var Alpha: ReactColor$Alpha;

declare interface ReactColor$EditableInputStyles {
    input?: React.CSSProperties,
        label?: React.CSSProperties,
        wrap?: React.CSSProperties
}

declare type ReactColor$EditableInputProps = {
    color?: ReactColor$Color,
    label?: string,
    onChange?: ReactColor$ColorChangeHandler,
    styles?: ReactColor$EditableInputStyles,
    value?: any
}

declare type ReactColor$EditableInput = {}

declare
var EditableInput: ReactColor$EditableInput;

declare type ReactColor$HueProps = {
    direction?: "horizontal" | "vertical"
} & ReactColor$CustomPickerProps


declare type ReactColor$Hue = {}

declare
var Hue: ReactColor$Hue;

declare type ReactColor$SaturationProps = {} & ReactColor$CustomPickerProps


declare type ReactColor$Saturation = {}

declare
var Saturation: ReactColor$Saturation;

declare type ReactColor$CheckboardProps = {
    grey?: string,
    size?: number,
    white?: string
}

declare type ReactColor$Checkboard = {}

declare
var Checkboard: ReactColor$Checkboard;
declare module 'react-color/lib/components/common/Alpha' {
    declare module.exports: typeof ReactColor$Alpha
}
declare module 'react-color/lib/components/common/Checkboard' {
    declare module.exports: typeof ReactColor$Checkboard
}
declare module 'react-color/lib/components/common/EditableInput' {
    declare module.exports: typeof ReactColor$EditableInput
}
declare module 'react-color/lib/components/common/Hue' {
    declare module.exports: typeof ReactColor$Hue
}
declare module 'react-color/lib/components/common/Saturation' {
    declare module.exports: typeof ReactColor$Saturation
}
declare module 'react-color/lib/components/common/ColorWrap' {
    declare module.exports: typeof ReactColor$CustomPicker
}
declare module 'react-color/lib/components/common' {





}
declare module 'react-color/lib/components/alpha/Alpha' {
    declare module.exports: typeof ReactColor$AlphaPicker
}
declare module 'react-color/lib/components/block/Block' {
    declare module.exports: typeof ReactColor$BlockPicker
}
declare module 'react-color/lib/components/chrome/Chrome' {
    declare module.exports: typeof ReactColor$ChromePicker
}
declare module 'react-color/lib/components/circle/Circle' {
    declare module.exports: typeof ReactColor$CirclePicker
}
declare module 'react-color/lib/components/compact/Compact' {
    declare module.exports: typeof ReactColor$CompactPicker
}
declare module 'react-color/lib/components/github/Github' {
    declare module.exports: typeof ReactColor$GithubPicker
}
declare module 'react-color/lib/components/hue/Hue' {
    declare module.exports: typeof ReactColor$HuePicker
}
declare module 'react-color/lib/components/meterial/Material' {
    declare module.exports: typeof ReactColor$MaterialPicker
}
declare module 'react-color/lib/components/photoshop/Photoshop' {
    declare module.exports: typeof ReactColor$PhotoshopPicker
}
declare module 'react-color/lib/components/sketch/Sketch' {
    declare module.exports: typeof ReactColor$SketchPicker
}
declare module 'react-color/lib/components/slider/Slider' {
    declare module.exports: typeof ReactColor$SliderPicker
}
declare module 'react-color/lib/components/swatches/Swatches' {
    declare module.exports: typeof ReactColor$SwatchesPicker
}
declare module 'react-color/lib/components/twitter/Twitter' {
    declare module.exports: typeof ReactColor$TwitterPicker
}
declare module 'react-color' {














    declare type CustomPickerProps<A>= {
        color?: ReactColor$Color,
        pointer?: React.ReactNode,
        onChange?: ReactColor$ColorChangeHandler
    }
}