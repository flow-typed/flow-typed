/**
 * Flowtype definitions for mathjax
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare var MathJax: jax$IMathJax;
declare export interface jax$IMathJax {
    Hub?: jax$IMathJaxHub,
        Ajax?: jax$IAjax,
        Message?: jax$IMessage,
        HTML?: jax$IHTML,
        Callback?: jax$ICallback,
        Localization?: jax$ILocalization,
        InputJax?: jax$IInputJax,
        OutputJax?: jax$IOutputJax
}

declare export interface jax$ICallback {
    (fn: Function): jax$ICallbackObject,
    (fns: Function[]): jax$ICallbackObject,
    (objs: any[]): jax$ICallbackObject,
    (obj: any): jax$ICallbackObject,
    (code: string): jax$ICallbackObject,
    Delay(time: number, callback: any): jax$ICallbackObject,
        Queue(...args: any[]): jax$IQueue,
        Signal(name: string): jax$ISignal,
        ExecuteHooks(hooks: any[], data: any[], reset: boolean): jax$ICallbackObject,
        Hooks(reset: boolean): jax$IHooks
}

declare export interface jax$IHooks {
    Add(hook: any, priority: number): jax$ICallbackObject,
        Remove(hook: jax$ICallbackObject): void,
        Execute(): jax$ICallbackObject
}

declare export interface jax$IQueue {
    pending: number,
        running: number,
        queue: any[],
        Push(specs: any[]): jax$ICallbackObject,
        Process(): void,
        Suspend(): void,
        Resume(): void,
        wait(callback: Function): Function,
        call(): void
}

declare export interface jax$ISignal {
    name: string,
        posted: any[],
        listeners: jax$ICallbackObject[],
        Post(message: string): jax$ICallbackObject,
        Post(message: string, callback: jax$ICallbackObject): jax$ICallbackObject,
        Clear(): jax$ICallbackObject,
        Clear(callback: jax$ICallbackObject): jax$ICallbackObject,
        Interest(callback: jax$ICallbackObject): jax$ICallbackObject,
        Interest(callback: jax$ICallbackObject, ignorePast: boolean): jax$ICallbackObject,
        NoInterest(callback: jax$ICallbackObject): void,
        MessageHook(message: string, callback: jax$ICallbackObject): jax$ICallbackObject,
        ExecuteHook(message: string): void
}

declare export interface jax$ICallbackObject {
    hook: number,
        data: any[],
        object: any,
        called: boolean,
        autoReset: boolean,
        reset(): void
}

declare export interface jax$IMathJaxHub {
    config?: jax$IMathJaxConfig,
        processUpdateTime?: number,
        processUpdateDelay?: number,
        signal?: jax$ISignal,
        queue?: any,
        Browser?: jax$IBrowserInfo,
        inputJax?: any,
        outputJax?: any,
        Register?: jax$IRegister,
        Config(config: jax$IMathJaxConfig): void,
        Configured(): void,
        Queue(callBack: any): any,
        Typeset(element: any, callBack: any): any,
        PreProcess(element: any, callBack: any): any,
        Process(element: any, callBack: any): any,
        Update(element: any, callBack: any): any,
        Reprocess(element: any, callBack: any): any,
        Rerender(element: any, callBack: any): any,
        getAllJax(element: any): any[],
        getJaxByType(type: string, element: any): void,
        getJaxByInputType(type: string, element: any): void,
        getJaxFor(element: any): any,
        isJax(element: any): number,
        setRenderer(renderer: string, type: string): void,
        Insert(dst: any, src: any): any,
        formatError(script: any, error: any): void
}

declare export interface jax$IRegister {
    PreProcessor(callBack: any): void,
        MessageHook(type: string, callBack: any): void,
        StartupHook(type: string, callBack: any): void,
        LoadHook(file: string, callBack: Function): void
}

declare export interface jax$IBrowserInfo {
    version: string,
        isMac?: boolean,
        isPC?: boolean,
        isMobile?: boolean,
        isFirefox?: boolean,
        isSafari?: boolean,
        isChrome?: boolean,
        isOpera?: boolean,
        isMSIE?: boolean,
        isKonqueror?: boolean,
        versionAtLeast(version: string): void,
        Select(choices: any): void
}

declare export interface jax$IAjax {
    timeout?: number,
        STATUS: jax$ISTATUS,
        loaded: any,
        loading: boolean,
        loadHooks: any,
        Require(file: string, callBack: any): any,
        Load(file: string, callBack: any): any,
        loadComplete(file: string): void,
        loadTimeout(file: string): void,
        loadError(file: string): void,
        LoadHook(file: string, callBack: any): any,
        Preloading(...args: any[]): void,
        Styles(styles: any, callback: any): any,
        fileURL(file: string): string
}

declare export interface jax$ISTATUS {
    OK: string,
        ERROR: string
}

declare export interface jax$IMessage {
    Set(message: string, n: number, delay: number): number,
        Clear(n: number, delay: number): void,
        Remove(): void,
        File(file: string): number,
        filterText(text: string, n: number): string,
        Log(): string
}

declare export interface jax$IHTML {
    Cookie?: jax$ICookie,
        Element(type: string, attributes: any, contents: any): any,
        addElement(parent: any, type: string, attributes: any, content: any): any,
        TextNode(text: string): any,
        addText(parent: any, text: string): any,
        setScript(script: string, text: string): void,
        getScript(script: string): string
}

declare export interface jax$ICookie {
    prefix?: string,
        expires?: number,
        Set(name: string, data: any): void,
        Get(name: string): any,
        Get(name: string, obj: any): any
}

declare export interface jax$IMenuSettings {
    zoom?: string,
        CTRL?: boolean,
        ALT?: boolean,
        CMD?: boolean,
        Shift?: boolean,
        zscale?: string,
        context?: string,
        texHints?: boolean,
        mpContext?: boolean,
        mpMouse?: boolean
}

declare export interface jax$IErrorSettings {
    message?: string[],
        style?: any
}

declare export interface jax$IMathJaxConfig {
    MathZoom?: jax$IMathZoom,
        MathMenu?: jax$IMathMenu,
        MathEvents?: jax$IMathEvents,
        FontWarnings?: jax$IFontWarnings,
        Safe?: jax$ISafe,
        MatchWebFonts?: jax$IMatchWebFonts,
        SVG?: jax$ISVGOutputProcessor,
        MMLorHTML?: jax$IMMLorHTMLConfiguration,
        NativeMML?: jax$INativeMMLOutputProcessor,
        HTML - CSS?: jax$IHTMLCSSOutputProcessor,
        CommonHTML?: jax$ICommonHTMLOutputProcessor,
        AsciiMath?: jax$IAsciiMathInputProcessor,
        MathML?: jax$IMathMLInputProcessor,
        TeX?: jax$ITeXInputProcessor,
        jsMath2jax?: jax$IJSMath2jaxPreprocessor,
        asciimath2jax?: jax$IAsciimath2jaxPreprocessor,
        mml2jax?: jax$IMML2jaxPreprocessor,
        tex2jax?: jax$ITEX2jaxPreprocessor,
        jax?: string[],
        extensions?: string[],
        config?: string[],
        styleSheets?: string[],
        styles?: any,
        preJax?: any,
        postJax?: any,
        preRemoveClass?: string,
        showProcessingMessages?: boolean,
        messageStyle?: string,
        displayAlign?: string,
        displayIndent?: string,
        delayStartupUntil?: string,
        skipStartupTypeset?: boolean,
        elements?: string[],
        positionToHash?: boolean,
        showMathMenu?: boolean,
        showMathMenuMSIE?: boolean,
        menuSettings?: jax$IMenuSettings,
        errorSettings?: jax$IErrorSettings,
        v1 .0 - compatible?: boolean
}

declare export interface jax$IMathZoom {
    styles: any
}

declare export interface jax$IMathMenu {
    delay?: number,
        helpURL?: string,
        showRenderer?: boolean,
        showFontMenu?: boolean,
        showLocale?: boolean,
        showMathPlayer?: boolean,
        showContext?: boolean,
        semanticsAnnotations?: any,
        windowSettings?: any,
        styles?: any
}

declare export interface jax$IMathEvents {
    hover?: number,
        styles?: any
}

declare export interface jax$IFontWarnings {
    messageStyle?: any,
        Message?: jax$IHTMLMessages,
        HTML?: jax$IHTMLSnippets,
        removeAfter?: number,
        fadeoutSteps?: number,
        fadeoutTime?: number
}

declare export interface jax$IHTMLMessages {
    webFont?: any[],
        imageFonts?: any[],
        noFonts?: any[]
}

declare export interface jax$IHTMLSnippets {
    closeBox?: string,
        webfonts?: string,
        fonts?: string,
        STIXfonts?: string,
        TeXfonts?: string
}

declare export interface jax$ISafe {
    allow?: jax$ISafeAllow,
        sizeMin?: number,
        sizeMax?: number,
        safeProtocols?: jax$ISafeProtocols,
        safeStyles?: jax$ISafeStyles,
        safeRequire?: jax$ISafeRequire
}

declare export interface jax$ISafeAllow {
    URLs?: string,
        classes?: string,
        cssIDs?: string,
        styles?: string,
        require?: string,
        fontsize?: string
}

declare export interface jax$ISafeProtocols {
    http?: boolean,
        https?: boolean,
        file?: boolean,
        javascript?: boolean
}

declare export interface jax$ISafeStyles {
    color?: boolean,
        backgroundColor?: boolean,
        border?: boolean,
        cursor?: boolean,
        margin?: boolean,
        padding?: boolean,
        textShadow?: boolean,
        fontFamily?: boolean,
        fontSize?: boolean,
        fontStyle?: boolean,
        fontWeight?: boolean,
        opacity?: boolean,
        outline?: boolean
}

declare export interface jax$ISafeRequire {
    action?: boolean,
        amscd?: boolean,
        amsmath?: boolean,
        amssymbols?: boolean,
        autobold?: boolean,
        autoload - all?: boolean,
        bbox?: boolean,
        begingroup?: boolean,
        boldsymbol?: boolean,
        cancel?: boolean,
        color?: boolean,
        enclose?: boolean,
        extpfeil?: boolean,
        HTML?: boolean,
        mathchoice?: boolean,
        mhchem?: boolean,
        newcommand?: boolean,
        noErrors?: boolean,
        noUndefined?: boolean,
        unicode?: boolean,
        verb?: boolean
}

declare export interface jax$IMatchWebFonts {
    matchFor?: jax$IMatchFor,
        fontCheckDelay?: number,
        fontCheckTimeout?: number
}

declare export interface jax$IMatchFor {
    HTML - CSS?: boolean,
        NativeMML?: boolean,
        SVG?: boolean
}

declare export interface jax$ISVGOutputProcessor {
    scale?: number,
        minScaleAdjust?: number,
        font?: string,
        blacker?: number,
        undefinedFamily?: string[],
        mtextFontInherit?: boolean,
        addMMLclasses?: boolean,
        EqnChunk?: number,
        EqnChunkFactor?: number,
        EqnChunkDelay?: number,
        matchFontHeight?: boolean,
        linebreaks?: jax$ILineBreaks,
        styles?: any,
        tooltip?: jax$IToolTip
}

declare export interface jax$ILineBreaks {
    automatic?: boolean,
        width?: string
}

declare export interface jax$IToolTip {
    delayPost: number,
        delayClear: number,
        offsetX: number,
        offsetY: number
}

declare export interface jax$IMMLorHTMLConfiguration {
    prefer?: jax$IBrowserPreference
}

declare export interface jax$IBrowserPreference {
    MSIE?: string,
        Firefox?: string,
        Safari?: string,
        Chrome?: string,
        Opera?: string,
        other?: string
}

declare export interface jax$INativeMMLOutputProcessor {
    scale?: number,
        minScaleAdjust?: number,
        matchFontHeight?: boolean,
        styles?: any
}

declare export interface jax$IHTMLCSSOutputProcessor {
    scale?: number,
        minScaleAdjust?: number,
        availableFonts?: string[],
        preferredFont?: string,
        webFont?: string,
        imageFont?: string,
        undefinedFamily?: string[],
        mtextFontInherit?: boolean,
        EqnChunk?: number,
        EqnChunkFactor?: number,
        EqnChunkDelay?: number,
        matchFontHeight?: boolean,
        linebreaks?: jax$ILineBreaks,
        styles?: any,
        showMathMenu?: boolean,
        tooltip?: jax$IToolTip
}

declare export interface jax$ICommonHTMLOutputProcessor {
    scale?: number,
        minScaleAdjust?: number,
        mtextFontInherit?: boolean,
        linebreaks?: jax$ILineBreaks
}

declare export interface jax$IAsciiMathInputProcessor {
    displaystyle?: boolean,
        decimal?: string
}

declare export interface jax$IMathMLInputProcessor {
    useMathMLspacing?: boolean
}

declare export interface jax$ITeXInputProcessor {
    TagSide?: string,
        TagIndent?: string,
        MultLineWidth?: string,
        equationNumbers?: jax$IEquationNumbers,
        Macros?: any,
        MAXMACROS?: number,
        MAXBUFFER?: number,
        extensions?: string[]
}

declare export interface jax$IEquationNumbers {
    autoNumber?: string,
        formatNumber?: (n: number) => string,
        formatTag?: (n: number) => string,
        formatID?: () => string,
        formatURL?: (id: string) => string,
        useLabelIds?: boolean
}

declare export interface jax$IJSMath2jaxPreprocessor {
    preview: any
}

declare export interface jax$IAsciimath2jaxPreprocessor {
    delimiters?: any,
        preview?: any,
        skipTags?: string[],
        ignoreClass?: string,
        processClass?: string
}

declare export interface jax$IMML2jaxPreprocessor {
    preview?: any
}

declare export interface jax$ITEX2jaxPreprocessor {
    inlineMath?: any,
        displayMath?: any,
        balanceBraces?: boolean,
        processEscapes?: boolean,
        processEnvironments?: boolean,
        preview?: any,
        skipTags?: string[],
        ignoreClass?: string,
        processClass?: string
}

declare export interface jax$ILocalization {
    locale: string,
        directory: string,
        strings: any,
        _(id: number, message: string, ...args: any[]): void,
        setLocale(locale: string): void,
        addTranslation(locale: string, domain: string, def: any): void,
        setCSS(div: any): any,
        fontFamily(): string,
        fontDirection(): string,
        plural(value: any): number,
        number(value: number): string,
        loadDomain(domain: string): jax$ICallbackObject,
        loadDomain(domain: string, callback: jax$ICallbackObject): jax$ICallbackObject,
        Try(spec: any): void
}

declare export interface jax$IInputJax {
    id: string,
        version: string,
        directory: string,
        elementJax: string,
        Process(script: any, state: any): any,
        Translate(script: any, state: any): jax$IElementJax,
        Register(mimetype: string): void,
        needsUpdate(element: any): boolean
}

declare export interface jax$IOutputJax {
    id: string,
        version: string,
        directory: string,
        fontDir: string,
        imageDir: string,
        preProcess(state: any): void,
        preTranslate(state: any): void,
        Translate(script: any, state: any): jax$IElementJax,
        postTranslate(state: any): void,
        Register(mimetype: string): void,
        Remove(jax: any): void,
        getJaxFromMath(math: any): jax$IElementJax,
        Zoom(jax: any, span: any, math: any, Mw: number, Mh: number): jax$IZoomStruct
}

declare export interface jax$IZoomStruct {
    Y: number,
        mW: number,
        mH: number,
        zW: number,
        zH: number
}

declare export interface jax$IElementJax {
    id: string,
        version: string,
        directory: string,
        inputJax: string,
        outputJax: string,
        inputID: string,
        originalText: string,
        mimeType: string,
        Text(text: string): jax$ICallbackObject,
        Text(text: string, callback: any): jax$ICallbackObject,
        Rerender(callback: any): jax$ICallbackObject,
        Reprocess(callback: any): jax$ICallbackObject,
        Remove(): void,
        SourceElement(): any,
        needsUpdate(): boolean
}