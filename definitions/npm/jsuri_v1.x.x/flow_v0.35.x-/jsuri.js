// @flow
/**
 * Flowtype definitions for jsuri
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type jsuri$Primitive = string | number | boolean;

declare export class Uri {

    /**
     * Creates a new Uri object
     * @constructor  * 
     * @param  
     */
    constructor(str?: string): this;

    /**
     * Define getter/setter methods
     */
    protocol(val?: string): string;
    userInfo(val?: string): string;
    host(val?: string): string;
    port(val?: number): number;
    path(val?: string): string;
    anchor(val?: string): string;

    /**
     * if there is no protocol, the leading // can be enabled or disabled
     * @param  
     * @return  
     */
    hasAuthorityPrefix(val?: boolean): boolean;
    isColonUri(val?: boolean): boolean;

    /**
     * Serializes the internal state of the query pairs
     * @param  set a new query string
     * @return  query string
     */
    query(val?: string): string;

    /**
     * returns the first query param value found for the key
     * @param  query key
     * @return  first value found for key
     */
    getQueryParamValue(key: string): string;

    /**
     * returns an array of query param values for the key
     * @param  query key
     * @return  array of values
     */
    getQueryParamValues(key: string): string[];

    /**
     * removes query parameters
     * @param  remove values for key
     * @param  remove a specific value, otherwise removes all
     * @return  returns self for fluent chaining
     */
    deleteQueryParam(key: string, val?: string): jsuri$Uri;

    /**
     * adds a query parameter
     * @param  add values for key
     * @param  value to add
     * @param  specific index to add the value at
     * @return  returns self for fluent chaining
     */
    addQueryParam(key: string, val: jsuri$Primitive, index?: number): jsuri$Uri;

    /**
     * test for the existence of a query parameter
     * @param  check values for key
     * @return  true if key exists, otherwise false
     */
    hasQueryParam(key: string): boolean;

    /**
     * replaces query param values
     * @param  key to replace value for
     * @param  new value
     * @param  replace only one specific value (otherwise replaces all)
     * @return  returns self for fluent chaining
     */
    replaceQueryParam(key: string, newVal: jsuri$Primitive, oldVal?: jsuri$Primitive): jsuri$Uri;

    /**
     * Define fluent setter methods (setProtocol, setHasAuthorityPrefix, etc)
     */
    setProtocol(val: string): jsuri$Uri;
    setHasAuthorityPrefix(val: boolean): jsuri$Uri;
    setIsColonUri(val: boolean): jsuri$Uri;
    setUserInfo(val: string): jsuri$Uri;
    setHost(val: string): jsuri$Uri;
    setPort(val: number): jsuri$Uri;
    setPath(val: string): jsuri$Uri;
    setQuery(val: string): jsuri$Uri;
    setAnchor(val: string): jsuri$Uri;

    /**
     * Scheme name, colon and doubleslash, as required
     * @return  http:// or possibly just //
     */
    scheme(): string;

    /**
     * Same as Mozilla nsIURI.prePath
     * @return  scheme://user:password
     * @host  :port
     * @see  https://developer.mozilla.org/en/nsIURI
     */
    origin(): string;

    /**
     * Adds a trailing slash to the path
     */
    addTrailingSlash(): jsuri$Uri;

    /**
     * Serializes the internal state of the Uri object
     * @return  
     */
    toString(): string;

    /**
     * Clone a Uri object
     * @return  duplicate copy of the Uri
     */
    clone(): jsuri$Uri
}
declare type Uri = jsuri$Uri;
declare module 'jsuri' {
    declare module.exports: typeof jsuri$Uri
}
declare module 'jsUri' {
    declare module.exports: typeof jsuri$Uri
}