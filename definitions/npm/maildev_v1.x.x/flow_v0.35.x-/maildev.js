// @flow
/**
 * Flowtype definitions for maildev
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Interface for {@link MailDev} options.
 */
declare interface MailDevOptions {

    /**
     * SMTP host for outgoing emails
     * @type  
     */
    outgoingHost?: string,

        /**
         * SMTP password for outgoing emails
         * @type  
         */
        outgoingPass?: string,

        /**
         * SMTP port for outgoing emails.
         * @type  
         */
        outgoingPort?: number,

        /**
         * SMTP user for outgoing emails
         * @type  
         */
        outgoingUser?: string,

        /**
         * SMTP port to catch emails.
         * @type  
         */
        smtp?: number
}
/**
 * Interface for mail.
 */
declare interface Mail {

    /**
     * Identifier.
     */
    id?: string,

        /**
         * Client.
         */
        envelope?: Object
}
declare module 'maildev' {

    /**
     * Interface for {@link MailDev}.
     */
    declare class MailDev {

        /**
         * Constructor.
         * @public  * 
         * @param  The options.
         */
        constructor(options: MailDevOptions): this;

        /**
         * Deletes a given email by identifier.
         * @public  * 
         * @param  The email identifier.
         * @param  The error callback.
         */
        deleteEmail(id: string, callback?: (error: Error) => void): void;

        /**
         * Deletes all email and their attachments.
         * @public  * 
         * @param  The error callback.
         */
        deleteAllEmail(callback?: (error: Error) => void): void;

        /**
         * Stops the SMTP server.
         * @public  * 
         * @param  The error callback.
         */
        end(callback?: (error: Error) => void): void;

        /**
         * Accepts e-mail identifier, returns email object.
         * @public  * 
         * @param  The e-mail identifier.
         * @param  The error callback.
         */
        getEmail(id: string, callback?: (error: Error) => void): void;

        /**
         * Returns a readable stream of the raw e-mail.
         * @public  * 
         * @param  The e-mail identifier.
         */
        getRawEmail(id: string, callback?: (error: Error, readStream: fs.ReadStream) => void): void;

        /**
         * Returns array of all e-mail.
         * @public  
         */
        getAllEmail(done: (error: Error, emails: Array<Object>) => void): void;

        /**
         * Starts the SMTP server.
         * @public  * 
         * @param  The error callback.
         */
        listen(callback?: (error: Error) => void): void;

        /**
         * Event called when a new e-mail is received. Callback receives single mail object.
         * @public  * 
         * @param  The event name.
         * @param  The email.
         */
        on(eventName: string, callback: (email: Object) => void): void;

        /**
         * Relay the e-mail.
         * @param  The identifier or mail object.
         * @param  The callback.
         */
        relayMail(idOrMailObject: string, done: (error: Error) => void): void
    }
    declare     var out: typeof MailDev;
    declare module.exports: typeof out
}