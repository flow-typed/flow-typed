// @flow
/**
 * Flowtype definitions for imap
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'imap' {
    declare interface ImapOptions {
        user: string,
            password: string,
            host: string,
            port: number,
            tls: boolean
    }
    declare interface ImapBox {
        name: string,
            readOnly: boolean,
            newKeywords: boolean,
            uidvalidity: number,
            uidnext: number,
            flags: any[],
            permFlags: any[],
            persistentUIDs: boolean,
            messages: {
                total: number,
                new: number,
                unseen: number
            }
    }
    declare interface ImapChunk {
        toString(charset: string): string,
            length: number
    }
    declare interface ImapFetch {
        once(event: "end", callback: () => void): void,
            once(event: "error", callback: (error: Error) => void): void,
            once(event: string, callback: Function): void,
            on(event: "message", callback: (msg: ImapMessage, seqno: number) => void): void,
            on(event: string, callback: Function): void
    }
    declare interface ImapBodyStream {
        once(event: "end", callback: () => void): void,
            once(event: string, callback: Function): void,
            on(event: "data", callback: (chunk: ImapChunk) => void): void,
            on(event: string, callback: Function): void,
            pipe(stream: any): void
    }
    declare interface ImapMessage {
        once(event: "attributes", callback: (attributes: any) => void): void,
            once(event: string, callback: Function): void,
            on(event: "body", callback: (stream: ImapBodyStream, info: any) => void): void,
            on(event: string, callback: Function): void
    }
    declare module.exports: typeof Imap
}