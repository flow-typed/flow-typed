// @flow
/**
 * Flowtype definitions for easy-table
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'easy-table' {
    declare module.exports: typeof EasyTable
    declare type CellPrinter<T>= (val: T, width: number) => string;
    declare type CompareFunction<T>= (a: T, b: T) => number;
    declare type ReduceFunction<T>= (acc: T, val: T, idx: number, length: number) => T;
    declare type FormatFunction<T>= (obj: T, cell: (name: string, val: any) => void) => void;
    declare type TablePostProcessing = (result: EasyTable) => string;
    declare interface PrintColumnOptions<T>{

        /**
         * Column separation string
         */
        separator?: string,

        /**
         * Printer to format column names
         */
        namePrinter?: CellPrinter<T >
    }
    declare interface Aggregators {

        /**
         * Create a printer which formats the value with `printer`,
         * adds the `prefix` to it and right aligns the whole thing
         * @param  
         * @param  
         * @returns  
         */
        printer<T>(prefix: string, printer: CellPrinter<T>): CellPrinter<T>,

            /**
             * Sum reduction
             */
            sum: any,

            /**
             * Average reduction
             */
            avg: any
    }
    declare interface TotalOptions<T>{

        /**
         * reduce(acc, val, idx, length) function to compute the total value
         */
        reduce?: ReduceFunction<T>,

        /**
         * Printer to format the total cell
         */
        printer?: CellPrinter<T>,

        /**
         * Initial value for reduction
         */
        init?: T
    }
    declare interface FormatObject {
        [key: string]: ColumnFormat<any >
    }
    declare interface ColumnFormat<T>{
        name?: string,
        printer?: CellPrinter<T >
    }
}