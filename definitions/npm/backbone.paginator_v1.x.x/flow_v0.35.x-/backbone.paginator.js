/**
 * Flowtype definitions for backbone.paginator
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Backbone$PageableState {
    firstPage?: number,
        lastPage?: number,
        currentPage?: number,
        pageSize?: number,
        totalPages?: number,
        totalRecords?: number,
        sortKey?: string,
        order?: number
}

declare interface Backbone$PageableQueryParams {
    currentPage?: string,
        pageSize?: string,
        totalPages?: string,
        totalRecords?: string,
        sortKey?: string,
        order?: string,
        directions?: any
}

declare interface Backbone$PageableInitialOptions {
    comparator?: (...options: any[]) => number,
        full?: boolean,
        state?: Backbone$PageableState,
        queryParam?: Backbone$PageableQueryParams
}

declare interface Backbone$PageableParseLinksOptions {
    xhr?: JQueryXHR
}

declare interface Backbone$PageableSetSortingOptions<TModel>{
    side?: string,
    full?: boolean,
    sortValue?: (model: TModel, sortKey: string) => any | string
}

declare interface Backbone$PageableSwitchModeOptions {
    fetch?: boolean,
        resetState?: boolean
}

declare type Backbone$PageableGetPageOptions = CollectionFetchOptions | Silenceable;

declare class PageableCollection<TModel>mixins Collection<TModel>{
    fullCollection: Collection<TModel>;
    mode: string;
    queryParams: Backbone$PageableQueryParams;
    state: Backbone$PageableState;
    constructor(models?: TModel[], options?: Backbone$PageableInitialOptions): this;
    fetch(options?: CollectionFetchOptions): JQueryXHR;
    getFirstPage(
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    getLastPage(
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    getNextPage(
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    getPage(
        index: number | string,
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    getPageByOffset(
        offset: number,
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    getPreviousPage(
        options?: Backbone$PageableGetPageOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    hasNextPage(): boolean;
    hasPreviousPage(): boolean;
    parse(resp: any, options?: any): any[];
    parseLinks(resp: any, options?: Backbone$PageableParseLinksOptions): any;
    parseRecords(resp: any, options?: any): any[];
    parseState(
        resp: any,
        queryParams: Backbone$PageableQueryParams,
        state: Backbone$PageableState,
        options?: any): Backbone$PageableState;
    setPageSize(
        pageSize: number,
        options?: CollectionFetchOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    setSorting(
        sortKey: string,
        order?: number,
        options?: Backbone$PageableSetSortingOptions<TModel>): Backbone$PageableCollection<TModel>;
    switchMode(
        mode?: string,
        options?: Backbone$PageableSwitchModeOptions): JQueryXHR | Backbone$PageableCollection<TModel>;
    sync(method: string, model: TModel | Collection<TModel>, options?: any): JQueryXHR;
    noConflict(): typeof PageableCollection
}