/**
 * Flowtype definitions for node-usb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'usb' {
    declare class Device {
        timeout: number;
        busNumber: number;
        deviceAddress: number;
        portNumbers: Array<number>;
        deviceDescriptor: DeviceDescriptor;
        configDescriptor: ConfigDescriptor;
        interfaces: Array<Interface>;
        ___open(): void;
        ___claimInterface(addr: number): void;
        open(defaultConfig?: boolean): void;
        close(): void;
        interface(addr: number): Interface;
        controlTransfer(
            bmRequestType: number,
            bRequest: number,
            wValue: number,
            wIndex: number,
            data_or_length: any,
            callback: (error?: string, buf?: Buffer) => void): Device;
        getStringDescriptor(desc_index: number, callback: (error?: string, buf?: Buffer) => void): void;
        setConfiguration(desired: number, cb: (err?: string) => void): void;
        reset(callback: (err?: string) => void): void
    }
    declare class DeviceDescriptor {
        bLength: number;
        bDescriptorType: number;
        bcdUSB: number;
        bDeviceClass: number;
        bDeviceSubClass: number;
        bDeviceProtocol: number;
        bMaxPacketSize: number;
        idVendor: number;
        idProduct: number;
        bcdDevice: number;
        iManufacturer: number;
        iProduct: number;
        iSerialNumber: number;
        bNumConfigurations: number
    }
    declare class ConfigDescriptor {
        bLength: number;
        bDescriptorType: number;
        wTotalLength: number;
        bNumInterfaces: number;
        bConfigurationValue: number;
        iConfiguration: number;
        bmAttributes: number;
        bMaxPower: number;
        extra: Buffer
    }
    declare class Interface {
        descriptor: InterfaceDescriptor;
        endpoints: Array<IEndpoint>;
        constructor(device: Device, id: number): this;
        claim(): void;
        release(closeEndpoints?: (err?: string) => void, cb?: (err?: string) => void): void;
        isKernelDriverActive(): boolean;
        detachKernelDriver(): number;
        attachKernelDriver(): number;
        setAltSetting(altSetting: number, cb: (err?: string) => void): void;
        endpoint(addr: number): IEndpoint
    }
    declare class InterfaceDescriptor {
        bLength: number;
        bDescriptorType: number;
        bInterfaceNumber: number;
        bAlternateSetting: number;
        bNumEndpoints: number;
        bInterfaceClass: number;
        bInterfaceSubClass: number;
        bInterfaceProtocol: number;
        iInterface: number;
        extra: Buffer
    }
    declare interface IEndpoint {
        direction: string,
            transferType: number,
            timeout: number,
            descriptor: EndpointDescriptor
    }
    declare class InEndpoint mixins IEndpoint {
        direction: string;
        transferType: number;
        timeout: number;
        descriptor: EndpointDescriptor;
        constructor(device: Device, descriptor: EndpointDescriptor): this;
        transfer(length: number, callback: (error: string, data: Buffer) => void): InEndpoint;
        startPoll(nTransfers: number, transferSize: number): void;
        stopPoll(cb: () => void): void
    }
    declare class OutEndpoint mixins IEndpoint {
        direction: string;
        transferType: number;
        timeout: number;
        descriptor: EndpointDescriptor;
        constructor(device: Device, descriptor: EndpointDescriptor): this;
        transfer(buffer: Buffer, cb: (err?: string) => void): OutEndpoint;
        transferWithZLP(buf: Buffer, cb: (err?: string) => void): void
    }
    declare class EndpointDescriptor {
        bLength: number;
        bDescriptorType: number;
        bEndpointAddress: number;
        bmAttributes: number;
        wMaxPacketSize: number;
        bInterval: number;
        bRefresh: number;
        bSynchAddress: number
    }
    declare function findByIds(vid: number, pid: number): Device
    declare function on(event: string, callback: (device: Device) => void): void
    declare function getDeviceList(): Array<Device >
        declare function setDebugLevel(level: number): void
    declare var LIBUSB_CLASS_PER_INTERFACE: number;
    declare var LIBUSB_CLASS_AUDIO: number;
    declare var LIBUSB_CLASS_COMM: number;
    declare var LIBUSB_CLASS_HID: number;
    declare var LIBUSB_CLASS_PRINTER: number;
    declare var LIBUSB_CLASS_PTP: number;
    declare var LIBUSB_CLASS_MASS_STORAGE: number;
    declare var LIBUSB_CLASS_HUB: number;
    declare var LIBUSB_CLASS_DATA: number;
    declare var LIBUSB_CLASS_WIRELESS: number;
    declare var LIBUSB_CLASS_APPLICATION: number;
    declare var LIBUSB_CLASS_VENDOR_SPEC: number;
    declare var LIBUSB_REQUEST_GET_STATUS: number;
    declare var LIBUSB_REQUEST_CLEAR_FEATURE: number;
    declare var LIBUSB_REQUEST_SET_FEATURE: number;
    declare var LIBUSB_REQUEST_SET_ADDRESS: number;
    declare var LIBUSB_REQUEST_GET_DESCRIPTOR: number;
    declare var LIBUSB_REQUEST_SET_DESCRIPTOR: number;
    declare var LIBUSB_REQUEST_GET_CONFIGURATION: number;
    declare var LIBUSB_REQUEST_SET_CONFIGURATION: number;
    declare var LIBUSB_REQUEST_GET_INTERFACE: number;
    declare var LIBUSB_REQUEST_SET_INTERFACE: number;
    declare var LIBUSB_REQUEST_SYNCH_FRAME: number;
    declare var LIBUSB_DT_DEVICE: number;
    declare var LIBUSB_DT_CONFIG: number;
    declare var LIBUSB_DT_STRING: number;
    declare var LIBUSB_DT_INTERFACE: number;
    declare var LIBUSB_DT_ENDPOINT: number;
    declare var LIBUSB_DT_HID: number;
    declare var LIBUSB_DT_REPORT: number;
    declare var LIBUSB_DT_PHYSICAL: number;
    declare var LIBUSB_DT_HUB: number;
    declare var LIBUSB_ENDPOINT_IN: number;
    declare var LIBUSB_ENDPOINT_OUT: number;
    declare var LIBUSB_TRANSFER_TYPE_CONTROL: number;
    declare var LIBUSB_TRANSFER_TYPE_ISOCHRONOUS: number;
    declare var LIBUSB_TRANSFER_TYPE_BULK: number;
    declare var LIBUSB_TRANSFER_TYPE_INTERRUPT: number;
    declare var LIBUSB_ISO_SYNC_TYPE_NONE: number;
    declare var LIBUSB_ISO_SYNC_TYPE_ASYNC: number;
    declare var LIBUSB_ISO_SYNC_TYPE_ADAPTIVE: number;
    declare var LIBUSB_ISO_SYNC_TYPE_SYNC: number;
    declare var LIBUSB_ISO_USAGE_TYPE_DATA: number;
    declare var LIBUSB_ISO_USAGE_TYPE_FEEDBACK: number;
    declare var LIBUSB_ISO_USAGE_TYPE_IMPLICIT: number;
    declare var LIBUSB_TRANSFER_COMPLETED: number;
    declare var LIBUSB_TRANSFER_ERROR: number;
    declare var LIBUSB_TRANSFER_TIMED_OUT: number;
    declare var LIBUSB_TRANSFER_CANCELLED: number;
    declare var LIBUSB_TRANSFER_STALL: number;
    declare var LIBUSB_TRANSFER_NO_DEVICE: number;
    declare var LIBUSB_TRANSFER_OVERFLOW: number;
    declare var LIBUSB_TRANSFER_SHORT_NOT_OK: number;
    declare var LIBUSB_TRANSFER_FREE_BUFFER: number;
    declare var LIBUSB_TRANSFER_FREE_TRANSFER: number;
    declare var LIBUSB_REQUEST_TYPE_STANDARD: number;
    declare var LIBUSB_REQUEST_TYPE_CLASS: number;
    declare var LIBUSB_REQUEST_TYPE_VENDOR: number;
    declare var LIBUSB_REQUEST_TYPE_RESERVED: number;
    declare var LIBUSB_RECIPIENT_DEVICE: number;
    declare var LIBUSB_RECIPIENT_INTERFACE: number;
    declare var LIBUSB_RECIPIENT_ENDPOINT: number;
    declare var LIBUSB_RECIPIENT_OTHER: number;
    declare var LIBUSB_CONTROL_SETUP_SIZE: number;
    declare var LIBUSB_ERROR_IO: number;
    declare var LIBUSB_ERROR_INVALID_PARAM: number;
    declare var LIBUSB_ERROR_ACCESS: number;
    declare var LIBUSB_ERROR_NO_DEVICE: number;
    declare var LIBUSB_ERROR_NOT_FOUND: number;
    declare var LIBUSB_ERROR_BUSY: number;
    declare var LIBUSB_ERROR_TIMEOUT: number;
    declare var LIBUSB_ERROR_OVERFLOW: number;
    declare var LIBUSB_ERROR_PIPE: number;
    declare var LIBUSB_ERROR_INTERRUPTED: number;
    declare var LIBUSB_ERROR_NO_MEM: number;
    declare var LIBUSB_ERROR_NOT_SUPPORTED: number;
    declare var LIBUSB_ERROR_OTHER: number;
}