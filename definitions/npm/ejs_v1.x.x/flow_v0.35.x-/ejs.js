/**
 * Flowtype definitions for ejs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ejs' {

    declare var npm$namespace$Ejs: {
        resolveInclude: typeof Ejs$resolveInclude,
        compile: typeof Ejs$compile,
        render: typeof Ejs$render,
        renderFile: typeof Ejs$renderFile,
        clearCache: typeof Ejs$clearCache,
        escapeRegexChars: typeof Ejs$escapeRegexChars,
        escapeXML: typeof Ejs$escapeXML,
        shallowCopy: typeof Ejs$shallowCopy,
        resolve: typeof Ejs$resolve,
        normalize: typeof Ejs$normalize,
        isAbsolute: typeof Ejs$isAbsolute,
        join: typeof Ejs$join,
        relative: typeof Ejs$relative,
        dirname: typeof Ejs$dirname,
        basename: typeof Ejs$basename,
        extname: typeof Ejs$extname,
        filter: typeof Ejs$filter,
    }
    declare type Ejs$Data = {
        [name: string]: any
    };

    declare type Ejs$Dependencies = string[];

    declare var cache: Ejs$Cache;

    declare var localsName: string;

    declare function Ejs$resolveInclude(name: string, filename: string): string

    declare function Ejs$compile(template: string, opts?: Ejs$Options): (Ejs$TemplateFunction)

    declare function Ejs$render(template: string, data?: Ejs$Data, opts?: Ejs$Options): string

    declare function Ejs$renderFile(path: string, data?: Ejs$Data, opts?: Ejs$Options, cb?: Function): any

    declare function Ejs$clearCache(): any

    declare interface Ejs$TemplateFunction {
        (data: Ejs$Data): any
    }

    declare interface Ejs$Options {
        cache?: any,
            filename?: string,
            context?: any,
            compileDebug?: boolean,
            client?: boolean,
            delimiter?: string,
            debug?: any,
            _with?: boolean
    }

    declare class Template {
        constructor(text: string, opts: Ejs$Options): this;
        opts: Ejs$Options;
        templateText: string;
        mode: string;
        truncate: boolean;
        currentLine: number;
        source: string;
        dependencies: Ejs$Dependencies;
        createRegex(): RegExp;
        compile(): Ejs$TemplateFunction;
        generateSource(): any;
        parseTemplateText(): string[];
        scanLine(line: string): any
    }

    declare interface Template$MODES {
        EVAL: string,
            ESCAPED: string,
            RAW: string,
            COMMENT: string,
            LITERAL: string
    }

    declare function Ejs$escapeRegexChars(s: string): string

    declare function Ejs$escapeXML(markup: string): string

    declare function Ejs$shallowCopy<T1>(to: T1, fro: any): T1

    declare interface Ejs$Cache {
        _data: {
                [name: string]: any
            },
            set(key: string, val: any): any,
            get(key: string): any
    }

    declare var cache: Ejs$Cache;

    declare function Ejs$resolve(from1: string, to: string): string

    declare function Ejs$normalize(path: string): string

    declare function Ejs$isAbsolute(path: string): boolean

    declare function Ejs$join(...args: string[]): string

    declare function Ejs$relative(from: string, to: string): string

    declare var sep: string;

    declare var delimiter: string;

    declare function Ejs$dirname(path: string): string

    declare function Ejs$basename(path: string): string

    declare function Ejs$extname(path: string): string

    declare function Ejs$filter(xs: any, f: any): any
    declare module.exports: typeof Ejs
}