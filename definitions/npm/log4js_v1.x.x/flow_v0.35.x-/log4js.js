// @flow
/**
 * Flowtype definitions for log4js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'log4js' {

    /**
     * Replaces the console
     * @param logger 
     * @returns  void
     */
    declare     export function replaceConsole(logger?: Logger): void

    /**
     * Restores the console
     * @returns  void
     */
    declare     export function restoreConsole(): void

    /**
     * Get a logger instance. Instance is cached on categoryName level.
     * @param  name of category to log to.
     * @returns  instance of logger for the category
     * @static  
     */
    declare     export function getLogger(categoryName?: string): Logger
    declare     export function getBufferedLogger(categoryName?: string): Logger

    /**
     * Has a logger instance cached on categoryName.
     * @param  name of category to log to.
     * @returns  contains logger for the category
     * @static  
     */
    declare     export function hasLogger(categoryName: string): boolean

    /**
     * Get the default logger instance.
     * @returns  instance of default logger
     * @static  
     */
    declare     export function getDefaultLogger(): Logger

    /**
     * args are appender, then zero or more categories
     * @param  
     * @returns  * 
     * @static  
     */
    declare     export function addAppender(...appenders: any[]): void

    /**
     * Load appender
     * @param  type
     * @param  appender module. by default, require('./appenders/' + appender)
     * @returns  * 
     * @static  
     */
    declare     export function loadAppender(appenderType: string, appenderModule?: AppenderModule): void

    /**
     * Claer configured appenders
     * @returns  * 
     * @static  
     */
    declare     export function clearAppenders(): void

    /**
     * Shutdown all log appenders. This will first disable all writing to appenders
     * and then call the shutdown function each appender.
     * @params  {Function} cb - The callback to be invoked once all appenders have
    shutdown. If an error occurs, the callback will be given the error object
    as the first argument.
     * @returns  
    */
    declare     export function shutdown(cb: Function): void
    declare     export function configure(filename: string, options?: any): void
    declare     export function setGlobalLogLevel(level: string): void

    /**
     * Create logger for connect middleware.
     * @returns  Instance of middleware.
     * @static  
     */
    declare     export function connectLogger(
        logger: Logger,
        options: {
            format?: string,
            level?: string,
            nolog?: any
        }): express.Handler
    declare     export var layouts: {
        basicLayout: Layout,
        messagePassThroughLayout: Layout,
        patternLayout: Layout,
        colouredLayout: Layout,
        coloredLayout: Layout,
        dummyLayout: Layout,

        /**
         * Register your custom layout generator
         */
        addLayout: (name: string, serializerGenerator: (config?: LayoutConfig) => Layout) => void,

        /**
         * Get layout. Available predified layout names: 
         * messagePassThrough, basic, colored, coloured, pattern, dummy
         */
        layout: (name: string, config: LayoutConfig) => Layout
    };
    declare     export var appenders: any;
    declare     export var levels: {
        ALL: Level,
        TRACE: Level,
        DEBUG: Level,
        INFO: Level,
        WARN: Level,
        ERROR: Level,
        FATAL: Level,
        OFF: Level,
        toLevel(level: string, defaultLevel?: Level): Level,
        toLevel(level: Level, defaultLevel?: Level): Level
    };
    declare     export interface Logger {
        setLevel(level: string): void,
            setLevel(level: Level): void,
            isLevelEnabled(level: Level): boolean,
            isTraceEnabled(): boolean,
            isDebugEnabled(): boolean,
            isInfoEnabled(): boolean,
            isWarnEnabled(): boolean,
            isErrorEnabled(): boolean,
            isFatalEnabled(): boolean,
            trace(message: string, ...args: any[]): void,
            debug(message: string, ...args: any[]): void,
            info(message: string, ...args: any[]): void,
            warn(message: string, ...args: any[]): void,
            error(message: string, ...args: any[]): void,
            fatal(message: string, ...args: any[]): void
    }
    declare     export interface Level {
        isEqualTo(other: string): boolean,
            isEqualTo(otherLevel: Level): boolean,
            isLessThanOrEqualTo(other: string): boolean,
            isLessThanOrEqualTo(otherLevel: Level): boolean,
            isGreaterThanOrEqualTo(other: string): boolean,
            isGreaterThanOrEqualTo(otherLevel: Level): boolean
    }
    declare     export interface IConfig {
        appenders: AppenderConfig[],
            levels?: {
                [category: string]: string
            },
            replaceConsole?: boolean
    }
    declare     export interface AppenderConfigBase {
        type: string,
            category?: string,
            layout?: {
                type: string,
                [key: string]: any
            }
    }
    declare     export type ConsoleAppenderConfig = {} & AppenderConfigBase

    declare     export type FileAppenderConfig = {
        filename: string
    } & AppenderConfigBase

    declare     export type DateFileAppenderConfig = {

        /**
         * The following strings are recognised in the pattern:
         *   - yyyy : the full year, use yy for just the last two digits
          - MM   : the month
          - dd   : the day of the month
          - hh   : the hour of the day (24-hour clock)
          - mm   : the minute of the hour
          - ss   : seconds
          - SSS  : milliseconds (although I'm not sure you'd want to roll your logs every millisecond)
          - O    : timezone (capital letter o)
        */
        pattern: string,
        alwaysIncludePattern: boolean
    } & FileAppenderConfig

    declare     export type SmtpAppenderConfig = {

        /**
         * Comma separated list of email recipients 
         */
        recipients: string,

        /**
         * Sender of all emails (defaults to transport user) 
         */
        sender: string,

        /**
         * Subject of all email messages (defaults to first event's message)
         */
        subject: string,

        /**
         * The time in seconds between sending attempts (defaults to 0).
         * All events are buffered and sent in one email during this time.
        If 0 then every event sends an email
        */
        sendInterval: number,
        SMTP: {
            host: string,
            secure: boolean,
            port: number,
            auth: {
                user: string,
                pass: string
            }
        }
    } & AppenderConfigBase

    declare     export type HookIoAppenderConfig = {
        maxLogSize: number,
        backup: number,
        pollInterval: number
    } & FileAppenderConfig

    declare     export type GelfAppenderConfig = {
        host: string,
        hostname: string,
        port: string,
        facility: string
    } & AppenderConfigBase

    declare     export type MultiprocessAppenderConfig = {
        mode: string,
        loggerPort: number,
        loggerHost: string,
        facility: string,
        appender?: AppenderConfig
    } & AppenderConfigBase

    declare     export type LogglyAppenderConfig = {

        /**
         * Loggly customer token - https://www.loggly.com/docs/api-sending-data/ 
         */
        token: string,

        /**
         * Loggly customer subdomain (use 'abc' for abc.loggly.com) 
         */
        subdomain: string,

        /**
         * an array of strings to help segment your data & narrow down search results in Loggly 
         */
        tags: string[],

        /**
         * Enable JSON logging by setting to 'true' 
         */
        json: boolean
    } & AppenderConfigBase

    declare     export type ClusteredAppenderConfig = {
        appenders?: AppenderConfig[]
    } & AppenderConfigBase

    declare type CoreAppenderConfig = ConsoleAppenderConfig |
        FileAppenderConfig |
        DateFileAppenderConfig |
        SmtpAppenderConfig |
        HookIoAppenderConfig |
        GelfAppenderConfig |
        MultiprocessAppenderConfig |
        LogglyAppenderConfig |
        ClusteredAppenderConfig;
    declare type CustomAppenderConfig = {
        [prop: string]: any
    } & AppenderConfigBase

    declare type AppenderConfig = CoreAppenderConfig | CustomAppenderConfig;
    declare     export interface LogEvent {

        /**
         * new Date()
         */
        startTime: number,
            categoryName: string,
            data: any[],
            level: Level,
            logger: Logger
    }
    declare     export interface Appender {
        (event: LogEvent): void
    }
    declare     export interface AppenderModule {
        appender: (...args: any[]) => Appender,
            shutdown?: (cb: (error: Error) => void) => void,
            configure: (config: CustomAppenderConfig, options?: {
                [key: string]: any
            }) => Appender
    }
    declare     export interface LayoutConfig {
        [key: string]: any
    }
    declare     export interface LayoutGenerator {
        (config?: LayoutConfig): Layout
    }
    declare     export interface Layout {
        (event: LogEvent): string
    }
}