// @flow
/**
 * Flowtype definitions for milkcocoa
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare class MilkCocoa {
    constructor(host: string, callback?: Function): this;
    dataStore(path: string): milkcocoa$DataStore;
    addAccount(
        email: string,
        password: string,
        options?: {},
        callback?: (err: undefined.AddAccount, user: milkcocoa$User) => void): void;
    login(
        email: string,
        password: string,
        callback: (err: undefined.Login, user: milkcocoa$User) => void): void;
    logout(callback?: (err: string) => void): void;
    getCurrentUser(callback: (err: undefined.GetCurrentUser, user: {
        id: string
    }) => void): void
}



declare interface milkcocoa$DataStore {
    push(object: {}, callback?: (data: milkcocoa$DataStoreCallbackData) => void): void,
        set(id: string, data: {}): void,
        remove(id: string): void,
        send(object: {}): void,
        on(event: string, callback: (data: milkcocoa$DataStoreCallbackData) => void): void,
        off(event: string): void,
        get(id: string, callback: (data: {}) => void): void,
        query(condition?: {}): milkcocoa$Query,
        child(path: string): milkcocoa$DataStore,
        parent(): milkcocoa$DataStore,
        root(): milkcocoa$DataStore
}

declare interface milkcocoa$DataStoreCallbackData {
    err: string,
        path: string,
        id: string,
        value: any
}

declare interface milkcocoa$Query {
    done(callback: (data: any) => void): void,
        limit(number: number): milkcocoa$Query,
        skip(index: number): milkcocoa$Query,
        sort(mode: string): milkcocoa$Query
}

declare interface milkcocoa$User {
    id: string,
        email: string,
        option: {}
}