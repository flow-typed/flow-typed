/**
 * Flowtype definitions for velocity-animate
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JQuery {
    velocity(name: string, options: undefined.RegisteredEffectOptions): JQuery,
        velocity(
            options: {
                properties: undefined.Properties,
                options: undefined.Options
            }): JQuery,
        velocity(properties: undefined.Properties, options: undefined.Options): JQuery,
        velocity(
            properties: undefined.Properties,
            duration: number,
            easing: undefined.Easing,
            complete?: undefined.ElementCallback): JQuery,
        velocity(
            properties: undefined.Properties,
            duration: number,
            complete?: undefined.ElementCallback): JQuery,
        velocity(
            properties: undefined.Properties,
            easing: undefined.Easing,
            complete?: undefined.ElementCallback): JQuery,
        velocity(properties: undefined.Properties, complete?: undefined.ElementCallback): JQuery
}
declare interface JQueryStatic {
    Velocity: undefined.VelocityStatic
}
declare module 'velocity' {
    declare type Properties = Object;
    declare type Easing = string | number[];
    declare type ElementCallback = (elements: NodeListOf<HTMLElement>) => void;
    declare type ProgressCallback = (
        elements: NodeListOf<HTMLElement>,
        percentComplete: number,
        timeRemaining: number,
        timeStart: number,
        tweenValue: number) => void;
    declare type EffectCall = [Properties] | [Properties, number] | [Properties, EffectCallOptions] | [Properties, number, EffectCallOptions];
    declare interface EffectCallOptions {
        delay?: any,
            easing?: any
    }
    declare interface CommonOptions {
        duration?: string | number,
            begin?: ElementCallback,
            complete?: ElementCallback,
            display?: string | boolean,
            delay?: number | boolean,
            mobileHA?: boolean,
            _cacheValues?: boolean,
            container?: JQuery,
            axis?: string,
            offset?: number
    }
    declare type Options = {
        queue?: string | boolean,
        easing?: Easing,
        progress?: ProgressCallback,
        loop?: number | boolean
    } & CommonOptions

    declare interface RegisterEffectOptions {
        defaultDuration?: number,
            calls: EffectCall[],
            reset?: Object
    }
    declare type RegisteredEffectOptions = {
        stagger?: number,
        drag?: boolean,
        backwards?: boolean
    } & CommonOptions

    declare interface SequenceCall {
        e: HTMLElement | JQuery,
            p: Properties,
            o: SequenceOptions
    }
    declare type SequenceOptions = {
        sequenceQueue?: boolean
    } & Options

    declare interface VelocityStatic {
        Sequences: any,
            animate(
                options: {
                    elements: NodeListOf<HTMLElement>,
                    properties: Properties,
                    options: Options
                }): any,
            animate(
                elements: HTMLElement | NodeListOf<HTMLElement>,
                properties: Properties,
                options: Options): any,
            RegisterEffect(name: string, options: RegisterEffectOptions): VelocityStatic,
            RunSequence(sequence: SequenceCall[]): VelocityStatic,

            /**
             * Get a hook value. Hooks are the subvalues of multi-value CSS properties.
             * It features the same API as $.css().
             */
            hook(element: HTMLElement | JQuery, cssKey: string): string,

            /**
             * Set a hook value. Hooks are the subvalues of multi-value CSS properties.
             * It features the same API as $.css().
             */
            hook(element: HTMLElement | JQuery, cssKey: string, cssValue: string): void
    }
}