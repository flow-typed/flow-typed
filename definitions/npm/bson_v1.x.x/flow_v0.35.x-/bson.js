// @flow
/**
 * Flowtype definitions for bson
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'bson' {
    declare module 'BSONPure' {
        declare         export interface DeserializeOptions {

            /**
             * {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized. 
             */
            evalFunctions?: boolean,

                /**
                 * {Boolean, default:false}, cache evaluated functions for reuse. 
                 */
                cacheFunctions?: boolean,

                /**
                 * {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function. 
                 */
                cacheFunctionsCrc32?: boolean,

                /**
                 * {Boolean, default:false}, deserialize Binary data directly into node.js Buffer object. 
                 */
                promoteBuffers?: boolean
        }
        declare         export class BSON {

            /**
             * 
             * @param  the Javascript object to serialize.
             * @param  the serializer will check if keys are valid.
             * @param  return the serialized object as a Buffer object (ignore).
             * @param  serialize the javascript functions (default:false)
             * @return  returns a TypedArray or Array depending on what your browser supports
             */
            serialize(
                object: any,
                checkKeys?: boolean,
                asBuffer?: boolean,
                serializeFunctions?: boolean): Buffer;
            deserialize(buffer: Buffer, options?: DeserializeOptions, isArray?: boolean): any
        }
        declare         export interface Binary {}
        declare         export interface BinaryStatic {
            SUBTYPE_DEFAULT: number,
                SUBTYPE_FUNCTION: number,
                SUBTYPE_BYTE_ARRAY: number,
                SUBTYPE_UUID_OLD: number,
                SUBTYPE_UUID: number,
                SUBTYPE_MD5: number,
                SUBTYPE_USER_DEFINED: number,
                new(buffer: Buffer, subType?: number): Binary
        }
        declare         export var Binary: BinaryStatic;
        declare         export interface Code {}
        declare         export interface CodeStatic {
            new(code: string | Function, scope?: any): Code
        }
        declare         export var Code: CodeStatic;
        declare         export interface DBRef {}
        declare         export interface DBRefStatic {
            new(namespace: string, oid: ObjectID, db?: string): DBRef
        }
        declare         export var DBRef: DBRefStatic;
        declare         export interface Double {}
        declare         export interface DoubleStatic {
            new(value: number): Double
        }
        declare         export var Double: DoubleStatic;
        declare         export interface Long {}
        declare         export interface LongStatic {
            new(low: number, high: number): Long,
            fromInt(i: number): Long,
                fromNumber(n: number): Long,
                fromBits(lowBits: number, highBits: number): Long,
                fromString(s: string, opt_radix?: number): Long
        }
        declare         export var Long: LongStatic;
        declare         export interface MaxKey {}
        declare         export interface MaxKeyStatic {
            new(): MaxKey
        }
        declare         export var MaxKey: MaxKeyStatic;
        declare         export interface MinKey {}
        declare         export interface MinKeyStatic {
            new(): MinKey
        }
        declare         export var MinKey: MinKeyStatic;
        declare         export interface ObjectID {}
        declare         export interface ObjectIDStatic {
            new(id?: number | string | ObjectID): ObjectID,
            createPk(): ObjectID,
                createFromTime(time: number): ObjectID,
                createFromHexString(hexString: string): ObjectID,
                isValid(id: number | string | ObjectID): boolean
        }
        declare         export var ObjectID: ObjectIDStatic;
        declare         export var ObjectId: ObjectIDStatic;
        declare         export interface BSONRegExp {}
        declare         export interface BSONRegExpStatic {
            new(pattern: string, options: string): BSONRegExp
        }
        declare         export var BSONRegExp: BSONRegExpStatic;
        declare         export interface Symbol {}
        declare         export interface SymbolStatic {
            new(value: string): Symbol
        }
        declare         export var Symbol: SymbolStatic;
        declare         export interface Timestamp {}
        declare         export interface TimestampStatic {
            new(low: number, high: number): Timestamp,
            fromInt(i: number): Timestamp,
                fromNumber(n: number): Timestamp,
                fromBits(lowBits: number, highBits: number): Timestamp,
                fromString(s: string, opt_radix?: number): Timestamp
        }
        declare         export var Timestamp: TimestampStatic;
    }


    declare     export var BSONNative: typeof BSONPure;
    declare module.exports: typeof bson
}