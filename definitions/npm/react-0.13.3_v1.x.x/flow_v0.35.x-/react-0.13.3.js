/**
 * Flowtype definitions for react-0.13.3
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$___React: {
    createClass: typeof ___React$createClass,
    createFactory: typeof ___React$createFactory,
    createElement: typeof ___React$createElement,
    cloneElement: typeof ___React$cloneElement,
    render: typeof ___React$render,
    unmountComponentAtNode: typeof ___React$unmountComponentAtNode,
    renderToString: typeof ___React$renderToString,
    renderToStaticMarkup: typeof ___React$renderToStaticMarkup,
    isValidElement: typeof ___React$isValidElement,
    initializeTouchEvents: typeof ___React$initializeTouchEvents,
    findDOMNode: typeof ___React$findDOMNode,
}
declare type ___React$ReactType = ___React$ComponentClass<any>| string;

declare interface ___React$ReactElement<P>{
    type: string | ___React$ComponentClass<P>,
    props: P,
    key: string | number,
    ref: string | ((component: ___React$Component<P, any>) => any)
}

declare type ___React$ClassicElement<P>= {
    type: string | ___React$ClassicComponentClass<P>,
    ref: string | ((component: ___React$ClassicComponent<P, any>) => any)
} & ___React$ReactElement


declare type ___React$DOMElement<P>= {
    type: string,
    ref: string | ((component: ___React$DOMComponent<P>) => any)
} & ___React$ClassicElement


declare type ___React$HTMLElement = ___React$DOMElement<___React$HTMLAttributes>;

declare type ___React$SVGElement = ___React$DOMElement<___React$SVGAttributes>;

declare interface ___React$Factory<P>{
    (props?: P, ...children: ___React$ReactNode[]): ___React$ReactElement<P >
}

declare type ___React$ClassicFactory<P>= {
    (props?: P, ...children: ___React$ReactNode[]): ___React$ClassicElement<P >
} & ___React$Factory


declare type ___React$DOMFactory<P>= {
    (props?: P, ...children: ___React$ReactNode[]): ___React$DOMElement<P >
} & ___React$ClassicFactory


declare type ___React$HTMLFactory = ___React$DOMFactory<___React$HTMLAttributes>;

declare type ___React$SVGFactory = ___React$DOMFactory<___React$SVGAttributes>;

declare type ___React$SVGElementFactory = ___React$DOMFactory<___React$SVGElementAttributes>;

declare type ___React$ReactText = string | number;

declare type ___React$ReactChild = ___React$ReactElement<any>| ___React$ReactText;

declare type ___React$ReactFragment = {} | Array<___React$ReactChild | any[] | boolean>;

declare type ___React$ReactNode = ___React$ReactChild | ___React$ReactFragment | boolean;

declare function ___React$createClass<P, S>(spec: ___React$ComponentSpec<P, S>): ___React$ClassicComponentClass<P >

    declare function ___React$createFactory<P>(type: string): ___React$DOMFactory<P >

    declare function ___React$createElement<P>(
        type: string,
        props?: P,
        ...children: ___React$ReactNode[]): ___React$DOMElement<P >

    declare function ___React$cloneElement<P>(
        element: ___React$DOMElement<P>,
        props?: P,
        ...children: ___React$ReactNode[]): ___React$DOMElement<P >

    declare function ___React$render<P>(
        element: ___React$DOMElement<P>,
        container: JSX$Element,
        callback?: () => any): ___React$DOMComponent<P >

    declare function ___React$unmountComponentAtNode(container: JSX$Element): boolean

declare function ___React$renderToString(element: ___React$ReactElement<any>): string

declare function ___React$renderToStaticMarkup(element: ___React$ReactElement<any>): string

declare function ___React$isValidElement(object: {}): boolean

declare function ___React$initializeTouchEvents(shouldUseTouch: boolean): void

declare function ___React$findDOMNode<TElement>(
    componentOrElement: ___React$Component<any, any>| JSX$Element): TElement

declare var DOM: ___React$ReactDOM;

declare var PropTypes: ___React$ReactPropTypes;

declare var Children: ___React$ReactChildren;

declare class Component<P, S>mixins ComponentLifecycle<P, S>{
    propTypes: ___React$ValidationMap<any>;
    contextTypes: ___React$ValidationMap<any>;
    childContextTypes: ___React$ValidationMap<any>;
    defaultProps: ___React$Props<any>;
    constructor(props?: P, context?: any): this;
    setState(f: (prevState: S, props: P) => S, callback?: () => any): void;
    setState(state: S, callback?: () => any): void;
    forceUpdate(callBack?: () => any): void;
    render(): JSX$Element;
    props: P;
    state: S;
    context: {};
    refs: {
        [key: string]: ___React$Component<any,
        any >
    }
}

declare type ___React$ClassicComponent<P, S>= {
    replaceState(nextState: S, callback?: () => any): void,
    getDOMNode<TElement>(): TElement,
    getDOMNode(): JSX$Element,
    isMounted(): boolean,
    getInitialState(): S,
    setProps(nextProps: P, callback?: () => any): void,
    replaceProps(nextProps: P, callback?: () => any): void
} & ___React$Component


declare type ___React$DOMComponent<P>= {
    tagName: string
} & ___React$ClassicComponent


declare type ___React$HTMLComponent = ___React$DOMComponent<___React$HTMLAttributes>;

declare type ___React$SVGComponent = ___React$DOMComponent<___React$SVGAttributes>;

declare interface ___React$ChildContextProvider<CC>{
    getChildContext(): CC
}

declare interface ___React$ComponentClass<P>{
    new(props?: P, context?: any): ___React$Component<P,
    any>,
    propTypes?: ___React$ValidationMap<P>,
    contextTypes?: ___React$ValidationMap<any>,
    childContextTypes?: ___React$ValidationMap<any>,
    defaultProps?: P
}

declare type ___React$ClassicComponentClass<P>= {
    new(props?: P, context?: any): ___React$ClassicComponent<P,
    any>,
    getDefaultProps(): P,
    displayName?: string
} & ___React$ComponentClass


declare interface ___React$ComponentLifecycle<P, S>{
    componentWillMount(): void,
    componentDidMount(): void,
    componentWillReceiveProps(nextProps: P, nextContext: any): void,
    shouldComponentUpdate(nextProps: P, nextState: S, nextContext: any): boolean,
    componentWillUpdate(nextProps: P, nextState: S, nextContext: any): void,
    componentDidUpdate(prevProps: P, prevState: S, prevContext: any): void,
    componentWillUnmount(): void
}

declare type ___React$Mixin<P, S>= {
    mixins?: ___React$Mixin<P,
    S>,
    statics?: {
        [key: string]: any
    },
    displayName?: string,
    propTypes?: ___React$ValidationMap<any>,
    contextTypes?: ___React$ValidationMap<any>,
    childContextTypes?: ___React$ValidationMap<any>,
    getDefaultProps(): P,
    getInitialState(): S
} & ___React$ComponentLifecycle


declare type ___React$ComponentSpec<P, S>= {
    render(): ___React$ReactElement<any>,
    [propertyName: string]: any
} & ___React$Mixin


declare interface ___React$SyntheticEvent {
    bubbles: boolean,
        cancelable: boolean,
        currentTarget: EventTarget,
        defaultPrevented: boolean,
        eventPhase: number,
        isTrusted: boolean,
        nativeEvent: Event,
        preventDefault(): void,
        stopPropagation(): void,
        target: EventTarget,
        timeStamp: Date,
        type: string
}

declare type ___React$DragEvent = {
    dataTransfer: DataTransfer
} & ___React$SyntheticEvent


declare type ___React$ClipboardEvent = {
    clipboardData: DataTransfer
} & ___React$SyntheticEvent


declare type ___React$KeyboardEvent = {
    altKey: boolean,
    charCode: number,
    ctrlKey: boolean,
    getModifierState(key: string): boolean,
    key: string,
    keyCode: number,
    locale: string,
    location: number,
    metaKey: boolean,
    repeat: boolean,
    shiftKey: boolean,
    which: number
} & ___React$SyntheticEvent


declare type ___React$FocusEvent = {
    relatedTarget: EventTarget
} & ___React$SyntheticEvent


declare type ___React$FormEvent = {} & ___React$SyntheticEvent


declare type ___React$MouseEvent = {
    altKey: boolean,
    button: number,
    buttons: number,
    clientX: number,
    clientY: number,
    ctrlKey: boolean,
    getModifierState(key: string): boolean,
    metaKey: boolean,
    pageX: number,
    pageY: number,
    relatedTarget: EventTarget,
    screenX: number,
    screenY: number,
    shiftKey: boolean
} & ___React$SyntheticEvent


declare type ___React$TouchEvent = {
    altKey: boolean,
    changedTouches: ___React$TouchList,
    ctrlKey: boolean,
    getModifierState(key: string): boolean,
    metaKey: boolean,
    shiftKey: boolean,
    targetTouches: ___React$TouchList,
    touches: ___React$TouchList
} & ___React$SyntheticEvent


declare type ___React$UIEvent = {
    detail: number,
    view: ___React$AbstractView
} & ___React$SyntheticEvent


declare type ___React$WheelEvent = {
    deltaMode: number,
    deltaX: number,
    deltaY: number,
    deltaZ: number
} & ___React$SyntheticEvent


declare interface ___React$EventHandler<E>{
    (event: E): void
}

declare type ___React$DragEventHandler = {} & ___React$EventHandler


declare type ___React$ClipboardEventHandler = {} & ___React$EventHandler


declare type ___React$KeyboardEventHandler = {} & ___React$EventHandler


declare type ___React$FocusEventHandler = {} & ___React$EventHandler


declare type ___React$FormEventHandler = {} & ___React$EventHandler


declare type ___React$MouseEventHandler = {} & ___React$EventHandler


declare type ___React$TouchEventHandler = {} & ___React$EventHandler


declare type ___React$UIEventHandler = {} & ___React$EventHandler


declare type ___React$WheelEventHandler = {} & ___React$EventHandler


declare interface ___React$Props<T>{
    children?: ___React$ReactNode,
    key?: string | number,
    ref?: string | ((component: T) => any)
}

declare type ___React$DOMAttributesBase<T>= {
    onCopy?: ___React$ClipboardEventHandler,
    onCut?: ___React$ClipboardEventHandler,
    onPaste?: ___React$ClipboardEventHandler,
    onKeyDown?: ___React$KeyboardEventHandler,
    onKeyPress?: ___React$KeyboardEventHandler,
    onKeyUp?: ___React$KeyboardEventHandler,
    onFocus?: ___React$FocusEventHandler,
    onBlur?: ___React$FocusEventHandler,
    onChange?: ___React$FormEventHandler,
    onInput?: ___React$FormEventHandler,
    onSubmit?: ___React$FormEventHandler,
    onClick?: ___React$MouseEventHandler,
    onContextMenu?: ___React$MouseEventHandler,
    onDoubleClick?: ___React$MouseEventHandler,
    onDrag?: ___React$DragEventHandler,
    onDragEnd?: ___React$DragEventHandler,
    onDragEnter?: ___React$DragEventHandler,
    onDragExit?: ___React$DragEventHandler,
    onDragLeave?: ___React$DragEventHandler,
    onDragOver?: ___React$DragEventHandler,
    onDragStart?: ___React$DragEventHandler,
    onDrop?: ___React$DragEventHandler,
    onMouseDown?: ___React$MouseEventHandler,
    onMouseEnter?: ___React$MouseEventHandler,
    onMouseLeave?: ___React$MouseEventHandler,
    onMouseMove?: ___React$MouseEventHandler,
    onMouseOut?: ___React$MouseEventHandler,
    onMouseOver?: ___React$MouseEventHandler,
    onMouseUp?: ___React$MouseEventHandler,
    onTouchCancel?: ___React$TouchEventHandler,
    onTouchEnd?: ___React$TouchEventHandler,
    onTouchMove?: ___React$TouchEventHandler,
    onTouchStart?: ___React$TouchEventHandler,
    onScroll?: ___React$UIEventHandler,
    onWheel?: ___React$WheelEventHandler,
    className?: string,
    id?: string,
    dangerouslySetInnerHTML?: {
        ___html: string
    }
} & ___React$Props


declare type ___React$DOMAttributes = {} & ___React$DOMAttributesBase


declare interface ___React$CSSProperties {
    boxFlex?: number,
        boxFlexGroup?: number,
        columnCount?: number,
        flex?: number | string,
        flexGrow?: number,
        flexShrink?: number,
        fontWeight?: number | string,
        lineClamp?: number,
        lineHeight?: number | string,
        opacity?: number,
        order?: number,
        orphans?: number,
        widows?: number,
        zIndex?: number,
        zoom?: number,
        fontSize?: number | string,
        fillOpacity?: number,
        strokeOpacity?: number,
        strokeWidth?: number, [propertyName: string]: any
}

declare type ___React$HTMLAttributesBase<T>= {
    accept?: string,
    acceptCharset?: string,
    accessKey?: string,
    action?: string,
    allowFullScreen?: boolean,
    allowTransparency?: boolean,
    alt?: string,
    async?: boolean,
    autoComplete?: boolean,
    autoFocus?: boolean,
    autoPlay?: boolean,
    cellPadding?: number | string,
    cellSpacing?: number | string,
    charSet?: string,
    checked?: boolean,
    classID?: string,
    cols?: number,
    colSpan?: number,
    content?: string,
    contentEditable?: boolean,
    contextMenu?: string,
    controls?: any,
    coords?: string,
    crossOrigin?: string,
    data?: string,
    dateTime?: string,
    defaultChecked?: boolean,
    defaultValue?: string,
    defer?: boolean,
    dir?: string,
    disabled?: boolean,
    download?: any,
    draggable?: boolean,
    encType?: string,
    form?: string,
    formAction?: string,
    formEncType?: string,
    formMethod?: string,
    formNoValidate?: boolean,
    formTarget?: string,
    frameBorder?: number | string,
    headers?: string,
    height?: number | string,
    hidden?: boolean,
    high?: number,
    href?: string,
    hrefLang?: string,
    htmlFor?: string,
    httpEquiv?: string,
    icon?: string,
    label?: string,
    lang?: string,
    list?: string,
    loop?: boolean,
    low?: number,
    manifest?: string,
    marginHeight?: number,
    marginWidth?: number,
    max?: number | string,
    maxLength?: number,
    media?: string,
    mediaGroup?: string,
    method?: string,
    min?: number | string,
    multiple?: boolean,
    muted?: boolean,
    name?: string,
    noValidate?: boolean,
    open?: boolean,
    optimum?: number,
    pattern?: string,
    placeholder?: string,
    poster?: string,
    preload?: string,
    radioGroup?: string,
    readOnly?: boolean,
    rel?: string,
    required?: boolean,
    role?: string,
    rows?: number,
    rowSpan?: number,
    sandbox?: string,
    scope?: string,
    scoped?: boolean,
    scrolling?: string,
    seamless?: boolean,
    selected?: boolean,
    shape?: string,
    size?: number,
    sizes?: string,
    span?: number,
    spellCheck?: boolean,
    src?: string,
    srcDoc?: string,
    srcSet?: string,
    start?: number,
    step?: number | string,
    style?: ___React$CSSProperties,
    tabIndex?: number,
    target?: string,
    title?: string,
    type?: string,
    useMap?: string,
    value?: string,
    width?: number | string,
    wmode?: string,
    autoCapitalize?: boolean,
    autoCorrect?: boolean,
    property?: string,
    itemProp?: string,
    itemScope?: boolean,
    itemType?: string,
    unselectable?: boolean
} & ___React$DOMAttributesBase


declare type ___React$HTMLAttributes = {} & ___React$HTMLAttributesBase


declare type ___React$SVGElementAttributes = {
    viewBox?: string,
    preserveAspectRatio?: string
} & ___React$HTMLAttributes


declare type ___React$SVGAttributes = {
    ref?: string | ((component: ___React$SVGComponent) => void),
    cx?: number | string,
    cy?: number | string,
    d?: string,
    dx?: number | string,
    dy?: number | string,
    fill?: string,
    fillOpacity?: number | string,
    fontFamily?: string,
    fontSize?: number | string,
    fx?: number | string,
    fy?: number | string,
    gradientTransform?: string,
    gradientUnits?: string,
    height?: number | string,
    markerEnd?: string,
    markerMid?: string,
    markerStart?: string,
    offset?: number | string,
    opacity?: number | string,
    patternContentUnits?: string,
    patternUnits?: string,
    points?: string,
    preserveAspectRatio?: string,
    r?: number | string,
    rx?: number | string,
    ry?: number | string,
    spreadMethod?: string,
    stopColor?: string,
    stopOpacity?: number | string,
    stroke?: string,
    strokeDasharray?: string,
    strokeLinecap?: string,
    strokeMiterlimit?: string,
    strokeOpacity?: number | string,
    strokeWidth?: number | string,
    textAnchor?: string,
    transform?: string,
    version?: string,
    viewBox?: string,
    width?: number | string,
    x1?: number | string,
    x2?: number | string,
    x?: number | string,
    y1?: number | string,
    y2?: number | string,
    y?: number | string
} & ___React$DOMAttributes


declare interface ___React$ReactDOM {
    a: ___React$HTMLFactory,
        abbr: ___React$HTMLFactory,
        address: ___React$HTMLFactory,
        area: ___React$HTMLFactory,
        article: ___React$HTMLFactory,
        aside: ___React$HTMLFactory,
        audio: ___React$HTMLFactory,
        b: ___React$HTMLFactory,
        base: ___React$HTMLFactory,
        bdi: ___React$HTMLFactory,
        bdo: ___React$HTMLFactory,
        big: ___React$HTMLFactory,
        blockquote: ___React$HTMLFactory,
        body: ___React$HTMLFactory,
        br: ___React$HTMLFactory,
        button: ___React$HTMLFactory,
        canvas: ___React$HTMLFactory,
        caption: ___React$HTMLFactory,
        cite: ___React$HTMLFactory,
        code: ___React$HTMLFactory,
        col: ___React$HTMLFactory,
        colgroup: ___React$HTMLFactory,
        data: ___React$HTMLFactory,
        datalist: ___React$HTMLFactory,
        dd: ___React$HTMLFactory,
        del: ___React$HTMLFactory,
        details: ___React$HTMLFactory,
        dfn: ___React$HTMLFactory,
        dialog: ___React$HTMLFactory,
        div: ___React$HTMLFactory,
        dl: ___React$HTMLFactory,
        dt: ___React$HTMLFactory,
        em: ___React$HTMLFactory,
        embed: ___React$HTMLFactory,
        fieldset: ___React$HTMLFactory,
        figcaption: ___React$HTMLFactory,
        figure: ___React$HTMLFactory,
        footer: ___React$HTMLFactory,
        form: ___React$HTMLFactory,
        h1: ___React$HTMLFactory,
        h2: ___React$HTMLFactory,
        h3: ___React$HTMLFactory,
        h4: ___React$HTMLFactory,
        h5: ___React$HTMLFactory,
        h6: ___React$HTMLFactory,
        head: ___React$HTMLFactory,
        header: ___React$HTMLFactory,
        hr: ___React$HTMLFactory,
        html: ___React$HTMLFactory,
        i: ___React$HTMLFactory,
        iframe: ___React$HTMLFactory,
        img: ___React$HTMLFactory,
        input: ___React$HTMLFactory,
        ins: ___React$HTMLFactory,
        kbd: ___React$HTMLFactory,
        keygen: ___React$HTMLFactory,
        label: ___React$HTMLFactory,
        legend: ___React$HTMLFactory,
        li: ___React$HTMLFactory,
        link: ___React$HTMLFactory,
        main: ___React$HTMLFactory,
        map: ___React$HTMLFactory,
        mark: ___React$HTMLFactory,
        menu: ___React$HTMLFactory,
        menuitem: ___React$HTMLFactory,
        meta: ___React$HTMLFactory,
        meter: ___React$HTMLFactory,
        nav: ___React$HTMLFactory,
        noscript: ___React$HTMLFactory,
        object: ___React$HTMLFactory,
        ol: ___React$HTMLFactory,
        optgroup: ___React$HTMLFactory,
        option: ___React$HTMLFactory,
        output: ___React$HTMLFactory,
        p: ___React$HTMLFactory,
        param: ___React$HTMLFactory,
        picture: ___React$HTMLFactory,
        pre: ___React$HTMLFactory,
        progress: ___React$HTMLFactory,
        q: ___React$HTMLFactory,
        rp: ___React$HTMLFactory,
        rt: ___React$HTMLFactory,
        ruby: ___React$HTMLFactory,
        s: ___React$HTMLFactory,
        samp: ___React$HTMLFactory,
        script: ___React$HTMLFactory,
        section: ___React$HTMLFactory,
        select: ___React$HTMLFactory,
        small: ___React$HTMLFactory,
        source: ___React$HTMLFactory,
        span: ___React$HTMLFactory,
        strong: ___React$HTMLFactory,
        style: ___React$HTMLFactory,
        sub: ___React$HTMLFactory,
        summary: ___React$HTMLFactory,
        sup: ___React$HTMLFactory,
        table: ___React$HTMLFactory,
        tbody: ___React$HTMLFactory,
        td: ___React$HTMLFactory,
        textarea: ___React$HTMLFactory,
        tfoot: ___React$HTMLFactory,
        th: ___React$HTMLFactory,
        thead: ___React$HTMLFactory,
        time: ___React$HTMLFactory,
        title: ___React$HTMLFactory,
        tr: ___React$HTMLFactory,
        track: ___React$HTMLFactory,
        u: ___React$HTMLFactory,
        ul: ___React$HTMLFactory,
        var: ___React$HTMLFactory,
        video: ___React$HTMLFactory,
        wbr: ___React$HTMLFactory,
        svg: ___React$SVGElementFactory,
        circle: ___React$SVGFactory,
        defs: ___React$SVGFactory,
        ellipse: ___React$SVGFactory,
        g: ___React$SVGFactory,
        line: ___React$SVGFactory,
        linearGradient: ___React$SVGFactory,
        mask: ___React$SVGFactory,
        path: ___React$SVGFactory,
        pattern: ___React$SVGFactory,
        polygon: ___React$SVGFactory,
        polyline: ___React$SVGFactory,
        radialGradient: ___React$SVGFactory,
        rect: ___React$SVGFactory,
        stop: ___React$SVGFactory,
        symbol: ___React$SVGFactory,
        text: ___React$SVGFactory,
        tspan: ___React$SVGFactory,
        use: ___React$SVGFactory
}

declare interface ___React$Validator<T>{
    (object: T, key: string, componentName: string): Error
}

declare type ___React$Requireable<T>= {
    isRequired: ___React$Validator<T >
} & ___React$Validator


declare interface ___React$ValidationMap<T>{
    [key: string]: ___React$Validator<T >
}

declare interface ___React$ReactPropTypes {
    any: ___React$Requireable<any>,
        array: ___React$Requireable<any>,
        bool: ___React$Requireable<any>,
        func: ___React$Requireable<any>,
        number: ___React$Requireable<any>,
        object: ___React$Requireable<any>,
        string: ___React$Requireable<any>,
        node: ___React$Requireable<any>,
        element: ___React$Requireable<any>,
        instanceOf(expectedClass: {}): ___React$Requireable<any>,
        oneOf(types: any[]): ___React$Requireable<any>,
        oneOfType(types: ___React$Validator<any>[]): ___React$Requireable<any>,
        arrayOf(type: ___React$Validator<any>): ___React$Requireable<any>,
        objectOf(type: ___React$Validator<any>): ___React$Requireable<any>,
        shape(type: ___React$ValidationMap<any>): ___React$Requireable<any >
}

declare interface ___React$ReactChildren {
    map<T>(
            children: ___React$ReactNode,
            fn: (child: ___React$ReactChild, index: number) => T): {
            [key: string]: T
        },
        forEach(
            children: ___React$ReactNode,
            fn: (child: ___React$ReactChild, index: number) => any): void,
        count(children: ___React$ReactNode): number,
        only(children: ___React$ReactNode): ___React$ReactChild
}

declare interface ___React$AbstractView {
    styleMedia: StyleMedia,
        document: Document
}

declare interface ___React$Touch {
    identifier: number,
        target: EventTarget,
        screenX: number,
        screenY: number,
        clientX: number,
        clientY: number,
        pageX: number,
        pageY: number
}

declare interface ___React$TouchList {
    [index: number]: ___React$Touch,
    length: number,
        item(index: number): ___React$Touch,
        identifiedTouch(identifier: number): ___React$Touch
}
declare module 'react' {
    declare module.exports: typeof ___React
}
declare module 'react/addons' {
    declare type ReactType = ___React$ComponentClass<any>| string;
    declare interface ReactElement<P>{
        type: string | ___React$ComponentClass<P>,
        props: P,
        key: string | number,
        ref: string | ((component: ___React$Component<P, any>) => any)
    }
    declare type ClassicElement<P>= {
        type: string | ___React$ClassicComponentClass<P>,
        ref: string | ((component: ___React$ClassicComponent<P, any>) => any)
    } & ___React$ReactElement

    declare type DOMElement<P>= {
        type: string,
        ref: string | ((component: ___React$DOMComponent<P>) => any)
    } & ___React$ClassicElement

    declare type HTMLElement = ___React$DOMElement<___React$HTMLAttributes>;
    declare type SVGElement = ___React$DOMElement<___React$SVGAttributes>;
    declare interface Factory<P>{
        (props?: P, ...children: ___React$ReactNode[]): ___React$ReactElement<P >
    }
    declare type ClassicFactory<P>= {
        (props?: P, ...children: ___React$ReactNode[]): ___React$ClassicElement<P >
    } & ___React$Factory

    declare type DOMFactory<P>= {
        (props?: P, ...children: ___React$ReactNode[]): ___React$DOMElement<P >
    } & ___React$ClassicFactory

    declare type HTMLFactory = ___React$DOMFactory<___React$HTMLAttributes>;
    declare type SVGFactory = ___React$DOMFactory<___React$SVGAttributes>;
    declare type SVGElementFactory = ___React$DOMFactory<___React$SVGElementAttributes>;
    declare type ReactText = string | number;
    declare type ReactChild = ___React$ReactElement<any>| ___React$ReactText;
    declare type ReactFragment = {} | Array<___React$ReactChild | any[] | boolean>;
    declare type ReactNode = ___React$ReactChild | ___React$ReactFragment | boolean;
    declare function createClass<P, S>(spec: ___React$ComponentSpec<P, S>): ___React$ClassicComponentClass<P >
        declare function createFactory<P>(type: string): ___React$DOMFactory<P >
        declare function createElement<P>(
            type: string,
            props?: P,
            ...children: ___React$ReactNode[]): ___React$DOMElement<P >
        declare function cloneElement<P>(
            element: ___React$DOMElement<P>,
            props?: P,
            ...children: ___React$ReactNode[]): ___React$DOMElement<P >
        declare function render<P>(
            element: ___React$DOMElement<P>,
            container: JSX$Element,
            callback?: () => any): ___React$DOMComponent<P >
        declare function unmountComponentAtNode(container: JSX$Element): boolean
    declare function renderToString(element: ___React$ReactElement<any>): string
    declare function renderToStaticMarkup(element: ___React$ReactElement<any>): string
    declare function isValidElement(object: {}): boolean
    declare function initializeTouchEvents(shouldUseTouch: boolean): void
    declare function findDOMNode<TElement>(
        componentOrElement: ___React$Component<any, any>| JSX$Element): TElement
    declare var DOM: ___React$ReactDOM;
    declare var PropTypes: ___React$ReactPropTypes;
    declare var Children: ___React$ReactChildren;
    declare class Component<P, S>mixins ComponentLifecycle<P, S>{
        propTypes: ___React$ValidationMap<any>;
        contextTypes: ___React$ValidationMap<any>;
        childContextTypes: ___React$ValidationMap<any>;
        defaultProps: ___React$Props<any>;
        constructor(props?: P, context?: any): this;
        setState(f: (prevState: S, props: P) => S, callback?: () => any): void;
        setState(state: S, callback?: () => any): void;
        forceUpdate(callBack?: () => any): void;
        render(): JSX$Element;
        props: P;
        state: S;
        context: {};
        refs: {
            [key: string]: ___React$Component<any,
            any >
        }
    }
    declare type ClassicComponent<P, S>= {
        replaceState(nextState: S, callback?: () => any): void,
        getDOMNode<TElement>(): TElement,
        getDOMNode(): JSX$Element,
        isMounted(): boolean,
        getInitialState(): S,
        setProps(nextProps: P, callback?: () => any): void,
        replaceProps(nextProps: P, callback?: () => any): void
    } & ___React$Component

    declare type DOMComponent<P>= {
        tagName: string
    } & ___React$ClassicComponent

    declare type HTMLComponent = ___React$DOMComponent<___React$HTMLAttributes>;
    declare type SVGComponent = ___React$DOMComponent<___React$SVGAttributes>;
    declare interface ChildContextProvider<CC>{
        getChildContext(): CC
    }
    declare interface ComponentClass<P>{
        new(props?: P, context?: any): ___React$Component<P,
        any>,
        propTypes?: ___React$ValidationMap<P>,
        contextTypes?: ___React$ValidationMap<any>,
        childContextTypes?: ___React$ValidationMap<any>,
        defaultProps?: P
    }
    declare type ClassicComponentClass<P>= {
        new(props?: P, context?: any): ___React$ClassicComponent<P,
        any>,
        getDefaultProps(): P,
        displayName?: string
    } & ___React$ComponentClass

    declare interface ComponentLifecycle<P, S>{
        componentWillMount(): void,
        componentDidMount(): void,
        componentWillReceiveProps(nextProps: P, nextContext: any): void,
        shouldComponentUpdate(nextProps: P, nextState: S, nextContext: any): boolean,
        componentWillUpdate(nextProps: P, nextState: S, nextContext: any): void,
        componentDidUpdate(prevProps: P, prevState: S, prevContext: any): void,
        componentWillUnmount(): void
    }
    declare type Mixin<P, S>= {
        mixins?: ___React$Mixin<P,
        S>,
        statics?: {
            [key: string]: any
        },
        displayName?: string,
        propTypes?: ___React$ValidationMap<any>,
        contextTypes?: ___React$ValidationMap<any>,
        childContextTypes?: ___React$ValidationMap<any>,
        getDefaultProps(): P,
        getInitialState(): S
    } & ___React$ComponentLifecycle

    declare type ComponentSpec<P, S>= {
        render(): ___React$ReactElement<any>,
        [propertyName: string]: any
    } & ___React$Mixin

    declare interface SyntheticEvent {
        bubbles: boolean,
            cancelable: boolean,
            currentTarget: EventTarget,
            defaultPrevented: boolean,
            eventPhase: number,
            isTrusted: boolean,
            nativeEvent: Event,
            preventDefault(): void,
            stopPropagation(): void,
            target: EventTarget,
            timeStamp: Date,
            type: string
    }
    declare type DragEvent = {
        dataTransfer: DataTransfer
    } & ___React$SyntheticEvent

    declare type ClipboardEvent = {
        clipboardData: DataTransfer
    } & ___React$SyntheticEvent

    declare type KeyboardEvent = {
        altKey: boolean,
        charCode: number,
        ctrlKey: boolean,
        getModifierState(key: string): boolean,
        key: string,
        keyCode: number,
        locale: string,
        location: number,
        metaKey: boolean,
        repeat: boolean,
        shiftKey: boolean,
        which: number
    } & ___React$SyntheticEvent

    declare type FocusEvent = {
        relatedTarget: EventTarget
    } & ___React$SyntheticEvent

    declare type FormEvent = {} & ___React$SyntheticEvent

    declare type MouseEvent = {
        altKey: boolean,
        button: number,
        buttons: number,
        clientX: number,
        clientY: number,
        ctrlKey: boolean,
        getModifierState(key: string): boolean,
        metaKey: boolean,
        pageX: number,
        pageY: number,
        relatedTarget: EventTarget,
        screenX: number,
        screenY: number,
        shiftKey: boolean
    } & ___React$SyntheticEvent

    declare type TouchEvent = {
        altKey: boolean,
        changedTouches: ___React$TouchList,
        ctrlKey: boolean,
        getModifierState(key: string): boolean,
        metaKey: boolean,
        shiftKey: boolean,
        targetTouches: ___React$TouchList,
        touches: ___React$TouchList
    } & ___React$SyntheticEvent

    declare type UIEvent = {
        detail: number,
        view: ___React$AbstractView
    } & ___React$SyntheticEvent

    declare type WheelEvent = {
        deltaMode: number,
        deltaX: number,
        deltaY: number,
        deltaZ: number
    } & ___React$SyntheticEvent

    declare interface EventHandler<E>{
        (event: E): void
    }
    declare type DragEventHandler = {} & ___React$EventHandler

    declare type ClipboardEventHandler = {} & ___React$EventHandler

    declare type KeyboardEventHandler = {} & ___React$EventHandler

    declare type FocusEventHandler = {} & ___React$EventHandler

    declare type FormEventHandler = {} & ___React$EventHandler

    declare type MouseEventHandler = {} & ___React$EventHandler

    declare type TouchEventHandler = {} & ___React$EventHandler

    declare type UIEventHandler = {} & ___React$EventHandler

    declare type WheelEventHandler = {} & ___React$EventHandler

    declare interface Props<T>{
        children?: ___React$ReactNode,
        key?: string | number,
        ref?: string | ((component: T) => any)
    }
    declare type DOMAttributesBase<T>= {
        onCopy?: ___React$ClipboardEventHandler,
        onCut?: ___React$ClipboardEventHandler,
        onPaste?: ___React$ClipboardEventHandler,
        onKeyDown?: ___React$KeyboardEventHandler,
        onKeyPress?: ___React$KeyboardEventHandler,
        onKeyUp?: ___React$KeyboardEventHandler,
        onFocus?: ___React$FocusEventHandler,
        onBlur?: ___React$FocusEventHandler,
        onChange?: ___React$FormEventHandler,
        onInput?: ___React$FormEventHandler,
        onSubmit?: ___React$FormEventHandler,
        onClick?: ___React$MouseEventHandler,
        onContextMenu?: ___React$MouseEventHandler,
        onDoubleClick?: ___React$MouseEventHandler,
        onDrag?: ___React$DragEventHandler,
        onDragEnd?: ___React$DragEventHandler,
        onDragEnter?: ___React$DragEventHandler,
        onDragExit?: ___React$DragEventHandler,
        onDragLeave?: ___React$DragEventHandler,
        onDragOver?: ___React$DragEventHandler,
        onDragStart?: ___React$DragEventHandler,
        onDrop?: ___React$DragEventHandler,
        onMouseDown?: ___React$MouseEventHandler,
        onMouseEnter?: ___React$MouseEventHandler,
        onMouseLeave?: ___React$MouseEventHandler,
        onMouseMove?: ___React$MouseEventHandler,
        onMouseOut?: ___React$MouseEventHandler,
        onMouseOver?: ___React$MouseEventHandler,
        onMouseUp?: ___React$MouseEventHandler,
        onTouchCancel?: ___React$TouchEventHandler,
        onTouchEnd?: ___React$TouchEventHandler,
        onTouchMove?: ___React$TouchEventHandler,
        onTouchStart?: ___React$TouchEventHandler,
        onScroll?: ___React$UIEventHandler,
        onWheel?: ___React$WheelEventHandler,
        className?: string,
        id?: string,
        dangerouslySetInnerHTML?: {
            ___html: string
        }
    } & ___React$Props

    declare type DOMAttributes = {} & ___React$DOMAttributesBase

    declare interface CSSProperties {
        boxFlex?: number,
            boxFlexGroup?: number,
            columnCount?: number,
            flex?: number | string,
            flexGrow?: number,
            flexShrink?: number,
            fontWeight?: number | string,
            lineClamp?: number,
            lineHeight?: number | string,
            opacity?: number,
            order?: number,
            orphans?: number,
            widows?: number,
            zIndex?: number,
            zoom?: number,
            fontSize?: number | string,
            fillOpacity?: number,
            strokeOpacity?: number,
            strokeWidth?: number, [propertyName: string]: any
    }
    declare type HTMLAttributesBase<T>= {
        accept?: string,
        acceptCharset?: string,
        accessKey?: string,
        action?: string,
        allowFullScreen?: boolean,
        allowTransparency?: boolean,
        alt?: string,
        async?: boolean,
        autoComplete?: boolean,
        autoFocus?: boolean,
        autoPlay?: boolean,
        cellPadding?: number | string,
        cellSpacing?: number | string,
        charSet?: string,
        checked?: boolean,
        classID?: string,
        cols?: number,
        colSpan?: number,
        content?: string,
        contentEditable?: boolean,
        contextMenu?: string,
        controls?: any,
        coords?: string,
        crossOrigin?: string,
        data?: string,
        dateTime?: string,
        defaultChecked?: boolean,
        defaultValue?: string,
        defer?: boolean,
        dir?: string,
        disabled?: boolean,
        download?: any,
        draggable?: boolean,
        encType?: string,
        form?: string,
        formAction?: string,
        formEncType?: string,
        formMethod?: string,
        formNoValidate?: boolean,
        formTarget?: string,
        frameBorder?: number | string,
        headers?: string,
        height?: number | string,
        hidden?: boolean,
        high?: number,
        href?: string,
        hrefLang?: string,
        htmlFor?: string,
        httpEquiv?: string,
        icon?: string,
        label?: string,
        lang?: string,
        list?: string,
        loop?: boolean,
        low?: number,
        manifest?: string,
        marginHeight?: number,
        marginWidth?: number,
        max?: number | string,
        maxLength?: number,
        media?: string,
        mediaGroup?: string,
        method?: string,
        min?: number | string,
        multiple?: boolean,
        muted?: boolean,
        name?: string,
        noValidate?: boolean,
        open?: boolean,
        optimum?: number,
        pattern?: string,
        placeholder?: string,
        poster?: string,
        preload?: string,
        radioGroup?: string,
        readOnly?: boolean,
        rel?: string,
        required?: boolean,
        role?: string,
        rows?: number,
        rowSpan?: number,
        sandbox?: string,
        scope?: string,
        scoped?: boolean,
        scrolling?: string,
        seamless?: boolean,
        selected?: boolean,
        shape?: string,
        size?: number,
        sizes?: string,
        span?: number,
        spellCheck?: boolean,
        src?: string,
        srcDoc?: string,
        srcSet?: string,
        start?: number,
        step?: number | string,
        style?: ___React$CSSProperties,
        tabIndex?: number,
        target?: string,
        title?: string,
        type?: string,
        useMap?: string,
        value?: string,
        width?: number | string,
        wmode?: string,
        autoCapitalize?: boolean,
        autoCorrect?: boolean,
        property?: string,
        itemProp?: string,
        itemScope?: boolean,
        itemType?: string,
        unselectable?: boolean
    } & ___React$DOMAttributesBase

    declare type HTMLAttributes = {} & ___React$HTMLAttributesBase

    declare type SVGElementAttributes = {
        viewBox?: string,
        preserveAspectRatio?: string
    } & ___React$HTMLAttributes

    declare type SVGAttributes = {
        ref?: string | ((component: ___React$SVGComponent) => void),
        cx?: number | string,
        cy?: number | string,
        d?: string,
        dx?: number | string,
        dy?: number | string,
        fill?: string,
        fillOpacity?: number | string,
        fontFamily?: string,
        fontSize?: number | string,
        fx?: number | string,
        fy?: number | string,
        gradientTransform?: string,
        gradientUnits?: string,
        height?: number | string,
        markerEnd?: string,
        markerMid?: string,
        markerStart?: string,
        offset?: number | string,
        opacity?: number | string,
        patternContentUnits?: string,
        patternUnits?: string,
        points?: string,
        preserveAspectRatio?: string,
        r?: number | string,
        rx?: number | string,
        ry?: number | string,
        spreadMethod?: string,
        stopColor?: string,
        stopOpacity?: number | string,
        stroke?: string,
        strokeDasharray?: string,
        strokeLinecap?: string,
        strokeMiterlimit?: string,
        strokeOpacity?: number | string,
        strokeWidth?: number | string,
        textAnchor?: string,
        transform?: string,
        version?: string,
        viewBox?: string,
        width?: number | string,
        x1?: number | string,
        x2?: number | string,
        x?: number | string,
        y1?: number | string,
        y2?: number | string,
        y?: number | string
    } & ___React$DOMAttributes

    declare interface ReactDOM {
        a: ___React$HTMLFactory,
            abbr: ___React$HTMLFactory,
            address: ___React$HTMLFactory,
            area: ___React$HTMLFactory,
            article: ___React$HTMLFactory,
            aside: ___React$HTMLFactory,
            audio: ___React$HTMLFactory,
            b: ___React$HTMLFactory,
            base: ___React$HTMLFactory,
            bdi: ___React$HTMLFactory,
            bdo: ___React$HTMLFactory,
            big: ___React$HTMLFactory,
            blockquote: ___React$HTMLFactory,
            body: ___React$HTMLFactory,
            br: ___React$HTMLFactory,
            button: ___React$HTMLFactory,
            canvas: ___React$HTMLFactory,
            caption: ___React$HTMLFactory,
            cite: ___React$HTMLFactory,
            code: ___React$HTMLFactory,
            col: ___React$HTMLFactory,
            colgroup: ___React$HTMLFactory,
            data: ___React$HTMLFactory,
            datalist: ___React$HTMLFactory,
            dd: ___React$HTMLFactory,
            del: ___React$HTMLFactory,
            details: ___React$HTMLFactory,
            dfn: ___React$HTMLFactory,
            dialog: ___React$HTMLFactory,
            div: ___React$HTMLFactory,
            dl: ___React$HTMLFactory,
            dt: ___React$HTMLFactory,
            em: ___React$HTMLFactory,
            embed: ___React$HTMLFactory,
            fieldset: ___React$HTMLFactory,
            figcaption: ___React$HTMLFactory,
            figure: ___React$HTMLFactory,
            footer: ___React$HTMLFactory,
            form: ___React$HTMLFactory,
            h1: ___React$HTMLFactory,
            h2: ___React$HTMLFactory,
            h3: ___React$HTMLFactory,
            h4: ___React$HTMLFactory,
            h5: ___React$HTMLFactory,
            h6: ___React$HTMLFactory,
            head: ___React$HTMLFactory,
            header: ___React$HTMLFactory,
            hr: ___React$HTMLFactory,
            html: ___React$HTMLFactory,
            i: ___React$HTMLFactory,
            iframe: ___React$HTMLFactory,
            img: ___React$HTMLFactory,
            input: ___React$HTMLFactory,
            ins: ___React$HTMLFactory,
            kbd: ___React$HTMLFactory,
            keygen: ___React$HTMLFactory,
            label: ___React$HTMLFactory,
            legend: ___React$HTMLFactory,
            li: ___React$HTMLFactory,
            link: ___React$HTMLFactory,
            main: ___React$HTMLFactory,
            map: ___React$HTMLFactory,
            mark: ___React$HTMLFactory,
            menu: ___React$HTMLFactory,
            menuitem: ___React$HTMLFactory,
            meta: ___React$HTMLFactory,
            meter: ___React$HTMLFactory,
            nav: ___React$HTMLFactory,
            noscript: ___React$HTMLFactory,
            object: ___React$HTMLFactory,
            ol: ___React$HTMLFactory,
            optgroup: ___React$HTMLFactory,
            option: ___React$HTMLFactory,
            output: ___React$HTMLFactory,
            p: ___React$HTMLFactory,
            param: ___React$HTMLFactory,
            picture: ___React$HTMLFactory,
            pre: ___React$HTMLFactory,
            progress: ___React$HTMLFactory,
            q: ___React$HTMLFactory,
            rp: ___React$HTMLFactory,
            rt: ___React$HTMLFactory,
            ruby: ___React$HTMLFactory,
            s: ___React$HTMLFactory,
            samp: ___React$HTMLFactory,
            script: ___React$HTMLFactory,
            section: ___React$HTMLFactory,
            select: ___React$HTMLFactory,
            small: ___React$HTMLFactory,
            source: ___React$HTMLFactory,
            span: ___React$HTMLFactory,
            strong: ___React$HTMLFactory,
            style: ___React$HTMLFactory,
            sub: ___React$HTMLFactory,
            summary: ___React$HTMLFactory,
            sup: ___React$HTMLFactory,
            table: ___React$HTMLFactory,
            tbody: ___React$HTMLFactory,
            td: ___React$HTMLFactory,
            textarea: ___React$HTMLFactory,
            tfoot: ___React$HTMLFactory,
            th: ___React$HTMLFactory,
            thead: ___React$HTMLFactory,
            time: ___React$HTMLFactory,
            title: ___React$HTMLFactory,
            tr: ___React$HTMLFactory,
            track: ___React$HTMLFactory,
            u: ___React$HTMLFactory,
            ul: ___React$HTMLFactory,
            var: ___React$HTMLFactory,
            video: ___React$HTMLFactory,
            wbr: ___React$HTMLFactory,
            svg: ___React$SVGElementFactory,
            circle: ___React$SVGFactory,
            defs: ___React$SVGFactory,
            ellipse: ___React$SVGFactory,
            g: ___React$SVGFactory,
            line: ___React$SVGFactory,
            linearGradient: ___React$SVGFactory,
            mask: ___React$SVGFactory,
            path: ___React$SVGFactory,
            pattern: ___React$SVGFactory,
            polygon: ___React$SVGFactory,
            polyline: ___React$SVGFactory,
            radialGradient: ___React$SVGFactory,
            rect: ___React$SVGFactory,
            stop: ___React$SVGFactory,
            symbol: ___React$SVGFactory,
            text: ___React$SVGFactory,
            tspan: ___React$SVGFactory,
            use: ___React$SVGFactory
    }
    declare interface Validator<T>{
        (object: T, key: string, componentName: string): Error
    }
    declare type Requireable<T>= {
        isRequired: ___React$Validator<T >
    } & ___React$Validator

    declare interface ValidationMap<T>{
        [key: string]: ___React$Validator<T >
    }
    declare interface ReactPropTypes {
        any: ___React$Requireable<any>,
            array: ___React$Requireable<any>,
            bool: ___React$Requireable<any>,
            func: ___React$Requireable<any>,
            number: ___React$Requireable<any>,
            object: ___React$Requireable<any>,
            string: ___React$Requireable<any>,
            node: ___React$Requireable<any>,
            element: ___React$Requireable<any>,
            instanceOf(expectedClass: {}): ___React$Requireable<any>,
            oneOf(types: any[]): ___React$Requireable<any>,
            oneOfType(types: ___React$Validator<any>[]): ___React$Requireable<any>,
            arrayOf(type: ___React$Validator<any>): ___React$Requireable<any>,
            objectOf(type: ___React$Validator<any>): ___React$Requireable<any>,
            shape(type: ___React$ValidationMap<any>): ___React$Requireable<any >
    }
    declare interface ReactChildren {
        map<T>(
                children: ___React$ReactNode,
                fn: (child: ___React$ReactChild, index: number) => T): {
                [key: string]: T
            },
            forEach(
                children: ___React$ReactNode,
                fn: (child: ___React$ReactChild, index: number) => any): void,
            count(children: ___React$ReactNode): number,
            only(children: ___React$ReactNode): ___React$ReactChild
    }
    declare interface AbstractView {
        styleMedia: StyleMedia,
            document: Document
    }
    declare interface Touch {
        identifier: number,
            target: EventTarget,
            screenX: number,
            screenY: number,
            clientX: number,
            clientY: number,
            pageX: number,
            pageY: number
    }
    declare interface TouchList {
        [index: number]: ___React$Touch,
        length: number,
            item(index: number): ___React$Touch,
            identifiedTouch(identifier: number): ___React$Touch
    }
    declare module 'addons' {
        declare     export var CSSTransitionGroup: CSSTransitionGroup;
        declare     export var TransitionGroup: TransitionGroup;
        declare     export var LinkedStateMixin: LinkedStateMixin;
        declare     export var PureRenderMixin: PureRenderMixin;
        declare     export function batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void
        declare     export function classSet(cx: {
            [key: string]: boolean
        }): string
        declare     export function cloneWithProps<P>(element: ___React$DOMElement<P>, props: P): ___React$DOMElement<P >
            declare     export function createFragment(object: {
            [key: string]: ___React$ReactNode
        }): ___React$ReactFragment
        declare     export function update(value: any[], spec: UpdateArraySpec): any[]
    }

    declare interface TransitionGroupProps {
        component?: ___React$ReactType,
            childFactory?: (child: ___React$ReactElement<any>) => ___React$ReactElement<any >
    }
    declare type CSSTransitionGroupProps = {
        transitionName: string,
        transitionAppear?: boolean,
        transitionEnter?: boolean,
        transitionLeave?: boolean
    } & TransitionGroupProps

    declare type CSSTransitionGroup = ___React$ComponentClass<CSSTransitionGroupProps>;
    declare type TransitionGroup = ___React$ComponentClass<TransitionGroupProps>;
    declare interface ReactLink<T>{
        value: T,
        requestChange(newValue: T): void
    }
    declare type LinkedStateMixin = {
        linkState<T>(key: string): ReactLink<T >
    } & ___React$Mixin

    declare type PureRenderMixin = {} & ___React$Mixin

    declare interface UpdateSpecCommand {
        $set?: any,
            $merge?: {},
            $apply(value: any): any
    }
    declare interface UpdateSpecPath {
        [key: string]: UpdateSpec
    }
    declare type UpdateSpec = UpdateSpecCommand | UpdateSpecPath;
    declare type UpdateArraySpec = {
        $push?: any[],
        $unshift?: any[],
        $splice?: any[][]
    } & UpdateSpecCommand

    declare interface ComponentPerfContext {
        current: string,
            owner: string
    }
    declare interface NumericPerfContext {
        [key: string]: number
    }
    declare interface Measurements {
        exclusive: NumericPerfContext,
            inclusive: NumericPerfContext,
            render: NumericPerfContext,
            counts: NumericPerfContext,
            writes: NumericPerfContext,
            displayNames: {
                [key: string]: ComponentPerfContext
            },
            totalTime: number
    }

    declare var npm$namespace$ReactPerf: {
        start: typeof ReactPerf$start,
        stop: typeof ReactPerf$stop,
        printInclusive: typeof ReactPerf$printInclusive,
        printExclusive: typeof ReactPerf$printExclusive,
        printWasted: typeof ReactPerf$printWasted,
        printDOM: typeof ReactPerf$printDOM,
        getLastMeasurements: typeof ReactPerf$getLastMeasurements,
    }
    declare export function ReactPerf$start(): void

    declare export function ReactPerf$stop(): void

    declare export function ReactPerf$printInclusive(measurements: Measurements[]): void

    declare export function ReactPerf$printExclusive(measurements: Measurements[]): void

    declare export function ReactPerf$printWasted(measurements: Measurements[]): void

    declare export function ReactPerf$printDOM(measurements: Measurements[]): void

    declare export function ReactPerf$getLastMeasurements(): Measurements[]
    declare interface MockedComponentClass {
        new(): any
    }

    declare var npm$namespace$ReactTestUtils: {
        renderIntoDocument: typeof ReactTestUtils$renderIntoDocument,
        mockComponent: typeof ReactTestUtils$mockComponent,
        isElementOfType: typeof ReactTestUtils$isElementOfType,
        isTextComponent: typeof ReactTestUtils$isTextComponent,
        isDOMComponent: typeof ReactTestUtils$isDOMComponent,
        isCompositeComponent: typeof ReactTestUtils$isCompositeComponent,
        isCompositeComponentWithType: typeof ReactTestUtils$isCompositeComponentWithType,
        findAllInRenderedTree: typeof ReactTestUtils$findAllInRenderedTree,
        scryRenderedDOMComponentsWithClass: typeof ReactTestUtils$scryRenderedDOMComponentsWithClass,
        findRenderedDOMComponentWithClass: typeof ReactTestUtils$findRenderedDOMComponentWithClass,
        scryRenderedDOMComponentsWithTag: typeof ReactTestUtils$scryRenderedDOMComponentsWithTag,
        findRenderedDOMComponentWithTag: typeof ReactTestUtils$findRenderedDOMComponentWithTag,
        scryRenderedComponentsWithType: typeof ReactTestUtils$scryRenderedComponentsWithType,
        findRenderedComponentWithType: typeof ReactTestUtils$findRenderedComponentWithType,
        createRenderer: typeof ReactTestUtils$createRenderer,
    }
    declare export function ReactTestUtils$renderIntoDocument<P>(element: ___React$ReactElement<P>): ___React$Component<P, any >

        declare export function ReactTestUtils$mockComponent(mocked: MockedComponentClass, mockTagName?: string): typeof ReactTestUtils

    declare export function ReactTestUtils$isElementOfType(element: ___React$ReactElement<any>, type: ___React$ReactType): boolean

    declare export function ReactTestUtils$isTextComponent(instance: ___React$Component<any, any>): boolean

    declare export function ReactTestUtils$isDOMComponent(instance: ___React$Component<any, any>): boolean

    declare export function ReactTestUtils$isCompositeComponent(instance: ___React$Component<any, any>): boolean

    declare export function ReactTestUtils$isCompositeComponentWithType(
        instance: ___React$Component<any, any>,
        type: ___React$ComponentClass<any>): boolean

    declare export function ReactTestUtils$findAllInRenderedTree(
        tree: ___React$Component<any, any>,
        fn: (i: ___React$Component<any, any>) => boolean): ___React$Component<any, any >

        declare export function ReactTestUtils$scryRenderedDOMComponentsWithClass(
        tree: ___React$Component<any, any>,
        className: string): ___React$DOMComponent<any>[]

    declare export function ReactTestUtils$findRenderedDOMComponentWithClass(
        tree: ___React$Component<any, any>,
        className: string): ___React$DOMComponent<any >

        declare export function ReactTestUtils$scryRenderedDOMComponentsWithTag(
        tree: ___React$Component<any, any>,
        tagName: string): ___React$DOMComponent<any>[]

    declare export function ReactTestUtils$findRenderedDOMComponentWithTag(
        tree: ___React$Component<any, any>,
        tagName: string): ___React$DOMComponent<any >

        declare export function ReactTestUtils$scryRenderedComponentsWithType<P>(
        tree: ___React$Component<any, any>,
        type: ___React$ComponentClass<P>): ___React$Component<P, {}>[]

    declare export function ReactTestUtils$findRenderedComponentWithType<P>(
            tree: ___React$Component<any, any>,
            type: ___React$ComponentClass<P>): ___React$Component<P, {} >

        declare export function ReactTestUtils$createRenderer(): ShallowRenderer
    declare interface SyntheticEventData {
        altKey?: boolean,
            button?: number,
            buttons?: number,
            clientX?: number,
            clientY?: number,
            changedTouches?: ___React$TouchList,
            charCode?: boolean,
            clipboardData?: DataTransfer,
            ctrlKey?: boolean,
            deltaMode?: number,
            deltaX?: number,
            deltaY?: number,
            deltaZ?: number,
            detail?: number,
            getModifierState(key: string): boolean,
            key?: string,
            keyCode?: number,
            locale?: string,
            location?: number,
            metaKey?: boolean,
            pageX?: number,
            pageY?: number,
            relatedTarget?: EventTarget,
            repeat?: boolean,
            screenX?: number,
            screenY?: number,
            shiftKey?: boolean,
            targetTouches?: ___React$TouchList,
            touches?: ___React$TouchList,
            view?: ___React$AbstractView,
            which?: number
    }
    declare interface EventSimulator {
        (element: JSX$Element, eventData?: SyntheticEventData): void,
        (component: ___React$Component<any, any>, eventData?: SyntheticEventData): void
    }
    declare export var blur: EventSimulator;

    declare export var change: EventSimulator;

    declare export var click: EventSimulator;

    declare export var cut: EventSimulator;

    declare export var doubleClick: EventSimulator;

    declare export var drag: EventSimulator;

    declare export var dragEnd: EventSimulator;

    declare export var dragEnter: EventSimulator;

    declare export var dragExit: EventSimulator;

    declare export var dragLeave: EventSimulator;

    declare export var dragOver: EventSimulator;

    declare export var dragStart: EventSimulator;

    declare export var drop: EventSimulator;

    declare export var focus: EventSimulator;

    declare export var input: EventSimulator;

    declare export var keyDown: EventSimulator;

    declare export var keyPress: EventSimulator;

    declare export var keyUp: EventSimulator;

    declare export var mouseDown: EventSimulator;

    declare export var mouseEnter: EventSimulator;

    declare export var mouseLeave: EventSimulator;

    declare export var mouseMove: EventSimulator;

    declare export var mouseOut: EventSimulator;

    declare export var mouseOver: EventSimulator;

    declare export var mouseUp: EventSimulator;

    declare export var paste: EventSimulator;

    declare export var scroll: EventSimulator;

    declare export var submit: EventSimulator;

    declare export var touchCancel: EventSimulator;

    declare export var touchEnd: EventSimulator;

    declare export var touchMove: EventSimulator;

    declare export var touchStart: EventSimulator;

    declare export var wheel: EventSimulator;
    declare class ShallowRenderer {
        getRenderOutput<E>(): E;
        getRenderOutput(): ___React$ReactElement<any>;
        render(element: ___React$ReactElement<any>, context?: any): void;
        unmount(): void
    }
}
declare type JSX$Element = {}

declare type JSX$ElementClass = {
    render(): JSX$Element
}

declare interface JSX$ElementAttributesProperty {
    props: {}
}

declare interface JSX$IntrinsicElements {
    a: React.HTMLAttributes,
        abbr: React.HTMLAttributes,
        address: React.HTMLAttributes,
        area: React.HTMLAttributes,
        article: React.HTMLAttributes,
        aside: React.HTMLAttributes,
        audio: React.HTMLAttributes,
        b: React.HTMLAttributes,
        base: React.HTMLAttributes,
        bdi: React.HTMLAttributes,
        bdo: React.HTMLAttributes,
        big: React.HTMLAttributes,
        blockquote: React.HTMLAttributes,
        body: React.HTMLAttributes,
        br: React.HTMLAttributes,
        button: React.HTMLAttributes,
        canvas: React.HTMLAttributes,
        caption: React.HTMLAttributes,
        cite: React.HTMLAttributes,
        code: React.HTMLAttributes,
        col: React.HTMLAttributes,
        colgroup: React.HTMLAttributes,
        data: React.HTMLAttributes,
        datalist: React.HTMLAttributes,
        dd: React.HTMLAttributes,
        del: React.HTMLAttributes,
        details: React.HTMLAttributes,
        dfn: React.HTMLAttributes,
        dialog: React.HTMLAttributes,
        div: React.HTMLAttributes,
        dl: React.HTMLAttributes,
        dt: React.HTMLAttributes,
        em: React.HTMLAttributes,
        embed: React.HTMLAttributes,
        fieldset: React.HTMLAttributes,
        figcaption: React.HTMLAttributes,
        figure: React.HTMLAttributes,
        footer: React.HTMLAttributes,
        form: React.HTMLAttributes,
        h1: React.HTMLAttributes,
        h2: React.HTMLAttributes,
        h3: React.HTMLAttributes,
        h4: React.HTMLAttributes,
        h5: React.HTMLAttributes,
        h6: React.HTMLAttributes,
        head: React.HTMLAttributes,
        header: React.HTMLAttributes,
        hr: React.HTMLAttributes,
        html: React.HTMLAttributes,
        i: React.HTMLAttributes,
        iframe: React.HTMLAttributes,
        img: React.HTMLAttributes,
        input: React.HTMLAttributes,
        ins: React.HTMLAttributes,
        kbd: React.HTMLAttributes,
        keygen: React.HTMLAttributes,
        label: React.HTMLAttributes,
        legend: React.HTMLAttributes,
        li: React.HTMLAttributes,
        link: React.HTMLAttributes,
        main: React.HTMLAttributes,
        map: React.HTMLAttributes,
        mark: React.HTMLAttributes,
        menu: React.HTMLAttributes,
        menuitem: React.HTMLAttributes,
        meta: React.HTMLAttributes,
        meter: React.HTMLAttributes,
        nav: React.HTMLAttributes,
        noscript: React.HTMLAttributes,
        object: React.HTMLAttributes,
        ol: React.HTMLAttributes,
        optgroup: React.HTMLAttributes,
        option: React.HTMLAttributes,
        output: React.HTMLAttributes,
        p: React.HTMLAttributes,
        param: React.HTMLAttributes,
        picture: React.HTMLAttributes,
        pre: React.HTMLAttributes,
        progress: React.HTMLAttributes,
        q: React.HTMLAttributes,
        rp: React.HTMLAttributes,
        rt: React.HTMLAttributes,
        ruby: React.HTMLAttributes,
        s: React.HTMLAttributes,
        samp: React.HTMLAttributes,
        script: React.HTMLAttributes,
        section: React.HTMLAttributes,
        select: React.HTMLAttributes,
        small: React.HTMLAttributes,
        source: React.HTMLAttributes,
        span: React.HTMLAttributes,
        strong: React.HTMLAttributes,
        style: React.HTMLAttributes,
        sub: React.HTMLAttributes,
        summary: React.HTMLAttributes,
        sup: React.HTMLAttributes,
        table: React.HTMLAttributes,
        tbody: React.HTMLAttributes,
        td: React.HTMLAttributes,
        textarea: React.HTMLAttributes,
        tfoot: React.HTMLAttributes,
        th: React.HTMLAttributes,
        thead: React.HTMLAttributes,
        time: React.HTMLAttributes,
        title: React.HTMLAttributes,
        tr: React.HTMLAttributes,
        track: React.HTMLAttributes,
        u: React.HTMLAttributes,
        ul: React.HTMLAttributes,
        var: React.HTMLAttributes,
        video: React.HTMLAttributes,
        wbr: React.HTMLAttributes,
        svg: React.SVGElementAttributes,
        circle: React.SVGAttributes,
        defs: React.SVGAttributes,
        ellipse: React.SVGAttributes,
        g: React.SVGAttributes,
        line: React.SVGAttributes,
        linearGradient: React.SVGAttributes,
        mask: React.SVGAttributes,
        path: React.SVGAttributes,
        pattern: React.SVGAttributes,
        polygon: React.SVGAttributes,
        polyline: React.SVGAttributes,
        radialGradient: React.SVGAttributes,
        rect: React.SVGAttributes,
        stop: React.SVGAttributes,
        text: React.SVGAttributes,
        tspan: React.SVGAttributes
}