/**
 * Flowtype definitions for morgan
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'morgan' {

    declare var npm$namespace$morgan: {
        token: typeof morgan$token,
        format: typeof morgan$format,
        compile: typeof morgan$compile,
    }
    declare export type morgan$FormatFn = {
        (tokens: morgan$TokenIndexer, req: express.Request, res: express.Response): string
    } & Function


    declare export type morgan$TokenCallbackFn = {
        (req: express.Request, res: express.Response, arg?: string | number | boolean): string
    } & Function


    declare export interface morgan$TokenIndexer {
        [tokenName: string]: morgan$TokenCallbackFn
    }


    /**
     * Public interface of morgan logger
     */
    declare export interface morgan$Morgan {
        (format: string, options?: morgan$Options): express.RequestHandler,
            (format: "combined", options?: morgan$Options): express.RequestHandler,
            (format: "common", options?: morgan$Options): express.RequestHandler,

            /**
             * Concise output colored by response status for development use. The :status token will be colored red for server error codes, yellow for client error codes, cyan for redirection codes, and uncolored for all other codes.
             * :method :url :status :response-time ms - :res[content-length]
             * @param format 
             * @param options 
             */
            (format: "dev", options?: morgan$Options): express.RequestHandler,
            (format: "short", options?: morgan$Options): express.RequestHandler,
            (format: "tiny", options?: morgan$Options): express.RequestHandler,
            (format: morgan$FormatFn, options?: morgan$Options): express.RequestHandler,

            /**
             * Define a custom token which can be used in custom morgan logging formats.
             */
            token(name: string, callback: morgan$TokenCallbackFn): morgan$Morgan,

            /**
             * Define a named custom format by specifying a format string in token notation
             */
            format(name: string, fmt: string): morgan$Morgan,

            /**
             * Define a named custom format by specifying a format function
             */
            format(name: string, fmt: morgan$FormatFn): morgan$Morgan,

            /**
             * Compile a format string in token notation into a format function
             */
            compile(format: string): morgan$FormatFn
    }


    /**
     * Define a custom token which can be used in custom morgan logging formats.
     */
    declare export function morgan$token(name: string, callback: morgan$TokenCallbackFn): morgan$Morgan


    /**
     * Define a named custom format by specifying a format string in token notation
     */
    declare export function morgan$format(name: string, fmt: string): morgan$Morgan


    /**
     * Compile a format string in token notation into a format function
     */
    declare export function morgan$compile(format: string): morgan$FormatFn

    declare export interface morgan$StreamOptions {

        /**
         * Output stream for writing log lines
         */
        write: (str: string) => void
    }

    declare export interface morgan$Options {
        buffer?: boolean,
            immediate?: boolean,
            skip?: (req: express.Request, res: express.Response) => boolean,
            stream?: morgan$StreamOptions
    }
    declare module.exports: typeof morgan
}