// @flow
/**
 * Flowtype definitions for ngmap
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ngmap' {
    declare     var _: string;
    declare module.exports: typeof _
}
declare module 'map' {
    declare interface IGetMapOptions {
        id?: string,
            timeout?: number
    }
    declare interface INgMapOptions {
        marker: {

            /**
             * The offset from the marker's position to the tip of an InfoWindow
             * that has been opened with the marker as anchor.
             */
            anchorPoint?: undefined.Point,

            /**
             * Which animation to play when marker is added to a map. 
             */
            animation?: undefined.Animation,

            /**
             * If true, the marker receives mouse and touch events.
             * @default  true
             */
            clickable?: boolean,

            /**
             * Mouse cursor to show on hover. 
             */
            cursor?: string,

            /**
             * If true, the marker can be dragged.
             * @default  false
             */
            draggable?: boolean,

            /**
             * Icon for the foreground.
             * If a string is provided, it is treated as though it were an Icon with the string as url.
             * @type  
             */
            icon?: string | undefined.Icon | undefined.Symbol,

            /**
             * Adds a label to the marker. The label can either be a string, or a MarkerLabel object. 
             * Only the first character of the string will be displayed.
             * @type  
             */
            label?: string,

            /**
             * Map on which to display Marker.
             * @type  *
             */
            map?: undefined.Map | undefined.StreetViewPanorama,

            /**
             * The marker's opacity between 0.0 and 1.0. 
             */
            opacity?: number,

            /**
             * Optimization renders many markers as a single static element.
             * Optimized rendering is enabled by default.
            Disable optimized rendering for animated GIFs or PNGs, or when each
            marker must be rendered as a separate DOM element (advanced usage
            only).
            */
            optimized?: boolean,

            /**
             * Image map region definition used for drag/click. 
             */
            shape?: undefined.MarkerShape,

            /**
             * Rollover text. 
             */
            title?: string,

            /**
             * If true, the marker is visible. 
             */
            visible?: boolean,

            /**
             * All markers are displayed on the map in order of their zIndex,
             * with higher values displaying in front of markers with lower values.
            By default, markers are displayed according to their vertical position on screen,
            with lower markers appearing in front of markers further up the screen.
            */
            zIndex?: number
        }
    }
    declare interface IObserveAndSetFunc {
        (val: any): void
    }
    declare interface INgMap {

        /**
         * Add map to pool
         * @param  Map controller
         */
        addMap(mapCtrl: Function | any[]): void,

            /**
             * Delete map from pool
             * @param  Map controller optional. Defaults to last 
            controller in pool
            */
            deleteMap(mapCtrl?: Function | any[]): void,

            /**
             * Get map coordinates from address.
             * @param  Use 'current' to get users location
             * @param  optional
             * @return  <google.maps.LatLng>}         Latitude ang longitude of the address
             */
            getGeoLocation(address: string, options?: PositionOptions): angular$IPromise<undefined.LatLng>,

            /**
             * Get map from the pool of all shown maps.
             * @param  optional
             * @return  <google.maps.Map>}         promise
             */
            getMap(options?: IGetMapOptions): angular$IPromise<undefined.Map>,

            /**
             * Initialize map from mapId or the current first shown map
             * @param  id of the map. default 0
             * @return  map
             */
            initMap(mapId?: string): undefined.Map,

            /**
             * Observe attribute
             * @param  attribute name
             * @param  a Google maps object to be changed
             * @return  attribute obvserve function
             */
            observeAndSet(attrName: string, object: Object): IObserveAndSetFunc,

            /**
             * Set display, width, height of map container element
             * @param  map container element
             */
            setStyle(el: HTMLElement): void
    }
    declare interface INgMapProvider {

        /**
         * 
         * @param  
         * @example  *  app.config(function(NgMapProvider) {
        NgMapProvider.setDefaultOptions({
        marker: {
        optimized: false
        }
        });
        });
        */
        setDefaultOptions(options: INgMapOptions): void
    }
}