// @flow
/**
 * Flowtype definitions for gridstack
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JQuery {
    gridstack(options: IGridstackOptions): GridStack
}
declare interface GridStack {

    /**
     * Creates new widget and returns it.
     * 
       Widget will be always placed even if result height is more than actual grid height. You need to use willItFit method before calling addWidget for additional check.
     * @param  widget to add
     * @param  widget position x
     * @param  widget position y
     * @param  widget dimension width
     * @param  widget dimension height
     * @param  if true then x, y parameters will be ignored and widget will be places on the first available position
    */
    addWidget(
            el: string,
            x: number,
            y: number,
            width: number,
            height: number,
            autoPosition: boolean): JQuery,

        /**
         * Initializes batch updates. You will see no changes until commit method is called.
         */
        batchUpdate(): void,

        /**
         * Gets current cell height.
         */
        cellHeight(): number,

        /**
         * Update current cell height. This method rebuilds an internal CSS style sheet. Note: You can expect performance issues if call this method too often.
         * @param  the cell height
         */
        cellHeight(val: number): void,

        /**
         * Gets current cell width.
         */
        cellWidth(): number,

        /**
         * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.
         */
        commit(): void,

        /**
         * Destroys a grid instance.
         */
        destroy(): void,
        disable(): void,
        enable(): void,
        getCellFromPixel(position: MousePosition): CellPosition,
        isAreaEmpty(x: number, y: number, width: number, height: number): void,
        locked(el: HTMLElement, val: boolean): void,
        minWidth(el: HTMLElement, val: number): void,
        minHeight(el: HTMLElement, val: number): void,
        movable(el: HTMLElement, val: boolean): void,

        /**
         * Changes widget position
         * @param  widget to modify
         * @param  new position x. If value is null or undefined it will be ignored.
         * @param  new position y. If value is null or undefined it will be ignored.
         */
        move(el: HTMLElement, x: number, y: number): void,

        /**
         * Removes widget from the grid.
         * @param  widget to modify
         * @param  if false DOM node won't be removed from the tree (Optional. Default true).
         */
        removeWidget(el: HTMLElement, detachNode?: boolean): void,

        /**
         * Removes all widgets from the grid.
         */
        removeAll(): void,

        /**
         * Changes widget size
         * @param  widget to modify
         * @param  new dimensions width. If value is null or undefined it will be ignored.
         * @param  new dimensions height. If value is null or undefined it will be ignored.
         */
        resize(el: HTMLElement, width: number, height: number): void,

        /**
         * Enables/Disables resizing.
         * @param  widget to modify
         * @param  if true widget will be resizable.
         */
        resizable(el: HTMLElement, val: boolean): void,

        /**
         * Toggle the grid static state. Also toggle the grid-stack-static class.
         * @param  if true the grid become static.
         */
        setStatic(staticValue: boolean): void,

        /**
         * Updates widget position/size.
         * @param  widget to modify
         * @param  new position x. If value is null or undefined it will be ignored.
         * @param  new position y. If value is null or undefined it will be ignored.
         * @param  new dimensions width. If value is null or undefined it will be ignored.
         * @param  new dimensions height. If value is null or undefined it will be ignored.
         */
        update(el: HTMLElement, x: number, y: number, width: number, height: number): void,

        /**
         * Returns true if the height of the grid will be less the vertical constraint. Always returns true if grid doesn't have height constraint.
         * @param  new position x. If value is null or undefined it will be ignored.
         * @param  new position y. If value is null or undefined it will be ignored.
         * @param  new dimensions width. If value is null or undefined it will be ignored.
         * @param  new dimensions height. If value is null or undefined it will be ignored.
         * @param  if true then x, y parameters will be ignored and widget will be places on the first available position
         */
        willItFit(
            x: number,
            y: number,
            width: number,
            height: number,
            autoPosition: boolean): boolean
}
/**
 * Defines the coordiantes of a object
 */
declare interface MousePosition {
    top: number,
        left: number
}
/**
 * Defines the position of a cell inside the grid
 */
declare interface CellPosition {
    x: number,
        y: number
}
declare interface GridStackUI$Utils {

    /**
     * Sorts array of nodes
     * @param nodes array to sort
     * @param dir 1 for asc, -1 for desc (optional)
     * @param width width of the grid. If undefined the width will be calculated automatically (optional).
     */
    sort(nodes: HTMLElement[], dir: number, width: number): void
}
/**
 * Gridstack Options
 * Defines the options for a Gridstack
 */
declare interface IGridstackOptions {

    /**
     * if true the resizing handles are shown even if the user is not hovering over the widget (default: false)
     */
    alwaysShowResizeHandle: boolean,

        /**
         * turns animation on (default: true)
         */
        animate: boolean,

        /**
         * if false gridstack will not initialize existing items (default: true)
         */
        auto: boolean,

        /**
         * one cell height (default: 60)
         */
        cellHeight: number,

        /**
         * allows to override jQuery UI draggable options. (default: { handle: '.grid-stack-item-content', scroll: true, appendTo: 'body' })
         */
        draggable: {},

        /**
         * draggable handle selector (default: '.grid-stack-item-content')
         */
        handle: string,

        /**
         * maximum rows amount.Default is 0 which means no maximum rows
         */
        height: number,

        /**
         * enable floating widgets (default: false) See example
         */
        float: boolean,

        /**
         * widget class (default: 'grid-stack-item')
         */
        itemClass: string,

        /**
         * minimal width.If window width is less, grid will be shown in one - column mode (default: 768)
         */
        minWidth: number,

        /**
         * class for placeholder (default: 'grid-stack-placeholder')
         */
        placeholderClass: string,

        /**
         * allows to override jQuery UI resizable options. (default: { autoHide: true, handles: 'se' })
         */
        resizable: {},

        /**
         * makes grid static (default false).If true widgets are not movable/ resizable.You don't even need jQueryUI draggable/resizable. A CSS class grid-stack-static is also added to the container.
         */
        staticGrid: boolean,

        /**
         * vertical gap size (default: 20)
         */
        verticalMargin: number,

        /**
         * amount of columns (default: 12)
         */
        width: number
}