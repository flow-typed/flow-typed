/**
 * Flowtype definitions for i18n-node
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$i18n: {
    configure: typeof i18n$configure,
    init: typeof i18n$init,
    ___: typeof i18n$___,
    ___n: typeof i18n$___n,
    setLocale: typeof i18n$setLocale,
    getLocale: typeof i18n$getLocale,
    getCatalog: typeof i18n$getCatalog,
    overrideLocaleFromQuery: typeof i18n$overrideLocaleFromQuery,
}
declare
export interface i18n$ConfigurationOptions {

    /**
     * Setup some locales - other locales default to en silently 
     */
    locales?: string[],

        /**
         * Alter a site wide default locale 
         */
        defaultLocale?: string,

        /**
         * Sets a custom cookie name to parse locale settings from
         * @default  null
         */
        cookie?: string,

        /**
         * Where to store json files, relative to modules directory
         * @default  "./locales"
         */
        directory?: string,

        /**
         * whether to write new locale information to disk
         * @default  true
         */
        updateFiles?: boolean,

        /**
         * What to use as the indentation unit
         * @default  "\t"
         */
        indent?: string,

        /**
         * Setting extension of json files (you might want to set this to '.js' according to webtranslateit)
         * @default  ".json"
         */
        extension?: string,

        /**
         * Enable object notation
         * @default  false
         */
        objectNotation?: boolean,

        /**
         * json files prefix
         */
        prefix?: string,

        /**
         * object or [obj1, obj2] to bind the i18n api and current locale to - defaults to null
         */
        register?: any
}

declare
export interface i18n$TranslateOptions {
    phrase: string,
        locale?: string
}

declare
export interface i18n$PluralOptions {
    singular: string,
        plural: string,
        count?: number,
        locale?: string
}

declare
export interface i18n$Replacements {
    [key: string]: string
}

declare
export interface i18n$LocaleCatalog {
    [key: string]: string
}

declare
export interface i18n$GlobalCatalog {
    [key: string]: i18n$LocaleCatalog
}


/**
 * Configure current i18n instance
 * @param  - configuration options for i18n
 */
declare
function i18n$configure(options: i18n$ConfigurationOptions): void


/**
 * Initialize i18n middleware for express
 * @param  - Current express request
 * @param  - Current express response
 * @param  - Callback to continue process
 */
declare
function i18n$init(request: Express$Request, response: Express$Response, next?: Function): void


/**
 * Translate the given phrase using locale configuration
 * @param  - The phrase to translate
 * @returns  The translated phrase
 */
declare
function i18n$___(phrase: string, ...replace: string[]): string


/**
 * Translate with plural condition the given phrase and count using locale configuration
 * @param  - Options for plural translate
 * @returns  The translated phrase
 */
declare
function i18n$___n(options: i18n$PluralOptions): string


/**
 * Change the current active locale
 * @param  - The locale to set as default
 */
declare
function i18n$setLocale(locale: string): void


/**
 * Get the current active locale
 * @returns  The current locale in request
 */
declare
function i18n$getLocale(): string


/**
 * Get the current global catalog
 * @returns  The current global catalog
 */
declare
function i18n$getCatalog(): i18n$GlobalCatalog


/**
 * Override the current request locale by using the query param (?locale=en)
 * @param  - The request to override locale for
 */
declare
function i18n$overrideLocaleFromQuery(request?: Express$Request): void

declare
var version: string;
declare interface i18nAPI {
    locale: string,

        /**
         * Translate the given phrase using locale configuration
         * @param  - The phrase to translate
         * @returns  The translated phrase
         */
        ___(phrase: string, ...replace: string[]): string,

        /**
         * Translate the given phrase using locale configuration
         * @param  - The phrase to translate
         * @param  - An object containing replacements
         * @returns  The translated phrase
         */
        ___(phrase: string, replacements: i18n$Replacements): string,

        /**
         * Translate the given phrase using locale configuration
         * @param  - Options for translation
         * @returns  The translated phrase
         */
        ___(options: i18n$TranslateOptions): string,

        /**
         * Translate the given phrase using locale configuration
         * @param  - Options for translation
         * @returns  The translated phrase
         */
        ___(options: i18n$TranslateOptions, ...replace: string[]): string,

        /**
         * Translate the given phrase using locale configuration
         * @param  - Options for translation
         * @param  - An object containing replacements
         * @returns  The translated phrase
         */
        ___(options: i18n$TranslateOptions, replacements: i18n$Replacements): string,

        /**
         * Translate with plural condition the given phrase and count using locale configuration
         * @param  - Options for plural translate
         * @returns  The translated phrase
         */
        ___n(options: i18n$PluralOptions): string,

        /**
         * Translate with plural condition the given phrase and count using locale configuration
         * @param  - Options for plural translate
         * @param  - The number which allow to select from plural to singular
         * @returns  The translated phrase
         */
        ___n(options: i18n$PluralOptions, count: number): string,

        /**
         * Translate with plural condition the given phrase and count using locale configuration
         * @param  - The singular pharse to translate if count is <= 1
         * @param  - The plural pharse to translate if count is>1
         * @param  - The number which allow to select from plural to singular
         * @returns  The translated phrase
         */
        ___n(singular: string, plural: string, count: number): string,

        /**
         * Translate with plural condition the given phrase and count using locale configuration
         * @param  - The singular pharse to translate if count is <= 1
         * @param  - The plural pharse to translate if count is>1
         * @param  - The number which allow to select from plural to singular
         * @returns  The translated phrase
         */
        ___n(singular: string, plural: string, count: string): string,

        /**
         * Get the current active locale
         * @returns  The current locale in request
         */
        getLocale(): string,

        /**
         * Change the current active locale
         * @param  - The locale to set as default
         */
        setLocale(locale: string): void,

        /**
         * Get the current global catalog
         * @returns  The current global catalog
         */
        getCatalog(): i18n$GlobalCatalog,

        /**
         * Get the catalog for the given locale
         * @param  - The locale to get catalog for
         * @returns  The specified locale catalog
         */
        getCatalog(locale: string): i18n$LocaleCatalog
}
declare module 'i18n' {
    declare module.exports: typeof i18n
}
declare
export type Express$Request = {
    languages: string[],
    regions: string[],
    language: string,
    region: string
} & i18nAPI


declare
export type Express$Response = {
    locals: i18nAPI
} & i18nAPI