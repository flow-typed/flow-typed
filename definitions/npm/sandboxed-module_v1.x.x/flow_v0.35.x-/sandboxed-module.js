/**
 * Flowtype definitions for sandboxed-module
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'sandboxed-module' {
    declare interface SandboxOptions {

        /**
         * An object containing moduleIds and the values to inject for them when required by the sandboxed module.
         * This does not affect children of the sandboxed module.
         */
        requires?: Object,

            /**
             * An object of global variables to inject into the sandboxed module.
             */
            globals?: Object,

            /**
             * An object of local variables to inject into the sandboxed module.
             */
            locals?: Object,

            /**
             * An object of named functions which will transform the source code required with SandboxedModule.require.
             * For example, CoffeeScript & istanbul support is implemented with built-in sourceTransformer functions
            (see #registerBuiltInSourceTransformer).

            A source transformer receives the source (as it's been transformed thus far) and must return the transformed
            source (whether it's changed or unchanged).

            An example source transformer to change all instances of the number "3" to "5" would look like this:

            SandboxedModule.require('../fixture/baz', {
               sourceTransformers: {
                 turn3sInto5s: function(source) {
                   return source.replace(/3/g,'5');
                 }
               }
            })
            */
            sourceTransformers?: Object,

            /**
             * If false, modules that are required by the sandboxed module will not be sandboxed. By default all modules
             * required by the sandboxedModule will be sandboxed using the same options that were used for the original
            sandboxed module.
            */
            singleOnly?: boolean,

            /**
             * If false, the source transformers will not be run against modules required by the sandboxed module.
             * By default it will take the same value as {@link SandboxOptions.singleOnly}.
             */
            sourceTransformersSingleOnly?: boolean
    }
    declare module.exports: typeof SandboxedModule
}