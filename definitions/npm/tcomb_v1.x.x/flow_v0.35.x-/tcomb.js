// @flow
/**
 * Flowtype definitions for tcomb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$TComb: {
    list: typeof TComb$list,
}
declare export interface TComb$tcomb {
    format: (format: string, ...values: any[]) => string,
        getFunctionName: (fn: Function) => string,
        getTypeName: (type: TComb$TCombBase) => string,
        mixin: (target: {}, source: {}, overwrite?: boolean) => any,
        slice: typeof undefined,
        shallowCopy: (x: TComb$TCombBase) => TComb$TCombBase,
        update: (instance: any, spec: {}) => TComb$TCombBase,
        assert: (condition: boolean, message?: string, ...values: any[]) => void,
        fail: (message?: string) => void,
        Any: TComb$Any_Static,
        Nil: TComb$Nil_Static,
        Str: TComb$Str_Static,
        Num: TComb$Num_Static,
        Bool: TComb$Bool_Static,
        Arr: TComb$Arr_Static,
        Obj: TComb$Obj_Static,
        Func: TComb$Func_Static,
        func: {
            (domain: TComb$TCombBase[], codomain: TComb$TCombBase, name?: string): TComb$Func_Static,
            (domain: TComb$TCombBase, codomain: TComb$TCombBase, name?: string): TComb$Func_Static
        },
        Err: TComb$Err_Static,
        Re: TComb$Re_Static,
        Dat: TComb$Dat_Static,
        Type: TComb$Type_Static,
        irreducible: (name: string, is: TComb$TypePredicate) => TComb$TCombBase,
        struct: (props: Object, name?: string) => TComb$Struct_Static,
        Union: TComb$Union_Static,
        Maybe: TComb$Maybe_Static,
        enums(map: Object, name?: string): TComb$TCombBase,
        union(types: TComb$TCombBase[], name?: string): TComb$Union_Static,
        maybe(type: TComb$TCombBase, name?: string): TComb$Maybe_Static,
        Tuple: TComb$Tuple_Static,
        tuple: (types: TComb$TCombBase[], name?: string) => TComb$Tuple_Static,
        Subtype: TComb$Subtype_Static,
        List: TComb$List_Static,
        list: (type: TComb$TCombBase, name?: string) => TComb$List_Static,
        Dict: TComb$Dict_Static,
        dict: (
            domain: TComb$TCombBase,
            codomain: TComb$TCombBase,
            name?: string) => TComb$Dict_Static,
        subtype(
            type: TComb$TCombBase,
            predicate: TComb$TypePredicate,
            name?: string): TComb$Subtype_Static
}

declare export interface TComb$TCombBase {
    meta: {

            /**
             * The type kind, equal to "irreducible" for irreducible types.
             */
            kind: string,

            /**
             * The type name.
             */
            name: string
        },
        displayName: string,
        is(value: any): boolean,
        update(instance: any, spec: {}): TComb$TCombBase
}

declare export interface TComb$TypePredicate {
    (x: any): TComb$Bool_Instance
}

declare export interface TComb$Any_Instance {}

declare export type TComb$Any_Static = {
    new(value: any): TComb$Any_Instance,
    (value: any): TComb$Any_Instance
} & TComb$TCombBase


declare export interface TComb$Nil_Instance {}

declare export type TComb$Nil_Static = {
    new(value: any): TComb$Nil_Instance,
    (value: any): TComb$Nil_Instance
} & TComb$TCombBase


declare export type TComb$Str_Instance = {} & String


declare export type TComb$Str_Static = {
    new(value: string): TComb$Str_Instance,
    (value: string): TComb$Str_Instance,
    meta: {

        /**
         * The type kind, equal to "irreducible" for irreducible types.
         */
        kind: string,

        /**
         * The type name.
         */
        name: string,

        /**
         * The type predicate.
         */
        is: TComb$TypePredicate
    }
} & TComb$TCombBase


declare export type TComb$Num_Instance = {} & Number


declare export type TComb$Num_Static = {
    new(value: number): TComb$Num_Instance,
    (value: number): TComb$Num_Instance
} & TComb$TCombBase


declare export type TComb$Bool_Instance = {} & Boolean


declare export type TComb$Bool_Static = {
    new(value: boolean): TComb$Bool_Instance,
    (value: boolean): TComb$Bool_Instance
} & TComb$TCombBase


declare export type TComb$Arr_Instance = {} & Array


declare export type TComb$Arr_Static = {
    new(value: any[]): TComb$Arr_Instance,
    (value: any[]): TComb$Arr_Instance
} & TComb$TCombBase


declare export type TComb$Obj_Instance = {} & Object


declare export type TComb$Obj_Static = {
    new(value: Object): TComb$Obj_Instance,
    (value: Object): TComb$Obj_Instance
} & TComb$TCombBase


declare export type TComb$Func_Instance = {} & Function


declare export type TComb$Func_Static = {
    new(value: Function): TComb$Func_Instance,
    (value: Function): TComb$Func_Instance
} & TComb$TCombBase


declare export type TComb$Err_Instance = {} & Error


declare export type TComb$Err_Static = {
    new(value: Error): TComb$Err_Instance,
    (value: Error): TComb$Err_Instance
} & TComb$TCombBase


declare export type TComb$Re_Instance = {} & RegExp


declare export type TComb$Re_Static = {
    new(value: RegExp): TComb$Re_Instance,
    (value: RegExp): TComb$Re_Instance
} & TComb$TCombBase


declare export type TComb$Dat_Instance = {} & Date


declare export type TComb$Dat_Static = {
    new(value: Date): TComb$Dat_Instance,
    (value: Date): TComb$Dat_Instance
} & TComb$TCombBase


declare export interface TComb$Type_Instance {}

declare export type TComb$Type_Static = {
    new(value: any): TComb$Type_Instance,
    (value: any): TComb$Type_Instance
} & TComb$TCombBase



/**
 * 
 * @param name - The type name.
 * @param is - A predicate.
 * @param props - A hash whose keys are the field names and the values are the fields types.
 * @param name - Useful for debugging purposes.
 */
declare export type TComb$Struct_Static = {
    new(value: any, mutable?: boolean): TComb$Struct_Instance,
    (value: any, mutable?: boolean): TComb$Struct_Instance,
    meta: {
        kind: string,
        name: string,
        props: any[]
    },

    /**
     * 
     * @param mixins - Contains the new props.
     * @param name - Useful for debugging purposes.
     */
    extend(mixins: Object, name?: string): TComb$Struct_Static,

    /**
     * 
     * @param mixins - Contains the new props.
     * @param name - Useful for debugging purposes.
     */
    extend(mixins: TComb$Struct_Static, name?: string): TComb$Struct_Static,

    /**
     * 
     * @param mixins - Contains the new props.
     * @param name - Useful for debugging purposes.
     */
    extend(mixins: Object[], name?: string): TComb$Struct_Static,

    /**
     * 
     * @param mixins - Contains the new props.
     * @param name - Useful for debugging purposes.
     */
    extend(mixins: TComb$Struct_Static[], name?: string): TComb$Struct_Static
} & TComb$TCombBase


declare interface TComb$Struct_Instance {}

declare module 'enums' {

    /**
     * 
     * @param keys - Array of enums.
     * @param name - Useful for debugging purposes.
     */
    declare     export function of (keys: string[], name?: string): TComb$TCombBase
}



/**
 * 
 * @param name - Useful for debugging purposes.
 */
declare export type TComb$Union_Static = {
    new(value: any, mutable?: boolean): TComb$Union_Instance,
    (value: any, mutable?: boolean): TComb$Union_Instance,
    meta: {
        kind: string,
        name: string,
        types: TComb$TCombBase[]
    },
    dispatch(x: any): TComb$TCombBase
} & TComb$TCombBase


declare export interface TComb$Union_Instance {}


/**
 * 
 * @param type - The wrapped type.
 * @param name - Useful for debugging purposes.
 */
declare export type TComb$Maybe_Static = {
    new(value: any, mutable?: boolean): TComb$Maybe_Instance,
    (value: any, mutable?: boolean): TComb$Maybe_Instance,
    meta: {
        kind: string,
        name: string,
        typee: TComb$TCombBase
    }
} & TComb$TCombBase


declare interface TComb$Maybe_Instance {}


/**
 * 
 * @param name - Useful for debugging purposes.
 */
declare type TComb$Tuple_Static = {
    new(value: any, mutable?: boolean): TComb$Tuple_Instance,
    (value: any, mutable?: boolean): TComb$Tuple_Instance,
    meta: {
        kind: string,
        name: string,
        types: TComb$TCombBase[]
    }
} & TComb$TCombBase


declare interface TComb$Tuple_Instance {}


/**
 * Combines old types into a new one.
 * @param type - A type already defined.
 * @param name - Useful for debugging purposes.
 */
declare export type TComb$Subtype_Static = {
    new(value: any, mutable?: boolean): TComb$Subtype_Instance,
    (value: any, mutable?: boolean): TComb$Subtype_Instance,
    meta: {
        kind: string,
        name: string,
        type: TComb$TCombBase,
        predicate: TComb$TypePredicate
    }
} & TComb$TCombBase


declare interface TComb$Subtype_Instance {}


/**
 * 
 * @param type - The type of list items.
 * @param name - Useful for debugging purposes.
 */
declare export function TComb$list(type: TComb$TCombBase, name?: string): TComb$List_Static

declare type TComb$List_Static = {
    new(value: any, mutable?: boolean): TComb$List_Instance,
    (value: any, mutable?: boolean): TComb$List_Instance,
    meta: {
        kind: string,
        name: string,
        type: TComb$TCombBase
    }
} & TComb$TCombBase


declare interface TComb$List_Instance {}


/**
 * 
 * @param domain - The type of keys.
 * @param codomain - The type of values.
 * @param name - Useful for debugging purposes.
 */
declare type TComb$Dict_Static = {
    new(value: any, mutable?: boolean): TComb$Dict_Instance,
    (value: any, mutable?: boolean): TComb$Dict_Instance,
    meta: {
        kind: string,
        name: string,
        domain: TComb$TCombBase,
        codomain: TComb$TCombBase
    }
} & TComb$TCombBase


declare interface TComb$Dict_Instance {}
declare var t: TComb$tcomb;
declare module 'tcomb' {
    declare module.exports: typeof t
}