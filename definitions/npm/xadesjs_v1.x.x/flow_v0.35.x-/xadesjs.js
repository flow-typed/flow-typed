// @flow
/**
 * Flowtype definitions for xadesjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$xadesjs: {
    IsEqualsEmptyStrings: typeof xadesjs$IsEqualsEmptyStrings,
    CreateDocument: typeof xadesjs$CreateDocument,
    SelectSingleNode: typeof xadesjs$SelectSingleNode,
    findAttr: typeof xadesjs$findAttr,
    findFirst: typeof xadesjs$findFirst,
    findChilds: typeof xadesjs$findChilds,
    encodeSpecialCharactersInAttribute: typeof xadesjs$encodeSpecialCharactersInAttribute,
    encodeSpecialCharactersInText: typeof xadesjs$encodeSpecialCharactersInText,
    SelectNamespaces: typeof xadesjs$SelectNamespaces,
}
declare type xadesjs$PromiseType = any;

declare var APPLICATION_XML: string;

declare class XmlError mixins Error {
    stack: any;
    constructor(code: XE, ...args: any[]): this
}

declare type xadesjs$CryptoEx = {
    name: string
} & Crypto


declare class Application {

    /**
     * Sets crypto engine for the current Application
     * @param  
     * @param  
     * @returns  void
     */
    setEngine(name: string, crypto: Crypto): void;

    /**
     * Gets the crypto module from the Application
     */
    crypto: xadesjs$CryptoEx;
    isNodePlugin(): boolean
}

declare interface xadesjs$IXmlSerializable {
    Prefix: string,

        /**
         * Writes object to XML node
         * @returns  Node
         */
        GetXml(): Node,

        /**
         * Reads XML from string
         * @param  
         * @returns  void
         */
        LoadXml(node: Node): void
}

declare class XmlObject mixins IXmlSerializable {
    m_prefix: string;
    Prefix: string;
    GetPrefix(): string;
    GetXml(): Node;
    GetXml(document: Document): Node;
    LoadXml(node: Node): void;
    toString(): string;
    getAttribute(xel: Element, attribute: string): string
}

declare var DEFAULT_ROOT_NAME: string;

declare function xadesjs$IsEqualsEmptyStrings(s1: string, s2: string): boolean


/**
 * Creates new instance of XmlDocument with given name of root element
 * @param  Name of root element
 * @param  
 * @param  
 * @returns  Document
 */
declare function xadesjs$CreateDocument(root?: string, namespaceUri?: string, prefix?: string): Document


/**
 * Returns signle Node from given Node
 * @param  
 * @param  
 * @returns  Node
 */
declare function xadesjs$SelectSingleNode(node: Node, path: string): Node

declare function xadesjs$findAttr(node: Node, localName: string, nameSpace?: string): Attr

declare function xadesjs$findFirst(doc: Node, xpath: string): Node

declare function xadesjs$findChilds(node: Node, localName: string, nameSpace?: string): Node[]

declare interface xadesjs$IAssocArray {
    [index: string]: string
}

declare function xadesjs$encodeSpecialCharactersInAttribute(attributeValue: string): string

declare function xadesjs$encodeSpecialCharactersInText(text: string): string

declare function xadesjs$SelectNamespaces(node: Element): Node[]

declare class Convert {
    ToBase64UrlString(text: string): string;
    FromBase64UrlString(base64UrlText: string): string;
    ToBase64String(text: string): string;
    FromBase64String(base64Text: string): string;
    Base64UrlToBase64(base64url: string): string;
    Base64ToBase64Url(base64: string): string;
    ToBufferUtf8String(text: string): Uint8Array;
    FromBufferUtf8String(buffer: Uint8Array): string;
    ToBufferString(text: string): Uint8Array;
    FromBufferString(buffer: ArrayBuffer): string;
    FromBufferString(buffer: Uint8Array): string
}

declare interface xadesjs$IAlgorithm {
    algorithm: Algorithm,
        xmlNamespace: string,
        getAlgorithmName(): string
}

declare type xadesjs$IHashAlgorithm = {
    getHash(xml: string): xadesjs$PromiseType
} & xadesjs$IAlgorithm


declare interface xadesjs$IHashAlgorithmConstructable {
    new(): xadesjs$IHashAlgorithm
}

declare class XmlAlgorithm mixins IAlgorithm {
    algorithm: Algorithm;
    xmlNamespace: string;
    getAlgorithmName(): string
}

declare class HashAlgorithm mixins XmlAlgorithm, IHashAlgorithm {
    getHash(xml: string): xadesjs$PromiseType
}

declare type xadesjs$ISignatureAlgorithm = {
    getSignature(
        signedInfo: string,
        signingKey: CryptoKey,
        algorithm: Algorithm): xadesjs$PromiseType,
    verifySignature(
        signedInfo: string,
        key: CryptoKey,
        signatureValue: string,
        algorithm?: Algorithm): xadesjs$PromiseType
} & xadesjs$IAlgorithm


declare interface xadesjs$ISignatureAlgorithmConstructable {
    new(): xadesjs$ISignatureAlgorithm
}

declare class SignatureAlgorithm mixins XmlAlgorithm, ISignatureAlgorithm {

    /**
     * Sign the given string using the given key
     */
    getSignature(
        signedInfo: string,
        signingKey: CryptoKey,
        algorithm: Algorithm): xadesjs$PromiseType;

    /**
     * Verify the given signature of the given string using key
     */
    verifySignature(
        signedInfo: string,
        key: CryptoKey,
        signatureValue: string,
        algorithm?: Algorithm): xadesjs$PromiseType
}

declare var SHA1: string;

declare var SHA224: string;

declare var SHA256: string;

declare var SHA384: string;

declare var SHA512: string;

declare var SHA1_NAMESPACE: string;

declare var SHA224_NAMESPACE: string;

declare var SHA256_NAMESPACE: string;

declare var SHA384_NAMESPACE: string;

declare var SHA512_NAMESPACE: string;

declare class Sha1 mixins HashAlgorithm {
    algorithm: {
        name: string
    };
    xmlNamespace: string
}

declare class Sha224 mixins HashAlgorithm {
    algorithm: {
        name: string
    };
    xmlNamespace: string
}

declare class Sha256 mixins HashAlgorithm {
    algorithm: {
        name: string
    };
    xmlNamespace: string
}

declare class Sha384 mixins HashAlgorithm {
    algorithm: {
        name: string
    };
    xmlNamespace: string
}

declare class Sha512 mixins HashAlgorithm {
    algorithm: {
        name: string
    };
    xmlNamespace: string
}

declare var RSA_PKCS1: string;

declare var RSA_PKCS1_SHA1_NAMESPACE: string;

declare var RSA_PKCS1_SHA224_NAMESPACE: string;

declare var RSA_PKCS1_SHA256_NAMESPACE: string;

declare var RSA_PKCS1_SHA384_NAMESPACE: string;

declare var RSA_PKCS1_SHA512_NAMESPACE: string;

declare class RsaPkcs1Sha1 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPkcs1Sha224 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPkcs1Sha256 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPkcs1Sha384 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPkcs1Sha512 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare var RSA_PSS: string;

declare var RSA_PSS_WITH_PARAMS_NAMESPACE: string;

declare var RSA_PSS_WITH_PARAMS_MGF1_NAMESPACE: string;

declare class RsaPssSha1 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPssSha224 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPssSha256 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPssSha384 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class RsaPssSha512 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class PssAlgorithmParams mixins XmlObject {
    dsPrefix: string;
    DigestMethod: string;
    SaltLength: number;
    MGF: string;
    GetXml(): Element;
    LoadXml(value: Element): void
}

declare var HMAC_ALGORITHM: string;

declare var HMAC_SHA1_NAMESPACE: string;

declare var HMAC_SHA256_NAMESPACE: string;

declare var HMAC_SHA384_NAMESPACE: string;

declare var HMAC_SHA512_NAMESPACE: string;

declare class HmacSha1 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class HmacSha256 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class HmacSha384 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class HmacSha512 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare var ECDSA_SIGN_ALGORITHM: string;

declare var ECDSA_SHA1_NAMESPACE: string;

declare var ECDSA_SHA224_NAMESPACE: string;

declare var ECDSA_SHA256_NAMESPACE: string;

declare var ECDSA_SHA384_NAMESPACE: string;

declare var ECDSA_SHA512_NAMESPACE: string;

declare class EcdsaSha1 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class EcdsaSha224 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class EcdsaSha256 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class EcdsaSha384 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}

declare class EcdsaSha512 mixins SignatureAlgorithm {
    algorithm: any;
    xmlNamespace: string
}


/**
 * Represents an <X509Certificate> element.
 */
declare class X509Certificate {
    raw: Uint8Array;
    cert_simpl: any;
    publicKey: CryptoKey;
    constructor(rawData?: Uint8Array): this;

    /**
     * Loads X509Certificate from DER data
     * @param  
     */
    LoadFromRawData(rawData: Uint8Array): void;

    /**
     * Gets the public key from the X509Certificate
     */
    PublicKey: CryptoKey;

    /**
     * Returns DER raw of X509Certificate
     */
    GetRawCertData(): Uint8Array;

    /**
     * Returns public key from X509Certificate
     * @param  
     * @returns  PromiseType
     */
    exportKey(algorithm: Algorithm): xadesjs$PromiseType
}

declare interface xadesjs$X509IssuerSerial {
    issuerName: string,
        serialNumber: string
}


/**
 * Represents an <X509Data> subelement of an XMLDSIG or XML Encryption <KeyInfo> element.
 */
declare class KeyInfoX509Data mixins XmlObject, KeyInfoClause {
    constructor(): this;
    constructor(rgbCert: Uint8Array): this;
    constructor(cert: xadesjs$X509Certificate): this;

    /**
     * Gets public key of the X509Data
     */
    Key: CryptoKey;
    importKey(key: CryptoKey): xadesjs$PromiseType;

    /**
     * Exports key from X509Data object
     * @param  
     * @returns  PromiseType
     */
    exportKey(alg: Algorithm): xadesjs$PromiseType;

    /**
     * Gets a list of the X.509v3 certificates contained in the KeyInfoX509Data object.
     */
    Certificates: xadesjs$X509Certificate[];

    /**
     * Gets or sets the Certificate Revocation List (CRL) contained within the KeyInfoX509Data object.
     */
    CRL: Uint8Array;

    /**
     * Gets a list of X509IssuerSerial structures that represent an issuer name and serial number pair.
     */
    IssuerSerials: xadesjs$X509IssuerSerial[];

    /**
     * Gets a list of the subject key identifiers (SKIs) contained in the KeyInfoX509Data object.
     */
    SubjectKeyIds: Uint8Array[];

    /**
     * Gets a list of the subject names of the entities contained in the KeyInfoX509Data object.
     */
    SubjectNames: string[];

    /**
     * Adds the specified X.509v3 certificate to the KeyInfoX509Data.
     * @param  
     * @returns  void
     */
    AddCertificate(certificate: xadesjs$X509Certificate): void;

    /**
     * Adds the specified issuer name and serial number pair to the KeyInfoX509Data object.
     * @param  
     * @param  
     * @returns  void
     */
    AddIssuerSerial(issuerName: string, serialNumber: string): void;

    /**
     * Adds the specified subject key identifier (SKI) to the KeyInfoX509Data object.
     * @param  
     * @returns  void
     */
    AddSubjectKeyId(subjectKeyId: string): void;
    AddSubjectKeyId(subjectKeyId: Uint8Array): void;

    /**
     * Adds the subject name of the entity that was issued an X.509v3 certificate to the KeyInfoX509Data object.
     * @param  
     * @returns  void
     */
    AddSubjectName(subjectName: string): void;

    /**
     * Returns an XML representation of the KeyInfoX509Data object.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Parses the input XmlElement object and configures the internal state of the KeyInfoX509Data object to match.
     * @param  
     * @returns  void
     */
    LoadXml(element: Element): void
}

declare interface xadesjs$IJwkRsa {
    alg: string,
        kty: string,
        e: string,
        n: string,
        ext: boolean
}


/**
 * Represents the <RSAKeyValue> element of an XML signature.
 */
declare class RsaKeyValue mixins XmlObject, KeyInfoClause {

    /**
     * Gets or sets the instance of RSA that holds the public key.
     */
    Key: CryptoKey;

    /**
     * Gets the algorithm of the public key
     */
    Algorithm: xadesjs$ISignatureAlgorithm;

    /**
     * Gets the Modulus of the public key
     */
    Modulus: Uint8Array;

    /**
     * Gets the Exponent of the public key
     */
    Exponent: Uint8Array;
    constructor(): this;

    /**
     * Imports key to the RSAKeyValue object
     * @param  
     * @returns  PromiseType
     */
    importKey(key: CryptoKey): xadesjs$PromiseType;

    /**
     * Exports key from the RSAKeyValue object
     * @param  
     * @returns  PromiseType
     */
    exportKey(alg: Algorithm): xadesjs$PromiseType;

    /**
     * Returns the XML representation of the RSA key clause.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Loads an RSA key clause from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(element: Element): void
}

declare type xadesjs$NamedCurve = "P-256" | "P-384" | "P-521";

declare interface xadesjs$IJwkEcdsa {
    crv: xadesjs$NamedCurve,
        kty: "EC",
        x: string,
        y: string,
        ext: boolean
}


/**
 * Represents the <ECKeyValue> element of an XML signature.
 */
declare class EcdsaKeyValue mixins XmlObject, KeyInfoClause {

    /**
     * Gets or sets the instance of ECDSA that holds the public key.
     */
    Key: CryptoKey;

    /**
     * Gets the algorithm of the public key
     */
    Algorithm: xadesjs$ISignatureAlgorithm;

    /**
     * Gets the X point value of then public key
     */
    X: Uint8Array;

    /**
     * Gets the Y point value of then public key
     */
    Y: Uint8Array;

    /**
     * Gets the NamedCurve value of then public key
     */
    NamedCurve: xadesjs$NamedCurve;
    constructor(): this;

    /**
     * Imports key to the ECKeyValue object
     * @param  
     * @returns  PromiseType
     */
    importKey(key: CryptoKey): xadesjs$PromiseType;

    /**
     * Exports key from the ECKeyValue object
     * @param  
     * @returns  PromiseType
     */
    exportKey(alg: Algorithm): xadesjs$PromiseType;

    /**
     * Returns the XML representation of the ECDSA key clause.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Loads an ECDSA key clause from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(element: Element): void
}

declare type xadesjs$XmlNamespace = {
    prefix: string,
    namespace: string
};

declare class XmlCanonicalizer {
    constructor(withComments: boolean, excC14N: boolean, propagatedNamespaces?: xadesjs$XmlNamespace[]): this;
    InclusiveNamespacesPrefixList: string;
    Canonicalize(node: Node): string
}


/**
 * Represents the abstract base class from which all <Transform> elements
 * that can be used in an XML digital signature derive.
 */
declare class Transform mixins XmlObject, Transform {
    innerXml: Node;
    LoadXml(value: Node): void;

    /**
     * Returns the XML representation of the current Transform object.
     * @returns  Element
     */
    GetXml(): Element
}

declare interface xadesjs$ICanonicalizationAlgorithmConstructable {
    new(): xadesjs$Transform
}


/**
 * Represents the enveloped signature transform for an XML digital signature as defined by the W3C.
 */
declare class XmlDsigEnvelopedSignatureTransform mixins Transform {
    Algorithm: string;

    /**
     * Returns the output of the current XmlDsigEnvelopedSignatureTransform object.
     * @returns  string
     */
    GetOutput(): string
}


/**
 * Represents the C14N XML canonicalization transform for a digital signature
 * as defined by the World Wide Web Consortium (W3C), without comments.
 */
declare class XmlDsigC14NTransform mixins Transform {
    xmlCanonicalizer: xadesjs$XmlCanonicalizer;
    Algorithm: string;

    /**
     * Returns the output of the current XmlDsigC14NTransform object.
     * @returns  string
     */
    GetOutput(): string
}


/**
 * Represents the C14N XML canonicalization transform for a digital signature
 * as defined by the World Wide Web Consortium (W3C), with comments.
 */
declare class XmlDsigC14NWithCommentsTransform mixins XmlDsigC14NTransform {
    Algorithm: string;
    xmlCanonicalizer: xadesjs$XmlCanonicalizer
}


/**
 * Represents the exclusive C14N XML canonicalization transform for a digital signature
 * as defined by the World Wide Web Consortium (W3C), without comments.
 */
declare class XmlDsigExcC14NTransform mixins Transform {
    xmlCanonicalizer: xadesjs$XmlCanonicalizer;
    Algorithm: string;

    /**
     * Gets or sets a string that contains namespace prefixes to canonicalize
     * using the standard canonicalization algorithm.
     */
    InclusiveNamespacesPrefixList: string;

    /**
     * Returns the output of the current XmlDsigExcC14NTransform object
     */
    GetOutput(): string
}


/**
 * Represents the exclusive C14N XML canonicalization transform for a digital signature
 * as defined by the World Wide Web Consortium (W3C), with comments.
 */
declare class XmlDsigExcC14NWithCommentsTransform mixins XmlDsigExcC14NTransform {
    Algorithm: string;
    xmlCanonicalizer: xadesjs$XmlCanonicalizer
}

declare class CryptoConfig {
    CreateFromName(name: string): xadesjs$Transform;
    CreateSignatureAlgorithm(namespace: string): xadesjs$SignatureAlgorithm;
    CreateHashAlgorithm(namespace: string): xadesjs$HashAlgorithm
}


/**
 * Represents the object element of an XML signature that holds data to be signed.
 */
declare class DataObject mixins XmlObject {
    constructor(): this;
    constructor(id?: string, mimeType?: string, encoding?: string, data?: Element): this;

    /**
     * Gets or sets the data value of the current DataObject object.
     */
    Data: NodeList;

    /**
     * Gets or sets the encoding of the current DataObject object.
     */
    Encoding: string;

    /**
     * Gets or sets the identification of the current DataObject object.
     */
    Id: string;

    /**
     * Gets or sets the MIME type of the current DataObject object.
     */
    MimeType: string;

    /**
     * Returns the XML representation of the DataObject object.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Loads a DataObject state from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(value: Element): void
}


/**
 * Represents the <reference> element of an XML signature.
 */
declare class Reference mixins XmlObject {
    constructor(p?: string): this;

    /**
     * Gets or sets the digest method Uniform Resource Identifier (URI) of the current
     */
    DigestMethod: string;

    /**
     * Gets or sets the digest value of the current Reference.
     */
    DigestValue: ArrayBuffer;

    /**
     * Gets or sets the ID of the current Reference.
     */
    Id: string;

    /**
     * Gets the transform chain of the current Reference.
     */
    TransformChain: xadesjs$Transform[];

    /**
     * Gets or sets the type of the object being signed.
     */
    Type: string;

    /**
     * Gets or sets the Uri of the current Reference.
     */
    Uri: string;

    /**
     * Adds a Transform object to the list of transforms to be performed
     * on the data before passing it to the digest algorithm.
     * @param  The transform to be added to the list of transforms.
     * @returns  void
     */
    AddTransform(transform: xadesjs$Transform): void;

    /**
     * Returns the XML representation of the Reference.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Loads a Reference state from an XML element.
     * @param  
     */
    LoadXml(value: Element): void
}


/**
 * Represents an XML digital signature or XML encryption <KeyInfo> element.
 */
declare class KeyInfo mixins XmlObject {
    constructor(): this;

    /**
     * Gets the number of KeyInfoClause objects contained in the KeyInfo object.
     */
    length: number;

    /**
     * Gets or sets the key information identity.
     */
    Id: string;

    /**
     * Returns an enumerator of the KeyInfoClause objects in the KeyInfo object.
     * @param  ?
     */
    GetEnumerator(): Array<xadesjs$KeyInfoClause>;
    GetEnumerator(requestedObjectType: any): Array<xadesjs$KeyInfoClause>;

    /**
     * Returns an enumerator of the KeyInfoClause objects in the KeyInfo object.
     * @param  The KeyInfoClause to add to the KeyInfo object.
     * @returns  void
     */
    AddClause(clause: xadesjs$KeyInfoClause): void;

    /**
     * Returns the XML representation of the KeyInfo object.
     * @returns  Node
     */
    GetXml(): Node;

    /**
     * Loads a KeyInfo state from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(value: Element): void
}

declare type xadesjs$KeyInfoClause = {
    Key: CryptoKey,
    importKey(key: CryptoKey): xadesjs$PromiseType,
    exportKey(alg: Algorithm): xadesjs$PromiseType
} & xadesjs$IXmlSerializable



/**
 * Represents the <Signature> element of an XML signature.
 */
declare class Signature mixins XmlObject {
    constructor(): this;

    /**
     * Gets or sets the ID of the current Signature.
     */
    Id: string;

    /**
     * Gets or sets the KeyInfo of the current Signature.
     */
    KeyInfo: xadesjs$KeyInfo;

    /**
     * Gets or sets a list of objects to be signed.
     */
    ObjectList: Array<xadesjs$DataObject>;

    /**
     * Gets or sets the value of the digital signature.
     */
    SignatureValue: Uint8Array;

    /**
     * Gets or sets the SignedInfo of the current Signature.
     */
    SignedInfo: xadesjs$SignedInfo;

    /**
     * Adds a DataObject to the list of objects to be signed.
     * @param  The DataObject to be added to the list of objects to be signed.
     * @returns  void
     */
    AddObject(dataObject: xadesjs$DataObject): void;

    /**
     * Returns the XML representation of the Signature.
     * @returns  Element
     */
    GetXml(): Element;

    /**
     * Loads a Signature state from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(value: Element): void
}

declare var XmlSignature: {
    ElementNames: {
        CanonicalizationMethod: string,
        DigestMethod: string,
        DigestValue: string,
        DSAKeyValue: string,
        EncryptedKey: string,
        HMACOutputLength: string,
        RSAPSSParams: string,
        MaskGenerationFunction: string,
        SaltLength: string,
        KeyInfo: string,
        KeyName: string,
        KeyValue: string,
        Modulus: string,
        Exponent: string,
        Manifest: string,
        Object: string,
        Reference: string,
        RetrievalMethod: string,
        RSAKeyValue: string,
        ECKeyValue: string,
        NamedCurve: string,
        PublicKey: string,
        Signature: string,
        SignatureMethod: string,
        SignatureValue: string,
        SignedInfo: string,
        Transform: string,
        Transforms: string,
        X509Data: string,
        X509IssuerSerial: string,
        X509IssuerName: string,
        X509SerialNumber: string,
        X509SKI: string,
        X509SubjectName: string,
        X509Certificate: string,
        X509CRL: string
    },
    AttributeNames: {
        Algorithm: string,
        Encoding: string,
        Id: string,
        MimeType: string,
        Type: string,
        URI: string
    },
    AlgorithmNamespaces: {
        XmlDsigBase64Transform: string,
        XmlDsigC14NTransform: string,
        XmlDsigC14NWithCommentsTransform: string,
        XmlDsigEnvelopedSignatureTransform: string,
        XmlDsigXPathTransform: string,
        XmlDsigXsltTransform: string,
        XmlDsigExcC14NTransform: string,
        XmlDsigExcC14NWithCommentsTransform: string,
        XmlDecryptionTransform: string,
        XmlLicenseTransform: string
    },
    Uri: {
        Manifest: string
    },
    NamespaceURI: string,
    NamespaceURIMore: string,
    NamespaceURIPss: string,
    Prefix: string,
    GetChildElement: (xel: Node, element: string, ns: string) => Element,
    GetAttributeFromElement: (xel: Element, attribute: string, element: string) => string,
    GetChildElements: (xel: Element, element: string) => Element[]
};


/**
 * The SignedInfo class represents the <SignedInfo> element
 * of an XML signature defined by the XML digital signature specification
 */
declare class SignedInfo mixins XmlObject {
    constructor(signedXml?: xadesjs$SignedXml): this;

    /**
     * Gets or sets the canonicalization algorithm that is used before signing
     * for the current SignedInfo object.
     */
    CanonicalizationMethod: string;

    /**
     * Gets a Transform object used for canonicalization.
     * @returns  Transform
     */
    CanonicalizationMethodObject: xadesjs$Transform;

    /**
     * Gets the number of references in the current SignedInfo object.
     */
    Count: number;

    /**
     * Gets or sets the ID of the current SignedInfo object.
     */
    Id: string;

    /**
     * Gets a value that indicates whether the collection is read-only.
     * @returns  boolean
     */
    IsReadOnly: boolean;

    /**
     * Gets a value that indicates whether the collection is synchronized.
     * @returns  boolean
     */
    IsSynchronized: boolean;

    /**
     * Gets a list of the Reference objects of the current SignedInfo object.
     */
    References: xadesjs$Reference[];

    /**
     * Gets or sets the length of the signature for the current SignedInfo object.
     */
    SignatureLength: string;

    /**
     * Gets or sets the name of the algorithm used for signature generation
     * and validation for the current SignedInfo object.
     */
    SignatureMethod: string;
    SignatureParams: xadesjs$XmlObject;

    /**
     * Gets an object to use for synchronization.
     */
    SyncRoot: any;

    /**
     * Adds a Reference object to the list of references to digest and sign.
     * @param  The reference to add to the list of references.
     * @returns  void
     */
    AddReference(reference: xadesjs$Reference): void;

    /**
     * Copies the elements of this instance into an Array object, starting at a specified index in the array.
     * @param  
     * @param  
     * @returns  void
     */
    CopyTo(array: any[], index: number): void;

    /**
     * Returns the XML representation of the SignedInfo object.
     * @returns  Node
     */
    GetXml(): Node;

    /**
     * Loads a SignedInfo state from an XML element.
     * @param  
     * @returns  void
     */
    LoadXml(value: Element): void
}


/**
 * Provides a wrapper on a core XML signature object to facilitate creating XML signatures.
 */
declare class SignedXml mixins XmlObject {

    /**
     * Gets or sets the KeyInfo object of the current SignedXml object.
     */
    KeyInfo: xadesjs$KeyInfo;

    /**
     * Gets the Signature object of the current SignedXml object.
     */
    Signature: xadesjs$Signature;

    /**
     * Gets or sets the prefix for the current SignedXml object.
     */
    Prefix: string;

    /**
     * Gets the length of the signature for the current SignedXml object.
     */
    SignatureLength: number;
    SignatureMethod: string;

    /**
     * Gets the signature value of the current SignedXml object.
     */
    SignatureValue: ArrayBuffer;

    /**
     * Gets the CanonicalizationMethod of the current SignedXml object.
     */
    CanonicalizationMethod: string;

    /**
     * Gets the SignedInfo object of the current SignedXml object.
     */
    SignedInfo: xadesjs$SignedInfo;

    /**
     * Gets or sets the asymmetric algorithm key used for signing a SignedXml object.
     */
    SigningKey: CryptoKey;

    /**
     * Gets or sets the name of the installed key to be used for signing the SignedXml object.
     */
    SigningKeyName: string;

    /**
     * 
     * @param  . Value of "wssecurity" will create/validate id's with the ws-security namespace
     */
    constructor(): this;
    constructor(node: Document): this;
    constructor(node: Element): this;

    /**
     * Adds a Reference object to the SignedXml object that describes a digest method,
     * digest value, and transform to use for creating an XML digital signature.
     * @param  The Reference object that describes a digest method, digest value,
    and transform to use for creating an XML digital signature.
     * @returns  void
    */
    AddReference(reference: xadesjs$Reference): void;

    /**
     * Computes an XML digital signature using the specified algorithm.
     * @param  Specified WebCrypto Algoriithm
     * @returns  PromiseType
     */
    ComputeSignature(algorithm: Algorithm): xadesjs$PromiseType;

    /**
     * Determines whether the SignedXml.Signature property verifies using the public key in the signature.
     * @returns  PromiseType
     */
    CheckSignature(): xadesjs$PromiseType;
    CheckSignature(key: CryptoKey): xadesjs$PromiseType;
    CheckSignature(cert: xadesjs$X509Certificate): xadesjs$PromiseType;

    /**
     * Loads a SignedXml state from an XML element.
     * @param  The XML element to load the SignedXml state from.
     * @returns  void
     */
    LoadXml(value: Element): void;

    /**
     * Returns the XML representation of a SignedXml object.
     * @returns  Element
     */
    GetXml(): Element
}