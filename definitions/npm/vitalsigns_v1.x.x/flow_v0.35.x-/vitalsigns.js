/**
 * Flowtype definitions for vitalsigns
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'vitalsigns' {


    /**
     * Contraint.
     * @interface  
     */
    declare export interface vitalsigns$Constraint {

        /**
         * The comparator to use when comparing the field's value with the constraint value.
         * Valid comparators are: 'equal', 'greater', and 'less'.
         * @type  
         */
        comparator: string,

            /**
             * The name of the field to be constrained.
             * @type  
             */
            field: string,

            /**
             * The name of the monitor containing the field to be constrained.
             * @type  
             */
            monitor: string,

            /**
             * true to negate the outcome of the comparison; false or omitted to use the comparison result.
             * @type  
             */
            negate?: boolean,

            /**
             * The value against which the field should be compared.
             * @type  
             */
            value: any
    }


    /**
     * Constraint wrapper.
     * @interface  
     */
    declare export interface vitalsigns$ConstraintWrapper {
        equals?: (num: number) => vitalsigns$ConstraintWrapper,
            greaterThan?: (num: number) => vitalsigns$ConstraintWrapper,
            lessThan?: (num: number) => vitalsigns$ConstraintWrapper,
            not?: vitalsigns$ConstraintWrapper
    }


    /**
     * Options.
     * @interface  
     */
    declare export interface vitalsigns$Options {

        /**
         * Number of milliseconds to wait between automatic health checks.
         * @type  
         */
        autoCheck?: number | boolean,

            /**
             * HTTP response code to send back in the VitalSigns.
             * @type  
             */
            httpHealthy?: number,

            /**
             * HTTP response code to send back in the VitalSigns.
             * @type  
             */
            httpUnhealthy?: number
    }

    declare export interface vitalsigns$Monitor {

        /**
         * Connections.
         * @type  
         */
        connections: any
    }


    /**
     * Monitor field.
     * @interface  
     */
    declare export interface vitalsigns$MonitorField {

        /**
         * Name.
         * @type  
         */
        name?: string,

            /**
             * Units.
             * @type  
             */
            units?: string
    }


    /**
     * Report options.
     * @interface  
     */
    declare interface vitalsigns$ReportOptions {

        /**
         * true to flatten the report object down to a single level by concatenating nested key names; false to keep the default hierarchical format.
         * @type  
         */
        flatten?: boolean,

            /**
             * If flatten is true, this string will be used to separate key names when they are concatenated together.
             * @type  
             */
            separator?: string
    }
    declare module.exports: typeof VitalSigns
}