/**
 * Flowtype definitions for dc-1.6.0
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$dc: {
    filterAll: typeof dc$filterAll,
    renderAll: typeof dc$renderAll,
    redrawAll: typeof dc$redrawAll,
    bubbleChart: typeof dc$bubbleChart,
    pieChart: typeof dc$pieChart,
    barChart: typeof dc$barChart,
    lineChart: typeof dc$lineChart,
    dataTable: typeof dc$dataTable,
    rowChart: typeof dc$rowChart,
}
declare interface dc$IGetSet<T, V>{
    (): T,
    (t: T): V
}

declare
export interface dc$ILegendwidget {
    x: dc$IGetSet<number, number>,
        y: dc$IGetSet<number, number>,
        gap: dc$IGetSet<number, number>,
        itemHeight: dc$IGetSet<number, number>,
        horizontal: dc$IGetSet<boolean, boolean>,
        legendWidth: dc$IGetSet<number, number>,
        itemWidth: dc$IGetSet<number, number >
}

declare
export interface dc$IBaseChart<T>{
    width: dc$IGetSet<number,
    T>,
    height: dc$IGetSet<number,
    T>,
    minWidth: dc$IGetSet<number,
    T>,
    minHeight: dc$IGetSet<number,
    T>,
    dimension: dc$IGetSet<any,
    T>,
    group: dc$IGetSet<any,
    T>,
    transitionDuration: dc$IGetSet<number,
    T>,
    colors: dc$IGetSet<string[],
    T>,
    keyAccessor: dc$IGetSet<(d: any) => number,
    T>,
    valueAccessor: dc$IGetSet<(d: any) => number,
    T>,
    label: dc$IGetSet<(l: any) => string,
    T>,
    renderLabel: dc$IGetSet<boolean,
    T>,
    renderlet: (fnctn: (t: T) => void) => T,
    title: dc$IGetSet<(t: string) => string,
    T>,
    filter: dc$IGetSet<any,
    T>,
    filterAll: () => void,
    expireCache: () => void,
    legend: (l: dc$ILegendwidget) => T,
    chartID: () => number,
    options: (o: Object) => void,
    select: (selector: d3.Selection<any>) => d3.Selection<any>,
    selectAll: (selector: d3.Selection<any>) => d3.Selection<any >
}

declare
export interface dc$IEvents {
    trigger(fnctn: () => void, delay?: number): void
}

declare
export var events: dc$IEvents;

declare
export interface dc$IListener<T>{
    on: {
        (event: "preRender", fnctn: (c: T) => any): T,
        (event: "postRender", fnctn: (c: T) => any): T,
        (event: "preRedraw", fnctn: (c: T) => any): T,
        (event: "postRedraw", fnctn: (c: T) => any): T,
        (event: "filtered", fnctn: (c: T, filter: any) => any): T,
        (event: "zoomed", fnctn: (c: T, filter: any) => any): T,
        (event: string, fnctn: (c: T, ...args: any[]) => any): T
    }
}

declare
export interface dc$ImarginObj {
    top: number,
        right: number,
        bottom: number,
        left: number
}

declare
export interface dc$IMarginable<T>{
    margins: dc$IGetSet<dc$ImarginObj,
    T >
}

declare
export interface dc$IAbstractColorChart<T>{
    colorDomain: dc$IGetSet<number[],
    T >
}

declare
export interface dc$IAbstractStackableChart<T>{
    stack: (group: dc$IChartGroup, name?: string, retriever?: (d: Object) => number) => T
}

declare
export interface dc$IAbstractCoordinateGridChart<T>{
    x: dc$IGetSet<any,
    T>,
    y: dc$IGetSet<any,
    T>,
    elasticY: dc$IGetSet<boolean,
    T>,
    xAxis: dc$IGetSet<undefined.Axis,
    T>,
    yAxis: dc$IGetSet<undefined.Axis,
    T>,
    yAxisPadding: dc$IGetSet<number,
    T>,
    xAxisPadding: dc$IGetSet<number,
    T>,
    renderHorizontalGridLines: dc$IGetSet<boolean,
    T >
}

declare
export interface dc$IAbstractBubblechart<T>{
    r: dc$IGetSet<any,
    T>,
    radiusValueAccessor: dc$IGetSet<(d: any) => number,
    T >
}

declare
export interface dc$columnFunction {
    (rowinfo: any): string
}

declare
export interface dc$sortbyFunction {
    (rowinfo: any): any
}

declare
export interface dc$orderFunction {
    (a: T, b: T): number
}

declare
export type dc$IBubblechart = {} & dc$IBaseChart & dc$IAbstractColorChart & dc$IAbstractBubblechart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export type dc$IPiechart = {
    radius: dc$IGetSet<number,
    dc$IPiechart>,
    minAngleForLabel: dc$IGetSet<number,
    dc$IPiechart >
} & dc$IBaseChart & dc$IAbstractColorChart & dc$IAbstractBubblechart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export type dc$IBarchart = {
    centerBar: (b: boolean) => dc$IBarchart,
    gap: (gapBetweenBars: number) => dc$IBarchart
} & dc$IBaseChart & dc$IAbstractStackableChart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export type dc$ILinechart = {} & dc$IBaseChart & dc$IAbstractStackableChart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export type dc$IDatachart = {
    size: dc$IGetSet<number,
    dc$IDatachart>,
    columns: dc$IGetSet<dc$columnFunction[],
    dc$IDatachart>,
    sortBy: dc$IGetSet<dc$sortbyFunction,
    dc$IDatachart>,
    order: dc$IGetSet<dc$orderFunction,
    dc$IDatachart >
} & dc$IBaseChart & dc$IAbstractStackableChart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export type dc$IRowchart = {} & dc$IBaseChart & dc$IAbstractColorChart & dc$IAbstractStackableChart & dc$IAbstractCoordinateGridChart & dc$IMarginable & dc$IListener


declare
export interface dc$IChartGroup {}

declare
export function dc$filterAll(chartGroup?: dc$IChartGroup): void

declare
export function dc$renderAll(chartGroup?: dc$IChartGroup): void

declare
export function dc$redrawAll(chartGroup?: dc$IChartGroup): void

declare
export function dc$bubbleChart(cssSel: string): dc$IBubblechart

declare
export function dc$pieChart(cssSel: string): dc$IPiechart

declare
export function dc$barChart(cssSel: string): dc$IBarchart

declare
export function dc$lineChart(cssSel: string): dc$ILinechart

declare
export function dc$dataTable(cssSel: string): dc$IDatachart

declare
export function dc$rowChart(cssSel: string): dc$IRowchart