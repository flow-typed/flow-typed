/**
 * Flowtype definitions for my-meteor
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare var Collection: Mongo$CollectionStatic;

declare interface Mongo$CollectionStatic {
    new<T>(
        name: string,
        options?: {
            connection?: Object,
            idGeneration?: string,
            transform?: Function
        }): Mongo$Collection<T >
}

declare interface Mongo$Collection<T>{
    allow(
        options: {
            insert?: (userId: string, doc: T) => boolean,
            update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean,
            remove?: (userId: string, doc: T) => boolean,
            fetch?: string[],
            transform?: Function
        }): boolean,
    deny(
        options: {
            insert?: (userId: string, doc: T) => boolean,
            update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean,
            remove?: (userId: string, doc: T) => boolean,
            fetch?: string[],
            transform?: Function
        }): boolean,
    find(
        selector?: any,
        options?: {
            sort?: any,
            skip?: number,
            limit?: number,
            fields?: any,
            reactive?: boolean,
            transform?: Function
        }): Mongo$Cursor<T>,
    findOne(
        selector?: any,
        options?: {
            sort?: any,
            skip?: number,
            fields?: any,
            reactive?: boolean,
            transform?: Function
        }): T,
    insert(doc: T, callback?: Function): string,
    rawCollection(): any,
    rawDatabase(): any,
    remove(selector: any, callback?: Function): void,
    update(
        selector: any,
        modifier: any,
        options?: {
            multi?: boolean,
            upsert?: boolean
        },
        callback?: Function): number,
    upsert(
        selector: any,
        modifier: any,
        options?: {
            multi?: boolean
        },
        callback?: Function): {
        numberAffected?: number,
        insertedId?: string
    },
    _ensureIndex(indexName: string, options?: {
        [key: string]: any
    }): void
}

declare var Cursor: Mongo$CursorStatic;

declare interface Mongo$CursorStatic {
    new<T>(): Mongo$Cursor<T >
}

declare interface Mongo$Cursor<T>{
    count(): number,
    fetch(): Array<T>,
    forEach(
        callback:<T>(doc: T, index: number, cursor: Mongo$Cursor<T>) => void,
        thisArg?: any): void,
    map<U>(
        callback: (doc: T, index: number, cursor: Mongo$Cursor<T>) => U,
        thisArg?: any): Array<U>,
    observe(callbacks: Object): any,
    observeChanges(callbacks: Object): any
}

declare var ObjectID: Mongo$ObjectIDStatic;

declare interface Mongo$ObjectIDStatic {
    new(hexString: string): Mongo$ObjectID
}

declare interface Mongo$ObjectID {}
declare var isServer: boolean;

declare var isClient: boolean;