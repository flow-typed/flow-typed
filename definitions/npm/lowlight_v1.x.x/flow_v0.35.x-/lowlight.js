/**
 * Flowtype definitions for lowlight
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'lowlight' {

}
declare module 'lowlight/lib/core' {
    declare export function highlight(
        language: string,
        value: string,
        options?: lowlight$HighlightOptions): lowlight$HighlightResult
    declare export function highlightAuto(
        value: string,
        options?: lowlight$HighlightAutoOptions): lowlight$HighlightAutoResult
    declare export function registerLanguage(name: string, syntax: Function): void
}
declare interface Unist$Data {
    [index: string]: any
}

declare interface Unist$Position {
    line: number,
        column: number,
        offset?: number
}

declare interface Unist$Location {
    start: Unist$Position,
        end: Unist$Position,
        indent?: Array<number >
}

declare
export interface Unist$Node {
    type: string,
        data?: Unist$Data,
        position?: Unist$Location
}

declare
export type Unist$Parent = {
    children: Array<Unist$Node >
} & Unist$Node


declare
export type Unist$Text = {
    value: string
} & Unist$Node


declare interface AST$Properties {
    [index: string]: any
}

declare
export type AST$Root = {
    type: "root"
}

declare
export type AST$Element = {
    type: "element",
    tagName: string,
    properties: AST$Properties
}

declare
export type AST$Doctype = {
    type: "doctype",
    name: string,
    public?: string,
    system?: string
}

declare
export type AST$Comment = {
    type: "comment"
}

declare
export type AST$Text = {
    value: string
} & Unist$Node


declare type lowlight$HastNode = AST$Root |
    AST$Element |
    AST$Doctype |
    AST$Comment |
    AST$Text;

declare interface lowlight$HighlightOptions {
    prefix?: string
}

declare type lowlight$HighlightAutoOptions = {
    subset?: Array<string >
} & lowlight$HighlightOptions


declare interface lowlight$HighlightResult {
    relevance: number,
        language: string,
        value: Array<lowlight$HastNode >
}

declare type lowlight$HighlightAutoResult = {
    secondBest?: lowlight$HighlightAutoResult
} & lowlight$HighlightResult