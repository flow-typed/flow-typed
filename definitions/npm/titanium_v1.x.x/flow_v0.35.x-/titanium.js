// @flow
/**
 * Flowtype definitions for titanium
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$Ti: {
    addEventListener: typeof Ti$addEventListener,
    applyProperties: typeof Ti$applyProperties,
    createBuffer: typeof Ti$createBuffer,
    fireEvent: typeof Ti$fireEvent,
    getApiName: typeof Ti$getApiName,
    getBubbleParent: typeof Ti$getBubbleParent,
    getBuildDate: typeof Ti$getBuildDate,
    getBuildHash: typeof Ti$getBuildHash,
    getUserAgent: typeof Ti$getUserAgent,
    getVersion: typeof Ti$getVersion,
    include: typeof Ti$include,
    removeEventListener: typeof Ti$removeEventListener,
    setBubbleParent: typeof Ti$setBubbleParent,
    setUserAgent: typeof Ti$setUserAgent,
}
declare export var apiName: string;

declare export var bubbleParent: boolean;

declare export var buildDate: string;

declare export var buildHash: string;

declare export var userAgent: string;

declare export var version: string;

declare export function Ti$addEventListener(name: string, callback: (...args: any[]) => any): void

declare export function Ti$applyProperties(props: Dictionary<Object>): void

declare export function Ti$createBuffer(params: CreateBufferArgs): Ti$Buffer

declare export function Ti$fireEvent(name: string, event: Dictionary<Object>): void

declare export function Ti$getApiName(): string

declare export function Ti$getBubbleParent(): boolean

declare export function Ti$getBuildDate(): string

declare export function Ti$getBuildHash(): string

declare export function Ti$getUserAgent(): string

declare export function Ti$getVersion(): string

declare export function Ti$include(name: string): void

declare export function Ti$removeEventListener(name: string, callback: (...args: any[]) => any): void

declare export function Ti$setBubbleParent(bubbleParent: boolean): void

declare export function Ti$setUserAgent(userAgent: string): void

declare module 'XML' {
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function parseString(xml: string): undefined.Document
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function serializeToString(node: undefined.Node): string
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type Entity = {
        notationName: string,
        publicId: string,
        systemId: string,
        getNotationName(): string,
        getPublicId(): string,
        getSystemId(): string
    }
    declare     export type Node = {
        ATTRIBUTE_NODE: number,
        CDATA_SECTION_NODE: number,
        COMMENT_NODE: number,
        DOCUMENT_FRAGMENT_NODE: number,
        DOCUMENT_NODE: number,
        DOCUMENT_TYPE_NODE: number,
        ELEMENT_NODE: number,
        ENTITY_NODE: number,
        ENTITY_REFERENCE_NODE: number,
        NOTATION_NODE: number,
        PROCESSING_INSTRUCTION_NODE: number,
        TEXT_NODE: number,
        attributes: undefined.NamedNodeMap,
        childNodes: undefined.NodeList,
        firstChild: undefined.Node,
        lastChild: undefined.Node,
        localName: string,
        namespaceURI: string,
        nextSibling: undefined.Node,
        nodeName: string,
        nodeType: number,
        nodeValue: string,
        ownerDocument: undefined.Document,
        parentNode: undefined.Node,
        prefix: string,
        previousSibling: undefined.Node,
        text: string,
        textContent: string,
        appendChild(newChild: undefined.Node): undefined.Node,
        cloneNode(deep: boolean): undefined.Node,
        getAttributes(): undefined.NamedNodeMap,
        getChildNodes(): undefined.NodeList,
        getFirstChild(): undefined.Node,
        getLastChild(): undefined.Node,
        getLocalName(): string,
        getNamespaceURI(): string,
        getNextSibling(): undefined.Node,
        getNodeName(): string,
        getNodeType(): number,
        getNodeValue(): string,
        getOwnerDocument(): undefined.Document,
        getParentNode(): undefined.Node,
        getPrefix(): string,
        getPreviousSibling(): undefined.Node,
        getText(): string,
        getTextContent(): string,
        hasAttributes(): boolean,
        hasChildNodes(): boolean,
        insertBefore(newChild: undefined.Node, refChild: undefined.Node): undefined.Node,
        isSupported(feature: string, version: string): boolean,
        normalize(): void,
        removeChild(oldChild: undefined.Node): undefined.Node,
        replaceChild(newChild: undefined.Node, oldChild: undefined.Node): undefined.Node,
        setLocalName(localName: string): void,
        setNodeValue(nodeValue: string): void,
        setPrefix(prefix: string): void
    }
    declare     export type CharacterData = {
        data: string,
        length: number,
        appendData(arg: string): void,
        deleteData(offset: number, count: number): void,
        getData(): string,
        getLength(): number,
        insertData(offset: number, arg: string): void,
        replaceData(offset: number, count: number, arg: string): void,
        setData(data: string): void,
        substringData(offset: number, count: number): string
    }
    declare     export type DOMImplementation = {
        createDocument(
            namespaceURI: string,
            qualifiedName: string,
            doctype: undefined.DocumentType): undefined.Document,
        createDocumentType(
            qualifiedName: string,
            publicId: string,
            systemId: string): undefined.DocumentType,
        hasFeature(feature: string, version: string): boolean
    }
    declare     export type Document = {
        doctype: undefined.DocumentType,
        documentElement: undefined.Element,
        implementation: undefined.DOMImplementation,
        createAttribute(name: string): undefined.Attr,
        createAttributeNS(namespaceURI: string, name: string): undefined.Attr,
        createCDATASection(data: string): undefined.CDATASection,
        createComment(data: string): undefined.Comment,
        createDocumentFragment(): undefined.DocumentFragment,
        createElement(tagName: string): undefined.Element,
        createElementNS(namespaceURI: string, name: string): undefined.Element,
        createEntityReference(name: string): undefined.EntityReference,
        createProcessingInstruction(target: string, data: string): undefined.ProcessingInstruction,
        createTextNode(data: string): undefined.Text,
        getDoctype(): undefined.DocumentType,
        getDocumentElement(): undefined.Element,
        getElementById(elementId: string): undefined.Element,
        getElementsByTagName(tagname: string): undefined.NodeList,
        getElementsByTagNameNS(namespaceURI: string, localname: string): undefined.NodeList,
        getImplementation(): undefined.DOMImplementation,
        importNode(importedNode: undefined.Node, deep: boolean): undefined.Node
    }
    declare     export type Attr = {
        name: string,
        ownerElement: undefined.Element,
        specified: boolean,
        value: string,
        getName(): string,
        getOwnerElement(): undefined.Element,
        getSpecified(): boolean,
        getValue(): string,
        setValue(value: string): void
    }
    declare     export type ProcessingInstruction = {
        data: string,
        target: string,
        getData(): string,
        getTarget(): string,
        setData(data: string): void
    }
    declare     export type NamedNodeMap = {
        length: number,
        getLength(): number,
        getNamedItem(name: string): undefined.Node,
        getNamedItemNS(namespaceURI: string, localName: string): undefined.Node,
        item(index: number): undefined.Node,
        removeNamedItem(name: string): undefined.Node,
        removeNamedItemNS(namespaceURI: string, localName: string): undefined.Node,
        setNamedItem(node: undefined.Node): undefined.Node,
        setNamedItemNS(node: undefined.Node): undefined.Node
    }
    declare     export type Text = {
        splitText(offset: number): undefined.Text
    }
    declare     export type Notation = {
        publicId: string,
        systemId: string,
        getPublicId(): string,
        getSystemId(): string
    }
    declare     export type NodeList = {
        length: number,
        getLength(): number,
        item(index: number): undefined.Node
    }
    declare     export type DocumentType = {
        entities: undefined.NamedNodeMap,
        internalSubset: string,
        name: string,
        notations: undefined.NamedNodeMap,
        publicId: string,
        systemId: string,
        getEntities(): undefined.NamedNodeMap,
        getInternalSubset(): string,
        getName(): string,
        getNotations(): undefined.NamedNodeMap,
        getPublicId(): string,
        getSystemId(): string
    }
    declare     export type Element = {
        tagName: string,
        getAttribute(name: string): string,
        getAttributeNS(namespaceURI: string, localName: string): string,
        getAttributeNode(name: string): undefined.Attr,
        getAttributeNodeNS(namespaceURI: string, localName: string): undefined.Attr,
        getElementsByTagName(name: string): undefined.NodeList,
        getElementsByTagNameNS(namespaceURI: string, localName: string): undefined.NodeList,
        getTagName(): string,
        hasAttribute(name: string): boolean,
        hasAttributeNS(namespaceURI: string, localName: string): boolean,
        removeAttribute(name: string): void,
        removeAttributeNS(namespaceURI: string, localName: string): void,
        removeAttributeNode(oldAttr: undefined.Attr): void,
        setAttribute(name: string, value: string): void,
        setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void,
        setAttributeNode(newAttr: undefined.Attr): undefined.Attr,
        setAttributeNodeNS(newAttr: undefined.Attr): undefined.Attr
    }
}


declare export type Ti$IOStream = {
    close(): void,
    isReadable(): boolean,
    isWriteable(): boolean,
    read(buffer: Ti$Buffer, offset?: number, length?: number): number,
    write(buffer: Ti$Buffer, offset?: number, length?: number): number
}

declare module 'UI' {
    declare     export var ANIMATION_CURVE_EASE_IN: number;
    declare     export var ANIMATION_CURVE_EASE_IN_OUT: number;
    declare     export var ANIMATION_CURVE_EASE_OUT: number;
    declare     export var ANIMATION_CURVE_LINEAR: number;
    declare     export var AUTODETECT_ADDRESS: number;
    declare     export var AUTODETECT_ALL: number;
    declare     export var AUTODETECT_CALENDAR: number;
    declare     export var AUTODETECT_LINK: number;
    declare     export var AUTODETECT_NONE: number;
    declare     export var AUTODETECT_PHONE: number;
    declare     export var AUTOLINK_ALL: number;
    declare     export var AUTOLINK_CALENDAR: number;
    declare     export var AUTOLINK_EMAIL_ADDRESSES: number;
    declare     export var AUTOLINK_MAP_ADDRESSES: number;
    declare     export var AUTOLINK_NONE: number;
    declare     export var AUTOLINK_PHONE_NUMBERS: number;
    declare     export var AUTOLINK_URLS: number;
    declare     export var BLEND_MODE_CLEAR: number;
    declare     export var BLEND_MODE_COLOR: number;
    declare     export var BLEND_MODE_COLOR_BURN: number;
    declare     export var BLEND_MODE_COLOR_DODGE: number;
    declare     export var BLEND_MODE_COPY: number;
    declare     export var BLEND_MODE_DARKEN: number;
    declare     export var BLEND_MODE_DESTINATION_ATOP: number;
    declare     export var BLEND_MODE_DESTINATION_IN: number;
    declare     export var BLEND_MODE_DESTINATION_OUT: number;
    declare     export var BLEND_MODE_DESTINATION_OVER: number;
    declare     export var BLEND_MODE_DIFFERENCE: number;
    declare     export var BLEND_MODE_EXCLUSION: number;
    declare     export var BLEND_MODE_HARD_LIGHT: number;
    declare     export var BLEND_MODE_HUE: number;
    declare     export var BLEND_MODE_LIGHTEN: number;
    declare     export var BLEND_MODE_LUMINOSITY: number;
    declare     export var BLEND_MODE_MULTIPLY: number;
    declare     export var BLEND_MODE_NORMAL: number;
    declare     export var BLEND_MODE_OVERLAY: number;
    declare     export var BLEND_MODE_PLUS_DARKER: number;
    declare     export var BLEND_MODE_PLUS_LIGHTER: number;
    declare     export var BLEND_MODE_SATURATION: number;
    declare     export var BLEND_MODE_SCREEN: number;
    declare     export var BLEND_MODE_SOFT_LIGHT: number;
    declare     export var BLEND_MODE_SOURCE_ATOP: number;
    declare     export var BLEND_MODE_SOURCE_IN: number;
    declare     export var BLEND_MODE_SOURCE_OUT: number;
    declare     export var BLEND_MODE_XOR: number;
    declare     export var EXTEND_EDGE_ALL: number;
    declare     export var EXTEND_EDGE_BOTTOM: number;
    declare     export var EXTEND_EDGE_LEFT: number;
    declare     export var EXTEND_EDGE_NONE: number;
    declare     export var EXTEND_EDGE_RIGHT: number;
    declare     export var EXTEND_EDGE_TOP: number;
    declare     export var FACE_DOWN: number;
    declare     export var FACE_UP: number;
    declare     export var FILL: string;
    declare     export var INHERIT: string;
    declare     export var INPUT_BORDERSTYLE_BEZEL: number;
    declare     export var INPUT_BORDERSTYLE_LINE: number;
    declare     export var INPUT_BORDERSTYLE_NONE: number;
    declare     export var INPUT_BORDERSTYLE_ROUNDED: number;
    declare     export var INPUT_BUTTONMODE_ALWAYS: number;
    declare     export var INPUT_BUTTONMODE_NEVER: number;
    declare     export var INPUT_BUTTONMODE_ONBLUR: number;
    declare     export var INPUT_BUTTONMODE_ONFOCUS: number;
    declare     export var KEYBOARD_APPEARANCE_ALERT: number;
    declare     export var KEYBOARD_APPEARANCE_DEFAULT: number;
    declare     export var KEYBOARD_ASCII: number;
    declare     export var KEYBOARD_DECIMAL_PAD: number;
    declare     export var KEYBOARD_DEFAULT: number;
    declare     export var KEYBOARD_EMAIL: number;
    declare     export var KEYBOARD_NAMEPHONE_PAD: number;
    declare     export var KEYBOARD_NUMBERS_PUNCTUATION: number;
    declare     export var KEYBOARD_NUMBER_PAD: number;
    declare     export var KEYBOARD_PHONE_PAD: number;
    declare     export var KEYBOARD_URL: number;
    declare     export var LANDSCAPE_LEFT: number;
    declare     export var LANDSCAPE_RIGHT: number;
    declare     export var LIST_ACCESSORY_TYPE_CHECKMARK: number;
    declare     export var LIST_ACCESSORY_TYPE_DETAIL: number;
    declare     export var LIST_ACCESSORY_TYPE_DISCLOSURE: number;
    declare     export var LIST_ACCESSORY_TYPE_NONE: number;
    declare     export var LIST_ITEM_TEMPLATE_CONTACTS: number;
    declare     export var LIST_ITEM_TEMPLATE_DEFAULT: number;
    declare     export var LIST_ITEM_TEMPLATE_SETTINGS: number;
    declare     export var LIST_ITEM_TEMPLATE_SUBTITLE: number;
    declare     export var NOTIFICATION_DURATION_LONG: number;
    declare     export var NOTIFICATION_DURATION_SHORT: number;
    declare     export var PICKER_TYPE_COUNT_DOWN_TIMER: number;
    declare     export var PICKER_TYPE_DATE: number;
    declare     export var PICKER_TYPE_DATE_AND_TIME: number;
    declare     export var PICKER_TYPE_PLAIN: number;
    declare     export var PICKER_TYPE_TIME: number;
    declare     export var PORTRAIT: number;
    declare     export var RETURNKEY_DEFAULT: number;
    declare     export var RETURNKEY_DONE: number;
    declare     export var RETURNKEY_EMERGENCY_CALL: number;
    declare     export var RETURNKEY_GO: number;
    declare     export var RETURNKEY_GOOGLE: number;
    declare     export var RETURNKEY_JOIN: number;
    declare     export var RETURNKEY_NEXT: number;
    declare     export var RETURNKEY_ROUTE: number;
    declare     export var RETURNKEY_SEARCH: number;
    declare     export var RETURNKEY_SEND: number;
    declare     export var RETURNKEY_YAHOO: number;
    declare     export var SIZE: string;
    declare     export var TEXT_ALIGNMENT_CENTER: any;
    declare     export var TEXT_ALIGNMENT_LEFT: any;
    declare     export var TEXT_ALIGNMENT_RIGHT: any;
    declare     export var TEXT_AUTOCAPITALIZATION_ALL: number;
    declare     export var TEXT_AUTOCAPITALIZATION_NONE: number;
    declare     export var TEXT_AUTOCAPITALIZATION_SENTENCES: number;
    declare     export var TEXT_AUTOCAPITALIZATION_WORDS: number;
    declare     export var TEXT_STYLE_BODY: string;
    declare     export var TEXT_STYLE_CAPTION1: string;
    declare     export var TEXT_STYLE_CAPTION2: string;
    declare     export var TEXT_STYLE_FOOTNOTE: string;
    declare     export var TEXT_STYLE_HEADLINE: string;
    declare     export var TEXT_STYLE_SUBHEADLINE: string;
    declare     export var TEXT_VERTICAL_ALIGNMENT_BOTTOM: any;
    declare     export var TEXT_VERTICAL_ALIGNMENT_CENTER: any;
    declare     export var TEXT_VERTICAL_ALIGNMENT_TOP: any;
    declare     export var UNIT_CM: string;
    declare     export var UNIT_DIP: string;
    declare     export var UNIT_IN: string;
    declare     export var UNIT_MM: string;
    declare     export var UNIT_PX: string;
    declare     export var UNKNOWN: number;
    declare     export var UPSIDE_PORTRAIT: number;
    declare     export var URL_ERROR_AUTHENTICATION: number;
    declare     export var URL_ERROR_BAD_URL: number;
    declare     export var URL_ERROR_CONNECT: number;
    declare     export var URL_ERROR_FILE: number;
    declare     export var URL_ERROR_FILE_NOT_FOUND: number;
    declare     export var URL_ERROR_HOST_LOOKUP: number;
    declare     export var URL_ERROR_REDIRECT_LOOP: number;
    declare     export var URL_ERROR_SSL_FAILED: number;
    declare     export var URL_ERROR_TIMEOUT: number;
    declare     export var URL_ERROR_UNKNOWN: number;
    declare     export var URL_ERROR_UNSUPPORTED_SCHEME: number;
    declare     export var apiName: string;
    declare     export var backgroundColor: string;
    declare     export var backgroundImage: string;
    declare     export var bubbleParent: boolean;
    declare     export var currentTab: undefined.Tab;
    declare     export var currentWindow: undefined.Window;
    declare     export var orientation: number;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function convertUnits(convertFromValue: string, convertToUnits: number): number
    declare     export function create2DMatrix(parameters?: MatrixCreationDict): undefined._2DMatrix
    declare     export function create3DMatrix(parameters?: Dictionary<undefined._3DMatrix>): undefined._3DMatrix
    declare     export function createActivityIndicator(
        parameters?: Dictionary<undefined.ActivityIndicator>): undefined.ActivityIndicator
    declare     export function createAlertDialog(parameters?: Dictionary<undefined.AlertDialog>): undefined.AlertDialog
    declare     export function createAnimation(parameters?: Dictionary<undefined.Animation>): undefined.Animation
    declare     export function createButton(parameters?: Dictionary<undefined.Button>): undefined.Button
    declare     export function createButtonBar(parameters?: Dictionary<undefined.ButtonBar>): undefined.ButtonBar
    declare     export function createCoverFlowView(parameters?: Dictionary<undefined.CoverFlowView>): undefined.CoverFlowView
    declare     export function createDashboardItem(parameters?: Dictionary<undefined.DashboardItem>): undefined.DashboardItem
    declare     export function createDashboardView(parameters?: Dictionary<undefined.DashboardView>): undefined.DashboardView
    declare     export function createEmailDialog(parameters?: Dictionary<undefined.EmailDialog>): undefined.EmailDialog
    declare     export function createImageView(parameters?: Dictionary<undefined.ImageView>): undefined.ImageView
    declare     export function createLabel(parameters?: Dictionary<undefined.Label>): undefined.Label
    declare     export function createListSection(parameters?: Dictionary<undefined.ListSection>): undefined.ListSection
    declare     export function createListView(parameters?: Dictionary<undefined.ListView>): undefined.ListView
    declare     export function createMaskedImage(parameters?: Dictionary<undefined.MaskedImage>): undefined.MaskedImage
    declare     export function createNotification(parameters?: Dictionary<undefined.Notification>): undefined.Notification
    declare     export function createOptionDialog(parameters?: Dictionary<undefined.OptionDialog>): undefined.OptionDialog
    declare     export function createPicker(parameters?: Dictionary<undefined.Picker>): undefined.Picker
    declare     export function createPickerColumn(parameters?: Dictionary<undefined.PickerColumn>): undefined.PickerColumn
    declare     export function createPickerRow(parameters?: Dictionary<undefined.PickerRow>): undefined.PickerRow
    declare     export function createProgressBar(parameters?: Dictionary<undefined.ProgressBar>): undefined.ProgressBar
    declare     export function createRefreshControl(parameters?: Dictionary<undefined.RefreshControl>): undefined.RefreshControl
    declare     export function createSMSDialog(parameters?: Dictionary<undefined.SMSDialog>): undefined.SMSDialog
    declare     export function createScrollView(parameters?: Dictionary<undefined.ScrollView>): undefined.ScrollView
    declare     export function createScrollableView(parameters?: Dictionary<undefined.ScrollableView>): undefined.ScrollableView
    declare     export function createSearchBar(parameters?: Dictionary<undefined.SearchBar>): undefined.SearchBar
    declare     export function createSlider(parameters?: Dictionary<undefined.Slider>): undefined.Slider
    declare     export function createSwitch(parameters?: Dictionary<undefined.Switch>): undefined.Switch
    declare     export function createTab(parameters?: Dictionary<undefined.Tab>): undefined.Tab
    declare     export function createTabGroup(parameters?: Dictionary<undefined.TabGroup>): undefined.TabGroup
    declare     export function createTabbedBar(parameters?: Dictionary<undefined.TabbedBar>): undefined.TabbedBar
    declare     export function createTableView(parameters?: Dictionary<undefined.TableView>): undefined.TableView
    declare     export function createTableViewRow(parameters?: Dictionary<undefined.TableViewRow>): undefined.TableViewRow
    declare     export function createTableViewSection(
        parameters?: Dictionary<undefined.TableViewSection>): undefined.TableViewSection
    declare     export function createTextArea(parameters?: Dictionary<undefined.TextArea>): undefined.TextArea
    declare     export function createTextField(parameters?: Dictionary<undefined.TextField>): undefined.TextField
    declare     export function createToolbar(parameters?: Dictionary<undefined.Toolbar>): undefined.Toolbar
    declare     export function createView(parameters?: Dictionary<undefined.View>): undefined.View
    declare     export function createWebView(parameters?: Dictionary<undefined.WebView>): undefined.WebView
    declare     export function createWindow(parameters?: Dictionary<undefined.Window>): undefined.Window
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getBackgroundColor(): string
    declare     export function getBackgroundImage(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getCurrentTab(): undefined.Tab
    declare     export function getCurrentWindow(): undefined.Window
    declare     export function getOrientation(): number
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBackgroundColor(backgroundColor: string): void
    declare     export function setBackgroundImage(backgroundImage: string): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setCurrentTab(currentTab: undefined.Tab): void
    declare     export function setOrientation(orientation: number): void
    declare module 'iPad' {
        declare         export var POPOVER_ARROW_DIRECTION_ANY: number;
        declare         export var POPOVER_ARROW_DIRECTION_DOWN: number;
        declare         export var POPOVER_ARROW_DIRECTION_LEFT: number;
        declare         export var POPOVER_ARROW_DIRECTION_RIGHT: number;
        declare         export var POPOVER_ARROW_DIRECTION_UNKNOWN: number;
        declare         export var POPOVER_ARROW_DIRECTION_UP: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createDocumentViewer(parameters?: Dictionary<undefined.DocumentViewer>): undefined.DocumentViewer
        declare         export function createPopover(parameters?: Dictionary<undefined.Popover>): undefined.Popover
        declare         export function createSplitWindow(parameters?: Dictionary<undefined.SplitWindow>): undefined.SplitWindow
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type SplitWindow = {
            detailView: undefined.View,
            masterView: undefined.View,
            showMasterInPortrait: boolean,
            getDetailView(): undefined.View,
            getMasterView(): undefined.View,
            getShowMasterInPortrait(): boolean,
            setShowMasterInPortrait(showMasterInPortrait: boolean): void
        }
        declare         export type DocumentViewer = {
            setUrl(url: string): void,
            show(): void
        }
        declare         export type Popover = {
            arrowDirection: number,
            contentView: undefined.View,
            height: any,
            leftNavButton: any,
            passthroughViews: Array<undefined.View>,
            rightNavButton: any,
            title: string,
            width: any,
            add(): void,
            getArrowDirection(): number,
            getContentView(): undefined.View,
            getHeight(): any,
            getLeftNavButton(): any,
            getPassthroughViews(): Array<undefined.View>,
            getRightNavButton(): any,
            getTitle(): string,
            getWidth(): any,
            hide(options: PopoverParams): void,
            remove(): void,
            setArrowDirection(arrowDirection: number): void,
            setContentView(contentView: undefined.View): void,
            setHeight(height: number): void,
            setHeight(height: string): void,
            setLeftNavButton(leftNavButton: any): void,
            setPassthroughViews(passthroughViews: Array<undefined.View>): void,
            setRightNavButton(rightNavButton: any): void,
            setTitle(title: string): void,
            setWidth(width: number): void,
            setWidth(width: string): void,
            show(params: PopoverParams): void
        }
    }

    declare module 'iOS' {
        declare         export var AD_SIZE_LANDSCAPE: string;
        declare         export var AD_SIZE_PORTRAIT: string;
        declare         export var ANIMATION_CURVE_EASE_IN: number;
        declare         export var ANIMATION_CURVE_EASE_IN_OUT: number;
        declare         export var ANIMATION_CURVE_EASE_OUT: number;
        declare         export var ANIMATION_CURVE_LINEAR: number;
        declare         export var ATTRIBUTE_BACKGROUND_COLOR: number;
        declare         export var ATTRIBUTE_BASELINE_OFFSET: number;
        declare         export var ATTRIBUTE_EXPANSION: number;
        declare         export var ATTRIBUTE_FONT: number;
        declare         export var ATTRIBUTE_FOREGROUND_COLOR: number;
        declare         export var ATTRIBUTE_KERN: number;
        declare         export var ATTRIBUTE_LETTERPRESS_STYLE: number;
        declare         export var ATTRIBUTE_LIGATURE: number;
        declare         export var ATTRIBUTE_LINK: number;
        declare         export var ATTRIBUTE_OBLIQUENESS: number;
        declare         export var ATTRIBUTE_SHADOW: number;
        declare         export var ATTRIBUTE_STRIKETHROUGH_COLOR: number;
        declare         export var ATTRIBUTE_STRIKETHROUGH_STYLE: number;
        declare         export var ATTRIBUTE_STROKE_COLOR: number;
        declare         export var ATTRIBUTE_STROKE_WIDTH: number;
        declare         export var ATTRIBUTE_TEXT_EFFECT: number;
        declare         export var ATTRIBUTE_UNDERLINES_STYLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_BY_WORD: number;
        declare         export var ATTRIBUTE_UNDERLINE_COLOR: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_NONE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_THICK: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;
        declare         export var AUTODETECT_ADDRESS: number;
        declare         export var AUTODETECT_ALL: number;
        declare         export var AUTODETECT_CALENDAR: number;
        declare         export var AUTODETECT_LINK: number;
        declare         export var AUTODETECT_NONE: number;
        declare         export var AUTODETECT_PHONE: number;
        declare         export var BLEND_MODE_CLEAR: number;
        declare         export var BLEND_MODE_COLOR: number;
        declare         export var BLEND_MODE_COLOR_BURN: number;
        declare         export var BLEND_MODE_COLOR_DODGE: number;
        declare         export var BLEND_MODE_COPY: number;
        declare         export var BLEND_MODE_DARKEN: number;
        declare         export var BLEND_MODE_DESTINATION_ATOP: number;
        declare         export var BLEND_MODE_DESTINATION_IN: number;
        declare         export var BLEND_MODE_DESTINATION_OUT: number;
        declare         export var BLEND_MODE_DESTINATION_OVER: number;
        declare         export var BLEND_MODE_DIFFERENCE: number;
        declare         export var BLEND_MODE_EXCLUSION: number;
        declare         export var BLEND_MODE_HARD_LIGHT: number;
        declare         export var BLEND_MODE_HUE: number;
        declare         export var BLEND_MODE_LIGHTEN: number;
        declare         export var BLEND_MODE_LUMINOSITY: number;
        declare         export var BLEND_MODE_MULTIPLY: number;
        declare         export var BLEND_MODE_NORMAL: number;
        declare         export var BLEND_MODE_OVERLAY: number;
        declare         export var BLEND_MODE_PLUS_DARKER: number;
        declare         export var BLEND_MODE_PLUS_LIGHTER: number;
        declare         export var BLEND_MODE_SATURATION: number;
        declare         export var BLEND_MODE_SCREEN: number;
        declare         export var BLEND_MODE_SOFT_LIGHT: number;
        declare         export var BLEND_MODE_SOURCE_ATOP: number;
        declare         export var BLEND_MODE_SOURCE_IN: number;
        declare         export var BLEND_MODE_SOURCE_OUT: number;
        declare         export var BLEND_MODE_XOR: number;
        declare         export var CLIP_MODE_DEFAULT: number;
        declare         export var CLIP_MODE_DISABLED: number;
        declare         export var CLIP_MODE_ENABLED: number;
        declare         export var COLLISION_MODE_ALL: number;
        declare         export var COLLISION_MODE_BOUNDARY: number;
        declare         export var COLLISION_MODE_ITEM: number;
        declare         export var COLOR_GROUP_TABLEVIEW_BACKGROUND: string;
        declare         export var COLOR_SCROLLVIEW_BACKGROUND: string;
        declare         export var COLOR_UNDER_PAGE_BACKGROUND: string;
        declare         export var COLOR_VIEW_FLIPSIDE_BACKGROUND: string;
        declare         export var PUSH_MODE_CONTINUOUS: number;
        declare         export var PUSH_MODE_INSTANTANEOUS: number;
        declare         export var SCROLL_DECELERATION_RATE_FAST: number;
        declare         export var SCROLL_DECELERATION_RATE_NORMAL: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_OTHER: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_RELOAD: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function create3DMatrix(parameters?: Dictionary<undefined._3DMatrix>): undefined._3DMatrix
        declare         export function createAdView(parameters?: Dictionary<undefined.AdView>): undefined.AdView
        declare         export function createAnchorAttachmentBehavior(
            parameters?: Dictionary<undefined.AnchorAttachmentBehavior>): undefined.AnchorAttachmentBehavior
        declare         export function createAnimator(parameters?: Dictionary<undefined.Animator>): undefined.Animator
        declare         export function createAttributedString(
            parameters?: Dictionary<undefined.AttributedString>): undefined.AttributedString
        declare         export function createCollisionBehavior(
            parameters?: Dictionary<undefined.CollisionBehavior>): undefined.CollisionBehavior
        declare         export function createCoverFlowView(parameters?: Dictionary<undefined.CoverFlowView>): undefined.CoverFlowView
        declare         export function createDocumentViewer(parameters?: Dictionary<undefined.DocumentViewer>): undefined.DocumentViewer
        declare         export function createDynamicItemBehavior(
            parameters?: Dictionary<undefined.DynamicItemBehavior>): undefined.DynamicItemBehavior
        declare         export function createGravityBehavior(parameters?: Dictionary<undefined.GravityBehavior>): undefined.GravityBehavior
        declare         export function createNavigationWindow(
            parameters?: Dictionary<undefined.NavigationWindow>): undefined.NavigationWindow
        declare         export function createPushBehavior(parameters?: Dictionary<undefined.PushBehavior>): undefined.PushBehavior
        declare         export function createSnapBehavior(parameters?: Dictionary<undefined.SnapBehavior>): undefined.SnapBehavior
        declare         export function createTabbedBar(parameters?: Dictionary<undefined.TabbedBar>): undefined.TabbedBar
        declare         export function createToolbar(parameters?: Dictionary<undefined.Toolbar>): undefined.Toolbar
        declare         export function createTransitionAnimation(transition: transitionAnimationParam): Ti$Proxy
        declare         export function createViewAttachmentBehavior(
            parameters?: Dictionary<undefined.ViewAttachmentBehavior>): undefined.ViewAttachmentBehavior
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type Animator = {
            behaviors: Array<Ti$Proxy>,
            referenceView: undefined.View,
            running: boolean,
            addBehavior(behavior: Ti$Proxy): void,
            getBehaviors(): Array<Ti$Proxy>,
            getReferenceView(): undefined.View,
            getRunning(): boolean,
            removeAllBehaviors(): void,
            removeBehavior(behavior: Ti$Proxy): void,
            setBehaviors(behaviors: Array<Ti$Proxy>): void,
            setReferenceView(referenceView: undefined.View): void,
            startAnimator(): void,
            stopAnimator(): void,
            updateItemUsingCurrentState(item: undefined.View): void
        }
        declare         export type DynamicItemBehavior = {
            allowsRotation: boolean,
            angularResistance: number,
            density: number,
            elasticity: number,
            friction: number,
            items: Array<undefined.View>,
            resistance: number,
            addAngularVelocityForItem(item: undefined.View, velocity: number): void,
            addItem(item: undefined.View): void,
            addLinearVelocityForItem(item: undefined.View, velocity: Point): void,
            angularVelocityForItem(item: undefined.View): number,
            getAllowsRotation(): boolean,
            getAngularResistance(): number,
            getDensity(): number,
            getElasticity(): number,
            getFriction(): number,
            getItems(): Array<undefined.View>,
            getResistance(): number,
            linearVelocityForItem(item: undefined.View): Point,
            removeItem(item: undefined.View): void,
            setAllowsRotation(allowsRotation: boolean): void,
            setAngularResistance(angularResistance: number): void,
            setDensity(density: number): void,
            setElasticity(elasticity: number): void,
            setFriction(friction: number): void,
            setResistance(resistance: number): void
        }
        declare         export type SnapBehavior = {
            damping: number,
            item: undefined.View,
            snapPoint: Point,
            getDamping(): number,
            getItem(): undefined.View,
            getSnapPoint(): Point,
            setDamping(damping: number): void,
            setItem(item: undefined.View): void,
            setSnapPoint(snapPoint: Point): void
        }
        declare         export type GravityBehavior = {
            angle: number,
            gravityDirection: Point,
            items: Array<undefined.View>,
            magnitude: number,
            addItem(item: undefined.View): void,
            getAngle(): number,
            getGravityDirection(): Point,
            getItems(): Array<undefined.View>,
            getMagnitude(): number,
            removeItem(item: undefined.View): void,
            setAngle(angle: number): void,
            setGravityDirection(gravityDirection: Point): void,
            setMagnitude(magnitude: number): void
        }
        declare         export type CollisionBehavior = {
            boundaryIdentifiers: Array<BoundaryIdentifier>,
            collisionMode: number,
            items: Array<undefined.View>,
            referenceInsets: ReferenceInsets,
            treatReferenceAsBoundary: boolean,
            addBoundary(boundary: BoundaryIdentifier): void,
            addItem(item: undefined.View): void,
            getBoundaryIdentifiers(): Array<BoundaryIdentifier>,
            getCollisionMode(): number,
            getItems(): Array<undefined.View>,
            getReferenceInsets(): ReferenceInsets,
            getTreatReferenceAsBoundary(): boolean,
            removeAllBoundaries(): void,
            removeBoundary(boundary: BoundaryIdentifier): void,
            removeItem(item: undefined.View): void,
            setCollisionMode(collisionMode: number): void,
            setReferenceInsets(referenceInsets: ReferenceInsets): void,
            setTreatReferenceAsBoundary(treatReferenceAsBoundary: boolean): void
        }
        declare         export type Toolbar = {
            barColor: string,
            borderBottom: boolean,
            borderTop: boolean,
            extendBackground: boolean,
            items: Array<undefined.View>,
            translucent: boolean,
            getBarColor(): string,
            getBorderBottom(): boolean,
            getBorderTop(): boolean,
            getExtendBackground(): boolean,
            getItems(): Array<undefined.View>,
            getTranslucent(): boolean,
            setBarColor(barColor: string): void,
            setBorderBottom(borderBottom: boolean): void,
            setBorderTop(borderTop: boolean): void,
            setItems(items: Array<undefined.View>): void,
            setTranslucent(translucent: boolean): void
        }
        declare         export type ViewAttachmentBehavior = {
            anchorItem: undefined.View,
            anchorOffset: Point,
            damping: number,
            distance: number,
            frequency: number,
            item: undefined.View,
            itemOffset: Point,
            getAnchorItem(): undefined.View,
            getAnchorOffset(): Point,
            getDamping(): number,
            getDistance(): number,
            getFrequency(): number,
            getItem(): undefined.View,
            getItemOffset(): Point,
            setAnchorItem(anchorItem: undefined.View): void,
            setAnchorOffset(anchorOffset: Point): void,
            setDamping(damping: number): void,
            setDistance(distance: number): void,
            setFrequency(frequency: number): void,
            setItem(item: undefined.View): void,
            setItemOffset(itemOffset: Point): void
        }
        declare         export type PushBehavior = {
            active: boolean,
            angle: number,
            items: Array<undefined.View>,
            magnitude: number,
            pushDirection: Point,
            pushMode: number,
            addItem(item: undefined.View): void,
            getActive(): boolean,
            getAngle(): number,
            getItems(): Array<undefined.View>,
            getMagnitude(): number,
            getPushDirection(): Point,
            getPushMode(): number,
            removeItem(item: undefined.View): void,
            setActive(active: boolean): void,
            setAngle(angle: number): void,
            setMagnitude(magnitude: number): void,
            setPushDirection(pushDirection: Point): void,
            setPushMode(pushMode: number): void
        }
        declare         export type CoverFlowView = {
            images: any,
            selected: number,
            getImages(): any,
            getSelected(): number,
            setImage(index: number, image: string): void,
            setImage(image: Ti$Blob): void,
            setImage(image: undefined.File): void,
            setImage(index: number, image: CoverFlowImageType): void,
            setImages(images: Array<Global$String>): void,
            setImages(images: Array<Ti$Blob>): void,
            setImages(images: Array<undefined.File>): void,
            setImages(images: Array<CoverFlowImageType>): void,
            setSelected(selected: number): void
        }
        declare         export type DocumentViewer = {
            setUrl(url: string): void,
            show(): void
        }
        declare         export type NavigationWindow = {
            window: undefined.Window,
            closeWindow(window: undefined.Window, options: Dictionary<Object>): void,
            getWindow(): undefined.Window,
            openWindow(window: undefined.Window, options: Dictionary<Object>): void
        }
        declare         export type AttributedString = {
            attributes: Array<Attribute>,
            text: string,
            addAttribute(attribute: Attribute): void,
            getAttributes(): Array<Attribute>,
            getText(): string,
            setAttributes(attributes: Array<Attribute>): void,
            setText(text: string): void
        }
        declare         export type AnchorAttachmentBehavior = {
            anchor: Point,
            damping: number,
            distance: number,
            frequency: number,
            item: undefined.View,
            offset: Point,
            getAnchor(): Point,
            getDamping(): number,
            getDistance(): number,
            getFrequency(): number,
            getItem(): undefined.View,
            getOffset(): Point,
            setAnchor(anchor: Point): void,
            setDamping(damping: number): void,
            setDistance(distance: number): void,
            setFrequency(frequency: number): void,
            setItem(item: undefined.View): void,
            setOffset(offset: Point): void
        }
        declare         export type TabbedBar = {
            index: number,
            labels: any,
            style: number,
            getIndex(): number,
            getLabels(): any,
            getStyle(): number,
            setIndex(index: number): void,
            setLabels(labels: Array<Global$String>): void,
            setLabels(labels: Array<BarItemType>): void,
            setStyle(style: number): void
        }
        declare         export type _3DMatrix = {
            m11: number,
            m12: number,
            m13: number,
            m14: number,
            m21: number,
            m22: number,
            m23: number,
            m24: number,
            m31: number,
            m32: number,
            m33: number,
            m34: number,
            m41: number,
            m42: number,
            m43: number,
            m44: number,
            getM11(): number,
            getM12(): number,
            getM13(): number,
            getM14(): number,
            getM21(): number,
            getM22(): number,
            getM23(): number,
            getM24(): number,
            getM31(): number,
            getM32(): number,
            getM33(): number,
            getM34(): number,
            getM41(): number,
            getM42(): number,
            getM43(): number,
            getM44(): number,
            invert(): undefined._3DMatrix,
            multiply(t2: undefined._3DMatrix): undefined._3DMatrix,
            rotate(angle: number, x: number, y: number, z: number): undefined._3DMatrix,
            scale(sx: number, sy: number, sz: number): undefined._3DMatrix,
            setM11(m11: number): void,
            setM12(m12: number): void,
            setM13(m13: number): void,
            setM14(m14: number): void,
            setM21(m21: number): void,
            setM22(m22: number): void,
            setM23(m23: number): void,
            setM24(m24: number): void,
            setM31(m31: number): void,
            setM32(m32: number): void,
            setM33(m33: number): void,
            setM34(m34: number): void,
            setM41(m41: number): void,
            setM42(m42: number): void,
            setM43(m43: number): void,
            setM44(m44: number): void,
            translate(tx: number, ty: number, tz: number): undefined._3DMatrix
        }
        declare         export type AdView = {
            adSize: string,
            cancelAction(): void,
            getAdSize(): string,
            setAdSize(adSize: string): void
        }
        declare         export var BACKGROUNDFETCHINTERVAL_MIN: number;
        declare         export var BACKGROUNDFETCHINTERVAL_NEVER: number;
        declare         export var EVENT_ACCESSIBILITY_LAYOUT_CHANGED: string;
        declare         export var EVENT_ACCESSIBILITY_SCREEN_CHANGED: string;
        declare         export var USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: number;
        declare         export var USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: number;
        declare         export var USER_NOTIFICATION_TYPE_ALERT: number;
        declare         export var USER_NOTIFICATION_TYPE_BADGE: number;
        declare         export var USER_NOTIFICATION_TYPE_NONE: number;
        declare         export var USER_NOTIFICATION_TYPE_SOUND: number;
        declare         export var applicationOpenSettingsURL: string;
        declare         export var currentUserNotificationSettings: UserNotificationSettings;
        declare         export function cancelAllLocalNotifications(): void
        declare         export function cancelLocalNotification(id: number): void
        declare         export function createUserNotificationAction(
            parameters?: Dictionary<undefined.UserNotificationAction>): undefined.UserNotificationAction
        declare         export function createUserNotificationCategory(
            parameters?: Dictionary<undefined.UserNotificationCategory>): undefined.UserNotificationCategory
        declare         export function endBackgroundHandler(handlerID: string): void
        declare         export function getApplicationOpenSettingsURL(): string
        declare         export function getCurrentUserNotificationSettings(): UserNotificationSettings
        declare         export function registerBackgroundService(params: Dictionary<Object>): undefined.BackgroundService
        declare         export function registerUserNotificationSettings(params: UserNotificationSettings): void
        declare         export function scheduleLocalNotification(params: NotificationParams): undefined.LocalNotification
        declare         export function setMinimumBackgroundFetchInterval(fetchInterval: number): void
        declare         export type UserNotificationAction = {
            activationMode: number,
            authenticationRequired: boolean,
            destructive: boolean,
            identifier: string,
            title: string,
            getActivationMode(): number,
            getAuthenticationRequired(): boolean,
            getDestructive(): boolean,
            getIdentifier(): string,
            getTitle(): string
        }
        declare         export type LocalNotification = {
            cancel(): void
        }
        declare         export type UserNotificationCategory = {
            actionsForDefaultContext: Array<undefined.UserNotificationAction>,
            actionsForMinimalContext: Array<undefined.UserNotificationAction>,
            identifier: string,
            getActionsForDefaultContext(): Array<undefined.UserNotificationAction>,
            getActionsForMinimalContext(): Array<undefined.UserNotificationAction>,
            getIdentifier(): string
        }
        declare         export type BackgroundService = {
            url: string,
            getUrl(): string,
            stop(): void,
            unregister(): void
        }
    }

    declare module 'iPhone' {
        declare         export var MODAL_PRESENTATION_CURRENT_CONTEXT: number;
        declare         export var MODAL_PRESENTATION_FORMSHEET: number;
        declare         export var MODAL_PRESENTATION_FULLSCREEN: number;
        declare         export var MODAL_PRESENTATION_PAGESHEET: number;
        declare         export var MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;
        declare         export var MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;
        declare         export var MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;
        declare         export var MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;
        declare         export var apiName: string;
        declare         export var appBadge: number;
        declare         export var appSupportsShakeToEdit: boolean;
        declare         export var bubbleParent: boolean;
        declare         export var statusBarHidden: boolean;
        declare         export var statusBarStyle: number;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createNavigationGroup(parameters?: Dictionary<undefined.NavigationGroup>): undefined.NavigationGroup
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getAppBadge(): number
        declare         export function getAppSupportsShakeToEdit(): boolean
        declare         export function getBubbleParent(): boolean
        declare         export function getStatusBarHidden(): boolean
        declare         export function getStatusBarStyle(): number
        declare         export function hideStatusBar(params?: hideStatusBarParams): void
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setAppBadge(appBadge: number): void
        declare         export function setAppSupportsShakeToEdit(appSupportsShakeToEdit: boolean): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export function showStatusBar(params?: showStatusBarParams): void
        declare         export type NavigationGroup = {
            window: undefined.Window,
            close(window: undefined.Window, options: Dictionary<Object>): void,
            getWindow(): undefined.Window,
            open(window: undefined.Window, options: Dictionary<Object>): void
        }
    }

    declare     export type TextArea = {
        appearance: number,
        attributedString: undefined.AttributedString,
        autoLink: number,
        autocapitalization: number,
        autocorrect: boolean,
        clearOnEdit: boolean,
        color: string,
        editable: boolean,
        ellipsize: boolean,
        enableReturnKey: boolean,
        font: Font,
        handleLinks: boolean,
        hintText: string,
        keyboardToolbar: any,
        keyboardToolbarColor: string,
        keyboardToolbarHeight: number,
        keyboardType: number,
        maxLength: number,
        returnKeyType: number,
        scrollable: boolean,
        scrollsToTop: boolean,
        selection: textAreaSelectedParams,
        suppressReturn: boolean,
        textAlign: any,
        value: string,
        verticalAlign: any,
        blur(): void,
        focus(): void,
        getAppearance(): number,
        getAttributedString(): undefined.AttributedString,
        getAutoLink(): number,
        getAutocapitalization(): number,
        getAutocorrect(): boolean,
        getClearOnEdit(): boolean,
        getColor(): string,
        getEditable(): boolean,
        getEllipsize(): boolean,
        getEnableReturnKey(): boolean,
        getFont(): Font,
        getHandleLinks(): boolean,
        getHintText(): string,
        getKeyboardToolbar(): any,
        getKeyboardToolbarColor(): string,
        getKeyboardToolbarHeight(): number,
        getKeyboardType(): number,
        getMaxLength(): number,
        getReturnKeyType(): number,
        getScrollable(): boolean,
        getScrollsToTop(): boolean,
        getSelection(): textAreaSelectedParams,
        getSuppressReturn(): boolean,
        getTextAlign(): any,
        getValue(): string,
        getVerticalAlign(): any,
        hasText(): boolean,
        setAppearance(appearance: number): void,
        setAttributedString(attributedString: undefined.AttributedString): void,
        setAutoLink(autoLink: number): void,
        setAutocapitalization(autocapitalization: number): void,
        setAutocorrect(autocorrect: boolean): void,
        setClearOnEdit(clearOnEdit: boolean): void,
        setColor(color: string): void,
        setEditable(editable: boolean): void,
        setEllipsize(ellipsize: boolean): void,
        setEnableReturnKey(enableReturnKey: boolean): void,
        setFont(font: Font): void,
        setHandleLinks(handleLinks: boolean): void,
        setHintText(hintText: string): void,
        setKeyboardToolbar(keyboardToolbar: Array<undefined.View>): void,
        setKeyboardToolbar(keyboardToolbar: undefined.Toolbar): void,
        setKeyboardToolbarColor(keyboardToolbarColor: string): void,
        setKeyboardToolbarHeight(keyboardToolbarHeight: number): void,
        setKeyboardType(keyboardType: number): void,
        setMaxLength(maxLength: number): void,
        setReturnKeyType(returnKeyType: number): void,
        setScrollable(scrollable: boolean): void,
        setScrollsToTop(scrollsToTop: boolean): void,
        setSelection(start: number, end: number): void,
        setSuppressReturn(suppressReturn: boolean): void,
        setTextAlign(textAlign: string): void,
        setTextAlign(textAlign: number): void,
        setValue(value: string): void,
        setVerticalAlign(verticalAlign: number): void,
        setVerticalAlign(verticalAlign: string): void
    }
    declare     export type View = {
        accessibilityHidden: boolean,
        accessibilityHint: string,
        accessibilityLabel: string,
        accessibilityValue: string,
        anchorPoint: Point,
        animatedCenter: Point,
        backgroundColor: string,
        backgroundDisabledColor: string,
        backgroundDisabledImage: string,
        backgroundFocusedColor: string,
        backgroundFocusedImage: string,
        backgroundGradient: Gradient,
        backgroundImage: string,
        backgroundLeftCap: number,
        backgroundRepeat: boolean,
        backgroundSelectedColor: string,
        backgroundSelectedImage: string,
        backgroundTopCap: number,
        borderColor: string,
        borderRadius: number,
        borderWidth: number,
        bottom: any,
        center: Point,
        children: Array<undefined.View>,
        clipMode: number,
        enabled: boolean,
        focusable: boolean,
        height: any,
        horizontalWrap: boolean,
        keepScreenOn: boolean,
        layout: string,
        left: any,
        opacity: number,
        overrideCurrentAnimation: boolean,
        pullBackgroundColor: string,
        rect: Dimension,
        right: any,
        size: Dimension,
        softKeyboardOnFocus: number,
        tintColor: any,
        top: any,
        touchEnabled: boolean,
        transform: any,
        viewShadowColor: string,
        viewShadowOffset: Point,
        viewShadowRadius: number,
        visible: boolean,
        width: any,
        zIndex: number,
        add(view: undefined.View): void,
        animate(animation: undefined.Animation, callback: (...args: any[]) => any): void,
        animate(
            animation: Dictionary<undefined.Animation>,
            callback: (...args: any[]) => any): void,
        convertPointToView(point: Point, destinationView: undefined.View): Point,
        finishLayout(): void,
        getAccessibilityHidden(): boolean,
        getAccessibilityHint(): string,
        getAccessibilityLabel(): string,
        getAccessibilityValue(): string,
        getAnchorPoint(): Point,
        getAnimatedCenter(): Point,
        getBackgroundColor(): string,
        getBackgroundDisabledColor(): string,
        getBackgroundDisabledImage(): string,
        getBackgroundFocusedColor(): string,
        getBackgroundFocusedImage(): string,
        getBackgroundGradient(): Gradient,
        getBackgroundImage(): string,
        getBackgroundLeftCap(): number,
        getBackgroundRepeat(): boolean,
        getBackgroundSelectedColor(): string,
        getBackgroundSelectedImage(): string,
        getBackgroundTopCap(): number,
        getBorderColor(): string,
        getBorderRadius(): number,
        getBorderWidth(): number,
        getBottom(): any,
        getCenter(): Point,
        getChildren(): Array<undefined.View>,
        getClipMode(): number,
        getEnabled(): boolean,
        getFocusable(): boolean,
        getHeight(): any,
        getHorizontalWrap(): boolean,
        getKeepScreenOn(): boolean,
        getLayout(): string,
        getLeft(): any,
        getOpacity(): number,
        getOverrideCurrentAnimation(): boolean,
        getPullBackgroundColor(): string,
        getRect(): Dimension,
        getRight(): any,
        getSize(): Dimension,
        getSoftKeyboardOnFocus(): number,
        getTintColor(): string,
        getTop(): any,
        getTouchEnabled(): boolean,
        getTransform(): any,
        getViewShadowColor(): string,
        getViewShadowOffset(): Point,
        getViewShadowRadius(): number,
        getVisible(): boolean,
        getWidth(): any,
        getZIndex(): number,
        hide(): void,
        remove(view: undefined.View): void,
        removeAllChildren(): void,
        setAccessibilityHidden(accessibilityHidden: boolean): void,
        setAccessibilityHint(accessibilityHint: string): void,
        setAccessibilityLabel(accessibilityLabel: string): void,
        setAccessibilityValue(accessibilityValue: string): void,
        setAnchorPoint(anchorPoint: Point): void,
        setBackgroundColor(backgroundColor: string): void,
        setBackgroundDisabledColor(backgroundDisabledColor: string): void,
        setBackgroundDisabledImage(backgroundDisabledImage: string): void,
        setBackgroundFocusedColor(backgroundFocusedColor: string): void,
        setBackgroundFocusedImage(backgroundFocusedImage: string): void,
        setBackgroundGradient(backgroundGradient: Gradient): void,
        setBackgroundImage(backgroundImage: string): void,
        setBackgroundLeftCap(backgroundLeftCap: number): void,
        setBackgroundRepeat(backgroundRepeat: boolean): void,
        setBackgroundSelectedColor(backgroundSelectedColor: string): void,
        setBackgroundSelectedImage(backgroundSelectedImage: string): void,
        setBackgroundTopCap(backgroundTopCap: number): void,
        setBorderColor(borderColor: string): void,
        setBorderRadius(borderRadius: number): void,
        setBorderWidth(borderWidth: number): void,
        setBottom(bottom: number): void,
        setBottom(bottom: string): void,
        setCenter(center: Point): void,
        setClipMode(clipMode: number): void,
        setEnabled(enabled: boolean): void,
        setFocusable(focusable: boolean): void,
        setHeight(height: number): void,
        setHeight(height: string): void,
        setHorizontalWrap(horizontalWrap: boolean): void,
        setKeepScreenOn(keepScreenOn: boolean): void,
        setLayout(layout: string): void,
        setLeft(left: number): void,
        setLeft(left: string): void,
        setOpacity(opacity: number): void,
        setPullBackgroundColor(pullBackgroundColor: string): void,
        setRight(right: number): void,
        setRight(right: string): void,
        setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,
        setTintColor(tintColor: string): void,
        setTop(top: number): void,
        setTop(top: string): void,
        setTouchEnabled(touchEnabled: boolean): void,
        setTransform(transform: undefined._2DMatrix): void,
        setTransform(transform: undefined._3DMatrix): void,
        setViewShadowColor(viewShadowColor: string): void,
        setViewShadowOffset(viewShadowOffset: Point): void,
        setViewShadowRadius(viewShadowRadius: number): void,
        setVisible(visible: boolean): void,
        setWidth(width: number): void,
        setWidth(width: string): void,
        setZIndex(zIndex: number): void,
        show(): void,
        startLayout(): void,
        toImage(callback?: (...args: any[]) => any, honorScaleFactor?: boolean): Ti$Blob,
        updateLayout(params: Dictionary<Object>): void
    }
    declare     export type Switch = {
        color: string,
        font: Font,
        onTintColor: string,
        style: number,
        textAlign: any,
        thumbTintColor: string,
        tintColor: string,
        title: string,
        titleOff: string,
        titleOn: string,
        value: boolean,
        verticalAlign: any,
        getColor(): string,
        getFont(): Font,
        getOnTintColor(): string,
        getStyle(): number,
        getTextAlign(): any,
        getThumbTintColor(): string,
        getTitle(): string,
        getTitleOff(): string,
        getTitleOn(): string,
        getValue(): boolean,
        getVerticalAlign(): any,
        setColor(color: string): void,
        setFont(font: Font): void,
        setOnTintColor(onTintColor: string): void,
        setStyle(style: number): void,
        setTextAlign(textAlign: string): void,
        setTextAlign(textAlign: number): void,
        setThumbTintColor(thumbTintColor: string): void,
        setTitle(title: string): void,
        setTitleOff(titleOff: string): void,
        setTitleOn(titleOn: string): void,
        setValue(value: boolean): void,
        setVerticalAlign(verticalAlign: number): void,
        setVerticalAlign(verticalAlign: string): void
    }
    declare     export type DashboardItem = {
        badge: number,
        canDelete: boolean,
        image: any,
        selectedImage: any,
        getBadge(): number,
        getCanDelete(): boolean,
        getImage(): any,
        getSelectedImage(): any,
        setBadge(badge: number): void,
        setCanDelete(canDelete: boolean): void,
        setImage(image: string): void,
        setImage(image: Ti$Blob): void,
        setSelectedImage(selectedImage: string): void,
        setSelectedImage(selectedImage: Ti$Blob): void
    }
    declare     export type Tab = {
        active: boolean,
        activeIcon: string,
        activeIconIsMask: any,
        badge: string,
        icon: string,
        iconIsmask: any,
        title: string,
        titleid: string,
        window: undefined.Window,
        close(window: undefined.Window, options?: any): void,
        getActive(): boolean,
        getActiveIcon(): string,
        getActiveIconIsMask(): boolean,
        getBadge(): string,
        getIcon(): string,
        getIconIsmask(): boolean,
        getTitle(): string,
        getTitleid(): string,
        getWindow(): undefined.Window,
        open(window: undefined.Window, options: any): void,
        setActive(active: boolean): void,
        setActiveIcon(activeIcon: string): void,
        setActiveIconIsMask(activeIconIsMask: boolean): void,
        setBadge(badge: string): void,
        setIcon(icon: string): void,
        setIconIsmask(iconIsmask: boolean): void,
        setTitle(title: string): void,
        setTitleid(titleid: string): void,
        setWindow(window: undefined.Window): void
    }
    declare     export type TableViewRow = {
        className: string,
        color: string,
        editable: boolean,
        font: Font,
        hasCheck: boolean,
        hasChild: boolean,
        hasDetail: boolean,
        indentionLevel: number,
        leftImage: string,
        moveable: boolean,
        rightImage: string,
        selectedBackgroundColor: string,
        selectedBackgroundImage: string,
        selectedColor: string,
        selectionStyle: number,
        title: string,
        getClassName(): string,
        getColor(): string,
        getEditable(): boolean,
        getFont(): Font,
        getHasCheck(): boolean,
        getHasChild(): boolean,
        getHasDetail(): boolean,
        getIndentionLevel(): number,
        getLeftImage(): string,
        getMoveable(): boolean,
        getRightImage(): string,
        getSelectedBackgroundColor(): string,
        getSelectedBackgroundImage(): string,
        getSelectedColor(): string,
        getSelectionStyle(): number,
        getTitle(): string,
        setClassName(className: string): void,
        setColor(color: string): void,
        setEditable(editable: boolean): void,
        setFont(font: Font): void,
        setHasCheck(hasCheck: boolean): void,
        setHasChild(hasChild: boolean): void,
        setHasDetail(hasDetail: boolean): void,
        setIndentionLevel(indentionLevel: number): void,
        setLeftImage(leftImage: string): void,
        setMoveable(moveable: boolean): void,
        setRightImage(rightImage: string): void,
        setSelectedBackgroundColor(selectedBackgroundColor: string): void,
        setSelectedBackgroundImage(selectedBackgroundImage: string): void,
        setSelectedColor(selectedColor: string): void,
        setSelectionStyle(selectionStyle: number): void,
        setTitle(title: string): void
    }
    declare     export type PickerRow = {
        color: string,
        font: Font,
        fontSize: number,
        title: string,
        getColor(): string,
        getFont(): Font,
        getFontSize(): number,
        getTitle(): string,
        setColor(color: string): void,
        setFont(font: Font): void,
        setFontSize(fontSize: number): void,
        setTitle(title: string): void
    }
    declare     export type ButtonBar = {
        index: number,
        labels: any,
        style: number,
        getIndex(): number,
        getLabels(): any,
        getStyle(): number,
        setIndex(index: number): void,
        setLabels(labels: Array<Global$String>): void,
        setLabels(labels: Array<BarItemType>): void,
        setStyle(style: number): void
    }
    declare     export type Slider = {
        disabledLeftTrackImage: string,
        disabledRightTrackImage: string,
        disabledThumbImage: string,
        highlightedLeftTrackImage: string,
        highlightedRightTrackImage: string,
        highlightedThumbImage: string,
        leftTrackImage: string,
        leftTrackLeftCap: number,
        leftTrackTopCap: number,
        max: number,
        maxRange: number,
        min: number,
        minRange: number,
        rightTrackImage: string,
        rightTrackLeftCap: number,
        rightTrackTopCap: number,
        selectedLeftTrackImage: string,
        selectedRightTrackImage: string,
        selectedThumbImage: string,
        thumbImage: any,
        value: string,
        getDisabledLeftTrackImage(): string,
        getDisabledRightTrackImage(): string,
        getDisabledThumbImage(): string,
        getHighlightedLeftTrackImage(): string,
        getHighlightedRightTrackImage(): string,
        getHighlightedThumbImage(): string,
        getLeftTrackImage(): string,
        getLeftTrackLeftCap(): number,
        getLeftTrackTopCap(): number,
        getMax(): number,
        getMaxRange(): number,
        getMin(): number,
        getMinRange(): number,
        getRightTrackImage(): string,
        getRightTrackLeftCap(): number,
        getRightTrackTopCap(): number,
        getSelectedLeftTrackImage(): string,
        getSelectedRightTrackImage(): string,
        getSelectedThumbImage(): string,
        getThumbImage(): any,
        getValue(): string,
        setDisabledLeftTrackImage(disabledLeftTrackImage: string): void,
        setDisabledRightTrackImage(disabledRightTrackImage: string): void,
        setDisabledThumbImage(disabledThumbImage: string): void,
        setHighlightedLeftTrackImage(highlightedLeftTrackImage: string): void,
        setHighlightedRightTrackImage(highlightedRightTrackImage: string): void,
        setHighlightedThumbImage(highlightedThumbImage: string): void,
        setLeftTrackImage(leftTrackImage: string): void,
        setLeftTrackLeftCap(leftTrackLeftCap: number): void,
        setLeftTrackTopCap(leftTrackTopCap: number): void,
        setMax(max: number): void,
        setMaxRange(maxRange: number): void,
        setMin(min: number): void,
        setMinRange(minRange: number): void,
        setRightTrackImage(rightTrackImage: string): void,
        setRightTrackLeftCap(rightTrackLeftCap: number): void,
        setRightTrackTopCap(rightTrackTopCap: number): void,
        setSelectedLeftTrackImage(selectedLeftTrackImage: string): void,
        setSelectedRightTrackImage(selectedRightTrackImage: string): void,
        setSelectedThumbImage(selectedThumbImage: string): void,
        setThumbImage(thumbImage: string): void,
        setThumbImage(thumbImage: Ti$Blob): void,
        setValue(value: number, options?: Dictionary<Object>): void
    }
    declare module 'Android' {
        declare         export var LINKIFY_ALL: number;
        declare         export var LINKIFY_EMAIL_ADDRESSES: number;
        declare         export var LINKIFY_MAP_ADDRESSES: number;
        declare         export var LINKIFY_PHONE_NUMBERS: number;
        declare         export var LINKIFY_WEB_URLS: number;
        declare         export var OVER_SCROLL_ALWAYS: number;
        declare         export var OVER_SCROLL_IF_CONTENT_SCROLLS: number;
        declare         export var OVER_SCROLL_NEVER: number;
        declare         export var PIXEL_FORMAT_A_8: number;
        declare         export var PIXEL_FORMAT_LA_88: number;
        declare         export var PIXEL_FORMAT_L_8: number;
        declare         export var PIXEL_FORMAT_OPAQUE: number;
        declare         export var PIXEL_FORMAT_RGBA_4444: number;
        declare         export var PIXEL_FORMAT_RGBA_5551: number;
        declare         export var PIXEL_FORMAT_RGBA_8888: number;
        declare         export var PIXEL_FORMAT_RGBX_8888: number;
        declare         export var PIXEL_FORMAT_RGB_332: number;
        declare         export var PIXEL_FORMAT_RGB_565: number;
        declare         export var PIXEL_FORMAT_RGB_888: number;
        declare         export var PIXEL_FORMAT_TRANSLUCENT: number;
        declare         export var PIXEL_FORMAT_TRANSPARENT: number;
        declare         export var PIXEL_FORMAT_UNKNOWN: number;
        declare         export var PROGRESS_INDICATOR_DETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_DIALOG: number;
        declare         export var PROGRESS_INDICATOR_INDETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_STATUS_BAR: number;
        declare         export var SOFT_INPUT_ADJUST_PAN: number;
        declare         export var SOFT_INPUT_ADJUST_RESIZE: number;
        declare         export var SOFT_INPUT_ADJUST_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;
        declare         export var SOFT_INPUT_STATE_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_VISIBLE: number;
        declare         export var SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_HIDE_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_SHOW_ON_FOCUS: number;
        declare         export var SWITCH_STYLE_CHECKBOX: number;
        declare         export var SWITCH_STYLE_TOGGLEBUTTON: number;
        declare         export var WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;
        declare         export var WEBVIEW_LOAD_CACHE_ONLY: number;
        declare         export var WEBVIEW_LOAD_DEFAULT: number;
        declare         export var WEBVIEW_LOAD_NO_CACHE: number;
        declare         export var WEBVIEW_PLUGINS_OFF: number;
        declare         export var WEBVIEW_PLUGINS_ON: number;
        declare         export var WEBVIEW_PLUGINS_ON_DEMAND: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createProgressIndicator(
            parameters?: Dictionary<undefined.ProgressIndicator>): undefined.ProgressIndicator
        declare         export function createSearchView(parameters?: Dictionary<undefined.SearchView>): undefined.SearchView
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function hideSoftKeyboard(): void
        declare         export function openPreferences(): void
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type SearchView = {
            hintText: string,
            iconified: boolean,
            iconifiedByDefault: boolean,
            submitEnabled: boolean,
            value: string,
            blur(): void,
            focus(): void,
            getHintText(): string,
            getIconified(): boolean,
            getIconifiedByDefault(): boolean,
            getSubmitEnabled(): boolean,
            getValue(): string,
            setHintText(hintText: string): void,
            setIconified(iconified: boolean): void,
            setIconifiedByDefault(iconifiedByDefault: boolean): void,
            setSubmitEnabled(submitEnabled: boolean): void,
            setValue(value: string): void
        }
        declare         export type ProgressIndicator = {
            cancelable: boolean,
            location: number,
            max: number,
            message: string,
            messageid: string,
            min: number,
            type: number,
            getCancelable(): boolean,
            getLocation(): number,
            getMax(): number,
            getMessage(): string,
            getMessageid(): string,
            getMin(): number,
            getType(): number,
            hide(): void,
            setCancelable(cancelable: boolean): void,
            setLocation(location: number): void,
            setMax(max: number): void,
            setMessage(message: string): void,
            setMessageid(messageid: string): void,
            setMin(min: number): void,
            setType(type: number): void,
            show(): void
        }
        declare         export var manualMode: boolean;
        declare         export function addLocationProvider(provider: undefined.LocationProvider): void
        declare         export function addLocationRule(rule: undefined.LocationRule): void
        declare         export function createLocationProvider(
            parameters?: Dictionary<undefined.LocationProvider>): undefined.LocationProvider
        declare         export function createLocationRule(parameters?: Dictionary<undefined.LocationRule>): undefined.LocationRule
        declare         export function getManualMode(): boolean
        declare         export function removeLocationProvider(provider: undefined.LocationProvider): void
        declare         export function removeLocationRule(rule: undefined.LocationRule): void
        declare         export function setManualMode(manualMode: boolean): void
        declare         export type LocationProvider = {
            minUpdateDistance: number,
            minUpdateTime: number,
            name: string,
            getMinUpdateDistance(): number,
            getMinUpdateTime(): number,
            getName(): string,
            setMinUpdateDistance(minUpdateDistance: number): void,
            setMinUpdateTime(minUpdateTime: number): void,
            setName(name: string): void
        }
        declare         export type LocationRule = {
            accuracy: number,
            maxAge: number,
            minAge: number,
            name: string,
            getAccuracy(): number,
            getMaxAge(): number,
            getMinAge(): number,
            getName(): string,
            setAccuracy(accuracy: number): void,
            setMaxAge(maxAge: number): void,
            setMinAge(minAge: number): void,
            setName(name: string): void
        }
        declare         export var R: undefined.R;
        declare         export var appVersionCode: number;
        declare         export var appVersionName: string;
        declare         export var launchIntent: undefined.Intent;
        declare         export function getAppVersionCode(): number
        declare         export function getAppVersionName(): string
        declare         export function getLaunchIntent(): undefined.Intent
        declare         export interface R {}
        declare         export var ACTION_AIRPLANE_MODE_CHANGED: string;
        declare         export var ACTION_ALL_APPS: string;
        declare         export var ACTION_ANSWER: string;
        declare         export var ACTION_ATTACH_DATA: string;
        declare         export var ACTION_BATTERY_CHANGED: string;
        declare         export var ACTION_BATTERY_LOW: string;
        declare         export var ACTION_BATTERY_OKAY: string;
        declare         export var ACTION_BOOT_COMPLETED: string;
        declare         export var ACTION_BUG_REPORT: string;
        declare         export var ACTION_CALL: string;
        declare         export var ACTION_CALL_BUTTON: string;
        declare         export var ACTION_CAMERA_BUTTON: string;
        declare         export var ACTION_CHOOSER: string;
        declare         export var ACTION_CLOSE_SYSTEM_DIALOGS: string;
        declare         export var ACTION_CONFIGURATION_CHANGED: string;
        declare         export var ACTION_CREATE_SHORTCUT: string;
        declare         export var ACTION_DATE_CHANGED: string;
        declare         export var ACTION_DEFAULT: string;
        declare         export var ACTION_DELETE: string;
        declare         export var ACTION_DEVICE_STORAGE_LOW: string;
        declare         export var ACTION_DIAL: string;
        declare         export var ACTION_EDIT: string;
        declare         export var ACTION_GET_CONTENT: string;
        declare         export var ACTION_GTALK_SERVICE_CONNECTED: string;
        declare         export var ACTION_GTALK_SERVICE_DISCONNECTED: string;
        declare         export var ACTION_HEADSET_PLUG: string;
        declare         export var ACTION_INPUT_METHOD_CHANGED: string;
        declare         export var ACTION_INSERT: string;
        declare         export var ACTION_INSERT_OR_EDIT: string;
        declare         export var ACTION_MAIN: string;
        declare         export var ACTION_MANAGE_PACKAGE_STORAGE: string;
        declare         export var ACTION_MEDIA_BAD_REMOVAL: string;
        declare         export var ACTION_MEDIA_BUTTON: string;
        declare         export var ACTION_MEDIA_CHECKING: string;
        declare         export var ACTION_MEDIA_EJECT: string;
        declare         export var ACTION_MEDIA_MOUNTED: string;
        declare         export var ACTION_MEDIA_NOFS: string;
        declare         export var ACTION_MEDIA_REMOVED: string;
        declare         export var ACTION_MEDIA_SCANNER_FINISHED: string;
        declare         export var ACTION_MEDIA_SCANNER_SCAN_FILE: string;
        declare         export var ACTION_MEDIA_SCANNER_STARTED: string;
        declare         export var ACTION_MEDIA_SHARED: string;
        declare         export var ACTION_MEDIA_UNMOUNTABLE: string;
        declare         export var ACTION_MEDIA_UNMOUNTED: string;
        declare         export var ACTION_NEW_OUTGOING_CALL: string;
        declare         export var ACTION_PACKAGE_ADDED: string;
        declare         export var ACTION_PACKAGE_CHANGED: string;
        declare         export var ACTION_PACKAGE_DATA_CLEARED: string;
        declare         export var ACTION_PACKAGE_INSTALL: string;
        declare         export var ACTION_PACKAGE_REMOVED: string;
        declare         export var ACTION_PACKAGE_REPLACED: string;
        declare         export var ACTION_PACKAGE_RESTARTED: string;
        declare         export var ACTION_PICK: string;
        declare         export var ACTION_PICK_ACTIVITY: string;
        declare         export var ACTION_POWER_CONNECTED: string;
        declare         export var ACTION_POWER_DISCONNECTED: string;
        declare         export var ACTION_POWER_USAGE_SUMMARY: string;
        declare         export var ACTION_PROVIDER_CHANGED: string;
        declare         export var ACTION_REBOOT: string;
        declare         export var ACTION_RUN: string;
        declare         export var ACTION_SCREEN_OFF: string;
        declare         export var ACTION_SCREEN_ON: string;
        declare         export var ACTION_SEARCH: string;
        declare         export var ACTION_SEARCH_LONG_PRESS: string;
        declare         export var ACTION_SEND: string;
        declare         export var ACTION_SENDTO: string;
        declare         export var ACTION_SEND_MULTIPLE: string;
        declare         export var ACTION_SET_WALLPAPER: string;
        declare         export var ACTION_SHUTDOWN: string;
        declare         export var ACTION_SYNC: string;
        declare         export var ACTION_SYSTEM_TUTORIAL: string;
        declare         export var ACTION_TIME_CHANGED: string;
        declare         export var ACTION_TIME_TICK: string;
        declare         export var ACTION_UID_REMOVED: string;
        declare         export var ACTION_UMS_CONNECTED: string;
        declare         export var ACTION_UMS_DISCONNECTED: string;
        declare         export var ACTION_USER_PRESENT: string;
        declare         export var ACTION_VIEW: string;
        declare         export var ACTION_VOICE_COMMAND: string;
        declare         export var ACTION_WALLPAPER_CHANGED: string;
        declare         export var ACTION_WEB_SEARCH: string;
        declare         export var CATEGORY_ALTERNATIVE: string;
        declare         export var CATEGORY_BROWSABLE: string;
        declare         export var CATEGORY_DEFAULT: string;
        declare         export var CATEGORY_DEVELOPMENT_PREFERENCE: string;
        declare         export var CATEGORY_EMBED: string;
        declare         export var CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;
        declare         export var CATEGORY_HOME: string;
        declare         export var CATEGORY_INFO: string;
        declare         export var CATEGORY_LAUNCHER: string;
        declare         export var CATEGORY_MONKEY: string;
        declare         export var CATEGORY_OPENABLE: string;
        declare         export var CATEGORY_PREFERENCE: string;
        declare         export var CATEGORY_SAMPLE_CODE: string;
        declare         export var CATEGORY_SELECTED_ALTERNATIVE: string;
        declare         export var CATEGORY_TAB: string;
        declare         export var CATEGORY_TEST: string;
        declare         export var CATEGORY_UNIT_TEST: string;
        declare         export var DEFAULT_ALL: number;
        declare         export var DEFAULT_LIGHTS: number;
        declare         export var DEFAULT_SOUND: number;
        declare         export var DEFAULT_VIBRATE: number;
        declare         export var EXTRA_ALARM_COUNT: string;
        declare         export var EXTRA_BCC: string;
        declare         export var EXTRA_CC: string;
        declare         export var EXTRA_DATA_REMOVED: string;
        declare         export var EXTRA_DONT_KILL_APP: string;
        declare         export var EXTRA_EMAIL: string;
        declare         export var EXTRA_INTENT: string;
        declare         export var EXTRA_KEY_EVENT: string;
        declare         export var EXTRA_PHONE_NUMBER: string;
        declare         export var EXTRA_REPLACING: string;
        declare         export var EXTRA_SHORTCUT_ICON: string;
        declare         export var EXTRA_SHORTCUT_ICON_RESOURCE: string;
        declare         export var EXTRA_SHORTCUT_INTENT: string;
        declare         export var EXTRA_SHORTCUT_NAME: string;
        declare         export var EXTRA_STREAM: string;
        declare         export var EXTRA_SUBJECT: string;
        declare         export var EXTRA_TEMPLATE: string;
        declare         export var EXTRA_TEXT: string;
        declare         export var EXTRA_TITLE: string;
        declare         export var EXTRA_UID: string;
        declare         export var FILL_IN_ACTION: number;
        declare         export var FILL_IN_CATEGORIES: number;
        declare         export var FILL_IN_COMPONENT: number;
        declare         export var FILL_IN_DATA: number;
        declare         export var FILL_IN_PACKAGE: number;
        declare         export var FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_CLEAR_TOP: number;
        declare         export var FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;
        declare         export var FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;
        declare         export var FLAG_ACTIVITY_FORWARD_RESULT: number;
        declare         export var FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;
        declare         export var FLAG_ACTIVITY_MULTIPLE_TASK: number;
        declare         export var FLAG_ACTIVITY_NEW_TASK: number;
        declare         export var FLAG_ACTIVITY_NO_ANIMATION: number;
        declare         export var FLAG_ACTIVITY_NO_HISTORY: number;
        declare         export var FLAG_ACTIVITY_NO_USER_ACTION: number;
        declare         export var FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;
        declare         export var FLAG_ACTIVITY_REORDER_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;
        declare         export var FLAG_ACTIVITY_SINGLE_TOP: number;
        declare         export var FLAG_AUTO_CANCEL: number;
        declare         export var FLAG_CANCEL_CURRENT: number;
        declare         export var FLAG_DEBUG_LOG_RESOLUTION: number;
        declare         export var FLAG_FROM_BACKGROUND: number;
        declare         export var FLAG_GRANT_READ_URI_PERMISSION: number;
        declare         export var FLAG_GRANT_WRITE_URI_PERMISSION: number;
        declare         export var FLAG_INSISTENT: number;
        declare         export var FLAG_NO_CLEAR: number;
        declare         export var FLAG_NO_CREATE: number;
        declare         export var FLAG_ONE_SHOT: number;
        declare         export var FLAG_ONGOING_EVENT: number;
        declare         export var FLAG_ONLY_ALERT_ONCE: number;
        declare         export var FLAG_RECEIVER_REGISTERED_ONLY: number;
        declare         export var FLAG_SHOW_LIGHTS: number;
        declare         export var FLAG_UPDATE_CURRENT: number;
        declare         export var NAVIGATION_MODE_STANDARD: number;
        declare         export var NAVIGATION_MODE_TABS: number;
        declare         export var PENDING_INTENT_FOR_ACTIVITY: number;
        declare         export var PENDING_INTENT_FOR_BROADCAST: number;
        declare         export var PENDING_INTENT_FOR_SERVICE: number;
        declare         export var PENDING_INTENT_MAX_VALUE: number;
        declare         export var RESULT_CANCELED: number;
        declare         export var RESULT_FIRST_USER: number;
        declare         export var RESULT_OK: number;
        declare         export var SCREEN_ORIENTATION_BEHIND: number;
        declare         export var SCREEN_ORIENTATION_LANDSCAPE: number;
        declare         export var SCREEN_ORIENTATION_NOSENSOR: number;
        declare         export var SCREEN_ORIENTATION_PORTRAIT: number;
        declare         export var SCREEN_ORIENTATION_SENSOR: number;
        declare         export var SCREEN_ORIENTATION_UNSPECIFIED: number;
        declare         export var SCREEN_ORIENTATION_USER: number;
        declare         export var SHOW_AS_ACTION_ALWAYS: number;
        declare         export var SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
        declare         export var SHOW_AS_ACTION_IF_ROOM: number;
        declare         export var SHOW_AS_ACTION_NEVER: number;
        declare         export var SHOW_AS_ACTION_WITH_TEXT: number;
        declare         export var START_NOT_STICKY: number;
        declare         export var START_REDELIVER_INTENT: number;
        declare         export var STREAM_ALARM: number;
        declare         export var STREAM_DEFAULT: number;
        declare         export var STREAM_MUSIC: number;
        declare         export var STREAM_NOTIFICATION: number;
        declare         export var STREAM_RING: number;
        declare         export var STREAM_SYSTEM: number;
        declare         export var STREAM_VOICE_CALL: number;
        declare         export var URI_INTENT_SCHEME: number;
        declare         export var currentActivity: undefined.Activity;
        declare         export var currentService: undefined.Service;
        declare         export function createBroadcastIntent(options: BroadcastIntentOptions): undefined.Intent
        declare         export function createBroadcastReceiver(
            parameters?: Dictionary<undefined.BroadcastReceiver>): undefined.BroadcastReceiver
        declare         export function createIntent(parameters?: Dictionary<undefined.Intent>): undefined.Intent
        declare         export function createIntentChooser(intent: undefined.Intent, title: string): undefined.Intent
        declare         export function createNotification(parameters?: Dictionary<undefined.Notification>): undefined.Notification
        declare         export function createPendingIntent(parameters?: Dictionary<undefined.PendingIntent>): undefined.PendingIntent
        declare         export function createRemoteViews(parameters?: Dictionary<undefined.RemoteViews>): undefined.RemoteViews
        declare         export function createService(intent: undefined.Intent): undefined.Service
        declare         export function createServiceIntent(options: ServiceIntentOptions): undefined.Intent
        declare         export function getCurrentActivity(): undefined.Activity
        declare         export function getCurrentService(): undefined.Service
        declare         export function isServiceRunning(intent: undefined.Intent): boolean
        declare         export function registerBroadcastReceiver(
            broadcastReceiver: undefined.BroadcastReceiver,
            actions: Array<Global$String>): void
        declare         export function startService(intent: undefined.Intent): void
        declare         export function stopService(intent: undefined.Intent): void
        declare         export function unregisterBroadcastReceiver(broadcastReceiver: undefined.BroadcastReceiver): void
        declare         export type Intent = {
            action: string,
            className: string,
            data: string,
            flags: number,
            packageName: string,
            type: string,
            url: string,
            addCategory(name: string): void,
            addFlags(flags: number): void,
            getAction(): string,
            getBlobExtra(name: string): Ti$Blob,
            getBooleanExtra(name: string): boolean,
            getClassName(): string,
            getData(): string,
            getDoubleExtra(name: string): number,
            getFlags(): number,
            getIntExtra(name: string): number,
            getLongExtra(name: string): number,
            getPackageName(): string,
            getStringExtra(name: string): string,
            getType(): string,
            getUrl(): string,
            hasExtra(name: string): boolean,
            putExtra(name: string, value: any): void,
            putExtraUri(name: string, value: string): void,
            setFlags(flags: number): void
        }
        declare         export type Notification = {
            duration: number,
            horizontalMargin: number,
            message: string,
            verticalMargin: number,
            xOffset: number,
            yOffset: number,
            getDuration(): number,
            getHorizontalMargin(): number,
            getMessage(): string,
            getVerticalMargin(): number,
            getXOffset(): number,
            getYOffset(): number,
            setDuration(duration: number): void,
            setHorizontalMargin(horizontalMargin: number): void,
            setMessage(message: string): void,
            setVerticalMargin(verticalMargin: number): void,
            setXOffset(xOffset: number): void,
            setYOffset(yOffset: number): void
        }
        declare module 'Calendar' {
            declare             export var METHOD_ALERT: number;
            declare             export var METHOD_DEFAULT: number;
            declare             export var METHOD_EMAIL: number;
            declare             export var METHOD_SMS: number;
            declare             export var STATE_DISMISSED: number;
            declare             export var STATE_FIRED: number;
            declare             export var STATE_SCHEDULED: number;
            declare             export var STATUS_CANCELED: number;
            declare             export var STATUS_CONFIRMED: number;
            declare             export var STATUS_TENTATIVE: number;
            declare             export var VISIBILITY_CONFIDENTIAL: number;
            declare             export var VISIBILITY_DEFAULT: number;
            declare             export var VISIBILITY_PRIVATE: number;
            declare             export var VISIBILITY_PUBLIC: number;
            declare             export var allAlerts: Array<undefined.Alert>;
            declare             export var allCalendars: Array<undefined.Calendar>;
            declare             export var apiName: string;
            declare             export var bubbleParent: boolean;
            declare             export var selectableCalendars: Array<undefined.Calendar>;
            declare             export function addEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function applyProperties(props: Dictionary<Object>): void
            declare             export function fireEvent(name: string, event: Dictionary<Object>): void
            declare             export function getAllAlerts(): Array<undefined.Alert >
                declare             export function getAllCalendars(): Array<undefined.Calendar >
                declare             export function getApiName(): string
            declare             export function getBubbleParent(): boolean
            declare             export function getCalendarById(id: number): undefined.Calendar
            declare             export function getSelectableCalendars(): Array<undefined.Calendar >
                declare             export function removeEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function setBubbleParent(bubbleParent: boolean): void
            declare             export type Event = {
                alerts: Array<undefined.Alert>,
                allDay: boolean,
                begin: Date,
                description: string,
                end: Date,
                extendedProperties: Dictionary<Object>,
                hasAlarm: boolean,
                hasExtendedProperties: boolean,
                id: string,
                location: string,
                reminders: Array<undefined.Reminder>,
                status: number,
                title: string,
                visibility: number,
                createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
                createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
                getAlerts(): Array<undefined.Alert>,
                getAllDay(): boolean,
                getBegin(): Date,
                getDescription(): string,
                getEnd(): Date,
                getExtendedProperties(): Dictionary<Object>,
                getExtendedProperty(name: string): string,
                getHasAlarm(): boolean,
                getHasExtendedProperties(): boolean,
                getId(): string,
                getLocation(): string,
                getReminders(): Array<undefined.Reminder>,
                getStatus(): number,
                getTitle(): string,
                getVisibility(): number,
                setExtendedProperty(name: string, value: string): void
            }
            declare             export type Reminder = {
                id: string,
                method: number,
                minutes: number,
                getId(): string,
                getMethod(): number,
                getMinutes(): number
            }
            declare             export type Calendar = {
                hidden: boolean,
                id: string,
                name: string,
                selected: boolean,
                createEvent(properties: Dictionary<undefined.Event>): undefined.Event,
                getEventById(id: number): undefined.Event,
                getEventsBetweenDates(date1: Date, date2: Date): Array<undefined.Event>,
                getEventsInDate(year: number, month: number, day: number): Array<undefined.Event>,
                getEventsInMonth(year: number, month: number): Array<undefined.Event>,
                getEventsInYear(year: number): Array<undefined.Event>,
                getHidden(): boolean,
                getId(): string,
                getName(): string,
                getSelected(): boolean
            }
            declare             export type Alert = {
                alarmTime: Date,
                begin: Date,
                end: Date,
                eventId: number,
                id: string,
                minutes: number,
                state: number,
                getAlarmTime(): Date,
                getBegin(): Date,
                getEnd(): Date,
                getEventId(): number,
                getId(): string,
                getMinutes(): number,
                getState(): number
            }
            declare             export var AUTHORIZATION_AUTHORIZED: number;
            declare             export var AUTHORIZATION_DENIED: number;
            declare             export var AUTHORIZATION_RESTRICTED: number;
            declare             export var AUTHORIZATION_UNKNOWN: number;
            declare             export var AVAILABILITY_BUSY: number;
            declare             export var AVAILABILITY_FREE: number;
            declare             export var AVAILABILITY_NOTSUPPORTED: number;
            declare             export var AVAILABILITY_TENTATIVE: number;
            declare             export var AVAILABILITY_UNAVAILABLE: number;
            declare             export var RECURRENCEFREQUENCY_DAILY: number;
            declare             export var RECURRENCEFREQUENCY_MONTHLY: number;
            declare             export var RECURRENCEFREQUENCY_WEEKLY: number;
            declare             export var RECURRENCEFREQUENCY_YEARLY: number;
            declare             export var SPAN_FUTUREEVENTS: number;
            declare             export var SPAN_THISEVENT: number;
            declare             export var STATUS_NONE: number;
            declare             export var allEditableCalendars: Array<undefined.Calendar>;
            declare             export var defaultCalendar: undefined.Calendar;
            declare             export var eventsAuthorization: number;
            declare             export function getAllEditableCalendars(): Array<undefined.Calendar >
                declare             export function getDefaultCalendar(): undefined.Calendar
            declare             export function getEventsAuthorization(): number
            declare             export function requestEventsAuthorization(callback: (...args: any[]) => any): void
            declare             export type RecurrenceRule = {
                calendarID: string,
                daysOfTheMonth: Array<Number>,
                daysOfTheWeek: daysOfTheWeekDictionary,
                daysOfTheYear: Array<Number>,
                end: recurrenceEndDictionary,
                frequency: number,
                interval: number,
                monthsOfTheYear: Array<Number>,
                setPositions: Array<Number>,
                weeksOfTheYear: Array<Number>,
                getCalendarID(): string,
                getDaysOfTheMonth(): Array<Number>,
                getDaysOfTheWeek(): daysOfTheWeekDictionary,
                getDaysOfTheYear(): Array<Number>,
                getEnd(): recurrenceEndDictionary,
                getFrequency(): number,
                getInterval(): number,
                getMonthsOfTheYear(): Array<Number>,
                getSetPositions(): Array<Number>,
                getWeeksOfTheYear(): Array<Number >
            }
        }

        declare         export type MenuItem = {
            actionView: undefined.View,
            actionViewExpanded: boolean,
            checkable: boolean,
            checked: boolean,
            enabled: boolean,
            groupId: number,
            icon: any,
            itemId: number,
            order: number,
            showAsAction: number,
            title: string,
            titleCondensed: string,
            visible: boolean,
            collapseActionView(): void,
            expandActionView(): void,
            getActionView(): undefined.View,
            getGroupId(): number,
            getItemId(): number,
            getOrder(): number,
            getTitle(): string,
            getTitleCondensed(): string,
            isActionViewExpanded(): boolean,
            isCheckable(): boolean,
            isChecked(): boolean,
            isEnabled(): boolean,
            isVisible(): boolean,
            setActionView(actionView: undefined.View): void,
            setCheckable(checkable: boolean): void,
            setChecked(enabled: boolean): void,
            setEnabled(enabled: boolean): void,
            setIcon(icon: number): void,
            setIcon(icon: string): void,
            setShowAsAction(showAsAction: number): void,
            setTitle(title: string): void,
            setTitleCondensed(titleCondensed: string): void,
            setVisible(visible: boolean): void
        }
        declare         export interface NotificationManager {
            DEFAULT_ALL: number,
                DEFAULT_LIGHTS: number,
                DEFAULT_SOUND: number,
                DEFAULT_VIBRATE: number,
                FLAG_AUTO_CANCEL: number,
                FLAG_INSISTENT: number,
                FLAG_NO_CLEAR: number,
                FLAG_ONGOING_EVENT: number,
                FLAG_ONLY_ALERT_ONCE: number,
                FLAG_SHOW_LIGHTS: number,
                STREAM_DEFAULT: number,
                cancel(id: number): void,
                cancelAll(): void,
                notify(id: number, notification: undefined.Notification): void
        }
        declare         export type ActionBar = {
            backgroundImage: string,
            displayHomeAsUp: boolean,
            homeButtonEnabled: boolean,
            icon: string,
            logo: string,
            navigationMode: number,
            onHomeIconItemSelected: (...args: any[]) => any,
            subtitle: string,
            title: string,
            getNavigationMode(): number,
            getSubtitle(): string,
            getTitle(): string,
            hide(): void,
            setBackgroundImage(backgroundImage: string): void,
            setDisplayHomeAsUp(displayHomeAsUp: boolean): void,
            setDisplayShowHomeEnabled(show: boolean): void,
            setDisplayShowTitleEnabled(show: boolean): void,
            setHomeButtonEnabled(homeButtonEnabled: boolean): void,
            setIcon(icon: string): void,
            setLogo(logo: string): void,
            setNavigationMode(navigationMode: number): void,
            setOnHomeIconItemSelected(onHomeIconItemSelected: (...args: any[]) => any): void,
            setSubtitle(subtitle: string): void,
            setTitle(title: string): void,
            show(): void
        }
        declare         export type BroadcastReceiver = {
            onReceived: (...args: any[]) => any,
            url: string,
            getOnReceived(): (...args: any[]) => any,
            getUrl(): string,
            setOnReceived(onReceived: (...args: any[]) => any): void,
            setUrl(url: string): void
        }
        declare         export type Menu = {
            items: Array<undefined.MenuItem>,
            add(options: any): undefined.MenuItem,
            clear(): void,
            close(): void,
            findItem(item: number): undefined.MenuItem,
            findItem(item: undefined.MenuItem): undefined.MenuItem,
            getItem(index: number): undefined.MenuItem,
            getItems(): Array<undefined.MenuItem>,
            hasVisibleItems(): boolean,
            removeGroup(groupId: number): void,
            removeItem(itemId: number): void,
            setGroupEnabled(groupId: number, enabled: boolean): void,
            setGroupVisible(groupId: number, visible: boolean): void,
            size(): number
        }
        declare         export type Activity = {
            actionBar: undefined.ActionBar,
            intent: undefined.Intent,
            onCreate: (...args: any[]) => any,
            onCreateOptionsMenu: (...args: any[]) => any,
            onDestroy: (...args: any[]) => any,
            onPause: (...args: any[]) => any,
            onPrepareOptionsMenu: (...args: any[]) => any,
            onRestart: (...args: any[]) => any,
            onResume: (...args: any[]) => any,
            onStart: (...args: any[]) => any,
            onStop: (...args: any[]) => any,
            requestedOrientation: number,
            finish(): void,
            getActionBar(): undefined.ActionBar,
            getIntent(): undefined.Intent,
            getOnCreate(): (...args: any[]) => any,
            getOnCreateOptionsMenu(): (...args: any[]) => any,
            getOnDestroy(): (...args: any[]) => any,
            getOnPause(): (...args: any[]) => any,
            getOnPrepareOptionsMenu(): (...args: any[]) => any,
            getOnRestart(): (...args: any[]) => any,
            getOnResume(): (...args: any[]) => any,
            getOnStart(): (...args: any[]) => any,
            getOnStop(): (...args: any[]) => any,
            getString(resourceId: number, format: any): string,
            invalidateOptionsMenu(): void,
            openOptionsMenu(): void,
            sendBroadcast(intent: undefined.Intent): void,
            sendBroadcastWithPermission(intent: undefined.Intent, receiverPermission?: string): void,
            setOnCreate(onCreate: (...args: any[]) => any): void,
            setOnCreateOptionsMenu(onCreateOptionsMenu: (...args: any[]) => any): void,
            setOnDestroy(onDestroy: (...args: any[]) => any): void,
            setOnPause(onPause: (...args: any[]) => any): void,
            setOnPrepareOptionsMenu(onPrepareOptionsMenu: (...args: any[]) => any): void,
            setOnRestart(onRestart: (...args: any[]) => any): void,
            setOnResume(onResume: (...args: any[]) => any): void,
            setOnStart(onStart: (...args: any[]) => any): void,
            setOnStop(onStop: (...args: any[]) => any): void,
            setRequestedOrientation(orientation: number): void,
            setResult(resultCode: number, intent?: undefined.Intent): void,
            startActivity(intent: undefined.Intent): void,
            startActivityForResult(intent: undefined.Intent, callback: (...args: any[]) => any): void
        }
        declare         export type Service = {
            intent: undefined.Intent,
            serviceInstanceId: number,
            getIntent(): undefined.Intent,
            getServiceInstanceId(): number,
            start(): void,
            stop(): void
        }
        declare         export type RemoteViews = {
            layoutId: number,
            packageName: string,
            getLayoutId(): number,
            getPackageName(): string,
            setBoolean(viewId: number, methodName: string, value: boolean): void,
            setChronometer(viewId: number, base: Date, format: string, started: boolean): void,
            setDouble(viewId: number, methodName: string, value: number): void,
            setImageViewResource(viewId: number, srcId: number): void,
            setImageViewUri(viewId: number, uri: string): void,
            setInt(viewId: number, methodName: string, value: number): void,
            setOnClickPendingIntent(viewId: number, pendingIntent: undefined.PendingIntent): void,
            setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void,
            setString(viewId: number, methodName: string, value: string): void,
            setTextColor(viewId: number, color: number): void,
            setTextViewText(viewId: number, text: string): void,
            setUri(viewId: number, methodName: string, value: string): void,
            setViewVisibility(viewId: number, visibility: number): void
        }
        declare         export type PendingIntent = {
            flags: number,
            intent: undefined.Intent,
            updateCurrentIntent: boolean,
            getFlags(): number,
            getIntent(): undefined.Intent,
            getUpdateCurrentIntent(): boolean
        }
    }

    declare     export type DashboardView = {
        columnCount: number,
        data: Array<undefined.DashboardItem>,
        editable: boolean,
        rowCount: number,
        wobble: boolean,
        getColumnCount(): number,
        getData(): Array<undefined.DashboardItem>,
        getEditable(): boolean,
        getRowCount(): number,
        getWobble(): boolean,
        setData(data: Array<undefined.DashboardItem>): void,
        setEditable(editable: boolean): void,
        setWobble(wobble: boolean): void,
        startEditing(): void,
        stopEditing(): void
    }
    declare     export type ListItem = {
        accessoryType: number,
        backgroundColor: string,
        backgroundGradient: Gradient,
        backgroundImage: string,
        canEdit: boolean,
        canMove: boolean,
        color: string,
        font: Font,
        height: any,
        image: string,
        itemId: string,
        searchableText: string,
        selectedBackgroundColor: string,
        selectedBackgroundGradient: Gradient,
        selectedBackgroundImage: string,
        selectionStyle: number,
        subtitle: string,
        title: string
    }
    declare     export type AlertDialog = {
        androidView: undefined.View,
        buttonNames: Array<Global$String>,
        cancel: number,
        message: string,
        messageid: string,
        ok: string,
        okid: string,
        persistent: boolean,
        style: number,
        title: string,
        titleid: string,
        getAndroidView(): undefined.View,
        getButtonNames(): Array<Global$String>,
        getCancel(): number,
        getMessage(): string,
        getOk(): string,
        getPersistent(): boolean,
        getStyle(): number,
        getTitle(): string,
        hide(): void,
        setAndroidView(androidView: undefined.View): void,
        setCancel(cancel: number): void,
        setMessage(message: string): void,
        setOk(ok: string): void,
        setPersistent(persistent: boolean): void,
        setStyle(style: number): void,
        setTitle(title: string): void,
        show(): void
    }
    declare     export type _2DMatrix = {
        a: number,
        b: number,
        c: number,
        d: number,
        tx: number,
        ty: number,
        getA(): number,
        getB(): number,
        getC(): number,
        getD(): number,
        getTx(): number,
        getTy(): number,
        invert(): undefined._2DMatrix,
        multiply(t2: undefined._2DMatrix): undefined._2DMatrix,
        rotate(angle: number, toAngle?: number): undefined._2DMatrix,
        scale(sx: number, sy: number, toSx?: number, toSy?: number): undefined._2DMatrix,
        setA(a: number): void,
        setB(b: number): void,
        setC(c: number): void,
        setD(d: number): void,
        setTx(tx: number): void,
        setTy(ty: number): void,
        translate(tx: number, ty: number): undefined._2DMatrix
    }
    declare     export type TabbedBar = {
        index: number,
        labels: any,
        style: number,
        getIndex(): number,
        getLabels(): any,
        getStyle(): number,
        setIndex(index: number): void,
        setLabels(labels: Array<Global$String>): void,
        setLabels(labels: Array<BarItemType>): void,
        setStyle(style: number): void
    }
    declare     export type Window = {
        activity: undefined.Activity,
        autoAdjustScrollViewInsets: boolean,
        backButtonTitle: string,
        backButtonTitleImage: any,
        barColor: string,
        barImage: string,
        exitOnClose: boolean,
        extendEdges: Array<Number>,
        flagSecure: boolean,
        fullscreen: boolean,
        hideShadow: boolean,
        includeOpaqueBars: boolean,
        leftNavButton: undefined.View,
        leftNavButtons: Array<undefined.View>,
        modal: boolean,
        navBarHidden: boolean,
        navTintColor: any,
        orientation: number,
        orientationModes: Array<Number>,
        rightNavButton: undefined.View,
        rightNavButtons: Array<undefined.View>,
        shadowImage: string,
        statusBarStyle: any,
        tabBarHidden: boolean,
        theme: string,
        title: string,
        titleAttributes: titleAttributesParams,
        titleControl: undefined.View,
        titleImage: string,
        titlePrompt: string,
        titleid: string,
        titlepromptid: string,
        toolbar: Array<Object>,
        transitionAnimation: Ti$Proxy,
        translucent: boolean,
        url: string,
        windowFlags: number,
        windowPixelFormat: number,
        windowSoftInputMode: number,
        close(params?: Dictionary<undefined.Animation>): void,
        close(params?: closeWindowParams): void,
        getActivity(): undefined.Activity,
        getAutoAdjustScrollViewInsets(): boolean,
        getBackButtonTitle(): string,
        getBackButtonTitleImage(): any,
        getBarColor(): string,
        getBarImage(): string,
        getExitOnClose(): boolean,
        getExtendEdges(): Array<Number>,
        getFlagSecure(): boolean,
        getFullscreen(): boolean,
        getHideShadow(): boolean,
        getIncludeOpaqueBars(): boolean,
        getLeftNavButton(): undefined.View,
        getLeftNavButtons(): Array<undefined.View>,
        getModal(): boolean,
        getNavBarHidden(): boolean,
        getNavTintColor(): string,
        getOrientation(): number,
        getOrientationModes(): Array<Number>,
        getRightNavButton(): undefined.View,
        getRightNavButtons(): Array<undefined.View>,
        getShadowImage(): string,
        getStatusBarStyle(): number,
        getTabBarHidden(): boolean,
        getTheme(): string,
        getTitle(): string,
        getTitleAttributes(): titleAttributesParams,
        getTitleControl(): undefined.View,
        getTitleImage(): string,
        getTitlePrompt(): string,
        getTitleid(): string,
        getTitlepromptid(): string,
        getToolbar(): Array<Object>,
        getTransitionAnimation(): Ti$Proxy,
        getTranslucent(): boolean,
        getUrl(): string,
        getWindowFlags(): number,
        getWindowPixelFormat(): number,
        getWindowSoftInputMode(): number,
        hideNavBar(options?: Dictionary<Object>): void,
        hideTabBar(): void,
        open(params?: openWindowParams): void,
        setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,
        setBackButtonTitle(backButtonTitle: string): void,
        setBackButtonTitleImage(backButtonTitleImage: string): void,
        setBackButtonTitleImage(backButtonTitleImage: Ti$Blob): void,
        setBarColor(barColor: string): void,
        setBarImage(barImage: string): void,
        setExitOnClose(exitOnClose: boolean): void,
        setExtendEdges(extendEdges: Array<Number>): void,
        setFullscreen(fullscreen: boolean): void,
        setHideShadow(hideShadow: boolean): void,
        setIncludeOpaqueBars(includeOpaqueBars: boolean): void,
        setLeftNavButton(leftNavButton: undefined.View): void,
        setLeftNavButtons(leftNavButtons: Array<undefined.View>): void,
        setModal(modal: boolean): void,
        setNavBarHidden(navBarHidden: boolean): void,
        setNavTintColor(navTintColor: string): void,
        setOrientationModes(orientationModes: Array<Number>): void,
        setRightNavButton(rightNavButton: undefined.View): void,
        setRightNavButtons(rightNavButtons: Array<undefined.View>): void,
        setShadowImage(shadowImage: string): void,
        setStatusBarStyle(statusBarStyle: number): void,
        setTabBarHidden(tabBarHidden: boolean): void,
        setTitle(title: string): void,
        setTitleAttributes(titleAttributes: titleAttributesParams): void,
        setTitleControl(titleControl: undefined.View): void,
        setTitleImage(titleImage: string): void,
        setTitlePrompt(titlePrompt: string): void,
        setTitleid(titleid: string): void,
        setTitlepromptid(titlepromptid: string): void,
        setToolbar(items: Array<Object>, params?: windowToolbarParam): void,
        setTransitionAnimation(transitionAnimation: Ti$Proxy): void,
        setTranslucent(translucent: boolean): void,
        setWindowPixelFormat(windowPixelFormat: number): void,
        showNavBar(options?: Dictionary<Object>): void
    }
    declare     export type TextField = {
        appearance: number,
        attributedHintText: undefined.AttributedString,
        attributedString: undefined.AttributedString,
        autoLink: number,
        autocapitalization: number,
        autocorrect: boolean,
        borderStyle: number,
        clearButtonMode: number,
        clearOnEdit: boolean,
        color: string,
        editable: boolean,
        ellipsize: boolean,
        enableReturnKey: boolean,
        font: Font,
        hintText: string,
        keyboardToolbar: any,
        keyboardToolbarColor: string,
        keyboardToolbarHeight: number,
        keyboardType: number,
        leftButton: any,
        leftButtonMode: number,
        leftButtonPadding: number,
        maxLength: number,
        minimumFontSize: number,
        paddingLeft: number,
        paddingRight: number,
        passwordMask: boolean,
        returnKeyType: number,
        rightButton: any,
        rightButtonMode: number,
        rightButtonPadding: number,
        selection: textFieldSelectedParams,
        suppressReturn: boolean,
        textAlign: any,
        value: string,
        verticalAlign: any,
        blur(): void,
        focus(): void,
        getAppearance(): number,
        getAttributedHintText(): undefined.AttributedString,
        getAttributedString(): undefined.AttributedString,
        getAutoLink(): number,
        getAutocapitalization(): number,
        getAutocorrect(): boolean,
        getBorderStyle(): number,
        getClearButtonMode(): number,
        getClearOnEdit(): boolean,
        getColor(): string,
        getEditable(): boolean,
        getEllipsize(): boolean,
        getEnableReturnKey(): boolean,
        getFont(): Font,
        getHintText(): string,
        getKeyboardToolbar(): any,
        getKeyboardToolbarColor(): string,
        getKeyboardToolbarHeight(): number,
        getKeyboardType(): number,
        getLeftButton(): any,
        getLeftButtonMode(): number,
        getLeftButtonPadding(): number,
        getMaxLength(): number,
        getMinimumFontSize(): number,
        getPaddingLeft(): number,
        getPaddingRight(): number,
        getPasswordMask(): boolean,
        getReturnKeyType(): number,
        getRightButton(): any,
        getRightButtonMode(): number,
        getRightButtonPadding(): number,
        getSelection(): textFieldSelectedParams,
        getSuppressReturn(): boolean,
        getTextAlign(): any,
        getValue(): string,
        getVerticalAlign(): any,
        hasText(): boolean,
        setAppearance(appearance: number): void,
        setAttributedHintText(attributedHintText: undefined.AttributedString): void,
        setAttributedString(attributedString: undefined.AttributedString): void,
        setAutoLink(autoLink: number): void,
        setAutocapitalization(autocapitalization: number): void,
        setAutocorrect(autocorrect: boolean): void,
        setBorderStyle(borderStyle: number): void,
        setClearButtonMode(clearButtonMode: number): void,
        setClearOnEdit(clearOnEdit: boolean): void,
        setColor(color: string): void,
        setEditable(editable: boolean): void,
        setEllipsize(ellipsize: boolean): void,
        setEnableReturnKey(enableReturnKey: boolean): void,
        setFont(font: Font): void,
        setHintText(hintText: string): void,
        setKeyboardToolbar(keyboardToolbar: Array<undefined.View>): void,
        setKeyboardToolbar(keyboardToolbar: undefined.Toolbar): void,
        setKeyboardToolbarColor(keyboardToolbarColor: string): void,
        setKeyboardToolbarHeight(keyboardToolbarHeight: number): void,
        setKeyboardType(keyboardType: number): void,
        setLeftButton(leftButton: any): void,
        setLeftButtonMode(leftButtonMode: number): void,
        setLeftButtonPadding(leftButtonPadding: number): void,
        setMaxLength(maxLength: number): void,
        setMinimumFontSize(minimumFontSize: number): void,
        setPaddingLeft(paddingLeft: number): void,
        setPaddingRight(paddingRight: number): void,
        setPasswordMask(passwordMask: boolean): void,
        setReturnKeyType(returnKeyType: number): void,
        setRightButton(rightButton: any): void,
        setRightButtonMode(rightButtonMode: number): void,
        setRightButtonPadding(rightButtonPadding: number): void,
        setSelection(start: number, end: number): void,
        setSuppressReturn(suppressReturn: boolean): void,
        setTextAlign(textAlign: string): void,
        setTextAlign(textAlign: number): void,
        setValue(value: string): void,
        setVerticalAlign(verticalAlign: number): void,
        setVerticalAlign(verticalAlign: string): void
    }
    declare     export type _3DMatrix = {
        m11: number,
        m12: number,
        m13: number,
        m14: number,
        m21: number,
        m22: number,
        m23: number,
        m24: number,
        m31: number,
        m32: number,
        m33: number,
        m34: number,
        m41: number,
        m42: number,
        m43: number,
        m44: number,
        getM11(): number,
        getM12(): number,
        getM13(): number,
        getM14(): number,
        getM21(): number,
        getM22(): number,
        getM23(): number,
        getM24(): number,
        getM31(): number,
        getM32(): number,
        getM33(): number,
        getM34(): number,
        getM41(): number,
        getM42(): number,
        getM43(): number,
        getM44(): number,
        invert(): undefined._3DMatrix,
        multiply(t2: undefined._3DMatrix): undefined._3DMatrix,
        rotate(angle: number, x: number, y: number, z: number): undefined._3DMatrix,
        scale(sx: number, sy: number, sz: number): undefined._3DMatrix,
        setM11(m11: number): void,
        setM12(m12: number): void,
        setM13(m13: number): void,
        setM14(m14: number): void,
        setM21(m21: number): void,
        setM22(m22: number): void,
        setM23(m23: number): void,
        setM24(m24: number): void,
        setM31(m31: number): void,
        setM32(m32: number): void,
        setM33(m33: number): void,
        setM34(m34: number): void,
        setM41(m41: number): void,
        setM42(m42: number): void,
        setM43(m43: number): void,
        setM44(m44: number): void,
        translate(tx: number, ty: number, tz: number): undefined._3DMatrix
    }
    declare     export type WebView = {
        cacheMode: number,
        data: any,
        disableBounce: boolean,
        enableZoomControls: boolean,
        handlePlatformUrl: boolean,
        hideLoadIndicator: boolean,
        html: string,
        ignoreSslError: boolean,
        lightTouchEnabled: boolean,
        loading: boolean,
        onCreateWindow: (...args: any[]) => any,
        overScrollMode: number,
        pluginState: number,
        scalesPageToFit: boolean,
        scrollsToTop: boolean,
        showScrollbars: boolean,
        url: string,
        userAgent: string,
        willHandleTouches: boolean,
        canGoBack(): boolean,
        canGoForward(): boolean,
        evalJS(code: string): string,
        getCacheMode(): number,
        getData(): any,
        getDisableBounce(): boolean,
        getEnableZoomControls(): boolean,
        getHandlePlatformUrl(): boolean,
        getHideLoadIndicator(): boolean,
        getHtml(): string,
        getIgnoreSslError(): boolean,
        getLightTouchEnabled(): boolean,
        getLoading(): boolean,
        getOnCreateWindow(): (...args: any[]) => any,
        getOverScrollMode(): number,
        getPluginState(): number,
        getScalesPageToFit(): boolean,
        getScrollsToTop(): boolean,
        getShowScrollbars(): boolean,
        getUrl(): string,
        getUserAgent(): string,
        getWillHandleTouches(): boolean,
        goBack(): void,
        goForward(): void,
        pause(): void,
        release(): void,
        reload(): void,
        repaint(): void,
        resume(): void,
        setBasicAuthentication(username: string, password: string): void,
        setCacheMode(cacheMode: number): void,
        setData(data: Ti$Blob): void,
        setData(data: undefined.File): void,
        setDisableBounce(disableBounce: boolean): void,
        setEnableZoomControls(enableZoomControls: boolean): void,
        setHandlePlatformUrl(handlePlatformUrl: boolean): void,
        setHideLoadIndicator(hideLoadIndicator: boolean): void,
        setHtml(html: any, options?: Dictionary<Object>): void,
        setIgnoreSslError(ignoreSslError: boolean): void,
        setLightTouchEnabled(lightTouchEnabled: boolean): void,
        setLoading(loading: boolean): void,
        setOnCreateWindow(onCreateWindow: (...args: any[]) => any): void,
        setOverScrollMode(overScrollMode: number): void,
        setPluginState(pluginState: number): void,
        setScalesPageToFit(scalesPageToFit: boolean): void,
        setScrollsToTop(scrollsToTop: boolean): void,
        setShowScrollbars(showScrollbars: boolean): void,
        setUrl(url: string): void,
        setUserAgent(userAgent: string): void,
        setWillHandleTouches(willHandleTouches: boolean): void,
        stopLoading(hardStop: boolean): void
    }
    declare     export interface Clipboard {
        clearData(type?: string): void,
            clearText(): void,
            getData(type: string): any,
            getText(): string,
            hasData(type: string): boolean,
            hasText(): any,
            setData(type: string, data: any): void,
            setText(text: string): void
    }
    declare     export type ScrollableView = {
        cacheSize: number,
        clipViews: boolean,
        currentPage: number,
        disableBounce: boolean,
        hitRect: Dimension,
        overScrollMode: number,
        overlayEnabled: boolean,
        pagingControlAlpha: number,
        pagingControlColor: string,
        pagingControlHeight: number,
        pagingControlOnTop: boolean,
        pagingControlTimeout: number,
        scrollingEnabled: boolean,
        showPagingControl: boolean,
        views: Array<undefined.View>,
        addView(view: undefined.View): void,
        getCacheSize(): number,
        getClipViews(): boolean,
        getCurrentPage(): number,
        getDisableBounce(): boolean,
        getHitRect(): Dimension,
        getOverScrollMode(): number,
        getOverlayEnabled(): boolean,
        getPagingControlAlpha(): number,
        getPagingControlColor(): string,
        getPagingControlHeight(): number,
        getPagingControlOnTop(): boolean,
        getPagingControlTimeout(): number,
        getScrollingEnabled(): boolean,
        getShowPagingControl(): boolean,
        getViews(): Array<undefined.View>,
        moveNext(): void,
        movePrevious(): void,
        removeView(view: number): void,
        removeView(view: undefined.View): void,
        scrollToView(view: number): void,
        scrollToView(view: undefined.View): void,
        setCacheSize(cacheSize: number): void,
        setCurrentPage(currentPage: number): void,
        setDisableBounce(disableBounce: boolean): void,
        setHitRect(hitRect: Dimension): void,
        setOverScrollMode(overScrollMode: number): void,
        setOverlayEnabled(overlayEnabled: boolean): void,
        setPagingControlAlpha(pagingControlAlpha: number): void,
        setPagingControlColor(pagingControlColor: string): void,
        setPagingControlHeight(pagingControlHeight: number): void,
        setPagingControlOnTop(pagingControlOnTop: boolean): void,
        setScrollingEnabled(scrollingEnabled: boolean): void,
        setShowPagingControl(showPagingControl: boolean): void,
        setViews(views: Array<undefined.View>): void
    }
    declare     export type ListSection = {
        footerTitle: string,
        footerView: undefined.View,
        headerTitle: string,
        headerView: undefined.View,
        items: Array<ListDataItem>,
        appendItems(dataItems: Array<ListDataItem>, animation?: ListViewAnimationProperties): void,
        deleteItemsAt(
            itemIndex: number,
            count: number,
            animation?: ListViewAnimationProperties): void,
        getFooterTitle(): string,
        getFooterView(): undefined.View,
        getHeaderTitle(): string,
        getHeaderView(): undefined.View,
        getItemAt(itemIndex: number): ListDataItem,
        getItems(): Array<ListDataItem>,
        insertItemsAt(
            itemIndex: number,
            dataItems: Array<ListDataItem>,
            animation?: ListViewAnimationProperties): void,
        replaceItemsAt(
            index: number,
            count: number,
            dataItems: Array<ListDataItem>,
            animation?: ListViewAnimationProperties): void,
        setFooterTitle(footerTitle: string): void,
        setFooterView(footerView: undefined.View): void,
        setHeaderTitle(headerTitle: string): void,
        setHeaderView(headerView: undefined.View): void,
        setItems(dataItems: Array<ListDataItem>, animation?: ListViewAnimationProperties): void,
        updateItemAt(
            index: number,
            dataItem: ListDataItem,
            animation?: ListViewAnimationProperties): void
    }
    declare     export type ScrollView = {
        canCancelEvents: boolean,
        contentHeight: any,
        contentOffset: Dictionary<Object>,
        contentWidth: any,
        decelerationRate: number,
        disableBounce: boolean,
        horizontalBounce: boolean,
        maxZoomScale: number,
        minZoomScale: number,
        overScrollMode: number,
        scrollIndicatorStyle: number,
        scrollType: string,
        scrollingEnabled: boolean,
        scrollsToTop: boolean,
        showHorizontalScrollIndicator: boolean,
        showVerticalScrollIndicator: boolean,
        verticalBounce: boolean,
        zoomScale: number,
        getCanCancelEvents(): boolean,
        getContentHeight(): any,
        getContentOffset(): Dictionary<Object>,
        getContentWidth(): any,
        getDecelerationRate(): number,
        getDisableBounce(): boolean,
        getHorizontalBounce(): boolean,
        getMaxZoomScale(): number,
        getMinZoomScale(): number,
        getOverScrollMode(): number,
        getScrollIndicatorStyle(): number,
        getScrollType(): string,
        getScrollingEnabled(): boolean,
        getScrollsToTop(): boolean,
        getShowHorizontalScrollIndicator(): boolean,
        getShowVerticalScrollIndicator(): boolean,
        getVerticalBounce(): boolean,
        getZoomScale(): number,
        scrollTo(x: number, y: number): void,
        scrollToBottom(): void,
        setCanCancelEvents(canCancelEvents: boolean): void,
        setContentHeight(contentHeight: number): void,
        setContentHeight(contentHeight: string): void,
        setContentOffset(contentOffset: Dictionary<Object>, animated?: contentOffsetOption): void,
        setContentWidth(contentWidth: number): void,
        setContentWidth(contentWidth: string): void,
        setDecelerationRate(decelerationRate: number): void,
        setDisableBounce(disableBounce: boolean): void,
        setHorizontalBounce(horizontalBounce: boolean): void,
        setMaxZoomScale(maxZoomScale: number): void,
        setMinZoomScale(minZoomScale: number): void,
        setOverScrollMode(overScrollMode: number): void,
        setScrollIndicatorStyle(scrollIndicatorStyle: number): void,
        setScrollingEnabled(scrollingEnabled: boolean): void,
        setScrollsToTop(scrollsToTop: boolean): void,
        setShowHorizontalScrollIndicator(showHorizontalScrollIndicator: boolean): void,
        setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,
        setVerticalBounce(verticalBounce: boolean): void,
        setZoomScale(zoomScale: number, animated?: zoomScaleOption): void
    }
    declare     export type ListView = {
        allowsSelection: boolean,
        canScroll: boolean,
        caseInsensitiveSearch: boolean,
        defaultItemTemplate: any,
        editing: boolean,
        footerDividersEnabled: boolean,
        footerTitle: string,
        footerView: undefined.View,
        headerDividersEnabled: boolean,
        headerTitle: string,
        headerView: undefined.View,
        keepSectionsInSearch: boolean,
        pruneSectionsOnEdit: boolean,
        pullView: undefined.View,
        refreshControl: undefined.RefreshControl,
        scrollIndicatorStyle: number,
        searchText: string,
        searchView: any,
        sectionCount: number,
        sectionIndexTitles: Array<ListViewIndexEntry>,
        sections: Array<undefined.ListSection>,
        separatorColor: string,
        separatorInsets: Dictionary<Object>,
        separatorStyle: number,
        showVerticalScrollIndicator: boolean,
        style: number,
        templates: Dictionary<Object>,
        willScrollOnStatusTap: boolean,
        appendSection(section: undefined.ListSection, animation?: ListViewAnimationProperties): void,
        appendSection(
            section: Array<undefined.ListSection>,
            animation?: ListViewAnimationProperties): void,
        deleteSectionAt(sectionIndex: number, animation?: ListViewAnimationProperties): void,
        deselectItem(sectionIndex: number, itemIndex: number): void,
        getAllowsSelection(): boolean,
        getCanScroll(): boolean,
        getCaseInsensitiveSearch(): boolean,
        getDefaultItemTemplate(): any,
        getEditing(): boolean,
        getFooterDividersEnabled(): boolean,
        getFooterTitle(): string,
        getFooterView(): undefined.View,
        getHeaderDividersEnabled(): boolean,
        getHeaderTitle(): string,
        getHeaderView(): undefined.View,
        getKeepSectionsInSearch(): boolean,
        getPruneSectionsOnEdit(): boolean,
        getPullView(): undefined.View,
        getRefreshControl(): undefined.RefreshControl,
        getScrollIndicatorStyle(): number,
        getSearchText(): string,
        getSearchView(): any,
        getSectionCount(): number,
        getSectionIndexTitles(): Array<ListViewIndexEntry>,
        getSections(): Array<undefined.ListSection>,
        getSeparatorColor(): string,
        getSeparatorInsets(): Dictionary<Object>,
        getSeparatorStyle(): number,
        getShowVerticalScrollIndicator(): boolean,
        getStyle(): number,
        getTemplates(): Dictionary<Object>,
        getWillScrollOnStatusTap(): boolean,
        insertSectionAt(
            sectionIndex: number,
            section: undefined.ListSection,
            animation?: ListViewAnimationProperties): void,
        insertSectionAt(
            sectionIndex: number,
            section: Array<undefined.ListSection>,
            animation?: ListViewAnimationProperties): void,
        replaceSectionAt(
            sectionIndex: number,
            section: undefined.ListSection,
            animation: ListViewAnimationProperties): void,
        scrollToItem(
            sectionIndex: number,
            itemIndex: number,
            animation?: ListViewAnimationProperties): void,
        selectItem(sectionIndex: number, itemIndex: number): void,
        setAllowsSelection(allowsSelection: boolean): void,
        setCanScroll(canScroll: boolean): void,
        setCaseInsensitiveSearch(caseInsensitiveSearch: boolean): void,
        setContentInsets(edgeInsets: ListViewEdgeInsets, animated?: ListViewContentInsetOption): void,
        setDefaultItemTemplate(defaultItemTemplate: string): void,
        setDefaultItemTemplate(defaultItemTemplate: number): void,
        setEditing(editing: boolean): void,
        setFooterTitle(footerTitle: string): void,
        setFooterView(footerView: undefined.View): void,
        setHeaderTitle(headerTitle: string): void,
        setHeaderView(headerView: undefined.View): void,
        setKeepSectionsInSearch(keepSectionsInSearch: boolean): void,
        setMarker(markerProps: ListViewMarkerProps): void,
        setPruneSectionsOnEdit(pruneSectionsOnEdit: boolean): void,
        setPullView(pullView: undefined.View): void,
        setRefreshControl(refreshControl: undefined.RefreshControl): void,
        setScrollIndicatorStyle(scrollIndicatorStyle: number): void,
        setSearchText(searchText: string): void,
        setSearchView(searchView: undefined.SearchBar): void,
        setSearchView(searchView: undefined.SearchView): void,
        setSectionIndexTitles(sectionIndexTitles: Array<ListViewIndexEntry>): void,
        setSections(sections: Array<undefined.ListSection>): void,
        setSeparatorColor(separatorColor: string): void,
        setSeparatorInsets(separatorInsets: Dictionary<Object>): void,
        setSeparatorStyle(separatorStyle: number): void,
        setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,
        setWillScrollOnStatusTap(willScrollOnStatusTap: boolean): void
    }
    declare     export type TabGroup = {
        activeTab: undefined.Tab,
        activeTabBackgroundColor: string,
        activeTabBackgroundDisabledColor: string,
        activeTabBackgroundDisabledImage: string,
        activeTabBackgroundFocusedColor: string,
        activeTabBackgroundFocusedImage: string,
        activeTabBackgroundImage: string,
        activeTabBackgroundSelectedColor: string,
        activeTabBackgroundSelectedImage: string,
        activeTabIconTint: string,
        activity: undefined.Activity,
        allowUserCustomization: boolean,
        barColor: string,
        editButtonTitle: string,
        exitOnClose: boolean,
        navBarHidden: boolean,
        navTintColor: any,
        shadowImage: string,
        tabDividerColor: string,
        tabDividerWidth: any,
        tabHeight: any,
        tabs: Array<undefined.Tab>,
        tabsAtBottom: boolean,
        tabsBackgroundColor: string,
        tabsBackgroundDisabledColor: string,
        tabsBackgroundDisabledImage: string,
        tabsBackgroundFocusedColor: string,
        tabsBackgroundFocusedImage: string,
        tabsBackgroundImage: string,
        tabsBackgroundSelectedColor: string,
        tabsBackgroundSelectedImage: string,
        tabsTintColor: any,
        title: string,
        titleAttributes: titleAttributesParams,
        translucent: boolean,
        windowSoftInputMode: number,
        addTab(tab: undefined.Tab): void,
        close(): void,
        getActiveTab(): undefined.Tab,
        getActiveTabBackgroundColor(): string,
        getActiveTabBackgroundDisabledColor(): string,
        getActiveTabBackgroundDisabledImage(): string,
        getActiveTabBackgroundFocusedColor(): string,
        getActiveTabBackgroundFocusedImage(): string,
        getActiveTabBackgroundImage(): string,
        getActiveTabBackgroundSelectedColor(): string,
        getActiveTabBackgroundSelectedImage(): string,
        getActiveTabIconTint(): string,
        getActivity(): undefined.Activity,
        getAllowUserCustomization(): boolean,
        getBarColor(): string,
        getEditButtonTitle(): string,
        getExitOnClose(): boolean,
        getNavBarHidden(): boolean,
        getNavTintColor(): string,
        getShadowImage(): string,
        getTabDividerColor(): string,
        getTabDividerWidth(): any,
        getTabHeight(): any,
        getTabs(): Array<undefined.Tab>,
        getTabsAtBottom(): boolean,
        getTabsBackgroundColor(): string,
        getTabsBackgroundDisabledColor(): string,
        getTabsBackgroundDisabledImage(): string,
        getTabsBackgroundFocusedColor(): string,
        getTabsBackgroundFocusedImage(): string,
        getTabsBackgroundImage(): string,
        getTabsBackgroundSelectedColor(): string,
        getTabsBackgroundSelectedImage(): string,
        getTabsTintColor(): string,
        getTitle(): string,
        getTitleAttributes(): titleAttributesParams,
        getTranslucent(): boolean,
        getWindowSoftInputMode(): number,
        open(): void,
        removeTab(tab: undefined.Tab): void,
        setActiveTab(indexOrObject: number): void,
        setActiveTab(indexOrObject: undefined.Tab): void,
        setActiveTabBackgroundColor(activeTabBackgroundColor: string): void,
        setActiveTabBackgroundDisabledColor(activeTabBackgroundDisabledColor: string): void,
        setActiveTabBackgroundDisabledImage(activeTabBackgroundDisabledImage: string): void,
        setActiveTabBackgroundFocusedColor(activeTabBackgroundFocusedColor: string): void,
        setActiveTabBackgroundFocusedImage(activeTabBackgroundFocusedImage: string): void,
        setActiveTabBackgroundImage(activeTabBackgroundImage: string): void,
        setActiveTabBackgroundSelectedColor(activeTabBackgroundSelectedColor: string): void,
        setActiveTabBackgroundSelectedImage(activeTabBackgroundSelectedImage: string): void,
        setActiveTabIconTint(activeTabIconTint: string): void,
        setAllowUserCustomization(allowUserCustomization: boolean): void,
        setBarColor(barColor: string): void,
        setEditButtonTitle(editButtonTitle: string): void,
        setExitOnClose(exitOnClose: boolean): void,
        setNavBarHidden(navBarHidden: boolean): void,
        setNavTintColor(navTintColor: string): void,
        setShadowImage(shadowImage: string): void,
        setTabDividerColor(tabDividerColor: string): void,
        setTabDividerWidth(tabDividerWidth: number): void,
        setTabDividerWidth(tabDividerWidth: string): void,
        setTabHeight(tabHeight: number): void,
        setTabHeight(tabHeight: string): void,
        setTabs(tabs: Array<undefined.Tab>): void,
        setTabsAtBottom(tabsAtBottom: boolean): void,
        setTabsBackgroundColor(tabsBackgroundColor: string): void,
        setTabsBackgroundDisabledColor(tabsBackgroundDisabledColor: string): void,
        setTabsBackgroundDisabledImage(tabsBackgroundDisabledImage: string): void,
        setTabsBackgroundFocusedColor(tabsBackgroundFocusedColor: string): void,
        setTabsBackgroundFocusedImage(tabsBackgroundFocusedImage: string): void,
        setTabsBackgroundImage(tabsBackgroundImage: string): void,
        setTabsBackgroundSelectedColor(tabsBackgroundSelectedColor: string): void,
        setTabsBackgroundSelectedImage(tabsBackgroundSelectedImage: string): void,
        setTabsTintColor(tabsTintColor: string): void,
        setTitle(title: string): void,
        setTitleAttributes(titleAttributes: titleAttributesParams): void,
        setTranslucent(translucent: boolean): void
    }
    declare     export type TableView = {
        allowsSelection: boolean,
        allowsSelectionDuringEditing: boolean,
        data: any,
        editable: boolean,
        editing: boolean,
        filterAnchored: boolean,
        filterAttribute: string,
        filterCaseInsensitive: boolean,
        footerDividersEnabled: boolean,
        footerTitle: string,
        footerView: undefined.View,
        headerDividersEnabled: boolean,
        headerPullView: undefined.View,
        headerTitle: string,
        headerView: undefined.View,
        hideSearchOnSelection: boolean,
        index: Array<TableViewIndexEntry>,
        maxRowHeight: number,
        minRowHeight: number,
        moveable: boolean,
        moving: boolean,
        overScrollMode: number,
        refreshControl: undefined.RefreshControl,
        rowHeight: number,
        scrollIndicatorStyle: number,
        scrollable: boolean,
        scrollsToTop: boolean,
        search: any,
        searchAsChild: boolean,
        searchHidden: boolean,
        sectionCount: number,
        sections: Array<undefined.TableViewSection>,
        separatorColor: string,
        separatorInsets: Dictionary<Object>,
        separatorStyle: number,
        showVerticalScrollIndicator: boolean,
        style: number,
        appendRow(row: undefined.TableViewRow, animation?: TableViewAnimationProperties): void,
        appendRow(
            row: Dictionary<undefined.TableViewRow>,
            animation?: TableViewAnimationProperties): void,
        appendRow(
            row: Array<undefined.TableViewRow>,
            animation?: TableViewAnimationProperties): void,
        appendRow(
            row: Array<Dictionary<undefined.TableViewRow >> ,
            animation?: TableViewAnimationProperties): void,
        appendSection(
            section: undefined.TableViewSection,
            animation?: TableViewAnimationProperties): void,
        appendSection(
            section: Dictionary<undefined.TableViewSection>,
            animation?: TableViewAnimationProperties): void,
        appendSection(
            section: Array<undefined.TableViewSection>,
            animation?: TableViewAnimationProperties): void,
        appendSection(
            section: Array<Dictionary<undefined.TableViewSection >> ,
            animation?: TableViewAnimationProperties): void,
        deleteRow(row: number, animation?: TableViewAnimationProperties): void,
        deleteRow(row: undefined.TableViewRow, animation?: TableViewAnimationProperties): void,
        deleteSection(section: number, animation?: TableViewAnimationProperties): void,
        deselectRow(row: number): void,
        getAllowsSelection(): boolean,
        getAllowsSelectionDuringEditing(): boolean,
        getData(): any,
        getEditable(): boolean,
        getEditing(): boolean,
        getFilterAnchored(): boolean,
        getFilterAttribute(): string,
        getFilterCaseInsensitive(): boolean,
        getFooterDividersEnabled(): boolean,
        getFooterTitle(): string,
        getFooterView(): undefined.View,
        getHeaderDividersEnabled(): boolean,
        getHeaderPullView(): undefined.View,
        getHeaderTitle(): string,
        getHeaderView(): undefined.View,
        getHideSearchOnSelection(): boolean,
        getIndex(): Array<TableViewIndexEntry>,
        getMaxRowHeight(): number,
        getMinRowHeight(): number,
        getMoveable(): boolean,
        getMoving(): boolean,
        getOverScrollMode(): number,
        getRefreshControl(): undefined.RefreshControl,
        getRowHeight(): number,
        getScrollIndicatorStyle(): number,
        getScrollable(): boolean,
        getScrollsToTop(): boolean,
        getSearch(): any,
        getSearchAsChild(): boolean,
        getSearchHidden(): boolean,
        getSectionCount(): number,
        getSections(): Array<undefined.TableViewSection>,
        getSeparatorColor(): string,
        getSeparatorInsets(): Dictionary<Object>,
        getSeparatorStyle(): number,
        getShowVerticalScrollIndicator(): boolean,
        getStyle(): number,
        insertRowAfter(
            index: number,
            row: undefined.TableViewRow,
            animation?: TableViewAnimationProperties): void,
        insertRowAfter(
            index: number,
            row: Dictionary<undefined.TableViewRow>,
            animation?: TableViewAnimationProperties): void,
        insertRowBefore(
            index: number,
            row: undefined.TableViewRow,
            animation?: TableViewAnimationProperties): void,
        insertRowBefore(
            index: number,
            row: Dictionary<undefined.TableViewRow>,
            animation?: TableViewAnimationProperties): void,
        insertSectionAfter(
            index: number,
            section: undefined.TableViewSection,
            animation?: TableViewAnimationProperties): void,
        insertSectionAfter(
            index: number,
            section: Dictionary<undefined.TableViewSection>,
            animation?: TableViewAnimationProperties): void,
        insertSectionBefore(
            index: number,
            section: undefined.TableViewSection,
            animation?: TableViewAnimationProperties): void,
        insertSectionBefore(
            index: number,
            section: Dictionary<undefined.TableViewSection>,
            animation?: TableViewAnimationProperties): void,
        scrollToIndex(index: number, animation?: TableViewAnimationProperties): void,
        scrollToTop(top: number, animation?: TableViewAnimationProperties): void,
        selectRow(row: number): void,
        setAllowsSelection(allowsSelection: boolean): void,
        setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: boolean): void,
        setContentInsets(edgeInsets: TableViewEdgeInsets, animated?: TableViewContentInsetOption): void,
        setData(
            data: Array<undefined.TableViewRow>,
            animation: TableViewAnimationProperties): void,
        setData(
            data: Array<Dictionary<undefined.TableViewRow >> ,
            animation: TableViewAnimationProperties): void,
        setData(
            data: Array<undefined.TableViewSection>,
            animation: TableViewAnimationProperties): void,
        setEditable(editable: boolean): void,
        setEditing(editing: boolean): void,
        setFilterAnchored(filterAnchored: boolean): void,
        setFilterAttribute(filterAttribute: string): void,
        setFilterCaseInsensitive(filterCaseInsensitive: boolean): void,
        setFooterTitle(footerTitle: string): void,
        setFooterView(footerView: undefined.View): void,
        setHeaderPullView(view: undefined.View): void,
        setHeaderTitle(headerTitle: string): void,
        setHeaderView(headerView: undefined.View): void,
        setHideSearchOnSelection(hideSearchOnSelection: boolean): void,
        setIndex(index: Array<TableViewIndexEntry>): void,
        setMaxRowHeight(maxRowHeight: number): void,
        setMinRowHeight(minRowHeight: number): void,
        setMoveable(moveable: boolean): void,
        setMoving(moving: boolean): void,
        setOverScrollMode(overScrollMode: number): void,
        setRefreshControl(refreshControl: undefined.RefreshControl): void,
        setRowHeight(rowHeight: number): void,
        setScrollIndicatorStyle(scrollIndicatorStyle: number): void,
        setScrollable(scrollable: boolean): void,
        setScrollsToTop(scrollsToTop: boolean): void,
        setSearch(search: undefined.SearchBar): void,
        setSearch(search: undefined.SearchView): void,
        setSearchAsChild(searchAsChild: boolean): void,
        setSearchHidden(searchHidden: boolean): void,
        setSections(sections: Array<undefined.TableViewSection>): void,
        setSeparatorColor(separatorColor: string): void,
        setSeparatorInsets(separatorInsets: Dictionary<Object>): void,
        setSeparatorStyle(separatorStyle: number): void,
        setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,
        setStyle(style: number): void,
        updateRow(
            index: number,
            row: undefined.TableViewRow,
            animation: TableViewAnimationProperties): void,
        updateSection(
            index: number,
            section: undefined.TableViewSection,
            animation: TableViewAnimationProperties): void
    }
    declare     export type Button = {
        color: string,
        disabledColor: string,
        font: Font,
        image: any,
        selectedColor: string,
        shadowColor: string,
        shadowOffset: Dictionary<Object>,
        shadowRadius: number,
        style: number,
        systemButton: number,
        textAlign: any,
        title: string,
        titleid: string,
        verticalAlign: any,
        getColor(): string,
        getDisabledColor(): string,
        getFont(): Font,
        getImage(): any,
        getSelectedColor(): string,
        getShadowColor(): string,
        getShadowOffset(): Dictionary<Object>,
        getShadowRadius(): number,
        getStyle(): number,
        getSystemButton(): number,
        getTextAlign(): any,
        getTitle(): string,
        getTitleid(): string,
        getVerticalAlign(): any,
        setColor(color: string): void,
        setDisabledColor(disabledColor: string): void,
        setFont(font: Font): void,
        setImage(image: string): void,
        setImage(image: Ti$Blob): void,
        setSelectedColor(selectedColor: string): void,
        setShadowColor(shadowColor: string): void,
        setShadowOffset(shadowOffset: Dictionary<Object>): void,
        setShadowRadius(shadowRadius: number): void,
        setStyle(style: number): void,
        setSystemButton(systemButton: number): void,
        setTextAlign(textAlign: string): void,
        setTextAlign(textAlign: number): void,
        setTitle(title: string): void,
        setTitleid(titleid: string): void,
        setVerticalAlign(verticalAlign: number): void,
        setVerticalAlign(verticalAlign: string): void
    }
    declare     export type OptionDialog = {
        androidView: undefined.View,
        buttonNames: Array<Global$String>,
        cancel: number,
        destructive: number,
        opaquebackground: boolean,
        options: Array<Global$String>,
        persistent: boolean,
        selectedIndex: number,
        title: string,
        titleid: string,
        getAndroidView(): undefined.View,
        getButtonNames(): Array<Global$String>,
        getCancel(): number,
        getDestructive(): number,
        getOpaquebackground(): boolean,
        getOptions(): Array<Global$String>,
        getPersistent(): boolean,
        getSelectedIndex(): number,
        getTitle(): string,
        getTitleid(): string,
        hide(params?: hideParams): void,
        setAndroidView(androidView: undefined.View): void,
        setCancel(cancel: number): void,
        setOpaquebackground(opaquebackground: boolean): void,
        setPersistent(persistent: boolean): void,
        setTitle(title: string): void,
        setTitleid(titleid: string): void,
        show(params?: showParams): void
    }
    declare     export type RefreshControl = {
        tintColor: string,
        title: undefined.AttributedString,
        beginRefreshing(): void,
        endRefreshing(): void,
        getTintColor(): string,
        getTitle(): undefined.AttributedString,
        setTintColor(tintColor: string): void,
        setTitle(title: undefined.AttributedString): void
    }
    declare     export type EmailDialog = {
        CANCELLED: number,
        FAILED: number,
        SAVED: number,
        SENT: number,
        barColor: string,
        bccRecipients: Array<Global$String>,
        ccRecipients: Array<Global$String>,
        html: boolean,
        messageBody: string,
        subject: string,
        toRecipients: Array<Global$String>,
        addAttachment(attachment: Ti$Blob): void,
        addAttachment(attachment: undefined.File): void,
        getBarColor(): string,
        getBccRecipients(): Array<Global$String>,
        getCcRecipients(): Array<Global$String>,
        getHtml(): boolean,
        getMessageBody(): string,
        getSubject(): string,
        getToRecipients(): Array<Global$String>,
        isSupported(): boolean,
        open(properties: any): void,
        setBarColor(barColor: string): void,
        setBccRecipients(bccRecipients: Array<Global$String>): void,
        setCcRecipients(ccRecipients: Array<Global$String>): void,
        setHtml(html: boolean): void,
        setMessageBody(messageBody: string): void,
        setSubject(subject: string): void,
        setToRecipients(toRecipients: Array<Global$String>): void
    }
    declare     export type CoverFlowView = {
        images: any,
        selected: number,
        getImages(): any,
        getSelected(): number,
        setImage(index: number, image: string): void,
        setImage(image: Ti$Blob): void,
        setImage(image: undefined.File): void,
        setImage(index: number, image: CoverFlowImageType): void,
        setImages(images: Array<Global$String>): void,
        setImages(images: Array<Ti$Blob>): void,
        setImages(images: Array<undefined.File>): void,
        setImages(images: Array<CoverFlowImageType>): void,
        setSelected(selected: number): void
    }
    declare     export type ImageView = {
        animating: boolean,
        autorotate: boolean,
        decodeRetries: number,
        defaultImage: string,
        duration: number,
        enableZoomControls: boolean,
        hires: boolean,
        image: any,
        images: any,
        paused: boolean,
        preventDefaultImage: boolean,
        repeatCount: number,
        reverse: boolean,
        url: string,
        getAnimating(): boolean,
        getAutorotate(): boolean,
        getDecodeRetries(): number,
        getDefaultImage(): string,
        getDuration(): number,
        getEnableZoomControls(): boolean,
        getHires(): boolean,
        getImage(): any,
        getImages(): any,
        getPaused(): boolean,
        getPreventDefaultImage(): boolean,
        getRepeatCount(): number,
        getReverse(): boolean,
        getUrl(): string,
        pause(): void,
        resume(): void,
        setDecodeRetries(decodeRetries: number): void,
        setDefaultImage(defaultImage: string): void,
        setDuration(duration: number): void,
        setEnableZoomControls(enableZoomControls: boolean): void,
        setHires(hires: boolean): void,
        setImage(image: string): void,
        setImage(image: Ti$Blob): void,
        setImage(image: undefined.File): void,
        setImages(images: Array<Global$String>): void,
        setImages(images: Array<Ti$Blob>): void,
        setImages(images: Array<undefined.File>): void,
        setPreventDefaultImage(preventDefaultImage: boolean): void,
        setRepeatCount(repeatCount: number): void,
        setReverse(reverse: boolean): void,
        setUrl(url: string): void,
        start(): void,
        stop(): void,
        toBlob(): void
    }
    declare     export type MaskedImage = {
        image: string,
        mask: string,
        mode: number,
        tint: string,
        getImage(): string,
        getMask(): string,
        getMode(): number,
        getTint(): string,
        setImage(image: string): void,
        setMask(mask: string): void,
        setMode(mode: number): void,
        setTint(tint: string): void
    }
    declare     export type ProgressBar = {
        color: string,
        font: Font,
        max: number,
        message: string,
        min: number,
        style: number,
        value: number,
        getColor(): string,
        getFont(): Font,
        getMax(): number,
        getMessage(): string,
        getMin(): number,
        getStyle(): number,
        getValue(): number,
        setColor(color: string): void,
        setFont(font: Font): void,
        setMax(max: number): void,
        setMessage(message: string): void,
        setMin(min: number): void,
        setStyle(style: number): void,
        setValue(value: number): void
    }
    declare module 'MobileWeb' {
        declare         export var apiName: string;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createNavigationGroup(parameters?: Dictionary<undefined.NavigationGroup>): undefined.NavigationGroup
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export type NavigationGroup = {
            window: undefined.Window,
            close(window: undefined.Window, options: Dictionary<Object>): void,
            getWindow(): undefined.Window,
            open(window: undefined.Window, options: Dictionary<Object>): void
        }
    }

    declare     export type Label = {
        attributedString: undefined.AttributedString,
        autoLink: number,
        backgroundPaddingBottom: number,
        backgroundPaddingLeft: number,
        backgroundPaddingRight: number,
        backgroundPaddingTop: number,
        color: string,
        ellipsize: boolean,
        font: Font,
        highlightedColor: string,
        html: string,
        includeFontPadding: boolean,
        minimumFontSize: number,
        shadowColor: string,
        shadowOffset: Dictionary<Object>,
        shadowRadius: number,
        text: string,
        textAlign: any,
        textid: string,
        verticalAlign: any,
        wordWrap: boolean,
        getAttributedString(): undefined.AttributedString,
        getAutoLink(): number,
        getBackgroundPaddingBottom(): number,
        getBackgroundPaddingLeft(): number,
        getBackgroundPaddingRight(): number,
        getBackgroundPaddingTop(): number,
        getColor(): string,
        getEllipsize(): boolean,
        getFont(): Font,
        getHighlightedColor(): string,
        getHtml(): string,
        getIncludeFontPadding(): boolean,
        getMinimumFontSize(): number,
        getShadowColor(): string,
        getShadowOffset(): Dictionary<Object>,
        getShadowRadius(): number,
        getText(): string,
        getTextAlign(): any,
        getTextid(): string,
        getVerticalAlign(): any,
        getWordWrap(): boolean,
        setAttributedString(attributedString: undefined.AttributedString): void,
        setAutoLink(autoLink: number): void,
        setBackgroundPaddingBottom(backgroundPaddingBottom: number): void,
        setBackgroundPaddingLeft(backgroundPaddingLeft: number): void,
        setBackgroundPaddingRight(backgroundPaddingRight: number): void,
        setBackgroundPaddingTop(backgroundPaddingTop: number): void,
        setColor(color: string): void,
        setEllipsize(ellipsize: boolean): void,
        setFont(font: Font): void,
        setHighlightedColor(highlightedColor: string): void,
        setHtml(html: string): void,
        setIncludeFontPadding(includeFontPadding: boolean): void,
        setMinimumFontSize(minimumFontSize: number): void,
        setShadowColor(shadowColor: string): void,
        setShadowOffset(shadowOffset: Dictionary<Object>): void,
        setShadowRadius(shadowRadius: number): void,
        setText(text: string): void,
        setTextAlign(textAlign: string): void,
        setTextAlign(textAlign: number): void,
        setTextid(textid: string): void,
        setVerticalAlign(verticalAlign: number): void,
        setVerticalAlign(verticalAlign: string): void,
        setWordWrap(wordWrap: boolean): void
    }
    declare     export type SearchBar = {
        autocapitalization: number,
        autocorrect: boolean,
        barColor: string,
        hintText: string,
        hinttextid: string,
        keyboardType: number,
        prompt: string,
        promptid: string,
        showBookmark: boolean,
        showCancel: boolean,
        value: string,
        blur(): void,
        focus(): void,
        getAutocapitalization(): number,
        getAutocorrect(): boolean,
        getBarColor(): string,
        getHintText(): string,
        getHinttextid(): string,
        getKeyboardType(): number,
        getPrompt(): string,
        getPromptid(): string,
        getShowBookmark(): boolean,
        getShowCancel(): boolean,
        getValue(): string,
        setAutocapitalization(autocapitalization: number): void,
        setAutocorrect(autocorrect: boolean): void,
        setBarColor(barColor: string): void,
        setHintText(hintText: string): void,
        setHinttextid(hinttextid: string): void,
        setKeyboardType(keyboardType: number): void,
        setPrompt(prompt: string): void,
        setPromptid(promptid: string): void,
        setShowBookmark(showBookmark: boolean): void,
        setShowCancel(showCancel: boolean, animated?: Dictionary<Object>): void,
        setValue(value: string): void
    }
    declare     export type SMSDialog = {
        CANCELLED: number,
        FAILED: number,
        SENT: number,
        messageBody: string,
        toRecipients: Array<Global$String>,
        getMessageBody(): string,
        getToRecipients(): Array<Global$String>,
        isSupported(): boolean,
        open(): void,
        setMessageBody(messageBody: string): void,
        setToRecipients(toRecipients: Array<Global$String>): void
    }
    declare     export type TableViewSection = {
        footerTitle: string,
        footerView: undefined.View,
        headerTitle: string,
        headerView: undefined.View,
        rowCount: number,
        rows: Array<undefined.TableViewRow>,
        add(row: undefined.TableViewRow): void,
        getFooterTitle(): string,
        getFooterView(): undefined.View,
        getHeaderTitle(): string,
        getHeaderView(): undefined.View,
        getRowCount(): number,
        getRows(): Array<undefined.TableViewRow>,
        remove(row: undefined.TableViewRow): void,
        rowAtIndex(index: number): undefined.TableViewRow,
        setFooterTitle(footerTitle: string): void,
        setFooterView(footerView: undefined.View): void,
        setHeaderTitle(headerTitle: string): void,
        setHeaderView(headerView: undefined.View): void
    }
    declare     export type Animation = {
        anchorPoint: Point,
        autoreverse: boolean,
        backgroundColor: string,
        bottom: number,
        center: any,
        color: string,
        curve: number,
        delay: number,
        duration: number,
        height: number,
        left: number,
        opacity: number,
        opaque: boolean,
        repeat: number,
        right: number,
        top: number,
        transform: any,
        transition: number,
        view: undefined.View,
        visible: boolean,
        width: number,
        zIndex: number,
        getAnchorPoint(): Point,
        getAutoreverse(): boolean,
        getBackgroundColor(): string,
        getBottom(): number,
        getCenter(): any,
        getColor(): string,
        getCurve(): number,
        getDelay(): number,
        getDuration(): number,
        getHeight(): number,
        getLeft(): number,
        getOpacity(): number,
        getOpaque(): boolean,
        getRepeat(): number,
        getRight(): number,
        getTop(): number,
        getTransform(): any,
        getTransition(): number,
        getView(): undefined.View,
        getVisible(): boolean,
        getWidth(): number,
        getZIndex(): number,
        setAnchorPoint(anchorPoint: Point): void,
        setAutoreverse(autoreverse: boolean): void,
        setBackgroundColor(backgroundColor: string): void,
        setBottom(bottom: number): void,
        setCenter(center: any): void,
        setColor(color: string): void,
        setCurve(curve: number): void,
        setDelay(delay: number): void,
        setDuration(duration: number): void,
        setHeight(height: number): void,
        setLeft(left: number): void,
        setOpacity(opacity: number): void,
        setOpaque(opaque: boolean): void,
        setRepeat(repeat: number): void,
        setRight(right: number): void,
        setTop(top: number): void,
        setTransform(transform: undefined._2DMatrix): void,
        setTransform(transform: undefined._3DMatrix): void,
        setTransition(transition: number): void,
        setView(view: undefined.View): void,
        setVisible(visible: boolean): void,
        setWidth(width: number): void,
        setZIndex(zIndex: number): void
    }
    declare     export type Toolbar = {
        barColor: string,
        borderBottom: boolean,
        borderTop: boolean,
        extendBackground: boolean,
        items: Array<undefined.View>,
        translucent: boolean,
        getBarColor(): string,
        getBorderBottom(): boolean,
        getBorderTop(): boolean,
        getExtendBackground(): boolean,
        getItems(): Array<undefined.View>,
        getTranslucent(): boolean,
        setBarColor(barColor: string): void,
        setBorderBottom(borderBottom: boolean): void,
        setBorderTop(borderTop: boolean): void,
        setItems(items: Array<undefined.View>): void,
        setTranslucent(translucent: boolean): void
    }
    declare     export type Notification = {
        duration: number,
        horizontalMargin: number,
        message: string,
        verticalMargin: number,
        xOffset: number,
        yOffset: number,
        getDuration(): number,
        getHorizontalMargin(): number,
        getMessage(): string,
        getVerticalMargin(): number,
        getXOffset(): number,
        getYOffset(): number,
        setDuration(duration: number): void,
        setHorizontalMargin(horizontalMargin: number): void,
        setMessage(message: string): void,
        setVerticalMargin(verticalMargin: number): void,
        setXOffset(xOffset: number): void,
        setYOffset(yOffset: number): void
    }
    declare     export type PickerColumn = {
        font: Font,
        rowCount: number,
        rows: Array<undefined.PickerRow>,
        selectedRow: undefined.PickerRow,
        addRow(row: undefined.PickerRow): void,
        getFont(): Font,
        getRowCount(): number,
        getRows(): Array<undefined.PickerRow>,
        getSelectedRow(): undefined.PickerRow,
        removeRow(row: undefined.PickerRow): void,
        setFont(font: Font): void,
        setSelectedRow(selectedRow: undefined.PickerRow): void
    }
    declare     export type ActivityIndicator = {
        bottom: any,
        color: string,
        font: Font,
        height: string,
        indicatorColor: string,
        indicatorDiameter: string,
        left: any,
        message: string,
        messageid: string,
        right: any,
        style: number,
        top: any,
        width: string,
        add(): void,
        getBottom(): any,
        getColor(): string,
        getFont(): Font,
        getHeight(): string,
        getIndicatorColor(): string,
        getIndicatorDiameter(): string,
        getLeft(): any,
        getMessage(): string,
        getMessageid(): string,
        getRight(): any,
        getStyle(): number,
        getTop(): any,
        getWidth(): string,
        hide(): void,
        remove(): void,
        setBottom(bottom: number): void,
        setBottom(bottom: string): void,
        setColor(color: string): void,
        setFont(font: Font): void,
        setHeight(height: string): void,
        setIndicatorColor(indicatorColor: string): void,
        setIndicatorDiameter(indicatorDiameter: string): void,
        setLeft(left: number): void,
        setLeft(left: string): void,
        setMessage(message: string): void,
        setMessageid(messageid: string): void,
        setRight(right: number): void,
        setRight(right: string): void,
        setStyle(style: number): void,
        setTop(top: number): void,
        setTop(top: string): void,
        setWidth(width: string): void,
        show(): void
    }
    declare     export type Picker = {
        calendarViewShown: boolean,
        columns: Array<undefined.PickerColumn>,
        countDownDuration: number,
        font: Font,
        format24: boolean,
        locale: string,
        maxDate: Date,
        minDate: Date,
        minuteInterval: number,
        selectionIndicator: boolean,
        type: number,
        useSpinner: boolean,
        value: Date,
        visibleItems: number,
        add(data: Array<undefined.PickerRow>): void,
        add(data: undefined.PickerRow): void,
        add(data: Array<undefined.PickerColumn>): void,
        add(data: undefined.PickerColumn): void,
        getCalendarViewShown(): boolean,
        getColumns(): Array<undefined.PickerColumn>,
        getCountDownDuration(): number,
        getFont(): Font,
        getFormat24(): boolean,
        getLocale(): string,
        getMaxDate(): Date,
        getMinDate(): Date,
        getMinuteInterval(): number,
        getSelectedRow(index: number): undefined.PickerRow,
        getSelectionIndicator(): boolean,
        getType(): number,
        getUseSpinner(): boolean,
        getValue(): Date,
        getVisibleItems(): number,
        reloadColumn(column: undefined.PickerColumn): void,
        setCalendarViewShown(calendarViewShown: boolean): void,
        setColumns(columns: Array<undefined.PickerColumn>): void,
        setCountDownDuration(countDownDuration: number): void,
        setFont(font: Font): void,
        setFormat24(format24: boolean): void,
        setLocale(locale: string): void,
        setMaxDate(maxDate: Date): void,
        setMinDate(minDate: Date): void,
        setMinuteInterval(minuteInterval: number): void,
        setSelectedRow(column: number, row: number, animated?: boolean): void,
        setSelectionIndicator(selectionIndicator: boolean): void,
        setType(type: number): void,
        setUseSpinner(useSpinner: boolean): void,
        setValue(date: any, suppressEvent: boolean): undefined.PickerRow,
        setVisibleItems(visibleItems: number): void,
        showDatePickerDialog(dictObj: any): void,
        showTimePickerDialog(dictObj: any): void
    }
}


declare export interface Ti$API {
    debug(message: Array<Global$String>): void,
        debug(message: string): void,
        error(message: Array<Global$String>): void,
        error(message: string): void,
        info(message: Array<Global$String>): void,
        info(message: string): void,
        log(level: string, message: Array<Global$String>): void,
        log(level: string, message: string): void,
        timestamp(message: Array<Global$String>): void,
        timestamp(message: string): void,
        trace(message: Array<Global$String>): void,
        trace(message: string): void,
        warn(message: Array<Global$String>): void,
        warn(message: string): void
}

declare module 'Geolocation' {
    declare     export var ACCURACY_BEST: number;
    declare     export var ACCURACY_BEST_FOR_NAVIGATION: number;
    declare     export var ACCURACY_HIGH: number;
    declare     export var ACCURACY_HUNDRED_METERS: number;
    declare     export var ACCURACY_KILOMETER: number;
    declare     export var ACCURACY_LOW: number;
    declare     export var ACCURACY_NEAREST_TEN_METERS: number;
    declare     export var ACCURACY_THREE_KILOMETERS: number;
    declare     export var ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION: string;
    declare     export var ACTIVITYTYPE_FITNESS: string;
    declare     export var ACTIVITYTYPE_OTHER: string;
    declare     export var ACTIVITYTYPE_OTHER_NAVIGATION: string;
    declare     export var AUTHORIZATION_ALWAYS: number;
    declare     export var AUTHORIZATION_AUTHORIZED: number;
    declare     export var AUTHORIZATION_DENIED: number;
    declare     export var AUTHORIZATION_RESTRICTED: number;
    declare     export var AUTHORIZATION_UNKNOWN: number;
    declare     export var AUTHORIZATION_WHEN_IN_USE: number;
    declare     export var ERROR_DENIED: number;
    declare     export var ERROR_HEADING_FAILURE: number;
    declare     export var ERROR_LOCATION_UNKNOWN: number;
    declare     export var ERROR_NETWORK: number;
    declare     export var ERROR_REGION_MONITORING_DELAYED: number;
    declare     export var ERROR_REGION_MONITORING_DENIED: number;
    declare     export var ERROR_REGION_MONITORING_FAILURE: number;
    declare     export var ERROR_TIMEOUT: number;
    declare     export var PROVIDER_GPS: string;
    declare     export var PROVIDER_NETWORK: string;
    declare     export var PROVIDER_PASSIVE: string;
    declare     export var accuracy: number;
    declare     export var activityType: number;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var distanceFilter: number;
    declare     export var frequency: number;
    declare     export var hasCompass: boolean;
    declare     export var headingFilter: number;
    declare     export var lastGeolocation: string;
    declare     export var locationServicesAuthorization: number;
    declare     export var locationServicesEnabled: boolean;
    declare     export var pauseLocationUpdateAutomatically: boolean;
    declare     export var preferredProvider: string;
    declare     export var purpose: string;
    declare     export var showCalibration: boolean;
    declare     export var trackSignificantLocationChange: boolean;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function forwardGeocoder(address: string, callback: (...args: any[]) => any): void
    declare     export function getAccuracy(): number
    declare     export function getActivityType(): number
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getCurrentHeading(callback: (...args: any[]) => any): void
    declare     export function getCurrentPosition(callback: (...args: any[]) => any): void
    declare     export function getDistanceFilter(): number
    declare     export function getFrequency(): number
    declare     export function getHasCompass(): boolean
    declare     export function getHeadingFilter(): number
    declare     export function getLastGeolocation(): string
    declare     export function getLocationServicesAuthorization(): number
    declare     export function getLocationServicesEnabled(): boolean
    declare     export function getPauseLocationUpdateAutomatically(): boolean
    declare     export function getPreferredProvider(): string
    declare     export function getPurpose(): string
    declare     export function getShowCalibration(): boolean
    declare     export function getTrackSignificantLocationChange(): boolean
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function reverseGeocoder(latitude: number, longitude: number, callback: (...args: any[]) => any): void
    declare     export function setAccuracy(accuracy: number): void
    declare     export function setActivityType(activityType: number): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setDistanceFilter(distanceFilter: number): void
    declare     export function setFrequency(frequency: number): void
    declare     export function setHeadingFilter(headingFilter: number): void
    declare     export function setLocationServicesAuthorization(locationServicesAuthorization: number): void
    declare     export function setPauseLocationUpdateAutomatically(pauseLocationUpdateAutomatically: boolean): void
    declare     export function setPreferredProvider(preferredProvider: string): void
    declare     export function setPurpose(purpose: string): void
    declare     export function setShowCalibration(showCalibration: boolean): void
    declare     export function setTrackSignificantLocationChange(trackSignificantLocationChange: boolean): void
    declare module 'Android' {
        declare         export var LINKIFY_ALL: number;
        declare         export var LINKIFY_EMAIL_ADDRESSES: number;
        declare         export var LINKIFY_MAP_ADDRESSES: number;
        declare         export var LINKIFY_PHONE_NUMBERS: number;
        declare         export var LINKIFY_WEB_URLS: number;
        declare         export var OVER_SCROLL_ALWAYS: number;
        declare         export var OVER_SCROLL_IF_CONTENT_SCROLLS: number;
        declare         export var OVER_SCROLL_NEVER: number;
        declare         export var PIXEL_FORMAT_A_8: number;
        declare         export var PIXEL_FORMAT_LA_88: number;
        declare         export var PIXEL_FORMAT_L_8: number;
        declare         export var PIXEL_FORMAT_OPAQUE: number;
        declare         export var PIXEL_FORMAT_RGBA_4444: number;
        declare         export var PIXEL_FORMAT_RGBA_5551: number;
        declare         export var PIXEL_FORMAT_RGBA_8888: number;
        declare         export var PIXEL_FORMAT_RGBX_8888: number;
        declare         export var PIXEL_FORMAT_RGB_332: number;
        declare         export var PIXEL_FORMAT_RGB_565: number;
        declare         export var PIXEL_FORMAT_RGB_888: number;
        declare         export var PIXEL_FORMAT_TRANSLUCENT: number;
        declare         export var PIXEL_FORMAT_TRANSPARENT: number;
        declare         export var PIXEL_FORMAT_UNKNOWN: number;
        declare         export var PROGRESS_INDICATOR_DETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_DIALOG: number;
        declare         export var PROGRESS_INDICATOR_INDETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_STATUS_BAR: number;
        declare         export var SOFT_INPUT_ADJUST_PAN: number;
        declare         export var SOFT_INPUT_ADJUST_RESIZE: number;
        declare         export var SOFT_INPUT_ADJUST_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;
        declare         export var SOFT_INPUT_STATE_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_VISIBLE: number;
        declare         export var SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_HIDE_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_SHOW_ON_FOCUS: number;
        declare         export var SWITCH_STYLE_CHECKBOX: number;
        declare         export var SWITCH_STYLE_TOGGLEBUTTON: number;
        declare         export var WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;
        declare         export var WEBVIEW_LOAD_CACHE_ONLY: number;
        declare         export var WEBVIEW_LOAD_DEFAULT: number;
        declare         export var WEBVIEW_LOAD_NO_CACHE: number;
        declare         export var WEBVIEW_PLUGINS_OFF: number;
        declare         export var WEBVIEW_PLUGINS_ON: number;
        declare         export var WEBVIEW_PLUGINS_ON_DEMAND: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createProgressIndicator(
            parameters?: Dictionary<undefined.ProgressIndicator>): undefined.ProgressIndicator
        declare         export function createSearchView(parameters?: Dictionary<undefined.SearchView>): undefined.SearchView
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function hideSoftKeyboard(): void
        declare         export function openPreferences(): void
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type SearchView = {
            hintText: string,
            iconified: boolean,
            iconifiedByDefault: boolean,
            submitEnabled: boolean,
            value: string,
            blur(): void,
            focus(): void,
            getHintText(): string,
            getIconified(): boolean,
            getIconifiedByDefault(): boolean,
            getSubmitEnabled(): boolean,
            getValue(): string,
            setHintText(hintText: string): void,
            setIconified(iconified: boolean): void,
            setIconifiedByDefault(iconifiedByDefault: boolean): void,
            setSubmitEnabled(submitEnabled: boolean): void,
            setValue(value: string): void
        }
        declare         export type ProgressIndicator = {
            cancelable: boolean,
            location: number,
            max: number,
            message: string,
            messageid: string,
            min: number,
            type: number,
            getCancelable(): boolean,
            getLocation(): number,
            getMax(): number,
            getMessage(): string,
            getMessageid(): string,
            getMin(): number,
            getType(): number,
            hide(): void,
            setCancelable(cancelable: boolean): void,
            setLocation(location: number): void,
            setMax(max: number): void,
            setMessage(message: string): void,
            setMessageid(messageid: string): void,
            setMin(min: number): void,
            setType(type: number): void,
            show(): void
        }
        declare         export var manualMode: boolean;
        declare         export function addLocationProvider(provider: undefined.LocationProvider): void
        declare         export function addLocationRule(rule: undefined.LocationRule): void
        declare         export function createLocationProvider(
            parameters?: Dictionary<undefined.LocationProvider>): undefined.LocationProvider
        declare         export function createLocationRule(parameters?: Dictionary<undefined.LocationRule>): undefined.LocationRule
        declare         export function getManualMode(): boolean
        declare         export function removeLocationProvider(provider: undefined.LocationProvider): void
        declare         export function removeLocationRule(rule: undefined.LocationRule): void
        declare         export function setManualMode(manualMode: boolean): void
        declare         export type LocationProvider = {
            minUpdateDistance: number,
            minUpdateTime: number,
            name: string,
            getMinUpdateDistance(): number,
            getMinUpdateTime(): number,
            getName(): string,
            setMinUpdateDistance(minUpdateDistance: number): void,
            setMinUpdateTime(minUpdateTime: number): void,
            setName(name: string): void
        }
        declare         export type LocationRule = {
            accuracy: number,
            maxAge: number,
            minAge: number,
            name: string,
            getAccuracy(): number,
            getMaxAge(): number,
            getMinAge(): number,
            getName(): string,
            setAccuracy(accuracy: number): void,
            setMaxAge(maxAge: number): void,
            setMinAge(minAge: number): void,
            setName(name: string): void
        }
        declare         export var R: undefined.R;
        declare         export var appVersionCode: number;
        declare         export var appVersionName: string;
        declare         export var launchIntent: undefined.Intent;
        declare         export function getAppVersionCode(): number
        declare         export function getAppVersionName(): string
        declare         export function getLaunchIntent(): undefined.Intent
        declare         export interface R {}
        declare         export var ACTION_AIRPLANE_MODE_CHANGED: string;
        declare         export var ACTION_ALL_APPS: string;
        declare         export var ACTION_ANSWER: string;
        declare         export var ACTION_ATTACH_DATA: string;
        declare         export var ACTION_BATTERY_CHANGED: string;
        declare         export var ACTION_BATTERY_LOW: string;
        declare         export var ACTION_BATTERY_OKAY: string;
        declare         export var ACTION_BOOT_COMPLETED: string;
        declare         export var ACTION_BUG_REPORT: string;
        declare         export var ACTION_CALL: string;
        declare         export var ACTION_CALL_BUTTON: string;
        declare         export var ACTION_CAMERA_BUTTON: string;
        declare         export var ACTION_CHOOSER: string;
        declare         export var ACTION_CLOSE_SYSTEM_DIALOGS: string;
        declare         export var ACTION_CONFIGURATION_CHANGED: string;
        declare         export var ACTION_CREATE_SHORTCUT: string;
        declare         export var ACTION_DATE_CHANGED: string;
        declare         export var ACTION_DEFAULT: string;
        declare         export var ACTION_DELETE: string;
        declare         export var ACTION_DEVICE_STORAGE_LOW: string;
        declare         export var ACTION_DIAL: string;
        declare         export var ACTION_EDIT: string;
        declare         export var ACTION_GET_CONTENT: string;
        declare         export var ACTION_GTALK_SERVICE_CONNECTED: string;
        declare         export var ACTION_GTALK_SERVICE_DISCONNECTED: string;
        declare         export var ACTION_HEADSET_PLUG: string;
        declare         export var ACTION_INPUT_METHOD_CHANGED: string;
        declare         export var ACTION_INSERT: string;
        declare         export var ACTION_INSERT_OR_EDIT: string;
        declare         export var ACTION_MAIN: string;
        declare         export var ACTION_MANAGE_PACKAGE_STORAGE: string;
        declare         export var ACTION_MEDIA_BAD_REMOVAL: string;
        declare         export var ACTION_MEDIA_BUTTON: string;
        declare         export var ACTION_MEDIA_CHECKING: string;
        declare         export var ACTION_MEDIA_EJECT: string;
        declare         export var ACTION_MEDIA_MOUNTED: string;
        declare         export var ACTION_MEDIA_NOFS: string;
        declare         export var ACTION_MEDIA_REMOVED: string;
        declare         export var ACTION_MEDIA_SCANNER_FINISHED: string;
        declare         export var ACTION_MEDIA_SCANNER_SCAN_FILE: string;
        declare         export var ACTION_MEDIA_SCANNER_STARTED: string;
        declare         export var ACTION_MEDIA_SHARED: string;
        declare         export var ACTION_MEDIA_UNMOUNTABLE: string;
        declare         export var ACTION_MEDIA_UNMOUNTED: string;
        declare         export var ACTION_NEW_OUTGOING_CALL: string;
        declare         export var ACTION_PACKAGE_ADDED: string;
        declare         export var ACTION_PACKAGE_CHANGED: string;
        declare         export var ACTION_PACKAGE_DATA_CLEARED: string;
        declare         export var ACTION_PACKAGE_INSTALL: string;
        declare         export var ACTION_PACKAGE_REMOVED: string;
        declare         export var ACTION_PACKAGE_REPLACED: string;
        declare         export var ACTION_PACKAGE_RESTARTED: string;
        declare         export var ACTION_PICK: string;
        declare         export var ACTION_PICK_ACTIVITY: string;
        declare         export var ACTION_POWER_CONNECTED: string;
        declare         export var ACTION_POWER_DISCONNECTED: string;
        declare         export var ACTION_POWER_USAGE_SUMMARY: string;
        declare         export var ACTION_PROVIDER_CHANGED: string;
        declare         export var ACTION_REBOOT: string;
        declare         export var ACTION_RUN: string;
        declare         export var ACTION_SCREEN_OFF: string;
        declare         export var ACTION_SCREEN_ON: string;
        declare         export var ACTION_SEARCH: string;
        declare         export var ACTION_SEARCH_LONG_PRESS: string;
        declare         export var ACTION_SEND: string;
        declare         export var ACTION_SENDTO: string;
        declare         export var ACTION_SEND_MULTIPLE: string;
        declare         export var ACTION_SET_WALLPAPER: string;
        declare         export var ACTION_SHUTDOWN: string;
        declare         export var ACTION_SYNC: string;
        declare         export var ACTION_SYSTEM_TUTORIAL: string;
        declare         export var ACTION_TIME_CHANGED: string;
        declare         export var ACTION_TIME_TICK: string;
        declare         export var ACTION_UID_REMOVED: string;
        declare         export var ACTION_UMS_CONNECTED: string;
        declare         export var ACTION_UMS_DISCONNECTED: string;
        declare         export var ACTION_USER_PRESENT: string;
        declare         export var ACTION_VIEW: string;
        declare         export var ACTION_VOICE_COMMAND: string;
        declare         export var ACTION_WALLPAPER_CHANGED: string;
        declare         export var ACTION_WEB_SEARCH: string;
        declare         export var CATEGORY_ALTERNATIVE: string;
        declare         export var CATEGORY_BROWSABLE: string;
        declare         export var CATEGORY_DEFAULT: string;
        declare         export var CATEGORY_DEVELOPMENT_PREFERENCE: string;
        declare         export var CATEGORY_EMBED: string;
        declare         export var CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;
        declare         export var CATEGORY_HOME: string;
        declare         export var CATEGORY_INFO: string;
        declare         export var CATEGORY_LAUNCHER: string;
        declare         export var CATEGORY_MONKEY: string;
        declare         export var CATEGORY_OPENABLE: string;
        declare         export var CATEGORY_PREFERENCE: string;
        declare         export var CATEGORY_SAMPLE_CODE: string;
        declare         export var CATEGORY_SELECTED_ALTERNATIVE: string;
        declare         export var CATEGORY_TAB: string;
        declare         export var CATEGORY_TEST: string;
        declare         export var CATEGORY_UNIT_TEST: string;
        declare         export var DEFAULT_ALL: number;
        declare         export var DEFAULT_LIGHTS: number;
        declare         export var DEFAULT_SOUND: number;
        declare         export var DEFAULT_VIBRATE: number;
        declare         export var EXTRA_ALARM_COUNT: string;
        declare         export var EXTRA_BCC: string;
        declare         export var EXTRA_CC: string;
        declare         export var EXTRA_DATA_REMOVED: string;
        declare         export var EXTRA_DONT_KILL_APP: string;
        declare         export var EXTRA_EMAIL: string;
        declare         export var EXTRA_INTENT: string;
        declare         export var EXTRA_KEY_EVENT: string;
        declare         export var EXTRA_PHONE_NUMBER: string;
        declare         export var EXTRA_REPLACING: string;
        declare         export var EXTRA_SHORTCUT_ICON: string;
        declare         export var EXTRA_SHORTCUT_ICON_RESOURCE: string;
        declare         export var EXTRA_SHORTCUT_INTENT: string;
        declare         export var EXTRA_SHORTCUT_NAME: string;
        declare         export var EXTRA_STREAM: string;
        declare         export var EXTRA_SUBJECT: string;
        declare         export var EXTRA_TEMPLATE: string;
        declare         export var EXTRA_TEXT: string;
        declare         export var EXTRA_TITLE: string;
        declare         export var EXTRA_UID: string;
        declare         export var FILL_IN_ACTION: number;
        declare         export var FILL_IN_CATEGORIES: number;
        declare         export var FILL_IN_COMPONENT: number;
        declare         export var FILL_IN_DATA: number;
        declare         export var FILL_IN_PACKAGE: number;
        declare         export var FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_CLEAR_TOP: number;
        declare         export var FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;
        declare         export var FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;
        declare         export var FLAG_ACTIVITY_FORWARD_RESULT: number;
        declare         export var FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;
        declare         export var FLAG_ACTIVITY_MULTIPLE_TASK: number;
        declare         export var FLAG_ACTIVITY_NEW_TASK: number;
        declare         export var FLAG_ACTIVITY_NO_ANIMATION: number;
        declare         export var FLAG_ACTIVITY_NO_HISTORY: number;
        declare         export var FLAG_ACTIVITY_NO_USER_ACTION: number;
        declare         export var FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;
        declare         export var FLAG_ACTIVITY_REORDER_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;
        declare         export var FLAG_ACTIVITY_SINGLE_TOP: number;
        declare         export var FLAG_AUTO_CANCEL: number;
        declare         export var FLAG_CANCEL_CURRENT: number;
        declare         export var FLAG_DEBUG_LOG_RESOLUTION: number;
        declare         export var FLAG_FROM_BACKGROUND: number;
        declare         export var FLAG_GRANT_READ_URI_PERMISSION: number;
        declare         export var FLAG_GRANT_WRITE_URI_PERMISSION: number;
        declare         export var FLAG_INSISTENT: number;
        declare         export var FLAG_NO_CLEAR: number;
        declare         export var FLAG_NO_CREATE: number;
        declare         export var FLAG_ONE_SHOT: number;
        declare         export var FLAG_ONGOING_EVENT: number;
        declare         export var FLAG_ONLY_ALERT_ONCE: number;
        declare         export var FLAG_RECEIVER_REGISTERED_ONLY: number;
        declare         export var FLAG_SHOW_LIGHTS: number;
        declare         export var FLAG_UPDATE_CURRENT: number;
        declare         export var NAVIGATION_MODE_STANDARD: number;
        declare         export var NAVIGATION_MODE_TABS: number;
        declare         export var PENDING_INTENT_FOR_ACTIVITY: number;
        declare         export var PENDING_INTENT_FOR_BROADCAST: number;
        declare         export var PENDING_INTENT_FOR_SERVICE: number;
        declare         export var PENDING_INTENT_MAX_VALUE: number;
        declare         export var RESULT_CANCELED: number;
        declare         export var RESULT_FIRST_USER: number;
        declare         export var RESULT_OK: number;
        declare         export var SCREEN_ORIENTATION_BEHIND: number;
        declare         export var SCREEN_ORIENTATION_LANDSCAPE: number;
        declare         export var SCREEN_ORIENTATION_NOSENSOR: number;
        declare         export var SCREEN_ORIENTATION_PORTRAIT: number;
        declare         export var SCREEN_ORIENTATION_SENSOR: number;
        declare         export var SCREEN_ORIENTATION_UNSPECIFIED: number;
        declare         export var SCREEN_ORIENTATION_USER: number;
        declare         export var SHOW_AS_ACTION_ALWAYS: number;
        declare         export var SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
        declare         export var SHOW_AS_ACTION_IF_ROOM: number;
        declare         export var SHOW_AS_ACTION_NEVER: number;
        declare         export var SHOW_AS_ACTION_WITH_TEXT: number;
        declare         export var START_NOT_STICKY: number;
        declare         export var START_REDELIVER_INTENT: number;
        declare         export var STREAM_ALARM: number;
        declare         export var STREAM_DEFAULT: number;
        declare         export var STREAM_MUSIC: number;
        declare         export var STREAM_NOTIFICATION: number;
        declare         export var STREAM_RING: number;
        declare         export var STREAM_SYSTEM: number;
        declare         export var STREAM_VOICE_CALL: number;
        declare         export var URI_INTENT_SCHEME: number;
        declare         export var currentActivity: undefined.Activity;
        declare         export var currentService: undefined.Service;
        declare         export function createBroadcastIntent(options: BroadcastIntentOptions): undefined.Intent
        declare         export function createBroadcastReceiver(
            parameters?: Dictionary<undefined.BroadcastReceiver>): undefined.BroadcastReceiver
        declare         export function createIntent(parameters?: Dictionary<undefined.Intent>): undefined.Intent
        declare         export function createIntentChooser(intent: undefined.Intent, title: string): undefined.Intent
        declare         export function createNotification(parameters?: Dictionary<undefined.Notification>): undefined.Notification
        declare         export function createPendingIntent(parameters?: Dictionary<undefined.PendingIntent>): undefined.PendingIntent
        declare         export function createRemoteViews(parameters?: Dictionary<undefined.RemoteViews>): undefined.RemoteViews
        declare         export function createService(intent: undefined.Intent): undefined.Service
        declare         export function createServiceIntent(options: ServiceIntentOptions): undefined.Intent
        declare         export function getCurrentActivity(): undefined.Activity
        declare         export function getCurrentService(): undefined.Service
        declare         export function isServiceRunning(intent: undefined.Intent): boolean
        declare         export function registerBroadcastReceiver(
            broadcastReceiver: undefined.BroadcastReceiver,
            actions: Array<Global$String>): void
        declare         export function startService(intent: undefined.Intent): void
        declare         export function stopService(intent: undefined.Intent): void
        declare         export function unregisterBroadcastReceiver(broadcastReceiver: undefined.BroadcastReceiver): void
        declare         export type Intent = {
            action: string,
            className: string,
            data: string,
            flags: number,
            packageName: string,
            type: string,
            url: string,
            addCategory(name: string): void,
            addFlags(flags: number): void,
            getAction(): string,
            getBlobExtra(name: string): Ti$Blob,
            getBooleanExtra(name: string): boolean,
            getClassName(): string,
            getData(): string,
            getDoubleExtra(name: string): number,
            getFlags(): number,
            getIntExtra(name: string): number,
            getLongExtra(name: string): number,
            getPackageName(): string,
            getStringExtra(name: string): string,
            getType(): string,
            getUrl(): string,
            hasExtra(name: string): boolean,
            putExtra(name: string, value: any): void,
            putExtraUri(name: string, value: string): void,
            setFlags(flags: number): void
        }
        declare         export type Notification = {
            duration: number,
            horizontalMargin: number,
            message: string,
            verticalMargin: number,
            xOffset: number,
            yOffset: number,
            getDuration(): number,
            getHorizontalMargin(): number,
            getMessage(): string,
            getVerticalMargin(): number,
            getXOffset(): number,
            getYOffset(): number,
            setDuration(duration: number): void,
            setHorizontalMargin(horizontalMargin: number): void,
            setMessage(message: string): void,
            setVerticalMargin(verticalMargin: number): void,
            setXOffset(xOffset: number): void,
            setYOffset(yOffset: number): void
        }
        declare module 'Calendar' {
            declare             export var METHOD_ALERT: number;
            declare             export var METHOD_DEFAULT: number;
            declare             export var METHOD_EMAIL: number;
            declare             export var METHOD_SMS: number;
            declare             export var STATE_DISMISSED: number;
            declare             export var STATE_FIRED: number;
            declare             export var STATE_SCHEDULED: number;
            declare             export var STATUS_CANCELED: number;
            declare             export var STATUS_CONFIRMED: number;
            declare             export var STATUS_TENTATIVE: number;
            declare             export var VISIBILITY_CONFIDENTIAL: number;
            declare             export var VISIBILITY_DEFAULT: number;
            declare             export var VISIBILITY_PRIVATE: number;
            declare             export var VISIBILITY_PUBLIC: number;
            declare             export var allAlerts: Array<undefined.Alert>;
            declare             export var allCalendars: Array<undefined.Calendar>;
            declare             export var apiName: string;
            declare             export var bubbleParent: boolean;
            declare             export var selectableCalendars: Array<undefined.Calendar>;
            declare             export function addEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function applyProperties(props: Dictionary<Object>): void
            declare             export function fireEvent(name: string, event: Dictionary<Object>): void
            declare             export function getAllAlerts(): Array<undefined.Alert >
                declare             export function getAllCalendars(): Array<undefined.Calendar >
                declare             export function getApiName(): string
            declare             export function getBubbleParent(): boolean
            declare             export function getCalendarById(id: number): undefined.Calendar
            declare             export function getSelectableCalendars(): Array<undefined.Calendar >
                declare             export function removeEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function setBubbleParent(bubbleParent: boolean): void
            declare             export type Event = {
                alerts: Array<undefined.Alert>,
                allDay: boolean,
                begin: Date,
                description: string,
                end: Date,
                extendedProperties: Dictionary<Object>,
                hasAlarm: boolean,
                hasExtendedProperties: boolean,
                id: string,
                location: string,
                reminders: Array<undefined.Reminder>,
                status: number,
                title: string,
                visibility: number,
                createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
                createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
                getAlerts(): Array<undefined.Alert>,
                getAllDay(): boolean,
                getBegin(): Date,
                getDescription(): string,
                getEnd(): Date,
                getExtendedProperties(): Dictionary<Object>,
                getExtendedProperty(name: string): string,
                getHasAlarm(): boolean,
                getHasExtendedProperties(): boolean,
                getId(): string,
                getLocation(): string,
                getReminders(): Array<undefined.Reminder>,
                getStatus(): number,
                getTitle(): string,
                getVisibility(): number,
                setExtendedProperty(name: string, value: string): void
            }
            declare             export type Reminder = {
                id: string,
                method: number,
                minutes: number,
                getId(): string,
                getMethod(): number,
                getMinutes(): number
            }
            declare             export type Calendar = {
                hidden: boolean,
                id: string,
                name: string,
                selected: boolean,
                createEvent(properties: Dictionary<undefined.Event>): undefined.Event,
                getEventById(id: number): undefined.Event,
                getEventsBetweenDates(date1: Date, date2: Date): Array<undefined.Event>,
                getEventsInDate(year: number, month: number, day: number): Array<undefined.Event>,
                getEventsInMonth(year: number, month: number): Array<undefined.Event>,
                getEventsInYear(year: number): Array<undefined.Event>,
                getHidden(): boolean,
                getId(): string,
                getName(): string,
                getSelected(): boolean
            }
            declare             export type Alert = {
                alarmTime: Date,
                begin: Date,
                end: Date,
                eventId: number,
                id: string,
                minutes: number,
                state: number,
                getAlarmTime(): Date,
                getBegin(): Date,
                getEnd(): Date,
                getEventId(): number,
                getId(): string,
                getMinutes(): number,
                getState(): number
            }
            declare             export var AUTHORIZATION_AUTHORIZED: number;
            declare             export var AUTHORIZATION_DENIED: number;
            declare             export var AUTHORIZATION_RESTRICTED: number;
            declare             export var AUTHORIZATION_UNKNOWN: number;
            declare             export var AVAILABILITY_BUSY: number;
            declare             export var AVAILABILITY_FREE: number;
            declare             export var AVAILABILITY_NOTSUPPORTED: number;
            declare             export var AVAILABILITY_TENTATIVE: number;
            declare             export var AVAILABILITY_UNAVAILABLE: number;
            declare             export var RECURRENCEFREQUENCY_DAILY: number;
            declare             export var RECURRENCEFREQUENCY_MONTHLY: number;
            declare             export var RECURRENCEFREQUENCY_WEEKLY: number;
            declare             export var RECURRENCEFREQUENCY_YEARLY: number;
            declare             export var SPAN_FUTUREEVENTS: number;
            declare             export var SPAN_THISEVENT: number;
            declare             export var STATUS_NONE: number;
            declare             export var allEditableCalendars: Array<undefined.Calendar>;
            declare             export var defaultCalendar: undefined.Calendar;
            declare             export var eventsAuthorization: number;
            declare             export function getAllEditableCalendars(): Array<undefined.Calendar >
                declare             export function getDefaultCalendar(): undefined.Calendar
            declare             export function getEventsAuthorization(): number
            declare             export function requestEventsAuthorization(callback: (...args: any[]) => any): void
            declare             export type RecurrenceRule = {
                calendarID: string,
                daysOfTheMonth: Array<Number>,
                daysOfTheWeek: daysOfTheWeekDictionary,
                daysOfTheYear: Array<Number>,
                end: recurrenceEndDictionary,
                frequency: number,
                interval: number,
                monthsOfTheYear: Array<Number>,
                setPositions: Array<Number>,
                weeksOfTheYear: Array<Number>,
                getCalendarID(): string,
                getDaysOfTheMonth(): Array<Number>,
                getDaysOfTheWeek(): daysOfTheWeekDictionary,
                getDaysOfTheYear(): Array<Number>,
                getEnd(): recurrenceEndDictionary,
                getFrequency(): number,
                getInterval(): number,
                getMonthsOfTheYear(): Array<Number>,
                getSetPositions(): Array<Number>,
                getWeeksOfTheYear(): Array<Number >
            }
        }

        declare         export type MenuItem = {
            actionView: undefined.View,
            actionViewExpanded: boolean,
            checkable: boolean,
            checked: boolean,
            enabled: boolean,
            groupId: number,
            icon: any,
            itemId: number,
            order: number,
            showAsAction: number,
            title: string,
            titleCondensed: string,
            visible: boolean,
            collapseActionView(): void,
            expandActionView(): void,
            getActionView(): undefined.View,
            getGroupId(): number,
            getItemId(): number,
            getOrder(): number,
            getTitle(): string,
            getTitleCondensed(): string,
            isActionViewExpanded(): boolean,
            isCheckable(): boolean,
            isChecked(): boolean,
            isEnabled(): boolean,
            isVisible(): boolean,
            setActionView(actionView: undefined.View): void,
            setCheckable(checkable: boolean): void,
            setChecked(enabled: boolean): void,
            setEnabled(enabled: boolean): void,
            setIcon(icon: number): void,
            setIcon(icon: string): void,
            setShowAsAction(showAsAction: number): void,
            setTitle(title: string): void,
            setTitleCondensed(titleCondensed: string): void,
            setVisible(visible: boolean): void
        }
        declare         export interface NotificationManager {
            DEFAULT_ALL: number,
                DEFAULT_LIGHTS: number,
                DEFAULT_SOUND: number,
                DEFAULT_VIBRATE: number,
                FLAG_AUTO_CANCEL: number,
                FLAG_INSISTENT: number,
                FLAG_NO_CLEAR: number,
                FLAG_ONGOING_EVENT: number,
                FLAG_ONLY_ALERT_ONCE: number,
                FLAG_SHOW_LIGHTS: number,
                STREAM_DEFAULT: number,
                cancel(id: number): void,
                cancelAll(): void,
                notify(id: number, notification: undefined.Notification): void
        }
        declare         export type ActionBar = {
            backgroundImage: string,
            displayHomeAsUp: boolean,
            homeButtonEnabled: boolean,
            icon: string,
            logo: string,
            navigationMode: number,
            onHomeIconItemSelected: (...args: any[]) => any,
            subtitle: string,
            title: string,
            getNavigationMode(): number,
            getSubtitle(): string,
            getTitle(): string,
            hide(): void,
            setBackgroundImage(backgroundImage: string): void,
            setDisplayHomeAsUp(displayHomeAsUp: boolean): void,
            setDisplayShowHomeEnabled(show: boolean): void,
            setDisplayShowTitleEnabled(show: boolean): void,
            setHomeButtonEnabled(homeButtonEnabled: boolean): void,
            setIcon(icon: string): void,
            setLogo(logo: string): void,
            setNavigationMode(navigationMode: number): void,
            setOnHomeIconItemSelected(onHomeIconItemSelected: (...args: any[]) => any): void,
            setSubtitle(subtitle: string): void,
            setTitle(title: string): void,
            show(): void
        }
        declare         export type BroadcastReceiver = {
            onReceived: (...args: any[]) => any,
            url: string,
            getOnReceived(): (...args: any[]) => any,
            getUrl(): string,
            setOnReceived(onReceived: (...args: any[]) => any): void,
            setUrl(url: string): void
        }
        declare         export type Menu = {
            items: Array<undefined.MenuItem>,
            add(options: any): undefined.MenuItem,
            clear(): void,
            close(): void,
            findItem(item: number): undefined.MenuItem,
            findItem(item: undefined.MenuItem): undefined.MenuItem,
            getItem(index: number): undefined.MenuItem,
            getItems(): Array<undefined.MenuItem>,
            hasVisibleItems(): boolean,
            removeGroup(groupId: number): void,
            removeItem(itemId: number): void,
            setGroupEnabled(groupId: number, enabled: boolean): void,
            setGroupVisible(groupId: number, visible: boolean): void,
            size(): number
        }
        declare         export type Activity = {
            actionBar: undefined.ActionBar,
            intent: undefined.Intent,
            onCreate: (...args: any[]) => any,
            onCreateOptionsMenu: (...args: any[]) => any,
            onDestroy: (...args: any[]) => any,
            onPause: (...args: any[]) => any,
            onPrepareOptionsMenu: (...args: any[]) => any,
            onRestart: (...args: any[]) => any,
            onResume: (...args: any[]) => any,
            onStart: (...args: any[]) => any,
            onStop: (...args: any[]) => any,
            requestedOrientation: number,
            finish(): void,
            getActionBar(): undefined.ActionBar,
            getIntent(): undefined.Intent,
            getOnCreate(): (...args: any[]) => any,
            getOnCreateOptionsMenu(): (...args: any[]) => any,
            getOnDestroy(): (...args: any[]) => any,
            getOnPause(): (...args: any[]) => any,
            getOnPrepareOptionsMenu(): (...args: any[]) => any,
            getOnRestart(): (...args: any[]) => any,
            getOnResume(): (...args: any[]) => any,
            getOnStart(): (...args: any[]) => any,
            getOnStop(): (...args: any[]) => any,
            getString(resourceId: number, format: any): string,
            invalidateOptionsMenu(): void,
            openOptionsMenu(): void,
            sendBroadcast(intent: undefined.Intent): void,
            sendBroadcastWithPermission(intent: undefined.Intent, receiverPermission?: string): void,
            setOnCreate(onCreate: (...args: any[]) => any): void,
            setOnCreateOptionsMenu(onCreateOptionsMenu: (...args: any[]) => any): void,
            setOnDestroy(onDestroy: (...args: any[]) => any): void,
            setOnPause(onPause: (...args: any[]) => any): void,
            setOnPrepareOptionsMenu(onPrepareOptionsMenu: (...args: any[]) => any): void,
            setOnRestart(onRestart: (...args: any[]) => any): void,
            setOnResume(onResume: (...args: any[]) => any): void,
            setOnStart(onStart: (...args: any[]) => any): void,
            setOnStop(onStop: (...args: any[]) => any): void,
            setRequestedOrientation(orientation: number): void,
            setResult(resultCode: number, intent?: undefined.Intent): void,
            startActivity(intent: undefined.Intent): void,
            startActivityForResult(intent: undefined.Intent, callback: (...args: any[]) => any): void
        }
        declare         export type Service = {
            intent: undefined.Intent,
            serviceInstanceId: number,
            getIntent(): undefined.Intent,
            getServiceInstanceId(): number,
            start(): void,
            stop(): void
        }
        declare         export type RemoteViews = {
            layoutId: number,
            packageName: string,
            getLayoutId(): number,
            getPackageName(): string,
            setBoolean(viewId: number, methodName: string, value: boolean): void,
            setChronometer(viewId: number, base: Date, format: string, started: boolean): void,
            setDouble(viewId: number, methodName: string, value: number): void,
            setImageViewResource(viewId: number, srcId: number): void,
            setImageViewUri(viewId: number, uri: string): void,
            setInt(viewId: number, methodName: string, value: number): void,
            setOnClickPendingIntent(viewId: number, pendingIntent: undefined.PendingIntent): void,
            setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void,
            setString(viewId: number, methodName: string, value: string): void,
            setTextColor(viewId: number, color: number): void,
            setTextViewText(viewId: number, text: string): void,
            setUri(viewId: number, methodName: string, value: string): void,
            setViewVisibility(viewId: number, visibility: number): void
        }
        declare         export type PendingIntent = {
            flags: number,
            intent: undefined.Intent,
            updateCurrentIntent: boolean,
            getFlags(): number,
            getIntent(): undefined.Intent,
            getUpdateCurrentIntent(): boolean
        }
    }

    declare     export interface MobileWeb {
        forwardGeocoderTimeout: number,
            locationTimeout: number,
            maximumHeadingAge: number,
            maximumLocationAge: number,
            reverseGeocoderTimeout: number,
            getForwardGeocoderTimeout(): number,
            getLocationTimeout(): number,
            getMaximumHeadingAge(): number,
            getMaximumLocationAge(): number,
            getReverseGeocoderTimeout(): number,
            setForwardGeocoderTimeout(forwardGeocoderTimeout: number): void,
            setLocationTimeout(locationTimeout: number): void,
            setMaximumHeadingAge(maximumHeadingAge: number): void,
            setMaximumLocationAge(maximumLocationAge: number): void,
            setReverseGeocoderTimeout(reverseGeocoderTimeout: number): void
    }
}


declare export interface Ti$Proxy {
    apiName: string,
        bubbleParent: boolean,
        addEventListener(name: string, callback: (...args: any[]) => any): void,
        applyProperties(props: Dictionary<Object>): void,
        fireEvent(name: string, event: Dictionary<Object>): void,
        getApiName(): string,
        getBubbleParent(): boolean,
        removeEventListener(name: string, callback: (...args: any[]) => any): void,
        setBubbleParent(bubbleParent: boolean): void
}

declare module 'Map' {
    declare     export var ANNOTATION_DRAG_STATE_CANCEL: number;
    declare     export var ANNOTATION_DRAG_STATE_DRAG: number;
    declare     export var ANNOTATION_DRAG_STATE_END: number;
    declare     export var ANNOTATION_DRAG_STATE_NONE: number;
    declare     export var ANNOTATION_DRAG_STATE_START: number;
    declare     export var ANNOTATION_GREEN: number;
    declare     export var ANNOTATION_PURPLE: number;
    declare     export var ANNOTATION_RED: number;
    declare     export var HYBRID_TYPE: number;
    declare     export var SATELLITE_TYPE: number;
    declare     export var STANDARD_TYPE: number;
    declare     export var TERRAIN_TYPE: number;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function createAnnotation(parameters?: Dictionary<undefined.Annotation>): undefined.Annotation
    declare     export function createView(parameters?: Dictionary<undefined.View>): undefined.View
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type View = {
        accessibilityHidden: boolean,
        accessibilityHint: string,
        accessibilityLabel: string,
        accessibilityValue: string,
        anchorPoint: Point,
        animatedCenter: Point,
        backgroundColor: string,
        backgroundDisabledColor: string,
        backgroundDisabledImage: string,
        backgroundFocusedColor: string,
        backgroundFocusedImage: string,
        backgroundGradient: Gradient,
        backgroundImage: string,
        backgroundLeftCap: number,
        backgroundRepeat: boolean,
        backgroundSelectedColor: string,
        backgroundSelectedImage: string,
        backgroundTopCap: number,
        borderColor: string,
        borderRadius: number,
        borderWidth: number,
        bottom: any,
        center: Point,
        children: Array<undefined.View>,
        clipMode: number,
        enabled: boolean,
        focusable: boolean,
        height: any,
        horizontalWrap: boolean,
        keepScreenOn: boolean,
        layout: string,
        left: any,
        opacity: number,
        overrideCurrentAnimation: boolean,
        pullBackgroundColor: string,
        rect: Dimension,
        right: any,
        size: Dimension,
        softKeyboardOnFocus: number,
        tintColor: any,
        top: any,
        touchEnabled: boolean,
        transform: any,
        viewShadowColor: string,
        viewShadowOffset: Point,
        viewShadowRadius: number,
        visible: boolean,
        width: any,
        zIndex: number,
        add(view: undefined.View): void,
        animate(animation: undefined.Animation, callback: (...args: any[]) => any): void,
        animate(
            animation: Dictionary<undefined.Animation>,
            callback: (...args: any[]) => any): void,
        convertPointToView(point: Point, destinationView: undefined.View): Point,
        finishLayout(): void,
        getAccessibilityHidden(): boolean,
        getAccessibilityHint(): string,
        getAccessibilityLabel(): string,
        getAccessibilityValue(): string,
        getAnchorPoint(): Point,
        getAnimatedCenter(): Point,
        getBackgroundColor(): string,
        getBackgroundDisabledColor(): string,
        getBackgroundDisabledImage(): string,
        getBackgroundFocusedColor(): string,
        getBackgroundFocusedImage(): string,
        getBackgroundGradient(): Gradient,
        getBackgroundImage(): string,
        getBackgroundLeftCap(): number,
        getBackgroundRepeat(): boolean,
        getBackgroundSelectedColor(): string,
        getBackgroundSelectedImage(): string,
        getBackgroundTopCap(): number,
        getBorderColor(): string,
        getBorderRadius(): number,
        getBorderWidth(): number,
        getBottom(): any,
        getCenter(): Point,
        getChildren(): Array<undefined.View>,
        getClipMode(): number,
        getEnabled(): boolean,
        getFocusable(): boolean,
        getHeight(): any,
        getHorizontalWrap(): boolean,
        getKeepScreenOn(): boolean,
        getLayout(): string,
        getLeft(): any,
        getOpacity(): number,
        getOverrideCurrentAnimation(): boolean,
        getPullBackgroundColor(): string,
        getRect(): Dimension,
        getRight(): any,
        getSize(): Dimension,
        getSoftKeyboardOnFocus(): number,
        getTintColor(): string,
        getTop(): any,
        getTouchEnabled(): boolean,
        getTransform(): any,
        getViewShadowColor(): string,
        getViewShadowOffset(): Point,
        getViewShadowRadius(): number,
        getVisible(): boolean,
        getWidth(): any,
        getZIndex(): number,
        hide(): void,
        remove(view: undefined.View): void,
        removeAllChildren(): void,
        setAccessibilityHidden(accessibilityHidden: boolean): void,
        setAccessibilityHint(accessibilityHint: string): void,
        setAccessibilityLabel(accessibilityLabel: string): void,
        setAccessibilityValue(accessibilityValue: string): void,
        setAnchorPoint(anchorPoint: Point): void,
        setBackgroundColor(backgroundColor: string): void,
        setBackgroundDisabledColor(backgroundDisabledColor: string): void,
        setBackgroundDisabledImage(backgroundDisabledImage: string): void,
        setBackgroundFocusedColor(backgroundFocusedColor: string): void,
        setBackgroundFocusedImage(backgroundFocusedImage: string): void,
        setBackgroundGradient(backgroundGradient: Gradient): void,
        setBackgroundImage(backgroundImage: string): void,
        setBackgroundLeftCap(backgroundLeftCap: number): void,
        setBackgroundRepeat(backgroundRepeat: boolean): void,
        setBackgroundSelectedColor(backgroundSelectedColor: string): void,
        setBackgroundSelectedImage(backgroundSelectedImage: string): void,
        setBackgroundTopCap(backgroundTopCap: number): void,
        setBorderColor(borderColor: string): void,
        setBorderRadius(borderRadius: number): void,
        setBorderWidth(borderWidth: number): void,
        setBottom(bottom: number): void,
        setBottom(bottom: string): void,
        setCenter(center: Point): void,
        setClipMode(clipMode: number): void,
        setEnabled(enabled: boolean): void,
        setFocusable(focusable: boolean): void,
        setHeight(height: number): void,
        setHeight(height: string): void,
        setHorizontalWrap(horizontalWrap: boolean): void,
        setKeepScreenOn(keepScreenOn: boolean): void,
        setLayout(layout: string): void,
        setLeft(left: number): void,
        setLeft(left: string): void,
        setOpacity(opacity: number): void,
        setPullBackgroundColor(pullBackgroundColor: string): void,
        setRight(right: number): void,
        setRight(right: string): void,
        setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,
        setTintColor(tintColor: string): void,
        setTop(top: number): void,
        setTop(top: string): void,
        setTouchEnabled(touchEnabled: boolean): void,
        setTransform(transform: undefined._2DMatrix): void,
        setTransform(transform: undefined._3DMatrix): void,
        setViewShadowColor(viewShadowColor: string): void,
        setViewShadowOffset(viewShadowOffset: Point): void,
        setViewShadowRadius(viewShadowRadius: number): void,
        setVisible(visible: boolean): void,
        setWidth(width: number): void,
        setWidth(width: string): void,
        setZIndex(zIndex: number): void,
        show(): void,
        startLayout(): void,
        toImage(callback?: (...args: any[]) => any, honorScaleFactor?: boolean): Ti$Blob,
        updateLayout(params: Dictionary<Object>): void
    }
    declare     export type Annotation = {
        animate: boolean,
        canShowCallout: boolean,
        centerOffset: Point,
        customView: undefined.View,
        draggable: boolean,
        image: any,
        latitude: number,
        leftButton: any,
        leftView: undefined.View,
        longitude: number,
        pinImage: string,
        pincolor: number,
        rightButton: any,
        rightView: undefined.View,
        subtitle: string,
        subtitleid: string,
        title: string,
        titleid: string,
        getAnimate(): boolean,
        getCanShowCallout(): boolean,
        getCenterOffset(): Point,
        getCustomView(): undefined.View,
        getDraggable(): boolean,
        getImage(): any,
        getLatitude(): number,
        getLeftButton(): any,
        getLeftView(): undefined.View,
        getLongitude(): number,
        getPinImage(): string,
        getPincolor(): number,
        getRightButton(): any,
        getRightView(): undefined.View,
        getSubtitle(): string,
        getSubtitleid(): string,
        getTitle(): string,
        getTitleid(): string,
        setAnimate(animate: boolean): void,
        setCanShowCallout(canShowCallout: boolean): void,
        setCenterOffset(centerOffset: Point): void,
        setCustomView(customView: undefined.View): void,
        setDraggable(draggable: boolean): void,
        setImage(image: string): void,
        setImage(image: Ti$Blob): void,
        setLatitude(latitude: number): void,
        setLeftButton(leftButton: number): void,
        setLeftButton(leftButton: string): void,
        setLeftView(leftView: undefined.View): void,
        setLongitude(longitude: number): void,
        setPinImage(pinImage: string): void,
        setPincolor(pincolor: number): void,
        setRightButton(rightButton: number): void,
        setRightButton(rightButton: string): void,
        setRightView(rightView: undefined.View): void,
        setSubtitle(subtitle: string): void,
        setSubtitleid(subtitleid: string): void,
        setTitle(title: string): void,
        setTitleid(titleid: string): void
    }
}


declare module 'Cloud' {
    declare     export var accessToken: string;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var debug: boolean;
    declare     export var expiresIn: number;
    declare     export var ondatastream: (...args: any[]) => any;
    declare     export var onsendstream: (...args: any[]) => any;
    declare     export var sessionId: string;
    declare     export var useSecure: boolean;
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function getAccessToken(): string
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getDebug(): boolean
    declare     export function getExpiresIn(): number
    declare     export function getOndatastream(): (...args: any[]) => any
    declare     export function getOnsendstream(): (...args: any[]) => any
    declare     export function getSessionId(): string
    declare     export function getUseSecure(): boolean
    declare     export function hasStoredSession(): boolean
    declare     export function retrieveStoredSession(): string
    declare     export function sendRequest(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    declare     export function setAccessToken(accessToken: string): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setDebug(debug: boolean): void
    declare     export function setOndatastream(ondatastream: (...args: any[]) => any): void
    declare     export function setOnsendstream(onsendstream: (...args: any[]) => any): void
    declare     export function setSessionId(sessionId: string): void
    declare     export function setUseSecure(useSecure: boolean): void
    declare     export interface Objects {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface SocialIntegrations {
        externalAccountLink(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            externalAccountLogin(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            externalAccountUnlink(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            searchFacebookFriends(callback: (...args: any[]) => any): void
    }
    declare     export interface PushNotifications {
        notify(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            notifyTokens(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            queryChannels(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            resetBadge(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            setBadge(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showChannels(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            subscribe(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            subscribeToken(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            unsubscribe(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            unsubscribeToken(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            updateSubscription(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Clients {
        geolocate(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void
    }
    declare     export interface ACLs {
        addUser(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            checkUser(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            removeUser(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void
    }
    declare     export interface Users {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            login(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            logout(callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            requestResetPassword(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            resendConfirmation(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            secureCreate(
                parameters?: Dictionary<CloudUsersSecureDialog>,
                callback?: (...args: any[]) => any): void,
            secureLogin(
                parameters?: Dictionary<CloudUsersSecureDialog>,
                callback?: (...args: any[]) => any): void,
            secureStatus(): boolean,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showMe(callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Messages {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            removeThread(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            reply(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showInbox(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showSent(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showThread(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showThreads(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Events {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            queryOccurrences(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            searchOccurrences(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            show(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            showOccurrences(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Reviews {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Chats {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            getChatGroups(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            query(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            queryChatGroups(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface KeyValues {
        append(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            get(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            increment(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            set(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface GeoFences {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Checkins {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Friends {
        add(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            approve(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            requests(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Files {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface PushSchedules {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Likes {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Photos {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Statuses {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            delete(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            search(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface PhotoCollections {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showPhotos(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            showSubCollections(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Posts {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Emails {
        send(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
    declare     export interface Places {
        create(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            query(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            remove(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            search(parameters?: Dictionary<Object>, callback?: (...args: any[]) => any): void,
            show(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void,
            update(parameters: Dictionary<Object>, callback: (...args: any[]) => any): void
    }
}


declare export type Ti$Blob = {
    file: undefined.File,
    height: number,
    length: number,
    mimeType: string,
    nativePath: string,
    size: number,
    text: string,
    width: number,
    append(blob: Ti$Blob): void,
    getFile(): undefined.File,
    getHeight(): number,
    getLength(): number,
    getMimeType(): string,
    getNativePath(): string,
    getSize(): number,
    getText(): string,
    getWidth(): number,
    imageAsCropped(options: Dictionary<ImageAsCroppedDict>): Ti$Blob,
    imageAsResized(width: number, height: number): Ti$Blob,
    imageAsThumbnail(size: number, borderSize?: number, cornerRadius?: number): Ti$Blob,
    imageWithAlpha(): Ti$Blob,
    imageWithRoundedCorner(cornerSize: number, borderSize?: number): Ti$Blob,
    imageWithTransparentBorder(size: number): Ti$Blob,
    toString(): string
}

declare export interface Ti$Codec {
    BIG_ENDIAN: number,
        CHARSET_ASCII: string,
        CHARSET_ISO_LATIN_1: string,
        CHARSET_UTF16: string,
        CHARSET_UTF16BE: string,
        CHARSET_UTF16LE: string,
        CHARSET_UTF8: string,
        LITTLE_ENDIAN: number,
        TYPE_BYTE: string,
        TYPE_DOUBLE: string,
        TYPE_FLOAT: string,
        TYPE_INT: string,
        TYPE_LONG: string,
        TYPE_SHORT: string,
        decodeNumber(options: DecodeNumberDict): number,
        decodeString(options: DecodeStringDict): string,
        encodeNumber(options: EncodeNumberDict): number,
        encodeString(options: Dictionary<EncodeStringDict>): number,
        getNativeByteOrder(): number
}

declare export interface Ti$Locale {
    currentCountry: string,
        currentLanguage: string,
        currentLocale: string,
        formatTelephoneNumber(number: string): string,
        getCurrencyCode(locale: string): string,
        getCurrencySymbol(currencyCode: string): string,
        getCurrentCountry(): string,
        getCurrentLanguage(): string,
        getCurrentLocale(): string,
        getLocaleCurrencySymbol(locale: string): string,
        getString(key: string, hint?: string): string
}

declare module 'App' {
    declare     export var EVENT_ACCESSIBILITY_ANNOUNCEMENT: string;
    declare     export var EVENT_ACCESSIBILITY_CHANGED: string;
    declare     export var accessibilityEnabled: boolean;
    declare     export var analytics: boolean;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var copyright: string;
    declare     export var deployType: string;
    declare     export var description: string;
    declare     export var disableNetworkActivityIndicator: boolean;
    declare     export var forceSplashAsSnapshot: boolean;
    declare     export var guid: string;
    declare     export var id: string;
    declare     export var idleTimerDisabled: boolean;
    declare     export var installId: string;
    declare     export var keyboardVisible: boolean;
    declare     export var name: string;
    declare     export var proximityDetection: boolean;
    declare     export var proximityState: boolean;
    declare     export var publisher: string;
    declare     export var sessionId: string;
    declare     export var url: string;
    declare     export var version: string;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function fireSystemEvent(eventName: string, param?: any): void
    declare     export function getAccessibilityEnabled(): boolean
    declare     export function getAnalytics(): boolean
    declare     export function getApiName(): string
    declare     export function getArguments(): launchOptions
    declare     export function getBubbleParent(): boolean
    declare     export function getCopyright(): string
    declare     export function getDeployType(): string
    declare     export function getDescription(): string
    declare     export function getDisableNetworkActivityIndicator(): boolean
    declare     export function getForceSplashAsSnapshot(): boolean
    declare     export function getGuid(): string
    declare     export function getId(): string
    declare     export function getIdleTimerDisabled(): boolean
    declare     export function getInstallId(): string
    declare     export function getKeyboardVisible(): boolean
    declare     export function getName(): string
    declare     export function getProximityDetection(): boolean
    declare     export function getProximityState(): boolean
    declare     export function getPublisher(): string
    declare     export function getSessionId(): string
    declare     export function getUrl(): string
    declare     export function getVersion(): string
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setDisableNetworkActivityIndicator(disableNetworkActivityIndicator: boolean): void
    declare     export function setForceSplashAsSnapshot(forceSplashAsSnapshot: boolean): void
    declare     export function setIdleTimerDisabled(idleTimerDisabled: boolean): void
    declare     export function setProximityDetection(proximityDetection: boolean): void
    declare module 'Android' {
        declare         export var LINKIFY_ALL: number;
        declare         export var LINKIFY_EMAIL_ADDRESSES: number;
        declare         export var LINKIFY_MAP_ADDRESSES: number;
        declare         export var LINKIFY_PHONE_NUMBERS: number;
        declare         export var LINKIFY_WEB_URLS: number;
        declare         export var OVER_SCROLL_ALWAYS: number;
        declare         export var OVER_SCROLL_IF_CONTENT_SCROLLS: number;
        declare         export var OVER_SCROLL_NEVER: number;
        declare         export var PIXEL_FORMAT_A_8: number;
        declare         export var PIXEL_FORMAT_LA_88: number;
        declare         export var PIXEL_FORMAT_L_8: number;
        declare         export var PIXEL_FORMAT_OPAQUE: number;
        declare         export var PIXEL_FORMAT_RGBA_4444: number;
        declare         export var PIXEL_FORMAT_RGBA_5551: number;
        declare         export var PIXEL_FORMAT_RGBA_8888: number;
        declare         export var PIXEL_FORMAT_RGBX_8888: number;
        declare         export var PIXEL_FORMAT_RGB_332: number;
        declare         export var PIXEL_FORMAT_RGB_565: number;
        declare         export var PIXEL_FORMAT_RGB_888: number;
        declare         export var PIXEL_FORMAT_TRANSLUCENT: number;
        declare         export var PIXEL_FORMAT_TRANSPARENT: number;
        declare         export var PIXEL_FORMAT_UNKNOWN: number;
        declare         export var PROGRESS_INDICATOR_DETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_DIALOG: number;
        declare         export var PROGRESS_INDICATOR_INDETERMINANT: number;
        declare         export var PROGRESS_INDICATOR_STATUS_BAR: number;
        declare         export var SOFT_INPUT_ADJUST_PAN: number;
        declare         export var SOFT_INPUT_ADJUST_RESIZE: number;
        declare         export var SOFT_INPUT_ADJUST_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;
        declare         export var SOFT_INPUT_STATE_HIDDEN: number;
        declare         export var SOFT_INPUT_STATE_UNSPECIFIED: number;
        declare         export var SOFT_INPUT_STATE_VISIBLE: number;
        declare         export var SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_HIDE_ON_FOCUS: number;
        declare         export var SOFT_KEYBOARD_SHOW_ON_FOCUS: number;
        declare         export var SWITCH_STYLE_CHECKBOX: number;
        declare         export var SWITCH_STYLE_TOGGLEBUTTON: number;
        declare         export var WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;
        declare         export var WEBVIEW_LOAD_CACHE_ONLY: number;
        declare         export var WEBVIEW_LOAD_DEFAULT: number;
        declare         export var WEBVIEW_LOAD_NO_CACHE: number;
        declare         export var WEBVIEW_PLUGINS_OFF: number;
        declare         export var WEBVIEW_PLUGINS_ON: number;
        declare         export var WEBVIEW_PLUGINS_ON_DEMAND: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createProgressIndicator(
            parameters?: Dictionary<undefined.ProgressIndicator>): undefined.ProgressIndicator
        declare         export function createSearchView(parameters?: Dictionary<undefined.SearchView>): undefined.SearchView
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function hideSoftKeyboard(): void
        declare         export function openPreferences(): void
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type SearchView = {
            hintText: string,
            iconified: boolean,
            iconifiedByDefault: boolean,
            submitEnabled: boolean,
            value: string,
            blur(): void,
            focus(): void,
            getHintText(): string,
            getIconified(): boolean,
            getIconifiedByDefault(): boolean,
            getSubmitEnabled(): boolean,
            getValue(): string,
            setHintText(hintText: string): void,
            setIconified(iconified: boolean): void,
            setIconifiedByDefault(iconifiedByDefault: boolean): void,
            setSubmitEnabled(submitEnabled: boolean): void,
            setValue(value: string): void
        }
        declare         export type ProgressIndicator = {
            cancelable: boolean,
            location: number,
            max: number,
            message: string,
            messageid: string,
            min: number,
            type: number,
            getCancelable(): boolean,
            getLocation(): number,
            getMax(): number,
            getMessage(): string,
            getMessageid(): string,
            getMin(): number,
            getType(): number,
            hide(): void,
            setCancelable(cancelable: boolean): void,
            setLocation(location: number): void,
            setMax(max: number): void,
            setMessage(message: string): void,
            setMessageid(messageid: string): void,
            setMin(min: number): void,
            setType(type: number): void,
            show(): void
        }
        declare         export var manualMode: boolean;
        declare         export function addLocationProvider(provider: undefined.LocationProvider): void
        declare         export function addLocationRule(rule: undefined.LocationRule): void
        declare         export function createLocationProvider(
            parameters?: Dictionary<undefined.LocationProvider>): undefined.LocationProvider
        declare         export function createLocationRule(parameters?: Dictionary<undefined.LocationRule>): undefined.LocationRule
        declare         export function getManualMode(): boolean
        declare         export function removeLocationProvider(provider: undefined.LocationProvider): void
        declare         export function removeLocationRule(rule: undefined.LocationRule): void
        declare         export function setManualMode(manualMode: boolean): void
        declare         export type LocationProvider = {
            minUpdateDistance: number,
            minUpdateTime: number,
            name: string,
            getMinUpdateDistance(): number,
            getMinUpdateTime(): number,
            getName(): string,
            setMinUpdateDistance(minUpdateDistance: number): void,
            setMinUpdateTime(minUpdateTime: number): void,
            setName(name: string): void
        }
        declare         export type LocationRule = {
            accuracy: number,
            maxAge: number,
            minAge: number,
            name: string,
            getAccuracy(): number,
            getMaxAge(): number,
            getMinAge(): number,
            getName(): string,
            setAccuracy(accuracy: number): void,
            setMaxAge(maxAge: number): void,
            setMinAge(minAge: number): void,
            setName(name: string): void
        }
        declare         export var R: undefined.R;
        declare         export var appVersionCode: number;
        declare         export var appVersionName: string;
        declare         export var launchIntent: undefined.Intent;
        declare         export function getAppVersionCode(): number
        declare         export function getAppVersionName(): string
        declare         export function getLaunchIntent(): undefined.Intent
        declare         export interface R {}
        declare         export var ACTION_AIRPLANE_MODE_CHANGED: string;
        declare         export var ACTION_ALL_APPS: string;
        declare         export var ACTION_ANSWER: string;
        declare         export var ACTION_ATTACH_DATA: string;
        declare         export var ACTION_BATTERY_CHANGED: string;
        declare         export var ACTION_BATTERY_LOW: string;
        declare         export var ACTION_BATTERY_OKAY: string;
        declare         export var ACTION_BOOT_COMPLETED: string;
        declare         export var ACTION_BUG_REPORT: string;
        declare         export var ACTION_CALL: string;
        declare         export var ACTION_CALL_BUTTON: string;
        declare         export var ACTION_CAMERA_BUTTON: string;
        declare         export var ACTION_CHOOSER: string;
        declare         export var ACTION_CLOSE_SYSTEM_DIALOGS: string;
        declare         export var ACTION_CONFIGURATION_CHANGED: string;
        declare         export var ACTION_CREATE_SHORTCUT: string;
        declare         export var ACTION_DATE_CHANGED: string;
        declare         export var ACTION_DEFAULT: string;
        declare         export var ACTION_DELETE: string;
        declare         export var ACTION_DEVICE_STORAGE_LOW: string;
        declare         export var ACTION_DIAL: string;
        declare         export var ACTION_EDIT: string;
        declare         export var ACTION_GET_CONTENT: string;
        declare         export var ACTION_GTALK_SERVICE_CONNECTED: string;
        declare         export var ACTION_GTALK_SERVICE_DISCONNECTED: string;
        declare         export var ACTION_HEADSET_PLUG: string;
        declare         export var ACTION_INPUT_METHOD_CHANGED: string;
        declare         export var ACTION_INSERT: string;
        declare         export var ACTION_INSERT_OR_EDIT: string;
        declare         export var ACTION_MAIN: string;
        declare         export var ACTION_MANAGE_PACKAGE_STORAGE: string;
        declare         export var ACTION_MEDIA_BAD_REMOVAL: string;
        declare         export var ACTION_MEDIA_BUTTON: string;
        declare         export var ACTION_MEDIA_CHECKING: string;
        declare         export var ACTION_MEDIA_EJECT: string;
        declare         export var ACTION_MEDIA_MOUNTED: string;
        declare         export var ACTION_MEDIA_NOFS: string;
        declare         export var ACTION_MEDIA_REMOVED: string;
        declare         export var ACTION_MEDIA_SCANNER_FINISHED: string;
        declare         export var ACTION_MEDIA_SCANNER_SCAN_FILE: string;
        declare         export var ACTION_MEDIA_SCANNER_STARTED: string;
        declare         export var ACTION_MEDIA_SHARED: string;
        declare         export var ACTION_MEDIA_UNMOUNTABLE: string;
        declare         export var ACTION_MEDIA_UNMOUNTED: string;
        declare         export var ACTION_NEW_OUTGOING_CALL: string;
        declare         export var ACTION_PACKAGE_ADDED: string;
        declare         export var ACTION_PACKAGE_CHANGED: string;
        declare         export var ACTION_PACKAGE_DATA_CLEARED: string;
        declare         export var ACTION_PACKAGE_INSTALL: string;
        declare         export var ACTION_PACKAGE_REMOVED: string;
        declare         export var ACTION_PACKAGE_REPLACED: string;
        declare         export var ACTION_PACKAGE_RESTARTED: string;
        declare         export var ACTION_PICK: string;
        declare         export var ACTION_PICK_ACTIVITY: string;
        declare         export var ACTION_POWER_CONNECTED: string;
        declare         export var ACTION_POWER_DISCONNECTED: string;
        declare         export var ACTION_POWER_USAGE_SUMMARY: string;
        declare         export var ACTION_PROVIDER_CHANGED: string;
        declare         export var ACTION_REBOOT: string;
        declare         export var ACTION_RUN: string;
        declare         export var ACTION_SCREEN_OFF: string;
        declare         export var ACTION_SCREEN_ON: string;
        declare         export var ACTION_SEARCH: string;
        declare         export var ACTION_SEARCH_LONG_PRESS: string;
        declare         export var ACTION_SEND: string;
        declare         export var ACTION_SENDTO: string;
        declare         export var ACTION_SEND_MULTIPLE: string;
        declare         export var ACTION_SET_WALLPAPER: string;
        declare         export var ACTION_SHUTDOWN: string;
        declare         export var ACTION_SYNC: string;
        declare         export var ACTION_SYSTEM_TUTORIAL: string;
        declare         export var ACTION_TIME_CHANGED: string;
        declare         export var ACTION_TIME_TICK: string;
        declare         export var ACTION_UID_REMOVED: string;
        declare         export var ACTION_UMS_CONNECTED: string;
        declare         export var ACTION_UMS_DISCONNECTED: string;
        declare         export var ACTION_USER_PRESENT: string;
        declare         export var ACTION_VIEW: string;
        declare         export var ACTION_VOICE_COMMAND: string;
        declare         export var ACTION_WALLPAPER_CHANGED: string;
        declare         export var ACTION_WEB_SEARCH: string;
        declare         export var CATEGORY_ALTERNATIVE: string;
        declare         export var CATEGORY_BROWSABLE: string;
        declare         export var CATEGORY_DEFAULT: string;
        declare         export var CATEGORY_DEVELOPMENT_PREFERENCE: string;
        declare         export var CATEGORY_EMBED: string;
        declare         export var CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;
        declare         export var CATEGORY_HOME: string;
        declare         export var CATEGORY_INFO: string;
        declare         export var CATEGORY_LAUNCHER: string;
        declare         export var CATEGORY_MONKEY: string;
        declare         export var CATEGORY_OPENABLE: string;
        declare         export var CATEGORY_PREFERENCE: string;
        declare         export var CATEGORY_SAMPLE_CODE: string;
        declare         export var CATEGORY_SELECTED_ALTERNATIVE: string;
        declare         export var CATEGORY_TAB: string;
        declare         export var CATEGORY_TEST: string;
        declare         export var CATEGORY_UNIT_TEST: string;
        declare         export var DEFAULT_ALL: number;
        declare         export var DEFAULT_LIGHTS: number;
        declare         export var DEFAULT_SOUND: number;
        declare         export var DEFAULT_VIBRATE: number;
        declare         export var EXTRA_ALARM_COUNT: string;
        declare         export var EXTRA_BCC: string;
        declare         export var EXTRA_CC: string;
        declare         export var EXTRA_DATA_REMOVED: string;
        declare         export var EXTRA_DONT_KILL_APP: string;
        declare         export var EXTRA_EMAIL: string;
        declare         export var EXTRA_INTENT: string;
        declare         export var EXTRA_KEY_EVENT: string;
        declare         export var EXTRA_PHONE_NUMBER: string;
        declare         export var EXTRA_REPLACING: string;
        declare         export var EXTRA_SHORTCUT_ICON: string;
        declare         export var EXTRA_SHORTCUT_ICON_RESOURCE: string;
        declare         export var EXTRA_SHORTCUT_INTENT: string;
        declare         export var EXTRA_SHORTCUT_NAME: string;
        declare         export var EXTRA_STREAM: string;
        declare         export var EXTRA_SUBJECT: string;
        declare         export var EXTRA_TEMPLATE: string;
        declare         export var EXTRA_TEXT: string;
        declare         export var EXTRA_TITLE: string;
        declare         export var EXTRA_UID: string;
        declare         export var FILL_IN_ACTION: number;
        declare         export var FILL_IN_CATEGORIES: number;
        declare         export var FILL_IN_COMPONENT: number;
        declare         export var FILL_IN_DATA: number;
        declare         export var FILL_IN_PACKAGE: number;
        declare         export var FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_CLEAR_TOP: number;
        declare         export var FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;
        declare         export var FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;
        declare         export var FLAG_ACTIVITY_FORWARD_RESULT: number;
        declare         export var FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;
        declare         export var FLAG_ACTIVITY_MULTIPLE_TASK: number;
        declare         export var FLAG_ACTIVITY_NEW_TASK: number;
        declare         export var FLAG_ACTIVITY_NO_ANIMATION: number;
        declare         export var FLAG_ACTIVITY_NO_HISTORY: number;
        declare         export var FLAG_ACTIVITY_NO_USER_ACTION: number;
        declare         export var FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;
        declare         export var FLAG_ACTIVITY_REORDER_TO_FRONT: number;
        declare         export var FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;
        declare         export var FLAG_ACTIVITY_SINGLE_TOP: number;
        declare         export var FLAG_AUTO_CANCEL: number;
        declare         export var FLAG_CANCEL_CURRENT: number;
        declare         export var FLAG_DEBUG_LOG_RESOLUTION: number;
        declare         export var FLAG_FROM_BACKGROUND: number;
        declare         export var FLAG_GRANT_READ_URI_PERMISSION: number;
        declare         export var FLAG_GRANT_WRITE_URI_PERMISSION: number;
        declare         export var FLAG_INSISTENT: number;
        declare         export var FLAG_NO_CLEAR: number;
        declare         export var FLAG_NO_CREATE: number;
        declare         export var FLAG_ONE_SHOT: number;
        declare         export var FLAG_ONGOING_EVENT: number;
        declare         export var FLAG_ONLY_ALERT_ONCE: number;
        declare         export var FLAG_RECEIVER_REGISTERED_ONLY: number;
        declare         export var FLAG_SHOW_LIGHTS: number;
        declare         export var FLAG_UPDATE_CURRENT: number;
        declare         export var NAVIGATION_MODE_STANDARD: number;
        declare         export var NAVIGATION_MODE_TABS: number;
        declare         export var PENDING_INTENT_FOR_ACTIVITY: number;
        declare         export var PENDING_INTENT_FOR_BROADCAST: number;
        declare         export var PENDING_INTENT_FOR_SERVICE: number;
        declare         export var PENDING_INTENT_MAX_VALUE: number;
        declare         export var RESULT_CANCELED: number;
        declare         export var RESULT_FIRST_USER: number;
        declare         export var RESULT_OK: number;
        declare         export var SCREEN_ORIENTATION_BEHIND: number;
        declare         export var SCREEN_ORIENTATION_LANDSCAPE: number;
        declare         export var SCREEN_ORIENTATION_NOSENSOR: number;
        declare         export var SCREEN_ORIENTATION_PORTRAIT: number;
        declare         export var SCREEN_ORIENTATION_SENSOR: number;
        declare         export var SCREEN_ORIENTATION_UNSPECIFIED: number;
        declare         export var SCREEN_ORIENTATION_USER: number;
        declare         export var SHOW_AS_ACTION_ALWAYS: number;
        declare         export var SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
        declare         export var SHOW_AS_ACTION_IF_ROOM: number;
        declare         export var SHOW_AS_ACTION_NEVER: number;
        declare         export var SHOW_AS_ACTION_WITH_TEXT: number;
        declare         export var START_NOT_STICKY: number;
        declare         export var START_REDELIVER_INTENT: number;
        declare         export var STREAM_ALARM: number;
        declare         export var STREAM_DEFAULT: number;
        declare         export var STREAM_MUSIC: number;
        declare         export var STREAM_NOTIFICATION: number;
        declare         export var STREAM_RING: number;
        declare         export var STREAM_SYSTEM: number;
        declare         export var STREAM_VOICE_CALL: number;
        declare         export var URI_INTENT_SCHEME: number;
        declare         export var currentActivity: undefined.Activity;
        declare         export var currentService: undefined.Service;
        declare         export function createBroadcastIntent(options: BroadcastIntentOptions): undefined.Intent
        declare         export function createBroadcastReceiver(
            parameters?: Dictionary<undefined.BroadcastReceiver>): undefined.BroadcastReceiver
        declare         export function createIntent(parameters?: Dictionary<undefined.Intent>): undefined.Intent
        declare         export function createIntentChooser(intent: undefined.Intent, title: string): undefined.Intent
        declare         export function createNotification(parameters?: Dictionary<undefined.Notification>): undefined.Notification
        declare         export function createPendingIntent(parameters?: Dictionary<undefined.PendingIntent>): undefined.PendingIntent
        declare         export function createRemoteViews(parameters?: Dictionary<undefined.RemoteViews>): undefined.RemoteViews
        declare         export function createService(intent: undefined.Intent): undefined.Service
        declare         export function createServiceIntent(options: ServiceIntentOptions): undefined.Intent
        declare         export function getCurrentActivity(): undefined.Activity
        declare         export function getCurrentService(): undefined.Service
        declare         export function isServiceRunning(intent: undefined.Intent): boolean
        declare         export function registerBroadcastReceiver(
            broadcastReceiver: undefined.BroadcastReceiver,
            actions: Array<Global$String>): void
        declare         export function startService(intent: undefined.Intent): void
        declare         export function stopService(intent: undefined.Intent): void
        declare         export function unregisterBroadcastReceiver(broadcastReceiver: undefined.BroadcastReceiver): void
        declare         export type Intent = {
            action: string,
            className: string,
            data: string,
            flags: number,
            packageName: string,
            type: string,
            url: string,
            addCategory(name: string): void,
            addFlags(flags: number): void,
            getAction(): string,
            getBlobExtra(name: string): Ti$Blob,
            getBooleanExtra(name: string): boolean,
            getClassName(): string,
            getData(): string,
            getDoubleExtra(name: string): number,
            getFlags(): number,
            getIntExtra(name: string): number,
            getLongExtra(name: string): number,
            getPackageName(): string,
            getStringExtra(name: string): string,
            getType(): string,
            getUrl(): string,
            hasExtra(name: string): boolean,
            putExtra(name: string, value: any): void,
            putExtraUri(name: string, value: string): void,
            setFlags(flags: number): void
        }
        declare         export type Notification = {
            duration: number,
            horizontalMargin: number,
            message: string,
            verticalMargin: number,
            xOffset: number,
            yOffset: number,
            getDuration(): number,
            getHorizontalMargin(): number,
            getMessage(): string,
            getVerticalMargin(): number,
            getXOffset(): number,
            getYOffset(): number,
            setDuration(duration: number): void,
            setHorizontalMargin(horizontalMargin: number): void,
            setMessage(message: string): void,
            setVerticalMargin(verticalMargin: number): void,
            setXOffset(xOffset: number): void,
            setYOffset(yOffset: number): void
        }
        declare module 'Calendar' {
            declare             export var METHOD_ALERT: number;
            declare             export var METHOD_DEFAULT: number;
            declare             export var METHOD_EMAIL: number;
            declare             export var METHOD_SMS: number;
            declare             export var STATE_DISMISSED: number;
            declare             export var STATE_FIRED: number;
            declare             export var STATE_SCHEDULED: number;
            declare             export var STATUS_CANCELED: number;
            declare             export var STATUS_CONFIRMED: number;
            declare             export var STATUS_TENTATIVE: number;
            declare             export var VISIBILITY_CONFIDENTIAL: number;
            declare             export var VISIBILITY_DEFAULT: number;
            declare             export var VISIBILITY_PRIVATE: number;
            declare             export var VISIBILITY_PUBLIC: number;
            declare             export var allAlerts: Array<undefined.Alert>;
            declare             export var allCalendars: Array<undefined.Calendar>;
            declare             export var apiName: string;
            declare             export var bubbleParent: boolean;
            declare             export var selectableCalendars: Array<undefined.Calendar>;
            declare             export function addEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function applyProperties(props: Dictionary<Object>): void
            declare             export function fireEvent(name: string, event: Dictionary<Object>): void
            declare             export function getAllAlerts(): Array<undefined.Alert >
                declare             export function getAllCalendars(): Array<undefined.Calendar >
                declare             export function getApiName(): string
            declare             export function getBubbleParent(): boolean
            declare             export function getCalendarById(id: number): undefined.Calendar
            declare             export function getSelectableCalendars(): Array<undefined.Calendar >
                declare             export function removeEventListener(name: string, callback: (...args: any[]) => any): void
            declare             export function setBubbleParent(bubbleParent: boolean): void
            declare             export type Event = {
                alerts: Array<undefined.Alert>,
                allDay: boolean,
                begin: Date,
                description: string,
                end: Date,
                extendedProperties: Dictionary<Object>,
                hasAlarm: boolean,
                hasExtendedProperties: boolean,
                id: string,
                location: string,
                reminders: Array<undefined.Reminder>,
                status: number,
                title: string,
                visibility: number,
                createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
                createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
                getAlerts(): Array<undefined.Alert>,
                getAllDay(): boolean,
                getBegin(): Date,
                getDescription(): string,
                getEnd(): Date,
                getExtendedProperties(): Dictionary<Object>,
                getExtendedProperty(name: string): string,
                getHasAlarm(): boolean,
                getHasExtendedProperties(): boolean,
                getId(): string,
                getLocation(): string,
                getReminders(): Array<undefined.Reminder>,
                getStatus(): number,
                getTitle(): string,
                getVisibility(): number,
                setExtendedProperty(name: string, value: string): void
            }
            declare             export type Reminder = {
                id: string,
                method: number,
                minutes: number,
                getId(): string,
                getMethod(): number,
                getMinutes(): number
            }
            declare             export type Calendar = {
                hidden: boolean,
                id: string,
                name: string,
                selected: boolean,
                createEvent(properties: Dictionary<undefined.Event>): undefined.Event,
                getEventById(id: number): undefined.Event,
                getEventsBetweenDates(date1: Date, date2: Date): Array<undefined.Event>,
                getEventsInDate(year: number, month: number, day: number): Array<undefined.Event>,
                getEventsInMonth(year: number, month: number): Array<undefined.Event>,
                getEventsInYear(year: number): Array<undefined.Event>,
                getHidden(): boolean,
                getId(): string,
                getName(): string,
                getSelected(): boolean
            }
            declare             export type Alert = {
                alarmTime: Date,
                begin: Date,
                end: Date,
                eventId: number,
                id: string,
                minutes: number,
                state: number,
                getAlarmTime(): Date,
                getBegin(): Date,
                getEnd(): Date,
                getEventId(): number,
                getId(): string,
                getMinutes(): number,
                getState(): number
            }
            declare             export var AUTHORIZATION_AUTHORIZED: number;
            declare             export var AUTHORIZATION_DENIED: number;
            declare             export var AUTHORIZATION_RESTRICTED: number;
            declare             export var AUTHORIZATION_UNKNOWN: number;
            declare             export var AVAILABILITY_BUSY: number;
            declare             export var AVAILABILITY_FREE: number;
            declare             export var AVAILABILITY_NOTSUPPORTED: number;
            declare             export var AVAILABILITY_TENTATIVE: number;
            declare             export var AVAILABILITY_UNAVAILABLE: number;
            declare             export var RECURRENCEFREQUENCY_DAILY: number;
            declare             export var RECURRENCEFREQUENCY_MONTHLY: number;
            declare             export var RECURRENCEFREQUENCY_WEEKLY: number;
            declare             export var RECURRENCEFREQUENCY_YEARLY: number;
            declare             export var SPAN_FUTUREEVENTS: number;
            declare             export var SPAN_THISEVENT: number;
            declare             export var STATUS_NONE: number;
            declare             export var allEditableCalendars: Array<undefined.Calendar>;
            declare             export var defaultCalendar: undefined.Calendar;
            declare             export var eventsAuthorization: number;
            declare             export function getAllEditableCalendars(): Array<undefined.Calendar >
                declare             export function getDefaultCalendar(): undefined.Calendar
            declare             export function getEventsAuthorization(): number
            declare             export function requestEventsAuthorization(callback: (...args: any[]) => any): void
            declare             export type RecurrenceRule = {
                calendarID: string,
                daysOfTheMonth: Array<Number>,
                daysOfTheWeek: daysOfTheWeekDictionary,
                daysOfTheYear: Array<Number>,
                end: recurrenceEndDictionary,
                frequency: number,
                interval: number,
                monthsOfTheYear: Array<Number>,
                setPositions: Array<Number>,
                weeksOfTheYear: Array<Number>,
                getCalendarID(): string,
                getDaysOfTheMonth(): Array<Number>,
                getDaysOfTheWeek(): daysOfTheWeekDictionary,
                getDaysOfTheYear(): Array<Number>,
                getEnd(): recurrenceEndDictionary,
                getFrequency(): number,
                getInterval(): number,
                getMonthsOfTheYear(): Array<Number>,
                getSetPositions(): Array<Number>,
                getWeeksOfTheYear(): Array<Number >
            }
        }

        declare         export type MenuItem = {
            actionView: undefined.View,
            actionViewExpanded: boolean,
            checkable: boolean,
            checked: boolean,
            enabled: boolean,
            groupId: number,
            icon: any,
            itemId: number,
            order: number,
            showAsAction: number,
            title: string,
            titleCondensed: string,
            visible: boolean,
            collapseActionView(): void,
            expandActionView(): void,
            getActionView(): undefined.View,
            getGroupId(): number,
            getItemId(): number,
            getOrder(): number,
            getTitle(): string,
            getTitleCondensed(): string,
            isActionViewExpanded(): boolean,
            isCheckable(): boolean,
            isChecked(): boolean,
            isEnabled(): boolean,
            isVisible(): boolean,
            setActionView(actionView: undefined.View): void,
            setCheckable(checkable: boolean): void,
            setChecked(enabled: boolean): void,
            setEnabled(enabled: boolean): void,
            setIcon(icon: number): void,
            setIcon(icon: string): void,
            setShowAsAction(showAsAction: number): void,
            setTitle(title: string): void,
            setTitleCondensed(titleCondensed: string): void,
            setVisible(visible: boolean): void
        }
        declare         export interface NotificationManager {
            DEFAULT_ALL: number,
                DEFAULT_LIGHTS: number,
                DEFAULT_SOUND: number,
                DEFAULT_VIBRATE: number,
                FLAG_AUTO_CANCEL: number,
                FLAG_INSISTENT: number,
                FLAG_NO_CLEAR: number,
                FLAG_ONGOING_EVENT: number,
                FLAG_ONLY_ALERT_ONCE: number,
                FLAG_SHOW_LIGHTS: number,
                STREAM_DEFAULT: number,
                cancel(id: number): void,
                cancelAll(): void,
                notify(id: number, notification: undefined.Notification): void
        }
        declare         export type ActionBar = {
            backgroundImage: string,
            displayHomeAsUp: boolean,
            homeButtonEnabled: boolean,
            icon: string,
            logo: string,
            navigationMode: number,
            onHomeIconItemSelected: (...args: any[]) => any,
            subtitle: string,
            title: string,
            getNavigationMode(): number,
            getSubtitle(): string,
            getTitle(): string,
            hide(): void,
            setBackgroundImage(backgroundImage: string): void,
            setDisplayHomeAsUp(displayHomeAsUp: boolean): void,
            setDisplayShowHomeEnabled(show: boolean): void,
            setDisplayShowTitleEnabled(show: boolean): void,
            setHomeButtonEnabled(homeButtonEnabled: boolean): void,
            setIcon(icon: string): void,
            setLogo(logo: string): void,
            setNavigationMode(navigationMode: number): void,
            setOnHomeIconItemSelected(onHomeIconItemSelected: (...args: any[]) => any): void,
            setSubtitle(subtitle: string): void,
            setTitle(title: string): void,
            show(): void
        }
        declare         export type BroadcastReceiver = {
            onReceived: (...args: any[]) => any,
            url: string,
            getOnReceived(): (...args: any[]) => any,
            getUrl(): string,
            setOnReceived(onReceived: (...args: any[]) => any): void,
            setUrl(url: string): void
        }
        declare         export type Menu = {
            items: Array<undefined.MenuItem>,
            add(options: any): undefined.MenuItem,
            clear(): void,
            close(): void,
            findItem(item: number): undefined.MenuItem,
            findItem(item: undefined.MenuItem): undefined.MenuItem,
            getItem(index: number): undefined.MenuItem,
            getItems(): Array<undefined.MenuItem>,
            hasVisibleItems(): boolean,
            removeGroup(groupId: number): void,
            removeItem(itemId: number): void,
            setGroupEnabled(groupId: number, enabled: boolean): void,
            setGroupVisible(groupId: number, visible: boolean): void,
            size(): number
        }
        declare         export type Activity = {
            actionBar: undefined.ActionBar,
            intent: undefined.Intent,
            onCreate: (...args: any[]) => any,
            onCreateOptionsMenu: (...args: any[]) => any,
            onDestroy: (...args: any[]) => any,
            onPause: (...args: any[]) => any,
            onPrepareOptionsMenu: (...args: any[]) => any,
            onRestart: (...args: any[]) => any,
            onResume: (...args: any[]) => any,
            onStart: (...args: any[]) => any,
            onStop: (...args: any[]) => any,
            requestedOrientation: number,
            finish(): void,
            getActionBar(): undefined.ActionBar,
            getIntent(): undefined.Intent,
            getOnCreate(): (...args: any[]) => any,
            getOnCreateOptionsMenu(): (...args: any[]) => any,
            getOnDestroy(): (...args: any[]) => any,
            getOnPause(): (...args: any[]) => any,
            getOnPrepareOptionsMenu(): (...args: any[]) => any,
            getOnRestart(): (...args: any[]) => any,
            getOnResume(): (...args: any[]) => any,
            getOnStart(): (...args: any[]) => any,
            getOnStop(): (...args: any[]) => any,
            getString(resourceId: number, format: any): string,
            invalidateOptionsMenu(): void,
            openOptionsMenu(): void,
            sendBroadcast(intent: undefined.Intent): void,
            sendBroadcastWithPermission(intent: undefined.Intent, receiverPermission?: string): void,
            setOnCreate(onCreate: (...args: any[]) => any): void,
            setOnCreateOptionsMenu(onCreateOptionsMenu: (...args: any[]) => any): void,
            setOnDestroy(onDestroy: (...args: any[]) => any): void,
            setOnPause(onPause: (...args: any[]) => any): void,
            setOnPrepareOptionsMenu(onPrepareOptionsMenu: (...args: any[]) => any): void,
            setOnRestart(onRestart: (...args: any[]) => any): void,
            setOnResume(onResume: (...args: any[]) => any): void,
            setOnStart(onStart: (...args: any[]) => any): void,
            setOnStop(onStop: (...args: any[]) => any): void,
            setRequestedOrientation(orientation: number): void,
            setResult(resultCode: number, intent?: undefined.Intent): void,
            startActivity(intent: undefined.Intent): void,
            startActivityForResult(intent: undefined.Intent, callback: (...args: any[]) => any): void
        }
        declare         export type Service = {
            intent: undefined.Intent,
            serviceInstanceId: number,
            getIntent(): undefined.Intent,
            getServiceInstanceId(): number,
            start(): void,
            stop(): void
        }
        declare         export type RemoteViews = {
            layoutId: number,
            packageName: string,
            getLayoutId(): number,
            getPackageName(): string,
            setBoolean(viewId: number, methodName: string, value: boolean): void,
            setChronometer(viewId: number, base: Date, format: string, started: boolean): void,
            setDouble(viewId: number, methodName: string, value: number): void,
            setImageViewResource(viewId: number, srcId: number): void,
            setImageViewUri(viewId: number, uri: string): void,
            setInt(viewId: number, methodName: string, value: number): void,
            setOnClickPendingIntent(viewId: number, pendingIntent: undefined.PendingIntent): void,
            setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void,
            setString(viewId: number, methodName: string, value: string): void,
            setTextColor(viewId: number, color: number): void,
            setTextViewText(viewId: number, text: string): void,
            setUri(viewId: number, methodName: string, value: string): void,
            setViewVisibility(viewId: number, visibility: number): void
        }
        declare         export type PendingIntent = {
            flags: number,
            intent: undefined.Intent,
            updateCurrentIntent: boolean,
            getFlags(): number,
            getIntent(): undefined.Intent,
            getUpdateCurrentIntent(): boolean
        }
    }

    declare module 'iOS' {
        declare         export var AD_SIZE_LANDSCAPE: string;
        declare         export var AD_SIZE_PORTRAIT: string;
        declare         export var ANIMATION_CURVE_EASE_IN: number;
        declare         export var ANIMATION_CURVE_EASE_IN_OUT: number;
        declare         export var ANIMATION_CURVE_EASE_OUT: number;
        declare         export var ANIMATION_CURVE_LINEAR: number;
        declare         export var ATTRIBUTE_BACKGROUND_COLOR: number;
        declare         export var ATTRIBUTE_BASELINE_OFFSET: number;
        declare         export var ATTRIBUTE_EXPANSION: number;
        declare         export var ATTRIBUTE_FONT: number;
        declare         export var ATTRIBUTE_FOREGROUND_COLOR: number;
        declare         export var ATTRIBUTE_KERN: number;
        declare         export var ATTRIBUTE_LETTERPRESS_STYLE: number;
        declare         export var ATTRIBUTE_LIGATURE: number;
        declare         export var ATTRIBUTE_LINK: number;
        declare         export var ATTRIBUTE_OBLIQUENESS: number;
        declare         export var ATTRIBUTE_SHADOW: number;
        declare         export var ATTRIBUTE_STRIKETHROUGH_COLOR: number;
        declare         export var ATTRIBUTE_STRIKETHROUGH_STYLE: number;
        declare         export var ATTRIBUTE_STROKE_COLOR: number;
        declare         export var ATTRIBUTE_STROKE_WIDTH: number;
        declare         export var ATTRIBUTE_TEXT_EFFECT: number;
        declare         export var ATTRIBUTE_UNDERLINES_STYLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_BY_WORD: number;
        declare         export var ATTRIBUTE_UNDERLINE_COLOR: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;
        declare         export var ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_NONE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;
        declare         export var ATTRIBUTE_UNDERLINE_STYLE_THICK: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;
        declare         export var ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;
        declare         export var AUTODETECT_ADDRESS: number;
        declare         export var AUTODETECT_ALL: number;
        declare         export var AUTODETECT_CALENDAR: number;
        declare         export var AUTODETECT_LINK: number;
        declare         export var AUTODETECT_NONE: number;
        declare         export var AUTODETECT_PHONE: number;
        declare         export var BLEND_MODE_CLEAR: number;
        declare         export var BLEND_MODE_COLOR: number;
        declare         export var BLEND_MODE_COLOR_BURN: number;
        declare         export var BLEND_MODE_COLOR_DODGE: number;
        declare         export var BLEND_MODE_COPY: number;
        declare         export var BLEND_MODE_DARKEN: number;
        declare         export var BLEND_MODE_DESTINATION_ATOP: number;
        declare         export var BLEND_MODE_DESTINATION_IN: number;
        declare         export var BLEND_MODE_DESTINATION_OUT: number;
        declare         export var BLEND_MODE_DESTINATION_OVER: number;
        declare         export var BLEND_MODE_DIFFERENCE: number;
        declare         export var BLEND_MODE_EXCLUSION: number;
        declare         export var BLEND_MODE_HARD_LIGHT: number;
        declare         export var BLEND_MODE_HUE: number;
        declare         export var BLEND_MODE_LIGHTEN: number;
        declare         export var BLEND_MODE_LUMINOSITY: number;
        declare         export var BLEND_MODE_MULTIPLY: number;
        declare         export var BLEND_MODE_NORMAL: number;
        declare         export var BLEND_MODE_OVERLAY: number;
        declare         export var BLEND_MODE_PLUS_DARKER: number;
        declare         export var BLEND_MODE_PLUS_LIGHTER: number;
        declare         export var BLEND_MODE_SATURATION: number;
        declare         export var BLEND_MODE_SCREEN: number;
        declare         export var BLEND_MODE_SOFT_LIGHT: number;
        declare         export var BLEND_MODE_SOURCE_ATOP: number;
        declare         export var BLEND_MODE_SOURCE_IN: number;
        declare         export var BLEND_MODE_SOURCE_OUT: number;
        declare         export var BLEND_MODE_XOR: number;
        declare         export var CLIP_MODE_DEFAULT: number;
        declare         export var CLIP_MODE_DISABLED: number;
        declare         export var CLIP_MODE_ENABLED: number;
        declare         export var COLLISION_MODE_ALL: number;
        declare         export var COLLISION_MODE_BOUNDARY: number;
        declare         export var COLLISION_MODE_ITEM: number;
        declare         export var COLOR_GROUP_TABLEVIEW_BACKGROUND: string;
        declare         export var COLOR_SCROLLVIEW_BACKGROUND: string;
        declare         export var COLOR_UNDER_PAGE_BACKGROUND: string;
        declare         export var COLOR_VIEW_FLIPSIDE_BACKGROUND: string;
        declare         export var PUSH_MODE_CONTINUOUS: number;
        declare         export var PUSH_MODE_INSTANTANEOUS: number;
        declare         export var SCROLL_DECELERATION_RATE_FAST: number;
        declare         export var SCROLL_DECELERATION_RATE_NORMAL: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_OTHER: number;
        declare         export var WEBVIEW_NAVIGATIONTYPE_RELOAD: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function create3DMatrix(parameters?: Dictionary<undefined._3DMatrix>): undefined._3DMatrix
        declare         export function createAdView(parameters?: Dictionary<undefined.AdView>): undefined.AdView
        declare         export function createAnchorAttachmentBehavior(
            parameters?: Dictionary<undefined.AnchorAttachmentBehavior>): undefined.AnchorAttachmentBehavior
        declare         export function createAnimator(parameters?: Dictionary<undefined.Animator>): undefined.Animator
        declare         export function createAttributedString(
            parameters?: Dictionary<undefined.AttributedString>): undefined.AttributedString
        declare         export function createCollisionBehavior(
            parameters?: Dictionary<undefined.CollisionBehavior>): undefined.CollisionBehavior
        declare         export function createCoverFlowView(parameters?: Dictionary<undefined.CoverFlowView>): undefined.CoverFlowView
        declare         export function createDocumentViewer(parameters?: Dictionary<undefined.DocumentViewer>): undefined.DocumentViewer
        declare         export function createDynamicItemBehavior(
            parameters?: Dictionary<undefined.DynamicItemBehavior>): undefined.DynamicItemBehavior
        declare         export function createGravityBehavior(parameters?: Dictionary<undefined.GravityBehavior>): undefined.GravityBehavior
        declare         export function createNavigationWindow(
            parameters?: Dictionary<undefined.NavigationWindow>): undefined.NavigationWindow
        declare         export function createPushBehavior(parameters?: Dictionary<undefined.PushBehavior>): undefined.PushBehavior
        declare         export function createSnapBehavior(parameters?: Dictionary<undefined.SnapBehavior>): undefined.SnapBehavior
        declare         export function createTabbedBar(parameters?: Dictionary<undefined.TabbedBar>): undefined.TabbedBar
        declare         export function createToolbar(parameters?: Dictionary<undefined.Toolbar>): undefined.Toolbar
        declare         export function createTransitionAnimation(transition: transitionAnimationParam): Ti$Proxy
        declare         export function createViewAttachmentBehavior(
            parameters?: Dictionary<undefined.ViewAttachmentBehavior>): undefined.ViewAttachmentBehavior
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type Animator = {
            behaviors: Array<Ti$Proxy>,
            referenceView: undefined.View,
            running: boolean,
            addBehavior(behavior: Ti$Proxy): void,
            getBehaviors(): Array<Ti$Proxy>,
            getReferenceView(): undefined.View,
            getRunning(): boolean,
            removeAllBehaviors(): void,
            removeBehavior(behavior: Ti$Proxy): void,
            setBehaviors(behaviors: Array<Ti$Proxy>): void,
            setReferenceView(referenceView: undefined.View): void,
            startAnimator(): void,
            stopAnimator(): void,
            updateItemUsingCurrentState(item: undefined.View): void
        }
        declare         export type DynamicItemBehavior = {
            allowsRotation: boolean,
            angularResistance: number,
            density: number,
            elasticity: number,
            friction: number,
            items: Array<undefined.View>,
            resistance: number,
            addAngularVelocityForItem(item: undefined.View, velocity: number): void,
            addItem(item: undefined.View): void,
            addLinearVelocityForItem(item: undefined.View, velocity: Point): void,
            angularVelocityForItem(item: undefined.View): number,
            getAllowsRotation(): boolean,
            getAngularResistance(): number,
            getDensity(): number,
            getElasticity(): number,
            getFriction(): number,
            getItems(): Array<undefined.View>,
            getResistance(): number,
            linearVelocityForItem(item: undefined.View): Point,
            removeItem(item: undefined.View): void,
            setAllowsRotation(allowsRotation: boolean): void,
            setAngularResistance(angularResistance: number): void,
            setDensity(density: number): void,
            setElasticity(elasticity: number): void,
            setFriction(friction: number): void,
            setResistance(resistance: number): void
        }
        declare         export type SnapBehavior = {
            damping: number,
            item: undefined.View,
            snapPoint: Point,
            getDamping(): number,
            getItem(): undefined.View,
            getSnapPoint(): Point,
            setDamping(damping: number): void,
            setItem(item: undefined.View): void,
            setSnapPoint(snapPoint: Point): void
        }
        declare         export type GravityBehavior = {
            angle: number,
            gravityDirection: Point,
            items: Array<undefined.View>,
            magnitude: number,
            addItem(item: undefined.View): void,
            getAngle(): number,
            getGravityDirection(): Point,
            getItems(): Array<undefined.View>,
            getMagnitude(): number,
            removeItem(item: undefined.View): void,
            setAngle(angle: number): void,
            setGravityDirection(gravityDirection: Point): void,
            setMagnitude(magnitude: number): void
        }
        declare         export type CollisionBehavior = {
            boundaryIdentifiers: Array<BoundaryIdentifier>,
            collisionMode: number,
            items: Array<undefined.View>,
            referenceInsets: ReferenceInsets,
            treatReferenceAsBoundary: boolean,
            addBoundary(boundary: BoundaryIdentifier): void,
            addItem(item: undefined.View): void,
            getBoundaryIdentifiers(): Array<BoundaryIdentifier>,
            getCollisionMode(): number,
            getItems(): Array<undefined.View>,
            getReferenceInsets(): ReferenceInsets,
            getTreatReferenceAsBoundary(): boolean,
            removeAllBoundaries(): void,
            removeBoundary(boundary: BoundaryIdentifier): void,
            removeItem(item: undefined.View): void,
            setCollisionMode(collisionMode: number): void,
            setReferenceInsets(referenceInsets: ReferenceInsets): void,
            setTreatReferenceAsBoundary(treatReferenceAsBoundary: boolean): void
        }
        declare         export type Toolbar = {
            barColor: string,
            borderBottom: boolean,
            borderTop: boolean,
            extendBackground: boolean,
            items: Array<undefined.View>,
            translucent: boolean,
            getBarColor(): string,
            getBorderBottom(): boolean,
            getBorderTop(): boolean,
            getExtendBackground(): boolean,
            getItems(): Array<undefined.View>,
            getTranslucent(): boolean,
            setBarColor(barColor: string): void,
            setBorderBottom(borderBottom: boolean): void,
            setBorderTop(borderTop: boolean): void,
            setItems(items: Array<undefined.View>): void,
            setTranslucent(translucent: boolean): void
        }
        declare         export type ViewAttachmentBehavior = {
            anchorItem: undefined.View,
            anchorOffset: Point,
            damping: number,
            distance: number,
            frequency: number,
            item: undefined.View,
            itemOffset: Point,
            getAnchorItem(): undefined.View,
            getAnchorOffset(): Point,
            getDamping(): number,
            getDistance(): number,
            getFrequency(): number,
            getItem(): undefined.View,
            getItemOffset(): Point,
            setAnchorItem(anchorItem: undefined.View): void,
            setAnchorOffset(anchorOffset: Point): void,
            setDamping(damping: number): void,
            setDistance(distance: number): void,
            setFrequency(frequency: number): void,
            setItem(item: undefined.View): void,
            setItemOffset(itemOffset: Point): void
        }
        declare         export type PushBehavior = {
            active: boolean,
            angle: number,
            items: Array<undefined.View>,
            magnitude: number,
            pushDirection: Point,
            pushMode: number,
            addItem(item: undefined.View): void,
            getActive(): boolean,
            getAngle(): number,
            getItems(): Array<undefined.View>,
            getMagnitude(): number,
            getPushDirection(): Point,
            getPushMode(): number,
            removeItem(item: undefined.View): void,
            setActive(active: boolean): void,
            setAngle(angle: number): void,
            setMagnitude(magnitude: number): void,
            setPushDirection(pushDirection: Point): void,
            setPushMode(pushMode: number): void
        }
        declare         export type CoverFlowView = {
            images: any,
            selected: number,
            getImages(): any,
            getSelected(): number,
            setImage(index: number, image: string): void,
            setImage(image: Ti$Blob): void,
            setImage(image: undefined.File): void,
            setImage(index: number, image: CoverFlowImageType): void,
            setImages(images: Array<Global$String>): void,
            setImages(images: Array<Ti$Blob>): void,
            setImages(images: Array<undefined.File>): void,
            setImages(images: Array<CoverFlowImageType>): void,
            setSelected(selected: number): void
        }
        declare         export type DocumentViewer = {
            setUrl(url: string): void,
            show(): void
        }
        declare         export type NavigationWindow = {
            window: undefined.Window,
            closeWindow(window: undefined.Window, options: Dictionary<Object>): void,
            getWindow(): undefined.Window,
            openWindow(window: undefined.Window, options: Dictionary<Object>): void
        }
        declare         export type AttributedString = {
            attributes: Array<Attribute>,
            text: string,
            addAttribute(attribute: Attribute): void,
            getAttributes(): Array<Attribute>,
            getText(): string,
            setAttributes(attributes: Array<Attribute>): void,
            setText(text: string): void
        }
        declare         export type AnchorAttachmentBehavior = {
            anchor: Point,
            damping: number,
            distance: number,
            frequency: number,
            item: undefined.View,
            offset: Point,
            getAnchor(): Point,
            getDamping(): number,
            getDistance(): number,
            getFrequency(): number,
            getItem(): undefined.View,
            getOffset(): Point,
            setAnchor(anchor: Point): void,
            setDamping(damping: number): void,
            setDistance(distance: number): void,
            setFrequency(frequency: number): void,
            setItem(item: undefined.View): void,
            setOffset(offset: Point): void
        }
        declare         export type TabbedBar = {
            index: number,
            labels: any,
            style: number,
            getIndex(): number,
            getLabels(): any,
            getStyle(): number,
            setIndex(index: number): void,
            setLabels(labels: Array<Global$String>): void,
            setLabels(labels: Array<BarItemType>): void,
            setStyle(style: number): void
        }
        declare         export type _3DMatrix = {
            m11: number,
            m12: number,
            m13: number,
            m14: number,
            m21: number,
            m22: number,
            m23: number,
            m24: number,
            m31: number,
            m32: number,
            m33: number,
            m34: number,
            m41: number,
            m42: number,
            m43: number,
            m44: number,
            getM11(): number,
            getM12(): number,
            getM13(): number,
            getM14(): number,
            getM21(): number,
            getM22(): number,
            getM23(): number,
            getM24(): number,
            getM31(): number,
            getM32(): number,
            getM33(): number,
            getM34(): number,
            getM41(): number,
            getM42(): number,
            getM43(): number,
            getM44(): number,
            invert(): undefined._3DMatrix,
            multiply(t2: undefined._3DMatrix): undefined._3DMatrix,
            rotate(angle: number, x: number, y: number, z: number): undefined._3DMatrix,
            scale(sx: number, sy: number, sz: number): undefined._3DMatrix,
            setM11(m11: number): void,
            setM12(m12: number): void,
            setM13(m13: number): void,
            setM14(m14: number): void,
            setM21(m21: number): void,
            setM22(m22: number): void,
            setM23(m23: number): void,
            setM24(m24: number): void,
            setM31(m31: number): void,
            setM32(m32: number): void,
            setM33(m33: number): void,
            setM34(m34: number): void,
            setM41(m41: number): void,
            setM42(m42: number): void,
            setM43(m43: number): void,
            setM44(m44: number): void,
            translate(tx: number, ty: number, tz: number): undefined._3DMatrix
        }
        declare         export type AdView = {
            adSize: string,
            cancelAction(): void,
            getAdSize(): string,
            setAdSize(adSize: string): void
        }
        declare         export var BACKGROUNDFETCHINTERVAL_MIN: number;
        declare         export var BACKGROUNDFETCHINTERVAL_NEVER: number;
        declare         export var EVENT_ACCESSIBILITY_LAYOUT_CHANGED: string;
        declare         export var EVENT_ACCESSIBILITY_SCREEN_CHANGED: string;
        declare         export var USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: number;
        declare         export var USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: number;
        declare         export var USER_NOTIFICATION_TYPE_ALERT: number;
        declare         export var USER_NOTIFICATION_TYPE_BADGE: number;
        declare         export var USER_NOTIFICATION_TYPE_NONE: number;
        declare         export var USER_NOTIFICATION_TYPE_SOUND: number;
        declare         export var applicationOpenSettingsURL: string;
        declare         export var currentUserNotificationSettings: UserNotificationSettings;
        declare         export function cancelAllLocalNotifications(): void
        declare         export function cancelLocalNotification(id: number): void
        declare         export function createUserNotificationAction(
            parameters?: Dictionary<undefined.UserNotificationAction>): undefined.UserNotificationAction
        declare         export function createUserNotificationCategory(
            parameters?: Dictionary<undefined.UserNotificationCategory>): undefined.UserNotificationCategory
        declare         export function endBackgroundHandler(handlerID: string): void
        declare         export function getApplicationOpenSettingsURL(): string
        declare         export function getCurrentUserNotificationSettings(): UserNotificationSettings
        declare         export function registerBackgroundService(params: Dictionary<Object>): undefined.BackgroundService
        declare         export function registerUserNotificationSettings(params: UserNotificationSettings): void
        declare         export function scheduleLocalNotification(params: NotificationParams): undefined.LocalNotification
        declare         export function setMinimumBackgroundFetchInterval(fetchInterval: number): void
        declare         export type UserNotificationAction = {
            activationMode: number,
            authenticationRequired: boolean,
            destructive: boolean,
            identifier: string,
            title: string,
            getActivationMode(): number,
            getAuthenticationRequired(): boolean,
            getDestructive(): boolean,
            getIdentifier(): string,
            getTitle(): string
        }
        declare         export type LocalNotification = {
            cancel(): void
        }
        declare         export type UserNotificationCategory = {
            actionsForDefaultContext: Array<undefined.UserNotificationAction>,
            actionsForMinimalContext: Array<undefined.UserNotificationAction>,
            identifier: string,
            getActionsForDefaultContext(): Array<undefined.UserNotificationAction>,
            getActionsForMinimalContext(): Array<undefined.UserNotificationAction>,
            getIdentifier(): string
        }
        declare         export type BackgroundService = {
            url: string,
            getUrl(): string,
            stop(): void,
            unregister(): void
        }
    }

    declare     export interface Properties {
        getBool(property: string, _default?: boolean): boolean,
            getDouble(property: string, _default?: number): number,
            getInt(property: string, _default?: number): number,
            getList(property: string, _default?: Array<Object>): Array<Object>,
            getObject(property: string, _default?: any): any,
            getString(property: string, _default?: string): string,
            hasProperty(property: string): boolean,
            listProperties(): Array<Object>,
            removeProperty(property: string): void,
            setBool(property: string, value: boolean): void,
            setDouble(property: string, value: number): void,
            setInt(property: string, value: number): void,
            setList(property: string, value: Array<Object>): void,
            setObject(property: string, value: any): void,
            setString(property: string, value: string): void
    }
    declare     export interface Tizen {
        categories: Array<Global$String>,
            iconPath: string,
            id: string,
            installDate: Date,
            name: string,
            show: boolean,
            size: number,
            exit(): void,
            getCategories(): Array<Global$String>,
            getIconPath(): string,
            getId(): string,
            getInstallDate(): Date,
            getName(): string,
            getShow(): boolean,
            getSize(): number,
            hide(): void
    }
}


declare module 'Android' {
    declare     export var LINKIFY_ALL: number;
    declare     export var LINKIFY_EMAIL_ADDRESSES: number;
    declare     export var LINKIFY_MAP_ADDRESSES: number;
    declare     export var LINKIFY_PHONE_NUMBERS: number;
    declare     export var LINKIFY_WEB_URLS: number;
    declare     export var OVER_SCROLL_ALWAYS: number;
    declare     export var OVER_SCROLL_IF_CONTENT_SCROLLS: number;
    declare     export var OVER_SCROLL_NEVER: number;
    declare     export var PIXEL_FORMAT_A_8: number;
    declare     export var PIXEL_FORMAT_LA_88: number;
    declare     export var PIXEL_FORMAT_L_8: number;
    declare     export var PIXEL_FORMAT_OPAQUE: number;
    declare     export var PIXEL_FORMAT_RGBA_4444: number;
    declare     export var PIXEL_FORMAT_RGBA_5551: number;
    declare     export var PIXEL_FORMAT_RGBA_8888: number;
    declare     export var PIXEL_FORMAT_RGBX_8888: number;
    declare     export var PIXEL_FORMAT_RGB_332: number;
    declare     export var PIXEL_FORMAT_RGB_565: number;
    declare     export var PIXEL_FORMAT_RGB_888: number;
    declare     export var PIXEL_FORMAT_TRANSLUCENT: number;
    declare     export var PIXEL_FORMAT_TRANSPARENT: number;
    declare     export var PIXEL_FORMAT_UNKNOWN: number;
    declare     export var PROGRESS_INDICATOR_DETERMINANT: number;
    declare     export var PROGRESS_INDICATOR_DIALOG: number;
    declare     export var PROGRESS_INDICATOR_INDETERMINANT: number;
    declare     export var PROGRESS_INDICATOR_STATUS_BAR: number;
    declare     export var SOFT_INPUT_ADJUST_PAN: number;
    declare     export var SOFT_INPUT_ADJUST_RESIZE: number;
    declare     export var SOFT_INPUT_ADJUST_UNSPECIFIED: number;
    declare     export var SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;
    declare     export var SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;
    declare     export var SOFT_INPUT_STATE_HIDDEN: number;
    declare     export var SOFT_INPUT_STATE_UNSPECIFIED: number;
    declare     export var SOFT_INPUT_STATE_VISIBLE: number;
    declare     export var SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;
    declare     export var SOFT_KEYBOARD_HIDE_ON_FOCUS: number;
    declare     export var SOFT_KEYBOARD_SHOW_ON_FOCUS: number;
    declare     export var SWITCH_STYLE_CHECKBOX: number;
    declare     export var SWITCH_STYLE_TOGGLEBUTTON: number;
    declare     export var WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;
    declare     export var WEBVIEW_LOAD_CACHE_ONLY: number;
    declare     export var WEBVIEW_LOAD_DEFAULT: number;
    declare     export var WEBVIEW_LOAD_NO_CACHE: number;
    declare     export var WEBVIEW_PLUGINS_OFF: number;
    declare     export var WEBVIEW_PLUGINS_ON: number;
    declare     export var WEBVIEW_PLUGINS_ON_DEMAND: number;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function createProgressIndicator(
        parameters?: Dictionary<undefined.ProgressIndicator>): undefined.ProgressIndicator
    declare     export function createSearchView(parameters?: Dictionary<undefined.SearchView>): undefined.SearchView
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function hideSoftKeyboard(): void
    declare     export function openPreferences(): void
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type SearchView = {
        hintText: string,
        iconified: boolean,
        iconifiedByDefault: boolean,
        submitEnabled: boolean,
        value: string,
        blur(): void,
        focus(): void,
        getHintText(): string,
        getIconified(): boolean,
        getIconifiedByDefault(): boolean,
        getSubmitEnabled(): boolean,
        getValue(): string,
        setHintText(hintText: string): void,
        setIconified(iconified: boolean): void,
        setIconifiedByDefault(iconifiedByDefault: boolean): void,
        setSubmitEnabled(submitEnabled: boolean): void,
        setValue(value: string): void
    }
    declare     export type ProgressIndicator = {
        cancelable: boolean,
        location: number,
        max: number,
        message: string,
        messageid: string,
        min: number,
        type: number,
        getCancelable(): boolean,
        getLocation(): number,
        getMax(): number,
        getMessage(): string,
        getMessageid(): string,
        getMin(): number,
        getType(): number,
        hide(): void,
        setCancelable(cancelable: boolean): void,
        setLocation(location: number): void,
        setMax(max: number): void,
        setMessage(message: string): void,
        setMessageid(messageid: string): void,
        setMin(min: number): void,
        setType(type: number): void,
        show(): void
    }
    declare     export var manualMode: boolean;
    declare     export function addLocationProvider(provider: undefined.LocationProvider): void
    declare     export function addLocationRule(rule: undefined.LocationRule): void
    declare     export function createLocationProvider(
        parameters?: Dictionary<undefined.LocationProvider>): undefined.LocationProvider
    declare     export function createLocationRule(parameters?: Dictionary<undefined.LocationRule>): undefined.LocationRule
    declare     export function getManualMode(): boolean
    declare     export function removeLocationProvider(provider: undefined.LocationProvider): void
    declare     export function removeLocationRule(rule: undefined.LocationRule): void
    declare     export function setManualMode(manualMode: boolean): void
    declare     export type LocationProvider = {
        minUpdateDistance: number,
        minUpdateTime: number,
        name: string,
        getMinUpdateDistance(): number,
        getMinUpdateTime(): number,
        getName(): string,
        setMinUpdateDistance(minUpdateDistance: number): void,
        setMinUpdateTime(minUpdateTime: number): void,
        setName(name: string): void
    }
    declare     export type LocationRule = {
        accuracy: number,
        maxAge: number,
        minAge: number,
        name: string,
        getAccuracy(): number,
        getMaxAge(): number,
        getMinAge(): number,
        getName(): string,
        setAccuracy(accuracy: number): void,
        setMaxAge(maxAge: number): void,
        setMinAge(minAge: number): void,
        setName(name: string): void
    }
    declare     export var R: undefined.R;
    declare     export var appVersionCode: number;
    declare     export var appVersionName: string;
    declare     export var launchIntent: undefined.Intent;
    declare     export function getAppVersionCode(): number
    declare     export function getAppVersionName(): string
    declare     export function getLaunchIntent(): undefined.Intent
    declare     export interface R {}
    declare     export var ACTION_AIRPLANE_MODE_CHANGED: string;
    declare     export var ACTION_ALL_APPS: string;
    declare     export var ACTION_ANSWER: string;
    declare     export var ACTION_ATTACH_DATA: string;
    declare     export var ACTION_BATTERY_CHANGED: string;
    declare     export var ACTION_BATTERY_LOW: string;
    declare     export var ACTION_BATTERY_OKAY: string;
    declare     export var ACTION_BOOT_COMPLETED: string;
    declare     export var ACTION_BUG_REPORT: string;
    declare     export var ACTION_CALL: string;
    declare     export var ACTION_CALL_BUTTON: string;
    declare     export var ACTION_CAMERA_BUTTON: string;
    declare     export var ACTION_CHOOSER: string;
    declare     export var ACTION_CLOSE_SYSTEM_DIALOGS: string;
    declare     export var ACTION_CONFIGURATION_CHANGED: string;
    declare     export var ACTION_CREATE_SHORTCUT: string;
    declare     export var ACTION_DATE_CHANGED: string;
    declare     export var ACTION_DEFAULT: string;
    declare     export var ACTION_DELETE: string;
    declare     export var ACTION_DEVICE_STORAGE_LOW: string;
    declare     export var ACTION_DIAL: string;
    declare     export var ACTION_EDIT: string;
    declare     export var ACTION_GET_CONTENT: string;
    declare     export var ACTION_GTALK_SERVICE_CONNECTED: string;
    declare     export var ACTION_GTALK_SERVICE_DISCONNECTED: string;
    declare     export var ACTION_HEADSET_PLUG: string;
    declare     export var ACTION_INPUT_METHOD_CHANGED: string;
    declare     export var ACTION_INSERT: string;
    declare     export var ACTION_INSERT_OR_EDIT: string;
    declare     export var ACTION_MAIN: string;
    declare     export var ACTION_MANAGE_PACKAGE_STORAGE: string;
    declare     export var ACTION_MEDIA_BAD_REMOVAL: string;
    declare     export var ACTION_MEDIA_BUTTON: string;
    declare     export var ACTION_MEDIA_CHECKING: string;
    declare     export var ACTION_MEDIA_EJECT: string;
    declare     export var ACTION_MEDIA_MOUNTED: string;
    declare     export var ACTION_MEDIA_NOFS: string;
    declare     export var ACTION_MEDIA_REMOVED: string;
    declare     export var ACTION_MEDIA_SCANNER_FINISHED: string;
    declare     export var ACTION_MEDIA_SCANNER_SCAN_FILE: string;
    declare     export var ACTION_MEDIA_SCANNER_STARTED: string;
    declare     export var ACTION_MEDIA_SHARED: string;
    declare     export var ACTION_MEDIA_UNMOUNTABLE: string;
    declare     export var ACTION_MEDIA_UNMOUNTED: string;
    declare     export var ACTION_NEW_OUTGOING_CALL: string;
    declare     export var ACTION_PACKAGE_ADDED: string;
    declare     export var ACTION_PACKAGE_CHANGED: string;
    declare     export var ACTION_PACKAGE_DATA_CLEARED: string;
    declare     export var ACTION_PACKAGE_INSTALL: string;
    declare     export var ACTION_PACKAGE_REMOVED: string;
    declare     export var ACTION_PACKAGE_REPLACED: string;
    declare     export var ACTION_PACKAGE_RESTARTED: string;
    declare     export var ACTION_PICK: string;
    declare     export var ACTION_PICK_ACTIVITY: string;
    declare     export var ACTION_POWER_CONNECTED: string;
    declare     export var ACTION_POWER_DISCONNECTED: string;
    declare     export var ACTION_POWER_USAGE_SUMMARY: string;
    declare     export var ACTION_PROVIDER_CHANGED: string;
    declare     export var ACTION_REBOOT: string;
    declare     export var ACTION_RUN: string;
    declare     export var ACTION_SCREEN_OFF: string;
    declare     export var ACTION_SCREEN_ON: string;
    declare     export var ACTION_SEARCH: string;
    declare     export var ACTION_SEARCH_LONG_PRESS: string;
    declare     export var ACTION_SEND: string;
    declare     export var ACTION_SENDTO: string;
    declare     export var ACTION_SEND_MULTIPLE: string;
    declare     export var ACTION_SET_WALLPAPER: string;
    declare     export var ACTION_SHUTDOWN: string;
    declare     export var ACTION_SYNC: string;
    declare     export var ACTION_SYSTEM_TUTORIAL: string;
    declare     export var ACTION_TIME_CHANGED: string;
    declare     export var ACTION_TIME_TICK: string;
    declare     export var ACTION_UID_REMOVED: string;
    declare     export var ACTION_UMS_CONNECTED: string;
    declare     export var ACTION_UMS_DISCONNECTED: string;
    declare     export var ACTION_USER_PRESENT: string;
    declare     export var ACTION_VIEW: string;
    declare     export var ACTION_VOICE_COMMAND: string;
    declare     export var ACTION_WALLPAPER_CHANGED: string;
    declare     export var ACTION_WEB_SEARCH: string;
    declare     export var CATEGORY_ALTERNATIVE: string;
    declare     export var CATEGORY_BROWSABLE: string;
    declare     export var CATEGORY_DEFAULT: string;
    declare     export var CATEGORY_DEVELOPMENT_PREFERENCE: string;
    declare     export var CATEGORY_EMBED: string;
    declare     export var CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;
    declare     export var CATEGORY_HOME: string;
    declare     export var CATEGORY_INFO: string;
    declare     export var CATEGORY_LAUNCHER: string;
    declare     export var CATEGORY_MONKEY: string;
    declare     export var CATEGORY_OPENABLE: string;
    declare     export var CATEGORY_PREFERENCE: string;
    declare     export var CATEGORY_SAMPLE_CODE: string;
    declare     export var CATEGORY_SELECTED_ALTERNATIVE: string;
    declare     export var CATEGORY_TAB: string;
    declare     export var CATEGORY_TEST: string;
    declare     export var CATEGORY_UNIT_TEST: string;
    declare     export var DEFAULT_ALL: number;
    declare     export var DEFAULT_LIGHTS: number;
    declare     export var DEFAULT_SOUND: number;
    declare     export var DEFAULT_VIBRATE: number;
    declare     export var EXTRA_ALARM_COUNT: string;
    declare     export var EXTRA_BCC: string;
    declare     export var EXTRA_CC: string;
    declare     export var EXTRA_DATA_REMOVED: string;
    declare     export var EXTRA_DONT_KILL_APP: string;
    declare     export var EXTRA_EMAIL: string;
    declare     export var EXTRA_INTENT: string;
    declare     export var EXTRA_KEY_EVENT: string;
    declare     export var EXTRA_PHONE_NUMBER: string;
    declare     export var EXTRA_REPLACING: string;
    declare     export var EXTRA_SHORTCUT_ICON: string;
    declare     export var EXTRA_SHORTCUT_ICON_RESOURCE: string;
    declare     export var EXTRA_SHORTCUT_INTENT: string;
    declare     export var EXTRA_SHORTCUT_NAME: string;
    declare     export var EXTRA_STREAM: string;
    declare     export var EXTRA_SUBJECT: string;
    declare     export var EXTRA_TEMPLATE: string;
    declare     export var EXTRA_TEXT: string;
    declare     export var EXTRA_TITLE: string;
    declare     export var EXTRA_UID: string;
    declare     export var FILL_IN_ACTION: number;
    declare     export var FILL_IN_CATEGORIES: number;
    declare     export var FILL_IN_COMPONENT: number;
    declare     export var FILL_IN_DATA: number;
    declare     export var FILL_IN_PACKAGE: number;
    declare     export var FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;
    declare     export var FLAG_ACTIVITY_CLEAR_TOP: number;
    declare     export var FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;
    declare     export var FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;
    declare     export var FLAG_ACTIVITY_FORWARD_RESULT: number;
    declare     export var FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;
    declare     export var FLAG_ACTIVITY_MULTIPLE_TASK: number;
    declare     export var FLAG_ACTIVITY_NEW_TASK: number;
    declare     export var FLAG_ACTIVITY_NO_ANIMATION: number;
    declare     export var FLAG_ACTIVITY_NO_HISTORY: number;
    declare     export var FLAG_ACTIVITY_NO_USER_ACTION: number;
    declare     export var FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;
    declare     export var FLAG_ACTIVITY_REORDER_TO_FRONT: number;
    declare     export var FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;
    declare     export var FLAG_ACTIVITY_SINGLE_TOP: number;
    declare     export var FLAG_AUTO_CANCEL: number;
    declare     export var FLAG_CANCEL_CURRENT: number;
    declare     export var FLAG_DEBUG_LOG_RESOLUTION: number;
    declare     export var FLAG_FROM_BACKGROUND: number;
    declare     export var FLAG_GRANT_READ_URI_PERMISSION: number;
    declare     export var FLAG_GRANT_WRITE_URI_PERMISSION: number;
    declare     export var FLAG_INSISTENT: number;
    declare     export var FLAG_NO_CLEAR: number;
    declare     export var FLAG_NO_CREATE: number;
    declare     export var FLAG_ONE_SHOT: number;
    declare     export var FLAG_ONGOING_EVENT: number;
    declare     export var FLAG_ONLY_ALERT_ONCE: number;
    declare     export var FLAG_RECEIVER_REGISTERED_ONLY: number;
    declare     export var FLAG_SHOW_LIGHTS: number;
    declare     export var FLAG_UPDATE_CURRENT: number;
    declare     export var NAVIGATION_MODE_STANDARD: number;
    declare     export var NAVIGATION_MODE_TABS: number;
    declare     export var PENDING_INTENT_FOR_ACTIVITY: number;
    declare     export var PENDING_INTENT_FOR_BROADCAST: number;
    declare     export var PENDING_INTENT_FOR_SERVICE: number;
    declare     export var PENDING_INTENT_MAX_VALUE: number;
    declare     export var RESULT_CANCELED: number;
    declare     export var RESULT_FIRST_USER: number;
    declare     export var RESULT_OK: number;
    declare     export var SCREEN_ORIENTATION_BEHIND: number;
    declare     export var SCREEN_ORIENTATION_LANDSCAPE: number;
    declare     export var SCREEN_ORIENTATION_NOSENSOR: number;
    declare     export var SCREEN_ORIENTATION_PORTRAIT: number;
    declare     export var SCREEN_ORIENTATION_SENSOR: number;
    declare     export var SCREEN_ORIENTATION_UNSPECIFIED: number;
    declare     export var SCREEN_ORIENTATION_USER: number;
    declare     export var SHOW_AS_ACTION_ALWAYS: number;
    declare     export var SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
    declare     export var SHOW_AS_ACTION_IF_ROOM: number;
    declare     export var SHOW_AS_ACTION_NEVER: number;
    declare     export var SHOW_AS_ACTION_WITH_TEXT: number;
    declare     export var START_NOT_STICKY: number;
    declare     export var START_REDELIVER_INTENT: number;
    declare     export var STREAM_ALARM: number;
    declare     export var STREAM_DEFAULT: number;
    declare     export var STREAM_MUSIC: number;
    declare     export var STREAM_NOTIFICATION: number;
    declare     export var STREAM_RING: number;
    declare     export var STREAM_SYSTEM: number;
    declare     export var STREAM_VOICE_CALL: number;
    declare     export var URI_INTENT_SCHEME: number;
    declare     export var currentActivity: undefined.Activity;
    declare     export var currentService: undefined.Service;
    declare     export function createBroadcastIntent(options: BroadcastIntentOptions): undefined.Intent
    declare     export function createBroadcastReceiver(
        parameters?: Dictionary<undefined.BroadcastReceiver>): undefined.BroadcastReceiver
    declare     export function createIntent(parameters?: Dictionary<undefined.Intent>): undefined.Intent
    declare     export function createIntentChooser(intent: undefined.Intent, title: string): undefined.Intent
    declare     export function createNotification(parameters?: Dictionary<undefined.Notification>): undefined.Notification
    declare     export function createPendingIntent(parameters?: Dictionary<undefined.PendingIntent>): undefined.PendingIntent
    declare     export function createRemoteViews(parameters?: Dictionary<undefined.RemoteViews>): undefined.RemoteViews
    declare     export function createService(intent: undefined.Intent): undefined.Service
    declare     export function createServiceIntent(options: ServiceIntentOptions): undefined.Intent
    declare     export function getCurrentActivity(): undefined.Activity
    declare     export function getCurrentService(): undefined.Service
    declare     export function isServiceRunning(intent: undefined.Intent): boolean
    declare     export function registerBroadcastReceiver(
        broadcastReceiver: undefined.BroadcastReceiver,
        actions: Array<Global$String>): void
    declare     export function startService(intent: undefined.Intent): void
    declare     export function stopService(intent: undefined.Intent): void
    declare     export function unregisterBroadcastReceiver(broadcastReceiver: undefined.BroadcastReceiver): void
    declare     export type Intent = {
        action: string,
        className: string,
        data: string,
        flags: number,
        packageName: string,
        type: string,
        url: string,
        addCategory(name: string): void,
        addFlags(flags: number): void,
        getAction(): string,
        getBlobExtra(name: string): Ti$Blob,
        getBooleanExtra(name: string): boolean,
        getClassName(): string,
        getData(): string,
        getDoubleExtra(name: string): number,
        getFlags(): number,
        getIntExtra(name: string): number,
        getLongExtra(name: string): number,
        getPackageName(): string,
        getStringExtra(name: string): string,
        getType(): string,
        getUrl(): string,
        hasExtra(name: string): boolean,
        putExtra(name: string, value: any): void,
        putExtraUri(name: string, value: string): void,
        setFlags(flags: number): void
    }
    declare     export type Notification = {
        duration: number,
        horizontalMargin: number,
        message: string,
        verticalMargin: number,
        xOffset: number,
        yOffset: number,
        getDuration(): number,
        getHorizontalMargin(): number,
        getMessage(): string,
        getVerticalMargin(): number,
        getXOffset(): number,
        getYOffset(): number,
        setDuration(duration: number): void,
        setHorizontalMargin(horizontalMargin: number): void,
        setMessage(message: string): void,
        setVerticalMargin(verticalMargin: number): void,
        setXOffset(xOffset: number): void,
        setYOffset(yOffset: number): void
    }
    declare module 'Calendar' {
        declare         export var METHOD_ALERT: number;
        declare         export var METHOD_DEFAULT: number;
        declare         export var METHOD_EMAIL: number;
        declare         export var METHOD_SMS: number;
        declare         export var STATE_DISMISSED: number;
        declare         export var STATE_FIRED: number;
        declare         export var STATE_SCHEDULED: number;
        declare         export var STATUS_CANCELED: number;
        declare         export var STATUS_CONFIRMED: number;
        declare         export var STATUS_TENTATIVE: number;
        declare         export var VISIBILITY_CONFIDENTIAL: number;
        declare         export var VISIBILITY_DEFAULT: number;
        declare         export var VISIBILITY_PRIVATE: number;
        declare         export var VISIBILITY_PUBLIC: number;
        declare         export var allAlerts: Array<undefined.Alert>;
        declare         export var allCalendars: Array<undefined.Calendar>;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export var selectableCalendars: Array<undefined.Calendar>;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getAllAlerts(): Array<undefined.Alert >
            declare         export function getAllCalendars(): Array<undefined.Calendar >
            declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function getCalendarById(id: number): undefined.Calendar
        declare         export function getSelectableCalendars(): Array<undefined.Calendar >
            declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type Event = {
            alerts: Array<undefined.Alert>,
            allDay: boolean,
            begin: Date,
            description: string,
            end: Date,
            extendedProperties: Dictionary<Object>,
            hasAlarm: boolean,
            hasExtendedProperties: boolean,
            id: string,
            location: string,
            reminders: Array<undefined.Reminder>,
            status: number,
            title: string,
            visibility: number,
            createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
            createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
            getAlerts(): Array<undefined.Alert>,
            getAllDay(): boolean,
            getBegin(): Date,
            getDescription(): string,
            getEnd(): Date,
            getExtendedProperties(): Dictionary<Object>,
            getExtendedProperty(name: string): string,
            getHasAlarm(): boolean,
            getHasExtendedProperties(): boolean,
            getId(): string,
            getLocation(): string,
            getReminders(): Array<undefined.Reminder>,
            getStatus(): number,
            getTitle(): string,
            getVisibility(): number,
            setExtendedProperty(name: string, value: string): void
        }
        declare         export type Reminder = {
            id: string,
            method: number,
            minutes: number,
            getId(): string,
            getMethod(): number,
            getMinutes(): number
        }
        declare         export type Calendar = {
            hidden: boolean,
            id: string,
            name: string,
            selected: boolean,
            createEvent(properties: Dictionary<undefined.Event>): undefined.Event,
            getEventById(id: number): undefined.Event,
            getEventsBetweenDates(date1: Date, date2: Date): Array<undefined.Event>,
            getEventsInDate(year: number, month: number, day: number): Array<undefined.Event>,
            getEventsInMonth(year: number, month: number): Array<undefined.Event>,
            getEventsInYear(year: number): Array<undefined.Event>,
            getHidden(): boolean,
            getId(): string,
            getName(): string,
            getSelected(): boolean
        }
        declare         export type Alert = {
            alarmTime: Date,
            begin: Date,
            end: Date,
            eventId: number,
            id: string,
            minutes: number,
            state: number,
            getAlarmTime(): Date,
            getBegin(): Date,
            getEnd(): Date,
            getEventId(): number,
            getId(): string,
            getMinutes(): number,
            getState(): number
        }
        declare         export var AUTHORIZATION_AUTHORIZED: number;
        declare         export var AUTHORIZATION_DENIED: number;
        declare         export var AUTHORIZATION_RESTRICTED: number;
        declare         export var AUTHORIZATION_UNKNOWN: number;
        declare         export var AVAILABILITY_BUSY: number;
        declare         export var AVAILABILITY_FREE: number;
        declare         export var AVAILABILITY_NOTSUPPORTED: number;
        declare         export var AVAILABILITY_TENTATIVE: number;
        declare         export var AVAILABILITY_UNAVAILABLE: number;
        declare         export var RECURRENCEFREQUENCY_DAILY: number;
        declare         export var RECURRENCEFREQUENCY_MONTHLY: number;
        declare         export var RECURRENCEFREQUENCY_WEEKLY: number;
        declare         export var RECURRENCEFREQUENCY_YEARLY: number;
        declare         export var SPAN_FUTUREEVENTS: number;
        declare         export var SPAN_THISEVENT: number;
        declare         export var STATUS_NONE: number;
        declare         export var allEditableCalendars: Array<undefined.Calendar>;
        declare         export var defaultCalendar: undefined.Calendar;
        declare         export var eventsAuthorization: number;
        declare         export function getAllEditableCalendars(): Array<undefined.Calendar >
            declare         export function getDefaultCalendar(): undefined.Calendar
        declare         export function getEventsAuthorization(): number
        declare         export function requestEventsAuthorization(callback: (...args: any[]) => any): void
        declare         export type RecurrenceRule = {
            calendarID: string,
            daysOfTheMonth: Array<Number>,
            daysOfTheWeek: daysOfTheWeekDictionary,
            daysOfTheYear: Array<Number>,
            end: recurrenceEndDictionary,
            frequency: number,
            interval: number,
            monthsOfTheYear: Array<Number>,
            setPositions: Array<Number>,
            weeksOfTheYear: Array<Number>,
            getCalendarID(): string,
            getDaysOfTheMonth(): Array<Number>,
            getDaysOfTheWeek(): daysOfTheWeekDictionary,
            getDaysOfTheYear(): Array<Number>,
            getEnd(): recurrenceEndDictionary,
            getFrequency(): number,
            getInterval(): number,
            getMonthsOfTheYear(): Array<Number>,
            getSetPositions(): Array<Number>,
            getWeeksOfTheYear(): Array<Number >
        }
    }

    declare     export type MenuItem = {
        actionView: undefined.View,
        actionViewExpanded: boolean,
        checkable: boolean,
        checked: boolean,
        enabled: boolean,
        groupId: number,
        icon: any,
        itemId: number,
        order: number,
        showAsAction: number,
        title: string,
        titleCondensed: string,
        visible: boolean,
        collapseActionView(): void,
        expandActionView(): void,
        getActionView(): undefined.View,
        getGroupId(): number,
        getItemId(): number,
        getOrder(): number,
        getTitle(): string,
        getTitleCondensed(): string,
        isActionViewExpanded(): boolean,
        isCheckable(): boolean,
        isChecked(): boolean,
        isEnabled(): boolean,
        isVisible(): boolean,
        setActionView(actionView: undefined.View): void,
        setCheckable(checkable: boolean): void,
        setChecked(enabled: boolean): void,
        setEnabled(enabled: boolean): void,
        setIcon(icon: number): void,
        setIcon(icon: string): void,
        setShowAsAction(showAsAction: number): void,
        setTitle(title: string): void,
        setTitleCondensed(titleCondensed: string): void,
        setVisible(visible: boolean): void
    }
    declare     export interface NotificationManager {
        DEFAULT_ALL: number,
            DEFAULT_LIGHTS: number,
            DEFAULT_SOUND: number,
            DEFAULT_VIBRATE: number,
            FLAG_AUTO_CANCEL: number,
            FLAG_INSISTENT: number,
            FLAG_NO_CLEAR: number,
            FLAG_ONGOING_EVENT: number,
            FLAG_ONLY_ALERT_ONCE: number,
            FLAG_SHOW_LIGHTS: number,
            STREAM_DEFAULT: number,
            cancel(id: number): void,
            cancelAll(): void,
            notify(id: number, notification: undefined.Notification): void
    }
    declare     export type ActionBar = {
        backgroundImage: string,
        displayHomeAsUp: boolean,
        homeButtonEnabled: boolean,
        icon: string,
        logo: string,
        navigationMode: number,
        onHomeIconItemSelected: (...args: any[]) => any,
        subtitle: string,
        title: string,
        getNavigationMode(): number,
        getSubtitle(): string,
        getTitle(): string,
        hide(): void,
        setBackgroundImage(backgroundImage: string): void,
        setDisplayHomeAsUp(displayHomeAsUp: boolean): void,
        setDisplayShowHomeEnabled(show: boolean): void,
        setDisplayShowTitleEnabled(show: boolean): void,
        setHomeButtonEnabled(homeButtonEnabled: boolean): void,
        setIcon(icon: string): void,
        setLogo(logo: string): void,
        setNavigationMode(navigationMode: number): void,
        setOnHomeIconItemSelected(onHomeIconItemSelected: (...args: any[]) => any): void,
        setSubtitle(subtitle: string): void,
        setTitle(title: string): void,
        show(): void
    }
    declare     export type BroadcastReceiver = {
        onReceived: (...args: any[]) => any,
        url: string,
        getOnReceived(): (...args: any[]) => any,
        getUrl(): string,
        setOnReceived(onReceived: (...args: any[]) => any): void,
        setUrl(url: string): void
    }
    declare     export type Menu = {
        items: Array<undefined.MenuItem>,
        add(options: any): undefined.MenuItem,
        clear(): void,
        close(): void,
        findItem(item: number): undefined.MenuItem,
        findItem(item: undefined.MenuItem): undefined.MenuItem,
        getItem(index: number): undefined.MenuItem,
        getItems(): Array<undefined.MenuItem>,
        hasVisibleItems(): boolean,
        removeGroup(groupId: number): void,
        removeItem(itemId: number): void,
        setGroupEnabled(groupId: number, enabled: boolean): void,
        setGroupVisible(groupId: number, visible: boolean): void,
        size(): number
    }
    declare     export type Activity = {
        actionBar: undefined.ActionBar,
        intent: undefined.Intent,
        onCreate: (...args: any[]) => any,
        onCreateOptionsMenu: (...args: any[]) => any,
        onDestroy: (...args: any[]) => any,
        onPause: (...args: any[]) => any,
        onPrepareOptionsMenu: (...args: any[]) => any,
        onRestart: (...args: any[]) => any,
        onResume: (...args: any[]) => any,
        onStart: (...args: any[]) => any,
        onStop: (...args: any[]) => any,
        requestedOrientation: number,
        finish(): void,
        getActionBar(): undefined.ActionBar,
        getIntent(): undefined.Intent,
        getOnCreate(): (...args: any[]) => any,
        getOnCreateOptionsMenu(): (...args: any[]) => any,
        getOnDestroy(): (...args: any[]) => any,
        getOnPause(): (...args: any[]) => any,
        getOnPrepareOptionsMenu(): (...args: any[]) => any,
        getOnRestart(): (...args: any[]) => any,
        getOnResume(): (...args: any[]) => any,
        getOnStart(): (...args: any[]) => any,
        getOnStop(): (...args: any[]) => any,
        getString(resourceId: number, format: any): string,
        invalidateOptionsMenu(): void,
        openOptionsMenu(): void,
        sendBroadcast(intent: undefined.Intent): void,
        sendBroadcastWithPermission(intent: undefined.Intent, receiverPermission?: string): void,
        setOnCreate(onCreate: (...args: any[]) => any): void,
        setOnCreateOptionsMenu(onCreateOptionsMenu: (...args: any[]) => any): void,
        setOnDestroy(onDestroy: (...args: any[]) => any): void,
        setOnPause(onPause: (...args: any[]) => any): void,
        setOnPrepareOptionsMenu(onPrepareOptionsMenu: (...args: any[]) => any): void,
        setOnRestart(onRestart: (...args: any[]) => any): void,
        setOnResume(onResume: (...args: any[]) => any): void,
        setOnStart(onStart: (...args: any[]) => any): void,
        setOnStop(onStop: (...args: any[]) => any): void,
        setRequestedOrientation(orientation: number): void,
        setResult(resultCode: number, intent?: undefined.Intent): void,
        startActivity(intent: undefined.Intent): void,
        startActivityForResult(intent: undefined.Intent, callback: (...args: any[]) => any): void
    }
    declare     export type Service = {
        intent: undefined.Intent,
        serviceInstanceId: number,
        getIntent(): undefined.Intent,
        getServiceInstanceId(): number,
        start(): void,
        stop(): void
    }
    declare     export type RemoteViews = {
        layoutId: number,
        packageName: string,
        getLayoutId(): number,
        getPackageName(): string,
        setBoolean(viewId: number, methodName: string, value: boolean): void,
        setChronometer(viewId: number, base: Date, format: string, started: boolean): void,
        setDouble(viewId: number, methodName: string, value: number): void,
        setImageViewResource(viewId: number, srcId: number): void,
        setImageViewUri(viewId: number, uri: string): void,
        setInt(viewId: number, methodName: string, value: number): void,
        setOnClickPendingIntent(viewId: number, pendingIntent: undefined.PendingIntent): void,
        setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void,
        setString(viewId: number, methodName: string, value: string): void,
        setTextColor(viewId: number, color: number): void,
        setTextViewText(viewId: number, text: string): void,
        setUri(viewId: number, methodName: string, value: string): void,
        setViewVisibility(viewId: number, visibility: number): void
    }
    declare     export type PendingIntent = {
        flags: number,
        intent: undefined.Intent,
        updateCurrentIntent: boolean,
        getFlags(): number,
        getIntent(): undefined.Intent,
        getUpdateCurrentIntent(): boolean
    }
}


declare module 'Database' {
    declare     export var FIELD_TYPE_DOUBLE: number;
    declare     export var FIELD_TYPE_FLOAT: number;
    declare     export var FIELD_TYPE_INT: number;
    declare     export var FIELD_TYPE_STRING: number;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function install(path: string, dbName: string): undefined.DB
    declare     export function open(dbName: string): undefined.DB
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type ResultSet = {
        rowCount: number,
        validRow: boolean,
        close(): void,
        field(index: number, type?: number): any,
        fieldByName(name: string, type?: number): any,
        fieldCount(): number,
        fieldName(index: number): string,
        getFieldCount(): number,
        getFieldName(index: number): string,
        getRowCount(): number,
        getValidRow(): boolean,
        isValidRow(): boolean,
        next(): boolean
    }
    declare     export type DB = {
        file: undefined.File,
        lastInsertRowId: number,
        name: string,
        rowsAffected: number,
        close(): void,
        execute(sql: string, vararg?: string): undefined.ResultSet,
        execute(vararg?: Array<Global$String>): undefined.ResultSet,
        execute(vararg?: any): undefined.ResultSet,
        execute(sql: string, vararg?: Array<Object>): undefined.ResultSet,
        getFile(): undefined.File,
        getLastInsertRowId(): number,
        getName(): string,
        getRowsAffected(): number,
        remove(): void,
        setLastInsertRowId(lastInsertRowId: number): void,
        setName(name: string): void,
        setRowsAffected(rowsAffected: number): void
    }
}


declare module 'Contacts' {
    declare     export var AUTHORIZATION_AUTHORIZED: number;
    declare     export var AUTHORIZATION_DENIED: number;
    declare     export var AUTHORIZATION_RESTRICTED: number;
    declare     export var AUTHORIZATION_UNKNOWN: number;
    declare     export var CONTACTS_KIND_ORGANIZATION: number;
    declare     export var CONTACTS_KIND_PERSON: number;
    declare     export var CONTACTS_SORT_FIRST_NAME: number;
    declare     export var CONTACTS_SORT_LAST_NAME: number;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var contactsAuthorization: number;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function createGroup(parameters?: Dictionary<undefined.Group>): undefined.Group
    declare     export function createPerson(parameters?: Dictionary<undefined.Person>): undefined.Person
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getAllGroups(): Array<undefined.Group >
        declare     export function getAllPeople(limit: number): Array<undefined.Person >
        declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getContactsAuthorization(): number
    declare     export function getGroupByID(id: number): undefined.Group
    declare     export function getPeopleWithName(name: string): Array<undefined.Person >
        declare     export function getPersonByID(id: number): undefined.Person
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function removeGroup(group: undefined.Group): void
    declare     export function removePerson(person: undefined.Person): void
    declare     export function requestAuthorization(callback: (...args: any[]) => any): void
    declare     export function revert(): void
    declare     export function save(contacts: Array<undefined.Person>): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function showContacts(params: showContactsParams): void
    declare module 'Tizen' {
        declare         export var apiName: string;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getAllPeople(limit: number): Array<undefined.Person >
            declare         export function getApiName(): string
        declare         export function getPeopleWithName(name: string): Array<undefined.Person >
            declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export interface Group {
            members(group: undefined.Group, callback: (...args: any[]) => any): void,
                sortedMembers(
                    sortBy: number,
                    group: undefined.Group,
                    callback: (...args: any[]) => any): void
        }
    }

    declare     export interface Group {
        members(group: undefined.Group, callback: (...args: any[]) => any): void,
            sortedMembers(
                sortBy: number,
                group: undefined.Group,
                callback: (...args: any[]) => any): void
    }
    declare     export type Person = {
        address: Dictionary<Object>,
        birthday: string,
        created: string,
        date: Dictionary<Object>,
        department: string,
        email: Dictionary<Object>,
        firstName: string,
        firstPhonetic: string,
        fullName: string,
        id: number,
        image: Ti$Blob,
        instantMessage: Dictionary<Object>,
        jobTitle: string,
        kind: number,
        lastName: string,
        lastPhonetic: string,
        middleName: string,
        middlePhonetic: string,
        modified: string,
        nickname: string,
        note: string,
        organization: string,
        phone: Dictionary<Object>,
        prefix: string,
        recordId: number,
        relatedNames: Dictionary<Object>,
        suffix: string,
        url: Dictionary<Object>,
        getAddress(): Dictionary<Object>,
        getBirthday(): string,
        getCreated(): string,
        getDate(): Dictionary<Object>,
        getDepartment(): string,
        getEmail(): Dictionary<Object>,
        getFirstName(): string,
        getFirstPhonetic(): string,
        getFullName(): string,
        getId(): number,
        getImage(): Ti$Blob,
        getInstantMessage(): Dictionary<Object>,
        getJobTitle(): string,
        getKind(): number,
        getLastName(): string,
        getLastPhonetic(): string,
        getMiddleName(): string,
        getMiddlePhonetic(): string,
        getModified(): string,
        getNickname(): string,
        getNote(): string,
        getOrganization(): string,
        getPhone(): Dictionary<Object>,
        getPrefix(): string,
        getRecordId(): number,
        getRelatedNames(): Dictionary<Object>,
        getSuffix(): string,
        getUrl(): Dictionary<Object>,
        setAddress(address: Dictionary<Object>): void,
        setBirthday(birthday: string): void,
        setDate(date: Dictionary<Object>): void,
        setDepartment(department: string): void,
        setEmail(email: Dictionary<Object>): void,
        setFirstName(firstName: string): void,
        setFirstPhonetic(firstPhonetic: string): void,
        setImage(image: Ti$Blob): void,
        setInstantMessage(instantMessage: Dictionary<Object>): void,
        setJobTitle(jobTitle: string): void,
        setKind(kind: number): void,
        setLastName(lastName: string): void,
        setLastPhonetic(lastPhonetic: string): void,
        setMiddleName(middleName: string): void,
        setMiddlePhonetic(middlePhonetic: string): void,
        setNickname(nickname: string): void,
        setNote(note: string): void,
        setOrganization(organization: string): void,
        setPhone(phone: Dictionary<Object>): void,
        setRecordId(recordId: number): void,
        setRelatedNames(relatedNames: Dictionary<Object>): void,
        setUrl(url: Dictionary<Object>): void
    }
}


declare export interface Ti$CloudPush {
    SERVICE_DISABLED: number,
        SERVICE_INVALID: number,
        SERVICE_MISSING: number,
        SERVICE_VERSION_UPDATE_REQUIRED: number,
        SUCCESS: number,
        enabled: boolean,
        focusAppOnPush: boolean,
        showAppOnTrayClick: boolean,
        showTrayNotification: boolean,
        showTrayNotificationsWhenFocused: boolean,
        singleCallback: boolean,
        clearStatus(): void,
        getEnabled(): boolean,
        getFocusAppOnPush(): boolean,
        getShowAppOnTrayClick(): boolean,
        getShowTrayNotification(): boolean,
        getShowTrayNotificationsWhenFocused(): boolean,
        getSingleCallback(): boolean,
        isGooglePlayServicesAvailable(): number,
        retrieveDeviceToken(config: CloudPushNotificationConfig): void,
        setEnabled(enabled: boolean): void,
        setFocusAppOnPush(focusAppOnPush: boolean): void,
        setShowAppOnTrayClick(showAppOnTrayClick: boolean): void,
        setShowTrayNotification(showTrayNotification: boolean): void,
        setShowTrayNotificationsWhenFocused(showTrayNotificationsWhenFocused: boolean): void,
        setSingleCallback(singleCallback: boolean): void
}

declare module 'Media' {
    declare     export var AUDIO_FILEFORMAT_3GP2: number;
    declare     export var AUDIO_FILEFORMAT_3GPP: number;
    declare     export var AUDIO_FILEFORMAT_AIFF: number;
    declare     export var AUDIO_FILEFORMAT_AMR: number;
    declare     export var AUDIO_FILEFORMAT_CAF: number;
    declare     export var AUDIO_FILEFORMAT_MP3: number;
    declare     export var AUDIO_FILEFORMAT_MP4: number;
    declare     export var AUDIO_FILEFORMAT_MP4A: number;
    declare     export var AUDIO_FILEFORMAT_WAVE: number;
    declare     export var AUDIO_FORMAT_AAC: number;
    declare     export var AUDIO_FORMAT_ALAW: number;
    declare     export var AUDIO_FORMAT_APPLE_LOSSLESS: number;
    declare     export var AUDIO_FORMAT_ILBC: number;
    declare     export var AUDIO_FORMAT_IMA4: number;
    declare     export var AUDIO_FORMAT_LINEAR_PCM: number;
    declare     export var AUDIO_FORMAT_ULAW: number;
    declare     export var AUDIO_HEADPHONES: number;
    declare     export var AUDIO_HEADPHONES_AND_MIC: number;
    declare     export var AUDIO_HEADSET_INOUT: number;
    declare     export var AUDIO_LINEOUT: number;
    declare     export var AUDIO_MICROPHONE: number;
    declare     export var AUDIO_MUTED: number;
    declare     export var AUDIO_RECEIVER_AND_MIC: number;
    declare     export var AUDIO_SESSION_CATEGORY_AMBIENT: string;
    declare     export var AUDIO_SESSION_CATEGORY_PLAYBACK: string;
    declare     export var AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD: string;
    declare     export var AUDIO_SESSION_CATEGORY_RECORD: string;
    declare     export var AUDIO_SESSION_CATEGORY_SOLO_AMBIENT: string;
    declare     export var AUDIO_SESSION_MODE_AMBIENT: number;
    declare     export var AUDIO_SESSION_MODE_PLAYBACK: number;
    declare     export var AUDIO_SESSION_MODE_PLAY_AND_RECORD: number;
    declare     export var AUDIO_SESSION_MODE_RECORD: number;
    declare     export var AUDIO_SESSION_MODE_SOLO_AMBIENT: number;
    declare     export var AUDIO_SESSION_OVERRIDE_ROUTE_NONE: number;
    declare     export var AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER: number;
    declare     export var AUDIO_SESSION_PORT_AIRPLAY: string;
    declare     export var AUDIO_SESSION_PORT_BLUETOOTHA2DP: string;
    declare     export var AUDIO_SESSION_PORT_BLUETOOTHHFP: string;
    declare     export var AUDIO_SESSION_PORT_BLUETOOTHLE: string;
    declare     export var AUDIO_SESSION_PORT_BUILTINMIC: string;
    declare     export var AUDIO_SESSION_PORT_BUILTINRECEIVER: string;
    declare     export var AUDIO_SESSION_PORT_BUILTINSPEAKER: string;
    declare     export var AUDIO_SESSION_PORT_CARAUDIO: string;
    declare     export var AUDIO_SESSION_PORT_HDMI: string;
    declare     export var AUDIO_SESSION_PORT_HEADPHONES: string;
    declare     export var AUDIO_SESSION_PORT_HEADSETMIC: string;
    declare     export var AUDIO_SESSION_PORT_LINEIN: string;
    declare     export var AUDIO_SESSION_PORT_LINEOUT: string;
    declare     export var AUDIO_SESSION_PORT_USBAUDIO: string;
    declare     export var AUDIO_SPEAKER: number;
    declare     export var AUDIO_UNAVAILABLE: number;
    declare     export var AUDIO_UNKNOWN: number;
    declare     export var CAMERA_FLASH_AUTO: number;
    declare     export var CAMERA_FLASH_OFF: number;
    declare     export var CAMERA_FLASH_ON: number;
    declare     export var CAMERA_FRONT: number;
    declare     export var CAMERA_REAR: number;
    declare     export var DEVICE_BUSY: number;
    declare     export var MEDIA_TYPE_PHOTO: string;
    declare     export var MEDIA_TYPE_VIDEO: string;
    declare     export var MUSIC_MEDIA_GROUP_ALBUM: number;
    declare     export var MUSIC_MEDIA_GROUP_ALBUM_ARTIST: number;
    declare     export var MUSIC_MEDIA_GROUP_ARTIST: number;
    declare     export var MUSIC_MEDIA_GROUP_COMPOSER: number;
    declare     export var MUSIC_MEDIA_GROUP_GENRE: number;
    declare     export var MUSIC_MEDIA_GROUP_PLAYLIST: number;
    declare     export var MUSIC_MEDIA_GROUP_PODCAST_TITLE: number;
    declare     export var MUSIC_MEDIA_GROUP_TITLE: number;
    declare     export var MUSIC_MEDIA_TYPE_ALL: number;
    declare     export var MUSIC_MEDIA_TYPE_ANY_AUDIO: number;
    declare     export var MUSIC_MEDIA_TYPE_AUDIOBOOK: number;
    declare     export var MUSIC_MEDIA_TYPE_MUSIC: number;
    declare     export var MUSIC_MEDIA_TYPE_PODCAST: number;
    declare     export var MUSIC_PLAYER_REPEAT_ALL: number;
    declare     export var MUSIC_PLAYER_REPEAT_DEFAULT: number;
    declare     export var MUSIC_PLAYER_REPEAT_NONE: number;
    declare     export var MUSIC_PLAYER_REPEAT_ONE: number;
    declare     export var MUSIC_PLAYER_SHUFFLE_ALBUMS: number;
    declare     export var MUSIC_PLAYER_SHUFFLE_DEFAULT: number;
    declare     export var MUSIC_PLAYER_SHUFFLE_NONE: number;
    declare     export var MUSIC_PLAYER_SHUFFLE_SONGS: number;
    declare     export var MUSIC_PLAYER_STATE_INTERRUPTED: number;
    declare     export var MUSIC_PLAYER_STATE_PAUSED: number;
    declare     export var MUSIC_PLAYER_STATE_PLAYING: number;
    declare     export var MUSIC_PLAYER_STATE_SEEK_BACKWARD: number;
    declare     export var MUSIC_PLAYER_STATE_SEEK_FORWARD: number;
    declare     export var MUSIC_PLAYER_STATE_STOPPED: number;
    declare     export var NO_CAMERA: number;
    declare     export var NO_VIDEO: number;
    declare     export var QUALITY_HIGH: number;
    declare     export var QUALITY_LOW: number;
    declare     export var QUALITY_MEDIUM: number;
    declare     export var UNKNOWN_ERROR: number;
    declare     export var VIDEO_CONTROL_DEFAULT: number;
    declare     export var VIDEO_CONTROL_EMBEDDED: number;
    declare     export var VIDEO_CONTROL_FULLSCREEN: number;
    declare     export var VIDEO_CONTROL_HIDDEN: number;
    declare     export var VIDEO_CONTROL_NONE: number;
    declare     export var VIDEO_CONTROL_VOLUME_ONLY: number;
    declare     export var VIDEO_FINISH_REASON_PLAYBACK_ENDED: number;
    declare     export var VIDEO_FINISH_REASON_PLAYBACK_ERROR: number;
    declare     export var VIDEO_FINISH_REASON_USER_EXITED: number;
    declare     export var VIDEO_LOAD_STATE_PLAYABLE: number;
    declare     export var VIDEO_LOAD_STATE_PLAYTHROUGH_OK: number;
    declare     export var VIDEO_LOAD_STATE_STALLED: number;
    declare     export var VIDEO_LOAD_STATE_UNKNOWN: number;
    declare     export var VIDEO_MEDIA_TYPE_AUDIO: number;
    declare     export var VIDEO_MEDIA_TYPE_NONE: number;
    declare     export var VIDEO_MEDIA_TYPE_VIDEO: number;
    declare     export var VIDEO_PLAYBACK_STATE_INTERRUPTED: number;
    declare     export var VIDEO_PLAYBACK_STATE_PAUSED: number;
    declare     export var VIDEO_PLAYBACK_STATE_PLAYING: number;
    declare     export var VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: number;
    declare     export var VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: number;
    declare     export var VIDEO_PLAYBACK_STATE_STOPPED: number;
    declare     export var VIDEO_REPEAT_MODE_NONE: number;
    declare     export var VIDEO_REPEAT_MODE_ONE: number;
    declare     export var VIDEO_SCALING_ASPECT_FILL: number;
    declare     export var VIDEO_SCALING_ASPECT_FIT: number;
    declare     export var VIDEO_SCALING_MODE_FILL: number;
    declare     export var VIDEO_SCALING_NONE: number;
    declare     export var VIDEO_SOURCE_TYPE_FILE: number;
    declare     export var VIDEO_SOURCE_TYPE_STREAMING: number;
    declare     export var VIDEO_SOURCE_TYPE_UNKNOWN: number;
    declare     export var VIDEO_TIME_OPTION_EXACT: number;
    declare     export var VIDEO_TIME_OPTION_NEAREST_KEYFRAME: number;
    declare     export var apiName: string;
    declare     export var appMusicPlayer: undefined.MusicPlayer;
    declare     export var audioLineType: number;
    declare     export var audioPlaying: boolean;
    declare     export var audioSessionCategory: number;
    declare     export var audioSessionMode: number;
    declare     export var availableCameraMediaTypes: Array<Object>;
    declare     export var availableCameras: Array<Number>;
    declare     export var availablePhotoGalleryMediaTypes: Array<Object>;
    declare     export var availablePhotoMediaTypes: Array<Object>;
    declare     export var averageMicrophonePower: number;
    declare     export var bubbleParent: boolean;
    declare     export var cameraFlashMode: number;
    declare     export var canRecord: boolean;
    declare     export var currentRoute: RouteDescription;
    declare     export var isCameraSupported: boolean;
    declare     export var peakMicrophonePower: number;
    declare     export var systemMusicPlayer: undefined.MusicPlayer;
    declare     export var volume: number;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function beep(): void
    declare     export function createAudioPlayer(parameters?: Dictionary<undefined.AudioPlayer>): undefined.AudioPlayer
    declare     export function createAudioRecorder(parameters?: Dictionary<undefined.AudioRecorder>): undefined.AudioRecorder
    declare     export function createItem(parameters?: Dictionary<undefined.Item>): undefined.Item
    declare     export function createMusicPlayer(parameters?: Dictionary<undefined.MusicPlayer>): undefined.MusicPlayer
    declare     export function createSound(parameters?: Dictionary<undefined.Sound>): undefined.Sound
    declare     export function createVideoPlayer(parameters?: Dictionary<undefined.VideoPlayer>): undefined.VideoPlayer
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getAppMusicPlayer(): undefined.MusicPlayer
    declare     export function getAudioLineType(): number
    declare     export function getAudioPlaying(): boolean
    declare     export function getAudioSessionCategory(): number
    declare     export function getAudioSessionMode(): number
    declare     export function getAvailableCameraMediaTypes(): Array<Object >
        declare     export function getAvailableCameras(): Array<Number >
        declare     export function getAvailablePhotoGalleryMediaTypes(): Array<Object >
        declare     export function getAvailablePhotoMediaTypes(): Array<Object >
        declare     export function getAverageMicrophonePower(): number
    declare     export function getBubbleParent(): boolean
    declare     export function getCameraFlashMode(): number
    declare     export function getCanRecord(): boolean
    declare     export function getCurrentRoute(): RouteDescription
    declare     export function getIsCameraSupported(): boolean
    declare     export function getPeakMicrophonePower(): number
    declare     export function getSystemMusicPlayer(): undefined.MusicPlayer
    declare     export function getVolume(): number
    declare     export function hideCamera(): void
    declare     export function hideMusicLibrary(): void
    declare     export function isMediaTypeSupported(source: string, type: string): boolean
    declare     export function openMusicLibrary(options: MusicLibraryOptionsType): void
    declare     export function openPhotoGallery(options: PhotoGalleryOptionsType): void
    declare     export function previewImage(options: Dictionary<PreviewImageOptions>): void
    declare     export function queryMusicLibrary(query: MediaQueryType): Array<undefined.Item >
        declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function requestAuthorization(callback: (...args: any[]) => any): void
    declare     export function saveToPhotoGallery(media: Ti$Blob, callbacks: any): void
    declare     export function setAudioSessionCategory(audioSessionCategory: number): void
    declare     export function setAudioSessionMode(audioSessionMode: number): void
    declare     export function setAvailableCameraMediaTypes(availableCameraMediaTypes: Array<Object>): void
    declare     export function setAvailablePhotoGalleryMediaTypes(availablePhotoGalleryMediaTypes: Array<Object>): void
    declare     export function setAvailablePhotoMediaTypes(availablePhotoMediaTypes: Array<Object>): void
    declare     export function setAverageMicrophonePower(averageMicrophonePower: number): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setCameraFlashMode(cameraFlashMode: number): void
    declare     export function setOverrideAudioRoute(route: number): void
    declare     export function showCamera(options: CameraOptionsType): void
    declare     export function startMicrophoneMonitor(): void
    declare     export function stopMicrophoneMonitor(): void
    declare     export function switchCamera(camera: number): void
    declare     export function takePicture(): void
    declare     export function takeScreenshot(callback: (...args: any[]) => any): void
    declare     export function vibrate(pattern?: Array<Number>): void
    declare     export type Sound = {
        STATE_BUFFERING: number,
        STATE_INITIALIZED: number,
        STATE_PAUSED: number,
        STATE_PLAYING: number,
        STATE_STARTING: number,
        STATE_STOPPED: number,
        STATE_STOPPING: number,
        STATE_WAITING_FOR_DATA: number,
        STATE_WAITING_FOR_QUEUE: number,
        allowBackground: boolean,
        duration: number,
        looping: boolean,
        paused: boolean,
        playing: boolean,
        time: number,
        url: string,
        volume: number,
        getDuration(): number,
        getTime(): number,
        getUrl(): string,
        getVolume(): number,
        isLooping(): boolean,
        isPaused(): boolean,
        isPlaying(): boolean,
        pause(): void,
        play(): void,
        release(): void,
        reset(): void,
        setLooping(looping: boolean): void,
        setPaused(paused: boolean): void,
        setTime(time: number): void,
        setUrl(url: string): void,
        setVolume(volume: number): void,
        stop(): void
    }
    declare     export type VideoPlayer = {
        allowsAirPlay: boolean,
        autoplay: boolean,
        contentURL: string,
        currentPlaybackTime: number,
        duration: number,
        endPlaybackTime: number,
        fullscreen: boolean,
        initialPlaybackTime: number,
        loadState: number,
        media: any,
        mediaControlStyle: number,
        mediaTypes: number,
        movieControlMode: number,
        naturalSize: MovieSize,
        playableDuration: number,
        playbackState: number,
        playing: boolean,
        repeatMode: number,
        scalingMode: number,
        sourceType: number,
        url: any,
        useApplicationAudioSession: boolean,
        volume: number,
        cancelAllThumbnailImageRequests(): void,
        getAllowsAirPlay(): boolean,
        getAutoplay(): boolean,
        getContentURL(): string,
        getCurrentPlaybackTime(): number,
        getDuration(): number,
        getEndPlaybackTime(): number,
        getFullscreen(): boolean,
        getInitialPlaybackTime(): number,
        getLoadState(): number,
        getMediaControlStyle(): number,
        getMediaTypes(): number,
        getMovieControlMode(): number,
        getNaturalSize(): MovieSize,
        getPlayableDuration(): number,
        getPlaybackState(): number,
        getPlaying(): boolean,
        getRepeatMode(): number,
        getScalingMode(): number,
        getSourceType(): number,
        getUrl(): any,
        getUseApplicationAudioSession(): boolean,
        getVolume(): number,
        pause(): void,
        play(): void,
        release(): void,
        requestThumbnailImagesAtTimes(times: Array<Number>, option: number, callback: (...args: any[]) => any): void,
        setAllowsAirPlay(allowsAirPlay: boolean): void,
        setAutoplay(autoplay: boolean): void,
        setBackgroundView(view: undefined.View): void,
        setContentURL(contentURL: string): void,
        setCurrentPlaybackTime(currentPlaybackTime: number): void,
        setDuration(duration: number): void,
        setEndPlaybackTime(endPlaybackTime: number): void,
        setFullscreen(fullscreen: boolean): void,
        setInitialPlaybackTime(initialPlaybackTime: number): void,
        setMedia(media: Ti$Blob): void,
        setMedia(media: undefined.File): void,
        setMedia(media: string): void,
        setMediaControlStyle(mediaControlStyle: number): void,
        setMediaTypes(mediaTypes: number): void,
        setMovieControlMode(movieControlMode: number): void,
        setNaturalSize(naturalSize: MovieSize): void,
        setRepeatMode(repeatMode: number): void,
        setScalingMode(scalingMode: number): void,
        setSourceType(sourceType: number): void,
        setUrl(url: string): void,
        setUrl(url: Array<Global$String>): void,
        setUseApplicationAudioSession(useApplicationAudioSession: boolean): void,
        setVolume(volume: number): void,
        stop(): void,
        thumbnailImageAtTime(time: number, option: number): Ti$Blob
    }
    declare     export type AudioRecorder = {
        compression: number,
        format: number,
        paused: boolean,
        recording: boolean,
        stopped: boolean,
        getCompression(): number,
        getFormat(): number,
        getPaused(): boolean,
        getRecording(): boolean,
        getStopped(): boolean,
        pause(): void,
        resume(): void,
        setCompression(compression: number): void,
        setFormat(format: number): void,
        start(): void,
        stop(): undefined.File
    }
    declare     export type Item = {
        albumArtist: string,
        albumTitle: string,
        albumTrackCount: number,
        albumTrackNumber: number,
        artist: string,
        artwork: Ti$Blob,
        composer: string,
        discCount: number,
        discNumber: number,
        genre: string,
        isCompilation: boolean,
        lyrics: string,
        mediaType: number,
        playCount: number,
        playbackDuration: number,
        podcastTitle: string,
        rating: number,
        skipCount: number,
        title: string,
        getAlbumArtist(): string,
        getAlbumTitle(): string,
        getAlbumTrackCount(): number,
        getAlbumTrackNumber(): number,
        getArtist(): string,
        getArtwork(): Ti$Blob,
        getComposer(): string,
        getDiscCount(): number,
        getDiscNumber(): number,
        getGenre(): string,
        getIsCompilation(): boolean,
        getLyrics(): string,
        getMediaType(): number,
        getPlayCount(): number,
        getPlaybackDuration(): number,
        getPodcastTitle(): string,
        getRating(): number,
        getSkipCount(): number,
        getTitle(): string
    }
    declare     export type MusicPlayer = {
        currentPlaybackTime: number,
        nowPlaying: undefined.Item,
        playbackState: number,
        repeatMode: number,
        shuffleMode: number,
        volume: number,
        getCurrentPlaybackTime(): number,
        getNowPlaying(): undefined.Item,
        getPlaybackState(): number,
        getRepeatMode(): number,
        getShuffleMode(): number,
        getVolume(): number,
        pause(): void,
        play(): void,
        seekBackward(): void,
        seekForward(): void,
        setCurrentPlaybackTime(currentPlaybackTime: number): void,
        setQueue(queue: undefined.Item): void,
        setQueue(queue: Array<undefined.Item>): void,
        setQueue(queue: PlayerQueue): void,
        setRepeatMode(repeatMode: number): void,
        setShuffleMode(shuffleMode: number): void,
        setVolume(volume: number): void,
        skipToBeginning(): void,
        skipToNext(): void,
        skipToPrevious(): void,
        stop(): void,
        stopSeeking(): void
    }
    declare     export type AudioPlayer = {
        STATE_BUFFERING: number,
        STATE_INITIALIZED: number,
        STATE_PAUSED: number,
        STATE_PLAYING: number,
        STATE_STARTING: number,
        STATE_STOPPED: number,
        STATE_STOPPING: number,
        STATE_WAITING_FOR_DATA: number,
        STATE_WAITING_FOR_QUEUE: number,
        allowBackground: boolean,
        autoplay: boolean,
        bitRate: number,
        bufferSize: number,
        duration: number,
        idle: boolean,
        paused: boolean,
        playing: boolean,
        progress: number,
        state: number,
        time: number,
        url: string,
        volume: number,
        waiting: boolean,
        getAllowBackground(): boolean,
        getAutoplay(): boolean,
        getBitRate(): number,
        getBufferSize(): number,
        getDuration(): number,
        getIdle(): boolean,
        getPaused(): boolean,
        getPlaying(): boolean,
        getProgress(): number,
        getState(): number,
        getTime(): number,
        getUrl(): string,
        getVolume(): number,
        getWaiting(): boolean,
        isPaused(): boolean,
        isPlaying(): boolean,
        pause(): void,
        play(): void,
        release(): void,
        setBitRate(bitRate: number): void,
        setBufferSize(bufferSize: number): void,
        setPaused(paused: boolean): void,
        setTime(time: number): void,
        setUrl(url: string): void,
        setVolume(volume: number): void,
        start(): void,
        stateDescription(state: number): string,
        stop(): void
    }
    declare     export interface Android {
        scanMediaFiles(
                paths: Array<Global$String>,
                mimeTypes: Array<Global$String>,
                callback: (...args: any[]) => any): void,
            setSystemWallpaper(image: Ti$Blob, scale: boolean): void
    }
}


declare module 'Platform' {
    declare     export var BATTERY_STATE_CHARGING: number;
    declare     export var BATTERY_STATE_FULL: number;
    declare     export var BATTERY_STATE_UNKNOWN: number;
    declare     export var BATTERY_STATE_UNPLUGGED: number;
    declare     export var address: string;
    declare     export var apiName: string;
    declare     export var architecture: string;
    declare     export var availableMemory: number;
    declare     export var batteryLevel: number;
    declare     export var batteryMonitoring: boolean;
    declare     export var batteryState: number;
    declare     export var bubbleParent: boolean;
    declare     export var displayCaps: undefined.DisplayCaps;
    declare     export var id: string;
    declare     export var locale: string;
    declare     export var macaddress: string;
    declare     export var manufacturer: string;
    declare     export var model: string;
    declare     export var name: string;
    declare     export var netmask: string;
    declare     export var osname: string;
    declare     export var ostype: string;
    declare     export var processorCount: number;
    declare     export var runtime: string;
    declare     export var username: string;
    declare     export var version: string;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function canOpenURL(url: string): boolean
    declare     export function createUUID(): string
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getAddress(): string
    declare     export function getApiName(): string
    declare     export function getArchitecture(): string
    declare     export function getAvailableMemory(): number
    declare     export function getBatteryLevel(): number
    declare     export function getBatteryMonitoring(): boolean
    declare     export function getBatteryState(): number
    declare     export function getBubbleParent(): boolean
    declare     export function getDisplayCaps(): undefined.DisplayCaps
    declare     export function getId(): string
    declare     export function getLocale(): string
    declare     export function getMacaddress(): string
    declare     export function getManufacturer(): string
    declare     export function getModel(): string
    declare     export function getName(): string
    declare     export function getNetmask(): string
    declare     export function getOsname(): string
    declare     export function getOstype(): string
    declare     export function getProcessorCount(): number
    declare     export function getRuntime(): string
    declare     export function getUsername(): string
    declare     export function getVersion(): string
    declare     export function is24HourTimeFormat(): boolean
    declare     export function openURL(url: string): boolean
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBatteryMonitoring(batteryMonitoring: boolean): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type DisplayCaps = {
        density: string,
        dpi: number,
        logicalDensityFactor: number,
        platformHeight: number,
        platformWidth: number,
        xdpi: number,
        ydpi: number,
        getDensity(): string,
        getDpi(): number,
        getLogicalDensityFactor(): number,
        getPlatformHeight(): number,
        getPlatformWidth(): number,
        getXdpi(): number,
        getYdpi(): number
    }
    declare     export interface Android {
        scanMediaFiles(
                paths: Array<Global$String>,
                mimeTypes: Array<Global$String>,
                callback: (...args: any[]) => any): void,
            setSystemWallpaper(image: Ti$Blob, scale: boolean): void
    }
}


declare export type Ti$Buffer = {
    byteOrder: number,
    length: number,
    type: string,
    value: any,
    append(sourceBuffer: Ti$Buffer, sourceOffset?: number, sourceLength?: number): number,
    clear(): void,
    clone(offset?: number, length?: number): Ti$Buffer,
    copy(
        sourceBuffer: Ti$Buffer,
        offset: number,
        sourceOffset?: number,
        sourceLength?: number): number,
    fill(fillByte: number, offset?: number, length?: number): void,
    getByteOrder(): number,
    getLength(): number,
    getType(): string,
    getValue(): any,
    insert(
        sourceBuffer: Ti$Buffer,
        offset: number,
        sourceOffset?: number,
        sourceLength?: number): number,
    release(): void,
    setLength(length: number): void,
    toBlob(): Ti$Blob,
    toString(): string
}

declare module 'Calendar' {
    declare     export var METHOD_ALERT: number;
    declare     export var METHOD_DEFAULT: number;
    declare     export var METHOD_EMAIL: number;
    declare     export var METHOD_SMS: number;
    declare     export var STATE_DISMISSED: number;
    declare     export var STATE_FIRED: number;
    declare     export var STATE_SCHEDULED: number;
    declare     export var STATUS_CANCELED: number;
    declare     export var STATUS_CONFIRMED: number;
    declare     export var STATUS_TENTATIVE: number;
    declare     export var VISIBILITY_CONFIDENTIAL: number;
    declare     export var VISIBILITY_DEFAULT: number;
    declare     export var VISIBILITY_PRIVATE: number;
    declare     export var VISIBILITY_PUBLIC: number;
    declare     export var allAlerts: Array<undefined.Alert>;
    declare     export var allCalendars: Array<undefined.Calendar>;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var selectableCalendars: Array<undefined.Calendar>;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getAllAlerts(): Array<undefined.Alert >
        declare     export function getAllCalendars(): Array<undefined.Calendar >
        declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getCalendarById(id: number): undefined.Calendar
    declare     export function getSelectableCalendars(): Array<undefined.Calendar >
        declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type Event = {
        alerts: Array<undefined.Alert>,
        allDay: boolean,
        begin: Date,
        description: string,
        end: Date,
        extendedProperties: Dictionary<Object>,
        hasAlarm: boolean,
        hasExtendedProperties: boolean,
        id: string,
        location: string,
        reminders: Array<undefined.Reminder>,
        status: number,
        title: string,
        visibility: number,
        createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
        createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
        getAlerts(): Array<undefined.Alert>,
        getAllDay(): boolean,
        getBegin(): Date,
        getDescription(): string,
        getEnd(): Date,
        getExtendedProperties(): Dictionary<Object>,
        getExtendedProperty(name: string): string,
        getHasAlarm(): boolean,
        getHasExtendedProperties(): boolean,
        getId(): string,
        getLocation(): string,
        getReminders(): Array<undefined.Reminder>,
        getStatus(): number,
        getTitle(): string,
        getVisibility(): number,
        setExtendedProperty(name: string, value: string): void
    }
    declare     export type Reminder = {
        id: string,
        method: number,
        minutes: number,
        getId(): string,
        getMethod(): number,
        getMinutes(): number
    }
    declare     export type Calendar = {
        hidden: boolean,
        id: string,
        name: string,
        selected: boolean,
        createEvent(properties: Dictionary<undefined.Event>): undefined.Event,
        getEventById(id: number): undefined.Event,
        getEventsBetweenDates(date1: Date, date2: Date): Array<undefined.Event>,
        getEventsInDate(year: number, month: number, day: number): Array<undefined.Event>,
        getEventsInMonth(year: number, month: number): Array<undefined.Event>,
        getEventsInYear(year: number): Array<undefined.Event>,
        getHidden(): boolean,
        getId(): string,
        getName(): string,
        getSelected(): boolean
    }
    declare     export type Alert = {
        alarmTime: Date,
        begin: Date,
        end: Date,
        eventId: number,
        id: string,
        minutes: number,
        state: number,
        getAlarmTime(): Date,
        getBegin(): Date,
        getEnd(): Date,
        getEventId(): number,
        getId(): string,
        getMinutes(): number,
        getState(): number
    }
    declare     export var AUTHORIZATION_AUTHORIZED: number;
    declare     export var AUTHORIZATION_DENIED: number;
    declare     export var AUTHORIZATION_RESTRICTED: number;
    declare     export var AUTHORIZATION_UNKNOWN: number;
    declare     export var AVAILABILITY_BUSY: number;
    declare     export var AVAILABILITY_FREE: number;
    declare     export var AVAILABILITY_NOTSUPPORTED: number;
    declare     export var AVAILABILITY_TENTATIVE: number;
    declare     export var AVAILABILITY_UNAVAILABLE: number;
    declare     export var RECURRENCEFREQUENCY_DAILY: number;
    declare     export var RECURRENCEFREQUENCY_MONTHLY: number;
    declare     export var RECURRENCEFREQUENCY_WEEKLY: number;
    declare     export var RECURRENCEFREQUENCY_YEARLY: number;
    declare     export var SPAN_FUTUREEVENTS: number;
    declare     export var SPAN_THISEVENT: number;
    declare     export var STATUS_NONE: number;
    declare     export var allEditableCalendars: Array<undefined.Calendar>;
    declare     export var defaultCalendar: undefined.Calendar;
    declare     export var eventsAuthorization: number;
    declare     export function getAllEditableCalendars(): Array<undefined.Calendar >
        declare     export function getDefaultCalendar(): undefined.Calendar
    declare     export function getEventsAuthorization(): number
    declare     export function requestEventsAuthorization(callback: (...args: any[]) => any): void
    declare     export type RecurrenceRule = {
        calendarID: string,
        daysOfTheMonth: Array<Number>,
        daysOfTheWeek: daysOfTheWeekDictionary,
        daysOfTheYear: Array<Number>,
        end: recurrenceEndDictionary,
        frequency: number,
        interval: number,
        monthsOfTheYear: Array<Number>,
        setPositions: Array<Number>,
        weeksOfTheYear: Array<Number>,
        getCalendarID(): string,
        getDaysOfTheMonth(): Array<Number>,
        getDaysOfTheWeek(): daysOfTheWeekDictionary,
        getDaysOfTheYear(): Array<Number>,
        getEnd(): recurrenceEndDictionary,
        getFrequency(): number,
        getInterval(): number,
        getMonthsOfTheYear(): Array<Number>,
        getSetPositions(): Array<Number>,
        getWeeksOfTheYear(): Array<Number >
    }
}


declare module 'Filesystem' {
    declare     export var MODE_APPEND: number;
    declare     export var MODE_READ: number;
    declare     export var MODE_WRITE: number;
    declare     export var apiName: string;
    declare     export var applicationCacheDirectory: string;
    declare     export var applicationDataDirectory: string;
    declare     export var applicationDirectory: string;
    declare     export var applicationSupportDirectory: string;
    declare     export var bubbleParent: boolean;
    declare     export var externalStorageDirectory: string;
    declare     export var lineEnding: string;
    declare     export var resRawDirectory: string;
    declare     export var resourcesDirectory: string;
    declare     export var separator: string;
    declare     export var tempDirectory: string;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function createTempDirectory(): undefined.File
    declare     export function createTempFile(): undefined.File
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getApiName(): string
    declare     export function getApplicationCacheDirectory(): string
    declare     export function getApplicationDataDirectory(): string
    declare     export function getApplicationDirectory(): string
    declare     export function getApplicationSupportDirectory(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getExternalStorageDirectory(): string
    declare     export function getFile(path: string, ...extraPaths: string[]): undefined.File
    declare     export function getLineEnding(): string
    declare     export function getResRawDirectory(): string
    declare     export function getResourcesDirectory(): string
    declare     export function getSeparator(): string
    declare     export function getTempDirectory(): string
    declare     export function isExternalStoragePresent(): boolean
    declare     export function openStream(mode: number, path: string, ...extraPaths: string[]): undefined.FileStream
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export type File = {
        executable: boolean,
        hidden: boolean,
        name: string,
        nativePath: string,
        parent: undefined.File,
        readonly: boolean,
        remoteBackup: boolean,
        size: number,
        symbolicLink: boolean,
        writable: boolean,
        writeable: boolean,
        append(data: string): boolean,
        append(data: Ti$Blob): boolean,
        append(data: undefined.File): boolean,
        copy(destinationPath: string): boolean,
        createDirectory(): boolean,
        createFile(): boolean,
        createTimestamp(): number,
        deleteDirectory(recursive?: boolean): boolean,
        deleteFile(): boolean,
        exists(): boolean,
        extension(): string,
        getDirectoryListing(): Array<Global$String>,
        getExecutable(): boolean,
        getHidden(): boolean,
        getName(): string,
        getNativePath(): string,
        getParent(): any,
        getReadonly(): boolean,
        getRemoteBackup(): boolean,
        getSize(): number,
        getSymbolicLink(): boolean,
        getWritable(): boolean,
        getWriteable(): boolean,
        isDirectory(): boolean,
        isFile(): boolean,
        modificationTimestamp(): number,
        move(newpath: string): boolean,
        open(mode: number): undefined.FileStream,
        read(): Ti$Blob,
        rename(newname: string): boolean,
        resolve(): string,
        setHidden(hidden: boolean): void,
        setRemoteBackup(remoteBackup: boolean): void,
        spaceAvailable(): number,
        write(data: string, append?: boolean): boolean,
        write(data: undefined.File, append?: boolean): boolean,
        write(data: Ti$Blob, append?: boolean): boolean
    }
}


declare module 'Network' {
    declare     export var INADDR_ANY: string;
    declare     export var NETWORK_LAN: number;
    declare     export var NETWORK_MOBILE: number;
    declare     export var NETWORK_NONE: number;
    declare     export var NETWORK_UNKNOWN: number;
    declare     export var NETWORK_WIFI: number;
    declare     export var NOTIFICATION_TYPE_ALERT: number;
    declare     export var NOTIFICATION_TYPE_BADGE: number;
    declare     export var NOTIFICATION_TYPE_NEWSSTAND: number;
    declare     export var NOTIFICATION_TYPE_SOUND: number;
    declare     export var PROGRESS_UNKNOWN: number;
    declare     export var READ_MODE: number;
    declare     export var READ_WRITE_MODE: number;
    declare     export var SOCKET_CLOSED: number;
    declare     export var SOCKET_CONNECTED: number;
    declare     export var SOCKET_ERROR: number;
    declare     export var SOCKET_INITIALIZED: number;
    declare     export var SOCKET_LISTENING: number;
    declare     export var TLS_VERSION_1_0: number;
    declare     export var TLS_VERSION_1_1: number;
    declare     export var TLS_VERSION_1_2: number;
    declare     export var WRITE_MODE: number;
    declare     export var allHTTPCookies: Array<undefined.Cookie>;
    declare     export var apiName: string;
    declare     export var bubbleParent: boolean;
    declare     export var httpURLFormatter: (...args: any[]) => any;
    declare     export var networkType: number;
    declare     export var networkTypeName: string;
    declare     export var online: boolean;
    declare     export var remoteDeviceUUID: string;
    declare     export var remoteNotificationTypes: Array<Number>;
    declare     export var remoteNotificationsEnabled: boolean;
    declare     export function addConnectivityListener(callback: (...args: any[]) => any): void
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function addHTTPCookie(cookie: undefined.Cookie): void
    declare     export function addSystemCookie(cookie: undefined.Cookie): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function createBonjourBrowser(
        serviceType: string,
        domain: string,
        parameters?: Dictionary<undefined.BonjourBrowser>): undefined.BonjourBrowser
    declare     export function createBonjourService(
        name: string,
        type: string,
        domain: string,
        parameters?: Dictionary<undefined.BonjourService>): undefined.BonjourService
    declare     export function createCookie(parameters?: Dictionary<undefined.Cookie>): undefined.Cookie
    declare     export function createHTTPClient(parameters?: Dictionary<undefined.HTTPClient>): undefined.HTTPClient
    declare     export function createTCPSocket(
        hostName: string,
        port: number,
        mode: number,
        parameters: Dictionary<undefined.TCPSocket>): undefined.TCPSocket
    declare     export function decodeURIComponent(value: string): string
    declare     export function encodeURIComponent(value: string): string
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getAllHTTPCookies(): Array<undefined.Cookie >
        declare     export function getApiName(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getHTTPCookies(domain: string, path: string, name: string): Array<undefined.Cookie >
        declare     export function getHTTPCookiesForDomain(domain: string): Array<undefined.Cookie >
        declare     export function getHttpURLFormatter(): (...args: any[]) => any
    declare     export function getNetworkType(): number
    declare     export function getNetworkTypeName(): string
    declare     export function getOnline(): boolean
    declare     export function getRemoteDeviceUUID(): string
    declare     export function getRemoteNotificationTypes(): Array<Number >
        declare     export function getRemoteNotificationsEnabled(): boolean
    declare     export function getSystemCookies(domain: string, path: string, name: string): Array<undefined.Cookie >
        declare     export function registerForPushNotifications(config: PushNotificationConfig): void
    declare     export function removeAllHTTPCookies(): void
    declare     export function removeAllSystemCookies(): void
    declare     export function removeConnectivityListener(callback: (...args: any[]) => any): void
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function removeHTTPCookie(domain: string, path: string, name: string): void
    declare     export function removeHTTPCookiesForDomain(domain: string): void
    declare     export function removeSystemCookie(domain: string, path: string, name: string): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setHttpURLFormatter(httpURLFormatter: (...args: any[]) => any): void
    declare     export function unregisterForPushNotifications(): void
    declare     export type TCPSocket = {
        hostName: string,
        isValid: boolean,
        mode: number,
        port: number,
        stripTerminator: boolean,
        close(): void,
        connect(): void,
        getHostName(): string,
        getIsValid(): boolean,
        getMode(): number,
        getPort(): number,
        getStripTerminator(): boolean,
        listen(): void,
        setHostName(hostName: string): void,
        setIsValid(isValid: boolean): void,
        setMode(mode: number): void,
        setPort(port: number): void,
        setStripTerminator(stripTerminator: boolean): void,
        write(data: any, sendTo: number): void,
        write(data: string, sendTo: number): void
    }
    declare module 'Socket' {
        declare         export var CLOSED: number;
        declare         export var CONNECTED: number;
        declare         export var ERROR: number;
        declare         export var INITIALIZED: number;
        declare         export var LISTENING: number;
        declare         export var apiName: string;
        declare         export var bubbleParent: boolean;
        declare         export function addEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function applyProperties(props: Dictionary<Object>): void
        declare         export function createTCP(params?: Dictionary<undefined.TCP>): undefined.TCP
        declare         export function createUDP(params?: Dictionary<undefined.UDP>): undefined.UDP
        declare         export function fireEvent(name: string, event: Dictionary<Object>): void
        declare         export function getApiName(): string
        declare         export function getBubbleParent(): boolean
        declare         export function removeEventListener(name: string, callback: (...args: any[]) => any): void
        declare         export function setBubbleParent(bubbleParent: boolean): void
        declare         export type UDP = {
            data: (...args: any[]) => any,
            error: (...args: any[]) => any,
            port: number,
            started: (...args: any[]) => any,
            getData(): (...args: any[]) => any,
            getError(): (...args: any[]) => any,
            getPort(): number,
            getStarted(): (...args: any[]) => any,
            sendBytes(port: number, host: string, data: Array<Number>): void,
            sendString(port: number, host: string, data: string): void,
            setData(data: (...args: any[]) => any): void,
            setError(error: (...args: any[]) => any): void,
            setPort(port: number): void,
            setStarted(started: (...args: any[]) => any): void,
            start(port: number): void,
            stop(): void
        }
        declare         export type TCP = {
            accepted: (...args: any[]) => any,
            connected: (...args: any[]) => any,
            error: (...args: any[]) => any,
            host: string,
            listenQueueSize: number,
            port: number,
            state: number,
            timeout: number,
            accept(options: AcceptDict): void,
            connect(): void,
            getAccepted(): (...args: any[]) => any,
            getConnected(): (...args: any[]) => any,
            getError(): (...args: any[]) => any,
            getHost(): string,
            getListenQueueSize(): number,
            getPort(): number,
            getState(): number,
            getTimeout(): number,
            listen(): void,
            setAccepted(accepted: (...args: any[]) => any): void,
            setConnected(connected: (...args: any[]) => any): void,
            setError(error: (...args: any[]) => any): void,
            setHost(host: string): void,
            setListenQueueSize(listenQueueSize: number): void,
            setPort(port: number): void,
            setTimeout(timeout: number): void
        }
    }

    declare     export type BonjourService = {
        domain: string,
        isLocal: boolean,
        name: string,
        socket: any,
        type: string,
        getDomain(): string,
        getIsLocal(): boolean,
        getName(): string,
        getSocket(): any,
        getType(): string,
        publish(socket: any): void,
        resolve(timeout: number): void,
        setDomain(domain: string): void,
        setIsLocal(isLocal: boolean): void,
        setName(name: string): void,
        setSocket(socket: any): void,
        setType(type: string): void,
        stop(): void
    }
    declare     export type HTTPClient = {
        DONE: number,
        HEADERS_RECEIVED: number,
        LOADING: number,
        OPENED: number,
        UNSENT: number,
        allResponseHeaders: string,
        autoEncodeUrl: boolean,
        autoRedirect: boolean,
        cache: boolean,
        connected: boolean,
        connectionType: string,
        domain: string,
        enableKeepAlive: boolean,
        file: string,
        location: string,
        ondatastream: (...args: any[]) => any,
        onerror: (...args: any[]) => any,
        onload: (...args: any[]) => any,
        onreadystatechange: (...args: any[]) => any,
        onsendstream: (...args: any[]) => any,
        password: string,
        readyState: number,
        responseData: Ti$Blob,
        responseText: string,
        responseXML: undefined.Document,
        securityManager: SecurityManagerProtocol,
        status: number,
        statusText: string,
        timeout: number,
        tlsVersion: number,
        username: string,
        validatesSecureCertificate: boolean,
        withCredentials: boolean,
        abort(): void,
        addAuthFactory(scheme: string, factory: any): void,
        addKeyManager(X509KeyManager: any): void,
        addTrustManager(X509TrustManager: any): void,
        clearCookies(host: string): void,
        getAllResponseHeaders(): string,
        getAutoEncodeUrl(): boolean,
        getAutoRedirect(): boolean,
        getCache(): boolean,
        getConnected(): boolean,
        getConnectionType(): string,
        getDomain(): string,
        getEnableKeepAlive(): boolean,
        getFile(): string,
        getLocation(): string,
        getOndatastream(): (...args: any[]) => any,
        getOnerror(): (...args: any[]) => any,
        getOnload(): (...args: any[]) => any,
        getOnreadystatechange(): (...args: any[]) => any,
        getOnsendstream(): (...args: any[]) => any,
        getPassword(): string,
        getReadyState(): number,
        getResponseData(): Ti$Blob,
        getResponseHeader(name: string): string,
        getResponseText(): string,
        getResponseXML(): undefined.Document,
        getSecurityManager(): SecurityManagerProtocol,
        getStatus(): number,
        getStatusText(): string,
        getTimeout(): number,
        getTlsVersion(): number,
        getUsername(): string,
        getValidatesSecureCertificate(): boolean,
        getWithCredentials(): boolean,
        open(method: string, url: string, async?: boolean): void,
        send(data?: any): void,
        send(data?: string): void,
        send(data?: undefined.File): void,
        send(data?: Ti$Blob): void,
        setAutoEncodeUrl(autoEncodeUrl: boolean): void,
        setAutoRedirect(autoRedirect: boolean): void,
        setCache(cache: boolean): void,
        setDomain(domain: string): void,
        setEnableKeepAlive(enableKeepAlive: boolean): void,
        setFile(file: string): void,
        setOndatastream(ondatastream: (...args: any[]) => any): void,
        setOnerror(onerror: (...args: any[]) => any): void,
        setOnload(onload: (...args: any[]) => any): void,
        setOnreadystatechange(onreadystatechange: (...args: any[]) => any): void,
        setOnsendstream(onsendstream: (...args: any[]) => any): void,
        setPassword(password: string): void,
        setRequestHeader(name: string, value: string): void,
        setTimeout(timeout: number): void,
        setTlsVersion(tlsVersion: number): void,
        setUsername(username: string): void,
        setValidatesSecureCertificate(validatesSecureCertificate: boolean): void,
        setWithCredentials(withCredentials: boolean): void
    }
    declare     export type BonjourBrowser = {
        domain: string,
        isSearching: boolean,
        serviceType: string,
        getDomain(): string,
        getIsSearching(): boolean,
        getServiceType(): string,
        search(): void,
        setDomain(domain: string): void,
        setIsSearching(isSearching: boolean): void,
        setServiceType(serviceType: string): void,
        stopSearch(): void
    }
    declare     export type Cookie = {
        comment: string,
        domain: string,
        expiryDate: string,
        httponly: boolean,
        name: string,
        originalUrl: string,
        path: string,
        secure: boolean,
        value: string,
        version: number,
        getComment(): string,
        getDomain(): string,
        getExpiryDate(): string,
        getHttponly(): boolean,
        getName(): string,
        getOriginalUrl(): string,
        getPath(): string,
        getSecure(): boolean,
        getValue(): string,
        getVersion(): number,
        isValid(): boolean,
        setComment(comment: string): void,
        setDomain(domain: string): void,
        setExpiryDate(expiryDate: string): void,
        setHttponly(httponly: boolean): void,
        setOriginalUrl(originalUrl: string): void,
        setPath(path: string): void,
        setSecure(secure: boolean): void,
        setValue(value: string): void,
        setVersion(version: number): void
    }
}


declare export interface Ti$Yahoo {
    yql(yql: string, callback: (...args: any[]) => any): void
}

declare export interface Ti$Gesture {
    landscape: boolean,
        orientation: number,
        portrait: boolean,
        getLandscape(): boolean,
        getOrientation(): number,
        getPortrait(): boolean,
        isFaceDown(): boolean,
        isFaceUp(): boolean,
        isLandscape(): boolean,
        isPortrait(): boolean
}

declare export interface Ti$Analytics {
    lastEvent: string,
        addEvent(type: string, name: string, data?: any): void,
        featureEvent(name: string, data?: any): void,
        getLastEvent(): string,
        navEvent(from: string, to: string, name?: string, data?: any): void,
        settingsEvent(name: string, data?: any): void,
        timedEvent(name: string, start: Date, stop: Date, duration: number, data?: any): void,
        userEvent(name: string, data?: any): void
}

declare module 'Facebook' {
    declare     export var BUTTON_STYLE_NORMAL: number;
    declare     export var BUTTON_STYLE_WIDE: number;
    declare     export var accessToken: string;
    declare     export var apiName: string;
    declare     export var appid: string;
    declare     export var bubbleParent: boolean;
    declare     export var expirationDate: Date;
    declare     export var forceDialogAuth: boolean;
    declare     export var loggedIn: boolean;
    declare     export var permissions: Array<Global$String>;
    declare     export var uid: string;
    declare     export function addEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function applyProperties(props: Dictionary<Object>): void
    declare     export function authorize(): void
    declare     export function createLoginButton(parameters?: Dictionary<undefined.LoginButton>): undefined.LoginButton
    declare     export function dialog(action: string, params: any, callback: (...args: any[]) => any): void
    declare     export function fireEvent(name: string, event: Dictionary<Object>): void
    declare     export function getAccessToken(): string
    declare     export function getApiName(): string
    declare     export function getAppid(): string
    declare     export function getBubbleParent(): boolean
    declare     export function getExpirationDate(): Date
    declare     export function getForceDialogAuth(): boolean
    declare     export function getLoggedIn(): boolean
    declare     export function getPermissions(): Array<Global$String >
        declare     export function getUid(): string
    declare     export function logout(): void
    declare     export function removeEventListener(name: string, callback: (...args: any[]) => any): void
    declare     export function request(method: string, params: any, callback: (...args: any[]) => any): void
    declare     export function requestWithGraphPath(
        path: string,
        params: Dictionary<Object>,
        httpMethod: string,
        callback: (...args: any[]) => any): void
    declare     export function setAccessToken(accessToken: string): void
    declare     export function setAppid(appid: string): void
    declare     export function setBubbleParent(bubbleParent: boolean): void
    declare     export function setExpirationDate(expirationDate: Date): void
    declare     export function setForceDialogAuth(forceDialogAuth: boolean): void
    declare     export function setLoggedIn(loggedIn: boolean): void
    declare     export function setPermissions(permissions: Array<Global$String>): void
    declare     export function setUid(uid: string): void
    declare     export type LoginButton = {
        style: string,
        getStyle(): string,
        setStyle(style: string): void
    }
}


declare export interface Ti$Utils {
    base64decode(obj: string): Ti$Blob,
        base64decode(obj: Ti$Blob): Ti$Blob,
        base64encode(obj: string): Ti$Blob,
        base64encode(obj: Ti$Blob): Ti$Blob,
        base64encode(obj: undefined.File): Ti$Blob,
        md5HexDigest(obj: string): string,
        md5HexDigest(obj: Ti$Blob): string,
        sha1(obj: string): string,
        sha1(obj: Ti$Blob): string,
        sha256(obj: string): string,
        sha256(obj: Ti$Blob): string
}

declare export type Ti$Event = {
    alerts: Array<undefined.Alert>,
    allDay: boolean,
    begin: Date,
    description: string,
    end: Date,
    extendedProperties: Dictionary<Object>,
    hasAlarm: boolean,
    hasExtendedProperties: boolean,
    id: string,
    location: string,
    reminders: Array<undefined.Reminder>,
    status: number,
    title: string,
    visibility: number,
    createAlert(data: Dictionary<undefined.Alert>): undefined.Alert,
    createReminder(data: Dictionary<undefined.Reminder>): undefined.Reminder,
    getAlerts(): Array<undefined.Alert>,
    getAllDay(): boolean,
    getBegin(): Date,
    getDescription(): string,
    getEnd(): Date,
    getExtendedProperties(): Dictionary<Object>,
    getExtendedProperty(name: string): string,
    getHasAlarm(): boolean,
    getHasExtendedProperties(): boolean,
    getId(): string,
    getLocation(): string,
    getReminders(): Array<undefined.Reminder>,
    getStatus(): number,
    getTitle(): string,
    getVisibility(): number,
    setExtendedProperty(name: string, value: string): void
}

declare export interface Ti$Stream {
    MODE_APPEND: number,
        MODE_READ: number,
        MODE_WRITE: number,
        createStream(params: CreateStreamArgs): Ti$IOStream,
        pump(
            inputStream: Ti$IOStream,
            handler: (...args: any[]) => any,
            maxChunkSize: number,
            isAsync?: boolean): void,
        read(
            sourceStream: Ti$IOStream,
            buffer: Ti$Buffer,
            offset?: number,
            length?: number,
            resultsCallback?: (...args: any[]) => any): void,
        readAll(
            sourceStream: Ti$IOStream,
            buffer?: Ti$Buffer,
            resultsCallback?: (...args: any[]) => any): any,
        write(
            outputStream: Ti$IOStream,
            buffer: Ti$Buffer,
            offset?: number,
            length?: number,
            resultsCallback?: (...args: any[]) => any): void,
        writeStream(
            inputStream: Ti$IOStream,
            outputStream: Ti$IOStream,
            maxChunkSize: number,
            resultsCallback?: (...args: any[]) => any): void
}
declare class Dictionary<Object>{}
declare class BarItemType {
    accessibilityLabel: string;
    enabled: boolean;
    image: any;
    title: string;
    width: number
}
declare class MatrixCreationDict {
    anchorPoint: Dictionary<Object>;
    rotate: number;
    scale: number
}
declare class TableViewIndexEntry {
    index: number;
    title: string
}
declare class FacebookRESTResponsev1 {
    error: string;
    method: string;
    result: string;
    success: boolean
}
declare class titleAttributesParams {
    color: string;
    font: Font;
    shadow: shadowDict
}
declare class MapRegionType {
    latitude: number;
    latitudeDelta: number;
    longitude: number;
    longitudeDelta: number
}
declare class CropRectType {
    height: number;
    width: number;
    x: number;
    y: number
}
declare class LocationResults mixins ErrorResponse {
    coords: LocationCoordinates;
    provider: LocationProviderDict
}
declare class ErrorResponse {
    code: number;
    error: string;
    success: boolean
}
declare class CloudPushNotificationsQueryResponse mixins CloudResponse {
    subscriptions: Array<Dictionary<Object >>
}
declare class CloudResponse {
    code: number;
    error: boolean;
    message: string;
    meta: Dictionary<Object>;
    success: boolean
}
declare class textFieldSelectedParams {
    length: number;
    location: number
}
declare class recurrenceEndDictionary {
    endDate: Date;
    occurrenceCount: number
}
declare var npm$namespace$Global: {
    L: typeof Global$L,
    alert: typeof Global$alert,
    clearInterval: typeof Global$clearInterval,
    clearTimeout: typeof Global$clearTimeout,
    decodeURIComponent: typeof Global$decodeURIComponent,
    encodeURIComponent: typeof Global$encodeURIComponent,
    require: typeof Global$require,
    setInterval: typeof Global$setInterval,
    setTimeout: typeof Global$setTimeout,
}
declare export function Global$L(key: string, hint?: string): string

declare export function Global$alert(message: string): void

declare export function Global$clearInterval(timerId: number): void

declare export function Global$clearTimeout(timerId: number): void

declare export function Global$decodeURIComponent(value: string): string

declare export function Global$encodeURIComponent(value: string): string

declare export function Global$require(moduleId: string): any

declare export function Global$setInterval(_function: (...args: any[]) => any, delay: number): number

declare export function Global$setTimeout(_function: (...args: any[]) => any, delay: number): number

declare export interface Global$console {
    debug(message: any): void,
        error(message: any): void,
        info(message: any): void,
        log(message: any): void,
        warn(message: any): void
}

declare export interface Global$String {
    format(formatString: string, value: string): string,
        format(formatString: string, value: number): string,
        formatCurrency(value: number): string,
        formatDate(date: Date, format?: string): string,
        formatDecimal(value: number, locale?: string, pattern?: string): string,
        formatTime(date: Date, format?: string): string
}

declare export interface Global$JSON {
    parse(text: string, reviver: (...args: any[]) => any): any,
        stringify(value: any, replacer?: (...args: any[]) => any, space?: number): string,
        stringify(value: any, replacer?: Array<Global$String>, space?: string): string,
        stringify(value: any, replacer?: Array<Global$String>, space?: number): string,
        stringify(value: any, replacer?: (...args: any[]) => any, space?: string): string
}
declare class CloudGeoFenceResponse mixins CloudResponse {
    geo_fences: Array<Dictionary<Object >>
}
declare class ServiceIntentOptions {
    startMode: number;
    url: string
}
declare class AcceptedCallbackArgs {
    inbound: undefined.TCP;
    socket: undefined.TCP
}
declare class HeadingData {
    accuracy: number;
    magneticHeading: number;
    timestamp: number;
    trueHeading: number;
    x: number;
    y: number;
    z: number
}
declare class FacebookGraphResponsev1 {
    error: string;
    path: string;
    result: string;
    success: boolean
}
declare class textAreaSelectedParams {
    length: number;
    location: number
}
declare class ThumbnailResponse mixins ErrorResponse {
    image: Ti$Blob;
    time: number
}
declare class Dimension {
    height: number;
    width: number;
    x: number;
    y: number
}
declare class ReadCallbackArgs mixins ErrorResponse {
    bytesProcessed: number;
    errorDescription: string;
    errorState: number;
    source: Ti$IOStream
}
declare class CloudACLsCheckResponse mixins CloudResponse {
    permission: Dictionary<Object >
}
declare class ViewTemplate {
    bindId: string;
    childTemplates: Array<ViewTemplate>;
    events: Dictionary<Object>;
    properties: Dictionary<Object>;
    type: string
}
declare class CloudChatsResponse mixins CloudResponse {
    chats: Array<Dictionary<Object >>
}
declare class MediaQueryType {
    albumArtist: any;
    albumTitle: any;
    artist: any;
    composer: any;
    genre: any;
    grouping: number;
    isCompilation: any;
    mediaType: any;
    title: any
}
declare class WebAPIError {
    code: number;
    message: string;
    name: string
}
declare class DocumentViewerOptions {
    animated: boolean;
    view: undefined.View
}
declare class ListViewAnimationProperties {
    animated: boolean;
    animationStyle: number;
    position: number
}
declare class CloudPushSchedulesResponse mixins CloudResponse {
    push_schedules: Array<Object >
}
declare class DataCallbackArgs {
    address: string;
    bytesData: Array<Number>;
    port: string;
    stringData: string
}
declare class CloudPushNotificationErrorArg {
    error: string
}
declare class ScreenshotResult {
    media: Ti$Blob
}
declare class YQLResponse mixins ErrorResponse {
    data: any;
    message: string
}
declare class ForwardGeocodeResponse mixins ErrorResponse {
    accuracy: number;
    address: string;
    city: string;
    country: string;
    countryCode: string;
    country_code: string;
    displayAddress: string;
    latitude: string;
    longitude: string;
    postalCode: string;
    region1: string;
    region2: string;
    street: string;
    street1: string
}
declare class CloudEventsResponse mixins CloudResponse {
    events: Array<Dictionary<Object >>
}
declare class ReadyStatePayload {
    readyState: number
}
declare class ErrorCallbackArgs {
    errorCode: number;
    socket: undefined.TCP
}
declare class FailureResponse {
    code: Number;
    error: string;
    success: boolean
}
declare class WriteCallbackArgs mixins ErrorResponse {
    bytesProcessed: number;
    errorDescription: string;
    errorState: number;
    source: Ti$IOStream
}
declare class CloudPushNotificationSuccessArg {
    deviceToken: string
}
declare class MapLocationType {
    animate: boolean;
    latitude: number;
    latitudeDelta: number;
    longitude: number;
    longitudeDelta: number;
    regionFit: boolean
}
declare class DecodeStringDict {
    charset: string;
    length: number;
    position: number;
    source: Ti$Buffer
}
declare class ListViewContentInsetOption {
    animated: boolean;
    duration: number
}
declare class RouteDescription {
    inputs: Array<Object>;
    outputs: Array<Object >
}
declare class CreateStreamArgs {
    mode: number;
    source: any
}
declare class CloudCheckinsResponse mixins CloudResponse {
    checkins: Array<Dictionary<Object >>
}
declare class CreateBufferArgs {
    byteOrder: number;
    length: number;
    type: string;
    value: any
}
declare class CloudPushNotificationConfig {
    error: (...args: any[]) => any;
    success: (...args: any[]) => any
}
declare class CloudReviewsResponse mixins CloudResponse {
    reviews: Array<Dictionary<Object >>
}
declare class Point {
    x: number;
    y: number
}
declare class CloudPhotosResponse mixins CloudResponse {
    photos: Array<Dictionary<Object >>
}
declare class PushNotificationConfig {
    callback: (...args: any[]) => any;
    error: (...args: any[]) => any;
    success: (...args: any[]) => any;
    types: Array<Number >
}
declare class MapRouteType {
    color: string;
    name: string;
    points: Array<MapPointType>;
    width: number
}
declare class AcceptDict {
    error: (...args: any[]) => any;
    timeout: number
}
declare class MediaQueryInfoType {
    exact: boolean;
    value: any
}
declare class PumpCallbackArgs mixins ErrorResponse {
    buffer: Ti$Buffer;
    bytesProcessed: number;
    errorDescription: string;
    errorState: number;
    source: Ti$IOStream;
    totalBytesProcessed: number
}
declare class MusicLibraryOptionsType {
    allowMultipleSelections: boolean;
    animated: boolean;
    autohide: boolean;
    cancel: (...args: any[]) => any;
    error: (...args: any[]) => any;
    mediaTypes: any;
    success: (...args: any[]) => any
}
declare class shadowDict {
    blurRadius: number;
    color: string;
    offset: Dictionary<Object >
}
declare class launchOptions {
    launchOptionsLocationKey: boolean;
    source: string;
    url: string
}
declare class WriteStreamCallbackArgs mixins ErrorResponse {
    bytesProcessed: number;
    errorDescription: string;
    errorState: number;
    fromStream: Ti$IOStream;
    toStream: Ti$IOStream
}
declare class CloudChatGroupsResponse mixins CloudResponse {
    chat_groups: Array<Dictionary<Object >>
}
declare class CloudPhotoCollectionsPhotosResponse mixins CloudResponse {
    photos: Array<Dictionary<Object >>
}
declare class DecodeNumberDict {
    byteOrder: number;
    position: number;
    source: Ti$Buffer;
    type: string
}
declare class ConnectedCallbackArgs {
    socket: undefined.TCP
}
declare class CloudPhotoCollectionsResponse mixins CloudResponse {
    collections: Array<Dictionary<Object >>
}
declare class CloudObjectsResponse mixins CloudResponse {
    classname: Array<Dictionary<Object >>
}
declare class PopoverParams {
    animated: boolean;
    rect: Dimension;
    view: undefined.View
}
declare class MediaScannerResponse {
    path: string;
    uri: string
}
declare class CloudPushNotificationsQueryChannelResponse mixins CloudResponse {
    push_channels: Array<Global$String >
}
declare class CloudPostsResponse mixins CloudResponse {
    posts: Array<Dictionary<Object >>
}
declare class CloudSocialIntegrationsResponse mixins CloudResponse {
    users: Array<Dictionary<Object >>
}
declare class APSConnectionDelegate {}
declare class CameraOptionsType {
    allowEditing: boolean;
    animated: boolean;
    arrowDirection: number;
    autohide: boolean;
    autorotate: boolean;
    cancel: (...args: any[]) => any;
    error: (...args: any[]) => any;
    inPopOver: boolean;
    mediaTypes: Array<Global$String>;
    overlay: undefined.View;
    popoverView: undefined.View;
    saveToPhotoGallery: boolean;
    showControls: boolean;
    success: (...args: any[]) => any;
    transform: undefined._2DMatrix;
    videoMaximumDuration: number;
    videoQuality: number
}
declare class ListViewIndexEntry {
    index: number;
    title: string
}
declare class CloudStreamProgress {
    progress: number;
    url: string
}
declare class MusicLibraryResponseType {
    items: Array<undefined.Item>;
    representative: undefined.Item;
    types: number
}
declare class CloudEventOccurrencesResponse mixins CloudResponse {
    event_occurrences: Array<Dictionary<Object >>
}
declare class CloudUsersResponse mixins CloudResponse {
    users: Array<Dictionary<Object >>
}
declare class TableViewContentInsetOption {
    animated: boolean;
    duration: number
}
declare class CloudFriendRequestsResponse mixins CloudResponse {
    friend_requests: Array<Dictionary<Object >>
}
declare class CloudACLsResponse mixins CloudResponse {
    acls: Array<Dictionary<Object >>
}
declare class ListViewMarkerProps {
    itemIndex: number;
    sectionIndex: number
}
declare class EventsAuthorizationResponse {
    code: number;
    error: string;
    success: boolean
}
declare class PlayerQueue {
    items: Array<undefined.Item >
}
declare class CoverFlowImageType {
    height: number;
    image: any;
    width: number
}
declare class BroadcastIntentOptions {
    action: string;
    className: string;
    data: string;
    flags: number;
    packageName: string;
    url: string
}
declare class CloudUsersSecureResponse mixins CloudResponse {
    accessToken: string;
    expiresIn: number
}
declare class CloudClientsResponse mixins CloudResponse {
    ip_address: string;
    location: Dictionary<Object >
}
declare class PushNotificationErrorArg {
    type: string
}
declare class CloudStatusesResponse mixins CloudResponse {
    statuses: Array<Dictionary<Object >>
}
declare class windowToolbarParam {
    animated: boolean;
    barColor: string;
    tintColor: string;
    translucent: boolean
}
declare class GeocodedAddress {
    address: string;
    city: string;
    country: string;
    countryCode: string;
    country_code: string;
    displayAddress: string;
    latitude: string;
    longitude: string;
    postalCode: string;
    region1: string;
    region2: string;
    street: string;
    street1: string;
    zipcode: string
}
declare class ContactsCallbackArgs mixins ErrorResponse {
    data: Array<undefined.Person >
}
declare class zoomScaleOption {
    animated: boolean
}
declare class LocationCoordinates {
    accuracy: number;
    altitude: number;
    altitudeAccuracy: number;
    heading: number;
    latitude: number;
    longitude: number;
    speed: number;
    timestamp: number
}
declare class ActivityResult {
    intent: undefined.Intent;
    requestCode: number;
    resultCode: number
}
declare class CloudUsersSecureDialog {
    title: string
}
declare class CloudFriendsResponse mixins CloudResponse {
    users: Array<Dictionary<Object >>
}
declare class PhotoGalleryOptionsType {
    allowEditing: boolean;
    animated: boolean;
    arrowDirection: number;
    autohide: boolean;
    cancel: (...args: any[]) => any;
    error: (...args: any[]) => any;
    mediaTypes: Array<Global$String>;
    popoverView: undefined.View;
    success: (...args: any[]) => any
}
declare class NotificationParams {
    alertAction: string;
    alertBody: string;
    alertLaunchImage: string;
    badge: number;
    category: string;
    date: Date;
    repeat: string;
    sound: string;
    timezone: string;
    userInfo: Dictionary<Object >
}
declare class daysOfTheWeekDictionary {
    daysOfWeek: number;
    week: number
}
declare class Modules {}
declare class ReferenceInsets {
    bottom: number;
    left: number;
    right: number;
    top: number
}
declare class hideStatusBarParams {
    animated: boolean;
    animationStyle: number
}
declare class PreviewImageOptions {
    error: (...args: any[]) => any;
    image: Ti$Blob;
    success: (...args: any[]) => any
}
declare class ListDataItem {
    properties: Dictionary<undefined.ListItem>;
    template: any
}
declare class ItemTemplate {
    childTemplates: Array<ViewTemplate>;
    events: Dictionary<Object>;
    properties: Dictionary<undefined.ListItem >
}
declare class MovieSize {
    height: number;
    width: number
}
declare class CameraMediaItemType {
    cropRect: CropRectType;
    media: Ti$Blob;
    mediaType: string
}
declare class HeadingResponse mixins ErrorResponse {
    heading: HeadingData
}
declare class ListViewEdgeInsets {
    bottom: number;
    left: number;
    right: number;
    top: number
}
declare class BoundaryIdentifier {
    identifier: string;
    point1: Point;
    point2: Point
}
declare class GradientColorRef {
    color: string;
    offset: number
}
declare class Font {
    fontFamily: string;
    fontSize: any;
    fontStyle: string;
    fontWeight: string;
    textStyle: string
}
declare class CloudPlacesResponse mixins CloudResponse {
    places: Array<Dictionary<Object >>
}
declare class EncodeNumberDict {
    byteOrder: number;
    dest: Ti$Buffer;
    position: number;
    source: number;
    type: string
}
declare class showContactsParams {
    animated: boolean;
    cancel: (...args: any[]) => any;
    fields: Array<Global$String>;
    selectedPerson: (...args: any[]) => any;
    selectedProperty: (...args: any[]) => any
}
declare class LocationProviderDict {
    accuracy: number;
    name: string;
    power: number
}
declare class FacebookDialogResponsev1 {
    cancelled: boolean;
    error: string;
    result: string;
    success: boolean
}
declare class CloudFilesResponse mixins CloudResponse {
    files: Array<Dictionary<Object >>
}
declare class hideParams {
    animated: boolean
}
declare class SecurityManagerProtocol {
    connectionDelegateForUrl(url: any): APSConnectionDelegate;
    getKeyManagers(proxy: any): Array<Object>;
    getTrustManagers(proxy: any): Array<Object>;
    willHandleURL(url: any): boolean
}
declare class openWindowParams {
    activityEnterAnimation: number;
    activityExitAnimation: number;
    animated: boolean;
    bottom: any;
    fullscreen: boolean;
    height: any;
    left: any;
    modal: boolean;
    modalStyle: number;
    modalTransitionStyle: number;
    navBarHidden: boolean;
    right: any;
    top: any;
    transition: number;
    width: any
}
declare class Gradient {
    backfillEnd: boolean;
    backfillStart: boolean;
    colors: any;
    endPoint: Point;
    endRadius: number;
    startPoint: Point;
    startRadius: number;
    type: string
}
declare class showStatusBarParams {
    animated: boolean;
    animationStyle: number
}
declare class transitionAnimationParam {
    duration: number;
    tranistionTo: undefined.Animation;
    transitionFrom: undefined.Animation
}
declare class MapPointType {
    latitude: number;
    longitude: number
}
declare class CloudKeyValuesResponse mixins CloudResponse {
    keyvalues: Array<Dictionary<Object >>
}
declare class TableViewEdgeInsets {
    bottom: number;
    left: number;
    right: number;
    top: number
}
declare class ReverseGeocodeResponse mixins ErrorResponse {
    places: Array<GeocodedAddress >
}
declare class contentOffsetOption {
    animated: boolean
}
declare class Attribute {
    range: Array<Number>;
    type: number;
    value: number
}
declare class PushNotificationSuccessArg {
    deviceToken: string;
    type: string
}
declare class PushNotificationData {
    data: Dictionary<Object>;
    inBackground: boolean
}
declare class closeWindowParams {
    activityEnterAnimation: number;
    activityExitAnimation: number;
    animated: boolean
}
declare class CloudLikesResponse mixins CloudResponse {
    likes: Array<Dictionary<Object >>
}
declare class showParams {
    animated: boolean;
    rect: Dimension;
    view: undefined.View
}
declare class PreviewImageError {
    message: string
}
declare class CloudMessagesResponse mixins CloudResponse {
    messages: Array<Dictionary<Object >>
}
declare class CloudPushNotificationsShowChannelResponse mixins CloudResponse {
    devices: Dictionary<Object >
}
declare class ImageAsCroppedDict {
    height: number;
    width: number;
    x: number;
    y: number
}
declare class UserNotificationSettings {
    categories: Array<undefined.UserNotificationCategory>;
    types: Array<Number >
}
declare class TableViewAnimationProperties {
    animated: boolean;
    animationStyle: number;
    position: number
}
declare class EncodeStringDict {
    charset: string;
    dest: Ti$Buffer;
    destPosition: number;
    source: string;
    sourceLength: number;
    sourcePosition: number
}