// @flow
/**
 * Flowtype definitions for universal-router
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'universal-router' {

    /**
     * Params is a key/value object that represents extracted URL paramters. Each
     * URL parameter resolves to a string.
     */
    declare     export interface Params {
        [key: string]: string
    }

    /**
     * Context represents the context that is passed as the second argument
     * passed to resolve. By default, it only is require to contain a path, but
    can be extended by the way of generics.
    */
    declare     export interface Context {
        path: string
    }

    /**
     * ActionContext is similar to Context, with the exception of an added params
     * object. ActionContext is passed as the first argument to the action
    function.
    */
    declare     export type ActionContext = {
        params: Params
    } & Context


    /**
     * A Route is a singular route in your application. It contains a path, an
     * action function, and optional children which are an array of Route.
     * @template  User context that is made union with ActionContext.
     * @template  Result that every action function resolves to. If the action
    returns a Promise, R can be the type the Promise resolves to.
    */
    declare     export interface Route<C, R>{
        path: string,
        action: (ctx: ActionContext & C, params: Params) => R | Promise<R>| void,
        children?: Routes<C,
        R >
    }

    /**
     * Routes in an array of type Route.
     * @template  User context that is made union with ActionContext.
     * @template  Result that every action function resolves to. If the action
    returns a Promise, R can be the type the Promise resolves to.
    */
    declare     export type Routes<C, R>= Route<C, R>[];

    /**
     * Resolve function that is given routes and a path or context object.
     * Returns a Promise that resolves to result of the action function of the
    matched route.& C}  pathOrContext - path to resolve or
    context object that contains the path along with other data.
     * @template  User context that is made union with Context.
     * @template  Result that every action function resolves to. If the action
    returns a Promise, R can be the type the Promise resolves to.
     * @param  - Single route or array of routes.
     * @return  - Result of matched action function wrapped in a Promsie.
    */
    declare     export function resolve<C, R>(
        routes: Routes<C, R>| Route<C, R>,
        pathOrContext: string | String | Context & C): Promise<R >
}