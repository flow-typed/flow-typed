/**
 * Flowtype definitions for nvd3
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface nv$Margin {
    left?: number,
        right?: number,
        top?: number,
        bottom?: number
}

declare interface nv$Size {
    height: number,
        width: number
}

declare interface nv$ArcsRadius {
    inner: number,
        outer: number
}

declare interface nv$Offset {
    left?: number,
        top?: number
}

declare interface nv$State {
    dispatch: d3.Dispatch
}

declare interface nv$InteractiveLayer {
    tooltip: nv$Tooltip
}

declare interface nv$SymbolMap {
    set(name: string, func: (size: any) => void): void
}

declare interface nv$Utils {
    defaultColor(): string[],
        getColor(arg: any): string[],
        windowResize(listener: (ev: Event) => any): void,
        windowSize(): nv$Size,
        state(): nv$State,
        symbolMap: nv$SymbolMap
}

declare interface nv$ChartFactory<TChart>{
    generate: () => TChart,
    callback?: (chart: TChart) => void
}

declare interface nv$Nvd3TooltipStatic {
    show(undefined: [number, number], content: string, gravity?: string): void,
        cleanup(): void
}

declare interface nv$Nvd3Element {
    dispatch: d3.Dispatch,
        options(options: any): this,
        update(): void,
        (transition: d3.Transition<any[]>, ...args: any[]): any,
        (selection: d3.Selection<any[]>, ...args: any[]): any,
        (transition: d3.Transition<any>, ...args: any[]): any,
        (selection: d3.Selection<any>, ...args: any[]): any
}

declare type nv$Chart = {
    state: nv$State,
    interactiveLayer: nv$InteractiveLayer
} & nv$Nvd3Element


declare type nv$Legend = {
    align(): boolean,
    align(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    expanded(): boolean,
    expanded(value: boolean): this,
    height(): number,
    height(value: number): this,
    key(): any,
    key(value: any): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    padding(): number,
    padding(value: number): this,
    radioButtonMode(): boolean,
    radioButtonMode(value: boolean): this,
    rightAlign(): boolean,
    rightAlign(value: boolean): this,
    updateState(): boolean,
    updateState(value: boolean): this,
    vers(): string,
    vers(value: string): this,
    width(): number,
    width(value: number): this
} & nv$Nvd3Element


declare type nv$Focus = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    width(): number,
    width(value: number): this,
    height(): number,
    height(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    brushExtent(): [number, number] | [
        [number, number],
        [number, number]
    ],
    brushExtent(value: [number, number] | [
        [number, number],
        [number, number]
    ]): this,
    duration(): number,
    duration(value: number): this,
    xTickFormat(): (d: any) => string,
    xTickFormat(format: (t: any) => string): this,
    xTickFormat(format: string): this,
    xTickFormat(format: (d: any, i: any) => string): this,
    yTickFormat(): (d: any) => string,
    yTickFormat(format: (t: any) => string): this,
    yTickFormat(format: string): this,
    yTickFormat(format: (d: any, i: any) => string): this,
    interpolate(): string,
    interpolate(value: string): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    syncBrushing(): boolean,
    syncBrushing(value: boolean): this
} & nv$Nvd3Element


declare type nv$Nvd3Axis = {
    axisLabel(): string,
    axisLabel(value: string): this,
    axisLabelDistance(): number,
    axisLabelDistance(value: number): this,
    domain(): number[],
    domain(domain: number[]): this,
    duration(): number,
    duration(value: number): this,
    height(): number,
    height(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    orient(): string,
    orient(orientation: string): this,
    range(): number[],
    range(range: number[]): this,
    rangeBand(): number,
    rangeBands(interval: [number, number], padding?: number, outerPadding?: number): this,
    rotateLabels(): number,
    rotateLabels(range: number): this,
    rotateYLabels(): number,
    rotateYLabels(range: number): this,
    scale(): any,
    scale(scale: any): this,
    showMaxMin(value: boolean): this,
    staggerLabels(): boolean,
    staggerLabels(value: boolean): this,
    tickFormat(): (d: any) => string,
    tickFormat(format: (t: any) => string): this,
    tickFormat(format: string): this,
    tickFormat(format: (d: any, i: any) => string): this,
    tickPadding(): number,
    tickPadding(padding: number): this,
    tickSize(): number,
    tickSize(size: number): this,
    tickSize(inner: number, outer: number): this,
    tickValues(): any[],
    tickValues(values: any[]): this,
    ticks(): any[],
    ticks(...args: any[]): this,
    width(): number,
    width(value: number): this
}

declare type nv$BoxPlot = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    maxBoxWidth(): number,
    maxBoxWidth(value: number): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$Bullet = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    forceX(): number[],
    forceX(value: number[]): this,
    height(): number,
    height(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    markers(): (d: any) => any,
    markers(func: (d: any) => any): this,
    measures(): (d: any) => any,
    measures(func: (d: any) => any): this,
    orient(): string,
    orient(orientation: string): this,
    ranges(): (d: any) => any,
    ranges(func: (d: any) => any): this,
    tickFormat(): (d: any) => string,
    tickFormat(format: (d: any) => string): this,
    tickFormat(format: string): this,
    tickFormat(format: (d: any, i: any) => string): this,
    width(): number,
    width(value: number): this
} & nv$Nvd3Element


declare type nv$CandlestickBar = {
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    close(): (d: any) => number,
    close(func: (d: any) => number): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    high(): (d: any) => number,
    high(func: (d: any) => number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    low(): (d: any) => number,
    low(func: (d: any) => number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    open(): (d: any) => number,
    open(func: (d: any) => number): this,
    padData(): boolean,
    padData(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$DiscreteBar = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    rectClass(): string,
    rectClass(value: string): this,
    showValues(): boolean,
    showValues(value: boolean): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$Distribution = {
    axis(): string,
    axis(value: "x"): this,
    axis(value: "y"): this,
    axis(value: string): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    domain(): number[],
    domain(value: number[]): this,
    duration(): number,
    duration(value: number): this,
    getData(func: (d: any) => number): this,
    scale(): any,
    scale(value: any): this,
    size(): number,
    size(value: number): this,
    width(): number,
    width(value: number): this
} & nv$Nvd3Element


declare type nv$HistoricalBar = {
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    padData(): boolean,
    padData(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$Line = {
    scatter: nv$Scatter,
    defined(): (d: any, i: number) => boolean,
    defined(func: (d: any, i: number) => boolean): this,
    interpolate(): string,
    interpolate(value: string): this,
    isArea(): (d: any) => boolean,
    isArea(value: boolean): this,
    isArea(func: (d: any) => boolean): this
} & nv$Scatter


declare type nv$MultiBar = {
    barColor(value: string[]): this,
    barColor(func: (d: any, i: number) => string): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    disabled(): boolean[],
    disabled(value: boolean[]): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    groupSpacing(): number,
    groupSpacing(value: number): this,
    height(): number,
    height(value: number): this,
    hideable(): boolean,
    hideable(value: boolean): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    stacked(): boolean,
    stacked(value: boolean): this,
    stackOffset(offset: "silhouette"): this,
    stackOffset(offset: "wiggle"): this,
    stackOffset(offset: "expand"): this,
    stackOffset(offset: "zero"): this,
    stackOffset(offset: string): this,
    stackOffset(offset: (data: Array<[number, number]>) => number[]): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$MultiBarHorizontal = {
    barColor(value: string[]): this,
    barColor(func: (d: any, i: number) => string): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    disabled(): boolean[],
    disabled(value: boolean[]): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    groupSpacing(): number,
    groupSpacing(value: number): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    showValues(): boolean,
    showValues(value: boolean): this,
    stacked(): boolean,
    stacked(value: boolean): this,
    stackOffset(offset: "silhouette"): this,
    stackOffset(offset: "wiggle"): this,
    stackOffset(offset: "expand"): this,
    stackOffset(offset: "zero"): this,
    stackOffset(offset: string): this,
    stackOffset(offset: (data: Array<[number, number]>) => number[]): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    valuePadding(): number,
    valuePadding(value: number): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yErr(): (d: any, i: number) => number | number[],
    yErr(func: (d: any, i: number) => number | number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$OhlcBar = {
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    close(): (d: any) => number,
    close(func: (d: any) => number): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    high(): (d: any) => number,
    high(func: (d: any) => number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    low(): (d: any) => number,
    low(func: (d: any) => number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    open(): (d: any) => number,
    open(func: (d: any) => number): this,
    padData(): boolean,
    padData(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$ParallelCoordinates = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    dimensionData(): any,
    dimensionData(d: any): this,
    dimensionFormats(): string[],
    dimensionFormats(value: string[]): this,
    dimensionNames(): string[],
    dimensionNames(value: string[]): this,
    dimensions(): any,
    dimensions(value: any): this,
    height(): number,
    height(value: number): this,
    lineTension(): number,
    lineTension(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    width(): number,
    width(value: number): this
} & nv$Nvd3Element


declare type nv$Pie = {
    arcsRadius(): nv$ArcsRadius[],
    arcsRadius(value: nv$ArcsRadius[]): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    cornerRadius(): number,
    cornerRadius(value: number): this,
    donut(): boolean,
    donut(value: boolean): this,
    donutLabelsOutside(): boolean,
    donutLabelsOutside(value: boolean): this,
    donutRatio(): number,
    donutRatio(value: number): this,
    endAngle(): (d: any) => number,
    endAngle(func: (d: any) => number): this,
    growOnHover(): boolean,
    growOnHover(value: boolean): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    labelFormat(): string,
    labelFormat(value: string): this,
    labelFormat(format: (d: any) => string): this,
    labelSunbeamLayout(): boolean,
    labelSunbeamLayout(value: boolean): this,
    labelThreshold(): number,
    labelThreshold(value: number): this,
    labelType(): string,
    labelType(value: "key"): this,
    labelType(value: "value"): this,
    labelType(value: "percent"): this,
    labelType(value: string): this,
    labelType(func: (d: any, i: number, values: any) => string): this,
    labelsOutside(): boolean,
    labelsOutside(value: boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    padAngle(): number,
    padAngle(value: number): this,
    pieLabelsOutside(): boolean,
    pieLabelsOutside(value: boolean): this,
    showLabels(): boolean,
    showLabels(value: boolean): this,
    startAngle(): (d: any) => number,
    startAngle(func: (d: any) => number): this,
    title(): string,
    title(value: string): this,
    titleOffset(): number,
    titleOffset(value: number): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    valueFormat(format: (d: any) => string): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this
} & nv$Nvd3Element


declare type nv$Scatter = {
    clearHighlights(): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    clipRadius(func: (d: any) => number): this,
    clipRadius(value: number): this,
    clipVoronoi(): boolean,
    clipVoronoi(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    forcePoint(): number[],
    forcePoint(value: number[]): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    padData(): boolean,
    padData(value: boolean): this,
    padDataOuter(): number,
    padDataOuter(value: number): this,
    pointActive(): (d: any) => boolean,
    pointActive(func: (d: any) => boolean): this,
    pointxDomain(): number[],
    pointDomain(value: number[]): this,
    pointRange(): number[],
    pointRange(value: number[]): this,
    pointScale(): any,
    pointScale(value: any): this,
    pointSize(): (d: any) => number,
    pointSize(func: (d: any) => number): this,
    pointSize(value: number): this,
    showVoronoi(): boolean,
    showVoronoi(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$SparkLine = {
    animate(): boolean,
    animate(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    height(): number,
    height(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    width(): number,
    width(value: number): this,
    x(): (d: any, i?: number) => number,
    x(func: (d: any, i?: number) => number): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any, i?: number) => number,
    y(func: (d: any, i?: number) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Nvd3Element


declare type nv$SparkLinePlus = {
    sparkline: nv$SparkLine,
    alignValue(): boolean,
    alignValue(value: boolean): this,
    noData(): string,
    noData(value: string): this,
    rightAlignValue(): boolean,
    rightAlignValue(value: boolean): this,
    showLastValue(): boolean,
    showLastValue(value: boolean): this,
    xTickFormat(format: (d: any) => string): this,
    xTickFormat(format: string): this,
    xTickFormat(format: (d: any, i: any) => string): this,
    yTickFormat(format: (d: any) => string): this,
    yTickFormat(format: string): this,
    yTickFormat(format: (d: any, i: any) => string): this
} & nv$SparkLine


declare type nv$StackedArea = {
    scatter: nv$Scatter,
    defined(): (d: any, i: number) => boolean,
    defined(func: (d: any, i: number) => boolean): this,
    interpolate(): string,
    interpolate(value: string): this,
    offset(offset: "silhouette"): this,
    offset(offset: "wiggle"): this,
    offset(offset: "expand"): this,
    offset(offset: "zero"): this,
    offset(offset: string): this,
    offset(offset: (data: Array<[number, number]>) => number[]): this,
    order(): string,
    order(value: string): this,
    style(offset: "stack"): this,
    style(offset: "stream"): this,
    style(offset: "stream-center"): this,
    style(offset: "expand"): this,
    style(offset: "stack_percent"): this,
    style(offset: string): this,
    width(): number,
    width(value: number): this,
    height(): number,
    height(value: number): this
} & nv$Scatter


declare type nv$Sunburst = {
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    mode(): string,
    mode(value: "size"): this,
    mode(value: "count"): this,
    mode(value: string): this,
    width(): number,
    width(value: number): this
} & nv$Nvd3Element


declare interface nv$Tooltip {
    chartContainer(el: HTMLElement): this,
        chartContainer(): HTMLElement,
        classes(el: string): this,
        classes(): string,
        contentGenerator(): (d: any) => string,
        contentGenerator(func: (d: any) => string): this,
        data(): any,
        data(value: any): this,
        distance(): number,
        distance(value: number): this,
        duration(): number,
        duration(value: number): this,
        enabled(): boolean,
        enabled(value: boolean): this,
        fixedTop(): number,
        fixedTop(value: number): this,
        gravity(): string,
        gravity(value: string): this,
        headerEnabled(): boolean,
        headerEnabled(value: boolean): this,
        headerFormatter(func: (d: any) => string): this,
        headerFormatter(): (d: any) => string,
        hidden(): boolean,
        hidden(value: boolean): this,
        hideDelay(): number,
        hideDelay(value: number): this,
        id(): any,
        keyFormatter(): (d: any, i: number) => string,
        keyFormatter(func: (d: any, i: number) => string): this,
        offset(): nv$Offset,
        offset(value: nv$Offset): this,
        position(): nv$Offset,
        position(value: nv$Offset): this,
        snapDistance(): number,
        snapDistance(value: number): this,
        tooltipElem(): HTMLElement,
        valueFormatter(): (d: any) => string,
        valueFormatter(func: (d: any) => string): this
}

declare type nv$BoxPlotChart = {
    boxplot: nv$BoxPlot,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    maxBoxWidth(): number,
    maxBoxWidth(value: number): this,
    noData(): string,
    noData(value: string): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    staggerLabels(): boolean,
    staggerLabels(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$BulletChart = {
    bullet: nv$Bullet,
    tooltip: nv$Tooltip,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    forceX(): number[],
    forceX(value: number[]): this,
    height(): number,
    height(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    markers(): (d: any) => any,
    markers(func: (d: any) => any): this,
    measures(): (d: any) => any,
    measures(func: (d: any) => any): this,
    noData(): string,
    noData(value: string): this,
    orient(): string,
    orient(orientation: string): this,
    ranges(): (d: any) => any,
    ranges(func: (d: any) => any): this,
    tickFormat(): (d: any) => string,
    tickFormat(format: (d: any) => string): this,
    tickFormat(format: string): this,
    tickFormat(format: (d: any, i: any) => string): this,
    ticks(): any[],
    ticks(...args: any[]): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    width(): number,
    width(value: number): this
} & nv$Chart


declare type nv$CandlestickBarChart = {
    bars: nv$CandlestickBar,
    legend: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    close(): (d: any) => number,
    close(func: (d: any) => number): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    defaultState(): any,
    defaultState(value: any): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    high(): (d: any) => number,
    high(func: (d: any) => number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    low(): (d: any) => number,
    low(func: (d: any) => number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    open(): (d: any) => number,
    open(func: (d: any) => number): this,
    padData(): boolean,
    padData(value: boolean): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$CumulativeLineChart = {
    controls: nv$Legend,
    average(func: (d: any) => number): this,
    average(): (d: any) => number,
    noErrorCheck(value: boolean): this,
    noErrorCheck(): boolean
} & nv$LineChart


declare type nv$DiscreteBarChart = {
    discretebar: nv$DiscreteBar,
    legend: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    rectClass(): string,
    rectClass(value: string): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showValues(): boolean,
    showValues(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    staggerLabels(): boolean,
    staggerLabels(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$HistoricalBarChart = {
    bars: nv$HistoricalBar,
    legend: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    duration(): number,
    duration(value: number): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padData(): boolean,
    padData(value: boolean): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$LineChart = {
    lines: nv$Line,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    legend: nv$Legend,
    tooltip: nv$Tooltip,
    focus: nv$Focus,
    clearHighlights(): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    clipRadius(func: (d: any) => number): this,
    clipRadius(value: number): this,
    clipVoronoi(): boolean,
    clipVoronoi(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    defined(): (d: any, i: number) => boolean,
    defined(func: (d: any, i: number) => boolean): this,
    duration(): number,
    duration(value: number): this,
    forcePoint(): number[],
    forcePoint(value: number[]): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    highlightPoint(): (d: any) => boolean,
    highlightPoint(func: (d: any) => boolean): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    interpolate(): string,
    interpolate(value: string): this,
    isArea(): (d: any) => boolean,
    isArea(value: boolean): this,
    isArea(func: (d: any) => boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padData(): boolean,
    padData(value: boolean): this,
    padDataOuter(): number,
    padDataOuter(value: number): this,
    pointActive(): (d: any) => boolean,
    pointActive(func: (d: any) => boolean): this,
    pointxDomain(): number[],
    pointDomain(value: number[]): this,
    pointRange(): number[],
    pointRange(value: number[]): this,
    pointScale(): any,
    pointScale(value: any): this,
    pointSize(): (d: any) => number,
    pointSize(func: (d: any) => number): this,
    pointSize(value: number): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showVoronoi(): boolean,
    showVoronoi(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$LinePlusBarChart = {
    legend: nv$Legend,
    lines: nv$Line,
    lines2: nv$Line,
    bars: nv$HistoricalBar,
    bars2: nv$HistoricalBar,
    xAxis: nv$Nvd3Axis,
    x2Axis: nv$Nvd3Axis,
    y1Axis: nv$Nvd3Axis,
    y2Axis: nv$Nvd3Axis,
    y3Axis: nv$Nvd3Axis,
    y4Axis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    brushExtent(): [number, number] | [
        [number, number],
        [number, number]
    ],
    brushExtent(value: [number, number] | [
        [number, number],
        [number, number]
    ]): this,
    clearHighlights(): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    clipRadius(func: (d: any) => number): this,
    clipRadius(value: number): this,
    clipVoronoi(): boolean,
    clipVoronoi(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    defined(): (d: any, i: number) => boolean,
    defined(func: (d: any, i: number) => boolean): this,
    duration(): number,
    duration(value: number): this,
    focusEnable(): boolean,
    focusEnable(value: boolean): this,
    focusHeight(): number,
    focusHeight(value: number): this,
    focusShowAxisX(): boolean,
    focusShowAxisX(value: boolean): this,
    focusShowAxisY(): boolean,
    focusShowAxisY(value: boolean): this,
    forcePoint(): number[],
    forcePoint(value: number[]): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    highlightPoint(): (d: any) => boolean,
    highlightPoint(func: (d: any) => boolean): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    interpolate(): string,
    interpolate(value: string): this,
    isArea(): (d: any) => boolean,
    isArea(value: boolean): this,
    isArea(func: (d: any) => boolean): this,
    legendLeftAxisHint(): string,
    legendLeftAxisHint(value: string): this,
    legendRightAxisHint(): string,
    legendRightAxisHint(value: string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padData(): boolean,
    padData(value: boolean): this,
    padDataOuter(): number,
    padDataOuter(value: number): this,
    pointActive(): (d: any) => boolean,
    pointActive(func: (d: any) => boolean): this,
    pointxDomain(): number[],
    pointDomain(value: number[]): this,
    pointRange(): number[],
    pointRange(value: number[]): this,
    pointScale(): any,
    pointScale(value: any): this,
    pointSize(): (d: any) => number,
    pointSize(func: (d: any) => number): this,
    pointSize(value: number): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showVoronoi(): boolean,
    showVoronoi(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$LineWithFocusChart = {
    legend: nv$Legend,
    lines: nv$Line,
    lines2: nv$Line,
    xAxis: nv$Nvd3Axis,
    x2Axis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    y2Axis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    brushExtent(): [number, number] | [
        [number, number],
        [number, number]
    ],
    brushExtent(value: [number, number] | [
        [number, number],
        [number, number]
    ]): this,
    clearHighlights(): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    clipRadius(func: (d: any) => number): this,
    clipRadius(value: number): this,
    clipVoronoi(): boolean,
    clipVoronoi(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    defined(): (d: any, i: number) => boolean,
    defined(func: (d: any, i: number) => boolean): this,
    duration(): number,
    duration(value: number): this,
    focusHeight(): number,
    focusHeight(value: number): this,
    focusMargin(): nv$Margin,
    focusMargin(value: nv$Margin): this,
    forcePoint(): number[],
    forcePoint(value: number[]): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    highlightPoint(): (d: any) => boolean,
    highlightPoint(func: (d: any) => boolean): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    interpolate(): string,
    interpolate(value: string): this,
    isArea(): (d: any) => boolean,
    isArea(value: boolean): this,
    isArea(func: (d: any) => boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padData(): boolean,
    padData(value: boolean): this,
    padDataOuter(): number,
    padDataOuter(value: number): this,
    pointActive(): (d: any) => boolean,
    pointActive(func: (d: any) => boolean): this,
    pointxDomain(): number[],
    pointDomain(value: number[]): this,
    pointRange(): number[],
    pointRange(value: number[]): this,
    pointScale(): any,
    pointScale(value: any): this,
    pointSize(): (d: any) => number,
    pointSize(func: (d: any) => number): this,
    pointSize(value: number): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showVoronoi(): boolean,
    showVoronoi(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    xTickFormat(): (d: any) => string,
    xTickFormat(format: (t: any) => string): this,
    xTickFormat(format: string): this,
    xTickFormat(format: (d: any, i: any) => string): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this,
    yTickFormat(): (d: any) => string,
    yTickFormat(format: (t: any) => string): this,
    yTickFormat(format: string): this,
    yTickFormat(format: (d: any, i: any) => string): this
} & nv$Chart


declare type nv$MultiBarChart = {
    multibar: nv$MultiBar,
    legend: nv$Legend,
    controls: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    barColor(value: string[]): this,
    barColor(func: (d: any, i: number) => string): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    controlLabels(): any,
    controlLabels(value: any): this,
    defaultState(): any,
    defaultState(value: any): this,
    disabled(): boolean[],
    disabled(value: boolean[]): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    groupSpacing(): number,
    groupSpacing(value: number): this,
    height(): number,
    height(value: number): this,
    hideable(): boolean,
    hideable(value: boolean): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    reduceXTicks(): boolean,
    reduceXTicks(value: boolean): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    rotateLabels(): number,
    rotateLabels(value: number): this,
    showControls(): boolean,
    showControls(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    stacked(): boolean,
    stacked(value: boolean): this,
    stackOffset(offset: "silhouette"): this,
    stackOffset(offset: "wiggle"): this,
    stackOffset(offset: "expand"): this,
    stackOffset(offset: "zero"): this,
    stackOffset(offset: string): this,
    stackOffset(offset: (data: Array<[number, number]>) => number[]): this,
    staggerLabels(): boolean,
    staggerLabels(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$MultiBarHorizontalChart = {
    multibar: nv$MultiBar,
    legend: nv$Legend,
    controls: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    barColor(value: string[]): this,
    barColor(func: (d: any, i: number) => string): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    controlLabels(): any,
    controlLabels(value: any): this,
    defaultState(): any,
    defaultState(value: any): this,
    disabled(): boolean[],
    disabled(value: boolean[]): this,
    duration(): number,
    duration(value: number): this,
    forceY(): number[],
    forceY(value: number[]): this,
    groupSpacing(): number,
    groupSpacing(value: number): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    showControls(): boolean,
    showControls(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showValues(): boolean,
    showValues(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    stacked(): boolean,
    stacked(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    valuePadding(): number,
    valuePadding(value: number): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yErr(): (d: any, i: number) => number | number[],
    yErr(func: (d: any, i: number) => number | number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$MultiChart = {
    lines1: nv$Line,
    lines2: nv$Line,
    bars1: nv$MultiBar,
    bars2: nv$MultiBar,
    scatters1: nv$Scatter,
    scatters2: nv$Scatter,
    stack1: nv$StackedArea,
    stack2: nv$StackedArea,
    xAxis: nv$Nvd3Axis,
    yAxis1: nv$Nvd3Axis,
    yAxis2: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    interpolate(): string,
    interpolate(value: string): this,
    isArea(): (d: any) => boolean,
    isArea(value: boolean): this,
    isArea(func: (d: any) => boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain1(): number[],
    yDomain1(value: number[]): this,
    yDomain2(): number[],
    yDomain2(value: number[]): this
} & nv$Chart


declare type nv$OhlcBarChart = {
    bars: nv$OhlcBar,
    legend: nv$Legend,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    close(): (d: any) => number,
    close(func: (d: any) => number): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    duration(): number,
    duration(value: number): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    high(): (d: any) => number,
    high(func: (d: any) => number): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    low(): (d: any) => number,
    low(func: (d: any) => number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    open(): (d: any) => number,
    open(func: (d: any) => number): this,
    padData(): boolean,
    padData(value: boolean): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$ParallelCoordinatesChart = {
    parallelCoordinates: nv$ParallelCoordinates,
    legend: nv$Legend,
    tooltip: nv$Tooltip,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    dimensionData(): any,
    dimensionData(d: any): this,
    dimensionFormats(): string[],
    dimensionFormats(value: string[]): this,
    dimensionNames(): string[],
    dimensionNames(value: string[]): this,
    dimensions(): any,
    dimensions(value: any): this,
    displayBrush(): boolean,
    displayBrush(value: boolean): this,
    height(): number,
    height(value: number): this,
    lineTension(): number,
    lineTension(value: number): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    width(): number,
    width(value: number): this
} & nv$Chart


declare type nv$PieChart = {
    legend: nv$Legend,
    pie: nv$Pie,
    tooltip: nv$Tooltip,
    arcsRadius(): nv$ArcsRadius[],
    arcsRadius(value: nv$ArcsRadius[]): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    cornerRadius(): number,
    cornerRadius(value: number): this,
    defaultState(): any,
    defaultState(value: any): this,
    donut(): boolean,
    donut(value: boolean): this,
    donutLabelsOutside(): boolean,
    donutLabelsOutside(value: boolean): this,
    donutRatio(): number,
    donutRatio(value: number): this,
    duration(): number,
    duration(value: number): this,
    endAngle(): (d: any) => number,
    endAngle(func: (d: any) => number): this,
    growOnHover(): boolean,
    growOnHover(value: boolean): this,
    height(): number,
    height(value: number): this,
    id(): any,
    id(value: number | string): this,
    labelFormat(): string,
    labelFormat(value: string): this,
    labelFormat(format: (d: any) => string): this,
    labelSunbeamLayout(): boolean,
    labelSunbeamLayout(value: boolean): this,
    labelThreshold(): number,
    labelThreshold(value: number): this,
    labelType(): string,
    labelType(value: "key"): this,
    labelType(value: "value"): this,
    labelType(value: "percent"): this,
    labelType(value: string): this,
    labelType(func: (d: any, i: number, values: any) => string): this,
    labelsOutside(): boolean,
    labelsOutside(value: boolean): this,
    legendPosition(): string,
    legendPosition(value: "top"): this,
    legendPosition(value: "right"): this,
    legendPosition(value: string): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padAngle(): number,
    padAngle(value: number): this,
    pieLabelsOutside(): boolean,
    pieLabelsOutside(value: boolean): this,
    showLabels(): boolean,
    showLabels(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    startAngle(): (d: any) => number,
    startAngle(func: (d: any) => number): this,
    title(): string,
    title(value: string): this,
    titleOffset(): number,
    titleOffset(value: number): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    valueFormat(): string,
    valueFormat(value: string): this,
    valueFormat(format: (d: any) => string): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this
} & nv$Chart


declare type nv$ScatterChart = {
    scatter: nv$Scatter,
    xAxis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    legend: nv$Legend,
    tooltip: nv$Tooltip,
    distX: nv$Distribution,
    distY: nv$Distribution,
    clearHighlights(): this,
    clipEdge(): boolean,
    clipEdge(value: boolean): this,
    clipRadius(func: (d: any) => number): this,
    clipRadius(value: number): this,
    clipVoronoi(): boolean,
    clipVoronoi(value: boolean): this,
    color(value: string[]): this,
    color(func: (d: any, i: number) => string): this,
    defaultState(): any,
    defaultState(value: any): this,
    duration(): number,
    duration(value: number): this,
    forcePoint(): number[],
    forcePoint(value: number[]): this,
    forceX(): number[],
    forceX(value: number[]): this,
    forceY(): number[],
    forceY(value: number[]): this,
    height(): number,
    height(value: number): this,
    highlightPoint(): (d: any) => boolean,
    highlightPoint(func: (d: any) => boolean): this,
    id(): any,
    id(value: number | string): this,
    interactive(): boolean,
    interactive(value: boolean): this,
    margin(): nv$Margin,
    margin(value: nv$Margin): this,
    noData(): string,
    noData(value: string): this,
    padData(): boolean,
    padData(value: boolean): this,
    padDataOuter(): number,
    padDataOuter(value: number): this,
    pointActive(): (d: any) => boolean,
    pointActive(func: (d: any) => boolean): this,
    pointxDomain(): number[],
    pointDomain(value: number[]): this,
    pointRange(): number[],
    pointRange(value: number[]): this,
    pointScale(): any,
    pointScale(value: any): this,
    pointSize(): (d: any) => number,
    pointSize(func: (d: any) => number): this,
    pointSize(value: number): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showDistX(): boolean,
    showDistX(value: boolean): this,
    showDistY(): boolean,
    showDistY(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showVoronoi(): boolean,
    showVoronoi(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltipXContent(): (d: any) => string,
    tooltipXContent(func: (d: any) => string): this,
    tooltipYContent(): (d: any) => string,
    tooltipYContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useVoronoi(): boolean,
    useVoronoi(value: boolean): this,
    width(): number,
    width(value: number): this,
    x(): (d: any) => any,
    x(func: (d: any) => any): this,
    xDomain(): number[],
    xDomain(value: number[]): this,
    xRange(): number[],
    xRange(value: number[]): this,
    xScale(): any,
    xScale(value: any): this,
    y(): (d: any) => number,
    y(func: (d: any) => number): this,
    yDomain(): number[],
    yDomain(value: number[]): this,
    yRange(): number[],
    yRange(value: number[]): this,
    yScale(): any,
    yScale(value: any): this
} & nv$Chart


declare type nv$StackedAreaChart = {
    stacked: nv$StackedArea,
    legend: nv$Legend,
    controls: nv$Legend,
    xAxis: nv$Nvd3Axis,
    x2Axis: nv$Nvd3Axis,
    yAxis: nv$Nvd3Axis,
    y2Axis: nv$Nvd3Axis,
    tooltip: nv$Tooltip,
    focus: nv$Focus,
    controlLabels(): any,
    controlLabels(value: any): this,
    defaultState(): any,
    defaultState(value: any): this,
    noData(): string,
    noData(value: string): this,
    rightAlignYAxis(): boolean,
    rightAlignYAxis(value: boolean): this,
    showLegend(): boolean,
    showLegend(value: boolean): this,
    showXAxis(): boolean,
    showXAxis(value: boolean): this,
    showYAxis(): boolean,
    showYAxis(value: boolean): this,
    tooltipContent(): (d: any) => string,
    tooltipContent(func: (d: any) => string): this,
    tooltips(): boolean,
    tooltips(value: boolean): this,
    useInteractiveGuideline(): boolean,
    useInteractiveGuideline(value: boolean): this,
    focusEnable(): boolean,
    focusEnable(value: boolean): this,
    focusHeight(): number,
    focusHeight(value: number): this,
    showControls(): boolean,
    showControls(value: boolean): this,
    brushExtent(): [number, number] | [
        [number, number],
        [number, number]
    ],
    brushExtent(value: [number, number] | [
        [number, number],
        [number, number]
    ]): this
} & nv$StackedArea & nv$Chart


declare type nv$SunburstChart = {
    sunburst: nv$Sunburst,
    tooltip: nv$Tooltip,
    duration(): number,
    duration(value: number): this,
    defaultState(): any,
    defaultState(value: any): this,
    noData(): string,
    noData(value: string): this
} & nv$Sunburst & nv$Chart


declare interface nv$Models {
    boxPlotChart(): nv$BoxPlotChart,
        bullet(): nv$Bullet,
        bulletChart(): nv$BulletChart,
        candlestickBar(): nv$CandlestickBar,
        candlestickBarChart(): nv$CandlestickBarChart,
        cumulativeLineChart(): nv$CumulativeLineChart,
        discreteBar(): nv$DiscreteBar,
        discreteBarChart(): nv$DiscreteBarChart,
        distribution(): nv$Distribution,
        historicalBar(): nv$HistoricalBar,
        historicalBarChart(bar_model?: nv$HistoricalBar): nv$HistoricalBarChart,
        ohlcBar(): nv$OhlcBar,
        ohlcBarChart(): nv$OhlcBarChart,
        legend(): nv$Legend,
        line(): nv$Line,
        lineChart(): nv$LineChart,
        linePlusBarChart(): nv$LinePlusBarChart,
        lineWithFocusChart(): nv$LineWithFocusChart,
        multiBarChart(): nv$MultiBarChart,
        multiBarHorizontalChart(): nv$MultiBarHorizontalChart,
        multiChart(): nv$MultiChart,
        parallelCoordinates(): nv$ParallelCoordinates,
        parallelCoordinatesChart(): nv$ParallelCoordinatesChart,
        pie(): nv$Pie,
        pieChart(): nv$PieChart,
        scatter(): nv$Scatter,
        scatterChart(): nv$ScatterChart,
        sparkline(): nv$SparkLine,
        sparklinePlus(): nv$SparkLinePlus,
        stackedArea(): nv$StackedArea,
        stackedAreaChart(): nv$StackedAreaChart,
        sunburst(): nv$Sunburst,
        sunburstChart(): nv$SunburstChart,
        tooltip(): nv$Tooltip
}

declare interface nv$Nvd3Static {
    dev: boolean,
        charts: any,
        models: nv$Models,
        tooltip: nv$Nvd3TooltipStatic,
        utils: nv$Utils,
        logs: any,
        addGraph<TChart>(factory: nv$ChartFactory<TChart>): void,
        addGraph<TChart>(generate: () => TChart, callBack?: (chart: TChart) => void): void,
        log(topic: string, value?: string): string,
        log(arg: any[]): any
}
declare
var nv: nv$Nvd3Static;
declare module 'nvd3' {
    declare module.exports: typeof nv
}