/**
 * Flowtype definitions for validate.js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface ValidateJS$Validator {
    message?: string | ((
        value: any,
        attribute: any,
        validatorOptions: any,
        attributes: any,
        globalOptions: any) => string)
}

declare export type Validator$Date = {
    earliest?: string,
    latest?: string,
    notValid?: string,
    tooEarly?: string,
    tooLate?: string
} & ValidateJS$Validator


declare export type Validator$DateTime = {
    dateOnly?: boolean
} & Validator$Date


declare export type Validator$Email = {} & ValidateJS$Validator


declare export type Validator$Equality = {
    attribute?: string,
    comparator?: (v1: any, v2: any) => boolean
} & ValidateJS$Validator


declare export type Validator$Exclusion = {
    within: any[] | {
        [key: string]: any
    }
} & ValidateJS$Validator


declare export type Validator$Format = {
    pattern: string | RegExp,
    flags?: string
} & ValidateJS$Validator


declare export type Validator$Inclusion = {
    within: any[] | {
        [key: string]: any
    }
} & ValidateJS$Validator


declare export type Validator$Length = {
    is?: number,
    minimum?: number,
    maximum?: number,
    notValid?: string,
    tooLong?: string,
    tooShort?: string,
    wrongLength?: string,
    tokenizer?: (value: string | any[]) => string | any[]
} & ValidateJS$Validator


declare export type Validator$Numericality = {
    onlyInteger?: boolean,
    strict?: boolean,
    greaterThan?: number,
    greaterThanOrEqualTo?: number,
    equalTo?: number,
    lessThanOrEqualTo?: number,
    lessThan?: number,
    divisibleBy?: number,
    odd?: boolean,
    even?: boolean,
    notValid?: string,
    notInteger?: string,
    notGreaterThan?: string,
    notGreaterThanOrEqualTo?: string,
    notEqualTo?: string,
    notLessThanOrEqualTo?: string,
    notLessThan?: string,
    notDivisibleBy?: string,
    notOdd?: string,
    notEven?: string
} & ValidateJS$Validator


declare export type Validator$Presence = {} & ValidateJS$Validator


declare export type Validator$Url = {
    schemes?: [string | RegExp],
    allowLocal?: boolean
} & ValidateJS$Validator


declare export interface ValidateJS$Field {
    date?: Validator$Date | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Date),
        datetime?: Validator$DateTime | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$DateTime),
        email?: Validator$Email | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Email),
        equality?: Validator$Equality | string | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Equality),
        exclusion?: Validator$Exclusion | any[] | {
            [key: string]: any
        } | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Exclusion),
        format?: Validator$Format | string | RegExp | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Format),
        inclusion?: Validator$Inclusion | any[] | {
            [key: string]: any
        } | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Inclusion),
        length?: Validator$Length | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Length),
        numericality?: Validator$Numericality | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Numericality),
        presence?: Validator$Presence | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Presence),
        url?: Validator$Url | boolean | ((
            value: any,
            attributes: any,
            attributeName: any,
            options: any,
            constraints: any) => Validator$Url)
}

declare export interface ValidateJS$Constraints {
    [attribute: string]: ValidateJS$Field | ((
        value: any,
        attributes: any,
        attributeName: any,
        options: any,
        constraints: any) => ValidateJS$Field)
}