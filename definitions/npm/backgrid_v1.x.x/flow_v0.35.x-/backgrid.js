// @flow
/**
 * Flowtype definitions for backgrid
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Backgrid$GridOptions {
    columns: Backgrid$Column[],
        collection: Backbone.Collection<Backbone.Model>,
        header?: Backgrid$Header,
        body?: Backgrid$Body,
        row?: Backgrid$Row,
        footer?: Backgrid$Footer
}

declare class Header mixins Backbone.View<Backbone.Model>{}

declare class Footer mixins Backbone.View<Backbone.Model>{}

declare class Row mixins Backbone.View<Backbone.Model>{}

declare class Command {
    moveUp(): boolean;
    moveDown(): boolean;
    moveLeft(): boolean;
    moveRight(): boolean;
    save(): boolean;
    cancel(): boolean;
    passThru(): boolean
}

declare class CellFormatter {
    fromRaw(rawData: any, model: Backbone.Model): void;
    toRaw(formattedData: any, model: Backbone.Model): void
}

declare class NumberFormatter mixins CellFormatter {}

declare class PercentFormatter mixins NumberFormatter {}

declare class DateTimeFormatter mixins CellFormatter {}

declare class StringFormatter mixins CellFormatter {}

declare class EmailFormatter mixins CellFormatter {}

declare class SelectFormatter mixins CellFormatter {}

declare class CellEditor mixins Backbone.View<Backbone.Model>{
    initialize(options?: any): void;
    postRender(model: Backbone.Model, column: Backbone.Model): void
}

declare class InputCellEditor mixins CellEditor {
    render(): void;
    saveOrCancel(event: any): void
}

declare class Cell mixins Backbone.View<Backbone.Model>{
    tagName: string;
    formatter: Backgrid$CellFormatter;
    editor: Backgrid$InputCellEditor;
    enterEditMode(): void;
    renderError(): void;
    exitEditMode(): void;
    remove(): void
}

declare class StringCell mixins Cell {}

declare interface Backgrid$ColumnAttr {
    name: string,
        cell: string,
        headerCell: string,
        label: string,
        sortable: boolean,
        editable: boolean,
        renderable: boolean,
        formater: string
}

declare class Column mixins Backbone.Model {
    initialize(options?: any): void
}

declare class Body mixins Backbone.View<Backbone.Model>{
    tagName: string;
    initialize(options?: any): void;
    insertRow(
        model: Backbone.Model,
        collection: Backbone.Collection<Backbone.Model>,
        options: any): void;
    moveToNextCell(model: Backbone.Model, cell: Backgrid$Column, command: Backgrid$Command): void;
    refresh(): Backgrid$Body;
    remove(): Backgrid$Body;
    removeRow(
        model: Backbone.Model,
        collection: Backbone.Collection<Backbone.Model>,
        options: any): void;
    render(): Backgrid$Body
}

declare class Grid mixins Backbone.View<Backbone.Model>{
    body: Backgrid$Body;
    className: string;
    footer: any;
    header: any;
    tagName: string;
    constructor(options: Backgrid$GridOptions): this;
    initialize(options: any): void;
    getSelectedModels(): Backbone.Model[];
    insertColumn(...options: any[]): Backgrid$Grid;
    insertRow(
        model: Backbone.Model,
        collection: Backbone.Collection<Backbone.Model>,
        options: any): void;
    remove(): Backgrid$Grid;
    removeColumn(...options: any[]): Backgrid$Grid;
    removeRow(
        model: Backbone.Model,
        collection: Backbone.Collection<Backbone.Model>,
        options: any): void;
    render(): Backgrid$Grid
}
declare module 'backgrid' {
    declare module.exports: typeof Backgrid
}