/**
 * Flowtype definitions for dojox.collections
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections.html
 * 
Deprecated.  Should require dojox/collections modules directly rather than trying to access them through
this module.
*/
declare interface dojox$collections {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/_base.html
 */
declare interface collections$_base {

    /**
     * 
     */
    Set: Object,

        /**
         * Returns a new object of type dojox.collections.ArrayList
         * @param arr Optional
         */
        ArrayList(arr: any[]): void,

        /**
         * 
         * @param data 
         */
        BinaryTree(data: any): void,

        /**
         * Returns an object of type dojox.collections.Dictionary
         * @param dictionary Optional
         */
        Dictionary(dictionary: undefined.Dictionary): void,

        /**
         * return an object of type dojox.collections.DictionaryEntry
         * @param k 
         * @param v 
         */
        DictionaryEntry(k: String, v: Object): void,

        /**
         * return an object of type dojox.collections.DictionaryIterator
         * @param obj 
         */
        DictionaryIterator(obj: Object): void,

        /**
         * return an object of type dojox.collections.Iterator
         * @param a 
         */
        Iterator(a: any[]): void,

        /**
         * return an object of type dojox.collections.Queue
         * @param arr Optional
         */
        Queue(arr: any[]): void,

        /**
         * creates a collection that acts like a dictionary but is also internally sorted.
         * Note that the act of adding any elements forces an internal resort, making this object potentially slow.
         * @param dictionary Optional
         */
        SortedList(dictionary: Object): void,

        /**
         * returns an object of type dojox.collections.Stack
         * @param arr Optional
         */
        Stack(arr: any[]): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/ArrayList.html
 * 
Returns a new object of type dojox.collections.ArrayList
 * @param arr Optional
*/
declare interface collections$ArrayList {
    (arr?: any[]): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/BinaryTree.html
 * @param data 
 */
declare interface collections$BinaryTree {
    (data: any): void
}

declare
var TraversalMethods: Object;


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/BinaryTree.TraversalMethods.html
 */
declare interface BinaryTree$TraversalMethods {

    /**
     * 
     */
    Inorder: number,

        /**
         * 
         */
        Postorder: number,

        /**
         * 
         */
        Preorder: number
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/Dictionary.html
 * 
Returns an object of type dojox.collections.Dictionary
 * @param dictionary Optional
*/
declare interface collections$Dictionary {
    (dictionary?: undefined.Dictionary): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/Queue.html
 * 
return an object of type dojox.collections.Queue
 * @param arr Optional
*/
declare interface collections$Queue {
    (arr?: any[]): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/SortedList.html
 * 
creates a collection that acts like a dictionary but is also internally sorted.
Note that the act of adding any elements forces an internal resort, making this object potentially slow.
 * @param dictionary Optional
*/
declare interface collections$SortedList {
    (dictionary?: Object): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/collections/Stack.html
 * 
returns an object of type dojox.collections.Stack
 * @param arr Optional
*/
declare interface collections$Stack {
    (arr?: any[]): void
}
declare module 'dojox/collections' {
    declare var exp: dojox$collections;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/ArrayList' {
    declare var exp: undefined.ArrayList;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/BinaryTree' {
    declare var exp: undefined.BinaryTree;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/BinaryTree.TraversalMethods' {
    declare var exp: undefined.TraversalMethods;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/Dictionary' {
    declare var exp: undefined.Dictionary;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/Queue' {
    declare var exp: undefined.Queue;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/Stack' {
    declare var exp: undefined.Stack;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/SortedList' {
    declare var exp: undefined.SortedList;
    declare module.exports: typeof exp
}
declare module 'dojox/collections/_base' {
    declare var exp: undefined._base;
    declare module.exports: typeof exp
}