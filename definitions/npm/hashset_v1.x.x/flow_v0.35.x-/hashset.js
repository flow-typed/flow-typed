/**
 * Flowtype definitions for hashset
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface IHashSet<TValue>{
    add(value: TValue): void,
    addAll(arr: TValue[]): void,
    contains(value: TValue): boolean,
    clear(): void,
    isEmpty(): boolean,
    values(): TValue[],
    remove(value: TValue): void,
    size(): number,
    clone(): IHashSet<TValue>,
    isSubsetOf(set: IHashSet<TValue>): boolean,
    intersection(set: IHashSet<TValue>): IHashSet<TValue>,
    union(set: IHashSet<TValue>): IHashSet<TValue>,
    complement(set: IHashSet<TValue>): IHashSet<TValue >
}
declare interface IHashSetStatic {
    new<TValue>(): IHashSet<TValue>,
        new<TValue>(options: IHashtableOptions<TValue>): IHashSet<TValue>,
        new<TValue>(
            hashCode?: (value: TValue) => any,
            equals?: (value1: TValue, value2: TValue) => boolean): IHashSet<TValue >
}
declare var HashSet: IHashSetStatic;
declare module 'hashset' {
    declare module.exports: typeof HashSet
}