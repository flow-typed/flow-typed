/**
 * Flowtype definitions for request
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'request' {
    declare export interface request$RequestAPI<TRequest, TOptions, TUriUrlOptions>{
        defaults(
            options: TOptions): request$RequestAPI<TRequest,
        TOptions,
        request$RequiredUriUrl>,
        defaults(
            options: request$RequiredUriUrl & TOptions): request$DefaultUriUrlRequestApi<TRequest,
        TOptions,
        request$OptionalUriUrl>,
        (uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        (uri: string, callback?: request$RequestCallback): TRequest,
        (options: TUriUrlOptions & TOptions, callback?: request$RequestCallback): TRequest,
        get(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        get(uri: string, callback?: request$RequestCallback): TRequest,
        get(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        post(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        post(uri: string, callback?: request$RequestCallback): TRequest,
        post(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        put(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        put(uri: string, callback?: request$RequestCallback): TRequest,
        put(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        head(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        head(uri: string, callback?: request$RequestCallback): TRequest,
        head(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        patch(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        patch(uri: string, callback?: request$RequestCallback): TRequest,
        patch(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        del(uri: string, options?: TOptions, callback?: request$RequestCallback): TRequest,
        del(uri: string, callback?: request$RequestCallback): TRequest,
        del(
            options: TUriUrlOptions & TOptions,
            callback?: request$RequestCallback): TRequest,
        forever(agentOptions: any, optionsArg: any): TRequest,
        jar(): request$CookieJar,
        cookie(str: string): request$Cookie,
        initParams: any,
        debug: boolean
    }

    declare type request$DefaultUriUrlRequestApi<TRequest, TOptions, TUriUrlOptions>= {
        defaults(
            options: TOptions): request$DefaultUriUrlRequestApi<TRequest,
        TOptions,
        request$OptionalUriUrl>,
        (): TRequest,
        get(): TRequest,
        post(): TRequest,
        put(): TRequest,
        head(): TRequest,
        patch(): TRequest,
        del(): TRequest
    } & request$RequestAPI


    declare interface request$CoreOptions {
        baseUrl?: string,
            callback?: (error: any, response: http.IncomingMessage, body: any) => void,
            jar?: any,
            formData?: any,
            form?: any,
            auth?: request$AuthOptions,
            oauth?: request$OAuthOptions,
            aws?: request$AWSOptions,
            hawk?: request$HawkOptions,
            qs?: any,
            qsStringifyOptions?: any,
            qsParseOptions?: any,
            json?: any,
            multipart?: request$RequestPart[] | request$Multipart,
            agent?: http.Agent | https.Agent,
            agentOptions?: any,
            agentClass?: any,
            forever?: any,
            host?: string,
            port?: number,
            method?: string,
            headers?: request$Headers,
            body?: any,
            followRedirect?: boolean | ((response: http.IncomingMessage) => boolean),
            followAllRedirects?: boolean,
            maxRedirects?: number,
            encoding?: string,
            pool?: any,
            timeout?: number,
            proxy?: any,
            strictSSL?: boolean,
            gzip?: boolean,
            preambleCRLF?: boolean,
            postambleCRLF?: boolean,
            key?: Buffer,
            cert?: Buffer,
            passphrase?: string,
            ca?: string | Buffer | string[] | Buffer[],
            har?: request$HttpArchiveRequest,
            useQuerystring?: boolean
    }

    declare interface request$UriOptions {
        uri: string
    }

    declare interface request$UrlOptions {
        url: string
    }

    declare export type request$RequiredUriUrl = request$UriOptions | request$UrlOptions;

    declare interface request$OptionalUriUrl {
        uri?: string,
            url?: string
    }

    declare export type request$OptionsWithUri = request$UriOptions & request$CoreOptions;

    declare export type request$OptionsWithUrl = request$UrlOptions & request$CoreOptions;

    declare export type request$Options = request$OptionsWithUri | request$OptionsWithUrl;

    declare export interface request$RequestCallback {
        (error: any, response: http.IncomingMessage, body: any): void
    }

    declare export interface request$HttpArchiveRequest {
        url?: string,
            method?: string,
            headers?: request$NameValuePair[],
            postData?: {
                mimeType?: string,
                params?: request$NameValuePair[]
            }
    }

    declare export interface request$NameValuePair {
        name: string,
            value: string
    }

    declare export interface request$Multipart {
        chunked?: boolean,
            data?: {
                content - type?: string,
                body: string
            }[]
    }

    declare export interface request$RequestPart {
        headers?: request$Headers,
            body: any
    }

    declare export type request$Request = {
        readable: boolean,
        writable: boolean,
        getAgent(): http.Agent,
        pipeDest(dest: any): void,
        setHeader(name: string, value: string, clobber?: boolean): request$Request,
        setHeaders(headers: request$Headers): request$Request,
        qs(q: Object, clobber?: boolean): request$Request,
        form(): FormData,
        form(form: any): request$Request,
        multipart(multipart: request$RequestPart[]): request$Request,
        json(val: any): request$Request,
        aws(opts: request$AWSOptions, now?: boolean): request$Request,
        auth(
            username: string,
            password: string,
            sendInmediately?: boolean,
            bearer?: string): request$Request,
        oauth(oauth: request$OAuthOptions): request$Request,
        jar(jar: request$CookieJar): request$Request,
        on(event: string, listener: Function): this,
        on(event: "request", listener: (req: http.ClientRequest) => void): this,
        on(event: "response", listener: (resp: http.IncomingMessage) => void): this,
        on(event: "data", listener: (data: Buffer | string) => void): this,
        on(event: "error", listener: (e: Error) => void): this,
        on(
            event: "complete",
            listener: (resp: http.IncomingMessage, body?: string | Buffer) => void): this,
        write(buffer: Buffer, cb?: Function): boolean,
        write(str: string, cb?: Function): boolean,
        write(str: string, encoding: string, cb?: Function): boolean,
        write(str: string, encoding?: string, fd?: string): boolean,
        end(): void,
        end(chunk: Buffer, cb?: Function): void,
        end(chunk: string, cb?: Function): void,
        end(chunk: string, encoding: string, cb?: Function): void,
        pause(): void,
        resume(): void,
        abort(): void,
        destroy(): void,
        toJSON(): Object
    }

    declare export interface request$Headers {
        [key: string]: any
    }

    declare export interface request$AuthOptions {
        user?: string,
            username?: string,
            pass?: string,
            password?: string,
            sendImmediately?: boolean,
            bearer?: string
    }

    declare export interface request$OAuthOptions {
        callback?: string,
            consumer_key?: string,
            consumer_secret?: string,
            token?: string,
            token_secret?: string,
            verifier?: string
    }

    declare export interface request$HawkOptions {
        credentials: any
    }

    declare export interface request$AWSOptions {
        secret: string,
            bucket?: string
    }

    declare export interface request$CookieJar {
        setCookie(cookie: request$Cookie, uri: string | url.Url, options?: any): void,
            getCookieString(uri: string | url.Url): string,
            getCookies(uri: string | url.Url): request$Cookie[]
    }

    declare export interface request$CookieValue {
        name: string,
            value: any,
            httpOnly: boolean
    }

    declare export type request$Cookie = {
        constructor(name: string, req: request$Request): void,
        str: string,
        expires: Date,
        path: string,
        toString(): string
    } & Array

    declare var request: request$RequestAPI<request$Request, request$CoreOptions, request$RequiredUriUrl>;
    declare module.exports: typeof request
}