// @flow
/**
 * Flowtype definitions for BasicValidators
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare class LettersOnlyValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class ZipCodeValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class EmailValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class UrlValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class RequiredValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class DateValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class DateISOValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class NumberValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class DigitValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class SignedDigitValidator mixins Validation.IStringValidator {
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class MinLengthValidator mixins Validation.IStringValidator {
    MinLength: number;
    constructor(MinLength?: number): this;
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class MaxLengthValidator mixins Validation.IStringValidator {
    MaxLength: number;
    constructor(MaxLength?: number): this;
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class RangeLengthValidator mixins Validation.IStringValidator {
    RangeLength: number[];
    constructor(RangeLength?: number[]): this;
    isAcceptable(s: string): boolean;
    MinLength: number;
    MaxLength: number;
    tagName: string
}

declare class MinValidator mixins Validation.IPropertyValidator {
    Min: number;
    constructor(Min?: number): this;
    isAcceptable(s: any): boolean;
    tagName: string
}

declare class MaxValidator mixins Validation.IPropertyValidator {
    Max: number;
    constructor(Max?: number): this;
    isAcceptable(s: any): boolean;
    tagName: string
}

declare class RangeValidator mixins Validation.IPropertyValidator {
    Range: number[];
    constructor(Range?: number[]): this;
    isAcceptable(s: any): boolean;
    Min: number;
    Max: number;
    tagName: string
}

declare class StepValidator mixins Validation.IPropertyValidator {
    Step: string;
    constructor(Step?: string): this;
    isAcceptable(s: any): boolean;
    tagName: string
}

declare class PatternValidator mixins Validation.IStringValidator {
    Pattern: string;
    constructor(Pattern?: string): this;
    isAcceptable(s: string): boolean;
    tagName: string
}

declare class ContainsValidator mixins Validation.IAsyncPropertyValidator {
    Options: Q.Promise<any[]>;
    constructor(Options: Q.Promise<any[]>): this;
    isAcceptable(s: string): Q.Promise<boolean>;
    isAsync: boolean;
    tagName: string
}
declare module 'node-validators' {
    declare module.exports: typeof Validators
}