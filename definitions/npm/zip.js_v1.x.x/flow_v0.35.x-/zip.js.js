/**
 * Flowtype definitions for zip.js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface FileEntry {}
declare
var npm$namespace$zip: {
    createReader: typeof zip$createReader,
    createWriter: typeof zip$createWriter,
}
declare
export var useWebWorkers: boolean;

declare
export var workerScriptsPath: string;

declare
export var workerScripts: {
    deflater?: string[],
    inflater?: string[]
};

declare
export class Reader {
    size: number;
    init(callback: () => void, onerror: (error: any) => void): void;
    readUint8Array(
        index: number,
        length: number,
        callback: (result: Uint8Array) => void,
        onerror?: (error: any) => void): void
}

declare
export class TextReader mixins Reader {
    constructor(text: string): this
}

declare
export class BlobReader mixins Reader {
    constructor(blob: Blob): this
}

declare
export class Data64URIReader mixins Reader {
    constructor(dataURI: string): this
}

declare
export class HttpReader mixins Reader {
    constructor(url: string): this
}

declare
export function zip$createReader(
    reader: zip$Reader,
    callback: (zipReader: zip$ZipReader) => void,
    onerror?: (error: any) => void): void

declare
export class ZipReader {
    getEntries(callback: (entries: zip$Entry[]) => void): void;
    close(callback?: () => void): void
}

declare
export interface zip$Entry {
    filename: string,
        directory: boolean,
        compressedSize: number,
        uncompressedSize: number,
        lastModDate: Date,
        lastModDateRaw: number,
        comment: string,
        crc32: number,
        getData(
            writer: zip$Writer,
            onend: (result: any) => void,
            onprogress?: (progress: number, total: number) => void,
            checkCrc32?: boolean): void
}

declare
export class Writer {
    init(callback: () => void, onerror?: (error: any) => void): void;
    writeUint8Array(array: Uint8Array, callback: () => void, onerror?: (error: any) => void): void;
    getData(callback: (data: any) => void, onerror?: (error: any) => void): void
}

declare
export class TextWriter mixins Writer {
    constructor(encoding: string): this
}

declare
export class BlobWriter mixins Writer {
    constructor(contentType: string): this
}

declare
export class FileWriter mixins Writer {
    constructor(fileEntry: FileEntry): this
}

declare
export class Data64URIWriter mixins Writer {
    constructor(mimeString?: string): this
}

declare
export function zip$createWriter(
    writer: zip$Writer,
    callback: (zipWriter: zip$ZipWriter) => void,
    onerror?: (error: any) => void,
    dontDeflate?: boolean): void

declare
export interface zip$WriteOptions {
    directory?: boolean,
        level?: number,
        comment?: string,
        lastModDate?: Date,
        version?: number
}

declare
export class ZipWriter {
    add(
        name: string,
        reader: zip$Reader,
        onend: () => void,
        onprogress?: (progress: number, total: number) => void,
        options?: zip$WriteOptions): void;
    close(callback: (result: any) => void): void
}