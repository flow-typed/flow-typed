/**
 * Flowtype definitions for reflect-metadata
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'reflect-metadata' {

}

declare
var npm$namespace$Reflect: {
        decorate: typeof Reflect$decorate,
        metadata: typeof Reflect$metadata,
        defineMetadata: typeof Reflect$defineMetadata,
        hasMetadata: typeof Reflect$hasMetadata,
        hasOwnMetadata: typeof Reflect$hasOwnMetadata,
        getMetadata: typeof Reflect$getMetadata,
        getOwnMetadata: typeof Reflect$getOwnMetadata,
        getMetadataKeys: typeof Reflect$getMetadataKeys,
        getOwnMetadataKeys: typeof Reflect$getOwnMetadataKeys,
        deleteMetadata: typeof Reflect$deleteMetadata,
    }
    /**
     * Applies a set of decorators to a target object.
     * @param decorators An array of decorators.
     * @param target The target object.
     * @returns  The result of applying the provided decorators.
     * @remarks  Decorators are applied in reverse order of their positions in the array.
     * @example  *
    class C { }

    // constructor
    C = Reflect.decorate(decoratorsArray, C);
    */
declare
function Reflect$decorate(decorators: ClassDecorator[], target: Function): Function


/**
 * A default metadata decorator factory that can be used on a class, class member, or parameter.
 * @param metadataKey The key for the metadata entry.
 * @param metadataValue The value for the metadata entry.
 * @returns  A decorator function.
 * @remarks  * If `metadataKey` is already defined for the target and target key, the
metadataValue for that key will be overwritten.
 * @example  *
// constructor
 * @Reflect  .metadata(key, value)
class C {
}

// property (on constructor, TypeScript only)
class C {
 * @Reflect  .metadata(key, value)
static staticProperty;
}

// property (on prototype, TypeScript only)
class C {
 * @Reflect  .metadata(key, value)
property;
}

// method (on constructor)
class C {
 * @Reflect  .metadata(key, value)
static staticMethod() { }
}

// method (on prototype)
class C {
 * @Reflect  .metadata(key, value)
method() { }
}
*/
declare
function Reflect$metadata(
    metadataKey: any,
    metadataValue: any): {
    (target: Function): void,
    (target: Object, propertyKey: string | ): void
}


/**
 * Define a unique metadata entry on the target.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param metadataValue A value that contains attached metadata.
 * @param target The target object on which to define metadata.
 * @example  *
class C {
}

// constructor
Reflect.defineMetadata("custom:annotation", options, C);

// decorator factory as metadata-producing annotation.
function MyAnnotation(options): ClassDecorator {
return target => Reflect.defineMetadata("custom:annotation", options, target);
}
*/
declare
function Reflect$defineMetadata(metadataKey: any, metadataValue: any, target: Object): void


/**
 * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param target The target object on which the metadata is defined.
 * @returns  `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
 * @example  *
class C {
}

// constructor
result = Reflect.hasMetadata("custom:annotation", C);
*/
declare
function Reflect$hasMetadata(metadataKey: any, target: Object): boolean


/**
 * Gets a value indicating whether the target object has the provided metadata key defined.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param target The target object on which the metadata is defined.
 * @returns  `true` if the metadata key was defined on the target object; otherwise, `false`.
 * @example  *
class C {
}

// constructor
result = Reflect.hasOwnMetadata("custom:annotation", C);
*/
declare
function Reflect$hasOwnMetadata(metadataKey: any, target: Object): boolean


/**
 * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param target The target object on which the metadata is defined.
 * @returns  The metadata value for the metadata key if found; otherwise, `undefined`.
 * @example  *
class C {
}

// constructor
result = Reflect.getMetadata("custom:annotation", C);
*/
declare
function Reflect$getMetadata(metadataKey: any, target: Object): any


/**
 * Gets the metadata value for the provided metadata key on the target object.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param target The target object on which the metadata is defined.
 * @returns  The metadata value for the metadata key if found; otherwise, `undefined`.
 * @example  *
class C {
}

// constructor
result = Reflect.getOwnMetadata("custom:annotation", C);
*/
declare
function Reflect$getOwnMetadata(metadataKey: any, target: Object): any


/**
 * Gets the metadata keys defined on the target object or its prototype chain.
 * @param target The target object on which the metadata is defined.
 * @returns  An array of unique metadata keys.
 * @example  *
class C {
}

// constructor
result = Reflect.getMetadataKeys(C);
*/
declare
function Reflect$getMetadataKeys(target: Object): any[]


/**
 * Gets the unique metadata keys defined on the target object.
 * @param target The target object on which the metadata is defined.
 * @returns  An array of unique metadata keys.
 * @example  *
class C {
}

// constructor
result = Reflect.getOwnMetadataKeys(C);
*/
declare
function Reflect$getOwnMetadataKeys(target: Object): any[]


/**
 * Deletes the metadata entry from the target object with the provided key.
 * @param metadataKey A key used to store and retrieve metadata.
 * @param target The target object on which the metadata is defined.
 * @returns  `true` if the metadata entry was found and deleted; otherwise, false.
 * @example  *
class C {
}

// constructor
result = Reflect.deleteMetadata("custom:annotation", C);
*/
declare
function Reflect$deleteMetadata(metadataKey: any, target: Object): boolean