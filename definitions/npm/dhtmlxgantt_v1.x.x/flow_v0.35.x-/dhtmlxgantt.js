

declare module 'dhtmlxgantt' {
	declare type GanttEventName = "onAfterAutoSchedule" | "onAfterBatchUpdate" | "onAfterLightbox" | "onAfterLinkAdd" | "onAfterLinkDelete" | "onAfterLinkUpdate" | "onAfterRedo" | "onAfterTaskAdd" | "onAfterTaskAutoSchedule" | "onAfterTaskDelete" | "onAfterTaskDrag" | "onAfterTaskMove" | "onAfterTaskUpdate" | "onAfterUndo" | "onAjaxError" | "onBeforeAutoSchedule" | "onBeforeBatchUpdate" | "onBeforeCollapse" | "onBeforeDataRender" | "onBeforeExpand" | "onBeforeGanttReady" | "onBeforeGanttRender" | "onBeforeLightbox" | "onBeforeLinkAdd" | "onBeforeLinkDelete" | "onBeforeLinkDisplay" | "onBeforeLinkUpdate" | "onBeforeParse" | "onBeforeRedo" | "onBeforeRowDragEnd" | "onBeforeTaskAdd" | "onBeforeTaskAutoSchedule" | "onBeforeTaskChanged" | "onBeforeTaskDelete" | "onBeforeTaskDisplay" | "onBeforeTaskDrag" | "onBeforeTaskMove" | "onBeforeTaskSelected" | "onBeforeTaskUpdate" | "onBeforeUndo" | "onCircularLinkError" | "onClear" | "onCollapse" | "onColumnResize" | "onColumnResizeEnd" | "onColumnResizeStart" | "onContextMenu" | "onDataRender" | "onEmptyClick" | "onError" | "onExpand" | "onGanttReady" | "onGanttRender" | "onGanttScroll" | "onGridHeaderClick" | "onGridResize" | "onGridResizeEnd" | "onGridResizeStart" | "onLightbox" | "onLightboxButton" | "onLightboxCancel" | "onLightboxChange" | "onLightboxDelete" | "onLightboxSave" | "onLinkClick" | "onLinkDblClick" | "onLinkIdChange" | "onLinkValidation" | "onLoadEnd" | "onLoadStart" | "onMouseMove" | "onOptionsLoad" | "onParse" | "onRowDragEnd" | "onRowDragStart" | "onScaleAdjusted" | "onScaleClick" | "onTaskClick" | "onTaskClosed" | "onTaskCreated" | "onTaskDblClick" | "onTaskDrag" | "onTaskIdChange" | "onTaskLoading" | "onTaskOpened" | "onTaskRowClick" | "onTaskSelected" | "onTaskUnselected" | "onTemplatesReady";

	declare interface GanttCallback {
		(...args: any[]): any
	}

	declare interface GanttTemplates {
		api_date(date: Date): string,
		date_grid(date: Date, task: any): string,
		date_scale(date: Date): string,
		drag_link(
		from: string | number, from_start: boolean, to: string | number, to_start: boolean
	): string,
		drag_link_class(
		from: string | number, from_start: boolean, to: string | number, to_start: boolean
	): string,
		grid_blank(task: any): string,
		grid_date_format(date: Date): string,
		grid_file(task: any): string,
		grid_folder(task: any): string,
		grid_header_class(columnName: string, column: any): string,
		grid_indent(task: any): string,
		grid_open(task: any): string,
		grid_row_class(start: Date, end: Date, task: any): string,
		link_class(link: any): string,
		link_description(link: any): string,
		progress_text(start: Date, end: Date, task: any): string,
		quick_info_class(start: Date, end: Date, task: any): void,
		quick_info_content(start: Date, end: Date, task: any): string,
		quick_info_date(start: Date, end: Date, task: any): string,
		quick_info_title(start: Date, end: Date, task: any): string,
		scale_cell_class(date: Date): string,
		scale_row_class(scale: any): string,
		task_cell_class(item: Date, date: Date): string,
		task_class(start: Date, end: Date, task: any): string,
		task_date(date: Date): string,
		task_row_class(start: Date, end: Date, task: any): string,
		task_text(start: Date, end: Date, task: any): string,
		task_time(start: Date, end: Date, task: any): string,
		task_unscheduled_time(task: any): void,
		time_picker(date: Date): string,
		tooltip_date_format(date: Date): string,
		tooltip_text(start: Date, end: Date, task: any): string,
		xml_date(date: Date): string,
		xml_format(date: Date): string,
		rightside_text(start: Date, end: Date, task: any): string,
		leftside_text(start: Date, end: Date, task: any): string,
		lightbox_header(start_date: Date, end_date: Date, task: any): string
	}

	declare interface GanttConfigOptions {
		api_date: string,
		auto_scheduling: boolean,
		auto_scheduling_descendant_links: boolean,
		auto_scheduling_initial: boolean,
		auto_scheduling_strict: boolean,
		autofit: boolean,
		autosize: boolean | string,
		autosize_min_width: number,
		branch_loading: boolean,
		buttons_left: any[],
		buttons_right: any[],
		columns: any[],
		correct_work_time: boolean,
		date_grid: string,
		date_scale: string,
		details_on_create: boolean,
		details_on_dblclick: boolean,
		drag_lightbox: boolean,
		drag_links: boolean,
		drag_mode: any,
		drag_move: boolean,
		drag_progress: boolean,
		drag_resize: boolean,
		duration_step: number,
		duration_unit: string,
		editable_property: string,
		end_date: Date,
		fit_tasks: boolean,
		grid_resize: boolean,
		grid_resizer_attribute: string,
		grid_resizer_column_attribute: string,
		grid_width: number,
		highlight_critical_path: boolean,
		inherit_scale_class: boolean,
		initial_scroll: boolean,
		keep_grid_width: boolean,
		layer_attribute: string,
		lightbox: any,
		lightbox_additional_height: number,
		link_arrow_size: number,
		link_attribute: string,
		link_line_width: number,
		link_wrapper_width: number,
		links: any,
		min_column_width: number,
		min_duration: number,
		min_grid_column_width: number,
		multiselect: boolean,
		multiselect_one_level: boolean,
		open_tree_initially: boolean,
		order_branch: boolean,
		order_branch_free: boolean,
		preserve_scroll: boolean,
		prevent_default_scroll: boolean,
		quick_info_detached: boolean,
		quickinfo_buttons: any[],
		readonly: boolean,
		readonly_property: string,
		redo: boolean,
		root_id: string | number,
		round_dnd_dates: boolean,
		row_height: number,
		scale_height: number,
		scale_offset_minimal: boolean,
		scale_unit: string,
		scroll_on_click: boolean,
		select_task: boolean,
		server_utc: boolean,
		show_chart: boolean,
		show_errors: boolean,
		show_grid: boolean,
		show_links: boolean,
		show_markers: boolean,
		show_progress: boolean,
		show_quick_info: boolean,
		show_task_cells: boolean,
		show_unscheduled: boolean,
		skip_off_time: boolean,
		smart_rendering: boolean,
		sort: boolean,
		start_date: Date,
		start_on_monday: boolean,
		static_background: boolean,
		step: number,
		subscales: any[],
		task_attribute: string,
		task_date: string,
		task_height: number,
		task_scroll_offset: number,
		time_picker: string,
		time_step: number,
		tooltip_hide_timeout: number,
		tooltip_offset_x: number,
		tooltip_offset_y: number,
		tooltip_timeout: number,
		touch: boolean | string,
		touch_drag: number | boolean,
		touch_feedback: boolean,
		type_renderers: any,
		types: any,
		undo: boolean,
		undo_actions: any,
		undo_steps: number,
		undo_types: any,
		work_time: boolean,
		xml_date: string
	}

	declare interface GanttDateHelpers {
		add(origin: Date, count: number, unit: string): Date,
		copy(origin: Date): Date,
		date_part(origin: Date): Date,
		time_part(origin: Date): Date,
		day_start(origin: Date): Date,
		month_start(origin: Date): Date,
		week_start(origin: Date): Date,
		year_start(origin: Date): Date,
		getISOWeek(origin: Date): number,
		getUTCISOWeek(origin: Date): number,
		date_to_str(format: string): any,
		str_to_date(format: string): any,
		convert_to_utc(origin: Date): Date,
		to_fixed(value: number): string
	}

	declare interface GanttHotkeys {
		edit_save: number,
		edit_cancel: number
	}

	declare interface GanttLocaleDate {
		month_full: string[],
		month_short: string[],
		day_full: string[],
		day_short: string[]
	}

	declare interface GanttLocaleLabels {
		new_task: string,
		icon_save: string,
		icon_cancel: string,
		icon_details: string,
		icon_edit: string,
		icon_delete: string,
		confirm_closing: string,
		confirm_deleting: string,
		section_description: string,
		section_time: string,
		confirm_link_deleting: string,
		link_from: string,
		link_to: string,
		link_start: string,
		link_end: string,
		minutes: string,
		hours: string,
		days: string,
		weeks: string,
		months: string,
		years: string
	}

	declare interface GanttLocale {
		date: GanttLocaleDate,
		labels: GanttLocaleLabels
	}

	declare interface GanttEnterprise {
		getGanttInstance(): GanttStatic
	}

	declare interface GanttStatic {
		templates: GanttTemplates,
		config: GanttConfigOptions,
		date: GanttDateHelpers,
		keys: GanttHotkeys,
		skin: String,
		version: String,
		locale: GanttLocale,
		$click: any,
		addLink(link: any): string | number,
		addLinkLayer(func: GanttCallback | any): string,
		addMarker(marker: any): string,
		addTask(task: any, parent: string, index?: number): string | number,
		addTaskLayer(func: GanttCallback | any): string,
		alert(config: any): void,
		assert(expression: boolean, errorMessage: string): void,
		attachEvent(name: GanttEventName, handler: GanttCallback): string,
		autoSchedule(): void,
		batchUpdate(callback: GanttCallback): void,
		bind(method: GanttCallback, thisArg: any): GanttCallback,
		calculateDuration(start: Date, end: Date): number,
		calculateEndDate(start: Date, duration: number, unit: string): Date,
		calculateTaskLevel(task: any): number,
		callEvent(name: string, params: any[]): boolean,
		changeLightboxType(id: string | number): void,
		changeLinkId(id: string | number, new_id: string | number): void,
		changeTaskId(id: string | number, new_id: string | number): void,
		checkEvent(name: GanttEventName): boolean,
		clearAll(): void,
		close(id: string | number): void,
		collapse(): void,
		confirm(config: any): void,
		copy(task: any): any,
		correctTaskWorkTime(task: any): void,
		createTask(task: any, parent: string, index?: number): string | number,
		dataProcessor(url: string): void,
		dateFromPos(pos: number): void,
		defined(task: any): boolean,
		deleteLink(id: string | number): void,
		deleteMarker(markerId: string): void,
		deleteTask(id: string): void,
		detachAllEvents(): void,
		detachEvent(id: string): void,
		eachSelectedTask(code: GanttCallback): void,
		eachTask(code: GanttCallback, parent?: string | number, master?: any): void,
		event(
		node: HTMLElement | string, event: string, handler: GanttCallback, master?: any
	): string,
		eventRemove(id: string): void,
		expand(): void,
		getChildren(id: string | number): any[],
		getClosestWorkTime(config: any): Date,
		getGlobalTaskIndex(id: string | number): void,
		getGridColumn(name: string): any,
		getGridColumns(): any[],
		getLabel(property: string, key: string | number): void,
		getLastSelectedTask(): string | number,
		getLightbox(): HTMLElement,
		getLightboxSection(name: string): any,
		getLightboxType(): string,
		getLightboxValues(): any,
		getLink(id: string | number): any,
		getLinkCount(): number,
		getLinkNode(id: string | number): HTMLElement,
		getLinks(): any[],
		getMarker(markerId: string): any,
		getNext(id: string | number): string | number,
		getNextSibling(id: string | number): string | number,
		getParent(id: string | number): string | number,
		getPrev(id: string | number): string | number,
		getPrevSibling(id: string | number): string | number,
		getRedoStack(): any[],
		getScrollState(): any,
		getSelectedId(): string | number,
		getSelectedTasks(): any[],
		getSiblings(id: string | number): any[],
		getSlack(task1: any, task2: any): number | string,
		getState(): any,
		getSubtaskDates(task_id?: string | number): any,
		getTask(id: string | number): any,
		getTaskByTime(from?: Date, to?: Date): any[],
		getTaskCount(): number,
		getTaskIndex(id: string | number): number,
		getTaskNode(id: string | number): HTMLElement,
		getTaskPosition(task: any, from: Date, to: Date): any,
		getTaskRowNode(id: string | number): HTMLElement,
		getTaskTop(id: number | string): number,
		getUndoStack(): any[],
		getVisibleTaskCount(): number,
		getWorkHours(date: Date): any[],
		groupBy(config: any): void,
		hasChild(id: string | number): boolean,
		hideCover(box?: HTMLElement): void,
		hideLightbox(): void,
		hideQuickInfo(): void,
		init(container: string | HTMLElement, from?: Date, to?: Date): void,
		isChildOf(childId: string | number, parentId: string | number): boolean,
		isCriticalLink(link: any): boolean,
		isCriticalTask(task: any): boolean,
		isLinkAllowed(link: any): boolean,
		isLinkExists(id: string | number): boolean,
		isSelectedTask(task: string | number): boolean,
		isTaskExists(id: string | number): boolean,
		isTaskVisible(id: string | number): boolean,
		isUnscheduledTask(task: any): boolean,
		isWorkTime(date: Date, timeunit: string): boolean,
		load(url: string, type?: string, callback?: GanttCallback): void,
		locate(e: Event): string | number,
		message(config: any): void,
		mixin(target: any, source: any, force: boolean): void,
		modalbox(config: any): void,
		moveTask(sid: string | number, tindex: number, parent?: string | number): void,
		open(id: string | number): void,
		parse(url: string | any, type?: string): void,
		posFromDate(date: Date): void,
		redo(): void,
		refreshData(): void,
		refreshLink(id: string | number): void,
		refreshTask(id: string | number): void,
		removeLinkLayer(layerId: string): void,
		removeTaskLayer(layerId: string): void,
		render(): void,
		renderMarkers(): void,
		resetLightbox(): void,
		resetProjectDates(task: any): void,
		resetSkin(): void,
		resizeLightbox(): void,
		roundDate(date: Date): Date,
		roundTaskDates(task: any): void,
		scrollTo(x: number, y: number): void,
		selectTask(id: string | number): string | number,
		serialize(type?: string): void,
		serverList(list_name: string, options?: any[]): void,
		setParent(task: number | string, pid: number | string): void,
		setSizes(): void,
		setWorkTime(config: any): void,
		showCover(box?: HTMLElement): void,
		showDate(date: Date): void,
		showLightbox(id: string | number): void,
		showQuickInfo(id: string | number): void,
		showTask(id: string | number): void,
		sort(
		field: string | GanttCallback, desc?: boolean, parent?: string | number, silent?: boolean
	): void,
		toggleTaskSelection(task: string | number): void,
		uid(): number,
		undo(): void,
		unselectTask(): void,
		updateCollection(collection: string, options: any[]): boolean,
		updateLink(id: string): void,
		updateMarker(markerId: string): void,
		updateTask(id: string): void
	}

			
}