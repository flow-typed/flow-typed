// @flow
/**
 * Flowtype definitions for angular-ui-router
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'angular-ui-router' {
    declare module.exports: typeof ui.router
    declare     export type IState = undefined.IState;
    declare     export type IStateProvider = undefined.IStateProvider;
    declare     export type IUrlMatcher = undefined.IUrlMatcher;
    declare     export type IUrlRouterProvider = undefined.IUrlRouterProvider;
    declare     export type IStateOptions = undefined.IStateOptions;
    declare     export type IHrefOptions = undefined.IHrefOptions;
    declare     export type IStateService = undefined.IStateService;
    declare     export type IResolvedState = undefined.IResolvedState;
    declare     export type IStateParamsService = undefined.IStateParamsService;
    declare     export type IUrlRouterService = undefined.IUrlRouterService;
    declare     export type IUiViewScrollProvider = undefined.IUiViewScrollProvider;
    declare     export type IType = undefined.IType;
}
declare module 'ui' {
    declare     export type IState = undefined.IState;
    declare interface IUnfoundState {
        to: string,
            toParams: {},
            options: IStateOptions
    }
    declare     export type IStateProvider = undefined.IStateProvider;
    declare     export type IUrlMatcher = undefined.IUrlMatcher;
    declare interface IUrlMatcherFactory {

        /**
         * Creates a UrlMatcher for the specified pattern.
         * @param pattern The URL pattern.
         * @returns  The UrlMatcher.
         */
        compile(pattern: string): IUrlMatcher,

            /**
             * Returns true if the specified object is a UrlMatcher, or false otherwise.
             * @param o The object to perform the type check against.
             * @returns  Returns true if the object matches the IUrlMatcher interface, by implementing all the same methods.
             */
            isMatcher(o: any): boolean,

            /**
             * Returns a type definition for the specified name
             * @param name The type definition name
             * @returns  The type definition
             */
            type(name: string): IType,

            /**
             * Registers a custom Type object that can be used to generate URLs with typed parameters.
             * @param  The type definition.
             * @param  A function that is injected before the app runtime starts. The result of this function is merged into the existing definition.
             * @returns  Returns $urlMatcherFactoryProvider.
             */
            type(
                name: string,
                definition: IType,
                inlineAnnotedDefinitionFn?: any[]): IUrlMatcherFactory,

            /**
             * Registers a custom Type object that can be used to generate URLs with typed parameters.
             * @param  The type definition.
             * @param  A function that is injected before the app runtime starts. The result of this function is merged into the existing definition.
             * @returns  Returns $urlMatcherFactoryProvider.
             */
            type(
                name: string,
                definition: IType,
                definitionFn?: (...args: any[]) => IType): IUrlMatcherFactory,

            /**
             * Defines whether URL matching should be case sensitive (the default behavior), or not.
             * @param value false to match URL in a case sensitive manner; otherwise true;
             * @returns  the current value of caseInsensitive
             */
            caseInsensitive(value?: boolean): boolean,

            /**
             * Sets the default behavior when generating or matching URLs with default parameter values
             * @param value A string that defines the default parameter URL squashing behavior. nosquash: When generating an href with a default parameter value, do not squash the parameter value from the URL slash: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the parameter is surrounded by slashes, squash (remove) one slash from the URL any other string, e.g. "~": When generating an href with a default parameter value, squash (remove) the parameter value from the URL and replace it with this string.
             */
            defaultSquashPolicy(value: string): void,

            /**
             * Defines whether URLs should match trailing slashes, or not (the default behavior).
             * @param value false to match trailing slashes in URLs, otherwise true.
             * @returns  the current value of strictMode
             */
            strictMode(value?: boolean): boolean
    }
    declare     export type IUrlRouterProvider = undefined.IUrlRouterProvider;
    declare     export type IStateOptions = undefined.IStateOptions;
    declare     export type IHrefOptions = undefined.IHrefOptions;
    declare     export type IStateService = undefined.IStateService;
    declare     export type IResolvedState = undefined.IResolvedState;
    declare     export type IStateParamsService = undefined.IStateParamsService;
    declare     export type IUrlRouterService = undefined.IUrlRouterService;
    declare     export type IUiViewScrollProvider = undefined.IUiViewScrollProvider;
    declare     export type IType = undefined.IType;
}