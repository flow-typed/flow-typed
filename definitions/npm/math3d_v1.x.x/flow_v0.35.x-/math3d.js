// @flow
/**
 * Flowtype definitions for math3d
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'math3d' {
    declare     export class Vector3 {
        constructor(x?: number, y?: number, z?: number): this;
        back: Vector3;
        down: Vector3;
        forward: Vector3;
        left: Vector3;
        one: Vector3;
        right: Vector3;
        up: Vector3;
        zero: Vector3;
        dimension: number;
        FromVector4: (vector4: Vector4) => Vector3;
        homogeneous: Vector4;
        magnitude: number;
        values: number[];
        vector4: Vector4;
        x: number;
        y: number;
        z: number;
        add(vector3: Vector3): Vector3;
        average(vector3: Vector3): Vector3;
        cross(vector3: Vector3): Vector3;
        distanceTo(vector3: Vector3): number;
        dot(vector3: Vector3): number;
        equals(vector3: Vector3): boolean;
        mulScalar(scalar: Number): Vector3;
        negate(): Vector3;
        normalize(): Vector3;
        scale(vector3: Vector3): Vector3;
        sub(vector3: Vector3): Vector3;
        toString(): string
    }
    declare     export class Vector4 {
        constructor(x?: number, y?: number, z?: number, w?: number): this;
        one: Vector4;
        zero: Vector4;
        dimension: number;
        magnitude: number;
        values: number[];
        x: number;
        y: number;
        z: number;
        w: number;
        add(vector4: Vector4): Vector4;
        distanceTo(vector4: Vector4): number;
        dot(vector4: Vector4): number;
        equals(vector4: Vector4): boolean;
        mulScalar(scalar: Number): Vector4;
        negate(): Vector4;
        normalize(): Vector3;
        sub(vector4: Vector4): Vector3;
        toString(): string
    }
    declare     export class Quaternion {
        constructor(x?: number, y?: number, z?: number, w?: number): this;
        Euler(x?: number, y?: number, z?: number): Quaternion;
        AngleAxis(axis: Vector3, angle: number): Quaternion;
        identity: Quaternion;
        zero: Quaternion;
        angleAxis: {
            axis: Vector3,
            angle: number
        };
        eulerAngles: {
            x: number,
            y: number,
            z: number
        };
        x: number;
        y: number;
        z: number;
        w: number;
        angleTo(quaternion: Quaternion): number;
        conjugate(): Quaternion;
        distanceTo(quaternion: Quaternion): number;
        dot(quaternion: Quaternion): number;
        equals(quaternion: Quaternion): boolean;
        inverse(): Quaternion;
        mul(quaternion: Quaternion): Quaternion;
        mulVector3(vector3: Vector3): Vector3;
        toString(): string
    }
    declare     export class Matrix4x4 {
        constructor(data: number[]): this;
        FlipMatrix(flipX: boolean, flipY: boolean, flipZ: boolean): Matrix4x4;
        ScaleMatrix(scale: number | Vector3): Matrix4x4;
        RotationMatrix(quaternion: Quaternion): Matrix4x4;
        TranslationMatrix(translation: Vector3): Matrix4x4;
        TRS(translation: Vector3, rotation: Quaternion, scale: number | Vector3): Matrix4x4;
        LocalToWorldMatrix(position: Vector3, rotation: Quaternion, scale: number | Vector3): Matrix4x4;
        WorldToLocalMatrix(position: Vector3, rotation: Quaternion, scale: number | Vector3): Matrix4x4;
        identity: Matrix4x4;
        zero: Matrix4x4;
        columns: number[][];
        m11: number;
        m12: number;
        m13: number;
        m14: number;
        m21: number;
        m22: number;
        m23: number;
        m24: number;
        m31: number;
        m32: number;
        m33: number;
        m34: number;
        m41: number;
        m42: number;
        m43: number;
        m44: number;
        rows: number[][];
        size: {
            rows: number,
            columns: number
        };
        values: number[];
        determinant(): number;
        inverse(): Matrix4x4;
        negate(): Matrix4x4;
        transpose(): Matrix4x4;
        add(matrix4x4: Matrix4x4): Matrix4x4;
        sub(matrix4x4: Matrix4x4): Matrix4x4;
        mul(matrix4x4: Matrix4x4): Matrix4x4;
        mulScalar(scalar: Number): Matrix4x4;
        mulVector3(vector3: Vector3): Vector3
    }
    declare module 'Transform' {

    }

}