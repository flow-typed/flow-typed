/**
 * Flowtype definitions for microsoft-scripting-runtime
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Scripting$Dictionary {
    Add: (Key: any, Item: any) => void,
        CompareMode: CompareMethod,
        Count: number,
        Exists: (Key: any) => boolean,
        HashVal: (Key: any) => any,
        Item: (Key: any) => any,
        Items: () => any,
        Key: (Key: any) => any,
        Keys: () => any,
        Remove: (Key: any) => void,
        RemoveAll: () => void
}

declare interface Scripting$Drive {
    AvailableSpace: any,
        DriveLetter: string,
        DriveType: DriveTypeConst,
        FileSystem: string,
        FreeSpace: any,
        IsReady: boolean,
        Path: string,
        RootFolder: Scripting$Folder,
        SerialNumber: number,
        ShareName: string,
        TotalSize: any,
        VolumeName: string
}

declare interface Scripting$Drives {
    Count: number,
        Item: (Key: any) => Scripting$Drive
}

declare interface Scripting$Encoder {
    EncodeScriptFile: (
        szExt: string,
        bstrStreamIn: string,
        cFlags: number,
        bstrDefaultLang: string) => string
}

declare interface Scripting$File {
    Attributes: FileAttribute,
        Copy: (Destination: string, OverWriteFiles?: boolean) => void,
        DateCreated: VarDate,
        DateLastAccessed: VarDate,
        DateLastModified: VarDate,
        Delete: (Force?: boolean) => void,
        Drive: Scripting$Drive,
        Move: (Destination: string) => void,
        Name: string,
        OpenAsTextStream: (IOMode?: IOMode, Format?: Tristate) => Scripting$TextStream,
        ParentFolder: Scripting$Folder,
        Path: string,
        ShortName: string,
        ShortPath: string,
        Size: any,
        Type: string
}

declare interface Scripting$Files {
    Count: number,
        Item: (Key: any) => Scripting$File
}

declare interface Scripting$FileSystemObject {
    BuildPath: (Path: string, Name: string) => string,
        CopyFile: (Source: string, Destination: string, OverWriteFiles?: boolean) => void,
        CopyFolder: (Source: string, Destination: string, OverWriteFiles?: boolean) => void,
        CreateFolder: (Path: string) => Scripting$Folder,
        CreateTextFile: (
            FileName: string,
            Overwrite?: boolean,
            Unicode?: boolean) => Scripting$TextStream,
        DeleteFile: (FileSpec: string, Force?: boolean) => void,
        DeleteFolder: (FolderSpec: string, Force?: boolean) => void,
        DriveExists: (DriveSpec: string) => boolean,
        Drives: Scripting$Drives,
        FileExists: (FileSpec: string) => boolean,
        FolderExists: (FolderSpec: string) => boolean,
        GetAbsolutePathName: (Path: string) => string,
        GetBaseName: (Path: string) => string,
        GetDrive: (DriveSpec: string) => Scripting$Drive,
        GetDriveName: (Path: string) => string,
        GetExtensionName: (Path: string) => string,
        GetFile: (FilePath: string) => Scripting$File,
        GetFileName: (Path: string) => string,
        GetFileVersion: (FileName: string) => string,
        GetFolder: (FolderPath: string) => Scripting$Folder,
        GetParentFolderName: (Path: string) => string,
        GetSpecialFolder: (SpecialFolder: SpecialFolderConst) => Scripting$Folder,
        GetStandardStream: (
            StandardStreamType: StandardStreamTypes,
            Unicode?: boolean) => Scripting$TextStream,
        GetTempName: () => string,
        MoveFile: (Source: string, Destination: string) => void,
        MoveFolder: (Source: string, Destination: string) => void,
        OpenTextFile: (
            FileName: string,
            IOMode?: IOMode,
            Create?: boolean,
            Format?: Tristate) => Scripting$TextStream
}

declare interface Scripting$Folder {
    Attributes: FileAttribute,
        Copy: (Destination: string, OverWriteFiles?: boolean) => void,
        CreateTextFile: (
            FileName: string,
            Overwrite?: boolean,
            Unicode?: boolean) => Scripting$TextStream,
        DateCreated: VarDate,
        DateLastAccessed: VarDate,
        DateLastModified: VarDate,
        Delete: (Force?: boolean) => void,
        Drive: Scripting$Drive,
        Files: Scripting$Files,
        IsRootFolder: boolean,
        Move: (Destination: string) => void,
        Name: string,
        ParentFolder: Scripting$Folder,
        Path: string,
        ShortName: string,
        ShortPath: string,
        Size: any,
        SubFolders: Scripting$Folders,
        Type: string
}

declare interface Scripting$Folders {
    Add: (Name: string) => Scripting$Folder,
        Count: number,
        Item: (Key: any) => Scripting$Folder
}

declare interface Scripting$TextStream {
    AtEndOfLine: boolean,
        AtEndOfStream: boolean,
        Close: () => void,
        Column: number,
        Line: number,
        Read: (Characters: number) => string,
        ReadAll: () => string,
        ReadLine: () => string,
        Skip: (Characters: number) => void,
        SkipLine: () => void,
        Write: (Text: string) => void,
        WriteBlankLines: (Lines: number) => void,
        WriteLine: (Text?: string) => void
}
declare interface ActiveXObject {
    new(progID: "Scripting.Dictionary"): Scripting$Dictionary,
    new(progID: "Scripting.FileSystemObject"): Scripting$FileSystemObject,
    new(progID: "Scripting.Encoder"): Scripting$Encoder
}