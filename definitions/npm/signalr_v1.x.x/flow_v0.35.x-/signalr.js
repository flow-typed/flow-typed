/**
 * Flowtype definitions for signalr
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface SignalR$AvailableEvents {
    onStart: string,
        onStarting: string,
        onReceived: string,
        onError: string,
        onConnectionSlow: string,
        onReconnect: string,
        onStateChanged: string,
        onDisconnect: string
}

declare interface SignalR$Transport {
    name: string,
        supportsKeepAlive(): boolean,
        send(connection: SignalR$Connection, data: any): void,
        start(
            connection: SignalR$Connection,
            onSuccess: () => void,
            onFailed: (error?: SignalR$ConnectionError) => void): void,
        reconnect(connection: SignalR$Connection): void,
        lostConnection(connection: SignalR$Connection): void,
        stop(connection: SignalR$Connection): void,
        abort(connection: SignalR$Connection, async: boolean): void
}

declare interface SignalR$Transports {
    foreverFrame: SignalR$Transport,
        longPolling: SignalR$Transport,
        serverSentEvents: SignalR$Transport,
        webSockets: SignalR$Transport
}

declare interface Hub$Proxy {
    state: any,
        connection: SignalR$Connection,
        hubName: string,
        init(connection: SignalR$Connection, hubName: string): void,
        hasSubscriptions(): boolean,

        /**
         * Wires up a callback to be invoked when a invocation request is received from the server hub.
         * @param eventName The name of the hub event to register the callback for.
         * @param callback The callback to be invoked.
         */
        on(eventName: string, callback: (...msg: any[]) => void): Hub$Proxy,

        /**
         * Removes the callback invocation request from the server hub for the given event name.
         * @param eventName The name of the hub event to unregister the callback for.
         * @param callback The callback to be invoked.
         */
        off(eventName: string, callback: (...msg: any[]) => void): Hub$Proxy,

        /**
         * Invokes a server hub method with the given arguments.
         * @param methodName The name of the server hub method.
         */
        invoke(methodName: string, ...args: any[]): JQueryPromise<any >
}

declare interface Hub$Options {
    qs?: string,
        logging?: boolean,
        useDefaultPath?: boolean
}

declare interface Hub$ClientHubInvocation {
    Hub: string,
        Method: string,
        Args: string,
        State: string
}

declare type Hub$Connection = {
    proxies: {
        [hubName: string]: any
    },
    transport: {
        name: string,
        supportsKeepAlive: () => boolean
    },

    /**
     * Creates a new proxy object for the given hub connection that can be used to invoke
     * methods on server hubs and handle client method invocation requests from the server.
     * @param hubName The name of the hub on the server to create the proxy for.
     */
    createHubProxy(hubName: string): Hub$Proxy
}

declare interface Hub$HubCreator {

    /**
     * Creates a new hub connection.
     * @param url [Optional] The hub route url, defaults to "/signalr".
     * @param options [Optional] Settings to use when creating the hubConnection.
     */
    (url?: string, options?: Hub$Options): Hub$Connection
}

declare interface Hub$IHub {
    start(): void
}

declare interface SignalR$StateChanged {
    oldState: number,
        newState: number
}

declare interface SignalR$ConnectionStates {
    connecting: number,
        connected: number,
        reconnecting: number,
        disconnected: number
}

declare interface SignalR$Resources {
    nojQuery: string,
        noTransportOnInit: string,
        errorOnNegotiate: string,
        stoppedWhileLoading: string,
        stoppedWhileNegotiating: string,
        errorParsingNegotiateResponse: string,
        errorDuringStartRequest: string,
        stoppedDuringStartRequest: string,
        errorParsingStartResponse: string,
        invalidStartResponse: string,
        protocolIncompatible: string,
        sendFailed: string,
        parseFailed: string,
        longPollFailed: string,
        eventSourceFailedToConnect: string,
        eventSourceError: string,
        webSocketClosed: string,
        pingServerFailedInvalidResponse: string,
        pingServerFailed: string,
        pingServerFailedStatusCode: string,
        pingServerFailedParse: string,
        noConnectionTransport: string,
        webSocketsInvalidState: string,
        reconnectTimeout: string,
        reconnectWindowTimeout: string
}

declare interface SignalR$AjaxDefaults {
    processData: boolean,
        timeout: number,
        async: boolean,
        global: boolean,
        cache: boolean
}

declare interface SignalR$ConnectionOptions {
    transport?: string | Array<string>| SignalR$Transport,
        callback?: Function,
        waitForPageLoad?: boolean,
        jsonp?: boolean,
        pingInterval?: number
}

declare interface SignalR$SimplifyLocation {
    protocol: string,
        host: string
}

declare interface SignalR$ConnectionErrorContext {
    readyState: number,
        responseText: string,
        status: number,
        statusText: string
}

declare type SignalR$ConnectionError = {
    context: SignalR$ConnectionErrorContext,
    transport?: string,
    source?: string
} & Error


declare type SignalR$Connection = {
    proxies: {
        [hubName: string]: any
    },
    transport: {
        name: string,
        supportsKeepAlive: () => boolean
    },

    /**
     * Creates a new proxy object for the given hub connection that can be used to invoke
     * methods on server hubs and handle client method invocation requests from the server.
     * @param hubName The name of the hub on the server to create the proxy for.
     */
    createHubProxy(hubName: string): Hub$Proxy
}
declare interface SignalR {

    /**
     * Creates a new SignalR connection for the given url
     * @param url The URL of the long polling endpoint
     * @param queryString [Optional] Custom querystring parameters to add to the connection URL. If an object, every non-function member will be added to the querystring. If a string, it's added to the QS as specified.
     * @param logging [Optional] A flag indicating whether connection logging is enabled to the browser console/log. Defaults to false.
     */
    (url: string, queryString?: string | Object, logging?: boolean): SignalR$Connection,
    ajaxDefaults: SignalR$AjaxDefaults,
        changeState(connection: SignalR$Connection, expectedState: number, newState: number): void,
        connectionState: SignalR$ConnectionStates,
        events: SignalR$AvailableEvents,
        transports: SignalR$Transports,
        hub: undefined.Connection,
        hubConnection: undefined.HubCreator,
        isDisconnecting(connection: SignalR$Connection): boolean,

        /**
         * Reinstates the original value of $.connection and returns the signalR object for manual assignment.
         */
        noConflict(): SignalR$Connection,

        /**
         * Current SignalR version.
         */
        version: string
}
declare interface JQueryStatic {
    signalR: SignalR,
        connection: SignalR,
        hubConnection: undefined.HubCreator
}