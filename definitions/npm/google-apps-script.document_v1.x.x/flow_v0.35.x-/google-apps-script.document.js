

declare module 'google-apps-script.document' {
					
}

declare module 'Document' {
		declare export interface Body {
		appendHorizontalRule(): HorizontalRule,
		appendImage(image: Base.BlobSource): InlineImage,
		appendImage(image: InlineImage): InlineImage,
		appendListItem(listItem: ListItem): ListItem,
		appendListItem(text: string): ListItem,
		appendPageBreak(): PageBreak,
		appendPageBreak(pageBreak: PageBreak): PageBreak,
		appendParagraph(paragraph: Paragraph): Paragraph,
		appendParagraph(text: string): Paragraph,
		appendTable(): Table,
		appendTable(cells: String[][]): Table,
		appendTable(table: Table): Table,
		clear(): Body,
		copy(): Body,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getImages(): InlineImage[],
		getListItems(): ListItem[],
		getMarginBottom(): Number,
		getMarginLeft(): Number,
		getMarginRight(): Number,
		getMarginTop(): Number,
		getNumChildren(): Integer,
		getPageHeight(): Number,
		getPageWidth(): Number,
		getParagraphs(): Paragraph[],
		getParent(): ContainerElement,
		getTables(): Table[],
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertListItem(childIndex: Integer, listItem: ListItem): ListItem,
		insertListItem(childIndex: Integer, text: string): ListItem,
		insertPageBreak(childIndex: Integer): PageBreak,
		insertPageBreak(childIndex: Integer, pageBreak: PageBreak): PageBreak,
		insertParagraph(childIndex: Integer, paragraph: Paragraph): Paragraph,
		insertParagraph(childIndex: Integer, text: string): Paragraph,
		insertTable(childIndex: Integer): Table,
		insertTable(childIndex: Integer, cells: String[][]): Table,
		insertTable(childIndex: Integer, table: Table): Table,
		removeChild(child: Element): Body,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): Body,
		setMarginBottom(marginBottom: Number): Body,
		setMarginLeft(marginLeft: Number): Body,
		setMarginRight(marginRight: Number): Body,
		setMarginTop(marginTop: Number): Body,
		setPageHeight(pageHeight: Number): Body,
		setPageWidth(pageWidth: Number): Body,
		setText(text: string): Body,
		setTextAlignment(textAlignment: TextAlignment): Body,
		getFootnotes(): Footnote[],
		getLinkUrl(): string,
		getNextSibling(): Element,
		getPreviousSibling(): Element,
		isAtDocumentEnd(): boolean,
		setLinkUrl(url: string): Body
	}

	declare export interface Bookmark {
		getId(): string,
		getPosition(): Position,
		remove(): void
	}

	declare export interface ContainerElement {
		asBody(): Body,
		asEquation(): Equation,
		asFooterSection(): FooterSection,
		asFootnoteSection(): FootnoteSection,
		asHeaderSection(): HeaderSection,
		asListItem(): ListItem,
		asParagraph(): Paragraph,
		asTable(): Table,
		asTableCell(): TableCell,
		asTableOfContents(): TableOfContents,
		asTableRow(): TableRow,
		clear(): ContainerElement,
		copy(): ContainerElement,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): ContainerElement,
		removeFromParent(): ContainerElement,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): ContainerElement,
		setLinkUrl(url: string): ContainerElement,
		setTextAlignment(textAlignment: TextAlignment): ContainerElement
	}

	declare export interface Document {
		addBookmark(position: Position): Bookmark,
		addEditor(emailAddress: string): Document,
		addEditor(user: Base.User): Document,
		addEditors(emailAddresses: String[]): Document,
		addFooter(): FooterSection,
		addHeader(): HeaderSection,
		addNamedRange(name: string, range: Range): NamedRange,
		addViewer(emailAddress: string): Document,
		addViewer(user: Base.User): Document,
		addViewers(emailAddresses: String[]): Document,
		getAs(contentType: string): Base.Blob,
		getBlob(): Base.Blob,
		getBody(): Body,
		getBookmark(id: string): Bookmark,
		getBookmarks(): Bookmark[],
		getCursor(): Position,
		getEditors(): Base.User[],
		getFooter(): FooterSection,
		getFootnotes(): Footnote[],
		getHeader(): HeaderSection,
		getId(): string,
		getName(): string,
		getNamedRangeById(id: string): NamedRange,
		getNamedRanges(): NamedRange[],
		getNamedRanges(name: string): NamedRange[],
		getSelection(): Range,
		getUrl(): string,
		getViewers(): Base.User[],
		newPosition(element: Element, offset: Integer): Position,
		newRange(): RangeBuilder,
		removeEditor(emailAddress: string): Document,
		removeEditor(user: Base.User): Document,
		removeViewer(emailAddress: string): Document,
		removeViewer(user: Base.User): Document,
		saveAndClose(): void,
		setCursor(position: Position): Document,
		setName(name: string): Document,
		setSelection(range: Range): Document
	}

	declare export interface DocumentApp {
		Attribute: Attribute,
		ElementType: ElementType,
		FontFamily: FontFamily,
		GlyphType: GlyphType,
		HorizontalAlignment: HorizontalAlignment,
		ParagraphHeading: ParagraphHeading,
		TextAlignment: TextAlignment,
		VerticalAlignment: VerticalAlignment,
		create(name: string): Document,
		getActiveDocument(): Document,
		getUi(): Base.Ui,
		openById(id: string): Document,
		openByUrl(url: string): Document
	}

	declare export interface Element {
		asBody(): Body,
		asEquation(): Equation,
		asEquationFunction(): EquationFunction,
		asEquationFunctionArgumentSeparator(): EquationFunctionArgumentSeparator,
		asEquationSymbol(): EquationSymbol,
		asFooterSection(): FooterSection,
		asFootnote(): Footnote,
		asFootnoteSection(): FootnoteSection,
		asHeaderSection(): HeaderSection,
		asHorizontalRule(): HorizontalRule,
		asInlineDrawing(): InlineDrawing,
		asInlineImage(): InlineImage,
		asListItem(): ListItem,
		asPageBreak(): PageBreak,
		asParagraph(): Paragraph,
		asTable(): Table,
		asTableCell(): TableCell,
		asTableOfContents(): TableOfContents,
		asTableRow(): TableRow,
		asText(): Text,
		copy(): Element,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): Element,
		removeFromParent(): Element,
		setAttributes(attributes: Object): Element
	}

	declare export interface Equation {
		clear(): Equation,
		copy(): Equation,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): Equation,
		removeFromParent(): Equation,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): Equation,
		setLinkUrl(url: string): Equation,
		setTextAlignment(textAlignment: TextAlignment): Equation
	}

	declare export interface EquationFunction {
		clear(): EquationFunction,
		copy(): EquationFunction,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getCode(): string,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): EquationFunction,
		removeFromParent(): EquationFunction,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): EquationFunction,
		setLinkUrl(url: string): EquationFunction,
		setTextAlignment(textAlignment: TextAlignment): EquationFunction
	}

	declare export interface EquationFunctionArgumentSeparator {
		copy(): EquationFunctionArgumentSeparator,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): EquationFunctionArgumentSeparator,
		removeFromParent(): EquationFunctionArgumentSeparator,
		setAttributes(attributes: Object): EquationFunctionArgumentSeparator
	}

	declare export interface EquationSymbol {
		copy(): EquationSymbol,
		getAttributes(): Object,
		getCode(): string,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): EquationSymbol,
		removeFromParent(): EquationSymbol,
		setAttributes(attributes: Object): EquationSymbol
	}

	declare export interface FooterSection {
		appendHorizontalRule(): HorizontalRule,
		appendImage(image: Base.BlobSource): InlineImage,
		appendImage(image: InlineImage): InlineImage,
		appendListItem(listItem: ListItem): ListItem,
		appendListItem(text: string): ListItem,
		appendParagraph(paragraph: Paragraph): Paragraph,
		appendParagraph(text: string): Paragraph,
		appendTable(): Table,
		appendTable(cells: String[][]): Table,
		appendTable(table: Table): Table,
		clear(): FooterSection,
		copy(): FooterSection,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getImages(): InlineImage[],
		getListItems(): ListItem[],
		getNumChildren(): Integer,
		getParagraphs(): Paragraph[],
		getParent(): ContainerElement,
		getTables(): Table[],
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertListItem(childIndex: Integer, listItem: ListItem): ListItem,
		insertListItem(childIndex: Integer, text: string): ListItem,
		insertParagraph(childIndex: Integer, paragraph: Paragraph): Paragraph,
		insertParagraph(childIndex: Integer, text: string): Paragraph,
		insertTable(childIndex: Integer): Table,
		insertTable(childIndex: Integer, cells: String[][]): Table,
		insertTable(childIndex: Integer, table: Table): Table,
		removeChild(child: Element): FooterSection,
		removeFromParent(): FooterSection,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): FooterSection,
		setText(text: string): FooterSection,
		setTextAlignment(textAlignment: TextAlignment): FooterSection,
		getFootnotes(): Footnote[],
		getLinkUrl(): string,
		getNextSibling(): Element,
		getPreviousSibling(): Element,
		isAtDocumentEnd(): boolean,
		setLinkUrl(url: string): FooterSection
	}

	declare export interface Footnote {
		copy(): Footnote,
		getAttributes(): Object,
		getFootnoteContents(): FootnoteSection,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		removeFromParent(): Footnote,
		setAttributes(attributes: Object): Footnote
	}

	declare export interface FootnoteSection {
		appendParagraph(paragraph: Paragraph): Paragraph,
		appendParagraph(text: string): Paragraph,
		clear(): FootnoteSection,
		copy(): FootnoteSection,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParagraphs(): Paragraph[],
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertParagraph(childIndex: Integer, paragraph: Paragraph): Paragraph,
		insertParagraph(childIndex: Integer, text: string): Paragraph,
		removeChild(child: Element): FootnoteSection,
		removeFromParent(): FootnoteSection,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): FootnoteSection,
		setText(text: string): FootnoteSection,
		setTextAlignment(textAlignment: TextAlignment): FootnoteSection,
		getFootnotes(): Footnote[],
		getLinkUrl(): string,
		isAtDocumentEnd(): boolean,
		setLinkUrl(url: string): FootnoteSection
	}

	declare export interface HeaderSection {
		appendHorizontalRule(): HorizontalRule,
		appendImage(image: Base.BlobSource): InlineImage,
		appendImage(image: InlineImage): InlineImage,
		appendListItem(listItem: ListItem): ListItem,
		appendListItem(text: string): ListItem,
		appendParagraph(paragraph: Paragraph): Paragraph,
		appendParagraph(text: string): Paragraph,
		appendTable(): Table,
		appendTable(cells: String[][]): Table,
		appendTable(table: Table): Table,
		clear(): HeaderSection,
		copy(): HeaderSection,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getImages(): InlineImage[],
		getListItems(): ListItem[],
		getNumChildren(): Integer,
		getParagraphs(): Paragraph[],
		getParent(): ContainerElement,
		getTables(): Table[],
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertListItem(childIndex: Integer, listItem: ListItem): ListItem,
		insertListItem(childIndex: Integer, text: string): ListItem,
		insertParagraph(childIndex: Integer, paragraph: Paragraph): Paragraph,
		insertParagraph(childIndex: Integer, text: string): Paragraph,
		insertTable(childIndex: Integer): Table,
		insertTable(childIndex: Integer, cells: String[][]): Table,
		insertTable(childIndex: Integer, table: Table): Table,
		removeChild(child: Element): HeaderSection,
		removeFromParent(): HeaderSection,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): HeaderSection,
		setText(text: string): HeaderSection,
		setTextAlignment(textAlignment: TextAlignment): HeaderSection,
		getFootnotes(): Footnote[],
		getLinkUrl(): string,
		getNextSibling(): Element,
		getPreviousSibling(): Element,
		isAtDocumentEnd(): boolean,
		setLinkUrl(url: string): HeaderSection
	}

	declare export interface HorizontalRule {
		copy(): HorizontalRule,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		removeFromParent(): HorizontalRule,
		setAttributes(attributes: Object): HorizontalRule
	}

	declare export interface InlineDrawing {
		copy(): InlineDrawing,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): InlineDrawing,
		removeFromParent(): InlineDrawing,
		setAttributes(attributes: Object): InlineDrawing
	}

	declare export interface InlineImage {
		copy(): InlineImage,
		getAs(contentType: string): Base.Blob,
		getAttributes(): Object,
		getBlob(): Base.Blob,
		getHeight(): Integer,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		getWidth(): Integer,
		isAtDocumentEnd(): boolean,
		merge(): InlineImage,
		removeFromParent(): InlineImage,
		setAttributes(attributes: Object): InlineImage,
		setHeight(height: Integer): InlineImage,
		setLinkUrl(url: string): InlineImage,
		setWidth(width: Integer): InlineImage
	}

	declare export interface ListItem {
		appendHorizontalRule(): HorizontalRule,
		appendInlineImage(image: Base.BlobSource): InlineImage,
		appendInlineImage(image: InlineImage): InlineImage,
		appendPageBreak(): PageBreak,
		appendPageBreak(pageBreak: PageBreak): PageBreak,
		appendText(text: string): Text,
		appendText(text: Text): Text,
		clear(): ListItem,
		copy(): ListItem,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAlignment(): HorizontalAlignment,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getGlyphType(): GlyphType,
		getHeading(): ParagraphHeading,
		getIndentEnd(): Number,
		getIndentFirstLine(): Number,
		getIndentStart(): Number,
		getLineSpacing(): Number,
		getLinkUrl(): string,
		getListId(): string,
		getNestingLevel(): Integer,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getSpacingAfter(): Number,
		getSpacingBefore(): Number,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertInlineImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertInlineImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertPageBreak(childIndex: Integer): PageBreak,
		insertPageBreak(childIndex: Integer, pageBreak: PageBreak): PageBreak,
		insertText(childIndex: Integer, text: string): Text,
		insertText(childIndex: Integer, text: Text): Text,
		isAtDocumentEnd(): boolean,
		isLeftToRight(): boolean,
		merge(): ListItem,
		removeChild(child: Element): ListItem,
		removeFromParent(): ListItem,
		replaceText(searchPattern: string, replacement: string): Element,
		setAlignment(alignment: HorizontalAlignment): ListItem,
		setAttributes(attributes: Object): ListItem,
		setGlyphType(glyphType: GlyphType): ListItem,
		setHeading(heading: ParagraphHeading): ListItem,
		setIndentEnd(indentEnd: Number): ListItem,
		setIndentFirstLine(indentFirstLine: Number): ListItem,
		setIndentStart(indentStart: Number): ListItem,
		setLeftToRight(leftToRight: boolean): ListItem,
		setLineSpacing(multiplier: Number): ListItem,
		setLinkUrl(url: string): ListItem,
		setListId(listItem: ListItem): ListItem,
		setNestingLevel(nestingLevel: Integer): ListItem,
		setSpacingAfter(spacingAfter: Number): ListItem,
		setSpacingBefore(spacingBefore: Number): ListItem,
		setText(text: string): void,
		setTextAlignment(textAlignment: TextAlignment): ListItem
	}

	declare export interface NamedRange {
		getId(): string,
		getName(): string,
		getRange(): Range,
		remove(): void
	}

	declare export interface PageBreak {
		copy(): PageBreak,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		removeFromParent(): PageBreak,
		setAttributes(attributes: Object): PageBreak
	}

	declare export interface Paragraph {
		appendHorizontalRule(): HorizontalRule,
		appendInlineImage(image: Base.BlobSource): InlineImage,
		appendInlineImage(image: InlineImage): InlineImage,
		appendPageBreak(): PageBreak,
		appendPageBreak(pageBreak: PageBreak): PageBreak,
		appendText(text: string): Text,
		appendText(text: Text): Text,
		clear(): Paragraph,
		copy(): Paragraph,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAlignment(): HorizontalAlignment,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getHeading(): ParagraphHeading,
		getIndentEnd(): Number,
		getIndentFirstLine(): Number,
		getIndentStart(): Number,
		getLineSpacing(): Number,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getSpacingAfter(): Number,
		getSpacingBefore(): Number,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertInlineImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertInlineImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertPageBreak(childIndex: Integer): PageBreak,
		insertPageBreak(childIndex: Integer, pageBreak: PageBreak): PageBreak,
		insertText(childIndex: Integer, text: string): Text,
		insertText(childIndex: Integer, text: Text): Text,
		isAtDocumentEnd(): boolean,
		isLeftToRight(): boolean,
		merge(): Paragraph,
		removeChild(child: Element): Paragraph,
		removeFromParent(): Paragraph,
		replaceText(searchPattern: string, replacement: string): Element,
		setAlignment(alignment: HorizontalAlignment): Paragraph,
		setAttributes(attributes: Object): Paragraph,
		setHeading(heading: ParagraphHeading): Paragraph,
		setIndentEnd(indentEnd: Number): Paragraph,
		setIndentFirstLine(indentFirstLine: Number): Paragraph,
		setIndentStart(indentStart: Number): Paragraph,
		setLeftToRight(leftToRight: boolean): Paragraph,
		setLineSpacing(multiplier: Number): Paragraph,
		setLinkUrl(url: string): Paragraph,
		setSpacingAfter(spacingAfter: Number): Paragraph,
		setSpacingBefore(spacingBefore: Number): Paragraph,
		setText(text: string): void,
		setTextAlignment(textAlignment: TextAlignment): Paragraph
	}

	declare export interface Position {
		getElement(): Element,
		getOffset(): Integer,
		getSurroundingText(): Text,
		getSurroundingTextOffset(): Integer,
		insertBookmark(): Bookmark,
		insertInlineImage(image: Base.BlobSource): InlineImage,
		insertText(text: string): Text
	}

	declare export interface Range {
		getRangeElements(): RangeElement[],
		getSelectedElements(): RangeElement[]
	}

	declare export interface RangeBuilder {
		addElement(element: Element): RangeBuilder,
		addElement(
		textElement: Text, startOffset: Integer, endOffsetInclusive: Integer
	): RangeBuilder,
		addElementsBetween(startElement: Element, endElementInclusive: Element): RangeBuilder,
		addElementsBetween(
		startTextElement: Text, startOffset: Integer, endTextElementInclusive: Text, endOffsetInclusive: Integer
	): RangeBuilder,
		addRange(range: Range): RangeBuilder,
		build(): Range,
		getRangeElements(): RangeElement[],
		getSelectedElements(): RangeElement[]
	}

	declare export interface RangeElement {
		getElement(): Element,
		getEndOffsetInclusive(): Integer,
		getStartOffset(): Integer,
		isPartial(): boolean
	}

	declare export interface Table {
		appendTableRow(): TableRow,
		appendTableRow(tableRow: TableRow): TableRow,
		clear(): Table,
		copy(): Table,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getBorderColor(): string,
		getBorderWidth(): Number,
		getCell(rowIndex: Integer, cellIndex: Integer): TableCell,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getColumnWidth(columnIndex: Integer): Number,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getNumRows(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getRow(rowIndex: Integer): TableRow,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertTableRow(childIndex: Integer): TableRow,
		insertTableRow(childIndex: Integer, tableRow: TableRow): TableRow,
		isAtDocumentEnd(): boolean,
		removeChild(child: Element): Table,
		removeFromParent(): Table,
		removeRow(rowIndex: Integer): TableRow,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): Table,
		setBorderColor(color: string): Table,
		setBorderWidth(width: Number): Table,
		setColumnWidth(columnIndex: Integer, width: Number): Table,
		setLinkUrl(url: string): Table,
		setTextAlignment(textAlignment: TextAlignment): Table
	}

	declare export interface TableCell {
		appendHorizontalRule(): HorizontalRule,
		appendImage(image: Base.BlobSource): InlineImage,
		appendImage(image: InlineImage): InlineImage,
		appendListItem(listItem: ListItem): ListItem,
		appendListItem(text: string): ListItem,
		appendParagraph(paragraph: Paragraph): Paragraph,
		appendParagraph(text: string): Paragraph,
		appendTable(): Table,
		appendTable(cells: String[][]): Table,
		appendTable(table: Table): Table,
		clear(): TableCell,
		copy(): TableCell,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getBackgroundColor(): string,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getPaddingBottom(): Number,
		getPaddingLeft(): Number,
		getPaddingRight(): Number,
		getPaddingTop(): Number,
		getParent(): ContainerElement,
		getParentRow(): TableRow,
		getParentTable(): Table,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		getVerticalAlignment(): VerticalAlignment,
		getWidth(): Number,
		insertHorizontalRule(childIndex: Integer): HorizontalRule,
		insertImage(childIndex: Integer, image: Base.BlobSource): InlineImage,
		insertImage(childIndex: Integer, image: InlineImage): InlineImage,
		insertListItem(childIndex: Integer, listItem: ListItem): ListItem,
		insertListItem(childIndex: Integer, text: string): ListItem,
		insertParagraph(childIndex: Integer, paragraph: Paragraph): Paragraph,
		insertParagraph(childIndex: Integer, text: string): Paragraph,
		insertTable(childIndex: Integer): Table,
		insertTable(childIndex: Integer, cells: String[][]): Table,
		insertTable(childIndex: Integer, table: Table): Table,
		isAtDocumentEnd(): boolean,
		merge(): TableCell,
		removeChild(child: Element): TableCell,
		removeFromParent(): TableCell,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): TableCell,
		setBackgroundColor(color: string): TableCell,
		setLinkUrl(url: string): TableCell,
		setPaddingBottom(paddingBottom: Number): TableCell,
		setPaddingLeft(paddingLeft: Number): TableCell,
		setPaddingRight(paddingTop: Number): TableCell,
		setPaddingTop(paddingTop: Number): TableCell,
		setText(text: string): TableCell,
		setTextAlignment(textAlignment: TextAlignment): TableCell,
		setVerticalAlignment(alignment: VerticalAlignment): TableCell,
		setWidth(width: Number): TableCell
	}

	declare export interface TableOfContents {
		clear(): TableOfContents,
		copy(): TableOfContents,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getLinkUrl(): string,
		getNextSibling(): Element,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		removeFromParent(): TableOfContents,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): TableOfContents,
		setLinkUrl(url: string): TableOfContents,
		setTextAlignment(textAlignment: TextAlignment): TableOfContents
	}

	declare export interface TableRow {
		appendTableCell(): TableCell,
		appendTableCell(textContents: string): TableCell,
		appendTableCell(tableCell: TableCell): TableCell,
		clear(): TableRow,
		copy(): TableRow,
		editAsText(): Text,
		findElement(elementType: ElementType): RangeElement,
		findElement(elementType: ElementType, from: RangeElement): RangeElement,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getCell(cellIndex: Integer): TableCell,
		getChild(childIndex: Integer): Element,
		getChildIndex(child: Element): Integer,
		getLinkUrl(): string,
		getMinimumHeight(): Integer,
		getNextSibling(): Element,
		getNumCells(): Integer,
		getNumChildren(): Integer,
		getParent(): ContainerElement,
		getParentTable(): Table,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getType(): ElementType,
		insertTableCell(childIndex: Integer): TableCell,
		insertTableCell(childIndex: Integer, textContents: string): TableCell,
		insertTableCell(childIndex: Integer, tableCell: TableCell): TableCell,
		isAtDocumentEnd(): boolean,
		merge(): TableRow,
		removeCell(cellIndex: Integer): TableCell,
		removeChild(child: Element): TableRow,
		removeFromParent(): TableRow,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(attributes: Object): TableRow,
		setLinkUrl(url: string): TableRow,
		setMinimumHeight(minHeight: Integer): TableRow,
		setTextAlignment(textAlignment: TextAlignment): TableRow
	}

	declare export interface Text {
		appendText(text: string): Text,
		copy(): Text,
		deleteText(startOffset: Integer, endOffsetInclusive: Integer): Text,
		editAsText(): Text,
		findText(searchPattern: string): RangeElement,
		findText(searchPattern: string, from: RangeElement): RangeElement,
		getAttributes(): Object,
		getAttributes(offset: Integer): Object,
		getBackgroundColor(): string,
		getBackgroundColor(offset: Integer): string,
		getFontFamily(): string,
		getFontFamily(offset: Integer): string,
		getFontSize(): Integer,
		getFontSize(offset: Integer): Integer,
		getForegroundColor(): string,
		getForegroundColor(offset: Integer): string,
		getLinkUrl(): string,
		getLinkUrl(offset: Integer): string,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getText(): string,
		getTextAlignment(): TextAlignment,
		getTextAlignment(offset: Integer): TextAlignment,
		getTextAttributeIndices(): Integer[],
		getType(): ElementType,
		insertText(offset: Integer, text: string): Text,
		isAtDocumentEnd(): boolean,
		isBold(): boolean,
		isBold(offset: Integer): boolean,
		isItalic(): boolean,
		isItalic(offset: Integer): boolean,
		isStrikethrough(): boolean,
		isStrikethrough(offset: Integer): boolean,
		isUnderline(): boolean,
		isUnderline(offset: Integer): boolean,
		merge(): Text,
		removeFromParent(): Text,
		replaceText(searchPattern: string, replacement: string): Element,
		setAttributes(startOffset: Integer, endOffsetInclusive: Integer, attributes: Object): Text,
		setAttributes(attributes: Object): Text,
		setBackgroundColor(startOffset: Integer, endOffsetInclusive: Integer, color: string): Text,
		setBackgroundColor(color: string): Text,
		setBold(bold: boolean): Text,
		setBold(startOffset: Integer, endOffsetInclusive: Integer, bold: boolean): Text,
		setFontFamily(
		startOffset: Integer, endOffsetInclusive: Integer, fontFamilyName: string
	): Text,
		setFontFamily(fontFamilyName: string): Text,
		setFontSize(size: Integer): Text,
		setFontSize(startOffset: Integer, endOffsetInclusive: Integer, size: Integer): Text,
		setForegroundColor(startOffset: Integer, endOffsetInclusive: Integer, color: string): Text,
		setForegroundColor(color: string): Text,
		setItalic(italic: boolean): Text,
		setItalic(startOffset: Integer, endOffsetInclusive: Integer, italic: boolean): Text,
		setLinkUrl(startOffset: Integer, endOffsetInclusive: Integer, url: string): Text,
		setLinkUrl(url: string): Text,
		setStrikethrough(strikethrough: boolean): Text,
		setStrikethrough(
		startOffset: Integer, endOffsetInclusive: Integer, strikethrough: boolean
	): Text,
		setText(text: string): Text,
		setTextAlignment(
		startOffset: Integer, endOffsetInclusive: Integer, textAlignment: TextAlignment
	): Text,
		setTextAlignment(textAlignment: TextAlignment): Text,
		setUnderline(underline: boolean): Text,
		setUnderline(startOffset: Integer, endOffsetInclusive: Integer, underline: boolean): Text
	}

	declare export interface UnsupportedElement {
		copy(): UnsupportedElement,
		getAttributes(): Object,
		getNextSibling(): Element,
		getParent(): ContainerElement,
		getPreviousSibling(): Element,
		getType(): ElementType,
		isAtDocumentEnd(): boolean,
		merge(): UnsupportedElement,
		removeFromParent(): UnsupportedElement,
		setAttributes(attributes: Object): UnsupportedElement
	}

			
}