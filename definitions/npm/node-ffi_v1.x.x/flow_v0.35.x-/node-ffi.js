// @flow
/**
 * Flowtype definitions for node-ffi
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ffi' {
    declare     export var Library: {

        /**
         * The extension to use on libraries. 
         */
        EXT: string,

        /**
         * 
         * @param libFile name of library
         * @param funcs hash of [retType, [...argType], opts?: {abi?, async?, varargs?}]
         * @param lib hash that will be extended
         */
        new(libFile: string, funcs?: {
            [key: string]: any[]
        }, lib?: Object): any,

        /**
         * 
         * @param libFile name of library
         * @param funcs hash of [retType, [...argType], opts?: {abi?, async?, varargs?}]
         * @param lib hash that will be extended
         */
        (libFile: string, funcs?: {
            [key: string]: any[]
        }, lib?: Object): any
    };

    /**
     * Get value of errno. 
     */
    declare     export function errno(): number
    declare     export type Function = {

        /**
         * The type of return value. 
         */
        retType: ref.Type,

        /**
         * The type of arguments. 
         */
        argTypes: ref.Type[],

        /**
         * Is set for node-ffi functions. 
         */
        ffi_type: Buffer,
        abi: number,

        /**
         * Get a `Callback` pointer of this function type. 
         */
        toPointer(fn: (...args: any[]) => any): Buffer,

        /**
         * Get a `ForeignFunction` of this function type. 
         */
        toFunction(buf: Buffer): ForeignFunction
    }
    declare     export var Function: {
        new(retType: ref.Type, argTypes: any[], abi?: number): Function,
        new(retType: string, argTypes: any[], abi?: number): Function,
        (retType: ref.Type, argTypes: any[], abi?: number): Function,
        (retType: string, argTypes: any[], abi?: number): Function
    };
    declare     export interface ForeignFunction {
        (...args: any[]): any,
        async(...args: any[]): void
    }
    declare     export var ForeignFunction: {
        new(ptr: Buffer, retType: ref.Type, argTypes: any[], abi?: number): ForeignFunction,
        new(ptr: Buffer, retType: string, argTypes: any[], abi?: number): ForeignFunction,
        (ptr: Buffer, retType: ref.Type, argTypes: any[], abi?: number): ForeignFunction,
        (ptr: Buffer, retType: string, argTypes: any[], abi?: number): ForeignFunction
    };
    declare     export interface VariadicForeignFunction {

        /**
         * What gets returned is another function that needs to be invoked with the rest
         * of the variadic types that are being invoked from the function.
         */
        (...args: any[]): ForeignFunction,

        /**
         * Return type as a property of the function generator to
         * allow for monkey patching the return value in the very rare case where the
        return type is variadic as well
        */
        returnType: any
    }
    declare     export var VariadicForeignFunction: {
        new(
            ptr: Buffer,
            ret: ref.Type,
            fixedArgs: any[],
            abi?: number): VariadicForeignFunction,
        new(
            ptr: Buffer,
            ret: string,
            fixedArgs: any[],
            abi?: number): VariadicForeignFunction,
        (ptr: Buffer, ret: ref.Type, fixedArgs: any[], abi?: number): VariadicForeignFunction,
        (ptr: Buffer, ret: string, fixedArgs: any[], abi?: number): VariadicForeignFunction
    };
    declare     export interface DynamicLibrary {

        /**
         * Close library, returns the result of the `dlclose` system function. 
         */
        close(): number,

            /**
             * Get a symbol from this library. 
             */
            get(symbol: string): Buffer,

            /**
             * Get the result of the `dlerror` system function. 
             */
            error(): string
    }
    declare     export var DynamicLibrary: {
        FLAGS: {
            RTLD_LAZY: number,
            RTLD_NOW: number,
            RTLD_LOCAL: number,
            RTLD_GLOBAL: number,
            RTLD_NOLOAD: number,
            RTLD_NODELETE: number,
            RTLD_NEXT: Buffer,
            RTLD_DEFAUL: Buffer
        },
        new(path?: string, mode?: number): DynamicLibrary,
        (path?: string, mode?: number): DynamicLibrary
    };
    declare     export var Callback: {
        new(retType: any, argTypes: any[], abi: number, fn: any): Buffer,
        new(retType: any, argTypes: any[], fn: any): Buffer,
        (retType: any, argTypes: any[], abi: number, fn: any): Buffer,
        (retType: any, argTypes: any[], fn: any): Buffer
    };
    declare     export var ffiType: {

        /**
         * Get a `ffi_type ` Buffer appropriate for the given type. 
         */
        (type: ref.Type): Buffer,

        /**
         * Get a `ffi_type ` Buffer appropriate for the given type. 
         */
        (type: string): Buffer,
        FFI_TYPE: StructType
    };
    declare     export var CIF: (retType: any, types: any[], abi?: any) => Buffer;
    declare     export var CIF_var: (retType: any, types: any[], numFixedArgs: number, abi?: any) => Buffer;
    declare     export var HAS_OBJC: boolean;
    declare     export var FFI_TYPES: {
        [key: string]: Buffer
    };
    declare     export var FFI_OK: number;
    declare     export var FFI_BAD_TYPEDEF: number;
    declare     export var FFI_BAD_ABI: number;
    declare     export var FFI_DEFAULT_ABI: number;
    declare     export var FFI_FIRST_ABI: number;
    declare     export var FFI_LAST_ABI: number;
    declare     export var FFI_SYSV: number;
    declare     export var FFI_UNIX64: number;
    declare     export var RTLD_LAZY: number;
    declare     export var RTLD_NOW: number;
    declare     export var RTLD_LOCAL: number;
    declare     export var RTLD_GLOBAL: number;
    declare     export var RTLD_NOLOAD: number;
    declare     export var RTLD_NODELETE: number;
    declare     export var RTLD_NEXT: Buffer;
    declare     export var RTLD_DEFAULT: Buffer;
    declare     export var LIB_EXT: string;
    declare     export var FFI_TYPE: StructType;
    declare     export var types: {
        void: ref.Type,
        int64: ref.Type,
        ushort: ref.Type,
        int: ref.Type,
        uint64: ref.Type,
        float: ref.Type,
        uint: ref.Type,
        long: ref.Type,
        double: ref.Type,
        int8: ref.Type,
        ulong: ref.Type,
        Object: ref.Type,
        uint8: ref.Type,
        longlong: ref.Type,
        CString: ref.Type,
        int16: ref.Type,
        ulonglong: ref.Type,
        bool: ref.Type,
        uint16: ref.Type,
        char: ref.Type,
        byte: ref.Type,
        int32: ref.Type,
        uchar: ref.Type,
        size_t: ref.Type,
        uint32: ref.Type,
        short: ref.Type
    };
}