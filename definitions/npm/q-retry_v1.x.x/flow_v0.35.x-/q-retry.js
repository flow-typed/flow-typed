// @flow
/**
 * Flowtype definitions for q-retry
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$Q: {
    retry: typeof Q$retry,
}
declare export interface Q$IRetryOptions {
    limit?: number,
        interval?: number,
        maxInterval?: number,
        intervalMultiplier?: number
}

declare export function Q$retry<U>(
        process: () => IPromise<U>,
        onFail: (reason: any, retries: number) => void,
        limit: number): Q$Promise<U >

    declare interface Q$Promise<T>{
        retry<U>(
            process: (value: T) => IPromise<U>,
            onFail: (reason: any, retries: number) => void,
            limit: number): Q$Promise<U>,
        retry<U>(
            process: (value: T) => IPromise<U>,
            onFail: (reason: any, retries: number) => void,
            options?: Q$IRetryOptions): Q$Promise<U>,
        retry<U>(process: (value: T) => IPromise<U>, limit: number): Q$Promise<U>,
        retry<U>(process: (value: T) => IPromise<U>, options?: Q$IRetryOptions): Q$Promise<U>,
        retry<U>(
            process: (value: T) => U,
            onFail: (reason: any, retries: number) => void,
            limit: number): Q$Promise<U>,
        retry<U>(
            process: (value: T) => U,
            onFail: (reason: any, retries: number) => void,
            options?: Q$IRetryOptions): Q$Promise<U>,
        retry<U>(process: (value: T) => U, limit: number): Q$Promise<U>,
        retry<U>(process: (value: T) => U, options?: Q$IRetryOptions): Q$Promise<U >
    }
declare module 'q-retry' {
    declare module.exports: typeof Q
}