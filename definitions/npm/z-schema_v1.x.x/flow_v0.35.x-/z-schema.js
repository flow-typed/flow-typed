/**
 * Flowtype definitions for z-schema
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
export interface ZSchema$Options {
    asyncTimeout?: number,
        forceAdditional?: boolean,
        assumeAdditional?: boolean,
        forceItems?: boolean,
        forceMinItems?: boolean,
        forceMaxItems?: boolean,
        forceMinLength?: boolean,
        forceMaxLength?: boolean,
        forceProperties?: boolean,
        ignoreUnresolvableReferences?: boolean,
        noExtraKeywords?: boolean,
        noTypeless?: boolean,
        noEmptyStrings?: boolean,
        noEmptyArrays?: boolean,
        strictUris?: boolean,
        strictMode?: boolean,
        reportPathAsArray?: boolean,
        breakOnFirstError?: boolean,
        pedanticCheck?: boolean,
        ignoreUnknownFormats?: boolean
}

declare
export interface ZSchema$SchemaError {
    code: string,
        description: string,
        message: string,
        params: string[],
        path: string
}

declare
export class Validator {

    /**
     * Register a custom format.
     * @param name - name of the custom format
     * @param validatorFunction - custom format validator function.
    Returns `true` if `value` matches the custom format.
    */
    registerFormat(formatName: string, validatorFunction: (value: any) => boolean): void;

    /**
     * Unregister a format.
     * @param name - name of the custom format
     */
    unregisterFormat(name: string): void;

    /**
     * Get the list of all registered formats.
     * 
    Both the names of the burned-in formats and the custom format names are
    returned by this function.
     * @returns  the list of all registered format names.
    */
    getRegisteredFormats(): string[];
    getDefaultOptions(): ZSchema$Options;
    constructor(options: ZSchema$Options): this;

    /**
     * 
     * @param schema - JSON object representing schema
     * @returns  true if schema is valid.
     */
    validateSchema(schema: any): boolean;

    /**
     * 
     * @param json - either a JSON string or a parsed JSON object
     * @param schema - the JSON object representing the schema
     * @returns  true if json matches schema
     */
    validate(json: any, schema: any): boolean;

    /**
     * 
     * @param json - either a JSON string or a parsed JSON object
     * @param schema - the JSON object representing the schema
     */
    validate(json: any, schema: any, callback: (err: any, valid: boolean) => void): void;
    getLastError(): ZSchema$SchemaError;
    getLastErrors(): ZSchema$SchemaError[]
}
declare module 'z-schema' {
    declare module.exports: typeof ZSchema$Validator
}