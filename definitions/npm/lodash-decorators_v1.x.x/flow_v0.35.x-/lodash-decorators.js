// @flow
/**
 * Flowtype definitions for lodash-decorators
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'lodash-decorators' {
    declare     export interface ClassDecorator {
        (target: TFunction): TFunction | void
    }
    declare     export interface PropertyDecorator {
        (target: Object, propertyKey: string | ): void
    }
    declare     export interface MethodDecorator {
        (target: Object, propertyKey: string | , descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>| void
    }
    declare     export interface ParameterDecorator {
        (target: Object, propertyKey: string | , parameterIndex: number): void
    }
    declare     export interface TypedMethodDecorator<TFunction>{
        (target: Object, propertyKey: string | , descriptor: TypedPropertyDescriptor<TFunction>): TypedPropertyDescriptor<TFunction>| void
    }
    declare     export type MethodDecoratorWithAccessor = {} & MethodDecorator & Accessor

    declare     export interface Accessor<T>{
        set: T,
        get: T,
        proto: T
    }
    declare     export interface DebounceDecorator {
        (wait: number, options?: _.DebounceSettings): MethodDecorator
    }
    declare     export interface ThrottleDecorator {
        (wait: number, options?: _.ThrottleSettings): MethodDecorator
    }
    declare     export interface MemoizeDecorator {
        (resolver?: Function): MethodDecorator
    }
    declare     export interface AfterDecorator {
        (n: number): MethodDecorator
    }
    declare     export interface BeforeDecorator {
        (n: number): MethodDecorator
    }
    declare     export interface AryDecorator {
        (n: number): MethodDecorator
    }
    declare     export interface CurryDecorator {
        (arity?: number): MethodDecorator
    }
    declare     export interface CurryRightDecorator {
        (arity?: number): MethodDecorator
    }
    declare     export interface RestParamDecorator {
        (start?: number): MethodDecorator
    }
    declare     export interface PartialDecorator {
        (func: Function | string, ...args: any[]): MethodDecorator
    }
    declare     export interface WrapDecorator {
        (wrapper: ((func: Function, ...args: any[]) => any) | string): MethodDecorator
    }
    declare     export interface ComposeDecorator {
        (...funcs: (Function | string)[]): MethodDecorator
    }
    declare     export interface DelayDecorator {
        (wait: number, ...args: any[]): MethodDecorator
    }
    declare     export interface DeferDecorator {
        (...args: any[]): MethodDecorator
    }
    declare     export interface BindDecorator {
        (): TypedMethodDecorator<(<R>() => R)>,
            (param1?: T1): TypedMethodDecorator<(<R>(param1: T1) => R)>,
            (param1?: T1, param2?: T2): TypedMethodDecorator<(<R>(param1: T1, param2: T2) => R)>,
            (param1?: T1, param2?: T2, param3?: T3): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3) => R)>,
            (param1?: T1, param2?: T2, param3?: T3, param4?: T4): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4) => R)>,
            (param1?: T1, param2?: T2, param3?: T3, param4?: T4, param5?: T5): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4, param5: T5) => R)>,
            (param1?: T1, param2?: T2, param3?: T3, param4?: T4, param5?: T5, param6?: T6): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4, param5: T5, param6: T6) => R) >
    }
    declare     export interface BindAllDecorator {
        (...methodNames: string[]): ClassDecorator
    }
    declare     export interface ModArgsDecorator {
        (...transforms: Function[]): MethodDecorator
    }
    declare     export var debounce: DebounceDecorator & Accessor<DebounceDecorator>;
    declare     export var Debounce: DebounceDecorator & Accessor<DebounceDecorator>;
    declare     export var throttle: ThrottleDecorator & Accessor<ThrottleDecorator>;
    declare     export var Throttle: ThrottleDecorator & Accessor<ThrottleDecorator>;
    declare     export var memoize: MemoizeDecorator & Accessor<MemoizeDecorator>;
    declare     export var Memoize: MemoizeDecorator & Accessor<MemoizeDecorator>;
    declare     export var after: AfterDecorator & Accessor<AfterDecorator>;
    declare     export var After: AfterDecorator & Accessor<AfterDecorator>;
    declare     export var before: BeforeDecorator & Accessor<BeforeDecorator>;
    declare     export var Before: BeforeDecorator & Accessor<BeforeDecorator>;
    declare     export var ary: AryDecorator & Accessor<AryDecorator>;
    declare     export var Ary: AryDecorator & Accessor<AryDecorator>;
    declare     export var curry: CurryDecorator & Accessor<CurryDecorator>;
    declare     export var Curry: CurryDecorator & Accessor<CurryDecorator>;
    declare     export var curryRight: CurryRightDecorator & Accessor<CurryRightDecorator>;
    declare     export var CurryRight: CurryRightDecorator & Accessor<CurryRightDecorator>;
    declare     export var restParam: RestParamDecorator & Accessor<RestParamDecorator>;
    declare     export var RestParam: RestParamDecorator & Accessor<RestParamDecorator>;
    declare     export var partial: PartialDecorator & Accessor<PartialDecorator>;
    declare     export var Partial: PartialDecorator & Accessor<PartialDecorator>;
    declare     export var partialRight: PartialDecorator & Accessor<PartialDecorator>;
    declare     export var PartialRight: PartialDecorator & Accessor<PartialDecorator>;
    declare     export var wrap: WrapDecorator & Accessor<WrapDecorator>;
    declare     export var Wrap: WrapDecorator & Accessor<WrapDecorator>;
    declare     export var compose: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var Compose: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var flow: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var Flow: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var flowRight: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var FlowRight: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var backflow: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var Backflow: ComposeDecorator & Accessor<ComposeDecorator>;
    declare     export var delay: DelayDecorator & Accessor<DelayDecorator>;
    declare     export var Delay: DelayDecorator & Accessor<DelayDecorator>;
    declare     export var defer: DeferDecorator & Accessor<DeferDecorator>;
    declare     export var Defer: DeferDecorator & Accessor<DeferDecorator>;
    declare     export var bind: BindDecorator & Accessor<BindDecorator>;
    declare     export var Bind: BindDecorator & Accessor<BindDecorator>;
    declare     export var bindAll: BindAllDecorator;
    declare     export var BindAll: BindAllDecorator;
    declare     export var modArgs: ModArgsDecorator & Accessor<ModArgsDecorator>;
    declare     export var ModArgs: ModArgsDecorator & Accessor<ModArgsDecorator>;
    declare     export var once: MethodDecoratorWithAccessor;
    declare     export var Once: MethodDecoratorWithAccessor;
    declare     export var spread: MethodDecoratorWithAccessor;
    declare     export var Spread: MethodDecoratorWithAccessor;
    declare     export var rearg: MethodDecoratorWithAccessor;
    declare     export var Rearg: MethodDecoratorWithAccessor;
    declare     export var negate: MethodDecoratorWithAccessor;
    declare     export var Negate: MethodDecoratorWithAccessor;
    declare     export var tap: MethodDecoratorWithAccessor;
    declare     export var Tap: MethodDecoratorWithAccessor;
}
declare module 'lodash-decorators/extensions' {
    declare     export interface ClassDecorator {
        (target: TFunction): TFunction | void
    }
    declare     export interface PropertyDecorator {
        (target: Object, propertyKey: string | ): void
    }
    declare     export interface MethodDecorator {
        (target: Object, propertyKey: string | , descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>| void
    }
    declare     export interface ParameterDecorator {
        (target: Object, propertyKey: string | , parameterIndex: number): void
    }
    declare     export type DeprecatedDecorator = {
        methodAction(fn: Function & {
            name: string
        }): void
    } & MethodDecorator & ClassDecorator

    declare     export var deprecated: DeprecatedDecorator;
    declare     export var Deprecated: DeprecatedDecorator;
    declare     export var writable: (writable?: boolean) => MethodDecorator;
    declare     export var Writable: (writable?: boolean) => MethodDecorator;
    declare     export var configurable: (configurable?: boolean) => MethodDecorator;
    declare     export var Configurable: (configurable?: boolean) => MethodDecorator;
    declare     export var returnsArg: (index?: number) => MethodDecorator;
    declare     export var ReturnsArg: (index?: number) => MethodDecorator;
    declare     export var enumerable: (enumerable?: boolean) => MethodDecorator;
    declare     export var Enumerable: (enumerable?: boolean) => MethodDecorator;
    declare     export var nonenumerable: MethodDecorator;
    declare     export var Nonenumerable: MethodDecorator;
    declare     export var nonconfigurable: MethodDecorator;
    declare     export var Nonconfigurable: MethodDecorator;
    declare     export var readonly: MethodDecorator;
    declare     export var Readonly: MethodDecorator;
}
declare module 'lodash-decorators/validate' {
    declare     export interface ClassDecorator {
        (target: TFunction): TFunction | void
    }
    declare     export interface PropertyDecorator {
        (target: Object, propertyKey: string | ): void
    }
    declare     export interface MethodDecorator {
        (target: Object, propertyKey: string | , descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>| void
    }
    declare     export interface ParameterDecorator {
        (target: Object, propertyKey: string | , parameterIndex: number): void
    }
    declare     export interface TypedMethodDecorator<TFunction>{
        (target: Object, propertyKey: string | , descriptor: TypedPropertyDescriptor<TFunction>): TypedPropertyDescriptor<TFunction>| void
    }
    declare     export interface Predicate<T>{
        (t: T): boolean
    }
    declare type Predicates<T>= Predicate<T>| Predicate<T>[];
    declare     export interface ValidateDecorator {
        (p1: Predicates<T1>): TypedMethodDecorator<(<R>(param1: T1) => R)>,
            (p1: Predicates<T1>, p2?: Predicates<T2>): TypedMethodDecorator<(<R>(param1: T1, param2: T2) => R)>,
            (p1: Predicates<T1>, p2?: Predicates<T2>, p3?: Predicates<T3>): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3) => R)>,
            (p1: Predicates<T1>, p2?: Predicates<T2>, p3?: Predicates<T3>, p4?: Predicates<T4>): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4) => R)>,
            (p1: Predicates<T1>, p2?: Predicates<T2>, p3?: Predicates<T3>, p4?: Predicates<T4>, p5?: Predicates<T5>): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4, param5: T5) => R)>,
            (p1: Predicates<T1>, p2?: Predicates<T2>, p3?: Predicates<T3>, p4?: Predicates<T4>, p5?: Predicates<T5>, p6?: Predicates<T6>): TypedMethodDecorator<(<R>(param1: T1, param2: T2, param3: T3, param4: T4, param5: T5, param6: T6) => R) >
    }
    declare     export interface ValidateReturnDecorator {
        (p1: Predicates<R>): TypedMethodDecorator<((...args: any[]) => R) >
    }
    declare     export var validate: ValidateDecorator;
    declare     export var Validate: ValidateDecorator;
    declare     export var validateReturn: ValidateReturnDecorator;
    declare     export var ValidateReturn: ValidateReturnDecorator;
}