// @flow
/**
 * Flowtype definitions for pathfinding
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'pathfinding' {

    declare     var npm$namespace$Heuristic: {
        manhattan: typeof Heuristic$manhattan,
        euclidean: typeof Heuristic$euclidean,
        octile: typeof Heuristic$octile,
        chebyshev: typeof Heuristic$chebyshev,
    }
    declare     function Heuristic$manhattan(dx: number, dy: number): number

    declare     function Heuristic$euclidean(dx: number, dy: number): number

    declare     function Heuristic$octile(dx: number, dy: number): number

    declare     function Heuristic$chebyshev(dx: number, dy: number): number


    declare     var npm$namespace$Util: {
        smoothenPath: typeof Util$smoothenPath,
        compressPath: typeof Util$compressPath,
        expandPath: typeof Util$expandPath,
    }
    declare     function Util$smoothenPath(grid: Pathfinding$Grid, path: number[][]): number[][]

    declare     function Util$compressPath(path: number[][]): number[][]

    declare     function Util$expandPath(path: number[][]): number[][]

    declare interface Pathfinding$Node {
        x: number,
            y: number,
            walkable: boolean
    }

    declare interface Pathfinding$Heuristic {
        heuristic?: (dx: number, dy: number) => number
    }

    declare type Pathfinding$FinderOptions = {
        diagonalMovement?: DiagonalMovement,
        weight?: number
    } & Pathfinding$Heuristic


    declare type Pathfinding$IDAStarFinderOptions = {
        trackRecursion?: boolean,
        timeLimit?: number
    } & Pathfinding$FinderOptions


    declare type Pathfinding$JumpPointFinderBaseOptions = {
        trackJumpRecursion?: boolean
    } & Pathfinding$Heuristic


    declare type Pathfinding$JumpPointFinderOptions = {
        diagonalMovement?: DiagonalMovement
    } & Pathfinding$Heuristic


    declare interface Pathfinding$BiBreadthFirstFinderOptions {
        diagonalMovement?: DiagonalMovement
    }

    declare interface Pathfinding$Grid {
        new(width: number, height: number): Pathfinding$Grid,
        new(matrix: number[][]): Pathfinding$Grid,
        setWalkableAt(x: number, y: number, walkable: boolean): void,
            clone(): Pathfinding$Grid,
            getNodeAt(): Pathfinding$Node,
            getNeighbors(node: Pathfinding$Node, diagonalMovement: DiagonalMovement): Pathfinding$Node[],
            isWalkableAt(x: number, y: number): boolean,
            isInside(x: number, y: number): boolean,
            width: number,
            height: number
    }

    declare interface Pathfinding$Finder {
        findPath(
            startX: number,
            startY: number,
            endX: number,
            endY: number,
            matrix: Pathfinding$Grid): number[][]
    }

    declare type Pathfinding$AStarFinder = {
        new(): Pathfinding$AStarFinder,
        new(opt: Pathfinding$FinderOptions): Pathfinding$AStarFinder
    } & Pathfinding$Finder


    declare type Pathfinding$BestFirstFinder = {
        new(): Pathfinding$BestFirstFinder,
        new(opt: Pathfinding$JumpPointFinderOptions): Pathfinding$BestFirstFinder
    } & Pathfinding$AStarFinder


    declare type Pathfinding$BiAStarFinder = {
        new(): Pathfinding$BiAStarFinder,
        new(opt: Pathfinding$JumpPointFinderOptions): Pathfinding$BiAStarFinder
    } & Pathfinding$Finder


    declare type Pathfinding$BiBestFirstFinder = {
        new(): Pathfinding$BiBestFirstFinder,
        new(opt: Pathfinding$JumpPointFinderOptions): Pathfinding$BiBestFirstFinder
    } & Pathfinding$BiAStarFinder


    declare type Pathfinding$BiBreadthFirstFinder = {
        new(): Pathfinding$BiBreadthFirstFinder,
        new(opt: Pathfinding$BiBreadthFirstFinderOptions): Pathfinding$BiBreadthFirstFinder
    } & Pathfinding$Finder


    declare type Pathfinding$BiDijkstraFinder = {
        new(): Pathfinding$BiDijkstraFinder,
        new(opt: Pathfinding$BiBreadthFirstFinderOptions): Pathfinding$BiDijkstraFinder
    } & Pathfinding$BiAStarFinder


    declare type Pathfinding$BreadthFirstFinder = {
        new(): Pathfinding$BreadthFirstFinder,
        new(opt: Pathfinding$BiBreadthFirstFinderOptions): Pathfinding$BreadthFirstFinder
    } & Pathfinding$Finder


    declare type Pathfinding$DijkstraFinder = {
        new(): Pathfinding$DijkstraFinder,
        new(opt: Pathfinding$BiBreadthFirstFinderOptions): Pathfinding$DijkstraFinder
    } & Pathfinding$AStarFinder


    declare type Pathfinding$IDAStarFinder = {
        new(): Pathfinding$IDAStarFinder,
        new(opt: Pathfinding$IDAStarFinderOptions): Pathfinding$IDAStarFinder
    } & Pathfinding$Finder


    declare type Pathfinding$JumpPointFinderBase = {
        new(): Pathfinding$JumpPointFinderBase,
        new(opt: Pathfinding$JumpPointFinderBaseOptions): Pathfinding$JumpPointFinderBase
    } & Pathfinding$Finder


    declare type Pathfinding$JPFAlwaysMoveDiagonally = {
        new(): Pathfinding$JPFAlwaysMoveDiagonally,
        new(
            opt: Pathfinding$JumpPointFinderBaseOptions): Pathfinding$JPFAlwaysMoveDiagonally
    } & Pathfinding$JumpPointFinderBase


    declare type Pathfinding$JPFMoveDiagonallyIfAtMostOneObstacle = {
        new(): Pathfinding$JPFMoveDiagonallyIfAtMostOneObstacle,
        new(
            opt: Pathfinding$JumpPointFinderBaseOptions): Pathfinding$JPFMoveDiagonallyIfAtMostOneObstacle
    } & Pathfinding$JumpPointFinderBase


    declare type Pathfinding$JPFMoveDiagonallyIfNoObstacles = {
        new(): Pathfinding$JPFMoveDiagonallyIfNoObstacles,
        new(
            opt: Pathfinding$JumpPointFinderBaseOptions): Pathfinding$JPFMoveDiagonallyIfNoObstacles
    } & Pathfinding$JumpPointFinderBase


    declare type Pathfinding$JPFNeverMoveDiagonally = {
        new(): Pathfinding$JPFNeverMoveDiagonally,
        new(
            opt: Pathfinding$JumpPointFinderBaseOptions): Pathfinding$JPFNeverMoveDiagonally
    } & Pathfinding$JumpPointFinderBase


    declare interface Pathfinding$JumpPointFinder {
        (opt: Pathfinding$JumpPointFinderOptions): Pathfinding$JPFNeverMoveDiagonally | Pathfinding$JPFAlwaysMoveDiagonally | Pathfinding$JPFMoveDiagonallyIfNoObstacles | Pathfinding$JPFMoveDiagonallyIfAtMostOneObstacle
    }

    declare     export var Grid: Pathfinding$Grid;

    declare     export var AStarFinder: Pathfinding$AStarFinder;

    declare     export var BestFirstFinder: Pathfinding$BestFirstFinder;

    declare     export var BiAStarFinder: Pathfinding$BiAStarFinder;

    declare     export var BiBestFirstFinder: Pathfinding$BiBestFirstFinder;

    declare     export var BiBreadthFirstFinder: Pathfinding$BiBreadthFirstFinder;

    declare     export var BiDijkstraFinder: Pathfinding$BiDijkstraFinder;

    declare     export var BreadthFirstFinder: Pathfinding$BreadthFirstFinder;

    declare     export var DijkstraFinder: Pathfinding$DijkstraFinder;

    declare     export var IDAStarFinder: Pathfinding$IDAStarFinder;

    declare     export var JPFAlwaysMoveDiagonally: Pathfinding$JPFAlwaysMoveDiagonally;

    declare     export var JPFMoveDiagonallyIfAtMostOneObstacle: Pathfinding$JPFMoveDiagonallyIfAtMostOneObstacle;

    declare     export var JPFMoveDiagonallyIfNoObstacles: Pathfinding$JPFMoveDiagonallyIfNoObstacles;

    declare     export var JPFNeverMoveDiagonally: Pathfinding$JPFNeverMoveDiagonally;

    declare     export var JumpPointFinder: Pathfinding$JumpPointFinder;
    declare module.exports: typeof Pathfinding
}