/**
 * Flowtype definitions for hashtable
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface IHashtable<TKey, TValue>{
    put(key: TKey, value: TValue): TValue,
    putAll(
        hashtable: IHashtable<TKey, TValue>,
        conflictCallback?: (key: TKey, thisValue: TValue, value: TValue) => TValue): void,
    get(key: TKey): TValue,
    containsKey(key: TKey): boolean,
    containsValue(value: TValue): boolean,
    clear(): void,
    isEmpty(): boolean,
    keys(): TKey[],
    values(): TValue[],
    entries(): any[][],
    remove(key: TKey): TValue,
    size(): number,
    clone(): IHashtable<TKey,
    TValue>,
    each(callback: (key: TKey, value: TValue) => void): void,
    equals(hashtable: IHashtable<TKey, TValue>): boolean,
    toQueryString(): string
}
declare interface IHashtableOptions<TKey>{
    hashCode?: (key: TKey) => any,
    equals?: (key1: TKey, key2: TKey) => boolean,
    replaceDuplicateKey?: boolean
}
declare interface IHashtableStatic {
    new<TKey, TValue>(): IHashtable<TKey, TValue>,
        new<TKey, TValue>(options: IHashtableOptions<TKey>): IHashtable<TKey, TValue>,
        new<TKey, TValue>(
            hashCode?: (value: TValue) => any,
            equals?: (value1: TValue, value2: TValue) => boolean): IHashtable<TKey, TValue >
}
declare var Hashtable: IHashtableStatic;
declare module 'hashtable' {
    declare module.exports: typeof Hashtable
}