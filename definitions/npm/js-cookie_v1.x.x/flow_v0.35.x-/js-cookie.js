/**
 * Flowtype definitions for js-cookie
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Cookies$CookieAttributes {

    /**
     * Define when the cookie will be removed. Value can be a Number
     * which will be interpreted as days from time of creation or a
    Date instance. If omitted, the cookie becomes a session cookie.
    */
    expires?: number | Date,

        /**
         * Define the path where the cookie is available. Defaults to '/'
         */
        path?: string,

        /**
         * Define the domain where the cookie is available. Defaults to
         * the domain of the page where the cookie was created.
         */
        domain?: string,

        /**
         * A Boolean indicating if the cookie transmission requires a
         * secure protocol (https). Defaults to false.
         */
        secure?: boolean
}

declare interface Cookies$CookiesStatic {

    /**
     * Allows default cookie attributes to be accessed, changed, or reset
     */
    defaults: Cookies$CookieAttributes,

        /**
         * Create a cookie
         */
        set(name: string, value: string | any, options?: Cookies$CookieAttributes): void,

        /**
         * Read cookie
         */
        get(name: string): string,

        /**
         * Read all available cookies
         */
        get(): {
            [key: string]: string
        },

        /**
         * Returns the parsed representation of the string
         * stored in the cookie according to JSON.parse
         */
        getJSON(name: string): any,

        /**
         * Returns the parsed representation of
         * all cookies according to JSON.parse
         */
        getJSON(): {
            [key: string]: any
        },

        /**
         * Delete cookie
         */
        remove(name: string, options?: Cookies$CookieAttributes): void,

        /**
         * If there is any danger of a conflict with the namespace Cookies,
         * the noConflict method will allow you to define a new namespace
        and preserve the original one. This is especially useful when
        running the script on third party sites e.g. as part of a widget
        or SDK. Note: The noConflict method is not necessary when using
        AMD or CommonJS, thus it is not exposed in those environments.
        */
        noConflict(): Cookies$CookiesStatic,

        /**
         * Create a new instance of the api that overrides the default
         * decoding implementation. All methods that rely in a proper
        decoding to work, such as Cookies.remove() and Cookies.get(),
        will run the converter first for each cookie. The returned
        string will be used as the cookie value.
        */
        withConverter(converter: (value: string, name: string) => string): Cookies$CookiesStatic
}
declare var Cookies: Cookies$CookiesStatic;
declare module 'js-cookie' {
    declare module.exports: typeof Cookies
}