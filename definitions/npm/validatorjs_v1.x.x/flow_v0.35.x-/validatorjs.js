// @flow
/**
 * Flowtype definitions for validatorjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface ValidatorJS$ParsedRule {
    attribute: Array<{
        name: string,
        value: any
    } >
}

declare interface ValidatorJS$ValidationErrors {
    [field: string]: string
}

declare interface ValidatorJS$ErrorMessages {
    [key: string]: string
}

declare interface ValidatorJS$AttributeNames {
    [attribute: string]: string
}

declare type ValidatorJS$AttributeFormatter = (attribute: any) => any;

declare interface ValidatorJS$Errors {
    errors: ValidatorJS$ValidationErrors,
        add(attribute: string, message: string): void,
        get(attribute: string): Array<string>,
        first(attribute: string): string | boolean,
        all(): ValidatorJS$ValidationErrors,
        has(attribute: string): boolean
}

declare interface ValidatorJS$ValidatorStatic {
    new<A>(
            data: A,
            rules: any,
            customMessages?: ValidatorJS$ErrorMessages): ValidatorJS$Validator<A>,
        setMessages(lang: string, messages: ValidatorJS$ErrorMessages): any,
        getMessages(lang: string): ValidatorJS$ErrorMessages,
        useLang(lang: string): void,
        getDefaultLang(): string,
        setAttributeFormatter(func: ValidatorJS$AttributeFormatter): void,
        stopOnError(attributes: boolean | Array<string>): void,
        register(name: string, fn: Function, message: string): void,
        registerAsync(name: string, fn: Function, message: string): void
}

declare interface ValidatorJS$Validator<A>{
    lang: string,
    input: A,
    messages: ValidatorJS$ErrorMessages,
    errors: ValidatorJS$Errors,
    errorCount: number,
    hasAsync: boolean,
    rules: any,
    numericRules: Array<string>,
    attributeFormatter: ValidatorJS$AttributeFormatter,
    check(): boolean,
    checkAsync(passes?: Function, fails?: Function): void,
    setAttributeNames(attributes: ValidatorJS$AttributeNames): void,
    setAttributeFormatter(func: ValidatorJS$AttributeFormatter): void,
    getRule(name: string): Function,
    stopOnError(passes?: Function): boolean | void,
    passes(passes?: Function): boolean | void,
    fails(fails?: Function): boolean | void
}
declare module 'validatorjs' {
    declare     var Validator: ValidatorJS$ValidatorStatic;
    declare module.exports: typeof Validator
}