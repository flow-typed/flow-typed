// @flow
/**
 * Flowtype definitions for encoding-japanese
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'encoding-japanese' {
    declare     export type Encoding = "UTF32" |
        "UTF16" |
        "UTF16BE" |
        "UTF16LE" |
        "BINARY" |
        "ASCII" |
        "JIS" |
        "UTF8" |
        "EUCJP" |
        "SJIS" |
        "UNICODE" |
        "AUTO";
    declare type RawType = string | Uint8Array | number[] | Buffer;
    declare interface ConvertOptions {
        to: Encoding,
            from?: Encoding,
            type?: "string" | "arraybuffer" | "array",
            bom?: boolean | string
    }
    declare     export function detect(data: RawType, encodings?: Encoding | Encoding[]): Encoding
    declare     export function convert(data: RawType, to: Encoding, from?: Encoding): number[]
    declare     export function urlEncode(data: number[] | Uint8Array): string
    declare     export function urlDecode(data: string): number[]
    declare     export function base64Encode(data: number[] | Uint8Array): string
    declare     export function base64Decode(data: string): number[]
    declare     export function codeToString(data: number[] | Uint8Array): string
    declare     export function stringToCode(data: string): number[]
    declare     export function toHankakuCase(data: number[]): number[]
    declare     export function toZenkakuCase(data: number[]): number[]
    declare     export function toHiraganaCase(data: number[]): number[]
    declare     export function toKatakanaCase(data: number[]): number[]
    declare     export function toHankanaCase(data: number[]): number[]
    declare     export function toZenkanaCase(data: number[]): number[]
    declare     export function toHankakuSpace(data: number[]): number[]
    declare     export function toZenkakuSpace(data: number[]): number[]
}