// @flow
/**
 * Flowtype definitions for twix
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface moment$Moment {
    twix(date: Date): moment$Twix,
        twix(date: Date, allDay: boolean): moment$Twix,
        twix(date: Date, options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: Date,
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(date: moment$Moment): moment$Twix,
        twix(date: moment$Moment, allDay: boolean): moment$Twix,
        twix(date: moment$Moment, options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: moment$Moment,
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(date: MomentInput): moment$Twix,
        twix(date: MomentInput, allDay: boolean): moment$Twix,
        twix(date: MomentInput, options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: MomentInput,
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(date: number): moment$Twix,
        twix(date: number, allDay: boolean): moment$Twix,
        twix(date: number, options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: number,
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(date: number[]): moment$Twix,
        twix(date: number[], allDay: boolean): moment$Twix,
        twix(date: number[], options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: number[],
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(date: string): moment$Twix,
        twix(date: string, allDay: boolean): moment$Twix,
        twix(date: string, options: moment$TwixParseAndFormatOptions): moment$Twix,
        twix(
            date: string,
            format: string,
            options: moment$TwixParseAndFormatOptions): moment$Twix
}

declare interface moment$MomentStatic {
    twix(start: moment$Moment, end: moment$Moment): moment$Twix,
        twixClass: moment$TwixStatic
}

declare interface moment$TwixFormatOptions {
    groupMeridiems?: boolean,
        spaceBeforeMeridiem?: boolean,
        showDate?: boolean,
        showDayOfWeek?: boolean,
        twentyFourHour?: boolean,
        implicitMinutes?: boolean,
        implicitYear?: boolean,
        yearFormat?: string,
        monthFormat?: string,
        weekdayFormat?: string,
        dayFormat?: string,
        meridiemFormat?: string,
        hourFormat?: string,
        minuteFormat?: string,
        allDay?: any,
        explicitAllDay?: boolean,
        lastNightEndsAt?: number
}

declare type moment$TwixParseAndFormatOptions = {
    parseStrict?: boolean
} & moment$TwixFormatOptions


declare interface moment$TwixSimpleFormatOptions {
    allDay?: string,
        template?: (left: any, right: any) => any
}

declare interface moment$TwixIter {
    hasNext(): boolean,
        next(): moment$Twix
}

declare interface moment$Duration {
    afterMoment(date: string): string,
        beforeMoment(date: string): string
}

declare interface moment$Twix {
    isPast(): boolean,
        isFuture(): boolean,
        isCurrent(): boolean,
        isSame(period: string): boolean,
        contains(date: string): boolean,
        contains(date: Date): boolean,
        contains(date: moment$Moment): boolean,
        length(period: string): number,
        count(period: string): number,
        countInner(period: string): number,
        iterate(period: string): moment$TwixIter,
        iterate(num: number, period: string): moment$TwixIter,
        iterate(duration: moment$Duration): moment$TwixIter,
        iterateInner(period: string): moment$TwixIter,
        iterateInner(num: number, period: string): moment$TwixIter,
        overlaps(other: moment$Twix): boolean,
        engulfs(other: moment$Twix): boolean,
        equals(other: moment$Twix): boolean,
        union(other: moment$Twix): moment$Twix,
        intersection(other: moment$Twix): moment$Twix,
        xor(other: moment$Twix): moment$Twix[],
        difference(other: moment$Twix): moment$Twix[],
        split(num: number, period: string): moment$Twix[],
        split(other: moment$Moment): moment$Twix[],
        split(start: moment$Moment, end: moment$Moment): moment$Twix[],
        split(duration: moment$Duration): moment$Twix[],
        humanizeLength(): string,
        simpleFormat(): string,
        simpleFormat(format: string): string,
        simpleFormat(format: string, options: moment$TwixSimpleFormatOptions): string,
        format(): string,
        format(options: moment$TwixFormatOptions): string,
        asDuration(period: string): moment$Duration,
        isValid(): boolean
}

declare interface moment$TwixStatic {
    formatTemplate?: (left: any, right: any) => any
}
declare module 'twix' {
    declare     var _tmp: moment$MomentStatic;
    declare module.exports: typeof _tmp
}