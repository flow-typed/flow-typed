/**
 * Flowtype definitions for SharePoint
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
var _spBodyOnLoadFunctions: Function[];
declare
var _spBodyOnLoadFunctionNames: string[];
declare
var _spBodyOnLoadCalled: boolean;
declare
function ExecuteOrDelayUntilBodyLoaded(initFunc: () => void): voiddeclare
function ExecuteOrDelayUntilScriptLoaded(func: () => void, depScriptFileName: string): booleandeclare
function ExecuteOrDelayUntilEventNotified(func: Function, eventName: string): booleandeclare
var Strings: any;
declare
export class GanttControl {
    WaitForGanttCreation(callack: (control: SP$GanttControl) => void): void;
    Instances: SP$GanttControl[];
    FnGanttCreationCallback: {
        (control: SP$GanttControl): void
    }[];
    get_Columns(): undefined.ColumnInfo[]
}
/**
 * Register function to rerun on partial update in MDS-enabled site.
 */
declare
function RegisterModuleInit(scriptFileName: string, initFunc: () => void): void
/**
 * Provides access to url and query string parts.
 */
declare class JSRequest {

    /**
     * Query string parts.
     */
    QueryString: {
        [parameter: string]: string
    };

    /**
     * initializes class.
     */
    EnsureSetup(): void;

    /**
     * Current file name (after last '/' in url).
     */
    FileName: string;

    /**
     * Current file path (before last '/' in url).
     */
    PathName: string
}
declare class _spPageContextInfo {
    alertsEnabled: boolean;
    allowSilverlightPrompt: string;
    clientServerTimeDelta: number;
    crossDomainPhotosEnabled: boolean;
    currentCultureName: string;
    currentLanguage: number;
    currentUICultureName: string;
    layoutsUrl: string;
    pageListId: string;
    pageItemId: number;
    pagePersonalizationScope: string;
    serverRequestPath: string;
    siteAbsoluteUrl: string;
    siteClientTag: string;
    siteServerRelativeUrl: string;
    systemUserKey: string;
    tenantAppVersion: string;
    userId: number;
    webAbsoluteUrl: string;
    webLanguage: number;
    webLogoUrl: string;
    webPermMasks: {
        High: number,
        Low: number
    };
    webServerRelativeUrl: string;
    webTemplate: string;
    webTitle: string;
    webUIVersion: number
}
declare
function STSHtmlEncode(value: string): stringdeclare
function STSHtmlDecode(value: string): stringdeclare
function AddEvtHandler(element: HTMLElement, event: string, func: EventListener): void
/**
 * Gets query string parameter 
 */
declare
function GetUrlKeyValue(key: string): stringdeclare class AjaxNavigate {
    update(
        url: string,
        updateParts: SPAnimation$Object,
        fullNavigate: boolean,
        anchorName: string): void;
    add_navigate(handler: Function): void;
    remove_navigate(handler: Function): void;
    submit(formToSubmit: HTMLFormElement): void;
    getParam(paramName: string): string;
    getSavedFormAction(): string;
    get_href(): string;
    get_hash(): string;
    get_search(): string;
    convertMDSURLtoRegularURL(mdsPath: string): string
}
declare
var ajaxNavigate: AjaxNavigate;
declare class Browseris {
    firefox: boolean;
    firefox36up: boolean;
    firefox3up: boolean;
    firefox4up: boolean;
    ie: boolean;
    ie55up: boolean;
    ie5up: boolean;
    ie7down: boolean;
    ie8down: boolean;
    ie9down: boolean;
    ie8standard: boolean;
    ie8standardUp: boolean;
    ie9standardUp: boolean;
    ipad: boolean;
    windowsphone: boolean;
    chrome: boolean;
    chrome7up: boolean;
    chrome8up: boolean;
    chrome9up: boolean;
    iever: boolean;
    mac: boolean;
    major: boolean;
    msTouch: boolean;
    isTouch: boolean;
    nav: boolean;
    nav6: boolean;
    nav6up: boolean;
    nav7up: boolean;
    osver: boolean;
    safari: boolean;
    safari125up: boolean;
    safari3up: boolean;
    verIEFull: boolean;
    w3c: boolean;
    webKit: boolean;
    win: boolean;
    win8AppHost: boolean;
    win32: boolean;
    win64bit: boolean;
    winnt: boolean;
    armProcessor: boolean
}
declare
var browseris: Browseris;
declare type ContextInfo = {
    AllowGridMode: boolean,
    BasePermissions: any,
    BaseViewID: any,
    CascadeDeleteWarningMessage: string,
    ContentTypesEnabled: boolean,
    CurrentSelectedItems: boolean,
    CurrentUserId: number,
    EnableMinorVersions: boolean,
    ExternalDataList: boolean,
    HasRelatedCascadeLists: boolean,
    HttpPath: string,
    HttpRoot: string,
    LastSelectableRowIdx: number,
    LastSelectedItemIID: number,
    LastRowIndexSelected: number,
    RowFocusTimerID: number,
    ListData: any,
    ListSchema: SPClientTemplates$ListSchema,
    ModerationStatus: number,
    PortalUrl: string,
    RecycleBinEnabled: number,
    SelectAllCbx: HTMLElement,
    SendToLocationName: string,
    SendToLocationUrl: string,
    StateInitDone: boolean,
    TableCbxFocusHandler: Function,
    TableMouseoverHandler: Function,
    TotalListItems: number,
    WorkflowsAssociated: boolean,
    clvp: any,
    ctxId: number,
    ctxType: any,
    dictSel: any,
    displayFormUrl: string,
    editFormUrl: string,
    imagesPath: string,
    inGridMode: boolean,
    inGridFullRender: boolean,
    isForceCheckout: boolean,
    isModerated: boolean,
    isPortalTemplate: boolean,
    isVersions: boolean,
    isWebEditorPreview: boolean,
    leavingGridMode: boolean,
    loadingAsyncData: boolean,
    listBaseType: number,
    listName: string,
    listTemplate: string,
    listUrlDir: string,
    newFormUrl: string,
    onRefreshFailed: Function,
    overrideDeleteConfirmation: string,
    overrideFilterQstring: string,
    recursiveView: boolean,
    rootFolderForDisplay: string,
    serverUrl: string,
    verEnabled: boolean,
    view: string,
    queryString: string,
    IsClientRendering: boolean,
    wpq: string,
    rootFolder: string,
    IsAppWeb: boolean,
    NewWOPIDocumentEnabled: boolean,
    NewWOPIDocumentUrl: string,
    AllowCreateFolder: boolean,
    CanShareLinkForNewDocument: boolean,
    noGroupCollapse: boolean,
    SiteTemplateId: number,
    ExcludeFromOfflineClient: boolean
}
declare
function GetCurrentCtx(): ContextInfodeclare
function SetFullScreenMode(fullscreen: boolean): voiddeclare interface MQuery {
    (selector: string, context?: any): MQueryResultSetElements,
    (element: HTMLElement): MQueryResultSetElements,
    (object: MQueryResultSetElements): MQueryResultSetElements,
    (object: MQueryResultSet<T>): MQueryResultSet<T>,
        (object: T): MQueryResultSet<T>,
        (elementArray: HTMLElement[]): MQueryResultSetElements,
        (array: T[]): MQueryResultSet<T>,
        (): MQueryResultSet<T>,
        throttle(fn: Function, interval: number, shouldOverrideThrottle: boolean): Function,
        extend(target: any, ...objs: any[]): SPAnimation$Object,
        extend(deep: boolean, target: any, ...objs: any[]): SPAnimation$Object,
        makeArray<T>(obj: any): any[],
        isDefined(obj: any): boolean,
        isNotNull(obj: any): boolean,
        isUndefined(obj: any): boolean,
        isNull(obj: any): boolean,
        isUndefinedOrNull(obj: any): boolean,
        isDefinedAndNotNull(obj: any): boolean,
        isString(obj: any): boolean,
        isBoolean(obj: any): boolean,
        isFunction(obj: any): boolean,
        isArray(obj: any): boolean,
        isNode(obj: any): boolean,
        isElement(obj: any): boolean,
        isMQueryResultSet(obj: any): boolean,
        isNumber(obj: any): boolean,
        isObject(obj: any): boolean,
        isEmptyObject(obj: any): boolean,
        ready(callback: () => void): void,
        contains(container: HTMLElement, contained: HTMLElement): boolean,
        proxy(fn: (...args: any[]) => any, context: any, ...args: any[]): Function,
        proxy(context: any, name: string, ...args: any[]): any,
        every<T>(
            obj: T[],
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): boolean,
        every<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): boolean,
        every<T>(obj: T[], fn: (elementOfArray: T) => boolean, context?: any): boolean,
        every<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: any) => boolean,
            context?: any): boolean,
        some<T>(
            obj: T[],
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): boolean,
        some<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): boolean,
        some<T>(obj: T[], fn: (elementOfArray: T) => boolean, context?: any): boolean,
        some<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T) => boolean,
            context?: any): boolean,
        filter<T>(
            obj: T[],
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): T[],
        filter<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T, indexInArray: number) => boolean,
            context?: any): MQueryResultSet<T>,
        filter<T>(obj: T[], fn: (elementOfArray: T) => boolean, context?: any): T[],
        filter<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T) => boolean,
            context?: any): MQueryResultSet<T>,
        forEach<T>(
            obj: T[],
            fn: (elementOfArray: T, indexInArray: number) => void,
            context?: any): void,
        forEach<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T, indexInArray: number) => void,
            context?: any): void,
        forEach<T>(obj: T[], fn: (elementOfArray: T) => void, context?: any): void,
        forEach<T>(
            obj: MQueryResultSet<T>,
            fn: (elementOfArray: T) => void,
            context?: any): void,
        map<T, U>(
            array: T[],
            callback: (elementOfArray: T, indexInArray: number) => Srch$U): Srch$U[],
        map<T, U>(
            array: MQueryResultSet<T>,
            callback: (elementOfArray: T, indexInArray: number) => Srch$U): MQueryResultSet<Srch$U>,
        map<T, U>(array: T[], callback: (elementOfArray: T) => Srch$U): Srch$U[],
        map<T, U>(
            array: MQueryResultSet<T>,
            callback: (elementOfArray: T) => Srch$U): MQueryResultSet<Srch$U>,
        indexOf<T>(obj: T[], object: T, startIndex?: number): number,
        lastIndexOf<T>(obj: T[], object: T, startIndex?: number): number,
        data(element: HTMLElement, key: string, value: any): any,
        data(element: HTMLElement, key: string): any,
        data(element: HTMLElement): any,
        removeData(element: HTMLElement, name?: string): MQueryResultSetElements,
        hasData(element: HTMLElement): boolean
}
declare type MQueryResultSetElements = {
    append(node: HTMLElement): MQueryResultSetElements,
    append(mQuerySet: MQueryResultSetElements): MQueryResultSetElements,
    append(html: string): MQueryResultSetElements,
    bind(
        eventType: string,
        handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    unbind(
        eventType: string,
        handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    trigger(eventType: string): MQueryResultSetElements,
    one(
        eventType: string,
        handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    detach(): MQueryResultSetElements,
    find(selector: string): MQueryResultSetElements,
    closest(selector: string, context?: any): MQueryResultSetElements,
    offset(): {
        left: number,
        top: number
    },
    offset(coordinates: {
        left: any,
        top: any
    }): MQueryResultSetElements,
    filter(selector: string): MQueryResultSetElements,
    filter(
        fn: (elementOfArray: HTMLElement, indexInArray: number) => boolean,
        context?: any): MQueryResultSetElements,
    filter(
        fn: (elementOfArray: HTMLElement) => boolean,
        context?: any): MQueryResultSetElements,
    not(selector: string): MQueryResultSetElements,
    parent(selector?: string): MQueryResultSetElements,
    offsetParent(selector?: string): MQueryResultSetElements,
    parents(selector?: string): MQueryResultSetElements,
    parentsUntil(selector?: string, filter?: string): MQueryResultSetElements,
    parentsUntil(element?: HTMLElement, filter?: string): MQueryResultSetElements,
    position(): {
        top: number,
        left: number
    },
    attr(attributeName: string): string,
    attr(attributeName: string, value: any): MQueryResultSetElements,
    attr(map: {
        [key: string]: any
    }): MQueryResultSetElements,
    attr(
        attributeName: string,
        func: (index: number, attr: any) => any): MQueryResultSetElements,
    addClass(classNames: string): MQueryResultSetElements,
    removeClass(classNames: string): MQueryResultSetElements,
    css(propertyName: string): string,
    css(propertyNames: string[]): string,
    css(properties: any): MQueryResultSetElements,
    css(propertyName: string, value: any): MQueryResultSetElements,
    css(propertyName: any, value: any): MQueryResultSetElements,
    remove(selector?: string): MQueryResultSetElements,
    children(selector?: string): MQueryResultSetElements,
    empty(): MQueryResultSetElements,
    first(): MQueryResultSetElements,
    data(key: string, value: any): MQueryResultSetElements,
    data(obj: {
        [key: string]: any
    }): MQueryResultSetElements,
    data(key: string): any,
    removeData(key: string): MQueryResultSetElements,
    map(
        callback: (elementOfArray: HTMLElement, indexInArray: number) => any): MQueryResultSetElements,
    map(callback: (elementOfArray: HTMLElement) => any): MQueryResultSetElements,
    blur(): MQueryResultSetElements,
    blur(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    change(): MQueryResultSetElements,
    change(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    click(): MQueryResultSetElements,
    click(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    dblclick(): MQueryResultSetElements,
    dblclick(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    error(): MQueryResultSetElements,
    error(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    focus(): MQueryResultSetElements,
    focus(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    focusin(): MQueryResultSetElements,
    focusin(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    focusout(): MQueryResultSetElements,
    focusout(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    keydown(): MQueryResultSetElements,
    keydown(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    keypress(): MQueryResultSetElements,
    keypress(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    keyup(): MQueryResultSetElements,
    keyup(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    load(): MQueryResultSetElements,
    load(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mousedown(): MQueryResultSetElements,
    mousedown(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mouseenter(): MQueryResultSetElements,
    mouseenter(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mouseleave(): MQueryResultSetElements,
    mouseleave(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mousemove(): MQueryResultSetElements,
    mousemove(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mouseout(): MQueryResultSetElements,
    mouseout(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mouseover(): MQueryResultSetElements,
    mouseover(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    mouseup(): MQueryResultSetElements,
    mouseup(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    resize(): MQueryResultSetElements,
    resize(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    scroll(): MQueryResultSetElements,
    scroll(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    select(): MQueryResultSetElements,
    select(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    submit(): MQueryResultSetElements,
    submit(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements,
    unload(): MQueryResultSetElements,
    unload(handler: (eventObject: MQueryEvent) => any): MQueryResultSetElements
} & MQueryResultSet
declare interface MQueryResultSet<T>{
    [index: number]: T,
    contains(contained: T): boolean,
    filter(
        fn: (elementOfArray: T, indexInArray: number) => boolean,
        context?: any): MQueryResultSet<T>,
    filter(fn: (elementOfArray: T) => boolean, context?: any): MQueryResultSet<T>,
    every(
        fn: (elementOfArray: T, indexInArray: number) => boolean,
        context?: any): boolean,
    every(fn: (elementOfArray: T) => boolean, context?: any): boolean,
    some(
        fn: (elementOfArray: T, indexInArray: number) => boolean,
        context?: any): boolean,
    some(fn: (elementOfArray: T) => boolean, context?: any): boolean,
    map(callback: (elementOfArray: T, indexInArray: number) => any): MQueryResultSet<T>,
    map(callback: (elementOfArray: T) => any): MQueryResultSet<T>,
    forEach(fn: (elementOfArray: T, indexInArray: number) => void, context?: any): void,
    forEach(fn: (elementOfArray: T) => void, context?: any): void,
    indexOf(object: any, startIndex?: number): number,
    lastIndexOf(object: any, startIndex?: number): number
}
declare type MQueryEvent = {
    altKey: boolean,
    attrChange: number,
    attrName: string,
    bubbles: boolean,
    button: number,
    cancelable: boolean,
    ctrlKey: boolean,
    defaultPrevented: boolean,
    detail: number,
    eventPhase: number,
    newValue: string,
    prevValue: string,
    relatedNode: HTMLElement,
    screenX: number,
    screenY: number,
    shiftKey: boolean,
    view: any
} & Event
declare
var m$: MQuery;
declare class CalloutActionOptions {

    /**
     * Text for the action link 
     */
    text: string;
    tooltip: string;
    disabledTooltip: string;

    /**
     * Callback that is executed when the action link is clicked.
     * @param event Standard javascript event object
     * @param action The action object 
     */
    onClickCallback: (event: Event, action: CalloutAction) => any;

    /**
     * Callback which returns if the action link is enabled 
     */
    isEnabledCallback: (action: CalloutAction) => boolean;

    /**
     * Callback which returns if the action link is visible 
     */
    isVisibleCallback: (action: CalloutAction) => boolean;

    /**
     * Submenu entries for the action. If defined, the action link click will popup the specified menu. 
     */
    menuEntries: CalloutActionMenuEntry[]
}
/**
 * Defines a callout action menu entry 
 */
declare class CalloutActionMenuEntry {

    /**
     * Creates a callout action menu entry
     * @param text Text to be displayed as the menu item text
     * @param onClickCallback Callback that will be fired when the item is clicked
     * @param wzISrc Url of the icon
     * @param wzIAlt Alternative text for the icon image
     * @param wzISeq Sequence for the menu item
     * @param wzDesc Description of the menu item 
     */
    constructor(text: string, onClickCallback: (actionMenuEntry: CalloutActionMenuEntry, actionMenuEntryIndex: number) => void, wzISrc: string, wzIAlt: string, wzISeq: number, wzDesc: string): this
}
declare class CalloutActionMenu {
    constructor(actionsId: any): this;
    addAction(action: CalloutAction): void;
    getActions(): CalloutAction[];
    render(): void;
    refreshActions(): void;
    calculateActionWidth(): void
}
declare class CalloutAction {
    constructor(options: CalloutActionOptions): this;
    getText(): string;
    getToolTop(): string;
    getDisabledToolTip(): string;
    getOnClickCallback(event: any, action: CalloutAction): any;
    getIsDisabledCallback(action: CalloutAction): boolean;
    getIsVisibleCallback(action: CalloutAction): boolean;
    getIsMenu(): boolean;
    getMenuEntries(): CalloutActionMenuEntry[];
    render(): void;
    isEnabled(): boolean;
    isVisible(): boolean;
    set(options: CalloutActionOptions): void
}
declare class Callout {

    /**
     * Sets options for the callout. Not all options can be changed for the callout after its creation. 
     */
    set(options: CalloutOptions): any;

    /**
     * Adds event handler to the callout.
     * @param eventName one of the following: "opened", "opening", "closing", "closed" 
     */
    addEventCallback(eventName: string, callback: (callout: Callout) => void): void;

    /**
     * Returns the launch point element of the callout. 
     */
    getLaunchPoint(): HTMLElement;

    /**
     * Returns the ID of the callout. 
     */
    getID(): string;

    /**
     * Returns the title of the callout. 
     */
    getTitle(): string;

    /**
     * Returns the contents of the callout. 
     */
    getContent(): string;

    /**
     * Returns the content element of the callout. 
     */
    getContentElement(): HTMLElement;

    /**
     * Returns the bounding element defined for the callout during its creation. 
     */
    getBoundingBox(): HTMLElement;

    /**
     * Returns the content width defined for the callout during its creation. 
     */
    getContentWidth(): number;

    /**
     * Returns the object that represents open behaivor defined for the callout during its creation. 
     */
    getOpenOptions(): CalloutOpenOptions;

    /**
     * Returns the beak orientation defined for the callout during its creation. 
     */
    getBeakOrientation(): string;

    /**
     * Returns the position algorithm function defined for the callout during its creation. 
     */
    getPositionAlgorithm(): any;

    /**
     * Specifies wherever callout is in "Opened" state 
     */
    isOpen(): boolean;

    /**
     * Specifies wherever callout is in "Opening" state 
     */
    isOpening(): boolean;

    /**
     * Specifies wherever callout is in "Opened" or "Opening" state 
     */
    isOpenOrOpening(): boolean;

    /**
     * Specifies wherever callout is in "Closing" state 
     */
    isClosing(): boolean;

    /**
     * Specifies wherever callout is in "Closed" state 
     */
    isClosed(): boolean;

    /**
     * Returns the callout actions menu 
     */
    getActionMenu(): CalloutActionMenu;

    /**
     * Adds a link to the actions panel in the bottom part of the callout window 
     */
    addAction(action: CalloutAction): void;

    /**
     * Re-renders the actions menu. Call after the actions menu is changed. 
     */
    refreshActions(): void;

    /**
     * Display the callout. Animation can be used only for IE9+ 
     */
    open(useAnimation: boolean): void;

    /**
     * Hide the callout. Animation can be used only for IE9+ 
     */
    close(useAnimation: boolean): void;

    /**
     * Display if hidden, hide if shown. 
     */
    toggle(): void;

    /**
     * Do not call this directly. Instead, use CalloutManager.remove 
     */
    destroy(): void
}
declare class CalloutOpenOptions {

    /**
     * HTML event name, e.g. "click" 
     */
    event: string;

    /**
     * Callout will be closed on blur 
     */
    closeCalloutOnBlur: boolean;

    /**
     * Close button will be shown within the callout window 
     */
    showCloseButton: boolean
}
declare class CalloutOptions {

    /**
     * Some unique id for the callout. 
     */
    ID: string;

    /**
     * Element on that the callout is shown. 
     */
    launchPoint: HTMLElement;

    /**
     * One of the following: "topBottom" (default) or "leftRight". 
     */
    beakOrientation: string;

    /**
     * String (HTML allowed) that represents contents of the callout window. 
     */
    content: string;

    /**
     * Title for the callout 
     */
    title: string;

    /**
     * HTML element that represents contents of the callout window. 
     */
    contentElement: HTMLElement;

    /**
     * If defined, callout will be inscribed into the bounding element. 
     */
    boundingBox: HTMLElement;

    /**
     * Content element's width in pixels. By default = 350. 
     */
    contentWidth: number;

    /**
     * Defines opening behavior 
     */
    openOptions: CalloutOpenOptions;

    /**
     * Fires after the callout is rendered but before it is positioned and shown 
     */
    onOpeningCallback: (callout: Callout) => void;

    /**
     * Fires right after the callout is shown 
     */
    onOpenedCallback: (callout: Callout) => void;

    /**
     * Fires right before the callout is closed 
     */
    onClosingCallback: (callout: Callout) => void;

    /**
     * Fires right after the callout is closed 
     */
    onClosedCallback: (callout: Callout) => void;

    /**
     * Sets the position of the callout during its opening phase. For an example of a position algorithm function, please explore defaultPositionAlgorithm function from the callout.debug.js file 
     */
    positionAlgorithm: (callout: Callout) => void
}
declare class CalloutManager {

    /**
     * Creates a new callout 
     */
    createNew(options: CalloutOptions): Callout;

    /**
     * Checks if callout with specified ID already exists. If it doesn't, creates it, otherwise returns the existing one. 
     */
    createNewIfNecessary(options: CalloutOptions): Callout;

    /**
     * Detaches callout from the launch point and destroys it. 
     */
    remove(callout: Callout): void;

    /**
     * Searches for a callout associated with the specified launch point. Throws error if not found. 
     */
    getFromLaunchPoint(launchPoint: HTMLElement): Callout;

    /**
     * Searches for a callout associated with the specified launch point. Returns null if not found. 
     */
    getFromLaunchPointIfExists(launchPoint: HTMLElement): Callout;

    /**
     * Gets the first launch point within the specified ancestor element, and returns true if the associated with it callout is opened or opening.
     * If the launch point is not found or the callout is hidden, returns false. 
     */
    containsOneCalloutOpen(ancestor: HTMLElement): boolean;

    /**
     * Finds the closest launch point based on the specified descendant element, and returns callout associated with the launch point. 
     */
    getFromCalloutDescendant(descendant: HTMLElement): Callout;

    /**
     * Perform some action for each callout on the page. 
     */
    forEach(callback: (callout: Callout) => void): void;

    /**
     * Closes all callouts on the page 
     */
    closeAll(): boolean;

    /**
     * Returns true if at least one of the defined on page callouts is opened. 
     */
    isAtLeastOneCalloutOpen(): boolean;

    /**
     * Returns true if at least one of the defined on page callouts is opened or opening. 
     */
    isAtLeastOneCalloutOn(): boolean
}
/**
 * Represents schema for a Choice field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Choice = {

    /**
     * List of choices for this field. 
     */
    Choices: string[],

    /**
     * Display format for the choice field 
     */
    FormatType: ChoiceFormatType
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Lookup field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Lookup = {

    /**
     * Specifies if the field allows multiple values 
     */
    AllowMultipleValues: boolean,

    /**
     * Returns base url for a list display form, e.g. "http://portal/web/_layouts/15/listform.aspx?PageType=4"
     * You must add "ListId" (Guid of the list) and "ID" (integer Id of the item) parameters in order to use this Url 
     */
    BaseDisplayFormUrl: string,

    /**
     * Indicates if the field is a dependent lookup 
     */
    DependentLookup: boolean,

    /**
     * Indicates wherever the lookup list is throttled (contains more items than value of the "List Throttle Limit" setting). 
     */
    Throttled: boolean,

    /**
     * Returns string representation of a number that represents the current value for the "List Throttle Limit" web application setting.
     * Only appears if Throttled property is true, i.e. the target lookup list is throttled. 
     */
    MaxQueryResult: string,

    /**
     * List of choices for this field. 
     */
    Choices: {
        LookupId: number,
        LookupValue: string
    }[],

    /**
     * Number of choices. Appears only for Lookup field. 
     */
    ChoiceCount: number,
    LookupListId: string
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a DateTime field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_DateTime = {

    /**
     * Type of calendar to use 
     */
    CalendarType: DateTimeCalendarType,

    /**
     * Display format for DateTime field. 
     */
    DisplayFormat: DateTimeDisplayFormat,

    /**
     * Indicates wherever current user regional settings specify to display week numbers in day or week views of a calendar.
     * Only appears for DateTime fields. 
     */
    ShowWeekNumber: boolean,
    TimeSeparator: string,
    TimeZoneDifference: string,
    FirstDayOfWeek: number,
    FirstWeekOfYear: number,
    HijriAdjustment: number,
    WorkWeek: string,
    LocaleId: string,
    LanguageId: string,
    MinJDay: number,
    MaxJDay: number,
    HoursMode24: boolean,
    HoursOptions: string[]
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a DateTime field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Geolocation = {
    BingMapsKey: string,
    IsBingMapBlockedInCurrentRegion: boolean
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Choice field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_MultiChoice = {

    /**
     * List of choices for this field. 
     */
    MultiChoices: string[],

    /**
     * Indicates wherever fill-in choice is allowed 
     */
    FillInChoice: boolean
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Choice field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_MultiLineText = {

    /**
     * Specifies whether rich text formatting can be used in the field 
     */
    RichText: boolean,

    /**
     * Changes are appended to the existing text. 
     */
    AppendOnly: boolean,

    /**
     * Rich text mode for the field 
     */
    RichTextMode: RichTextMode,

    /**
     * Number of lines configured to display 
     */
    NumberOfLines: number,

    /**
     * A boolean value that specifies whether hyperlinks can be used in this fields. 
     */
    AllowHyperlink: boolean,

    /**
     * WebPartAdderId for the ScriptEditorWebPart 
     */
    ScriptEditorAdderId: string
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Number field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Number = {
    ShowAsPercentage: boolean
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Number field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Text = {
    MaxLength: number
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Number field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_Url = {
    DisplayFormat: UrlFormatType
} & SPClientTemplates$FieldSchema_InForm



/**
 * Represents schema for a Number field in list form or in list view in grid mode 
 */
declare
export type SPClientTemplates$FieldSchema_InForm_User = {
    Presence: boolean,
    WithPicture: boolean,
    DefaultRender: boolean,
    WithPictureDetail: boolean,

    /**
     * Server relative Url for ~site/_layouts/listform.aspx 
     */
    ListFormUrl: string,

    /**
     * Server relative Url for ~site/_layouts/userdisp.aspx 
     */
    UserDisplayUrl: string,
    EntitySeparator: string,
    PictureOnly: boolean,
    PictureSize: string
} & SPClientTemplates$FieldSchema_InForm


declare
export interface SPClientTemplates$FieldSchema {

    /**
     * Specifies if the field can be edited while list view is in the Grid mode 
     */
    AllowGridEditing: boolean,

        /**
         * String representation of the field type, e.g. "Lookup". Same as SPField.TypeAsString 
         */
        FieldType: string,

        /**
         * Internal name of the field 
         */
        Name: string,

        /**
         * For OOTB fields, returns the type of field. For "UserMulti" returns "User", for "LookupMulti" returns "Lookup".
         * For custom field types, returns base type of the field. 
         */
        Type: string
}


/**
 * Represents field schema in Grid mode and on list forms.
 *     Consider casting objects of this type to more specific field types, e.g. FieldSchemaInForm_Lookup 
 */
declare
export type SPClientTemplates$FieldSchema_InForm = {

    /**
     * Description for this field. 
     */
    Description: string,

    /**
     * Direction of the reading order for the field. 
     */
    Direction: string,

    /**
     * Indicates whether the field is hidden 
     */
    Hidden: boolean,

    /**
     * Guid of the field 
     */
    Id: string,

    /**
     * Specifies Input Method Editor (IME) mode bias to use for the field.
     * The IME enables conversion of keystrokes between languages when one writing system has more characters than can be encoded for the given keyboard. 
     */
    IMEMode: any,

    /**
     * Specifies if the field is read only 
     */
    ReadOnlyField: boolean,

    /**
     * Specifies wherever field requires values 
     */
    Required: boolean,
    RestrictedMode: boolean,

    /**
     * Title of the field 
     */
    Title: string,

    /**
     * If SPFarm.Local.UseMinWidthForHtmlPicker is true, UseMinWidth will be set to true. Undefined in other cases. 
     */
    UseMinWidth: boolean
} & SPClientTemplates$FieldSchema


declare
export interface SPClientTemplates$ListSchema {
    Field: SPClientTemplates$FieldSchema[]
}

declare
export type SPClientTemplates$ListSchema_InForm = {
    Field: SPClientTemplates$FieldSchema_InForm[]
} & SPClientTemplates$ListSchema


declare
export interface SPClientTemplates$ListData_InForm {
    Items: SPClientTemplates$Item[]
}

declare
export type SPClientTemplates$RenderContext_FieldInForm = {
    CurrentGroupIdx: number,
    CurrentGroup: SP$Group,
    CurrentItems: SPClientTemplates$Item[],
    CurrentFieldSchema: SPClientTemplates$FieldSchema_InForm,
    CurrentFieldValue: any
} & SPClientTemplates$RenderContext_Form


declare
export type SPClientTemplates$RenderContext_Form = {
    CurrentItem: SPClientTemplates$Item,
    FieldControlModes: {
        [fieldInternalName: string]: ClientControlMode
    },
    FormContext: SPClientTemplates$ClientFormContext,
    FormUniqueId: string,
    ListData: SPClientTemplates$ListData_InForm,
    ListSchema: SPClientTemplates$ListSchema_InForm,
    CSRCustomLayout?: boolean
} & SPClientTemplates$RenderContext


declare
export type SPClientTemplates$FieldSchema_InView_LookupField = {

    /**
     * Either "TRUE" or "FALSE" 
     */
    AllowMultipleValues: string,

    /**
     * Target lookup list display form URL, including PageType and List attributes. 
     */
    DispFormUrl: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    HasPrefix: string
} & SPClientTemplates$FieldSchema_InView


declare
export type SPClientTemplates$FieldSchema_InView_UserField = {

    /**
     * Either "TRUE" or "FALSE" 
     */
    AllowMultipleValues: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    ImnHeader: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    HasPrefix: string,

    /**
     * Either "1" or "0" 
     */
    HasUserLink: string,

    /**
     * Either "1" or "0" 
     */
    DefaultRender: string
} & SPClientTemplates$FieldSchema_InView



/**
 * Represents field schema in a list view. 
 */
declare
export type SPClientTemplates$FieldSchema_InView = {

    /**
     * Either "TRUE" or "FALSE" 
     */
    CalloutMenu: string,
    ClassInfo: string,
    css: string,
    DisplayName: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    Explicit: string,
    fieldRenderer: any,
    FieldTitle: string,

    /**
     * Indicates whether the field can be filtered. Either "TRUE" or "FALSE" 
     */
    Filterable: string,

    /**
     * Set to "TRUE" for fields that comply to the following Xpath query:
     * ViewFields/FieldRef[@Explicit='TRUE'] | Query/GroupBy/FieldRef[not(@Name=ViewFields/FieldRef/@Name)] 
     */
    GroupField: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    GridActiveAndReadOnly: string,

    /**
     * Guid of the field 
     */
    ID: string,

    /**
     * Specifies if the field contains list item menu.
     * Corresponds to ViewFields/FieldRef/@ListItemMenu attribute. Either "TRUE" or "FALSE" and might be missing. 
     */
    listItemMenu: string,
    RealFieldName: string,

    /**
     * Either "TRUE" or "FALSE" 
     */
    ReadOnly: string,
    ResultType: string,

    /**
     * Indicates whether the field can be sorted. Either "TRUE" or "FALSE" 
     */
    Sortable: string
} & SPClientTemplates$FieldSchema


declare
export type SPClientTemplates$ListSchema_InView = {

    /**
     * Key-value object that represents all aggregations defined for the view.
     * Key specifies the field internal name, and value specifies the type of the aggregation. 
     */
    Aggregate: {
        [name: string]: string
    },

    /**
     * Either "TRUE" or false (for grouping) 
     */
    Collapse: string,

    /**
     * Specifies whether to open items in a client application ("1") or in browser ("0"). 
     */
    DefaultItemOpen: string,
    Direction: string,

    /**
     * Either "0" or "1" 
     */
    EffectivePresenceEnabled: string,

    /**
     * If in grid mode (context.inGridMode == true), cast to FieldSchema_InForm[], otherwise cast to FieldSchema_InView[] 
     */
    FieldSortParam: string,
    Filter: any,

    /**
     * Either "0" or "1" 
     */
    ForceCheckout: string,

    /**
     * Internal name for the first group by field, if any 
     */
    group1: string,

    /**
     * Internal name for the second group by field, if any 
     */
    group2: string,

    /**
     * "1" if the view contains "Title" field, otherwise not defined. 
     */
    HasTitle: string,
    HttpVDir: string,

    /**
     * Either "0" or "1" 
     */
    InplaceSearchEnabled: string,

    /**
     * Either "0" or "1" 
     */
    IsDocLib: string,

    /**
     * e.g. "1033" 
     */
    LCID: string,

    /**
     * Either "0" or "1" 
     */
    ListRight_AddListItems: string,
    NoListItem: string,
    NoListItemHowTo: string,

    /**
     * Server-relative path to the current page 
     */
    PagePath: string,

    /**
     * Internal name of the field inside which the hierarchy buttons are displayed 
     */
    ParentHierarchyDisplayField: string,
    PresenceAlt: string,

    /**
     * Represents SPList.RootFolder.Properties. Exists only if SPList.FetchPropertyBagForListView property is set to true. 
     */
    PropertyBag: {
        [key: string]: string
    },

    /**
     * Either "True" or "False" 
     */
    RenderSaveAsNewViewButton: string,

    /**
     * Either "True" or "False" 
     */
    RenderViewSelectorPivotMenu: string,

    /**
     * Either "True" or "False" 
     */
    RenderViewSelectorPivotMenuAsync: string,

    /**
     * Query string parameters that specify GUID of the current view and the current root folder 
     */
    RootFolderParam: string,
    SelectedID: string,
    ShowWebPart: string,

    /**
     * Either "1" or undefined. 
     */
    StrikeThroughOnCompletedEnabled: string,

    /**
     * Either "0" or "1" 
     */
    TabularView: string,
    Toolbar: string,
    UIVersion: string,
    Userid: string,
    UserVanilla: any,

    /**
     * Server relative path to "/_layouts/userdisp.aspx" in the current web 
     */
    UserDispUrl: string,

    /**
     * Either "1" or "" 
     */
    UseParentHierarchy: string,

    /**
     * Guid of the view 
     */
    View: string,

    /**
     * JSON string 
     */
    ViewSelectorPivotMenuOptions: string,

    /**
     * Query string parameters that specify current root folder (RootFolder) and folder content type id (FolderCTID) 
     */
    ViewSelector_ViewParameters: string
} & SPClientTemplates$ListSchema


declare
export interface SPClientTemplates$ListData_InView {
    FilterLink: string,
        FilterFields: string,
        FirstRow: number,

        /**
         * Either "0" or "1" 
         */
        ForceNoHierarchy: string,
        HierarchyHasIndention: string,

        /**
         * Link to the previous page (not defined if not available) 
         */
        PrevHref: string,

        /**
         * Link to the next page  (not defined if not available) 
         */
        NextHref: string,
        SortField: string,
        SortDir: string,
        LastRow: number,
        Row: SPClientTemplates$Item[]
}

declare
export type SPClientTemplates$RenderContext_GroupInView = {
    CurrentGroupIdx: number,
    CurrentGroup: SP$Group,
    CurrentItems: SPClientTemplates$Item[]
} & SPClientTemplates$RenderContext_InView


declare
export type SPClientTemplates$RenderContext_InView = {
    AllowCreateFolder: boolean,
    AllowGridMode: boolean,
    BasePermissions: {
        [PermissionName: string]: boolean
    },
    bInitialRender: boolean,
    CanShareLinkForNewDocument: boolean,
    CascadeDeleteWarningMessage: string,
    clvp: HTMLElement,
    ContentTypesEnabled: boolean,
    ctxId: number,
    ctxType: any,
    CurrentUserId: number,
    CurrentUserIsSiteAdmin: boolean,
    dictSel: any,

    /**
     * Absolute path for the list display form 
     */
    displayFormUrl: string,

    /**
     * Absolute path for the list edit form 
     */
    editFormUrl: string,
    EnableMinorVersions: boolean,
    ExternalDataList: boolean,
    enteringGridMode: boolean,
    existingServerFilterHash: any,
    HasRelatedCascadeLists: number,
    heroId: string,
    HttpPath: string,
    HttpRoot: string,
    imagesPath: string,
    inGridFullRender: any,
    inGridMode: boolean,
    IsAppWeb: boolean,
    IsClientRendering: boolean,
    isForceCheckout: boolean,
    isModerated: boolean,
    isPortalTemplate: any,
    isWebEditorPreview: number,
    isVersions: number,
    isXslView: boolean,
    LastRowIndexSelected: any,
    LastSelectableRowIdx: any,
    LastSelectedItemId: any,
    leavingGridMode: boolean,
    listBaseType: number,
    ListData: SPClientTemplates$ListData_InView,
    ListDataJSONItemsKey: string,

    /**
     * Guid of the list 
     */
    listName: string,
    ListSchema: SPClientTemplates$ListSchema_InView,
    listTemplate: string,
    ListTitle: string,
    listUrlDir: string,
    loadingAsyncData: boolean,
    ModerationStatus: number,
    NavigateForFormsPages: boolean,

    /**
     * Absolute path for the list new form 
     */
    newFormUrl: string,
    NewWOPIDocumentEnabled: any,
    NewWOPIDocumentUrl: any,
    noGroupCollapse: boolean,
    OfficialFileName: string,
    OfficialFileNames: string,
    overrideDeleteConfirmation: string,
    overrideFilterQstring: string,
    PortalUrl: string,
    queryString: any,
    recursiveView: boolean,

    /**
     * either 1 or 0 
     */
    RecycleBinEnabled: number,
    RegionalSettingsTimeZoneBias: string,
    rootFolder: string,
    rootFolderForDisplay: any,
    RowFocusTimerID: any,
    SelectAllCbx: any,
    SendToLocationName: string,
    SendToLocationUrl: string,
    serverUrl: any,
    SiteTitle: string,
    StateInitDone: boolean,
    TableCbxFocusHandler: any,
    TableMouseOverHandler: any,
    TotalListItems: number,
    verEnabled: number,

    /**
     * Guid of the view. 
     */
    view: string,
    viewTitle: string,
    WorkflowAssociated: boolean,
    wpq: string,
    WriteSecurity: string
} & SPClientTemplates$RenderContext


declare
export type SPClientTemplates$RenderContext_ItemInView = {
    CurrentItem: SPClientTemplates$Item,
    CurrentItemIdx: number
} & SPClientTemplates$RenderContext_InView


declare
export type SPClientTemplates$RenderContext_FieldInView = {

    /**
     * If in grid mode (context.inGridMode == true), cast to FieldSchema_InForm, otherwise cast to FieldSchema_InView 
     */
    CurrentFieldSchema: SPClientTemplates$FieldSchema_InForm | SPClientTemplates$FieldSchema_InView,
    CurrentFieldValue: any,
    FieldControlsModes: {
        [fieldInternalName: string]: ClientControlMode
    },
    FormContext: SPClientTemplates$ClientFormContext,
    FormUniqueId: string
} & SPClientTemplates$RenderContext_ItemInView


declare
export interface SPClientTemplates$Item {
    [fieldInternalName: string]: any
}

declare
export interface SPClientTemplates$Group {
    Items: SPClientTemplates$Item[]
}

declare type SPClientTemplates$RenderCallback = (ctx: SPClientTemplates$RenderContext) => void;

declare
export interface SPClientTemplates$RenderContext {
    BaseViewID?: number,
        ControlMode?: ClientControlMode,
        CurrentCultureName?: string,
        CurrentLanguage?: number,
        CurrentSelectedItems?: any,
        CurrentUICultureName?: string,
        ListTemplateType?: number,
        OnPostRender?: SPClientTemplates$RenderCallback | SPClientTemplates$RenderCallback[],
        OnPreRender?: SPClientTemplates$RenderCallback | SPClientTemplates$RenderCallback[],
        onRefreshFailed?: any,
        RenderBody?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderFieldByName?: (renderContext: SPClientTemplates$RenderContext, fieldName: string) => string,
        RenderFields?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderFooter?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderGroups?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderHeader?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderItems?: (renderContext: SPClientTemplates$RenderContext) => string,
        RenderView?: (renderContext: SPClientTemplates$RenderContext) => string,
        SiteClientTag?: string,
        Templates?: SPClientTemplates$Templates
}

declare
export interface SPClientTemplates$SingleTemplateCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext_InView): string
}

declare
export interface SPClientTemplates$GroupCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext_GroupInView): string
}

declare
export interface SPClientTemplates$ItemCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext): string
}

declare
export interface SPClientTemplates$FieldCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext): string
}

declare
export interface SPClientTemplates$FieldInFormCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext_FieldInForm): string
}

declare
export interface SPClientTemplates$FieldInViewCallback {

    /**
     * Must return null in order to fall back to a more common template or to a system default template 
     */
    (renderContext: SPClientTemplates$RenderContext_FieldInView): string
}

declare
export interface SPClientTemplates$FieldTemplateOverrides {

    /**
     * Defines templates for rendering the field on a display form. 
     */
    DisplayForm?: SPClientTemplates$FieldInFormCallback,

        /**
         * Defines templates for rendering the field on an edit form. 
         */
        EditForm?: SPClientTemplates$FieldInFormCallback,

        /**
         * Defines templates for rendering the field on a new form. 
         */
        NewForm?: SPClientTemplates$FieldInFormCallback,

        /**
         * Defines templates for rendering the field on a list view. 
         */
        View?: SPClientTemplates$FieldInViewCallback
}

declare
export interface SPClientTemplates$FieldTemplates {
    [fieldInternalName: string]: SPClientTemplates$FieldCallback
}

declare
export interface SPClientTemplates$Templates {
    View?: SPClientTemplates$RenderCallback | string,
        Body?: SPClientTemplates$RenderCallback | string,

        /**
         * Defines templates for rendering groups (aggregations). 
         */
        Group?: SPClientTemplates$GroupCallback | string,

        /**
         * Defines templates for list items rendering. 
         */
        Item?: SPClientTemplates$ItemCallback | string,

        /**
         * Defines template for rendering list view header.
         * Can be either string or SingleTemplateCallback 
         */
        Header?: SPClientTemplates$SingleTemplateCallback | string,

        /**
         * Defines template for rendering list view footer.
         * Can be either string or SingleTemplateCallback 
         */
        Footer?: SPClientTemplates$SingleTemplateCallback | string,

        /**
         * Defines templates for fields rendering. The field is specified by it's internal name. 
         */
        Fields?: SPClientTemplates$FieldTemplates
}

declare
export interface SPClientTemplates$FieldTemplateMap {
    [fieldInternalName: string]: SPClientTemplates$FieldTemplateOverrides
}

declare
export interface SPClientTemplates$TemplateOverrides {
    View?: SPClientTemplates$RenderCallback | string,
        Body?: SPClientTemplates$RenderCallback | string,

        /**
         * Defines templates for rendering groups (aggregations). 
         */
        Group?: SPClientTemplates$GroupCallback | string,

        /**
         * Defines templates for list items rendering. 
         */
        Item?: SPClientTemplates$ItemCallback | string,

        /**
         * Defines template for rendering list view header.
         * Can be either string or SingleTemplateCallback 
         */
        Header?: SPClientTemplates$SingleTemplateCallback | string,

        /**
         * Defines template for rendering list view footer.
         * Can be either string or SingleTemplateCallback 
         */
        Footer?: SPClientTemplates$SingleTemplateCallback | string,

        /**
         * Defines templates for fields rendering. The field is specified by it's internal name. 
         */
        Fields?: SPClientTemplates$FieldTemplateMap
}

declare
export interface SPClientTemplates$TemplateOverridesOptions {

    /**
     * Template overrides 
     */
    Templates?: SPClientTemplates$TemplateOverrides,

        /**
         * �allbacks called before rendering starts. Can be function (ctx: RenderContext) => void or array of functions.
         */
        OnPreRender?: SPClientTemplates$RenderCallback | SPClientTemplates$RenderCallback[],

        /**
         * �allbacks called after rendered html inserted into DOM. Can be function (ctx: RenderContext) => void or array of functions.
         */
        OnPostRender?: SPClientTemplates$RenderCallback | SPClientTemplates$RenderCallback[],

        /**
         * View style (SPView.StyleID) for which the templates should be applied.
         * If not defined, the templates will be applied only to default view style. 
         */
        ViewStyle?: number,

        /**
         * List template type (SPList.BaseTemplate) for which the template should be applied.
         * If not defined, the templates will be applied to all lists. 
         */
        ListTemplateType?: number,

        /**
         * Base view ID (SPView.BaseViewID) for which the template should be applied.
         * If not defined, the templates will be applied to all views. 
         */
        BaseViewID?: number | string
}

declare
export class TemplateManager {
    RegisterTemplateOverrides(renderCtx: SPClientTemplates$TemplateOverridesOptions): void;
    GetTemplates(renderCtx: SPClientTemplates$RenderContext): SPClientTemplates$Templates
}

declare
export interface SPClientTemplates$ClientUserValue {
    lookupId: number,
        lookupValue: string,
        displayStr: string,
        email: string,
        sip: string,
        title: string,
        picture: string,
        department: string,
        jobTitle: string
}

declare
export interface SPClientTemplates$ClientLookupValue {
    LookupId: number,
        LookupValue: string
}

declare
export interface SPClientTemplates$ClientUrlValue {
    URL: string,
        Description: string
}

declare
export class Utility {
    ComputeRegisterTypeInfo(renderCtx: SPClientTemplates$TemplateOverridesOptions): any;
    ControlModeToString(mode: SPClientTemplates$ClientControlMode): string;
    FileSystemObjectTypeToString(fileSystemObjectType: SPClientTemplates$FileSystemObjectType): string;
    ChoiceFormatTypeToString(fileSystemObjectType: SPClientTemplates$ChoiceFormatType): string;
    RichTextModeToString(fileSystemObjectType: SPClientTemplates$RichTextMode): string;
    IsValidControlMode(mode: number): boolean;

    /**
     * Removes leading and trailing spaces 
     */
    Trim(str: string): string;

    /**
     * Creates SP.ClientContext based on the specified Web URL. If the SP.Runtime.js script is not loaded, returns null 
     */
    InitContext(webUrl: string): SP$ClientContext;
    GetControlOptions(control: HTMLElement): any;
    TryParseInitialUserValue(userStr: string): SPClientTemplates$ClientUserValue[];

    /**
     * Tries to resolve user names from string. Pushes either ClientUserValue (if resolved successfully) or original string (if not) to the resulting array. 
     */
    TryParseUserControlValue(userStr: string, separator: string): any[];
    GetPropertiesFromPageContextInfo(context: SPClientTemplates$RenderContext): void;

    /**
     * Replaces tokens "~site/", "~sitecollection/", "~sitecollectionmasterpagegallery", "{lcid}", "{locale}" and "{siteclienttag}" with appropriate context values 
     */
    ReplaceUrlTokens(tokenUrl: string): string;
    ParseLookupValue(valueStr: string): SPClientTemplates$ClientLookupValue;
    ParseMultiLookupValues(valueStr: string): SPClientTemplates$ClientLookupValue[];

    /**
     * Represents lookup values array in some strange format 
     */
    BuildLookupValuesAsString(
        choiceArray: SPClientTemplates$ClientLookupValue[],
        isMultiLookup: boolean,
        setGroupDesc: boolean): string;
    ParseURLValue(value: string): SPClientTemplates$ClientUrlValue;
    GetFormContextForCurrentField(
        context: SPClientTemplates$RenderContext_Form): SPClientTemplates$ClientFormContext;

    /**
     * Returns ";#" 
     */
    UserLookupDelimitString: string;

    /**
     * Returns ";#" 
     */
    UserMultiValueDelimitString: string
}

declare
export class ClientFormContext {
    fieldValue: any;
    fieldSchema: SPClientTemplates$FieldSchema_InForm;
    fieldName: string;
    controlMode: number;
    webAttributes: {
        AllowScriptableWebParts: boolean,
        CurrentUserId: number,
        EffectivePresenceEnabled: boolean,
        LCID: string,
        PermissionCustomizePages: boolean,
        WebUrl: string
    };
    itemAttributes: {
        ExternalListItem: boolean,
        FsObjType: number,
        Id: number,
        Url: string
    };
    listAttributes: {
        BaseType: number,
        DefaultItemOpen: number,
        Direction: string,
        EnableVesioning: boolean,
        Id: string
    };
    registerInitCallback(fieldname: string, callback: () => void): void;
    registerFocusCallback(fieldname: string, callback: () => void): void;
    registerValidationErrorCallback(fieldname: string, callback: (error: any) => void): void;
    registerGetValueCallback(fieldname: string, callback: () => any): void;
    updateControlValue(fieldname: string, value: any): void;
    registerClientValidator(fieldname: string, validator: undefined.ValidatorSet): void;
    registerHasValueChangedCallback(fieldname: string, callback: (eventArg?: any) => void): void
}
declare
function GenerateIID(renderCtx: SPClientTemplates$RenderContext_ItemInView): stringdeclare
function GenerateIIDForListItem(
    renderCtx: SPClientTemplates$RenderContext_InView,
    listItem: SPClientTemplates$Item): stringdeclare
function SPFormControl_AppendValidationErrorMessage(nodeId: string, errorResult: any): voiddeclare
function CoreRender(template: any, context: any): stringdeclare
export class ValidationResult {
    constructor(hasErrors: boolean, errorMsg: string): this
}

declare
export class ValidatorSet {
    RegisterValidator(validator: ClientValidation$IValidator): void
}

declare
export interface ClientValidation$IValidator {
    Validate(value: any): ClientValidation$ValidationResult
}

declare
export class RequiredValidator mixins IValidator {
    Validate(value: any): ClientValidation$ValidationResult
}

declare
export class RequiredFileValidator mixins IValidator {
    Validate(value: any): ClientValidation$ValidationResult
}

declare
export class RequiredRichTextValidator mixins IValidator {
    Validate(value: any): ClientValidation$ValidationResult
}

declare
export class MaxLengthUrlValidator mixins IValidator {
    Validate(value: any): ClientValidation$ValidationResult
}

declare
export class ClientForm {
    constructor(qualifier: string): this;
    RenderClientForm(): void;
    SubmitClientForm(): boolean;
    NotifyControlEvent(eventName: FormManagerEvents, fldName: string, eventArg: any): void
}

declare
export class ClientFormManager {
    GetClientForm(qualifier: string): SPClientForms$ClientForm;
    RegisterClientForm(qualifier: string): void;
    SubmitClientForm(qualifier: string): boolean
}
declare class SPMgr {
    NewGroup(listItem: SPAnimation$Object, fieldName: string): boolean;
    RenderHeader(
        renderCtx: SPClientTemplates$RenderContext,
        field: SPClientTemplates$FieldSchema): string;
    RenderField(
        renderCtx: SPClientTemplates$RenderContext,
        field: SPClientTemplates$FieldSchema,
        listItem: SPAnimation$Object,
        listSchema: SPClientTemplates$ListSchema): string;
    RenderFieldByName(
        renderCtx: SPClientTemplates$RenderContext,
        fieldName: string,
        listItem: SPAnimation$Object,
        listSchema: SPClientTemplates$ListSchema): string
}
declare
var spMgr: SPMgr;
declare
function SPField_FormDisplay_Default(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPField_FormDisplay_DefaultNoEncode(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPField_FormDisplay_Empty(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldText_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldNumber_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldBoolean_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldNote_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldNote_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldFile_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldFile_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldChoice_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldChoice_Dropdown_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldChoice_Radio_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldMultiChoice_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldDateTime_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldDateTime_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldUrl_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldUrl_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldUser_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldUserMulti_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPClientPeoplePickerCSRTemplate(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldLookup_Display(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldLookup_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldLookupMulti_Edit(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
function SPFieldAttachments_Default(ctx: SPClientTemplates$RenderContext_FieldInForm): stringdeclare
export class Settings {
    DisableAnimation(): void;
    DisableSessionAnimation(): void;
    IsAnimationEnabled(): boolean
}

declare
export class State {
    SetAttribute(attributeId: Attribute, value: number): void;
    GetAttribute(attributeId: Attribute): number;
    GetDataIndex(attributeId: Attribute): number
}

declare
export class Object {
    constructor(animationID: ID, delay: number, element: HTMLElement, finalState: SPAnimation$State, finishFunc?: (data: any) => void, data?: any): this;
    constructor(animationID: ID, delay: number, element: HTMLElement[], finalState: SPAnimation$State, finishFunc?: (data: any) => void, data?: any): this;
    RunAnimation(): void
}
declare
export class BasicAnimator {
    FadeIn(element: HTMLElement, finishFunc?: (data: any) => void, data?: any): void;
    FadeOut(element: HTMLElement, finishFunc?: (data: any) => void, data?: any): void;
    Move(
        element: HTMLElement,
        posX: number,
        posY: number,
        finishFunc?: (data: any) => void,
        data?: any): void;
    StrikeThrough(
        element: HTMLElement,
        strikeThroughWidth: number,
        finishFunc?: (data: any) => void,
        data?: any): void;
    Resize(
        element: HTMLElement,
        newHeight: number,
        newWidth: number,
        finishFunc?: (data: any) => void,
        data?: any): void;
    CommonResize(
        element: HTMLElement,
        newHeight: number,
        newWidth: number,
        finishFunc: (data: any) => void,
        data: any,
        animationId: SPAnimation$ID): void;
    QuickResize(
        element: HTMLElement,
        newHeight: number,
        newWidth: number,
        finishFunc?: (data: any) => void,
        data?: any): void;
    ResizeContainerAndFillContent(
        element: HTMLElement,
        newHeight: number,
        newWidth: number,
        finishFunc: () => void,
        fAddToEnd: boolean): void;
    GetWindowScrollPosition(): {
        x: number,
        y: number
    };
    GetLeftOffset(element: HTMLElement): number;
    GetTopOffset(element: HTMLElement): number;
    GetRightOffset(element: HTMLElement): number;
    PositionElement(
        element: HTMLElement,
        topValue: number,
        leftValue: number,
        heightValue: number,
        widthValue: number): void;
    PositionAbsolute(element: HTMLElement): void;
    PositionRelative(element: HTMLElement): void;
    PositionRelativeExact(
        element: HTMLElement,
        topValue: number,
        leftValue: number,
        heightValue: number,
        widthValue: number): void;
    PositionAbsoluteExact(
        element: HTMLElement,
        topValue: number,
        leftValue: number,
        heightValue: number,
        widthValue: number): void;
    IsPositioned(element: HTMLElement): boolean
}
declare interface IEnumerator<T>{
    get_current(): T,
    moveNext(): boolean,
    reset(): void
}
declare interface IEnumerable<T>{
    getEnumerator(): IEnumerator<T >
}
declare module 'Office' {
    declare module 'Server' {
        declare module 'ReputationModel' {
            declare         export class Reputation {
                constructor(): this;
                setLike(context: SP$ClientContext, listId: string, itemId: number, like: boolean): void;
                setRating(
                    context: SP$ClientContext,
                    listId: string,
                    itemId: number,
                    rating: number): void
            }
        }

    }

}
declare class SPStatusNotificationData {
    constructor(text: string, subText: string, imageUrl: string, sip: string): this
}
declare
function RefreshCommandUI(): voiddeclare class SPClientAutoFill {
    MenuOptionType: {
        Option: number,
        Footer: number,
        Separator: number,
        Loading: number
    };
    KeyProperty: string;
    DisplayTextProperty: string;
    SubDisplayTextProperty: string;
    TitleTextProperty: string;
    MenuOptionTypeProperty: string;
    GetAutoFillObjFromInput(elmText: HTMLInputElement): SPClientAutoFill;
    GetAutoFillObjFromContainer(elmChild: HTMLElement): SPClientAutoFill;
    GetAutoFillMenuItemFromOption(elmChild: HTMLElement): HTMLElement;
    constructor(elmTextId: string, elmContainerId: string, fnPopulateAutoFill: (targetElement: HTMLInputElement) => void): this;
    TextElementId: string;
    AutoFillContainerId: string;
    AutoFillMenuId: string;
    VisibleItemCount: number;
    CurrentFocusOption: number;
    AutoFillMinTextLength: number;
    AutoFillTimeout: number;
    AutoFillCallbackTimeoutID: string;
    FuncOnAutoFillClose: (elmTextId: string, ojData: ISPClientAutoFillData) => void;
    FuncPopulateAutoFill: (targetElement: HTMLElement) => void;
    AllOptionData: {
        [key: string]: ISPClientAutoFillData
    };
    PopulateAutoFill(
        jsonObjSuggestions: ISPClientAutoFillData[],
        fnOnAutoFillCloseFuncName: (elmTextId: string, objData: ISPClientAutoFillData) => void): void;
    IsAutoFillOpen(): boolean;
    SetAutoFillHeight(): void;
    SelectAutoFillOption(elemOption: HTMLElement): void;
    FocusAutoFill(): void;
    BlurAutoFill(): void;
    CloseAutoFill(ojData: ISPClientAutoFillData): void;
    UpdateAutoFillMenuFocus(bMoveNextLink: boolean): void;
    UpdateAutoFillPosition(): void
}
declare interface ISPClientAutoFillData {
    AutoFillKey?: any,
        AutoFillDisplayText?: string,
        AutoFillSubDisplayText?: string,
        AutoFillTitleText?: string,
        AutoFillMenuOptionType?: number
}
declare class SPClientPeoplePicker {
    ValueName: string;
    DisplayTextName: string;
    SubDisplayTextName: string;
    DescriptionName: string;
    SIPAddressName: string;
    SuggestionsName: string;
    UnvalidatedEmailAddressKey: string;
    KeyProperty: string;
    DisplayTextProperty: string;
    SubDisplayTextProperty: string;
    TitleTextProperty: string;
    DomainProperty: string;
    SPClientPeoplePickerDict: {
        [pickerIelementId: string]: SPClientPeoplePicker
    };
    InitializeStandalonePeoplePicker(
        clientId: string,
        value: ISPClientPeoplePickerEntity[],
        schema: ISPClientPeoplePickerSchema): void;
    ParseUserKeyPaste(userKey: string): string;
    GetTopLevelControl(elmChild: HTMLElement): HTMLElement;
    AugmentEntity(entity: ISPClientPeoplePickerEntity): ISPClientPeoplePickerEntity;
    AugmentEntitySuggestions(
        pickerObj: SPClientPeoplePicker,
        allEntities: ISPClientPeoplePickerEntity[],
        mergeLocal?: boolean): ISPClientPeoplePickerEntity[];
    PickerObjectFromSubElement(elmSubElement: HTMLElement): SPClientPeoplePicker;
    TestLocalMatch(strSearchLower: string, dataEntity: ISPClientPeoplePickerEntity): boolean;
    BuildUnresolvedEntity(key: string, dispText: string): ISPClientPeoplePickerEntity;
    AddAutoFillMetaData(
        pickerObj: SPClientPeoplePicker,
        options: ISPClientPeoplePickerEntity[],
        numOpts: number): ISPClientPeoplePickerEntity[];
    BuildAutoFillMenuItems(
        pickerObj: SPClientPeoplePicker,
        options: ISPClientPeoplePickerEntity[]): ISPClientPeoplePickerEntity[];
    IsUserEntity(entity: ISPClientPeoplePickerEntity): boolean;
    CreateSPPrincipalType(acctStr: string): number;
    TopLevelElementId: string;
    EditorElementId: string;
    AutoFillElementId: string;
    ResolvedListElementId: string;
    InitialHelpTextElementId: string;
    WaitImageId: string;
    HiddenInputId: string;
    AllowEmpty: boolean;
    ForceClaims: boolean;
    AutoFillEnabled: boolean;
    AllowMultipleUsers: boolean;
    OnValueChangedClientScript: (pickerElementId: string, users: ISPClientPeoplePickerEntity[]) => void;
    OnUserResolvedClientScript: (pickerElementId: string, users: ISPClientPeoplePickerEntity[]) => void;
    OnControlValidateClientScript: (pickerElementId: string, users: ISPClientPeoplePickerEntity[]) => void;
    UrlZone: SP$UrlZone;
    AllUrlZones: boolean;
    SharePointGroupID: number;
    AllowEmailAddresses: boolean;
    PPMRU: SPClientPeoplePickerMRU;
    UseLocalSuggestionCache: boolean;
    CurrentQueryStr: string;
    LatestSearchQueryStr: string;
    InitialSuggestions: ISPClientPeoplePickerEntity[];
    CurrentLocalSuggestions: ISPClientPeoplePickerEntity[];
    CurrentLocalSuggestionsDict: ISPClientPeoplePickerEntity;
    VisibleSuggestions: number;
    PrincipalAccountType: string;
    PrincipalAccountTypeEnum: undefined.PrincipalType;
    EnabledClaimProviders: string;
    SearchPrincipalSource: undefined.PrincipalSource;
    ResolvePrincipalSource: undefined.PrincipalSource;
    MaximumEntitySuggestions: number;
    EditorWidthSet: boolean;
    QueryScriptInit: boolean;
    AutoFillControl: SPClientAutoFill;
    TotalUserCount: number;
    UnresolvedUserCount: number;
    UserQueryDict: {
        [index: string]: SP$StringResult
    };
    ProcessedUserList: {
        [index: string]: SPClientPeoplePickerProcessedUser
    };
    HasInputError: boolean;
    HasServerError: boolean;
    ShowUserPresence: boolean;
    TerminatingCharacter: string;
    UnresolvedUserElmIdToReplace: string;
    WebApplicationID: SP$Guid;
    GetAllUserInfo(): ISPClientPeoplePickerEntity[];
    SetInitialValue(entities: ISPClientPeoplePickerEntity[], initialErrorMsg?: string): void;
    AddUserKeys(userKeys: string, bSearch: boolean): void;
    BatchAddUserKeysOperation(allKeys: string[], numProcessed: number): void;
    ResolveAllUsers(fnContinuation: () => void): void;
    ExecutePickerQuery(
        queryIds: string,
        onSuccess: (queryId: string, result: SP$StringResult) => void,
        onFailure: (queryId: string, result: SP$StringResult) => void,
        fnContinuation: () => void): void;
    AddUnresolvedUserFromEditor(bRunQuery?: boolean): void;
    AddUnresolvedUser(unresolvedUserObj: ISPClientPeoplePickerEntity, bRunQuery?: boolean): void;
    UpdateUnresolvedUser(results: SP$StringResult, user: ISPClientPeoplePickerEntity): void;
    AddPickerSearchQuery(queryStr: string): string;
    AddPickerResolveQuery(queryStr: string): string;
    GetPeoplePickerQueryParameters(): undefined.ClientPeoplePickerQueryParameters;
    AddProcessedUser(userObject: ISPClientPeoplePickerEntity, fResolved?: boolean): string;
    DeleteProcessedUser(elmToRemove: HTMLElement): void;
    OnControlValueChanged(): void;
    OnControlResolvedUserChanged(): void;
    EnsureAutoFillControl(): void;
    ShowAutoFill(resultsTable: ISPClientAutoFillData[]): void;
    FocusAutoFill(): void;
    BlurAutoFill(): void;
    IsAutoFillOpen(): boolean;
    EnsureEditorWidth(): void;
    SetFocusOnEditorEnd(): void;
    ToggleWaitImageDisplay(bShowImage?: boolean): void;
    SaveAllUserKeysToHiddenInput(): void;
    GetCurrentEditorValue(): string;
    GetControlValueAsJSObject(): ISPClientPeoplePickerEntity[];
    GetAllUserKeys(): string;
    GetControlValueAsText(): string;
    IsEmpty(): boolean;
    IterateEachProcessedUser(
        fnCallback: (index: number, user: SPClientPeoplePickerProcessedUser) => void): void;
    HasResolvedUsers(): boolean;
    Validate(): void;
    ValidateCurrentState(): void;
    GetUnresolvedEntityErrorMessage(): string;
    ShowErrorMessage(msg: string): void;
    ClearServerError(): void;
    SetServerError(): void;
    OnControlValidate(): void;
    SetEnabledState(bEnabled: boolean): void;
    DisplayLocalSuggestions(): void;
    CompileLocalSuggestions(input: string): void;
    PlanningGlobalSearch(): boolean;
    AddLoadingSuggestionMenuOption(): void;
    ShowingLocalSuggestions(): boolean;
    ShouldUsePPMRU(): boolean;
    AddResolvedUserToLocalCache(resolvedEntity: ISPClientPeoplePickerEntity, resolveText: string): void
}
declare interface ISPClientPeoplePickerSchema {
    TopLevelElementId?: string,
        EditorElementId?: string,
        AutoFillElementId?: string,
        ResolvedListElementId?: string,
        InitialHelpTextElementId?: string,
        WaitImageId?: string,
        HiddenInputId?: string,
        AllowMultipleValues?: boolean,
        Required?: boolean,
        AutoFillEnabled?: boolean,
        ForceClaims?: boolean,
        AllowEmailAddresses?: boolean,
        AllUrlZones?: boolean,
        UseLocalSuggestionCache?: boolean,
        UserNoQueryPermission?: boolean,
        VisibleSuggestions?: number,
        MaximumEntitySuggestions?: number,
        ErrorMessage?: string,
        InitialHelpText?: string,
        InitialSuggestions?: ISPClientPeoplePickerEntity[],
        UrlZone?: SP$UrlZone,
        WebApplicationID?: SP$Guid,
        SharePointGroupID?: number,

        /**
         * Specify User, DL, SecGroup or SPGroup
         */
        PrincipalAccountType?: string,
        EnabledClaimProvider?: string,
        ResolvePrincipalSource?: undefined.PrincipalSource,
        SearchPrincipalSource?: undefined.PrincipalSource,
        OnUserResolvedClientScript?: (pickerElementId: string, users: ISPClientPeoplePickerEntity[]) => void,
        OnValueChangedClientScript?: (pickerElementId: string, users: ISPClientPeoplePickerEntity[]) => void,

        /**
         * Number or '100%'
         */
        Width?: any,
        Rows?: number
}
declare class SPClientPeoplePickerMRU {
    PPMRUVersion: number;
    MaxPPMRUItems: number;
    PPMRUDomLocalStoreKey: string;
    GetSPClientPeoplePickerMRU(): SPClientPeoplePickerMRU;
    GetItems(strKey: string): SPAnimation$Object[];
    SetItem(strSearchTerm: string, objEntity: SPAnimation$Object): void;
    ResetCache(): void
}
declare interface ISPClientPeoplePickerEntity {
    Key?: string,
        Description?: string,
        DisplayText?: string,
        EntityType?: string,
        ProviderDisplayName?: string,
        ProviderName?: string,
        IsResolved?: boolean,
        EntityData?: {
            Title: string,
            MobilePhone: string,
            Department: string,
            Email: string
        },
        MultipleMatches: ISPClientPeoplePickerEntity[],
        DomainText?: string, [key: string]: any
}
declare class SPClientPeoplePickerProcessedUser {
    UserContainerElementId: string;
    DisplayElementId: string;
    PresenceElementId: string;
    DeleteUserElementId: string;
    SID: string;
    DisplayName: string;
    SIPAddress: string;
    UserInfo: ISPClientPeoplePickerEntity;
    ResolvedUser: boolean;
    Suggestions: ISPClientAutoFillData[];
    ErrorDescription: string;
    ResolveText: string;
    UpdateResolvedUser(newUserInfo: ISPClientPeoplePickerEntity, strNewElementId: string): void;
    UpdateSuggestions(entity: ISPClientPeoplePickerEntity): void;
    BuildUserHTML(): string;
    UpdateUserMaxWidth(): void;
    ResolvedAsUnverifiedEmail(): string;
    BuildUserPresenceHtml(elmId: string, strSip: string, bResolved?: boolean): string;
    GetUserContainerElement(elmChild: HTMLElement): HTMLElement;
    HandleProcessedUserClick(ndClicked: HTMLElement): void;
    DeleteProcessedUser(elmToRemove: HTMLElement): void;
    HandleDeleteProcessedUserKey(e: Event): void;
    HandleResolveProcessedUserKey(e: Event): void
}
declare
var npm$namespace$Define: {
    loadScript: typeof Define$loadScript,
    require: typeof Define$require,
    define: typeof Define$define,
}
declare
export function Define$loadScript(url: string, successCallback: () => void, errCallback: () => void): void


/**
 * Loads script from _layouts/15/[req].js 
 */
declare
export function Define$require(req: string, callback: Function): void

declare
export function Define$define(name: string, deps: string[], def: Function): void
declare
var npm$namespace$Verify: {
    ArgumentType: typeof Verify$ArgumentType,
}
declare
export function Verify$ArgumentType(arg: string, expected: any): voiddeclare
export var local: BrowserStorage$CachedStorage;

declare
export var session: BrowserStorage$CachedStorage;


/**
 * Available only in SharePoint Online
 */
declare interface BrowserStorage$CachedStorage {
    getItem(key: string): string,
        setItem(key: string, value: string): void,
        removeItem(key: string): void,
        clead(): void,
        length: number
}
declare
export var browseris: Browseris;
declare
var npm$namespace$CSSUtil: {
    HasClass: typeof CSSUtil$HasClass,
    AddClass: typeof CSSUtil$AddClass,
    RemoveClass: typeof CSSUtil$RemoveClass,
    pxToFloat: typeof CSSUtil$pxToFloat,
    pxToNum: typeof CSSUtil$pxToNum,
    numToPx: typeof CSSUtil$numToPx,
    getCurrentEltStyleByNames: typeof CSSUtil$getCurrentEltStyleByNames,
    getCurrentStyle: typeof CSSUtil$getCurrentStyle,
    getCurrentStyleCorrect: typeof CSSUtil$getCurrentStyleCorrect,
    getOpacity: typeof CSSUtil$getOpacity,
    setOpacity: typeof CSSUtil$setOpacity,
}
declare
export function CSSUtil$HasClass(elem: HTMLElement, className: string): boolean

declare
export function CSSUtil$AddClass(elem: HTMLElement, className: string): void

declare
export function CSSUtil$RemoveClass(elem: HTMLElement, className: string): void

declare
export function CSSUtil$pxToFloat(pxString: string): number

declare
export function CSSUtil$pxToNum(px: string): number

declare
export function CSSUtil$numToPx(n: number): string

declare
export function CSSUtil$getCurrentEltStyleByNames(elem: HTMLElement, styleNames: string[]): string

declare
export function CSSUtil$getCurrentStyle(elem: HTMLElement, cssStyle: string): string

declare
export function CSSUtil$getCurrentStyleCorrect(element: HTMLElement, camelStyleName: string, dashStyleName: string): string

declare
export function CSSUtil$getOpacity(element: HTMLElement): number

declare
export function CSSUtil$setOpacity(element: HTMLElement, value: number): void
declare
var npm$namespace$DOM: {
    cancelDefault: typeof DOM$cancelDefault,
    AbsLeft: typeof DOM$AbsLeft,
    AbsTop: typeof DOM$AbsTop,
    CancelEvent: typeof DOM$CancelEvent,
    GetElementsByName: typeof DOM$GetElementsByName,
    GetEventCoords: typeof DOM$GetEventCoords,
    GetEventSrcElement: typeof DOM$GetEventSrcElement,
    GetInnerText: typeof DOM$GetInnerText,
    PreventDefaultNavigation: typeof DOM$PreventDefaultNavigation,
    SetEvent: typeof DOM$SetEvent,
}
declare
export var rightToLeft: boolean;

declare
export function DOM$cancelDefault(evt: Event): void

declare
export function DOM$AbsLeft(el: HTMLElement): number

declare
export function DOM$AbsTop(el: HTMLElement): number

declare
export function DOM$CancelEvent(evt: Event): void

declare
export function DOM$GetElementsByName(nae: string): NodeList

declare
export function DOM$GetEventCoords(evt: Event): {
    x: number,
    y: number
}

declare
export function DOM$GetEventSrcElement(evt: Event): HTMLElement

declare
export function DOM$GetInnerText(el: HTMLElement): string

declare
export function DOM$PreventDefaultNavigation(evt: Event): void

declare
export function DOM$SetEvent(eventName: string, eventFunc: Function, el: HTMLElement): void
declare
var npm$namespace$Encoding: {
    EncodeScriptQuote: typeof Encoding$EncodeScriptQuote,
    HtmlEncode: typeof Encoding$HtmlEncode,
    HtmlDecode: typeof Encoding$HtmlDecode,
    AttrQuote: typeof Encoding$AttrQuote,
    ScriptEncode: typeof Encoding$ScriptEncode,
    ScriptEncodeWithQuote: typeof Encoding$ScriptEncodeWithQuote,
    CanonicalizeUrlEncodingCase: typeof Encoding$CanonicalizeUrlEncodingCase,
}
declare
export function Encoding$EncodeScriptQuote(str: string): string

declare
export function Encoding$HtmlEncode(str: string): string

declare
export function Encoding$HtmlDecode(str: string): string

declare
export function Encoding$AttrQuote(str: string): string

declare
export function Encoding$ScriptEncode(str: string): string

declare
export function Encoding$ScriptEncodeWithQuote(str: string): string

declare
export function Encoding$CanonicalizeUrlEncodingCase(str: string): string
declare
var npm$namespace$IE8Support: {
    arrayIndexOf: typeof IE8Support$arrayIndexOf,
    attachDOMContentLoaded: typeof IE8Support$attachDOMContentLoaded,
    getComputedStyle: typeof IE8Support$getComputedStyle,
    stopPropagation: typeof IE8Support$stopPropagation,
}
declare
export function IE8Support$arrayIndexOf<T>(array: T[], item: T, startIdx?: number): number

declare
export function IE8Support$attachDOMContentLoaded(handler: Function): void

declare
export function IE8Support$getComputedStyle(domObj: HTMLElement, camelStyleName: string, dashStyleName: string): string

declare
export function IE8Support$stopPropagation(evt: Event): void
declare
var npm$namespace$StringUtil: {
    BuildParam: typeof StringUtil$BuildParam,
    ApplyStringTemplate: typeof StringUtil$ApplyStringTemplate,
}
declare
export function StringUtil$BuildParam(stPattern: string, ...params: any[]): string

declare
export function StringUtil$ApplyStringTemplate(str: string, ...params: any[]): string
declare
var npm$namespace$TypeUtil: {
    IsArray: typeof TypeUtil$IsArray,
    IsNullOrUndefined: typeof TypeUtil$IsNullOrUndefined,
}
declare
export function TypeUtil$IsArray(value: any): boolean

declare
export function TypeUtil$IsNullOrUndefined(value: any): boolean
declare
var npm$namespace$Nav: {
    convertRegularURLtoMDSURL: typeof Nav$convertRegularURLtoMDSURL,
    isMDSUrl: typeof Nav$isMDSUrl,
    isPageUrlValid: typeof Nav$isPageUrlValid,
    isPortalTemplatePage: typeof Nav$isPortalTemplatePage,
    getAjaxLocationWindow: typeof Nav$getAjaxLocationWindow,
    getSource: typeof Nav$getSource,
    getUrlKeyValue: typeof Nav$getUrlKeyValue,
    getWindowLocationNoHash: typeof Nav$getWindowLocationNoHash,
    goToHistoryLink: typeof Nav$goToHistoryLink,
    getGoToLinkUrl: typeof Nav$getGoToLinkUrl,
    goToLink: typeof Nav$goToLink,
    goToLinkOrDialogNewWindow: typeof Nav$goToLinkOrDialogNewWindow,
    goToDiscussion: typeof Nav$goToDiscussion,
    onClickHook: typeof Nav$onClickHook,
    pageUrlValidation: typeof Nav$pageUrlValidation,
    parseHash: typeof Nav$parseHash,
    navigate: typeof Nav$navigate,
    removeMDSQueryParametersFromUrl: typeof Nav$removeMDSQueryParametersFromUrl,
    urlFromHashBag: typeof Nav$urlFromHashBag,
    wantsNewTab: typeof Nav$wantsNewTab,
}
declare
export var ajaxNavigate: AjaxNavigate;

declare
export function Nav$convertRegularURLtoMDSURL(webUrl: string, fullPath: string): string

declare
export function Nav$isMDSUrl(url: string): boolean

declare
export function Nav$isPageUrlValid(url: string): boolean

declare
export function Nav$isPortalTemplatePage(url: string): boolean

declare
export function Nav$getAjaxLocationWindow(): string

declare
export function Nav$getSource(defaultSource?: string): string

declare
export function Nav$getUrlKeyValue(
    keyName: string,
    bNoDecode: boolean,
    url: string,
    bCaseInsensitive: boolean): string

declare
export function Nav$getWindowLocationNoHash(hre: string): string

declare
export function Nav$goToHistoryLink(el: HTMLAnchorElement, strVersion: string): void

declare
export function Nav$getGoToLinkUrl(el: HTMLAnchorElement): string

declare
export function Nav$goToLink(el: HTMLAnchorElement): void

declare
export function Nav$goToLinkOrDialogNewWindow(el: HTMLAnchorElement): void

declare
export function Nav$goToDiscussion(url: string): void

declare
export function Nav$onClickHook(evt: Event, topElm: HTMLElement): void

declare
export function Nav$pageUrlValidation(url: string, alertString: string): string

declare
export function Nav$parseHash(hash: string): SPAnimation$Object

declare
export function Nav$navigate(url: string): void

declare
export function Nav$removeMDSQueryParametersFromUrl(url: string): string

declare
export function Nav$urlFromHashBag(hashObject: SPAnimation$Object): string

declare
export function Nav$wantsNewTab(evt: Event): boolean
declare
var npm$namespace$URI_Encoding: {
    encodeURIComponent: typeof URI_Encoding$encodeURIComponent,
    escapeUrlForCallback: typeof URI_Encoding$escapeUrlForCallback,
}
declare
export function URI_Encoding$encodeURIComponent(
    str: string,
    bAsUrl?: boolean,
    bForFilterQuery?: boolean,
    bForCallback?: boolean): string

declare
export function URI_Encoding$escapeUrlForCallback(str: string): stringdeclare interface IListItem {
    ID: number,
        ContentTypeId: string
}
declare module 'Util' {
    declare export function createViewEditUrl(
        renderCtx: SPClientTemplates$RenderContext,
        listItem: IListItem,
        useEditFormUrl?: boolean,
        appendSource?: boolean): string
    declare export function createItemPropertiesTitle(renderCtx: SPClientTemplates$RenderContext, listItem: IListItem): string
    declare export function clearSelectedItemsDict(context: any): void
    declare export function ctxInitItemState(context: any): void
    declare export function getAttributeFromItemTable(
        itemTableParam: HTMLElement,
        strAttributeName: string,
        strAttributeOldName: string): string
    declare export function getSelectedItemsDict(context: any): any
    declare export function removeOnlyPagingArgs(url: string): string
    declare export function removePagingArgs(url: string): string
    declare export function showAttachmentRows(): void
}

declare
var npm$namespace$SPThemeUtils: {
    ApplyCurrentTheme: typeof SPThemeUtils$ApplyCurrentTheme,
    WithCurrentTheme: typeof SPThemeUtils$WithCurrentTheme,
    UseClientSideTheming: typeof SPThemeUtils$UseClientSideTheming,
    Suspend: typeof SPThemeUtils$Suspend,
}
declare
export function SPThemeUtils$ApplyCurrentTheme(): void

declare
export function SPThemeUtils$WithCurrentTheme(resultCallback: Function): void

declare
export function SPThemeUtils$UseClientSideTheming(): boolean

declare
export function SPThemeUtils$Suspend(): voiddeclare
export class ClientControl mixins undefined.Control {
    constructor(elem: Element): this;

    /**
     * toggles visibility of children controls of the messageContainer 
     */
    toggleMessageDetails(messageContainer: Element): void;
    alternateRenderer: any;
    alternateRenderContext: any;
    loaded: boolean;

    /**
     * returns next unique identifier for nested controls 
     */
    get_nextUniqueId(): string;

    /**
     * Gets the id of View display template that is used to render this control.
     * Example: '~sitecollection/_catalogs/masterpage/Display Templates/Search/Control_SearchResults.js'
     */
    get_renderTemplateId(): string;
    set_renderTemplateId(value: string): string;

    /**
     * Returns true if control will load scripts defined by the serverTemplateScriptsToLoad field after control load. True by default. 
     */
    get_delayLoadTemplateScripts(): boolean;

    /**
     * If set to true, control will load scripts defined by the serverTemplateScriptsToLoad field after control load. True by default. 
     */
    set_delayLoadTemplateScripts(value: boolean): boolean;
    get_states(): any;
    set_states(value: any): any;
    get_messages(): any[];
    set_messages(value: any[]): any[];
    get_showDataErrors(): boolean;

    /**
     * False by default. 
     */
    set_showDataErrors(value: boolean): boolean;
    get_alternateErrorMessage(): string;
    set_alternateErrorMessage(value: string): string;

    /**
     * returns true if control has already been loaded at least once 
     */
    get_isInitialLoad(): boolean;
    initialize(): void;
    dispose(): void;
    renderControl(listData: any, dataProvider: any): void;
    processDataProviderErrors(dataProviderToProcess: any): void;
    scriptApplication_PreLoad(sender: any, e: any): void;
    scriptApplication_Load(sender: any, e: any): void;
    scriptApplication_PostLoad(sender: any, e: any): void;
    loadServerTemplateScripts(): void;
    serverTemplateScriptsToLoad: any[];
    serverTemplateScriptsCallback(): void;
    loadRenderTemplateScripts(
        scriptReferences: any,
        success: any,
        failure: any,
        timeout: any,
        loadStandAloneCustomScripts: any): boolean;
    invokeAlternateRender(callback: any, container: any, ctx: any): any;
    invokeClientRenderer(node: any, ctx: any): any;
    processDataErrorMessages(dataErrorsList: any): any;
    processRenderingErrorMessages(ctx: any): any;
    hasMessages(): any;
    updateDisplayControlWithNewMessages(): any;

    /**
     * show/hide the DOM element associated with control 
     */
    setControlElementVisibility(showElement: boolean): any;
    clickHandler(e: Event): any
}

declare
export class DataProvider mixins ClientControl {
    constructor(elem: Element): this;
    get_currentQueryState(): any;
    get_sourceID(): string;
    set_sourceID(value: string): string;
    get_sourceName(): string;
    set_sourceName(value: string): string;
    get_sourceLevel(): string;
    set_sourceLevel(value: string): string;
    get_collapseSpecification(): string;
    set_collapseSpecification(value: string): string;
    get_queryGroupName(): string;
    set_queryGroupName(value: string): string;
    get_queryPropertiesTemplateUrl(): string;
    set_queryPropertiesTemplateUrl(value: string): string;
    get_queryTemplate(): any;
    set_queryTemplate(value: any): any;
    get_fallbackSort(): any;
    set_fallbackSort(value: any): any;
    get_rankRules(): any;
    set_rankRules(value: any): any;
    get_initialQueryState(): any;
    set_initialQueryState(value: any): any;
    get_initialResult(): string;
    set_initialResult(value: string): string;
    get_initialResultRef(): any;
    set_initialResultRef(value: any): any;
    get_initialResultObject(): any;
    get_batched(): boolean;
    set_batched(value: boolean): boolean;
    get_active(): boolean;
    set_active(value: boolean): boolean;
    get_bypassResultTypes(): boolean;
    set_bypassResultTypes(value: boolean): boolean;
    get_processBestBets(): boolean;
    set_processBestBets(value: boolean): boolean;
    get_processPersonalFavorites(): boolean;
    set_processPersonalFavorites(value: boolean): boolean;

    /**
     * Number of results displayed per page. 10 by default 
     */
    get_resultsPerPage(): number;

    /**
     * Number of results displayed per page. 10 by default 
     */
    set_resultsPerPage(value: number): number;
    get_selectedRefiners(): any;
    set_selectedRefiners(value: any): any;
    get_selectedProperties(): any;
    set_selectedProperties(value: any): any;
    get_hitHighlightedProperties(): any;
    set_hitHighlightedProperties(value: any): any;
    get_fallbackLanguage(): any;
    set_fallbackLanguage(value: any): any;
    get_fallbackRankingModelID(): string;
    set_fallbackRankingModelID(value: string): string;
    get_fallbackRefinementFilters(): any;
    set_fallbackRefinementFilters(value: any): any;
    get_availableSorts(): any;
    set_availableSorts(value: any): any;
    get_contextualScopeUrl(): string;
    set_contextualScopeUrl(value: string): string;
    get_totalRows(): number;
    set_totalRows(value: number): number;
    get_rowCount(): number;
    set_rowCount(value: number): number;
    get_refinementInfo(): any;
    get_entityInfo(): any;
    get_enableStemming(): boolean;
    set_enableStemming(value: boolean): boolean;
    get_enablePhonetic(): boolean;
    set_enablePhonetic(value: boolean): boolean;
    get_enableNicknames(): boolean;
    set_enableNicknames(value: boolean): boolean;
    get_trimDuplicates(): boolean;
    set_trimDuplicates(value: boolean): boolean;
    get_enableInterleaving(): boolean;
    set_enableInterleaving(value: boolean): boolean;
    get_enableQueryRules(): boolean;
    set_enableQueryRules(value: boolean): boolean;
    get_enableOrderingHitHighlightedProperty(): boolean;
    set_enableOrderingHitHighlightedProperty(value: boolean): boolean;
    get_hitHighlightedMultivaluePropertyLimit(): number;
    set_hitHighlightedMultivaluePropertyLimit(value: number): number;
    get_properties(): any;
    set_properties(value: any): any;
    get_clientType(): string;
    set_clientType(value: string): string;
    get_maxPagesAfterCurrent(): number;
    set_maxPagesAfterCurrent(value: number): number;
    get_userAction(): any;
    set_userAction(value: any): any;
    get_queryCount(): number;
    set_queryCount(value: number): number;
    get_resultsUrl(): any;
    set_resultsUrl(value: any): any;
    get_upScopeUrl(): any;
    get_effectiveQueryLanguage(): any;
    get_parentImpressionID(): any;
    set_parentImpressionID(value: any): any;
    get_updateAjaxNavigate(): boolean;
    set_updateAjaxNavigate(value: boolean): boolean;
    get_summaryLength(): number;
    set_summaryLength(value: number): number;
    get_desiredSnippetLength(): number;
    set_desiredSnippetLength(value: number): number;
    get_personalizedQuery(): boolean;
    set_personalizedQuery(value: boolean): boolean;
    initialize(): void;
    dispose(): void;
    scriptApplication_PreLoad(sender: any, e: any): void;
    scriptApplication_Load(sender: any, e: any): void;
    scriptApplication_PostLoad(sender: any, e: any): void;
    serverTemplateScriptsCallback(): void;
    add_queryIssuing(value: any): void;
    remove_queryIssuing(value: any): void;
    raiseQueryIssuingEvent(arg: any): void;
    add_resultReady(value: any): void;
    remove_resultReady(value: any): void;
    raiseResultReadyEvent(arg: any): void;
    add_queryStateChanged(value: any): void;
    raiseQueryStateChangedEvent(arg: any): void;
    displayControl_QueryReady(sender: any, e: any): void;
    searchBox_QueryReady(sender: any, e: any): void;
    searchBox_BatchQueryIssuing(sender: any, e: any): void;
    searchBox_BatchResultReady(sender: any, e: any): void;
    processInitial(): void;
    issueQuery(): void;
    displayControlMessages(): void;
    raiseEmptyResultReadyEvent(): void;
    getSortRankName(): string;
    getSortName(): string
}

declare
export class DisplayControl mixins ClientControl {
    get_queryGroupName(): string;
    set_queryGroupName(value: string): string;
    get_dataProvider(): Srch$DataProvider;
    get_renderedResult(): boolean;
    set_renderedResult(value: boolean): boolean;
    get_shouldShowNoResultMessage(): boolean;
    set_shouldShowNoResultMessage(value: boolean): boolean;
    get_currentResultTableCollection(): any;
    set_currentResultTableCollection(value: any): any;
    get_emptyMessage(): string;
    set_emptyMessage(value: string): string;
    scriptApplication_PreLoad(sender: any, e: any): void;
    scriptApplication_PostLoad(sender: any, e: any): void;
    serverTemplateScriptsCallback(): void;
    add_queryReady(value: any): void;
    remove_queryReady(value: any): void;
    raiseQueryReadyEvent(arg: any): void;
    add_resultRendered(value: any): void;
    remove_resultRendered(value: any): void;
    raiseResultRenderedEvent(arg: any): void;
    add_oneTimeResultRendered(value: any): void;
    remove_oneTimeResultRendered(value: any): void;
    raiseOneTimeResultRenderedEvent(arg: any): void;
    refresh(queryState: any): void;
    dataProvider_QueryIssuing(sender: any, e: any): void;
    dataProvider_ResultReady(sender: any, e: any): void;
    processQueryIssuing(queryState: any): void;
    processResultReady(resultTableCollection: any): void;
    render(): void
}

declare
export class Refinement mixins DisplayControl {
    createRefinementTextbox(name: string): Element;
    submitMultiRefinement(
        name: string,
        control: Srch$Refinement,
        useContains: boolean,
        useKQL: boolean): void;
    ensureUserSpecifiedRefinerValueHasWhiteSpaceQuotes(inputText: string): string;
    getRefinementLocalizedTitle(propertyName: string): string;
    getRefinementTitle(currentRefinemntControl: Srch$Refinement): string;

    /**
     * Gets expanded state of the specified filter from cookie 
     */
    getExpanded(filterName: string): string;

    /**
     * Save expanded state of the specified filter to cookie 
     */
    setExpanded(filterName: string, value: string): void;
    multiRefinerSpecifyOtherFilterValue(
        refinerName: string,
        clientControl: Srch$Refinement,
        useContains: boolean,
        useKQL: boolean): void;
    constructor(elem: Element): this;
    get_selectedRefinementControls(): Srch$RefinementControl[];
    set_selectedRefinementControls(value: Srch$RefinementControl[]): Srch$RefinementControl[];
    get_useManagedNavigationRefiners(): boolean;
    set_useManagedNavigationRefiners(value: boolean): boolean;
    get_emptyRefinementMessageId(): string;
    set_emptyRefinementMessageId(value: string): string;
    scriptApplication_PreLoad(sender: any, e: any): void;
    render(): void;
    addRefinementFilter(filterName: string, filterToken: any): void;
    addRefinementFiltersJSON(refinersJSON: string): void;
    addRefinementFiltersJSONWithOr(refinersJSON: string): void;
    addRefinementFilters(refiners: any[]): void;
    addRefinementFiltersWithOp(refiners: any[], op: string): void;
    removeRefinementFilter(filterName: string, filterToken: string): void;
    removeRefinementFiltersJSON(refinersJSON: string): void;
    updateRefinementFilters(
        filterName: string,
        filterTokens: string[],
        op: string,
        useKQL: boolean,
        tokenToDisplayValueMap: any): void;
    updateRefinersJSON(refinersJSON: string): void;
    updateRefiners(
        refiners: any[],
        op: string,
        useKQL: boolean,
        tokenToDisplayValueMap: any): void;
    removeRefinementCategory(rcs: any, filterName: string): void;
    replaceRefinementFilter(oldRefinementFilter: any, newRefinementFilter: any): void;
    hasRefinementFilter(filterName: string, filterToken: string): boolean;
    hasAllRefinementFilters(filterName: string, filterTokens: string[]): boolean;
    hasRefinementCategory(refinementName: string): boolean;
    getCurrentRefinementCategory(refinementName: string): any;

    /**
     * Gets refinement control with the specified propertyName 
     */
    getRefinementControl(refinerName: string): Srch$RefinementControl;

    /**
     * Returns true if selected refinement controls collection contains a control with the specified propertyName 
     */
    hasRefiner(refinerName: string): boolean;

    /**
     * Replaces the refinement controls 
     */
    updateRefinementControls(newControls: Srch$RefinementControl[]): void
}

declare
export class RefinementControl {
    constructor(propertyName: string, spec: string, renderTemplateId: string): this;
    propertyName: string;
    spec: string;
    renderTemplateId: string;
    overrideDisplayName: string;
    useDefaultDateIntervals: boolean;
    containerId: string;
    alternateRenderer: any;
    alternateRenderContext: any;
    countDisplay: string;
    deepHits: number
}

declare
export class Result mixins DisplayControl {
    parsePropertyMappingWithSlotDisplayNames(mappings: any): {
        [key: string]: any
    };
    parsePropertyMappingsString(mappings: any): {
        [key: string]: any
    };
    getSelectedPropertiesFromMappingDictionary(propMappings: any): any[];
    constructor(elem: Element): this;
    get_itemTemplateId(): string;
    set_itemTemplateId(value: string): string;
    get_groupTemplateId(): string;
    set_groupTemplateId(value: string): string;
    get_itemBodyTemplateId(): string;
    set_itemBodyTemplateId(value: string): string;
    get_maxPagesBeforeCurrent(): number;
    set_maxPagesBeforeCurrent(value: number): number;
    get_maxPagesAfterCurrent(): number;
    set_maxPagesAfterCurrent(value: number): number;
    get_currentPageNumber(): number;
    set_currentPageNumber(value: number): number;
    get_showSortOptions(): boolean;
    set_showSortOptions(value: boolean): boolean;
    get_showLanguageOptions(): boolean;
    set_showLanguageOptions(value: boolean): boolean;
    get_repositionLanguageDropDown(): boolean;
    set_repositionLanguageDropDown(value: boolean): boolean;
    get_showPaging(): boolean;
    set_showPaging(value: boolean): boolean;
    get_showResults(): boolean;
    set_showResults(value: boolean): boolean;
    get_showBestBets(): boolean;
    set_showBestBets(value: boolean): boolean;
    get_showPersonalFavorites(): boolean;
    set_showPersonalFavorites(value: boolean): boolean;
    get_showDefinitions(): boolean;
    set_showDefinitions(value: boolean): boolean;
    get_showDidYouMean(): boolean;
    set_showDidYouMean(value: boolean): boolean;
    get_showAdvancedLink(): boolean;
    set_showAdvancedLink(value: boolean): boolean;
    get_showPreferencesLink(): boolean;
    set_showPreferencesLink(value: boolean): boolean;
    get_showResultCount(): boolean;
    set_showResultCount(value: boolean): boolean;
    get_showAlertMe(): boolean;
    set_showAlertMe(value: boolean): boolean;
    get_showViewDuplicates(): boolean;
    set_showViewDuplicates(value: boolean): boolean;
    get_pagingInfo(): any;
    get_shouldShowNoResultMessage(): boolean;
    get_advancedUrl(): string;
    set_advancedUrl(value: string): string;
    get_showUpScopeMessage(): boolean;
    set_showUpScopeMessage(value: boolean): boolean;
    get_scrollToTopOnRedraw(): boolean;
    set_scrollToTopOnRedraw(value: boolean): boolean;
    get_useSimplifiedQueryBuilder(): boolean;
    set_useSimplifiedQueryBuilder(value: boolean): boolean;
    get_preloadedItemTemplateIds(): string[];
    set_preloadedItemTemplateIds(value: string[]): string[];
    processResultReady(resultTableCollection: undefined.ResultTableCollection): void;
    render(): void;
    scriptApplication_PreLoad(sender: any, e: any): void;
    sortOrRank(sortRankName: string): void;
    sort(sortName: string): void;
    changeQueryLanguage(queryLanguage: number): void;
    page(startAt: number): void;
    changeQueryTerm(queryTerm: any): void;
    viewDuplicates(docId: number): void;

    /**
     * Returns true if the specified table has results and is enabled to be shown by this control 
     */
    shouldShowTable(resultTable: undefined.ResultTable): boolean
}


/**
 * Represents the search box control 
 */
declare
export class SearchBox mixins ClientControl {
    constructor(elem: Element): this;

    /**
     * Returns the current search term 
     */
    get_currentTerm(): string;

    /**
     * Sets the current search term.
     * Does not update results or even re-render control automatically, only sets the value.
    You can call .renderControl() method to re-render control.
    */
    set_currentTerm(value: string): string;
    get_queryGroupNames(): string[];
    set_queryGroupNames(value: any): string[];

    /**
     * Gets the results page address, e.g. '~site/_layouts/15/osssearchresults.aspx?u={contexturl}' 
     */
    get_resultsPageAddress(): string;

    /**
     * Sets the results page address, e.g. '~site/_layouts/15/osssearchresults.aspx?u={contexturl}'
     * Parameter u is used for setting the url filter for the search, so that only results within
    e.g. specified site are returned. Omit this parameter if you want to search everywhere.
    */
    set_resultsPageAddress(value: string): string;
    get_showAdvancedLink(): boolean;
    set_showAdvancedLink(value: boolean): boolean;
    get_showQuerySuggestions(): boolean;
    set_showQuerySuggestions(value: boolean): boolean;
    get_showNavigation(): boolean;
    set_showNavigation(value: boolean): boolean;
    get_showPeopleNameSuggestions(): boolean;
    set_showPeopleNameSuggestions(value: boolean): boolean;

    /**
     * Gets the interval in milliseconds, if user is idle during this interval, suggestions retrieval will be initiated.
     * Default value is 250.
     */
    get_querySuggestionCompletionInterval(): number;

    /**
     * Sets the interval in milliseconds, if user is idle during this interval, suggestions retrieval will be initiated.
     * Default value is 250.
     */
    set_querySuggestionCompletionInterval(value: number): number;

    /**
     * Gets minimum length of the search term for suggestions to be retrieved. Default is 2 letters. 
     */
    get_querySuggestionMinimumPrefixLength(): number;

    /**
     * Sets minimum length of the search term for suggestions to be retrieved. Default is 2 letters. 
     */
    set_querySuggestionMinimumPrefixLength(value: number): number;

    /**
     * Gets number of suggestions to display. Default is 5. 
     */
    get_querySuggestionCount(): number;

    /**
     * Sets number of suggestions to display. Default is 5. 
     */
    set_querySuggestionCount(value: number): number;
    get_personalResultCount(): number;
    set_personalResultCount(value: number): number;
    get_advancedSearchPageAddress(): string;
    set_advancedSearchPageAddress(value: string): string;
    get_showPreferencesLink(): boolean;
    set_showPreferencesLink(value: boolean): boolean;
    get_serverInitialRender(): boolean;
    set_serverInitialRender(value: boolean): boolean;
    get_setFocusOnPageLoad(): boolean;
    set_setFocusOnPageLoad(value: boolean): boolean;
    get_allowEmptySearch(): boolean;
    set_allowEmptySearch(value: boolean): boolean;
    get_updatePageTitle(): boolean;
    set_updatePageTitle(value: boolean): boolean;
    get_pageTitlePrefix(): string;
    set_pageTitlePrefix(value: string): string;

    /**
     * Gets the search input placeholder text 
     */
    get_currentPrompt(): string;

    /**
     * Sets the search input placeholder text 
     */
    set_currentPrompt(value: string): string;
    get_initialPrompt(): string;
    set_initialPrompt(value: string): string;

    /**
     * Gets the css class/classes of the placeholder text. Default is 'ms-srch-sb-prompt ms-helperText' 
     */
    get_promptCssClass(): string;

    /**
     * Sets the css class/classes of the placeholder text. Default is 'ms-srch-sb-prompt ms-helperText' 
     */
    set_promptCssClass(value: string): string;
    get_tryInplaceQuery(): boolean;
    set_tryInplaceQuery(value: boolean): boolean;

    /**
     * Gets the id of the search box input element 
     */
    get_searchBoxInputId(): string;

    /**
     * Sets the id of the search box input element 
     */
    set_searchBoxInputId(value: string): string;
    get_searchBoxContainerId(): string;
    set_searchBoxContainerId(value: string): string;
    get_navigationButtonId(): string;
    set_navigationButtonId(value: string): string;
    get_suggestionsListId(): string;
    set_suggestionsListId(value: string): string;
    get_navigationListId(): string;
    set_navigationListId(value: string): string;
    get_searchBoxInputElement(): Element;
    get_searchBoxProgressClass(): string;
    set_searchBoxProgressClass(value: string): string;
    get_searchBoxContainerElement(): Element;
    get_searchBoxLinkId(): string;
    set_searchBoxLinkId(value: string): string;
    get_searchBoxLinkElement(): Element;
    get_navigationNodes(): any;
    set_navigationNodes(value: any): any;
    get_msBeforeShowingProgress(): number;
    set_msBeforeShowingProgress(value: number): number;
    get_maintainQueryState(): boolean;
    set_maintainQueryState(value: boolean): boolean;
    get_querySuggestionsSourceID(): string;
    set_querySuggestionsSourceID(value: string): string;
    scriptApplication_PreLoad(sender: any, e: any): void;
    scriptApplication_PostLoad(sender: any, e: any): void;
    serverTemplateScriptsCallback(): any;
    add_queryReady(value: any): void;
    remove_queryReady(value: any): void;
    raiseQueryReadyEvent(arg: any): void;
    add_batchQueryIssuing(value: any): void;
    remove_batchQueryIssuing(value: any): void;
    raiseBatchQueryIssuingEvent(arg: any): void;
    add_batchResultReady(value: any): void;
    remove_batchResultReady(value: any): void;
    raiseBatchResultReadyEvent(arg: any): void;
    dataProvider_QueryStateChanged(sender: any, e: any): void;
    dataProvider_QueryIssuing(sender: any, e: any): void;
    dataProvider_ResultReady(sender: any, e: any): void;
    search(term: string): void;
    hidePrompt(): void;
    showPrompt(): void;
    focus(): void;
    setBorder(focused: boolean): void;
    activate(
        prompt: string,
        searchBoxInputId: string,
        searchBoxContainerId: string,
        navigationButtonId: string,
        suggestionsListId: string,
        navigationListId: string,
        searchBoxLinkId: string,
        searchBoxProgressClass: string,
        searchBoxPromptClass: string): void;
    activateDefaultNavigationBehavior(): void;
    activateDefaultQuerySuggestionBehavior(): void
}

declare module 'U' {
    declare export class PropNames {
        renderTemplates: "RenderTemplates";
        renderTemplateId: "RenderTemplateId";
        tableType: "TableType";
        queryErrors: "QueryErrors";
        resultTables: "ResultTables";
        resultRows: "ResultRows";
        queryId: "QueryId";
        properties: "Properties";
        rowCount: "RowCount";
        totalRows: "TotalRows";
        totalRowsIncludingDuplicates: "TotalRowsIncludingDuplicates";
        queryRuleId: "QueryRuleId";
        parentTableReference: "ParentTableReference";
        isFirstPinnedBlock: "IsFirstPinnedResultBlock";
        isFirstRankedBlock: "IsFirstRankedResultBlock"
    }
    declare export class Ids {
        group: "_group";
        groupTitle: "_groupTitle";
        groupLink: "_groupLink";
        groupContent: "_groupContent";
        item: "_item";
        body: "_itemBody";
        title: "_itemTitle";
        icon: "_itemIcon";
        titleLink: "_itemTitleLink";
        summary: "_itemSummary";
        path: "_itemPath";
        hover: "_hover";
        visualBestBet: "_visualBestBet";
        preview: "_itemPreview";
        deepLinks: "_deepLinks";
        members: "_members";
        replies: "_replies";
        discussions: "_discussions";
        likes: "_likes";
        postInfo: "_postInfo"
    }
    declare export class LoadScriptsState {
        scriptsToLoad: any;
        progress: number;
        timeoutHandle: any
    }
}


declare
export class ScriptApplicationManager {
    get_current(): Srch$ScriptApplicationManager;
    get_clientRuntimeContext(): SP$ClientRuntimeContext;

    /**
     * Returns server-relative link to _layouts/EditUserPref.aspx 
     */
    get_preferencesUrl(): string;

    /**
     * Returns server-relative link to _layouts/manageresulttypes.aspx 
     */
    get_resultTypesUrl(): string;

    /**
     * Returns server-relative link to _layouts/DesignDisplayTemplates.aspx 
     */
    get_displayTemplatesUrl(): string;

    /**
     * Returns server-relative link to _layouts/listqueryrules.aspx 
     */
    get_queryRulesUrl(): string;

    /**
     * Returns server-relative link to _layouts/manageresultsources.aspx 
     */
    get_resultSourcesUrl(): string;

    /**
     * Returns absolute URL of the current page (without ? and # parts) 
     */
    get_pagePath(): string;

    /**
     * Adds handler for the preload event 
     */
    add_preLoad(handlerFunction: Function): void;

    /**
     * Removes handler for the preload event 
     */
    remove_preLoad(handlerFunction: Function): void;

    /**
     * Raises the preload event 
     */
    raisePreLoadEvent(): void;

    /**
     * Adds handler for the load event 
     */
    add_load(handlerFunction: Function): void;

    /**
     * Removes handler for the load event 
     */
    remove_load(handlerFunction: Function): void;

    /**
     * Raises the load event 
     */
    raiseLoadEvent(): void;

    /**
     * Adds handler for the postload event 
     */
    add_postLoad(handlerFunction: Function): void;

    /**
     * Removes handler for the postload event 
     */
    remove_postLoad(handlerFunction: Function): void;

    /**
     * Raises the postload event 
     */
    raisePostLoadEvent(): void;
    initialize(): void;
    dispose(): void;

    /**
     * Registers DisplayControl, DataProvider or SearchBox in the system.
     * After registration the controls will be correctly processed in the page search context.
     */
    registerClientControl(clientControl: Srch$DisplayControl | Srch$DataProvider | Srch$SearchBox): void;

    /**
     * Puts specified hash-key address into the current page location.
     * @param url The hash-key, e.g. '#k=test'
     */
    navigateTo(url: string): void;

    /**
     * Gets the current search session ID from the cookies (if session ID does not exist in the cookies yet - it will be added) 
     */
    get_searchSessionID(): void
}

declare
export class Res {
    sb_ResultsPageTitle: string;
    sb_EmptyQueryWarning: string;
    sb_InvalidResultPageURL: string;
    sb_SitePrompt: string;
    sb_Prompt: string;
    sb_Prompt_NavNode: string;
    sb_GoSearch: string;
    sb_GoNav: string;
    sb_AdvancedLink: string;
    sb_PreferencesLink: string;
    sb_AccessKey: string;
    sb_SearchInProgress: string;
    qs_PersonalResultTitleSingular: string;
    qs_PersonalResultTitlePlural: string;
    qs_NameSuggestionsTitle: string;
    dp_ScriptLoadFailed: string;
    rf_EmptyRefinement: string;
    rf_RefinementTitle: string;
    rf_RefineBy: string;
    rf_All: string;
    rf_RefineByAuthorGoButton: string;
    rf_Apply: string;
    rf_AddProperty: string;
    rs_ResultsTitle: string;
    rs_MoveToPage: string;
    rs_MoveToPrevPage: string;
    rs_MoveToNextPage: string;
    rs_GroupMoreLink: string;
    rs_Hide_Results: string;
    qb_GetRecItems: string;
    qb_ScopeRecItems: string;
    qb_GetFillIn: string;
    qb_ShowRecsOnly: string;
    qb_FillInPopular: string;
    qb_FillInPopularScope: string;
    qb_FillInKeywords: string;
    qb_NoCollapseString: string;
    qb_ShowAllCollapseString: string;
    qb_ShowRefinersOnly: string;
    qb_RecsFromURLToken: string;
    qb_Remove: string;
    qb_FallbackResultTitle: string;
    rf_DefaultNumberLabels_min: string;
    rf_DefaultNumberLabels_max: string;
    rf_DefaultNumberLabels_range: string;
    rf_DefaultNumberLabels_value: string;
    rf_DefaultDateRangeLabels_min: string;
    rf_DefaultDateRangeLabels_max: string;
    rf_DefaultDateRangeLabels_range: string;
    rf_DefaultDateRangeLabels_value: string;
    rf_DefaultDateBoundaryLabels_0: string;
    rf_DefaultDateBoundaryLabels_1: string;
    rf_DefaultDateBoundaryLabels_2: string;
    rf_DefaultDateBoundaryLabels_3: string;
    rf_RangeBoundariesAnyValue: string;
    rf_RefinementTitle_Author: string;
    rf_RefinementTitle_AuthorOWSUSER: string;
    rf_RefinementTitle_Write: string;
    rf_RefinementTitle_LastModifiedTime: string;
    rf_RefinementTitle_owstaxidmetadataalltagsinfo: string;
    rf_RefinementTitle_owsmetadatafacetinfo: string;
    rf_RefinementTitle_languages: string;
    rf_RefinementTitle_ContentType: string;
    rf_RefinementTitle_Size: string;
    rf_RefinementTitle_UrlDepth: string;
    rf_RefinementTitle_People: string;
    rf_RefinementTitle_FileType: string;
    rf_RefinementTitle_FileExtension: string;
    rf_RefinementLabel_More: string;
    rf_ShowMoreResults_Tooltip: string;
    rf_RefinementLabel_Less: string;
    rf_RefinementLabel_EnterName: string;
    rf_RefinementTitle_CreatedBy: string;
    rf_RefinementTitle_from: string;
    rf_RefinementTitle_recipients: string;
    rf_RefinementTitle_subject: string;
    rf_RefinementTitle_Kind: string;
    rf_RefinementTitle_ContentClass: string;
    rf_RefinementTitle_WebTemplate: string;
    rf_RefinementTitle_participants: string;
    rf_RefinementTitle_AttachmentType: string;
    rf_RefinementTitle_BaseOfficeLocation: string;
    rf_RefinementTitle_companies: string;
    rf_RefinementTitle_ContentTypeId: string;
    rf_RefinementTitle_Created: string;
    rf_RefinementTitle_Department: string;
    rf_RefinementTitle_PeopleKeywords: string;
    rf_RefinementTitle_DisplayAuthor: string;
    rf_RefinementTitle_format: string;
    rf_RefinementTitle_ImageDateCreated: string;
    rf_RefinementTitle_JobTitle: string;
    rf_RefinementTitle_Location: string;
    rf_RefinementTitle_locations: string;
    rf_RefinementTitle_ManagedProperties: string;
    rf_RefinementTitle_MediaDuration: string;
    rf_RefinementTitle_PeopleInMedia: string;
    rf_RefinementTitle_personnames: string;
    rf_RefinementTitle_PictureHeight: string;
    rf_RefinementTitle_PictureWidth: string;
    rf_RefinementTitle_PostAuthor: string;
    rf_RefinementTitle_recommendedfor: string;
    rf_RefinementTitle_Responsibilities: string;
    rf_RefinementTitle_SharedWithInternal: string;
    rf_RefinementTitle_Site: string;
    rf_RefinementTitle_sitename: string;
    rf_RefinementTitle_Tags: string;
    rf_RefinementTitle_Title: string;
    rf_ResultTypeRefinerValue_MSAccess: string;
    rf_ResultTypeRefinerValue_AdobePDF: string;
    rf_ResultTypeRefinerValue_Assignment: string;
    rf_ResultTypeRefinerValue_Archive: string;
    rf_ResultTypeRefinerValue_Blog: string;
    rf_ResultTypeRefinerValue_Book: string;
    rf_ResultTypeRefinerValue_Community: string;
    rf_ResultTypeRefinerValue_Course: string;
    rf_ResultTypeRefinerValue_Discussion: string;
    rf_ResultTypeRefinerValue_Email: string;
    rf_ResultTypeRefinerValue_MSExcel: string;
    rf_ResultTypeRefinerValue_Image: string;
    rf_ResultTypeRefinerValue_Lesson: string;
    rf_ResultTypeRefinerValue_LotusNotes: string;
    rf_ResultTypeRefinerValue_NewsfeedPost: string;
    rf_ResultTypeRefinerValue_MSOneNote: string;
    rf_ResultTypeRefinerValue_MSPowerPoint: string;
    rf_ResultTypeRefinerValue_MSProject: string;
    rf_ResultTypeRefinerValue_MSPublisher: string;
    rf_ResultTypeRefinerValue_SharePointSite: string;
    rf_ResultTypeRefinerValue_Task: string;
    rf_ResultTypeRefinerValue_TeamSite: string;
    rf_ResultTypeRefinerValue_Text: string;
    rf_ResultTypeRefinerValue_Video: string;
    rf_ResultTypeRefinerValue_Visio: string;
    rf_ResultTypeRefinerValue_Wiki: string;
    rf_ResultTypeRefinerValue_Webpage: string;
    rf_ResultTypeRefinerValue_MSWord: string;
    rf_ResultTypeRefinerValue_XML: string;
    rf_OtherValue: string;
    rf_ClearAll: string;
    cc_err_WebPartErrorMessageDisplayHeader: string;
    cc_err_DataErrorMessageDisplayHeader: string;
    cc_err_RenderingErrorMessageDisplayHeader: string;
    cc_err_TemplateNotFoundMessage: string;
    cc_err_HiddenWithNoResultsWarningMessage: string;
    cc_err_ShowMessageDetails: string;
    cc_err_HideMessageDetails: string;
    cc_err_CorrelationIdMessage: string;
    cc_err_CustomLocStringWarningDisplayHeaderFormat: string;
    cc_err_NoCustomLoadedLocStringWarningDisplayHeaderFormat: string;
    cc_err_MalformedHeader: string;
    cc_err_QueryThrottledDetailsHeader: string;
    cc_ValueRenderer_FileSizeKilobyte: string;
    cc_ValueRenderer_FileSizeMegabyte: string;
    cc_ValueRenderer_FileSizeGigabyte: string;
    cc_ValueRenderer_BooleanYes: string;
    cc_ValueRenderer_BooleanNo: string;
    qb_SortTab_ThenBy: string;
    qb_SortTab_ChangeRankingWhen: string;
    qb_SortTab_OrWhen: string;
    qb_TestQueryTab_ShowAdvanced: string;
    qb_TestQueryTab_HideAdvanced: string;
    recs_ControlTitle: string;
    recs_ShowDetails: string;
    recs_SaveLink: string;
    recs_Open: string;
    recs_Recommended: string;
    recs_Fillin: string;
    recs_LastEditedBy: string;
    recs_Location: string;
    recs_AltIcon: string;
    pkr_CatalogPickerMoreLink: string;
    pkr_CatalogPickerMoreLinkToolTip: string;
    pkr_CatalogPickerSelectLinkToolTip: string;
    item_CopyLink: string;
    item_Tooltip_CopyLink: string;
    item_Alt_Preview: string;
    hp_Tooltip_Close: string;
    hp_Size: string;
    hp_Views_Singular: string;
    hp_Views_Plural: string;
    hp_ViewsLifeTime: string;
    hp_Popularity: string;
    hp_PopularityLifeTimePlural: string;
    hp_PopularityLifeTimePluralAndRecentPlural: string;
    hp_PopularityLifeTimeSingular: string;
    hp_PopularityLifeTimeSingularAndRecentSingular: string;
    hp_PopularityLifeTimePluralAndRecentSingular: string;
    hp_Tooltip_ViewsLifeTime: string;
    hp_Tooltip_ViewsRecent: string;
    hp_ChangedByAuthorDate: string;
    hp_Tooltip_Views: string;
    hp_LastModified: string;
    hp_Tooltip_LastModified: string;
    hp_RecentlyEdited: string;
    hp_Tooltip_Contributors: string;
    hp_Authors2: string;
    hp_Authors3: string;
    hp_Authors4: string;
    hp_Authors5Singular: string;
    hp_Authors5Plural: string;
    hp_RecentlyEdited_eDiscovery: string;
    hp_Tooltip_RecentlyEdited_More: string;
    hp_RecentlyEdited_More: string;
    hp_ViewDuplicates: string;
    hp_Tooltip_ViewDuplicates: string;
    hp_ViewLibrary: string;
    hp_Tooltip_ViewLibrary: string;
    hp_Send_Title: string;
    hp_Send_Open: string;
    hp_Send_OpenInClient: string;
    hp_Send_OpenInWeb: string;
    hp_Send_ViewRelated: string;
    hp_Send: string;
    hp_Tooltip_Send: string;
    hp_OpenInClient: string;
    hp_Edit: string;
    hp_Follow: string;
    hp_NoData: string;
    hp_Tooltip_OpenInClient: string;
    hp_Alt_ImagePreview: string;
    hp_PictureDimensions: string;
    hp_PictureHeightWidth: string;
    hp_DateTaken: string;
    hp_SectionHeadings: string;
    hp_Alt_SiteLogo: string;
    hp_SiteDescription: string;
    hp_Open: string;
    hp_Tooltip_Open: string;
    hp_Tooltip_Follow: string;
    hp_Tooltip_StopFollowing: string;
    tprprt_Recent: string;
    tprprt_Lifetime: string;
    tprprt_excel_report_entrypoint: string;
    qb_token_Equals: string;
    qb_token_NotEquals: string;
    qb_token_GreaterThan: string;
    qb_token_LessThan: string;
    qb_token_Contains: string;
    qb_token_NotContains: string;
    qb_token_ContainsStartsWith: string;
    qb_token_StartsWith: string;
    qb_token_NotStartsWith: string;
    qb_token_SiteColletion: string;
    qb_token_Site: string;
    qb_token_Page: string;
    qb_token_Topic: string;
    qb_token_TopicIdWithChildren: string;
    qb_token_UserName: string;
    qb_token_PreferredContentLanguage: string;
    qb_token_Date: string;
    qb_token_SearchBoxQuery: string;
    qb_token_SearchTerms: string;
    qb_token_QueryString: string;
    qb_token_URLToken: string;
    qb_token_PageField: string;
    qb_token_SiteLocale: string;
    qb_token_DisplayLanguage: string;
    qb_token_OnlySites: string;
    qb_token_OnlyLists: string;
    qb_token_OnlyListItems: string;
    qb_path_SiteCollection: string;
    qb_path_Site: string;
    qb_path_Page: string;
    qb_path_List: string;
    qb_path_Catalog: string;
    qb_path_QueryString: string;
    qb_path_URL_token: string;
    qb_path_URL: string;
    qb_path_None: string;
    qb_ContentType_Article: string;
    qb_ContentType_Audio: string;
    qb_ContentType_DocSet: string;
    qb_ContentType_Page: string;
    qb_ContentType_Picture: string;
    qb_ContentType_Report: string;
    qb_ContentType_Task: string;
    qb_ContentType_Video: string;
    qb_ContentType_WikiPage: string;
    qb_PathControl_ChooseQueryString: string;
    qb_PathControl_ChooseURL: string;
    qb_PathControl_ChooseTag: string;
    qb_PathControl_ChooseTag_None: string;
    qb_PathControl_ChooseTag_ThisTag: string;
    qb_PathControl_ChooseTag_Topic: string;
    qb_PathControl_ChooseTag_SubTopic: string;
    qb_UserQuery_TypeQuery: string;
    qb_UserQuery_Properties: string;
    qb_UserQuery_AddToken: string;
    qb_UserQuery_ChooseContentType: string;
    qb_UserQuery_AddAdditionalFilter: string;
    qb_UserQuery_ChooseSort: string;
    qb_UserQuery_PickCatalog2: string;
    qb_UserQuery_ConfigureCatalog: string;
    qb_UserQuery_ManualValue: string;
    qb_UserQuery_SelectProperty: string;
    qb_UserQuery_SelectValue: string;
    qb_UserQuery_ShowAllProperties: string;
    qb_QueryType_UserQuery: string;
    qb_QueryType_Latest: string;
    qb_QueryType_ContentType: string;
    qb_QueryType_RecommendedItems: string;
    qb_QueryType_Popular: string;
    qb_QueryType_Video: string;
    qb_QueryType_Catalog: string;
    qb_Error_SourceIdInvalid: string;
    qb_Tab_FilterBy: string;
    qb_Tab_QueryHelper: string;
    qb_Tab_SortBy: string;
    qb_Tab_TestQuery: string;
    qb_Tab_Settings: string;
    qb_NotApplicable: string;
    qb_ComplexObject: string;
    qb_PreviewResult_NoTemplateVariables: string;
    qb_PreviewResult_CouldNotResolveTemplateVariables: string;
    qb_PreviewResult_ErrorExpandTokens: string;
    qb_PreviewResult_EmptyQuery: string;
    searchResult_NoResult: string;
    qb_CatalogPicker_Title: string;
    qb_UseDefinedSort: string;
    hp_Duration: string;
    hp_PeopleInVideo: string;
    hp_PostedBy: string;
    hp_VideoDescription: string;
    hp_GoToVideoPage: string;
    item_Community_Member: string;
    item_Community_Members: string;
    item_Community_MemberLabel: string;
    item_Community_MembersLabel: string;
    item_Reply: string;
    item_Replies: string;
    item_ReplyLabel: string;
    item_RepliesLabel: string;
    item_NoReplies: string;
    item_Like: string;
    item_Likes: string;
    item_NoLikes: string;
    item_RepliesAndLikes: string;
    item_MoreThan: string;
    item_DefaultTitle: string;
    item_BestReply: string;
    item_postDate: string;
    item_postAuthor: string;
    item_postAuthorDate: string;
    item_replyDate: string;
    item_replyAuthor: string;
    item_replyAuthorDate: string;
    item_Community_Discussion: string;
    item_Community_Discussions: string;
    item_Community_DiscussionLabel: string;
    item_Community_DiscussionsLabel: string;
    hp_Discussion: string;
    hp_DiscussionCategory: string;
    hp_Reply: string;
    hp_ReplyCategory: string;
    hp_PopularDiscussions: string;
    hp_OriginalPost: string;
    hp_RecentReplies: string;
    hp_ViewDiscussion: string;
    hp_ViewConversation: string;
    hp_Community: string;
    hp_VisitCommunity: string;
    hp_MicroBlog: string;
    item_MicroBlog_Reply: string;
    item_MicroBlog_Replies: string;
    item_MicroBlog_Like: string;
    item_MicroBlog_Likes: string;
    item_MicroBlog_NoReplies: string;
    item_MicroBlog_SeeFullConversation: string;
    item_MicroBlog_RootPostTitle: string;
    item_People_Responsibilities: string;
    item_People_Skills: string;
    item_People_PastProjects: string;
    item_People_Interests: string;
    item_People_Schools: string;
    item_People_Memberships: string;
    item_People_EditProfileLink: string;
    item_People_SelfSearchFrequency: string;
    item_People_SelfSearchFrequency_ViewsMonths_Singular: string;
    item_People_SelfSearchFrequency_ViewsMonths_Plural: string;
    item_People_SelfSearchFrequency_ViewsWeeks_Singular: string;
    item_People_SelfSearchFrequency_ViewsWeeks_Plural: string;
    item_People_SelfSearchKeywords: string;
    item_People_LastModified: string;
    item_People_NoPresenceAvailable: string;
    hp_PeopleItem_Skills: string;
    hp_PeopleItem_PastProjects: string;
    hp_PeopleItem_Interests: string;
    hp_PeopleItem_Schools: string;
    hp_PeopleItem_Summary: string;
    hp_PeopleItem_Memberships: string;
    hp_PeopleItem_Authorship: string;
    hp_PeopleItem_RelatedThrough: string;
    hp_PeopleItem_MoreItems: string;
    hp_PeopleItem_Related: string;
    hp_PeopleItem_NoInformationAvailable: string;
    hp_PeopleItem_ViewProfile: string;
    hp_WebPageItem_Results: string;
    hp_WebPageItem_MoreResults_Label: string;
    rs_Preferences: string;
    rs_Advanced: string;
    rs_NoResult: string;
    rs_SingleResultCount: string;
    rs_ResultCount: string;
    rs_ApproximateResultCount: string;
    rs_EdiscoveryTopResultCount: string;
    rs_UpscopeTitle: string;
    rs_Upscope: string;
    rs_DidYouMean: string;
    rs_Edit_ResultSourcesTitle: string;
    rs_Edit_ResultTypesTitle: string;
    rs_Edit_QueryRulesTitle: string;
    rs_Edit_ResultSourcesDescription: string;
    rs_Edit_ResultSources: string;
    rs_Edit_ResultTypesDescription: string;
    rs_Edit_ResultType: string;
    rs_Edit_DisplayTemplate: string;
    rs_Edit_QueryRulesDescription: string;
    rs_Edit_QueryRules: string;
    rs_Edit_PromotedTitle: string;
    rs_Edit_RankedTitle: string;
    rs_Edit_PromotedDescription: string;
    rs_Edit_RankedDescription: string;
    rs_Edit_ConfigureSearchResults: string;
    rs_Edit_ConfigureSearchResults_Link: string;
    rs_NoResultsTitle: string;
    rs_NoResultsMessageWhenSearchSkipped: string;
    rs_NoResultsSuggestions: string;
    rs_NoResultsSpelling: string;
    rs_NoResultsDifferentTerms: string;
    rs_NoResultsGeneralTerms: string;
    rs_NoResultsFewerTerms: string;
    rs_NoResultsRefiners: string;
    rs_NoResultsTips: string;
    rs_NoResultsTips_Link: string;
    us_NoTerm_Error: string;
    u_ScriptLoadFail: string;
    u_ScriptLoadFailForViewer: string;
    item_NoImageMessage: string;
    control_NoResultsDisplayMode: string;
    control_NoResultsEditMode: string;
    file_CSS: string;
    file_Help: string;
    file_Installer: string;
    file_JavaScript: string;
    file_Log: string;
    file_Mail: string;
    file_Access: string;
    file_Excel: string;
    file_InfoPath: string;
    file_OneNote: string;
    file_PowerPoint: string;
    file_Project: string;
    file_Publisher: string;
    file_SPDesigner: string;
    file_Visio: string;
    file_Word: string;
    file_XPS: string;
    file_Audio: string;
    file_RTF: string;
    file_Text: string;
    file_WebPage: string;
    file_XML: string;
    file_XSL: string;
    file_Zip: string;
    ct_Folder: string;
    ct_Image: string;
    file_Document: string;
    cc_sts_list_announcements: string;
    cc_sts_list_events: string;
    cc_sts_list_contacts: string;
    cc_sts_list_discussionboard: string;
    cc_sts_list_documentlibrary: string;
    cc_sts_listitem_documentlibrary: string;
    cc_sts_list_links: string;
    cc_sts_list: string;
    cc_sts_listitem: string;
    cc_sts_list_picturelibrary: string;
    cc_sts_listitem_picturelibrary: string;
    cc_sts_web: string;
    cc_sts_site: string;
    cc_sts_list_survey: string;
    cc_sts_list_tasks: string;
    cc_sts_list_xmlform: string;
    rs_SortDescription: string;
    rs_SocialDistanceSort: string;
    rs_LanguageDescription: string;
    rs_LanguagePreferences: string;
    rs_PreferredSearchLanguage: string;
    rs_MoreLanguages: string;
    rs_SearchScope: string;
    rs_SearchScopeTooltip: string;
    rs_SelectPreferredSearchLanguage: string;
    rs_SelectPreferredSearchLanguage_Language: string;
    edu_BookAuthor: string;
    edu_BookCategory: string;
    edu_BookRights: string;
    edu_BookReleaseDate: string;
    edu_BookHomePageLink: string;
    edu_Class: string;
    edu_AssignmentCategory: string;
    edu_AssignmentFormat: string;
    edu_AssignmentFormatNone: string;
    edu_AssignmentFormatOnlineFile: string;
    edu_AssignmentFormatOnlineQuiz: string;
    edu_AssignmentFormatInClass: string;
    edu_AssignmentFormatUnknown: string;
    edu_AssignmentMaxPoints: string;
    edu_DueDate: string;
    edu_ReadPermission: string;
    edu_PrintPermission: string;
    edu_WritePermission: string;
    edu_EnableScriptPermission: string;
    edu_AssignmentLabel: string;
    edu_LessonLabel: string;
    edu_BookLabel: string;
    rf_RefinementTitle_DMSDocAuthor: string;
    rf_RefinementTitle_DMSCategory: string;
    rf_RefinementTitle_EDiscSpecifyProperty: string;
    refconf_NoSampleValues: string;
    refconf_SortBy_Name: string;
    refconf_SortBy_Number: string;
    refconf_SortBy_Count: string;
    refconf_SortDirection_Ascending: string;
    refconf_SortDirection_Descending: string;
    refconf_Error_FailedToRestoreConfiguration: string;
    refconf_Section_SuggestedRefiners: string;
    refconf_Section_OtherRefiners: string;
    refconf_Section_Separator: string;
    refconf_SampleValuesDialog_Title: string;
    refconf_ResultsWithValues: string;
    refconf_TotalResults: string;
    refconf_FNT_ConfigurationLoadFailure: string;
    refconf_FNT_ConfigurationLoadWarning: string;
    refconf_FNT_ConfigurationLoadWarningNullResponse: string;
    refconf_FNT_InheritModeTermInfoSingularFormatString: string;
    refconf_FNT_DCR_InheritModeAnotherTermset: string;
    refconf_FNT_DCR_CustomRefiners: string;
    refconf_FNT_DCR_DescendantInfo_ChildTermsTotal: string;
    refconf_FNT_DCR_DescendantInfo_ChildTermsNotInheriting: string;
    refconf_FNT_DCR_DescendantInfo_ChildTermsStoppingInheriting: string;
    refconf_FNT_DCR_DescendantInfo_ChildTermsStoppingInheritingLinkAnchor: string;
    refconf_FNT_DCR_StopInheritingPopupTitle: string;
    refconf_FNT_DCR_InheritPopupTitle: string;
    refconf_FNT_DCR_RefinementConfigurationDialogTitle: string;
    refconf_FNT_DCR_LoadingConfiguration: string;
    refconf_FNT_DCR_DescendantStoppingInheritancePopupTitle: string;
    refconf_FNT_DCR_UseManualIntervals: string;
    refconf_FNT_DCR_RefinementPreviewPopupTitle: string;
    refconf_FNT_DCR_PropertiesForFriendly: string;
    refconf_FNT_DCR_PropertiesFor: string;
    refconf_FNT_DCR_TotalResultsTooltip: string;
    refconf_FNT_DCR_GeneratingPreview: string;
    refconf_DCR_Yes: string;
    refconf_DCR_No: string;
    refconf_DCR_FacetedNavigationProgressTitle: string;
    refconf_DCR_RefinementConfigurationDialogProgressTitle: string;
    refconf_DCR_RefinementConfigurationDialogManagedPropertyTooltip: string;
    refconf_DCR_RefinementConfigurationDialogManagedPropertyTooltipNoAliases: string;
    refconf_DCR_RefinementConfigurationDialogManagedPropertyTooltipSeparator: string;
    refconf_DCR_RefinementConfigurationDialog_TooManyRefiners_Warning: string;
    refconf_DCR_RefinementConfigurationDialog_TooManyRefiners_Error: string;
    refconf_DCR_RefinementConfigurationDialog_NoSuggestedRefiners_Warning: string;
    refconf_DCR_RefinementConfigurationDialog_InvalidSelectedRefiner_Warning: string;
    edisc_MultiValueFormat: string;
    edisc_NoSubject: string;
    edisc_ControlPagingFormat: string;
    hp_Summary: string;
    rf_DefaultMinutesLabels_min: string;
    rf_DefaultMinutesLabels_max: string;
    rf_DefaultMinutesLabels_range: string;
    rf_DefaultMinutesLabels_value: string;
    hp_NowDateTime_Today: string;
    hp_NowDateTime_Yesterday: string;
    hp_NowDateTime_MonthAgo: string;
    hp_NowDateTime_YearAgo: string;
    hp_NowDateTime_DaysAgo: string;
    hp_NowDateTime_MonthsAgo: string;
    hp_NowDateTime_YearsAgo: string;
    rs_UpScopeActionPhrase: string;
    control_Content_NoResultsDisplayMode: string;
    control_RollupPage_NoResultsDisplayMode: string;
    control_Content_NoResultsEditMode: string;
    item_Diagnostic_PictureSlot: string;
    item_Diagnostic_PathSlot: string;
    item_Diagnostic_Preview: string;
    item_Diagnostic_Value: string;
    item_Diagnostic_MappedManagedProperty: string;
    item_Diagnostic_PropertyMappings: string;
    item_Diagnostic_SlotNameFormat: string;
    item_Diagnostic_ItemTitleFormat: string;
    hp_Preview_LoadingImgAlt: string;
    rf_EDiscExTypeRefinerValue_Email: string;
    rf_EDiscExTypeRefinerValue_Contacts: string;
    rf_EDiscExTypeRefinerValue_Meetings: string;
    rf_EDiscExTypeRefinerValue_Tasks: string;
    rf_EDiscExTypeRefinerValue_Notes: string;
    rf_EDiscExTypeRefinerValue_Documents: string;
    rf_EDiscExTypeRefinerValue_Journal: string;
    rf_EDiscExTypeRefinerValue_IM: string;
    control_EDisc_Subject: string;
    control_EDisc_Recipients: string;
    control_EDisc_Sender: string;
    control_EDisc_DateSent: string;
    control_EDisc_Title: string;
    control_EDisc_Author: string;
    control_EDisc_DateModified: string;
    hp_EDisc_Cc: string;
    hp_EDisc_Bcc: string;
    item_Content_GenericNoImageSymbol: string;
    hp_EDisc_From: string;
    hp_EDisc_To: string;
    hp_EDisc_AttachmentsTooltip: string;
    control_EDisc_DateSentTooltip: string;
    rs_AlertMe: string;
    item_Generic_OpenCalloutTooltip: string;
    item_CommunityPortal_DetailsIntervals: string;
    item_CommunityPortal_DetailsMembers: string;
    item_CommunityPortal_DetailsDiscussions: string;
    item_CommunityPortal_DetailsReplies: string;
    item_CommunityPortal_Date: string;
    item_CommunityPortal_MoreDetails: string;
    ar_htv_Follow: string;
    ar_htv_StartFollowing: string;
    ar_htv_StopFollowing: string;
    ar_rec_NoResults: string;
    ar_Explanation: string;
    ar_htv_IsFollowed: string;
    ar_htv_IsNotFollowed: string;
    hp_Post: string;
    hp_Tooltip_Post: string;
    rs_PartialResultWarning_Line1: string;
    rs_PartialResultWarning_Line2: string;
    rs_HasParseExceptionWarning_Line1: string;
    rs_HasParseExceptionWarning_Line2: string
}
/**
 * Returns true if the value parameter is null or empty string 
 */
declare
function $isEmptyString(value: string): boolean
/**
 * Returns true if the value parameter is null or undefined 
 */
declare
function $isNull(value: any): boolean
/**
 * Returns true if the specified item is found in the specified array (uses '===' for comparing) 
 */
declare
function $isInArray(array: any[], item: any): boolean
/**
 * Returns true if the specified array is null or empty 
 */
declare
function $isEmptyArray(array: any[]): boolean
/**
 * (alias for SP.Utilities.HttpUtility.htmlEncode) 
 */
declare
function $htmlEncode(s: string): string
/**
 * (alias for SP.Utilities.HttpUtility.ecmaScriptStringLiteralEncode) 
 */
declare
function $scriptEncode(s: string): string
/**
 * (alias for SP.Utilities.HttpUtility.urlKeyValueEncode) 
 */
declare
function $urlKeyValueEncode(s: string): string
/**
 * (alias for SP.Utilities.HttpUtility.urlPathEncode) 
 */
declare
function $urlPathEncode(s: string): string
/**
 * Ensures that url has correct protocol or is a relative URL, and html-encodes it.
 * If URL is incorrect, returns empty string. 
 */
declare
function $urlHtmlEncode(s: string): stringdeclare
function $imgSrcUrl(p: any): stringdeclare
function $contentLineText(p: any): any
/**
 * Returns the ClientControl associated with specified DOM element (alias for Srch.U.getClientComponent) 
 */
declare
function $getClientControl(e: Element): Srch$ClientControl
/**
 * (alias for Srch.U.getResultObject) 
 */
declare
function $getResultItem(id: string): any
/**
 * (alias for Srch.U.setResultObject) 
 */
declare
function $setResultItem(id: string, resultObject: any): void
/**
 * (alias for Srch.U.getResultObject) 
 */
declare
function $getResultObject(id: string): any
/**
 * (alias for Srch.U.setResultObject) 
 */
declare
function $setResultObject(id: string, resultObject: any): void
/**
 * (alias for Srch.U.findResultObjectFromDOM) 
 */
declare
function $findResultObjectFromDOM(e: Element, type: string): voiddeclare
function $getItemValue(ctx: any, nameToLookup: string): anydeclare
function $getCachedItemValue(ctx: any, nameToLookup: string): anydeclare
function $includeScript(templateLink: string, relativeLink: string): voiddeclare
function $includeCSS(templateLink: string, scriptLink: string): voiddeclare
function $includeLanguageScript(templateLink: string, scriptLink: string): any
/**
 * Registers in system resources defined by the dictionary object (alias for Srch.U.registerResourceDictionary) 
 */
declare
function $registerResourceDictionary(locale: string, dict: {
    [key: string]: string
}): void
/**
 * Retrieves localized string with the specified id 
 */
declare
function $resource(id: string): string
/**
 * (calls Srch.U.setItemRenderWrapper) 
 */
declare
function $setItemWrapperCallback(renderCtx: any, itemWrapperFunction: any): void
/**
 * (calls Srch.U.addRenderContextCallback) 
 */
declare
function $addRenderContextCallback(renderCtx: any, itemWrapperFunction: any): void