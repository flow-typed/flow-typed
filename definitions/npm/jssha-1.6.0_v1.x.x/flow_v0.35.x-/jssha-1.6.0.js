// @flow
/**
 * Flowtype definitions for jssha-1.6.0
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface jsSHA$OutputFormatOptions {
    outputUpper?: boolean,
        b64Pad?: string
}

declare export interface jsSHA$jsSHA {

    /**
     * jsSHA is the workhorse of the library.  Instantiate it with the string to
     * be hashed as the parameter
     * @constructor  * 
     * @this  {jsSHA}
     * @param  The string to be hashed
     * @param  The format of srcString, HEX, TEXT, B64, or BYTES
     * @param  The text encoding to use to encode the source
    string
    */
    new(srcString: string, inputFormat: string, encoding?: string): jsSHA$jsSHA,

    /**
     * Returns the desired SHA hash of the string specified at instantiation
     * using the specified parameters
     * @param  The desired SHA variant (SHA-1, SHA-224,
    SHA-256, SHA-384, or SHA-512)
     * @param  The desired output formatting (B64, HEX, or BYTES)
     * @param  The number of rounds of hashing to be
    executed
     * @param  Hash list of output formatting options
     * @return  The string representation of the hash in the format
    specified
    */
    getHash(
            variant: string,
            format: string,
            numRounds?: number,
            outputFormatOpts?: jsSHA$OutputFormatOptions): string,

        /**
         * Returns the desired HMAC of the string specified at instantiation
         * using the key and variant parameter
         * @param  The key used to calculate the HMAC
         * @param  The format of key, HEX, TEXT, B64, or BYTES
         * @param  The desired SHA variant (SHA-1, SHA-224,
        SHA-256, SHA-384, or SHA-512)
         * @param  The desired output formatting
        (B64, HEX, or BYTES)
         * @param  associative array of output formatting options
         * @return  The string representation of the hash in the format
        specified
        */
        getHMAC(
            key: string,
            inputFormat: string,
            variant: string,
            outputFormat: string,
            outputFormatOpts?: jsSHA$OutputFormatOptions): string
}
declare var jsSHA: jsSHA$jsSHA;
declare module 'jssha' {
    declare module.exports: typeof jsSHA
}