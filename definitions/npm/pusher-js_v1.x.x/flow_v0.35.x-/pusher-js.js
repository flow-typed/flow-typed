/**
 * Flowtype definitions for pusher-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'pusher-js' {
    declare interface pusher$PusherStatic {
        new(apiKey: string, config?: pusher$Config): pusher$Pusher
    }

    declare interface pusher$Pusher {
        subscribe(name: string): pusher$Channel,
            subscribeAll(): void,
            unsubscribe(name: string): void,
            channel(name: string): pusher$Channel,
            allChannels(): pusher$Channel[],
            bind(eventName: string, callback: Function): pusher$Pusher,
            bind_all(callback: Function): pusher$Pusher,
            disconnect(): void,
            key: string,
            config: pusher$Config,
            channels: any,
            global_emitter: pusher$EventsDispatcher,
            sessionID: number,
            timeline: any,
            connection: pusher$ConnectionManager
    }

    declare interface pusher$Config {

        /**
         * Forces the connection to use encrypted transports.
         */
        encrypted?: boolean,

            /**
             * Endpoint on your server that will return the authentication signature needed for private channels.
             */
            authEndpoint?: string,

            /**
             * Defines how the authentication endpoint, defined using authEndpoint, will be called.
             * There are two options available: ajax and jsonp.
             */
            authTransport?: string,

            /**
             * Allows passing additional data to authorizers. Supports query string params and headers (AJAX only).
             * For example, following will pass foo=bar via the query string and baz: boo via headers:
             */
            auth?: pusher$AuthConfig,

            /**
             * Allows connecting to a different datacenter by setting up correct hostnames and ports for the connection.
             */
            cluster?: string,

            /**
             * Disables stats collection, so that connection metrics are not submitted to Pusherâ€™s servers.
             */
            disableStats?: boolean,

            /**
             * Specifies which transports should be used by Pusher to establish a connection.
             * Useful for applications running in controlled, well-behaving environments.
            Available transports: ws, wss, xhr_streaming, xhr_polling, sockjs.
            Additional transports may be added in the future and without adding them to this list, they will be disabled.
            */
            enabledTransports?: string[],

            /**
             * Specified which transports must not be used by Pusher to establish a connection.
             * This settings overwrites transports whitelisted via the enabledTransports options.
            Available transports: ws, wss, xhr_streaming, xhr_polling, sockjs.
            Additional transports may be added in the future and without adding them to this list, they will be enabled.
            */
            disabledTransports?: string[],

            /**
             * Ignores null origin checks for HTTP fallbacks. Use with care, it should be disabled only if necessary (i.e. PhoneGap).
             */
            ignoreNullOrigin?: boolean,

            /**
             * After this time (in miliseconds) without any messages received from the server,
             * a ping message will be sent to check if the connection is still working.
            Default value is is supplied by the server, low values will result in unnecessary traffic.
            */
            activityTimeout?: number,

            /**
             * Time before the connection is terminated after sending a ping message.
             * Default is 30000 (30s). Low values will cause false disconnections, if latency is high.
             */
            pongTimeout?: number,
            wsHost?: string,
            wsPort?: number,
            wssPort?: number,
            httpHost?: string,
            httpPort?: number,
            httpsPort?: number
    }

    declare interface pusher$AuthConfig {
        params?: {
                [key: string]: any
            },
            headers?: {
                [key: string]: any
            }
    }

    declare type pusher$GenericEventsDispatcher<Self>= {
        bind(eventName: string, callback: Function, context?: any): Self,
        bind_all(callback: Function): Self,
        unbind(eventName?: string, callback?: Function, context?: any): Self,
        unbind_all(eventName?: string, callback?: Function): Self,
        emit(eventName: string, data?: any): Self
    } & pusher$EventsDispatcher


    declare type pusher$Channel = {

        /**
         * Triggers an event 
         */
        trigger(eventName: string, data?: any): boolean,
        pusher: pusher$Pusher,
        name: string,
        subscribed: boolean,

        /**
         * Authenticates the connection as a member of the channel.
         * @param  
         * @param  
         */
        authorize(socketId: string, callback: (data: any) => void): void
    } & pusher$GenericEventsDispatcher


    declare interface pusher$EventsDispatcher {
        bind(eventName: string, callback: Function, context?: any): pusher$EventsDispatcher,
            bind_all(callback: Function): pusher$EventsDispatcher,
            unbind(
                eventName?: string,
                callback?: Function,
                context?: any): pusher$EventsDispatcher,
            unbind_all(eventName?: string, callback?: Function): pusher$EventsDispatcher,
            emit(eventName: string, data?: any): pusher$EventsDispatcher
    }

    declare type pusher$ConnectionManager = {
        key: string,
        options: any,
        state: string,
        connection: any,
        encrypted: boolean,
        timeline: any,
        connectionCallbacks: {
            message: (message: string) => void,
            ping: () => void,
            activity: () => void,
            error: (error: any) => void,
            closed: () => void
        },
        errorCallbacks: {
            ssl_only: () => void,
            refused: () => void,
            backoff: () => void,
            retry: () => void
        },
        handshakeCallbacks: {
            ssl_only: () => void,
            refused: () => void,
            backoff: () => void,
            retry: () => void,
            connected: (handshake: any) => void
        },

        /**
         * Establishes a connection to Pusher.
         * 
        Does nothing when connection is already established. See top-level doc
        to find events emitted on connection attempts.
        */
        connect(): void,

        /**
         * Sends raw data.
         * @param  
         */
        send(data: string): boolean,

        /**
         * Sends an event.
         * @param  
         * @param  
         * @param  * 
         * @returns  whether message was sent or not
         */
        send_event(name: string, data: string, channel: string): boolean,

        /**
         * Closes the connection. 
         */
        disconnect(): void,
        isEncrypted(): boolean
    } & pusher$GenericEventsDispatcher


    declare type pusher$PresenceChannel<T>= {
        members: pusher$Members<T >
    } & pusher$Channel


    declare interface pusher$Members<T>{

        /**
         * Returns member's info for given id.
         * 
        Resulting object containts two fields - id and info.
         * @param  
         * @return  member's info or null
        */
        get(id: number): T,

        /**
         * Calls back for each member in unspecified order.
         * @param  
         */
        each(callback: (member: any) => void): void,
        members: {
            [id: number]: pusher$UserInfo<T >
        },
        count: number,
        myID: number,
        me: pusher$UserInfo<T >
    }

    declare interface pusher$UserInfo<T>{
        id: number,
        info: T
    }
    declare var pusher: pusher$PusherStatic;
    declare module.exports: typeof pusher
}