/**
 * Flowtype definitions for n3
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'n3' {



    declare var npm$namespace$N3: {
        Parser: typeof N3$Parser,
        StreamParser: typeof N3$StreamParser,
        Writer: typeof N3$Writer,
        StreamWriter: typeof N3$StreamWriter,
        Store: typeof N3$Store,
    }
    declare type N3$ErrorCallback = (err: Error, result: any) => void;

    declare interface N3$Prefixes {
        [key: string]: string
    }

    declare interface N3$LiteralValue {
        value: string | number
    }

    declare interface N3$Triple {
        subject: string,
            predicate: string,
            object: string
    }

    declare interface N3$BlankTriple {
        predicate: string,
            object: string
    }

    declare function N3$Parser(options?: N3$ParserOptions): N3$N3Parser

    declare function N3$StreamParser(options?: N3$ParserOptions): N3$N3StreamParser

    declare interface N3$ParserOptions {
        format?: string,
            prefixes?: string[]
    }

    declare interface N3$ParseCallback {
        (error: Error, triple: N3$Triple, prefixes: N3$Prefixes): void
    }

    declare interface N3$Logger {
        (message?: any, ...optionalParams: any[]): void
    }

    declare interface N3$N3Parser {
        parse(input: string, callback: N3$ParseCallback): void,
            parse(subject: string, predicate: string, object: string): void,
            parse(triple: N3$Triple): void,
            parse(stream: fs.ReadStream, log: N3$Logger): void
    }

    declare type N3$N3StreamParser = {
        pipe(consumer: stream.Writable | N3$N3StreamWriter): void
    } & N3$N3Parser


    declare function N3$Writer(options: N3$WriterOptions): N3$N3Writer

    declare function N3$StreamWriter(options: N3$WriterOptions): N3$N3StreamWriter

    declare interface N3$N3Writer {
        addTriple(subject: string, predicate: string, object: string): void,
            addTriple(subject: string, predicate: string, object: string[]): void,
            addTriple(triple: N3$Triple): void,
            end(err?: N3$ErrorCallback, result?: any): void,
            blank(ns: string, name: string): string,
            blank(triple: N3$BlankTriple[]): string,
            list(triple: string[]): string[]
    }

    declare type N3$N3StreamWriter = {
        pipe(consumer: stream.Writable): void
    } & N3$N3Writer


    declare interface N3$WriterOptions {
        format?: string,
            prefixes?: N3$Prefixes
    }

    declare type N3$N3StoreWriter = {
        find(subject: string, predicate: string, object: string): N3$Triple[]
    } & N3$N3Writer


    declare function N3$Store(): N3$N3StoreWriter


    declare var npm$namespace$Util: {
        createLiteral: typeof Util$createLiteral,
        isIRI: typeof Util$isIRI,
        isLiteral: typeof Util$isLiteral,
        getLiteralValue: typeof Util$getLiteralValue,
        getLiteralLanguage: typeof Util$getLiteralLanguage,
        getLiteralType: typeof Util$getLiteralType,
        isBlank: typeof Util$isBlank,
        isPrefixedName: typeof Util$isPrefixedName,
        expandPrefixedName: typeof Util$expandPrefixedName,
    }
    declare function Util$createLiteral(value: any): string

    declare function Util$isIRI(value: string): boolean

    declare function Util$isLiteral(value: string): boolean

    declare function Util$getLiteralValue(value: string): string

    declare function Util$getLiteralLanguage(value: string): string

    declare function Util$getLiteralType(value: string): string

    declare function Util$isBlank(value: string): boolean

    declare function Util$isPrefixedName(name: string): boolean

    declare function Util$expandPrefixedName(name: string, prefixes: N3$Prefixes): string
    declare module.exports: typeof N3
}