// @flow
/**
 * Flowtype definitions for sammyjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare function Sammy(): Sammy$Application
declare var npm$namespace$Sammy: {
    Cache: typeof Sammy$Cache,
    DataCacheProxy: typeof Sammy$DataCacheProxy,
    DefaultLocationProxy: typeof Sammy$DefaultLocationProxy,
    EJS: typeof Sammy$EJS,
    Exceptional: typeof Sammy$Exceptional,
    Flash: typeof Sammy$Flash,
    Form: typeof Sammy$Form,
    Haml: typeof Sammy$Haml,
    Handlebars: typeof Sammy$Handlebars,
    Hogan: typeof Sammy$Hogan,
    Hoptoad: typeof Sammy$Hoptoad,
    JSON: typeof Sammy$JSON,
    Meld: typeof Sammy$Meld,
    MemoryCacheProxy: typeof Sammy$MemoryCacheProxy,
    Mustache: typeof Sammy$Mustache,
    NestedParams: typeof Sammy$NestedParams,
    OAuth2: typeof Sammy$OAuth2,
    PathLocationProxy: typeof Sammy$PathLocationProxy,
    Pure: typeof Sammy$Pure,
    PushLocationProxy: typeof Sammy$PushLocationProxy,
    Session: typeof Sammy$Session,
    Storage: typeof Sammy$Storage,
    Title: typeof Sammy$Title,
    Template: typeof Sammy$Template,
    Tmpl: typeof Sammy$Tmpl,
    addLogger: typeof Sammy$addLogger,
    log: typeof Sammy$log,
}
declare interface Sammy$SammyFunc {
    (): Sammy$Application,
    (selector: string): Sammy$Application,
    (handler: Function): Sammy$Application,
    (selector: string, handler: Function): Sammy$Application
}

declare export function Sammy$Cache(app: << UNKNOWN PARAM FORMAT >> , options: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$DataCacheProxy(initial: << UNKNOWN PARAM FORMAT >> , $element: << UNKNOWN PARAM FORMAT >> ): void

declare export var DataLocationProxy: Sammy$DataLocationProxy;

declare export function Sammy$DefaultLocationProxy(
    app: << UNKNOWN PARAM FORMAT >> ,
    run_interval_every: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$EJS(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Exceptional(app: << UNKNOWN PARAM FORMAT >> , errorReporter: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Flash(app: << UNKNOWN PARAM FORMAT >> ): void

declare export var FormBuilder: Sammy$FormBuilder;

declare export function Sammy$Form(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Haml(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Handlebars(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Hogan(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Hoptoad(app: << UNKNOWN PARAM FORMAT >> , errorReporter: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$JSON(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Meld(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$MemoryCacheProxy(initial: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Mustache(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$NestedParams(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$OAuth2(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$PathLocationProxy(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Pure(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$PushLocationProxy(app: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Session(app: << UNKNOWN PARAM FORMAT >> , options: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Storage(app: << UNKNOWN PARAM FORMAT >> ): void

declare export var Store: Sammy$Store;

declare export function Sammy$Title(): void

declare export function Sammy$Template(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$Tmpl(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$addLogger(logger: << UNKNOWN PARAM FORMAT >> ): void

declare export function Sammy$log(...args: any[]): void

declare export class Object {
    constructor(obj: any): this;
    escapeHTML(s: string): string;
    h(s: string): string;
    has(key: string): boolean;
    join(...args: any[]): string;
    keys(attributes_only?: boolean): string[];
    log(...args: any[]): void;
    toHTML(): string;
    toHash(): any;
    toString(include_functions?: boolean): string
}

declare export type Sammy$Application = {
    ROUTE_VERBS: string[],
    APP_EVENTS: string[],
    (appFn: Function),
    $element(selector?: string): JQuery,
    after(callback: Function): Sammy$Application,
    any(verb: string, path: string, callback: Function): void,
    around(callback: Function): Sammy$Application,
    before(callback: Function): Sammy$Application,
    before(options: any, callback: Function): Sammy$Application,
    bind(name: string, callback: Function): Sammy$Application,
    bind(name: string, data: any, callback: Function): Sammy$Application,
    bindToAllEvents(callback: Function): Sammy$Application,
    clearTemplateCache(): any,
    contextMatchesOptions(context: any, match_options: any, positive?: boolean): boolean,
    del(path: string, callback: Function): Sammy$Application,
    del(path: RegExp, callback: Function): Sammy$Application,
    destroy(): Sammy$Application,
    error(message: string, original_error: Error): void,
    eventNamespace(): string,
    get(path: string, callback: Function): Sammy$Application,
    get(path: RegExp, callback: Function): Sammy$Application,
    getLocation(): string,
    helper(name: string, method: Function): any,
    helpers(extensions: any): any,
    isRunning(): boolean,
    log(...params: any[]): void,
    lookupRoute(verb: string, path: string): any,
    mapRoutes(route_array: any[]): Sammy$Application,
    notFound(verb: string, path: string): any,
    post(path: string, callback: Function): Sammy$Application,
    post(path: RegExp, callback: Function): Sammy$Application,
    put(path: string, callback: Function): Sammy$Application,
    put(path: RegExp, callback: Function): Sammy$Application,
    refresh(): Sammy$Application,
    routablePath(path: string): string,
    route(verb: string, path: string, callback: Function): Sammy$Application,
    route(verb: string, path: RegExp, callback: Function): Sammy$Application,
    run(start_url?: string): Sammy$Application,
    runRoute(verb: string, path?: string, params?: any, target?: any): any,
    send(...params: any[]): void,
    setLocation(new_location: string): string,
    setLocationProxy(new_proxy: Sammy$DataLocationProxy): void,
    swap(content: any, callback: Function): any,
    templateCache(key: string, value: any): any,
    toString(): string,
    trigger(name: string, data?: any): Sammy$Application,
    unload(): Sammy$Application,
    use(...params: any[]): void,
    last_location: string[],
    oauthorize: string,
    requireOAuth(): void,
    requireOAuth(path?: string): void,
    requireOAuth(callback?: Function): void
} & Sammy$Object


declare export interface Sammy$DataLocationProxy {
    new(
        app: << UNKNOWN PARAM FORMAT >> ,
        run_interval_every?: << UNKNOWN PARAM FORMAT >> ): Sammy$DataLocationProxy,
    new(
        app: << UNKNOWN PARAM FORMAT >> ,
        data_name: << UNKNOWN PARAM FORMAT >> ,
        href_attribute: << UNKNOWN PARAM FORMAT >> ): Sammy$DataLocationProxy,
    fullPath(location_obj: << UNKNOWN PARAM FORMAT >> ): string,
        bind(): void,
        unbind(): void,
        setLocation(new_location: string): string,
        _startPolling(every: number): void
}

declare export type Sammy$EventContext = {
    new(
        app: << UNKNOWN PARAM FORMAT >> ,
        verb: << UNKNOWN PARAM FORMAT >> ,
        path: << UNKNOWN PARAM FORMAT >> ,
        params: << UNKNOWN PARAM FORMAT >> ,
        target: << UNKNOWN PARAM FORMAT >> ): void,
    $element(): JQuery,
    engineFor(engine: any): any,
    eventNamespace(): string,
    interpolate(
        content: any,
        data: any,
        engine: any,
        partials: << UNKNOWN PARAM FORMAT >> ): Sammy$EventContext,
    json(str: any): any,
    json(str: string): any,
    load(location: any, options?: any, callback?: Function): any,
    loadPartials(partials: << UNKNOWN PARAM FORMAT >> ): void,
    notFound(): any,
    partial(
        location: string,
        data?: any,
        callback?: Function,
        partials?: << UNKNOWN PARAM FORMAT >> ): Sammy$RenderContext,
    partials: any,
    params: any,
    redirect(...params: any[]): void,
    render(
        location: string,
        data?: any,
        callback?: Function,
        partials?: << UNKNOWN PARAM FORMAT >> ): Sammy$RenderContext,
    renderEach(
        location: any,
        data?: {
            name: string,
            data?: any
        }[],
        callback?: Function): Sammy$RenderContext,
    send(...params: any[]): Sammy$RenderContext,
    swap(contents: any, callback: Function): string,
    toString(): string,
    trigger(name: string, data?: any): Sammy$EventContext,
    name: any,
    title: any
} & Sammy$Object


declare export interface Sammy$FormBuilder {
    new(name: << UNKNOWN PARAM FORMAT >> , object: << UNKNOWN PARAM FORMAT >> ): void,
    checkbox(keypath: string, value: any, ...attributes: any[]): string,
        close(): string,
        hidden(keypath: string, ...attributes: any[]): string,
        label(keypath: string, content: any, ...attributes: any[]): string,
        open(...attributes: any[]): void,
        password(keypath: string, ...attributes: any[]): string,
        radio(keypath: string, value: any, ...attributes: any[]): string,
        select(keypath: string, options: any, ...attributes: any[]): string,
        submit(...attributes: any[]): string,
        text(keypath: string, ...attributes: any[]): string,
        textarea(keypath: string, ...attributes: any[]): string
}

declare export interface Sammy$GoogleAnalytics {
    new(app: << UNKNOWN PARAM FORMAT >> , tracker: << UNKNOWN PARAM FORMAT >> ): void,
    noTrack(): void,
        track(path: << UNKNOWN PARAM FORMAT >> ): void
}

declare export type Sammy$RenderContext = {
    new(event_context: << UNKNOWN PARAM FORMAT >> ): void,
    appendTo(selector: string): Sammy$RenderContext,
    collect(array: any[], callback: Function, now?: boolean): Sammy$RenderContext,
    interpolate(data: any, engine?: any, retain?: boolean): Sammy$RenderContext,
    load(location: string, options?: any, callback?: Function): Sammy$RenderContext,
    loadPartials(partials?: any): Sammy$RenderContext,
    next(content: any): void,
    partial(
        location: string,
        callback: Function,
        partials: << UNKNOWN PARAM FORMAT >> ): Sammy$RenderContext,
    partial(
        location: string,
        data: any,
        callback: Function,
        partials: << UNKNOWN PARAM FORMAT >> ): Sammy$RenderContext,
    prependTo(selector: string): Sammy$RenderContext,
    render(callback: Function): Sammy$RenderContext,
    render(location: string, data: any): Sammy$RenderContext,
    render(location: string, callback: Function, partials?: any): Sammy$RenderContext,
    render(location: string, data: any, callback: Function): Sammy$RenderContext,
    render(
        location: string,
        data: any,
        callback: Function,
        partials: any): Sammy$RenderContext,
    renderEach(
        location: string,
        name?: string,
        data?: any,
        callback?: Function): Sammy$RenderContext,
    replace(selector: string): Sammy$RenderContext,
    send(...params: any[]): Sammy$RenderContext,
    swap(callback?: Function): Sammy$RenderContext,
    then(callback: Function): Sammy$RenderContext,
    trigger(name: << UNKNOWN PARAM FORMAT >> , data: << UNKNOWN PARAM FORMAT >> ): void,
    wait(): void
} & Sammy$Object


declare export interface Sammy$StoreOptions {
    name?: string,
        element?: string,
        type?: string,
        memory?: any,
        data?: any,
        cookie?: any,
        local?: any,
        session?: any
}

declare export interface Sammy$Store {
    stores: any,
        new(options?: any): void,
        clear(key: string): any,
        clearAll(): void,
        each(callback: Function): boolean,
        exists(key: string): boolean,
        fetch(key: string, callback: Function): any,
        filter(callback: Function): boolean,
        first(callback: Function): boolean,
        get(key: string): any,
        isAvailable(): boolean,
        keys(): string[],
        load(key: string, path: string, callback: Function): void,
        set(key: string, value: any): any,
        Cookie(
            name: << UNKNOWN PARAM FORMAT >> ,
            element: << UNKNOWN PARAM FORMAT >> ,
            options: << UNKNOWN PARAM FORMAT >> ): void,
        Data(name: << UNKNOWN PARAM FORMAT >> , element: << UNKNOWN PARAM FORMAT >> ): void,
        LocalStorage(name: << UNKNOWN PARAM FORMAT >> , element: << UNKNOWN PARAM FORMAT >> ): void,
        Memory(name: << UNKNOWN PARAM FORMAT >> , element: << UNKNOWN PARAM FORMAT >> ): void,
        SessionStorage(name: << UNKNOWN PARAM FORMAT >> , element: << UNKNOWN PARAM FORMAT >> ): void,
        isAvailable(type: << UNKNOWN PARAM FORMAT >> ): void,
        Template(app: << UNKNOWN PARAM FORMAT >> , method_alias: << UNKNOWN PARAM FORMAT >> ): void
}
declare module 'sammy' {
    declare module.exports: typeof Sammy
}
declare interface JQueryStatic {
    sammy: Sammy$SammyFunc,
        log: Function
}