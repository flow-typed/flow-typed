/**
 * Flowtype definitions for ibm-mobilefirst
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
var ClientMessages: {
    [name: string]: string
};
declare
var npm$namespace$WLAuthorizationManager: {
    addCachedAuthorizationHeader: typeof WLAuthorizationManager$addCachedAuthorizationHeader,
    getAppIdentity: typeof WLAuthorizationManager$getAppIdentity,
    getAuthorizationScope: typeof WLAuthorizationManager$getAuthorizationScope,
    getCachedAuthorizationHeader: typeof WLAuthorizationManager$getCachedAuthorizationHeader,
    getDeviceIdentity: typeof WLAuthorizationManager$getDeviceIdentity,
    getUserIdentity: typeof WLAuthorizationManager$getUserIdentity,
    isAuthorizationRequired: typeof WLAuthorizationManager$isAuthorizationRequired,
    obtainAuthorizationHeader: typeof WLAuthorizationManager$obtainAuthorizationHeader,
    setAuthorizationPersistencePolicy: typeof WLAuthorizationManager$setAuthorizationPersistencePolicy,
}
declare
var ALWAYS: string;

declare
var NEVER: string;

declare interface WLAuthorizationManager$RequestObject {
    setRequestHeader: (header: string, value: string) => void
}

declare
function WLAuthorizationManager$addCachedAuthorizationHeader(
    request: WLAuthorizationManager$RequestObject): JQueryDeferred<WLAuthorizationManager$RequestObject >

    declare
function WLAuthorizationManager$getAppIdentity(): JQueryDeferred<any >

    declare
function WLAuthorizationManager$getAuthorizationScope(responseAuthenticationHeader: string): string


/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
 */
declare
function WLAuthorizationManager$getCachedAuthorizationHeader(): JQueryDeferred<any >


    /**
     * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
     */
    declare
function WLAuthorizationManager$getDeviceIdentity(): JQueryDeferred<any >


    /**
     * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
     */
    declare
function WLAuthorizationManager$getUserIdentity(): JQueryDeferred<any >

    declare
function WLAuthorizationManager$isAuthorizationRequired(responseStatus: number, responseAuthenticationHeader: string): boolean


/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<header, error>()
 */
declare
function WLAuthorizationManager$obtainAuthorizationHeader(scope: string): JQueryDeferred<any >


    /**
     * See WLAuthorizarionManager.NEVER and WLAuthorizarionManager.ALWAYS
     */
    declare
function WLAuthorizationManager$setAuthorizationPersistencePolicy(authorizationPersistencePolicy: string): voiddeclare class WLResourceRequest {
    constructor(url: string, method: string, timeout?: number): this;
    addHeader(name: string, value: string | number | boolean): void;
    getHeader(name: string): string;
    getHeaderNames(): string[];
    getHeaders(name: string): string[];
    getMethod(): string;
    getQueryParameters(): any;
    getTimeout(): number;
    getUrl(): string;
    send(content?: any): JQueryDeferred<any>;
    sendFormParameters(json: Object): JQueryDeferred<any>;
    setHeader(name: string, value: string | number | boolean): void;
    setHeaders(requestHeaders?: {
        [name: string]: string | string[]
    }): void;
    setQueryParameter(name: string, value: string | number | boolean | Object): void;
    setQueryParameters(parameters?: {
        [name: string]: string | number | boolean | Object
    }): void;
    setTimeout(requestTimeout: number): void;
    GET: string;
    POST: string;
    PUT: string;
    DELETE: string;
    HEAD: string;
    OPTIONS: string;
    TRACE: string;
    CONNECT: string
}