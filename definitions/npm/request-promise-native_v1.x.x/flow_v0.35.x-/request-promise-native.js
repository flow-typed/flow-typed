// @flow
/**
 * Flowtype definitions for request-promise-native
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'request-promise-native' {
    declare type requestPromise$RequestPromise = {
        then<TResult>(
            onfulfilled?: (value: any) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>,
        then<TResult>(
            onfulfilled?: (value: any) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => void): Promise<TResult>,
        catch (onrejected?: (reason: any) => any | PromiseLike<any>): Promise<any>,
        catch (onrejected?: (reason: any) => void): Promise<any>,
        promise(): Promise<any>,
        cancel(): void
    }

    declare type requestPromise$RequestPromiseOptions = {
        simple?: boolean,
        transform?: (
            body: any,
            response: http.IncomingMessage,
            resolveWithFullResponse?: boolean) => any,
        resolveWithFullResponse?: boolean
    }

    declare     export type requestPromise$OptionsWithUri = request.UriOptions & requestPromise$RequestPromiseOptions;

    declare     export type requestPromise$OptionsWithUrl = request.UrlOptions & requestPromise$RequestPromiseOptions;

    declare     export type requestPromise$Options = requestPromise$OptionsWithUri | requestPromise$OptionsWithUrl;
    declare     var requestPromise: request.RequestAPI<requestPromise$RequestPromise, requestPromise$RequestPromiseOptions, request.RequiredUriUrl>;
    declare module.exports: typeof requestPromise
}