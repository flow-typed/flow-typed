/**
 * Flowtype definitions for tilebelt
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare var tilebelt: tilebelt$TilebeltStatic;
declare interface tilebelt$TilebeltStatic {

    /**
     * Get a geojson representation of a tile
     * @name  tileToGeoJSON
     * @param  
     * @returns  * 
     * @example  * var poly = tileToGeoJSON([5, 10, 10])
    //=poly
    */
    tileToGeoJSON(tile: Array<number>): GeoJSON.Feature<GeoJSON.Polygon>,

        /**
         * Get the bbox of a tile
         * @name  tileToBBOX
         * @param  
         * @returns  bbox
         * @example  * var bbox = tileToBBOX([5, 10, 10])
        //=bbox
        */
        tileToBBOX(tile: Array<number>): Array<number>,

        /**
         * Get the tile for a point at a specified zoom level
         * @name  pointToTile
         * @param  
         * @param  
         * @param  
         * @returns  tile
         * @example  * var tile = pointToTile(1, 1, 20)
        //=tile
        */
        pointToTile(lon: number, lat: number, z: number): Array<number>,

        /**
         * Get the 4 tiles one zoom level higher
         * @name  getChildren
         * @param  
         * @returns  tiles
         * @example  * var tiles = getChildren([5, 10, 10])
        //=tiles
        */
        getChildren(tile: Array<number>): Array<Array<number >> ,

        /**
         * Get the tile one zoom level lower
         * @name  getParent
         * @param  
         * @returns  tile
         * @example  * var tile = getParent([5, 10, 10])
        //=tile
        */
        getParent(tile: Array<number>): Array<number>,

        /**
         * Get the 3 sibling tiles for a tile
         * @name  getSiblings
         * @param  
         * @returns  tiles
         * @example  * var tiles = getSiblings([5, 10, 10])
        //=tiles
        */
        getSiblings(tile: Array<number>): Array<Array<number >> ,

        /**
         * Check to see if an array of tiles contains a tiles siblings
         * @name  hasSiblings
         * @param  
         * @param  
         * @returns  * 
         * @example  * var tiles = [
        [0, 0, 5],
        [0, 1, 5],
        [1, 1, 5],
        [1, 0, 5]
        ]
        hasSiblings([0, 0, 5], tiles)
        //=boolean
        */
        hasSiblings(tile: Array<number>, tiles: Array<Array<number >> ): boolean,

        /**
         * Check to see if an array of tiles contains a particular tile
         * @name  hasTile
         * @param  
         * @param  
         * @returns  * 
         * @example  * var tiles = [
        [0, 0, 5],
        [0, 1, 5],
        [1, 1, 5],
        [1, 0, 5]
        ]
        hasTile(tiles, [0, 0, 5])
        //=boolean
        */
        hasTile(tiles: Array<Array<number >> , tile: Array<number>): boolean,

        /**
         * Check to see if two tiles are the same
         * @name  tilesEqual
         * @param  
         * @param  
         * @returns  * 
         * @example  * tilesEqual([0, 1, 5], [0, 0, 5])
        //=boolean
        */
        tilesEqual(tile1: Array<number>, tile2: Array<number>): boolean,

        /**
         * Get the quadkey for a tile
         * @name  tileToQuadkey
         * @param  
         * @returns  quadkey
         * @example  * var quadkey = tileToQuadkey([0, 1, 5])
        //=quadkey
        */
        tileToQuadkey(tile: Array<number>): string,

        /**
         * Get the tile for a quadkey
         * @name  quadkeyToTile
         * @param  
         * @returns  tile
         * @example  * var tile = quadkeyToTile('00001033')
        //=tile
        */
        quadkeyToTile(quadkey: string): Array<number>,

        /**
         * Get the smallest tile to cover a bbox
         * @name  bboxToTile
         * @param  
         * @returns  tile
         * @example  * var tile = bboxToTile([ -178, 84, -177, 85 ])
        //=tile
        */
        bboxToTile(bbox: Array<number>): Array<number>,

        /**
         * Get the precise fractional tile location for a point at a zoom level
         * @name  pointToTileFraction
         * @param  
         * @param  
         * @param  
         * @returns  tile fraction
        var tile = pointToTileFraction(30.5, 50.5, 15)
        //=tile
        */
        pointToTileFraction(lon: number, lat: number, z: number): Array<number >
}
declare module 'tilebelt' {
    declare module.exports: typeof tilebelt
}