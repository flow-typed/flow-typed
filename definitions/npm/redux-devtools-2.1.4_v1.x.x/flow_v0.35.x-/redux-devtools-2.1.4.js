// @flow
/**
 * Flowtype definitions for redux-devtools-2.1.4
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'redux-devtools' {
    declare     export function devTools(): Function
    declare     export function persistState(
        sessionId: any,
        stateDeserializer?: Function,
        actionDeserializer?: Function): Function
}
declare module 'redux-devtools/lib/react' {

    declare     export class DevTools mixins React.Component<any, any>{}
    declare     export interface DevToolsProps {
        monitor: Function,
            store: Store
    }
    declare     export interface Store {
        devToolStore: DevToolStore
    }
    declare     export class DevToolStore mixins React.Component<any, any>{
        dispatch: Function
    }
    declare     export class DebugPanel mixins React.Component<DebugPanelProps, any>{}
    declare     export interface DebugPanelProps {
        position?: string,
            zIndex?: number,
            fontSize?: string,
            overflow?: string,
            opacity?: number,
            color?: string,
            left?: boolean | number,
            right?: boolean | number,
            top?: boolean | number,
            bottom?: boolean | number,
            maxHeight?: string,
            maxWidth?: string,
            wordWrap?: string,
            boxSizing?: string,
            boxShadow?: string,
            getStyle?: () => DebugPanelProps
    }
    declare     export class LogMonitor mixins React.Component<LogMonitorProps, any>{}
    declare     export interface LogMonitorProps {
        computedStates?: ComputedState[],
            currentStateIndex?: number,
            monitorState?: MonitorState,
            stagedActions?: Action[],
            skippedActions?: boolean[],
            reset?: Function,
            commit?: Function,
            rollback?: Function,
            sweep?: Function,
            toggleAction?: Function,
            jumpToState?: Function,
            setMonitorState?: Function,
            select?: Function,
            visibleOnLoad?: boolean,
            theme?: Theme | string
    }
    declare     export interface ComputedState {
        state?: any,
            error?: string
    }
    declare     export interface MonitorState {
        isViaible?: boolean
    }
    declare     export interface Action {
        type: string
    }
    declare     export interface Theme {
        scheme: string,
            author: string,
            base00: string,
            base01: string,
            base02: string,
            base03: string,
            base04: string,
            base05: string,
            base06: string,
            base07: string,
            base08: string,
            base09: string,
            base0A: string,
            base0B: string,
            base0C: string,
            base0D: string,
            base0E: string,
            base0F: string
    }
}