// @flow
/**
 * Flowtype definitions for opentype
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$opentypejs: {
    load: typeof opentypejs$load,
    loadSync: typeof opentypejs$loadSync,
    parse: typeof opentypejs$parse,
}
declare type opentypejs$Contour = {} & Array


declare class Encoding {
    charset: string;
    charToGlyphIndex(c: string): number;
    font: opentypejs$Font
}

declare interface opentypejs$Field {
    name: string,
        type: string,
        value: any
}

declare class Font {
    constructor(options: opentypejs$FontOptions): this;
    ascender: number;
    cffEncoding: opentypejs$Encoding;
    charToGlyph(c: string): opentypejs$Glyph;
    charToGlyphIndex(s: string): number;
    descender: number;
    download(): void;
    draw(
        ctx: CanvasRenderingContext2D,
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options?: opentypejs$RenderOptions): void;
    drawMetrics(
        ctx: CanvasRenderingContext2D,
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options?: opentypejs$RenderOptions): void;
    drawPoints(
        ctx: CanvasRenderingContext2D,
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options?: opentypejs$RenderOptions): void;
    encoding: opentypejs$Encoding;
    forEachGlyph(
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options: opentypejs$RenderOptions,
        callback: {
            (glyph: opentypejs$Glyph, x: number, y: number, fontSize: number, options?: opentypejs$RenderOptions): void
        }): void;
    getEnglishName(name: string): string;
    getGposKerningValue: {
        (leftGlyph: opentypejs$Glyph | number, rightGlyph: opentypejs$Glyph | number): number
    };
    getKerningValue(
        leftGlyph: opentypejs$Glyph | number,
        rightGlyph: opentypejs$Glyph | number): number;
    getPath(
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options?: opentypejs$RenderOptions): opentypejs$Path;
    getPaths(
        text: string,
        x: number,
        y: number,
        fontSize: number,
        options?: opentypejs$RenderOptions): opentypejs$Path[];
    glyphs: opentypejs$GlyphSet;
    glyphIndexToName(gid: number): string;
    glyphNames: opentypejs$GlyphNames;
    hasChar(c: string): boolean;
    kerningPairs: opentypejs$KerningPairs;
    names: opentypejs$FontNames;
    nameToGlyph(name: string): opentypejs$Glyph;
    nameToGlyphIndex(name: string): number;
    numberOfHMetrics: number;
    numGlyphs: number;
    outlinesFormat: string;
    stringToGlyphs(s: string): opentypejs$Glyph[];
    tables: {
        [tableName: string]: opentypejs$Table
    };
    toArrayBuffer(): ArrayBuffer;
    toBuffer(): ArrayBuffer;
    toTables(): opentypejs$Table;
    unitsPerEm: number;
    validate(): void
}

declare interface opentypejs$FontNames {
    copyright: opentypejs$LocalizedName,
        description: opentypejs$LocalizedName,
        designer: opentypejs$LocalizedName,
        designerURL: opentypejs$LocalizedName,
        fontFamily: opentypejs$LocalizedName,
        fontSubfamily: opentypejs$LocalizedName,
        fullName: opentypejs$LocalizedName,
        license: opentypejs$LocalizedName,
        licenseURL: opentypejs$LocalizedName,
        manufacturer: opentypejs$LocalizedName,
        manufacturerURL: opentypejs$LocalizedName,
        postScriptName: opentypejs$LocalizedName,
        trademark: opentypejs$LocalizedName,
        version: opentypejs$LocalizedName
}

declare interface opentypejs$FontOptions {
    copyright?: string,
        ascender?: number,
        descender?: number,
        description?: string,
        designer?: string,
        designerURL?: string,
        empty?: boolean,
        familyName?: string,
        fullName?: string,
        glyphs?: opentypejs$Glyph[] | opentypejs$GlyphSet,
        license?: string,
        licenseURL?: string,
        manufacturer?: string,
        manufacturerURL?: string,
        postScriptName?: string,
        styleName?: string,
        unitsPerEm?: number,
        trademark?: string,
        version?: string
}

declare class Glyph {
    constructor(options: opentypejs$GlyphOptions): this;
    addUnicode(unicode: number): void;
    advanceWidth: number;
    bindConstructorValues(options: opentypejs$GlyphOptions): void;
    draw(ctx: CanvasRenderingContext2D, x: number, y: number, fontSize: number): void;
    drawMetrics(ctx: CanvasRenderingContext2D, x: number, y: number, fontSize: number): void;
    drawPoints(ctx: CanvasRenderingContext2D, x: number, y: number, fontSize: number): void;
    getContours(): opentypejs$Contour[];
    getMetrics(): opentypejs$Metrics;
    getPath(x: number, y: number, fontSize: number): opentypejs$Path;
    name: string;
    path: opentypejs$Path | {
        (): opentypejs$Path
    };
    unicode: number;
    unicodes: number[]
}

declare interface opentypejs$GlyphOptions {
    advanceWidth?: number,
        index?: number,
        font?: opentypejs$Font,
        name?: string,
        path?: opentypejs$Path,
        unicode?: number,
        unicodes?: number[],
        xMax?: number,
        xMin?: number,
        yMax?: number,
        yMin?: number
}

declare class GlyphNames {
    constructor(post: opentypejs$Post): this;
    glyphIndexToName(gid: number): string;
    nameToGlyphIndex(name: string): number
}

declare class GlyphSet {
    constructor(font: opentypejs$Font, glyphs: opentypejs$Glyph[] | {
        (): opentypejs$Glyph
    }[]): this;
    get(index: number): opentypejs$Glyph;
    length: number;
    push(index: number, loader: {
        (): opentypejs$Glyph
    }): void
}

declare interface opentypejs$KerningPairs {
    [pair: string]: number
}

declare function opentypejs$load(url: string, callback: {
    (error: any, font?: opentypejs$Font): void
}): void

declare function opentypejs$loadSync(url: string): opentypejs$Font

declare interface opentypejs$LocalizedName {
    [lang: string]: string
}

declare interface opentypejs$Metrics {
    leftSideBearing: number,
        rightSideBearing?: number,
        xMax: number,
        xMin: number,
        yMax: number,
        yMin: number
}

declare function opentypejs$parse(buffer: any): opentypejs$Font

declare class Path {
    constructor(): this;
    bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): void;
    close: () => void;
    closePath(): void;
    commands: opentypejs$PathCommand[];
    curveTo: (x1: number, y1: number, x2: number, y2: number, x: number, y: number) => void;
    draw(ctx: CanvasRenderingContext2D): void;
    extend(pathOrCommands: opentypejs$Path | opentypejs$PathCommand[]): void;
    lineTo(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    quadraticCurveTo(x1: number, y1: number, x: number, y: number): void;
    quadTo: (x1: number, y1: number, x: number, y: number) => void;
    toPathData(decimalPlaces: number): string;
    toSVG(decimalPlaces: number): string;
    unitsPerEm: number
}

declare interface opentypejs$PathCommand {
    type: string,
        x?: number,
        y?: number,
        x1?: number,
        y1?: number,
        x2?: number,
        y2?: number
}

declare interface opentypejs$Point {
    lastPointOfContour?: boolean
}

declare interface opentypejs$Post {
    glyphNameIndex?: number[],
        isFixedPitch: number,
        italicAngle: number,
        maxMemType1: number,
        minMemType1: number,
        maxMemType42: number,
        minMemType42: number,
        names?: string[],
        numberOfGlyphs?: number,
        offset?: number[],
        underlinePosition: number,
        underlineThickness: number,
        version: number
}

declare interface opentypejs$RenderOptions {
    kerning: boolean
}

declare interface opentypejs$Table {
    [propName: string]: any,
    encode(): number[],
        fields: opentypejs$Field[],
        sizeOf(): number,
        tables: opentypejs$Table[],
        tableName: string
}
declare var opentype: typeof opentypejs;
declare module 'opentype.js' {
    declare module.exports: typeof opentype
}