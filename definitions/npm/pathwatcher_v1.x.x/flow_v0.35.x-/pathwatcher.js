/**
 * Flowtype definitions for pathwatcher
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface PathWatcher$IFileStatic {
    new(path: string, symlink?: boolean): PathWatcher$IFile
}

declare interface PathWatcher$IFile {
    realPath: string,
        path: string,
        symlink: boolean,
        cachedContents: string,
        digest: string,
        handleEventSubscriptions(): void,
        setPath(path: string): void,
        getPath(): string,
        getRealPathSync(): string,
        getBaseName(): string,
        write(text: string): void,
        readSync(flushCache: boolean): string,
        read(flushCache?: boolean): Q.Promise<string>,
        existsSync(): boolean,
        setDigest(contents: string): void,
        getDigest(): string,
        writeFileWithPrivilegeEscalationSync(filePath: string, text: string): void,
        handleNativeChangeEvent(eventType: string, eventPath: string): void,
        detectResurrectionAfterDelay(): void,
        detectResurrection(): void,
        subscribeToNativeChangeEvents(): void,
        unsubscribeFromNativeChangeEvents(): void
}

declare interface PathWatcher$IDirectoryStatic {
    new(path: string, symlink?: boolean): PathWatcher$IDirectory
}

declare interface PathWatcher$IDirectory {
    realPath: string,
        path: string,
        symlink: boolean,
        getBaseName(): string,
        getPath(): void,
        getRealPathSync(): string,
        contains(pathToCheck: string): boolean,
        relativize(fullPath: string): string,
        getEntriesSync(): any[],
        getEntries(callback: Function): void,
        subscribeToNativeChangeEvents(): void,
        unsubscribeFromNativeChangeEvents(): void,
        isPathPrefixOf(prefix: string, fullPath: string): boolean
}
declare module 'pathwatcher' {
    declare type IHandleWatcher = {
        onEvent(event: any, filePath: any, oldFilePath: any): any,
        start(): void,
        closeIfNoListener(): void,
        close(): void
    }
    declare interface IPathWatcher {
        isWatchingParent: boolean,
            path: any,
            handleWatcher: IHandleWatcher,
            close(): void
    }
    declare function watch(path: string, callback: Function): IPathWatcher
    declare function closeAllWatchers(): void
    declare function getWatchedPaths(): string[]
    declare var File: PathWatcher$IFileStatic;
    declare var Directory: PathWatcher$IDirectoryStatic;
}