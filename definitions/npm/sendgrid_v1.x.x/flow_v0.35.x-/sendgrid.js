/**
 * Flowtype definitions for sendgrid
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface Sendgrid$UriParts {
    protocol: string,
        host: string,
        port: string,
        endpoint: string
}

declare export interface Sendgrid$Options {
    protocol?: string,
        host?: string,
        port?: string,
        endpoint?: string,
        uri?: string,
        proxy?: string,
        web?: {
            pool?: any
        }
}

declare export interface Sendgrid$OptionsExport {
    uriParts: Sendgrid$UriParts,
        uri: string,
        proxy?: string,
        web?: {
            pool?: any
        }
}

declare export interface Sendgrid$EmailOptions {
    to?: any,
        toname?: string,
        from?: string,
        fromname?: string,
        subject?: string,
        text?: string,
        html?: string,
        bcc?: any,
        replyto?: string,
        date?: Date,
        headers?: {
            [key: string]: string
        },
        files?: Sendgrid$FileHandlerOptions[],
        smtpapi?: SmtpApi.Instance
}

declare export class Email {
    to: any;
    toname: string;
    from: string;
    fromname: string;
    subject: string;
    text: string;
    html: string;
    bcc: any;
    replyto: string;
    date: Date;
    headers: {
        [key: string]: string
    };
    files: Sendgrid$FileHandler[];
    smtpapi: SmtpApi.Instance;
    constructor(): this;
    constructor(options: Sendgrid$EmailOptions): this;
    new(options: Sendgrid$EmailOptions): Sendgrid$Email;
    addTo(address: string): Sendgrid$Email;
    addHeader(type: string, value: string): Sendgrid$Email;
    addSubstitution(type: string, value: string): Sendgrid$Email;
    addSubstitution(type: string, value: string[]): Sendgrid$Email;
    addSection(section: {
        [key: string]: string
    }): Sendgrid$Email;
    addUniqueArg(uarg: {
        [key: string]: string
    }): Sendgrid$Email;
    addCategory(category: string): Sendgrid$Email;
    addFilter(filter: string, command: string, value: number): Sendgrid$Email;
    addFilter(filter: string, command: string, value: string): Sendgrid$Email;
    addFile(file: Sendgrid$FileHandlerOptions): Sendgrid$Email;
    addSmtpapiTo(to: string): Sendgrid$Email;
    addCc(cc: string): Sendgrid$Email;
    addBcc(bcc: string): Sendgrid$Email;
    addSendEachAt(send_each_at: number): Sendgrid$Email;
    setFrom(address: string): Sendgrid$Email;
    setSubject(subject: string): Sendgrid$Email;
    setText(text: string): Sendgrid$Email;
    setHtml(html: string): Sendgrid$Email;
    setHeaders(headers: {
        [key: string]: string
    }): Sendgrid$Email;
    setSubstitutions(substitutions: {
        [key: string]: string[]
    }): Sendgrid$Email;
    setSections(sections: {
        [key: string]: string
    }): Sendgrid$Email;
    setUniqueArgs(uargs: {
        [key: string]: string
    }): Sendgrid$Email;
    setCategories(categories: string[]): Sendgrid$Email;
    setFilters(filters: any): Sendgrid$Email;
    setSmtpapiTos(tos: string[]): Sendgrid$Email;
    setTos(tos: string[]): Sendgrid$Email;
    setFromName(fromname: string): Sendgrid$Email;
    setCcs(ccs: string[]): Sendgrid$Email;
    setBccs(bcc: string[]): Sendgrid$Email;
    setDate(date: string): Sendgrid$Email;
    setSendAt(send_at: number): Sendgrid$Email;
    setSendEachAt(send_each_at: number[]): Sendgrid$Email;
    setASMGroupID(val: number): Sendgrid$Email
}

declare export interface Sendgrid$FileHandlerOptions {
    filename?: string,
        contentType?: string,
        cid?: string,
        path?: string,
        url?: string,
        content?: any
}

declare export class FileHandler {
    filename: string;
    contentType: string;
    cid: string;
    type: string;
    content: string;
    path: string;
    url: string;
    constructor(options: Sendgrid$FileHandlerOptions): this;
    loadContent(callback: Sendgrid$HandlerCallback): void;
    handlers: {
        content: Sendgrid$Handler,
        path: Sendgrid$Handler,
        url: Sendgrid$Handler,
        none: Sendgrid$Handler
    }
}

declare export interface Sendgrid$Handler {
    (file: Sendgrid$FileHandler, callback: Sendgrid$HandlerCallback): void
}

declare export interface Sendgrid$HandlerCallback {
    (hasError: boolean, error: Error): void,
    (hasError: boolean, error: string): void
}

declare interface Sendgrid$Constructor {
    (api_user: string, api_key: string, options?: Sendgrid$Options): Sendgrid$Instance,
    (api_key: string, option?: Sendgrid$Options): Sendgrid$Instance,
    new(
        api_user: string,
        api_key: string,
        options?: Sendgrid$Options): Sendgrid$Instance,
    new(api_key: string, options?: Sendgrid$Options): Sendgrid$Instance
}

declare export interface Sendgrid$Instance {
    version: string,
        api_user: string,
        api_key: string,
        smtpapi: SmtpApi.Instance,
        options: Sendgrid$OptionsExport,
        Email: typeof Email,
        send(
            email: Sendgrid$EmailOptions,
            callback: (err: Error, json: Object) => any): void,
        send(email: Sendgrid$Email, callback: (err: Error, json: Object) => any): void
}
declare module 'sendgrid' {
    declare var ctor: Sendgrid$Constructor;
    declare module.exports: typeof ctor
}