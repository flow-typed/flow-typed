/**
 * Flowtype definitions for js-data-1.5.4
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JSData$JSDataPromise<R>{
    then<U>(
        onFulfilled?: (value: R) => U | JSData$JSDataPromise<U>,
        onRejected?: (error: any) => U | JSData$JSDataPromise<U>): JSData$JSDataPromise<U>,
    catch<U>(
        onRejected?: (error: any) => U | JSData$JSDataPromise<U>): JSData$JSDataPromise<U>,
    finally<U>(finallyCb?: () => U): JSData$JSDataPromise<U >
}

declare interface JSData$DS {
    new(config?: JSData$DSConfiguration): JSData$DS,
    errors: JSData$DSErrors,
        definitions: any,
        adapters: any,
        defaults: JSData$DSConfiguration,
        create<T>(
            resourceName: string,
            attrs: Object,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        destroy(
            resourceName: string,
            id: string | number,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<any>,
        destroyAll(
            resourceName: string,
            params?: JSData$DSFilterArg,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<any>,
        find<T>(
            resourceName: string,
            id: string | number,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        findAll<T>(
            resourceName: string,
            params?: JSData$DSFilterArg,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
        loadRelations<T>(
            resourceName: string,
            idOrInstance: string | number | Object,
            relations: string | Array<string>,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        update<T>(
            resourceName: string,
            id: string | number,
            attrs: Object,
            options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        updateAll<T>(
            resourceName: string,
            attrs: Object,
            params?: JSData$DSFilterArg,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
        reap(
            resourceName: string,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        refresh<T>(
            resourceName: string,
            id: string | number,
            options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        save<T>(
            resourceName: string,
            id: string | number,
            options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
        changeHistory(resourceName: string, id?: string | number): Array<Object>,
        changes(resourceName: string, id: string | number): Object,
        compute(resourceName: string, idOrInstance: number | string | Object): void,
        createInstance<T>(
            resourceName: string,
            attrs?: T,
            options?: JSData$DSAdapterOperationConfiguration): T & JSData$DSInstanceShorthands<T>,
        digest(): void,
        eject<T>(
            resourceName: string,
            id: string | number,
            options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
        ejectAll<T>(
            resourceName: string,
            params: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
        filter<T>(
            resourceName: string,
            params: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
        get<T>(
            resourceName: string,
            id: string | number,
            options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
        getAll<T>(
            resourceName: string,
            ids?: Array<string | number>): Array<T & JSData$DSInstanceShorthands<T >> ,
        hasChanges(resourceName: string, id: string | number): boolean,
        inject<T>(
            resourceName: string,
            item: T,
            options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
        inject<T>(
            resourceName: string,
            items: Array<T>,
            options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
        is(resourceName: string, object: Object): boolean,
        lastModified(resourceName: string, id?: string | number): number,
        lastSaved(resourceName: string, id?: string | number): number,
        link<T>(
            resourceName: string,
            id: string | number,
            relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
        linkAll<T>(
            resourceName: string,
            params: JSData$DSFilterArg,
            relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
        linkInverse<T>(
            resourceName: string,
            id: string | number,
            relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
        previous<T>(
            resourceName: string,
            id: string | number): T & JSData$DSInstanceShorthands<T>,
        revert<T>(
            resourceName: string,
            id: string | number): T & JSData$DSInstanceShorthands<T>,
        unlinkInverse<T>(
            resourceName: string,
            id: string | number,
            relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
        defineResource<T>(
            resourceNameOrDefinition: string | JSData$DSResourceDefinitionConfiguration): JSData$DSResourceDefinition<T>,
        defineResource<T, TActions>(
            resourceNameOrDefinition: string | JSData$DSResourceDefinitionConfiguration): JSData$DSResourceDefinition<T>& TActions,
        registerAdapter(
            adapterId: string,
            adapter: JSData$IDSAdapter,
            options?: {
                default: boolean
            }): void
}

declare type JSData$DSConfiguration = {
    actions?: Object,
    allowSimpleWhere?: boolean,
    basePath?: string,
    bypassCache?: boolean,
    cacheResponse?: boolean,
    defaultAdapter?: string,
    defaultFilter?: (
        collection: Array<any>,
        resourceName: string,
        params: JSData$DSFilterArg,
        options: JSData$DSConfiguration) => Array<any>,
    eagerEject?: boolean,
    endpoint?: string,
    error?: boolean | ((message?: any, ...optionalParams: any[]) => void),
    fallbackAdapters?: Array<string>,
    findAllFallbackAdapters?: Array<string>,
    findAllStrategy?: string,
    findBelongsTo?: boolean,
    findFallbackAdapters?: Array<string>,
    findHasOne?: boolean,
    findHasMany?: boolean,
    findInverseLinks?: boolean,
    findStrategy?: string,
    idAttribute?: string,
    ignoredChanges?: Array<RegExp | string>,
    keepChangeHistory?: boolean,
    loadFromServer?: boolean,
    log?: boolean | ((message?: any, ...optionalParams: any[]) => void),
    maxAge?: number,
    notify?: boolean,
    reapAction?: string,
    reapInterval?: number,
    resetHistoryOnInject?: boolean,
    strategy?: string,
    upsert?: boolean,
    useClass?: boolean,
    useFilter?: boolean
} & JSData$IDSResourceLifecycleEventHandlers


declare type JSData$DSAdapterOperationConfiguration = {
    adapter?: string,
    params?: {
        [paramName: string]: string | number | boolean
    }
} & JSData$DSConfiguration


declare type JSData$DSSaveConfiguration = {
    changesOnly?: boolean
} & JSData$DSAdapterOperationConfiguration


declare type JSData$DSResourceDefinitionConfiguration = {
    name: string,
    computed?: any,
    methods?: any,
    relations?: {
        hasMany?: Object,
        hasOne?: Object,
        belongsTo?: Object
    }
} & JSData$DSConfiguration


declare type JSData$DSResourceDefinition<T>= {
    create<TInject>(
        attrs: TInject,
        options?: JSData$DSConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    destroy(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    destroyAll(
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    find(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    findAll(
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    loadRelations(
        idOrInstance: string | number | Object,
        relations: string | Array<string>,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    update(
        id: string | number,
        attrs: Object,
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    updateAll(
        attrs: Object,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    reap(options?: JSData$DSConfiguration): JSData$JSDataPromise<void>,
    refresh(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    save(
        id: string | number,
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    changeHistory(id?: string | number): Array<Object>,
    changes(id: string | number): Object,
    compute(idOrInstance: number | string | Object): void,
    createInstance<TInject>(
        attrs?: TInject,
        options?: JSData$DSAdapterOperationConfiguration): T & JSData$DSInstanceShorthands<T>,
    digest(): void,
    eject(
        id: string | number,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    ejectAll(
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    filter(
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    get(
        id: string | number,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    getAll(ids?: Array<string | number>): Array<T & JSData$DSInstanceShorthands<T >> ,
    hasChanges(id: string | number): boolean,
    inject(item: T, options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    inject(
        items: Array<T>,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    is(object: Object): boolean,
    lastModified(id?: string | number): number,
    lastSaved(id?: string | number): number,
    link(
        id: string | number,
        relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
    linkAll(
        params: JSData$DSFilterArg,
        relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
    linkInverse(
        id: string | number,
        relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
    previous(id: string | number): T & JSData$DSInstanceShorthands<T>,
    unlinkInverse(
        id: string | number,
        relations?: Array<string>): T & JSData$DSInstanceShorthands<T >
} & JSData$DSResourceDefinitionConfiguration


declare
export interface JSData$DSInstanceShorthands<T>{
    DSCompute(): void,
    DSRefresh(
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSSave(
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSUpdate(
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSDestroy(options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    DSCreate(
        options?: JSData$DSConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSLoadRelations(
        relations: string | Array<string>,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSChangeHistory(): Array<Object>,
    DSChanges(): Object,
    DSHasChanges(): boolean,
    DSLastModified(): number,
    DSLastSaved(): number,
    DSLink(relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
    DSLinkInverse(relations?: Array<string>): T & JSData$DSInstanceShorthands<T>,
    DSPrevious(): T & JSData$DSInstanceShorthands<T>,
    DSUnlinkInverse(relations?: Array<string>): T & JSData$DSInstanceShorthands<T >
}

declare interface JSData$DSFilterParams {
    where?: Object,
        limit?: number,
        skip?: number,
        offset?: number,
        orderBy?: string | Array<string>| Array<Array<string >> ,
        sort?: string | Array<string>| Array<Array<string >>
}

declare type JSData$DSFilterArg = JSData$DSFilterParams | Object;

declare interface JSData$IDSResourceLifecycleValidateEventHandlers {
    beforeValidate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void,
        validate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void,
        afterValidate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void
}

declare interface JSData$IDSResourceLifecycleCreateEventHandlers {
    beforeCreate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void,
        afterCreate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void
}

declare interface JSData$IDSResourceLifecycleCreateInstanceEventHandlers {
    beforeCreateInstance?: (resourceName: string, data: any) => void,
        afterCreateInstance?: (resourceName: string, data: any) => void
}

declare interface JSData$IDSResourceLifecycleUpdateEventHandlers {
    beforeUpdate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void,
        afterUpdate?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void
}

declare interface JSData$IDSResourceLifecycleDestroyEventHandlers {
    beforeDestroy?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void,
        afterDestroy?: (resourceName: string, data: any, cb: (err: any, data?: any) => void) => void
}

declare interface JSData$IDSResourceLifecycleInjectEventHandlers {
    beforeInject?: (resourceName: string, data: any) => void,
        afterInject?: (resourceName: string, data: any) => void
}

declare interface JSData$IDSResourceLifecycleEjectEventHandlers {
    beforeEject?: (resourceName: string, data: any) => void,
        afterEject?: (resourceName: string, data: any) => void
}

declare interface JSData$IDSResourceLifecycleReapEventHandlers {
    beforeReap?: (resourceName: string, data: any) => void,
        afterReap?: (resourceName: string, data: any) => void
}

declare type JSData$IDSResourceLifecycleEventHandlers = {} & JSData$IDSResourceLifecycleCreateEventHandlers & JSData$IDSResourceLifecycleCreateInstanceEventHandlers & JSData$IDSResourceLifecycleValidateEventHandlers & JSData$IDSResourceLifecycleUpdateEventHandlers & JSData$IDSResourceLifecycleDestroyEventHandlers & JSData$IDSResourceLifecycleInjectEventHandlers & JSData$IDSResourceLifecycleEjectEventHandlers & JSData$IDSResourceLifecycleReapEventHandlers


declare interface JSData$DSErrors {
    IllegalArgumentError: JSData$DSError,
        IA: JSData$DSError,
        RuntimeError: JSData$DSError,
        R: JSData$DSError,
        NonexistentResourceError: JSData$DSError,
        NER: JSData$DSError
}

declare type JSData$DSError = {
    new(message?: string): JSData$DSError,
    message: string,
    type: string
} & Error


declare interface JSData$IDSAdapter {
    create<T>(
            config: JSData$DSResourceDefinition<T>,
            attrs: Object,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T>,
        destroy<T>(
            config: JSData$DSResourceDefinition<T>,
            id: string | number,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        destroyAll<T>(
            config: JSData$DSResourceDefinition<T>,
            params: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        find<T>(
            config: JSData$DSResourceDefinition<T>,
            id: string | number,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T>,
        findAll<T>(
            config: JSData$DSResourceDefinition<T>,
            params?: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T>,
        update<T>(
            config: JSData$DSResourceDefinition<T>,
            id: string | number,
            attrs: Object,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T>,
        updateAll<T>(
            config: JSData$DSResourceDefinition<T>,
            attrs: Object,
            params?: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<T >
}

declare interface JSData$DSActionConfig {
    adapter?: string,
        endpoint?: string,
        pathname?: string,
        method?: string
}

declare interface JSData$DSActionFn {
    (id: string | number, options?: Object): JSData$JSDataPromise<T >
}
declare
var JSData: {
    DS: JSData$DS,
    DSErrors: JSData$DSErrors
};
declare module 'js-data' {
    declare module.exports: typeof JSData
}