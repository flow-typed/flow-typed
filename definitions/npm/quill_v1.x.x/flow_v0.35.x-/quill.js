// @flow
/**
 * Flowtype definitions for quill
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type Quill$Key = {
    key: string,
    shortKey?: boolean
};

declare type Quill$Sources = "api" | "user" | "silent";

declare type Quill$Formats = {
    [key: string]: any
};

declare export interface Quill$KeyboardStatic {
    addBinding(
            key: Quill$Key,
            callback: (range: Quill$RangeStatic, context: any) => void): void,
        addBinding(
            key: Quill$Key,
            context: any,
            callback: (range: Quill$RangeStatic, context: any) => void): void
}

declare export interface Quill$ClipboardStatic {
    addMatcher(
            selector: string,
            callback: (node: any, delta: Quill$DeltaStatic) => Quill$DeltaStatic): void,
        addMatcher(
            nodeType: number,
            callback: (node: any, delta: Quill$DeltaStatic) => Quill$DeltaStatic): void,
        dangerouslyPasteHTML(html: string, source?: Quill$Sources): void,
        dangerouslyPasteHTML(index: number, html: string, source?: Quill$Sources): void
}

declare export interface Quill$QuillOptionsStatic {
    debug?: string,
        modules?: Quill$Formats,
        placeholder?: string,
        readOnly?: boolean,
        theme?: string,
        formats?: string[]
}

declare export interface Quill$BoundsStatic {
    left: number,
        top: number,
        height: number,
        width: number
}

declare export interface Quill$DeltaStatic {
    new(ops: Array<any>): Quill$DeltaStatic,
    new(ops: any): Quill$DeltaStatic,
    ops?: Array<any>,
        retain(length: number, attributes: any): Quill$DeltaStatic,
        delete(length: number): Quill$DeltaStatic,
        filter(predicate: any): Quill$DeltaStatic,
        forEach(predicate: any): Quill$DeltaStatic,
        insert(text: any, attributes: any): Quill$DeltaStatic,
        map(predicate: any): Quill$DeltaStatic,
        partition(predicate: any): Quill$DeltaStatic,
        reduce(predicate: any, initial: number): Quill$DeltaStatic,
        chop(): Quill$DeltaStatic,
        length(): number,
        slice(start: number, end: number): Quill$DeltaStatic,
        compose(other: any): Quill$DeltaStatic,
        concat(other: Quill$DeltaStatic): Quill$DeltaStatic,
        diff(other: Quill$DeltaStatic, index: number): Quill$DeltaStatic,
        eachLine(predicate: any, newline: any): Quill$DeltaStatic,
        transform(other: any, priority: any): Quill$DeltaStatic,
        transformPosition(index: number, priority: any): Quill$DeltaStatic
}

declare export interface Quill$RangeStatic {
    new(): Quill$RangeStatic,
    index: number,
        length: number
}

declare export interface Quill$Quill {
    new(container: string | Element, options?: Quill$QuillOptionsStatic): Quill$Quill,
    deleteText(index: number, length: number, source?: Quill$Sources): void,
        disable(): void,
        enable(enabled?: boolean): void,
        getContents(index?: number, length?: number): Quill$DeltaStatic,
        getLength(): number,
        getText(index?: number, length?: number): string,
        insertEmbed(index: number, type: string, value: any, source?: Quill$Sources): void,
        insertText(index: number, text: string, source?: Quill$Sources): Quill$DeltaStatic,
        insertText(
            index: number,
            text: string,
            format: string,
            value: any,
            source?: Quill$Sources): Quill$DeltaStatic,
        insertText(
            index: number,
            text: string,
            formats: Quill$Formats,
            source?: Quill$Sources): Quill$DeltaStatic,

        /**
         * 
         * @deprecated  Use clipboard.dangerouslyPasteHTML(index: number, html: string, source: Sources)
         */
        pasteHTML(index: number, html: string, source?: Quill$Sources): string,

        /**
         * 
         * @deprecated  Use dangerouslyPasteHTML(html: string, source: Sources): void;
         */
        pasteHTML(html: string, source?: Quill$Sources): string,
        setContents(delta: Quill$DeltaStatic, source?: Quill$Sources): Quill$DeltaStatic,
        setText(text: string, source?: Quill$Sources): Quill$DeltaStatic,
        update(source?: string): void,
        updateContents(delta: Quill$DeltaStatic, source?: Quill$Sources): Quill$DeltaStatic,
        format(name: string, value: any, source?: Quill$Sources): Quill$DeltaStatic,
        formatLine(index: number, length: number, source?: Quill$Sources): Quill$DeltaStatic,
        formatLine(
            index: number,
            length: number,
            format: string,
            value: any,
            source?: Quill$Sources): Quill$DeltaStatic,
        formatLine(
            index: number,
            length: number,
            formats: Quill$Formats,
            source?: Quill$Sources): Quill$DeltaStatic,
        formatText(index: number, length: number, source?: Quill$Sources): Quill$DeltaStatic,
        formatText(
            index: number,
            length: number,
            format: string,
            value: any,
            source?: Quill$Sources): Quill$DeltaStatic,
        formatText(
            index: number,
            length: number,
            formats: Quill$Formats,
            source?: Quill$Sources): Quill$DeltaStatic,
        getFormat(range?: Quill$RangeStatic): Quill$Formats,
        getFormat(index: number, length?: number): Quill$Formats,
        removeFormat(index: number, length: number, source?: Quill$Sources): void,
        blur(): void,
        focus(): void,
        getBounds(index: number, length?: number): Quill$BoundsStatic,
        getSelection(focus?: boolean): Quill$RangeStatic,
        hasFocus(): boolean,
        setSelection(index: number, length: number, source?: Quill$Sources): void,
        setSelection(range: Quill$RangeStatic, source?: Quill$Sources): void,
        on(
            eventName: string,
            callback: (<T>(delta: T, oldContents: T, source: string) => void) | ((name: string, ...args: any[]) => void)): Quill$Quill,
        once(
            eventName: string,
            callback: (delta: Quill$DeltaStatic, source: string) => void): Quill$Quill,
        off(
            eventName: string,
            callback: (delta: Quill$DeltaStatic, source: string) => void): Quill$Quill,
        debug(level: string): void,
        import (path: string): any,
        register(path: string, def: any, suppressWarning?: boolean): void,
        register(defs: Quill$Formats, suppressWarning?: boolean): void,
        addContainer(className: string, refNode?: any): any,
        addContainer(domNode: any, refNode?: any): any,
        getModule(name: string): any,
        clipboard: Quill$ClipboardStatic
}
declare var Quill: Quill$Quill;
declare var Delta: Quill$DeltaStatic;
declare module 'quill' {
    declare module.exports: typeof Quill
}