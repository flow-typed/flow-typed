/**
 * Flowtype definitions for acorn
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$acorn: {
    parse: typeof acorn$parse,
    parseExpressionAt: typeof acorn$parseExpressionAt,
    getLineInfo: typeof acorn$getLineInfo,
}
declare var version: string;

declare function acorn$parse(input: string, options?: acorn$Options): ESTree.Program

declare function acorn$parseExpressionAt(input: string, pos: number, options?: acorn$Options): ESTree.Expression

declare function acorn$getLineInfo(input: string, offset: number): ESTree.Position

declare var defaultOptions: acorn$Options;

declare interface acorn$TokenType {
    label: string,
        keyword: string,
        beforeExpr: boolean,
        startsExpr: boolean,
        isLoop: boolean,
        isAssign: boolean,
        prefix: boolean,
        postfix: boolean,
        binop: number,
        updateContext: (prevType: acorn$TokenType) => any
}

declare interface acorn$AbstractToken {
    start: number,
        end: number,
        loc: ESTree.SourceLocation,
        range: [number, number]
}

declare type acorn$Token = {
    type: acorn$TokenType,
    value: any
} & acorn$AbstractToken


declare type acorn$Comment = {
    type: string,
    value: string
} & acorn$AbstractToken


declare interface acorn$Options {
    ecmaVersion?: number,
        sourceType?: string,
        onInsertedSemicolon?: (lastTokEnd: number, lastTokEndLoc?: ESTree.Position) => any,
        onTrailingComma?: (lastTokEnd: number, lastTokEndLoc?: ESTree.Position) => any,
        allowReserved?: boolean,
        allowReturnOutsideFunction?: boolean,
        allowImportExportEverywhere?: boolean,
        allowHashBang?: boolean,
        locations?: boolean,
        onToken?: ((token: acorn$Token) => any) | acorn$Token[],
        onComment?: ((
            isBlock: boolean,
            text: string,
            start: number,
            end: number,
            startLoc?: ESTree.Position,
            endLoc?: ESTree.Position) => any) | acorn$Comment[],
        ranges?: boolean,
        program?: ESTree.Program,
        sourceFile?: string,
        directSourceFile?: string,
        preserveParens?: boolean,
        plugins?: {
            [name: string]: Function
        }
}
declare module 'acorn' {
    declare module.exports: typeof acorn
}