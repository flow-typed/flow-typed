/**
 * Flowtype definitions for ej.web.all
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ej' {
    declare var dataUtil: dataUtil;
    declare function isMobile(): boolean
    declare function isIOS(): boolean
    declare function isAndroid(): boolean
    declare function isFlat(): boolean
    declare function isWindows(): boolean
    declare function isCssCalc(): boolean
    declare function getCurrentPage(): JQuery
    declare function isLowerResolution(): boolean
    declare function browserInfo(): browserInfoOptions
    declare function isTouchDevice(): boolean
    declare function addPrefix(style: string): string
    declare function animationEndEvent(): string
    declare function blockDefaultActions(e: Object): void
    declare function buildTag(tag: string, innerHtml?: string, styles?: Object, attrs?: Object): JQuery
    declare function cancelEvent(): string
    declare function copyObject(): string
    declare function createObject(nameSpace: string, value: Object, initIn: any): JQuery
    declare function getObject<T>(element: string, model: any): T
    declare function defineClass(className: string, constructor: any, proto: Object, replace: boolean): Object
    declare function destroyWidgets(element: Object): void
    declare function endEvent(): string
    declare function event(type: string, data: any, eventProp: Object): Object
    declare function getAndroidVersion(): Object
    declare function getAttrVal(ele: Object, val: string, option: Object): Object
    declare function getBooleanVal(ele: Object, val: string, option: Object): Object
    declare function getClearString(): string
    declare function getDimension(element: Object, method: string): Object
    declare function getFontString(fontObj: Object): string
    declare function getFontStyle(style: string): string
    declare function getMaxZindex(): number
    declare function getNameSpace(className: string): string
    declare function getOffset(ele: string): Object
    declare function getRenderMode(): string
    declare function getScrollableParents(element: Object): void
    declare function getTheme(): string
    declare function getZindexPartial(element: Object, popupEle: string): number
    declare function hasRenderMode(element: string): void
    declare function hasStyle(prop: string): boolean
    declare function hasTheme(element: string): string
    declare function hexFromRGB(color: string): string
    declare function ieClearRemover(element: string): void
    declare function isAndroidWebView(): string
    declare function isDevice(): boolean
    declare function isIOS7(): boolean
    declare function isIOSWebView(): boolean
    declare function isLowerAndroid(): boolean
    declare function isNullOrUndefined(value: Object): boolean
    declare function isPlainObject(): JQuery
    declare function isPortrait(): any
    declare function isTablet(): boolean
    declare function isWindowsWebView(): string
    declare function listenEvents(
        selectors: any,
        eventTypes: any,
        handlers: any,
        remove?: any,
        pluginObj?: any,
        disableMouse?: boolean): void
    declare function listenTouchEvent(
        selectors: any,
        eventTypes: any,
        handlers: any,
        remove?: any,
        pluginObj?: any,
        disableMouse?: boolean): void
    declare function logBase(val: string, base: string): number
    declare function measureText(text: string, maxwidth: number, font: string): string
    declare function moveEvent(): string
    declare function print(element: string, printWindow: any): void
    declare function proxy(fn: Object, context?: string, arg?: string): any
    declare function round(value: string, div: string, up: string): any
    declare function sendAjaxRequest(ajaxOptions: Object): void
    declare function setCaretToPos(nput: string, pos1: string, pos2: string): void
    declare function setRenderMode(element: string): void
    declare function setTheme(): Object
    declare function startEvent(): string
    declare function tapEvent(): string
    declare function tapHoldEvent(): string
    declare function throwError(): Object
    declare function transitionEndEvent(): Object
    declare function userAgent(): boolean
    declare module 'widget' {
        declare     var autoInit: boolean;
        declare     var registeredInstances: Array<any>;
        declare     var registeredWidgets: Array<any>;
        declare     function register(pluginName: string, className: string, prototype: any): void
        declare     function destroyAll(elements: Element): void
        declare     function init(element: Element): void
        declare     function registerInstance(element: Element, pluginName: string, className: string, prototype: any): void
    }

    declare function avg(json: Object, filedName: string): any
    declare function getGuid(prefix: string): number
    declare function group(
        jsonArray: any,
        field: string,
        agg: string,
        level: number,
        groupDs: string): Object
    declare function isJson(jsonData: string): string
    declare function max(jsonArray: any, fieldName?: string, comparer?: string): any
    declare function min(jsonArray: any, fieldName: string, comparer: string): any
    declare function merge(first: string, second: string): any
    declare function mergeshort(jsonArray: any, fieldName: string, comparer: string): any
    declare function parseJson(jsonText: string): string
    declare function parseTable(table: number, headerOption: string, headerRowIndex: string): Object
    declare function select(jsonArray: any, fields: string): any
    declare function setTransition(): boolean
    declare function sum(json: string, fieldName: string): string
    declare function swap(array: any, x: string, y: string): any
    declare var cssUA: string;
    declare var serverTimezoneOffset: number;
    declare var transform: string;
    declare var transformOrigin: string;
    declare var transformStyle: string;
    declare var transition: string;
    declare var transitionDelay: string;
    declare var transitionDuration: string;
    declare var transitionProperty: string;
    declare var transitionTimingFunction: string;
    declare var util: {
        valueFunction(val: string): any
    };
    declare module 'device' {
        declare     function isAndroid(): boolean
        declare     function isIOS(): boolean
        declare     function isFlat(): boolean
        declare     function isIOS7(): boolean
        declare     function isWindows(): boolean
    }

    declare interface browserInfoOptions {
        name: string,
            version: string,
            culture: Object,
            isMSPointerEnabled: boolean
    }
    declare class WidgetBase {
        destroy(): void;
        element: JQuery;
        setModel(options: Object, forceSet?: boolean): any;
        option(prop?: Object, value?: Object, forceSet?: boolean): any;
        _trigger(eventName?: string, eventProp?: Object): any;
        _on(
            element: JQuery,
            eventType?: string,
            handler?: (eventObject: JQueryEventObject) => any): any;
        _on(
            element: JQuery,
            eventType?: string,
            selector?: string,
            handler?: (eventObject: JQueryEventObject) => any): any;
        _off(
            element: JQuery,
            eventName: string,
            handler?: (eventObject: JQueryEventObject) => any): any;
        _off(
            element: JQuery,
            eventType?: string,
            selector?: string,
            handler?: (eventObject: JQueryEventObject) => any): any;
        persistState(): void;
        restoreState(silent: boolean): void
    }
    declare class Widget mixins WidgetBase {
        constructor(pluginName: string, className: string, proto: any): this;
        fn: Widget;
        extend(widget: Widget): any;
        register(pluginName: string, className: string, prototype: any): void;
        destroyAll(elements: Element): void;
        model: any
    }
    declare interface BaseEvent {
        cancel: boolean,
            type: string
    }
    declare class DataManager {
        constructor(dataSource?: any, query?: ej.Query, adaptor?: any): this;
        setDefaultQuery(query: ej.Query): void;
        executeQuery(query?: ej.Query, done?: any, fail?: any, always?: any): JQueryPromise<any>;
        executeLocal(query?: ej.Query): ej.DataManager;
        saveChanges(changes?: Changes, key?: string, tableName?: string): JQueryDeferred<any>;
        insert(data: Object, tableName?: string): JQueryPromise<any>;
        remove(keyField: string, value: any, tableName?: string): Object;
        update(keyField: string, value: any, tableName?: string): Object
    }
    declare class Query {
        constructor(): this;
        fn: Query;
        extend(prototype: Object): Query;
        key(field: string): ej.Query;
        using(dataManager: ej.DataManager): ej.Query;
        execute(dataManager: ej.DataManager, done: any, fail?: string, always?: string): any;
        executeLocal(dataManager: ej.DataManager): ej.DataManager;
        clone(): ej.Query;
        from(tableName: any): ej.Query;
        addParams(key: string, value: string): ej.Query;
        expand(tables: any): ej.Query;
        where(
            fieldName: string,
            operator: ej.FilterOperators,
            value: any,
            ignoreCase?: boolean): ej.Query;
        where(predicate: ej.Predicate): ej.Query;
        search(
            searchKey: any,
            fieldNames?: any,
            operator?: string,
            ignoreCase?: boolean): ej.Query;
        sortBy(fieldName: string, comparer?: ej.SortOrder, isFromGroup?: boolean): ej.Query;
        sortByDesc(fieldName: string): ej.Query;
        group(fieldName: string): ej.Query;
        page(pageIndex: number, pageSize: number): ej.Query;
        take(nos: number): ej.Query;
        skip(nos: number): ej.Query;
        select(fieldNames: any): ej.Query;
        hierarchy(query: ej.Query, selectorFn: any): ej.Query;
        foreignKey(key: string): ej.Query;
        requiresCount(): ej.Query;
        range(start: number, end: number): ej.Query
    }
    declare class Adaptor {
        constructor(ds: any): this;
        pvt: Object;
        type: ej.Adaptor;
        options: AdaptorOptions;
        extend(overrides: any): ej.Adaptor;
        processQuery(dm: ej.DataManager, query: ej.Query): any;
        processResponse(
            data: Object,
            ds: any,
            query: ej.Query,
            xhr: JQueryXHR,
            request?: Object,
            changes?: Changes): Object;
        convertToQueryString(req: any, query: ej.Query, dm: ej.DataManager): JQueryParam
    }
    declare interface AdaptorOptions {
        from?: string,
            requestType?: string,
            sortBy?: string,
            select?: string,
            skip?: string,
            group?: string,
            take?: string,
            search?: string,
            count?: string,
            where?: string,
            aggregates?: string
    }
    declare class UrlAdaptor mixins ej.Adaptor {
        constructor(): this;
        processQuery(
            dm: ej.DataManager,
            query: ej.Query,
            hierarchyFilters?: Object): {
            type: string,
            url: string,
            ejPvtData: Object,
            contentType?: string,
            data?: Object
        };
        convertToQueryString(req: Object, query: ej.Query, dm: ej.DataManager): JQueryParam;
        processResponse(
            data: Object,
            ds: any,
            query: ej.Query,
            xhr: JQueryXHR,
            request?: Object,
            changes?: Changes): Object;
        onGroup(e: any): void;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): void;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        insert(
            dm: ej.DataManager,
            data: Object,
            tableName: string): {
            url: string,
            data: any
        };
        remove(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            type: string,
            url: string,
            data?: any
        };
        update(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            type: string,
            url: string,
            data: any
        };
        getFiltersFrom(data: Object, query: ej.Query): ej.Predicate
    }
    declare class ODataAdaptor mixins ej.UrlAdaptor {
        constructor(): this;
        options: UrlAdaptorOptions;
        onEachWhere(filter: any, requiresCast: boolean): any;
        onPredicate(pred: ej.Predicate, query: ej.Query, requiresCast: boolean): string;
        onComplexPredicate(pred: ej.Predicate, requiresCast: boolean): string;
        onWhere(filters: Array<string>): string;
        onEachSearch(e: Object): void;
        onSearch(e: Object): string;
        onEachSort(e: Object): string;
        onSortBy(e: Object): string;
        onGroup(e: Object): string;
        onSelect(e: Object): string;
        onCount(e: Object): string;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processResponse(
            data: Object,
            ds: Object,
            query: ej.Query,
            xhr: any,
            request: any,
            changes: Changes): {
            result: Object,
            count: number
        };
        convertToQueryString(req: Object, query: ej.Query, dm: ej.DataManager): JQueryParam;
        insert(
            dm: ej.DataManager,
            data: Object,
            tableName: string): {
            url: string,
            data: Object
        };
        remove(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            url: string,
            type: string
        };
        update(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            url: string,
            type: string,
            data: Object,
            accept: string
        };
        batchRequest(
            dm: ej.DataManager,
            changes: Changes,
            e: any): {
            url: string,
            type: string,
            data: Object,
            contentType: string
        };
        generateDeleteRequest(arr: Array<any>, e: any): string;
        generateInsertRequest(arr: Array<any>, e: any): string;
        generateUpdateRequest(arr: Array<any>, e: any): string
    }
    declare interface UrlAdaptorOptions {
        requestType?: string,
            accept?: string,
            multipartAccept?: string,
            sortBy?: string,
            select?: string,
            skip?: string,
            take?: string,
            count?: string,
            where?: string,
            expand?: string,
            batch?: string,
            changeSet?: string,
            batchPre?: string,
            contentId?: string,
            batchContent?: string,
            changeSetContent?: string,
            batchChangeSetContentType?: string
    }
    declare class ODataV4Adaptor mixins ej.ODataAdaptor {
        constructor(): this;
        options: ODataAdaptorOptions;
        onCount(e: Object): string;
        onEachSearch(e: Object): void;
        onSearch(e: Object): string;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        processResponse(
            data: Object,
            ds: Object,
            query: ej.Query,
            xhr: any,
            request: any,
            changes: Changes): {
            result: Object,
            count: number
        }
    }
    declare interface ODataAdaptorOptions {
        requestType?: string,
            accept?: string,
            multipartAccept?: string,
            sortBy?: string,
            select?: string,
            skip?: string,
            take?: string,
            count?: string,
            search?: string,
            where?: string,
            expand?: string,
            batch?: string,
            changeSet?: string,
            batchPre?: string,
            contentId?: string,
            batchContent?: string,
            changeSetContent?: string,
            batchChangeSetContentType?: string
    }
    declare class JsonAdaptor mixins ej.Adaptor {
        constructor(): this;
        processQuery(ds: Object, query: ej.Query): string;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): Changes;
        onWhere(ds: Object, e: any): any;
        onSearch(ds: Object, e: any): any;
        onSortBy(ds: Object, e: any, query: ej.Query): Object;
        onGroup(ds: Object, e: any, query: ej.Query): Object;
        onPage(ds: Object, e: any, query: ej.Query): Object;
        onRange(ds: Object, e: any): Object;
        onTake(ds: Object, e: any): Object;
        onSkip(ds: Object, e: any): Object;
        onSelect(ds: Object, e: any): Object;
        insert(dm: ej.DataManager, data: any): Object;
        remove(dm: ej.DataManager, keyField: string, value: any, tableName: string): Object;
        update(dm: ej.DataManager, keyField: string, value: any, tableName: string): Object
    }
    declare class remoteSaveAdaptor mixins ej.UrlAdaptor {
        constructor(): this;
        batchRequest(dm: ej.DataManager, changes: Changes, e: any): void;
        beforeSend(dm: ej.DataManager, request: any, settings?: any): void;
        insert(
            dm: ej.DataManager,
            data: Object,
            tableName: string): {
            url: string,
            data: any
        };
        remove(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            type: string,
            url: string,
            data?: any
        };
        update(
            dm: ej.DataManager,
            keyField: string,
            value: any,
            tableName: string): {
            type: string,
            url: string,
            data: any
        }
    }
    declare class TableModel {
        constructor(name: string, jsonArray: Array<any>, dataManager: ej.DataManager, modelComputed: any): this;
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        setDataManager(dataManager: DataManager): void;
        saveChanges(): void;
        rejectChanges(): void;
        insert(json: any): void;
        update(value: any): void;
        remove(key: string): void;
        isDirty(): boolean;
        getChanges(): Changes;
        toArray(): Array<any>;
        setDirty(dirty: any, model: any): void;
        get(index: number): void;
        length(): number;
        bindTo(element: any): void
    }
    declare class Model {
        constructor(json: any, table: string, name: string): this;
        formElements: Array<string>;
        computes(value: any): void;
        on(eventName: string, handler: any): void;
        off(eventName: string, handler: any): void;
        set(field: string, value: any): void;
        get(field: string): any;
        revert(suspendEvent: any): void;
        save(dm: ej.DataManager, key: string): void;
        markCommit(): void;
        markDelete(): void;
        changeState(state: boolean, args: any): void;
        properties(): any;
        bindTo(element: any): void;
        unbind(element: any): void
    }
    declare interface Changes {
        changed?: Array<any>,
            added?: Array<any>,
            deleted?: Array<any >
    }
    declare class Predicate {
        constructor(): this;
        constructor(field: string, operator: ej.FilterOperators, value: any, ignoreCase: boolean): this;
        and(field: string, operator: any, value: any, ignoreCase: boolean): void;
        or(field: string, operator: any, value: any, ignoreCase: boolean): void;
        or(predicate: Array<Object>): any;
        validate(record: Object): boolean;
        toJSON(): {
            isComplex: boolean,
            field: string,
            operator: string,
            value: any,
            ignoreCase: boolean,
            condition: string,
            predicates: any
        }
    }
    declare interface dataUtil {
        swap(array: Array<any>, x: number, y: number): void,
            mergeSort(jsonArray: Array<any>, fieldName?: string, comparer?: any): Array<any>,
            max(jsonArray: Array<any>, fieldName?: string, comparer?: string): Array<any>,
            min(jsonArray: Array<any>, fieldName: string, comparer: string): Array<any>,
            distinct(
                jsonArray: Array<any>,
                fieldName?: string,
                requiresCompleteRecord?: any): Array<any>,
            sum(json: any, fieldName: string): number,
            avg(json: any, fieldName: string): number,
            select(jsonArray: Array<any>, fieldName: string, fields: string): Array<any>,
            group(jsonArray: Array<any>, field: string, level: number): Array<any>,
            parseTable(table: string, headerOption: ej.headerOption, headerRowIndex: number): Object
    }
    declare interface AjaxSettings {
        type?: string,
            cache: boolean,
            data?: any,
            dataType?: string,
            contentType?: any,
            async?: boolean
    }
    declare module 'Draggable' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface HelperEventArgs {

            /**
             * returns the draggable element object
             */
            element?: any,

                /**
                 * returns the event model values
                 */
                sender?: any
        }
    }

    declare module 'Droppable' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface DropEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the element which accepts the droppable element.
                 */
                targetElement?: any
        }
        declare     export interface OutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mouse out over the element
                 */
                targetElement?: any
        }
        declare     export interface OverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mouse over the element
                 */
                targetElement?: any
        }
    }

    declare module 'Resizable' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface HelperEventArgs {

            /**
             * returns the draggable element object
             */
            element?: any,

                /**
                 * returns the event model values
                 */
                sender?: any
        }
    }

    declare var globalize: globalize;
    declare var cultures: culture;
    declare function addCulture(name: string, culture?: any): void
    declare function preferredCulture(culture?: string): culture
    declare function format(value: any, format: string, culture?: string): string
    declare function parseInt(value: string, radix?: any, culture?: string): number
    declare function parseFloat(value: string, radix?: any, culture?: string): number
    declare function parseDate(value: string, format: string, culture?: string): Date
    declare function getLocalizedConstants(controlName: string, culture?: string): any
    declare interface globalize {
        addCulture(name: string, culture?: any): void,
            preferredCulture(culture?: string): culture,
            format(value: any, format: string, culture?: string): string,
            parseInt(value: string, radix?: any, culture?: string): number,
            parseFloat(value: string, radix?: any, culture?: string): number,
            parseDate(value: string, format: string, culture?: string): Date,
            getLocalizedConstants(controlName: string, culture?: string): any
    }
    declare interface culture {
        name?: string,
            englishName?: string,
            namtiveName?: string,
            language?: string,
            isRTL: boolean,
            numberFormat?: formatSettings,
            calendars?: calendarsSettings
    }
    declare interface formatSettings {
        pattern: Array<string>,
            decimals: number,
            groupSizes: Array<number>,
            percent: percentSettings,
            currency: currencySettings
    }
    declare interface percentSettings {
        pattern: Array<string>,
            decimals: number,
            groupSizes: Array<number>,
            symbol: string
    }
    declare interface currencySettings {
        pattern: Array<string>,
            decimals: number,
            groupSizes: Array<number>,
            symbol: string
    }
    declare interface calendarsSettings {
        standard: standardSettings
    }
    declare interface standardSettings {
        firstDay: number,
            days: daySettings,
            months: monthSettings,
            AM: Array<string>,
            PM: Array<string>,
            twoDigitYearMax: number,
            patterns: patternSettings
    }
    declare interface daySettings {
        names: Array<string>,
            namesAbbr: Array<string>,
            namesShort: Array<string >
    }
    declare interface monthSettings {
        names: Array<string>,
            namesAbbr: Array<string >
    }
    declare interface patternSettings {
        d: string,
            D: string,
            t: string,
            T: string,
            f: string,
            F: string,
            M: string,
            Y: string,
            S: string
    }
    declare module 'Scroller' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface WheelStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the original event name and its event properties of the current event.
                 */
                originalEvent?: any,

                /**
                 * returns the current data related to the event.
                 */
                scrollData?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface WheelMoveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the original event name and its event properties of the current event.
                 */
                originalEvent?: any
        }
        declare     export interface WheelStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the original event name and its event properties of the current event.
                 */
                originalEvent?: any
        }
    }

    declare module 'Accordion' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActivateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns active index
                 */
                activeIndex?: number,

                /**
                 * returns current active header
                 */
                activeHeader?: any,

                /**
                 * returns true when the Accordion index activated by user interaction otherwise returns false
                 */
                isInteraction?: boolean
        }
        declare     export interface AjaxBeforeLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string
        }
        declare     export interface AjaxErrorEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the failed data sent.
                 */
                data?: string
        }
        declare     export interface AjaxLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the name of the URL
                 */
                URL?: string
        }
        declare     export interface AjaxSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the successful data sent.
                 */
                data?: string,

                /**
                 * returns the AJAX content.
                 */
                content?: string
        }
        declare     export interface BeforeActivateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns active index
                 */
                activeIndex?: number,

                /**
                 * returns true when the Accordion index activated by user interaction otherwise returns false
                 */
                isInteraction?: boolean
        }
        declare     export interface BeforeInactivateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns active index
                 */
                inActiveIndex?: number,

                /**
                 * returns true when the Accordion index activated by user interaction otherwise returns false
                 */
                isInteraction?: boolean
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface InActivateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns active index
                 */
                inActiveIndex?: number,

                /**
                 * returns in active element
                 */
                inActiveHeader?: any,

                /**
                 * returns true when the Accordion index activated by user interaction otherwise returns false
                 */
                isInteraction?: boolean
        }
        declare interface AjaxSettings {
            type?: string,
                cache: boolean,
                data?: any,
                dataType?: string,
                contentType?: any,
                async?: boolean
        }
        declare     export interface CustomIcon {

            /**
             * This class name set to collapsing header.
             */
            header?: string,

                /**
                 * This class name set to expanded (active) header.
                 */
                selectedHeader?: string
        }
    }

    declare module 'Autocomplete' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionSuccessEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface ActionFailureEventArgs {}
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
        declare     export interface MultiColumnSettingsColumn {

            /**
             * Get or set a value that indicates to display the columns in the autocomplete mapping with column name of the dataSource.
             */
            field?: string,

                /**
                 * Get or set a value that indicates to display the title of that particular column.
                 */
                headerText?: string,

                /**
                 * Gets or sets a value that indicates to render the multicolumn with custom theme.
                 */
                cssClass?: string,

                /**
                 * Specifies the search data type. There are four types of data types available such as string, â€˜numberâ€™, â€˜booleanâ€™ and â€˜dateâ€™.
                 * @Default  {ej.Type.String}
                 */
                type?: ej.Type | string,

                /**
                 * Specifies the search filter type. There are several types of search filter available such as â€˜startswithâ€™, â€˜containsâ€™, â€˜endswithâ€™, â€˜lessthanâ€™, â€˜lessthanorequalâ€™, â€˜greaterthanâ€™, â€˜greaterthanorequalâ€™, â€˜equalâ€™, â€˜notequalâ€™.
                 * @Default  {ej.filterType.StartsWith}
                 */
                filterType?: ej.filterType | string,

                /**
                 * This defines the text alignment of a particular column header cell value. See headerTextAlign
                 * @Default  {ej.TextAlign.Left}
                 */
                headerTextAlign?: ej.TextAlign | string,

                /**
                 * Gets or sets a value that indicates to align the text within the column. See textAlign
                 * @Default  {ej.TextAlign.Left}
                 */
                textAlign?: ej.TextAlign | string
        }
        declare     export interface MultiColumnSettings {

            /**
             * Allow list of data to be displayed in several columns.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * Allow header text to be displayed in corresponding columns.
                 * @Default  {true}
                 */
                showHeader?: boolean,

                /**
                 * Displayed selected value and autocomplete search based on mentioned column value specified in that format.
                 */
                stringFormat?: string,

                /**
                 * Field and Header Text collections can be defined and customized through columns field.
                 */
                columns?: Array<MultiColumnSettingsColumn >
        }
    }

    declare module 'Button' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'Captcha' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface RefreshBeginEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Captcha model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RefreshCompleteEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Captcha model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RefreshFailureEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Captcha model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RefreshSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Captcha model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'ListBox' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionSuccessEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface ActionFailureEventArgs {}
        declare     export interface ActionBeforeSuccessEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * List of actual object.
                 */
                actual?: any,

                /**
                 * Object of ListBox widget which contains DataManager arguments
                 */
                request?: any,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * List of array object
                 */
                result?: Array<any>,

                /**
                 * ExecuteQuery object of DataManager
                 */
                xhr?: any
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CheckChangeEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * List item object.
                 */
                item?: any,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface ItemDragEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on whether the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface ItemDragStartEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on whether the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface ItemDragStopEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on whether the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface ItemDropEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on whether the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface UnselectEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * List item object.
                 */
                item?: any,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'Calculate' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
    }

    declare module 'CheckBox' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeChangeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the CheckBox model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the status whether the element is checked or not.
                 */
                isChecked?: boolean
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'ColorPicker' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface ButtonText {

            /**
             * Sets the text for the apply button.
             */
            apply?: string,

                /**
                 * Sets the text for the cancel button.
                 */
                cancel?: string,

                /**
                 * Sets the header text for the swatches area.
                 */
                swatches?: string
        }
        declare     export interface TooltipText {

            /**
             * Sets the tooltip text for the switcher button.
             */
            switcher?: string,

                /**
                 * Sets the tooltip text for the add button.
                 */
                addbutton?: string,

                /**
                 * Sets the tooltip text for the basic preset.
                 */
                basic?: string,

                /**
                 * Sets the tooltip text for the mono chrome preset.
                 */
                monochrome?: string,

                /**
                 * Sets the tooltip text for the flat colors preset.
                 */
                flatcolors?: string,

                /**
                 * Sets the tooltip text for the sea wolf preset.
                 */
                seawolf?: string,

                /**
                 * Sets the tooltip text for the web colors preset.
                 */
                webcolors?: string,

                /**
                 * Sets the tooltip text for the sandy preset.
                 */
                sandy?: string,

                /**
                 * Sets the tooltip text for the pink shades preset.
                 */
                pinkshades?: string,

                /**
                 * Sets the tooltip text for the misty preset.
                 */
                misty?: string,

                /**
                 * Sets the tooltip text for the citrus preset.
                 */
                citrus?: string,

                /**
                 * Sets the tooltip text for the vintage preset.
                 */
                vintage?: string,

                /**
                 * Sets the tooltip text for the moon light preset.
                 */
                moonlight?: string,

                /**
                 * Sets the tooltip text for the candy crush preset.
                 */
                candycrush?: string,

                /**
                 * Sets the tooltip text for the current color area.
                 */
                currentcolor?: string,

                /**
                 * Sets the tooltip text for the selected color area.
                 */
                selectedcolor?: string
        }
    }

    declare module 'FileExplorer' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeAjaxRequestEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the AJAX request data
                 */
                data?: any,

                /**
                 * returns the FileExplorer model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeDownloadEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the downloaded file names.
                 */
                files?: string[],

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeGetImageEventArgs {

            /**
             * set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * enable or disable the image compress option.
                 */
                canCompress?: boolean,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the expected image size.
                 */
                size?: any,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeUploadEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CopyEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of copied file/folder.
                 */
                name?: string[],

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the source path.
                 */
                sourcePath?: string,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateFolderEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the AJAX response data
                 */
                data?: any,

                /**
                 * returns the FileExplorer model
                 */
                model?: undefined.Model,

                /**
                 * returns the selected item details
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CutEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of moved file or folder.
                 */
                name?: string[],

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the source path.
                 */
                sourcePath?: string,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DropEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the element which accepts the droppable element.
                 */
                targetElement?: any
        }
        declare     export interface GetImageEventArgs {

            /**
             * set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * loaded image path.
                 */
                path?: string,

                /**
                 * loaded image element
                 */
                element?: any,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * original arguments of image load or error event
                 */
                originalArgs?: any,

                /**
                 * returns the action type, which specifies thumbnail preview or opening image.
                 */
                action?: string,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface LayoutChangeEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * return true when we change the layout via interaction, else false.
                 */
                isInteraction?: boolean,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ContextMenuSettings {

            /**
             * The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default  {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, Sortby, |, NewFolder, Upload, |, Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any,

                /**
                 * The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
                 * @Default  {[]}
                 */
                customMenuFields?: Array<any >
        }
        declare     export interface FilterSettings {

            /**
             * It allows to search the text given in search Textbox in every keyup event. When this property was set as false, searching will works only on Enter key and searchbar blur.
             * @Default  {true}
             */
            allowSearchOnTyping?: boolean,

                /**
                 * Enables or disables to perform the filter operation with case sensitive.
                 * @Default  {false}
                 */
                caseSensitiveSearch?: boolean,

                /**
                 * Sets the search filter type. There are several filter types available such as &quot;startswith&quot;, &quot;contains&quot;, &quot;endswith&quot;. See filterType.
                 * @Default  {ej.FileExplorer.filterType.Contains}
                 */
                filterType?: ej.FilterType | string
        }
        declare     export interface GridSettings {

            /**
             * Allows to Resize the width of the columns by simply click and move the particular column header line.
             * @Default  {true}
             */
            allowResizing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the dynamic sorting behavior on grid data. Sorting can be done through clicking on particular column header.
                 * @Default  {true}
                 */
                allowSorting?: boolean,

                /**
                 * Gets or sets an object that indicates to render the grid with specified columns. You can use this property same as the column property in Grid control.
                 * @Default  {[{ field: name, headerText: Name, width: 30% }, { field: dateModified, headerText: Date Modified, width: 30% }, { field: type, headerText: Type, width: 15% }, { field: size, headerText: Size, width: 12%, textAlign: right, headerTextAlign: left }]}
                 */
                columns?: Array<any >
        }
        declare     export interface UploadSettings {

            /**
             * Specifies the maximum file size allowed to upload. It accepts the value in bytes.
             * @Default  {31457280}
             */
            maxFileSize?: number,

                /**
                 * Enables or disables the multiple files upload. When it is enabled, you can upload multiple files at a time and when disabled, you can upload only one file at a time.
                 * @Default  {true}
                 */
                allowMultipleFile?: boolean,

                /**
                 * Enables or disables the auto upload option while uploading files in FileExplorer control.
                 * @Default  {false}
                 */
                autoUpload?: boolean
        }
    }

    declare module 'DatePicker' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeCloseEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the event parameters from DatePicker.
                 */
                events?: any,

                /**
                 * returns the DatePicker popup.
                 */
                element?: HTMLElement
        }
        declare     export interface BeforeDateCreateEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the currently created date object.
                 */
                date?: any,

                /**
                 * returns the current DOM object of the date from the Calendar.
                 */
                element?: HTMLElement,

                /**
                 * returns the currently created date as string type.
                 */
                value?: string
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface NavigateEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the current date object.
                 */
                date?: any,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the previous view state of calendar.
                 */
                navigateFrom?: string,

                /**
                 * returns the current view state of calendar.
                 */
                navigateTo?: string,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current date value.
                 */
                value?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'DateTimePicker' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeCloseEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the event parameters from DatePicker.
                 */
                events?: any,

                /**
                 * returns the DatePicker popup.
                 */
                element?: HTMLElement
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ButtonText {

            /**
             * Sets the text for the apply button.
             */
            apply?: string,

                /**
                 * Sets the text for the cancel button.
                 */
                cancel?: string,

                /**
                 * Sets the header text for the swatches area.
                 */
                swatches?: string
        }
        declare     export interface TimeDrillDown {

            /**
             * This is the field to show/hide the timeDrillDown in DateTimePicker.
             */
            enabled?: boolean,

                /**
                 * Sets the interval time of minutes on selected date.
                 */
                interval?: number,

                /**
                 * Allows the user to show or hide the meridian with time in DateTimePicker.
                 */
                showMeridian?: boolean,

                /**
                 * After choosing the time, the popup will close automatically if we set it as true, otherwise we focus out the DateTimePicker or choose timeNow button for closing the popup.
                 */
                autoClose?: boolean
        }
    }

    declare module 'Dialog' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface AjaxErrorEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the failed data sent.
                 */
                data?: string
        }
        declare     export interface AjaxSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the successful data sent.
                 */
                data?: string,

                /**
                 * returns the AJAX content.
                 */
                content?: string
        }
        declare     export interface BeforeCloseEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the event parameters from DatePicker.
                 */
                events?: any,

                /**
                 * returns the DatePicker popup.
                 */
                element?: HTMLElement
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ContentLoadEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * URL of the content.
                 */
                URL?: string,

                /**
                 * Content type
                 */
                contentType?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ResizeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface ResizeStartEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface ResizeStopEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface ExpandEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CollapseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ActionButtonClickEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Name of the event target attribute.
                 */
                buttonID?: string,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event current target title.
                 */
                currentTarget?: string
        }
    }

    declare module 'DropDownList' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface ActionFailureEventArgs {}
        declare     export interface ActionSuccessEventArgs {}
        declare     export interface BeforePopupHideEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the selected text
                 */
                text?: string,

                /**
                 * returns the selected value
                 */
                value?: string
        }
        declare     export interface BeforePopupShownEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the selected text
                 */
                text?: string,

                /**
                 * returns the selected value
                 */
                value?: string
        }
        declare     export interface CascadeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the cascading dropdown model.
                 */
                cascadeModel?: any,

                /**
                 * returns the current selected value in first dropdown.
                 */
                cascadeValue?: string,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the default filter action for second dropdown data should happen or not.
                 */
                requiresDefaultFilter?: boolean,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CheckChangeEventArgs {

            /**
             * Instance of the listbox model object.
             */
            model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * List item object.
                 */
                item?: any,

                /**
                 * The Datasource of the listbox.
                 */
                data?: any,

                /**
                 * List itemâ€™s index.
                 */
                index?: number,

                /**
                 * Set this option to true to cancel the event.
                 */
                cancel?: boolean,

                /**
                 * Boolean value based on whether the list item is checked or not.
                 */
                isChecked?: boolean,

                /**
                 * Boolean value based on whether the list item is selected or not.
                 */
                isSelected?: boolean,

                /**
                 * Boolean value based on the list item is enabled or not.
                 */
                isEnabled?: boolean,

                /**
                 * List itemâ€™s text (label).
                 */
                text?: string,

                /**
                 * List itemâ€™s value.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataBoundEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the data that is bound to DropDownList
                 */
                data?: any
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface PopupHideEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the selected text
                 */
                text?: string,

                /**
                 * returns the selected value
                 */
                value?: string
        }
        declare     export interface PopupResizeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the data from the resizable plugin.
                 */
                event?: any
        }
        declare     export interface PopupShownEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the selected text
                 */
                text?: string,

                /**
                 * returns the selected value
                 */
                value?: string
        }
        declare     export interface PopupResizeStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the data from the resizable plugin.
                 */
                event?: any
        }
        declare     export interface PopupResizeStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the data from the resizable plugin.
                 */
                event?: any
        }
        declare     export interface SearchEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the data bound to the DropDownList.
                 */
                items?: any,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * Returns the selected item text.
                 */
                selectedText?: string,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the search string typed in search box.
                 */
                searchString?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'Tooltip' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeCloseEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the event parameters from DatePicker.
                 */
                events?: any,

                /**
                 * returns the DatePicker popup.
                 */
                element?: HTMLElement
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface HoverEventArgs {

            /**
             * its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Tooltip model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface TrackingEventArgs {

            /**
             * its value is set as true,if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Tooltip model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface Animation {

            /**
             * Determines the type of effect.
             * @Default  {ej.Tooltip.Effect.None}
             */
            effect?: undefined.effect | string,

                /**
                 * Sets the animation speed in milliseconds.
                 * @Default  {4000}
                 */
                speed?: number
        }
        declare     export interface PositionTarget {

            /**
             * Sets the Tooltip position against target based on horizontal(x) value.
             * @Default  {center}
             */
            horizontal?: string | number,

                /**
                 * Sets the Tooltip position against target based on vertical(y) value.
                 * @Default  {top}
                 */
                vertical?: string | number
        }
        declare     export interface PositionStem {

            /**
             * Sets the arrow position again popup based on horizontal(x) value
             * @Default  {center}
             */
            horizontal?: string,

                /**
                 * Sets the arrow position again popup based on vertical(y) value
                 * @Default  {bottom}
                 */
                vertical?: string
        }
        declare     export interface Position {

            /**
             * Sets the Tooltip position against target.
             */
            target?: PositionTarget,

                /**
                 * Sets the arrow position again popup.
                 */
                stem?: PositionStem
        }
    }

    declare module 'Editor' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
    }

    declare class NumericTextbox mixins Editor {}
    declare class CurrencyTextbox mixins Editor {}
    declare class PercentageTextbox mixins Editor {}
    declare module 'ListView' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AjaxBeforeLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string
        }
        declare     export interface AjaxCompleteEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface AjaxErrorEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the failed data sent.
                 */
                data?: string
        }
        declare     export interface AjaxSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the successful data sent.
                 */
                data?: string,

                /**
                 * returns the AJAX content.
                 */
                content?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface LoadCompleteEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface MouseDownEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any,

                /**
                 * If the child element exist return true; otherwise, false.
                 */
                hasChild?: boolean,

                /**
                 * returns the current list item.
                 */
                item?: string,

                /**
                 * returns the current text of item.
                 */
                text?: string,

                /**
                 * returns the current Index of the item.
                 */
                index?: number,

                /**
                 * If checked return true; otherwise, false.
                 */
                isChecked?: boolean,

                /**
                 * returns the list of checked items.
                 */
                checkedItems?: number,

                /**
                 * returns the current checked item text.
                 */
                checkedItemsText?: string
        }
        declare     export interface MouseUPEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any,

                /**
                 * If the child element exist return true; otherwise, false.
                 */
                hasChild?: boolean,

                /**
                 * returns the current list item.
                 */
                item?: string,

                /**
                 * returns the current text of item.
                 */
                text?: string,

                /**
                 * returns the current Index of the item.
                 */
                index?: number,

                /**
                 * If checked return true; otherwise, false.
                 */
                isChecked?: boolean,

                /**
                 * returns the list of checked items.
                 */
                checkedItems?: number,

                /**
                 * returns the current checked item text.
                 */
                checkedItemsText?: string
        }
    }

    declare module 'MaskEdit' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface KeydownEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface KeyPressEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface KeyupEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
    }

    declare module 'Menu' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface KeydownEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'Pager' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
    }

    declare module 'ProgressBar' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CompleteEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface StartEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
    }

    declare module 'RadioButton' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeChangeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the CheckBox model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the status whether the element is checked or not.
                 */
                isChecked?: boolean
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'Rating' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface MouseoutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
    }

    declare module 'Ribbon' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeTabRemoveEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns current tab item index in the ribbon control.
                 */
                index?: number
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface GroupClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the control clicked in the group.
                 */
                target?: number
        }
        declare     export interface GroupExpandEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the clicked group expander.
                 */
                target?: number
        }
        declare     export interface GalleryItemClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the gallery model.
                 */
                galleryModel?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the item clicked in the gallery.
                 */
                target?: number
        }
        declare     export interface BackstageItemClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the item clicked in the gallery.
                 */
                target?: number,

                /**
                 * returns the id of the target item.
                 */
                id?: string,

                /**
                 * returns the text of the target item.
                 */
                text?: string
        }
        declare     export interface CollapseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ExpandEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface TabAddEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns new added tab header.
                 */
                tabHeader?: any,

                /**
                 * returns new added tab content panel.
                 */
                tabContent?: any
        }
        declare     export interface TabClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: any,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: any,

                /**
                 * returns current active index.
                 */
                activeIndex?: number
        }
        declare     export interface TabCreateEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns current ribbon tab item index
                 */
                deleteIndex?: number
        }
        declare     export interface TabRemoveEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the removed index.
                 */
                removedIndex?: number
        }
        declare     export interface TabSelectEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: any,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: any,

                /**
                 * returns current active index.
                 */
                activeIndex?: number
        }
        declare     export interface ToggleButtonClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the expand/collapse button.
                 */
                target?: number
        }
        declare     export interface QatMenuItemClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the clicked menu item text.
                 */
                text?: string
        }
        declare     export interface CollapsePinSettings {

            /**
             * Sets tooltip for the collapse pin .
             * @Default  {null}
             */
            toolTip?: string,

                /**
                 * Specifies the custom tooltip for collapse pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
                 * @Default  {Object}
                 */
                customToolTip?: any
        }
        declare     export interface ExpandPinSettings {

            /**
             * Sets tooltip for the expand pin.
             * @Default  {null}
             */
            toolTip?: string,

                /**
                 * Specifies the custom tooltip for expand pin.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
                 * @Default  {Object}
                 */
                customToolTip?: any
        }
        declare     export interface ApplicationTabBackstageSettingsPage {

            /**
             * Specifies the id for ribbon backstage page's tab and button elements.
             * @Default  {null}
             */
            id?: string,

                /**
                 * Specifies the text for ribbon backstage page's tab header and button elements.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Specifies the type for ribbon backstage page's contents. Set &quot;ej.Ribbon.BackStageItemType.Tab&quot; to render the tab or &quot;ej.Ribbon.BackStageItemType.Button&quot; to render the button.
                 * @Default  {ej.Ribbon.ItemType.Tab}
                 */
                itemType?: undefined.ItemType | string,

                /**
                 * Specifies the id of HTML elements like div,ul, etc., as ribbon backstage page's tab content.
                 * @Default  {null}
                 */
                contentID?: string,

                /**
                 * Specifies the separator between backstage page's tab and button elements.
                 * @Default  {false}
                 */
                enableSeparator?: boolean
        }
        declare     export interface ApplicationTabBackstageSettings {

            /**
             * Specifies the display text of application tab.
             * @Default  {null}
             */
            text?: string,

                /**
                 * Specifies the height of ribbon backstage page.
                 * @Default  {null}
                 */
                height?: string | number,

                /**
                 * Specifies the width of ribbon backstage page.
                 * @Default  {null}
                 */
                width?: string | number,

                /**
                 * Specifies the ribbon backstage page with its tab and button elements.
                 * @Default  {array}
                 */
                pages?: Array<ApplicationTabBackstageSettingsPage>,

                /**
                 * Specifies the width of backstage page header that contains tabs and buttons.
                 * @Default  {null}
                 */
                headerWidth?: string | number
        }
        declare     export interface ApplicationTab {

            /**
             * Specifies the ribbon backstage page items.
             * @Default  {object}
             */
            backstageSettings?: ApplicationTabBackstageSettings,

                /**
                 * Specifies the ID of ul list to create application menu in the ribbon control.
                 * @Default  {null}
                 */
                menuItemID?: string,

                /**
                 * Specifies the menu members, events by using the menu settings for the menu in the application tab.
                 * @Default  {object}
                 */
                menuSettings?: any,

                /**
                 * Specifies the application menu or backstage page. Specify the type of application tab as &quot;ej.Ribbon.ApplicationTabType.Menu&quot; to render the application menu or &quot;ej.Ribbon.ApplicationTabType.Backstage&quot; to render backstage page in the ribbon control.
                 * @Default  {ej.Ribbon.ApplicationTabType.Menu}
                 */
                type?: undefined.ApplicationTabType | string
        }
        declare     export interface ContextualTab {

            /**
             * Specifies the backgroundColor of the contextual tabs and tab set in the ribbon control.
             * @Default  {null}
             */
            backgroundColor?: string,

                /**
                 * Specifies the borderColor of the contextual tabs and tab set in the ribbon control.
                 * @Default  {null}
                 */
                borderColor?: string,

                /**
                 * Specifies the tabs to present in the contextual tabs and tab set. Refer to the tabs section for adding tabs into the contextual tabs and tab set.
                 * @Default  {array}
                 */
                tabs?: Array<any >
        }
        declare     export interface TabsGroupsContentDefaults {

            /**
             * Specifies the controls height such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
             * @Default  {null}
             */
            height?: string | number,

                /**
                 * Specifies the controls width such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
                 * @Default  {null}
                 */
                width?: string | number,

                /**
                 * Specifies the controls type such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
                 * @Default  {ej.Ribbon.Type.Button}
                 */
                type?: string,

                /**
                 * Specifies the controls size such as Syncfusion button,split button,dropdown list,toggle button in the subgroup of  the ribbon tab.
                 * @Default  {false}
                 */
                isBig?: boolean
        }
        declare     export interface TabsGroupsContentGroupsCustomGalleryItem {

            /**
             * Specifies the Syncfusion button members, events by using buttonSettings.
             * @Default  {object}
             */
            buttonSettings?: any,

                /**
                 * Specifies the type as ej.Ribbon.CustomItemType.Menu or ej.Ribbon.CustomItemType.Button to render Syncfusion button and menu.
                 * @Default  {ej.Ribbon.CustomItemType.Button}
                 */
                customItemType?: undefined.CustomItemType | string,

                /**
                 * Specifies the custom tooltip for gallery extra item's button. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
                 * @Default  {object}
                 */
                customToolTip?: any,

                /**
                 * Specifies the UL list id to render menu as gallery extra item.
                 * @Default  {null}
                 */
                menuId?: string,

                /**
                 * Specifies the Syncfusion menu members, events by using menuSettings.
                 * @Default  {object}
                 */
                menuSettings?: any,

                /**
                 * Specifies the text for gallery extra item's button.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Specifies the tooltip for gallery extra item's button.
                 * @Default  {null}
                 */
                toolTip?: string
        }
        declare     export interface TabsGroupsContentGroupsCustomToolTip {

            /**
             * Sets content to the custom tooltip. Text and HTML support are provided for content.
             * @Default  {null}
             */
            content?: string,

                /**
                 * Sets icon to the custom tooltip content.
                 * @Default  {null}
                 */
                prefixIcon?: string,

                /**
                 * Sets title to the custom tooltip. Text and HTML support are provided for title and the title is in bold for text format.
                 * @Default  {null}
                 */
                title?: string
        }
        declare     export interface TabsGroupsContentGroupsGalleryItem {

            /**
             * Specifies the Syncfusion button members, events by using buttonSettings.
             * @Default  {object}
             */
            buttonSettings?: any,

                /**
                 * Specifies the custom tooltip for gallery content. Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
                 * @Default  {object}
                 */
                customToolTip?: any,

                /**
                 * Sets text for the gallery content.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Sets tooltip for the gallery content.
                 * @Default  {null}
                 */
                toolTip?: string
        }
        declare     export interface TabsGroupsContentGroup {

            /**
             * Specifies the Syncfusion button members, events by using this buttonSettings.
             * @Default  {object}
             */
            buttonSettings?: any,

                /**
                 * It is used to set the count of gallery contents in a row.
                 * @Default  {null}
                 */
                columns?: number,

                /**
                 * Specifies the custom items such as div, table, controls as custom controls with the type &quot;ej.Ribbon.Type.Custom&quot; in the groups.
                 * @Default  {null}
                 */
                contentID?: string,

                /**
                 * Specifies the CSS class property to apply styles to the button, split, dropdown controls in the groups.
                 * @Default  {null}
                 */
                cssClass?: string,

                /**
                 * Specifies the Syncfusion button and menu as gallery extra items.
                 * @Default  {array}
                 */
                customGalleryItems?: Array<TabsGroupsContentGroupsCustomGalleryItem>,

                /**
                 * Provides custom tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups. Text and HTML support are also provided for title and content.
                 * @Default  {Object}
                 */
                customToolTip?: TabsGroupsContentGroupsCustomToolTip,

                /**
                 * Specifies the Syncfusion dropdown list members, events by using this dropdownSettings.
                 * @Default  {object}
                 */
                dropdownSettings?: any,

                /**
                 * Specifies the separator to the control that is in row type group. The separator separates the control from the next control in the group. Set &quot;true&quot; to enable the separator.
                 * @Default  {false}
                 */
                enableSeparator?: boolean,

                /**
                 * Sets the count of gallery contents in a row, when the gallery is in expanded state.
                 * @Default  {null}
                 */
                expandedColumns?: number,

                /**
                 * Defines each gallery content.
                 * @Default  {array}
                 */
                galleryItems?: Array<TabsGroupsContentGroupsGalleryItem>,

                /**
                 * Specifies the Id for button, split button, dropdown list, toggle button, gallery, custom controls in the sub groups.
                 * @Default  {null}
                 */
                id?: string,

                /**
                 * Specifies the size for button, split button controls. Set &quot;true&quot; for big size and &quot;false&quot; for small size.
                 * @Default  {null}
                 */
                isBig?: boolean,

                /**
                 * Sets the height of each gallery content.
                 * @Default  {null}
                 */
                itemHeight?: string | number,

                /**
                 * Sets the width of each gallery content.
                 * @Default  {null}
                 */
                itemWidth?: string | number,

                /**
                 * Specifies the Syncfusion split button members, events by using this splitButtonSettings.
                 * @Default  {object}
                 */
                splitButtonSettings?: any,

                /**
                 * Specifies the text for button, split button, toggle button controls in the sub groups.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Specifies the Syncfusion toggle button members, events by using toggleButtonSettings.
                 * @Default  {object}
                 */
                toggleButtonSettings?: any,

                /**
                 * Specifies the tooltip for button, split button, dropdown list, toggle button, custom controls in the sub groups.
                 * @Default  {null}
                 */
                toolTip?: string,

                /**
                 * To add,show and hide controls in Quick Access toolbar.
                 * @Default  {ej.Ribbon.QuickAccessMode.None}
                 */
                quickAccessMode?: undefined.QuickAccessMode | string,

                /**
                 * Specifies the type as &quot;ej.Ribbon.Type.Button&quot; or &quot;ej.Ribbon.Type.SplitButton&quot; or &quot;ej.Ribbon.Type.DropDownList&quot; or &quot;ej.Ribbon.Type.ToggleButton&quot; or &quot;ej.Ribbon.Type.Custom&quot; or &quot;ej.Ribbon.Type.Gallery&quot; to render button, split, dropdown, toggle button, gallery, custom controls.
                 * @Default  {ej.Ribbon.Type.Button}
                 */
                type?: undefined.Type | string
        }
        declare     export interface TabsGroupsContent {

            /**
             * Specifies the height, width, type, isBig property to the controls in the group commonly.
             * @Default  {object}
             */
            defaults?: TabsGroupsContentDefaults,

                /**
                 * Specifies the controls such as Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls in the subgroup of the ribbon tab .
                 * @Default  {array}
                 */
                groups?: Array<TabsGroupsContentGroup >
        }
        declare     export interface TabsGroupsGroupExpanderSettings {

            /**
             * Sets tooltip for the group expander of the group.
             * @Default  {null}
             */
            toolTip?: string,

                /**
                 * Specifies the custom tooltip for group expander.Refer to ejRibbon#tabs-&gt;groups-&gt;content-&gt;groups-&gt;customToolTip for its inner properties.
                 * @Default  {Object}
                 */
                customToolTip?: any
        }
        declare     export interface TabsGroup {

            /**
             * Specifies the alignment of controls in the groups in 'row' type or 'column' type. Value for row type is &quot;ej.Ribbon.AlignType.Rows&quot; and for column type is &quot;ej.Ribbon.alignType.columns&quot;.
             * @Default  {ej.Ribbon.AlignType.Rows}
             */
            alignType?: undefined.AlignType | string,

                /**
                 * Specifies the Syncfusion button, split button, dropdown list, toggle button, gallery, custom controls to the groups in the ribbon control.
                 * @Default  {array}
                 */
                content?: Array<TabsGroupsContent>,

                /**
                 * Specifies the ID of custom items to be placed in the groups.
                 * @Default  {null}
                 */
                contentID?: string,

                /**
                 * Specifies the HTML contents to place into the groups.
                 * @Default  {null}
                 */
                customContent?: string,

                /**
                 * Specifies the group expander for groups in the ribbon control. Set &quot;true&quot; to enable the group expander.
                 * @Default  {false}
                 */
                enableGroupExpander?: boolean,

                /**
                 * Sets custom setting to the groups in the ribbon control.
                 * @Default  {Object}
                 */
                groupExpanderSettings?: TabsGroupsGroupExpanderSettings,

                /**
                 * Specifies the text to the groups in the ribbon control.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Specifies the custom items such as div, table, controls by using the &quot;custom&quot; type.
                 * @Default  {null}
                 */
                type?: string
        }
        declare     export interface Tab {

            /**
             * Specifies single group or multiple groups and its contents to each tab in the ribbon control.
             * @Default  {array}
             */
            groups?: Array<TabsGroup>,

                /**
                 * Specifies the ID for each tab's content panel.
                 * @Default  {null}
                 */
                id?: string,

                /**
                 * Specifies the text of the tab in the ribbon control.
                 * @Default  {null}
                 */
                text?: string
        }
    }

    declare module 'Kanban' {
        declare     export interface KanbanSelection {

            /**
             * It is used to clear all the card selection.
             * @returns  
             */
            clear(): void
        }
        declare     export interface KanbanSwimlane {

            /**
             * Expand all the swimlane rows in Kanban.
             * @returns  
             */
            expandAll(): void,

                /**
                 * Collapse all the swimlane rows in Kanban.
                 * @returns  
                 */
                collapseAll(): void,

                /**
                 * Expand or collapse the swimlane row based on the state of target &quot;div&quot;
                 * @param  the div object to toggleSwimlane row based on its row state
                 * @returns  
                 */
                toggle($div: any): void
        }
        declare     export interface KanbanFilter {

            /**
             * Method used for send a clear search request to Kanban.
             * @returns  
             */
            clearSearch(): void,

                /**
                 * Send a search request to Kanban with specified string passed in it.
                 * @param  the string to search in Kanban card
                 * @returns  
                 */
                searchCards(searchString: string): void,

                /**
                 * Send a clear request to filter cards in the kanban.
                 * @returns  
                 */
                clearFilter(): void,

                /**
                 * Send a filtering request to cards in the kanban.
                 * @returns  
                 */
                filterCards(): void
        }
        declare     export interface KanbanEdit {

            /**
             * Add a new card in Kanban control.If parameters are not given default dialog will be open.
             * @param  the primary key field Name of the column
             * @param  the edited JSON data of card need to be add.
             * @returns  
             */
            addCard(primaryKey: string, card: Array<any>): void,

                /**
                 * Send a cancel request of add/edit card in Kanban.
                 * @returns  
                 */
                cancelEdit(): void,

                /**
                 * Delete a card in Kanban control.
                 * @param  the key of card to be delete
                 * @returns  
                 */
                deleteCard(Key: string | number): void,

                /**
                 * Send a save request in Kanban when any card is in edit/new add card state.
                 * @returns  
                 */
                endEdit(): void,

                /**
                 * Send an edit card request in Kanban.Parameter will be HTML element or primary key
                 * @param  the div selected row element to be edited in Kanban
                 * @returns  
                 */
                startEdit($div: any): void,

                /**
                 * Method used for set validation to a field during editing.
                 * @param  the name of the column to set validation rules
                 * @param  the validation rules for the field
                 * @returns  
                 */
                setValidationToField(name: string, rules: any): void
        }
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface ActionFailureEventArgs {}
        declare     export interface BeginEditEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns primary key value.
                 */
                primaryKeyValue?: string,

                /**
                 * Returns begin edit data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeginAddEventArgs {

            /**
             * Returns the Kanban model.
             */
            model?: any,

                /**
                 * Returns primary key value.
                 */
                primaryKeyValue?: string,

                /**
                 * Returns beginAdd data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeCardSelectEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the select cell index value.
                 */
                cellIndex?: number,

                /**
                 * Returns the select card index value.
                 */
                cardIndex?: number,

                /**
                 * Returns the select cell element
                 */
                currentCell?: any,

                /**
                 * Returns the previously select the card element
                 */
                previousCard?: any,

                /**
                 * Returns the previously select card indexes
                 */
                previousRowcellindex?: Array<any>,

                /**
                 * Returns the Target item.
                 */
                Target?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns select card data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the current card to the Kanban.
                 */
                currentCard?: string,

                /**
                 * Returns Kanban element.
                 */
                target?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns the Header text of the column corresponding to the selected card.
                 */
                columnName?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardDragEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns drag data.
                 */
                data?: any,

                /**
                 * Returns drag start element.
                 */
                dragtarget?: any,

                /**
                 * Returns dragged element.
                 */
                draggedElement?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardDragStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns card drag start data.
                 */
                data?: any,

                /**
                 * Returns dragged element.
                 */
                draggedElement?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns drag start element.
                 */
                dragtarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardDragStopEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns dragged element.
                 */
                draggedElement?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns drag stop element.
                 */
                droptarget?: any,

                /**
                 * Returns drag stop data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardDropEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns dragged element.
                 */
                draggedElement?: any,

                /**
                 * Returns previous parent of dragged element
                 */
                draggedParent?: any,

                /**
                 * Returns dragged data.
                 */
                data?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns drop element.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardSelectEventArgs {

            /**
             * Returns the select cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the select card index value.
                 */
                cardIndex?: number,

                /**
                 * Returns the select cell element
                 */
                currentCell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the previously select the card element
                 */
                previousCard?: any,

                /**
                 * Returns the previously select card indexes
                 */
                previousRowcellindex?: Array<any>,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns select card data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CardDoubleClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current card object (JSON).
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface SwimlaneSettings {

            /**
             * To enable or disable items count in swim lane.
             * @Default  {true}
             */
            showCount?: boolean,

                /**
                 * To enable or disable DragAndDrop across swim lane.
                 * @Default  {false}
                 */
                allowDragAndDrop?: boolean
        }
        declare     export interface ContextMenuSettingsCustomMenuItem {

            /**
             * Its sets target element to custom context menu item.
             * @Default  {ej.Kanban.Target.All}
             */
            target?: undefined.Target | string,

                /**
                 * Gets the display name to custom menu item.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Gets the template to render custom context menu item.
                 * @Default  {null}
                 */
                template?: string
        }
        declare     export interface ContextMenuSettings {

            /**
             * The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default  {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, Sortby, |, NewFolder, Upload, |, Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any,

                /**
                 * The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
                 * @Default  {[]}
                 */
                customMenuFields?: Array<any >
        }
        declare     export interface ColumnsConstraints {

            /**
             * It is used to specify the type of constraints as column or swimlane.
             * @Default  {null}
             */
            type?: string,

                /**
                 * It is used to specify the minimum amount of card in particular column cell or swimlane cell can hold.
                 * @Default  {null}
                 */
                min?: number,

                /**
                 * It is used to specify the maximum amount of card in particular column cell or swimlane cell can hold.
                 * @Default  {null}
                 */
                max?: number
        }
        declare     export interface Column {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified columns header text.
             * @Default  {null}
             */
            headerText?: string,

                /**
                 * To customize the totalCount properties.
                 * @Default  {false}
                 */
                totalCount?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns key.
                 * @Default  {null}
                 */
                key?: string | number,

                /**
                 * To enable/disable allowDrop for specific column wise.
                 * @Default  {false}
                 */
                allowDrop?: boolean,

                /**
                 * To enable/disable allowDrag for specific column wise.
                 * @Default  {false}
                 */
                allowDrag?: boolean,

                /**
                 * To set column collapse or expand state
                 * @Default  {false}
                 */
                isCollapsed?: boolean,

                /**
                 * To customize the column level constraints with minimum ,maximum limit validation.
                 * @Default  {object}
                 */
                constraints?: ColumnsConstraints,

                /**
                 * Gets or sets a value that indicates to add the template within the header element.
                 * @Default  {null}
                 */
                headerTemplate?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns width.
                 * @Default  {null}
                 */
                width?: string | number,

                /**
                 * Gets or sets an object that indicates to set specific column visibility.
                 * @Default  {true}
                 */
                visible?: boolean,

                /**
                 * Gets or sets an object that indicates whether to show add new button.
                 * @Default  {false}
                 */
                showAddButton?: boolean
        }
        declare     export interface CardSettings {

            /**
             * Gets or sets a value that indicates to add the template for card .
             * @Default  {null}
             */
            template?: string,

                /**
                 * To customize the card border color based on assigned task. Colors and corresponding values defined here will be mapped with colorField mapped data source column.
                 * @Default  {Object}
                 */
                colorMapping?: any
        }
        declare     export interface CustomToolbarItem {

            /**
             * Gets the template to render customToolbarItems.
             * @Default  {null}
             */
            template?: string
        }
        declare     export interface EditSettingsEditItem {

            /**
             * It is used to map editing field from the data source.
             * @Default  {null}
             */
            field?: string,

                /**
                 * It is used to set the particular editType in the card for editing.
                 * @Default  {ej.Kanban.EditingType.String}
                 */
                editType?: undefined.EditingType | string,

                /**
                 * Gets or sets a value that indicates to define constraints for saving data to the database.
                 * @Default  {Object}
                 */
                validationRules?: any,

                /**
                 * It is used to set the particular editparams in the card for editing.
                 * @Default  {Object}
                 */
                editParams?: any,

                /**
                 * It is used to specify defaultValue for the fields while adding new card.
                 * @Default  {null}
                 */
                defaultValue?: string | number
        }
        declare     export interface EditSettings {

            /**
             * Gets or sets a value that indicates whether to enable the editing action in cards of Kanban.
             * @Default  {false}
             */
            allowEditing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the adding action in cards behavior on Kanban.
                 * @Default  {false}
                 */
                allowAdding?: boolean,

                /**
                 * This specifies the id of the template which is require to be edited using the Dialog Box.
                 * @Default  {null}
                 */
                dialogTemplate?: string,

                /**
                 * Get or sets an object that indicates whether to customize the editMode of the Kanban.
                 * @Default  {ej.Kanban.EditMode.Dialog}
                 */
                editMode?: undefined.EditMode | string,

                /**
                 * Get or sets an object that indicates whether to customize the editing fields of Kanban card.
                 * @Default  {Array}
                 */
                editItems?: Array<EditSettingsEditItem>,

                /**
                 * This specifies the id of the template which is require to be edited using the External edit form.
                 * @Default  {null}
                 */
                externalFormTemplate?: string,

                /**
                 * This specifies to set the position of an External edit form either in the right or bottom of the Kanban.
                 * @Default  {ej.Kanban.FormPosition.Bottom}
                 */
                formPosition?: undefined.FormPosition | string
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
        declare     export interface FilterSetting {

            /**
             * Gets or sets an object of display name to filter queries.
             * @Default  {null}
             */
            text?: string,

                /**
                 * Gets or sets an object that Queries to perform filtering
                 * @Default  {Object}
                 */
                query?: any,

                /**
                 * Gets or sets an object of tooltip to filter buttons.
                 * @Default  {null}
                 */
                description?: string
        }
        declare     export interface ScrollSettings {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified scroll height.
             * @Default  {0}
             */
            height?: string | number,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified scroll width.
                 * @Default  {auto}
                 */
                width?: string | number,

                /**
                 * To allow the Kanban to freeze particular swimlane at the time of scrolling , until scroll reaches next swimlane and it continues.
                 * @Default  {false}
                 */
                allowFreezeSwimlane?: boolean
        }
        declare     export interface SearchSettings {

            /**
             * To customize the fields the searching operation can be perform.
             * @Default  {Array}
             */
            fields?: Array<any>,

                /**
                 * To customize the searching string.
                 */
                key?: string,

                /**
                 * To customize the operator based on searching.
                 * @Default  {contains}
                 */
                operator?: string,

                /**
                 * To customize the ignore case based on searching.
                 * @Default  {true}
                 */
                ignoreCase?: boolean
        }
        declare     export interface StackedHeaderRowsStackedHeaderColumn {

            /**
             * Gets or sets a value that indicates the headerText for the particular stacked header column.
             * @Default  {null}
             */
            headerText?: string,

                /**
                 * Gets or sets a value that indicates the column for the particular stacked header column.
                 * @Default  {null}
                 */
                column?: string
        }
        declare     export interface StackedHeaderRow {

            /**
             * Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows.
             * @Default  {Array}
             */
            stackedHeaderColumns?: Array<StackedHeaderRowsStackedHeaderColumn >
        }
        declare     export interface TooltipSettings {

            /**
             * To enable or disable the tooltip display.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * To customize the tooltip display based on your requirements.
                 * @Default  {null}
                 */
                template?: string
        }
        declare     export interface Workflow {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified workflows key.
             * @Default  {null}
             */
            key?: string | number,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified workflows allowed Transitions.
                 * @Default  {null}
                 */
                allowedTransitions?: string
        }
    }

    declare module 'Rotator' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface PagerClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
        declare     export interface StartEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
        declare     export interface StopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
        declare     export interface ThumbItemClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'RTE' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ContextMenuClickEventArgs {

            /**
             * returns clicked menu item text.
             */
            text?: string,

                /**
                 * returns clicked menu item element.
                 */
                element?: any,

                /**
                 * returns the selected item.
                 */
                selectedItem?: number
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ExecuteEventArgs {

            /**
             * When the event is canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the RTE model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string
        }
        declare     export interface KeydownEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface KeyupEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface PreRenderEventArgs {

            /**
             * When the event is canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the RTE model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
        declare     export interface FileBrowser {

            /**
             * This API is used to receive the server-side handler for file related operations.
             */
            ajaxAction?: string,

                /**
                 * Specifies the file type extension shown in the file browser window.
                 */
                extensionAllow?: string,

                /**
                 * Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected files to the current directory.
                 */
                filePath?: string
        }
        declare     export interface ImageBrowser {

            /**
             * This API is used to receive the server-side handler for the file related operations.
             */
            ajaxAction?: string,

                /**
                 * Specifies the file type extension shown in the image browser window.
                 */
                extensionAllow?: string,

                /**
                 * Specifies the directory to perform operations like create, delete and rename folder and files, and upload the selected images to the current directory.
                 */
                filePath?: string
        }
        declare     export interface ToolsCustomOrderedList {

            /**
             * Specifies the name for customOrderedList item.
             */
            name?: string,

                /**
                 * Specifies the title for customOrderedList item.
                 */
                tooltip?: string,

                /**
                 * Specifies the styles for customOrderedList item.
                 */
                css?: string,

                /**
                 * Specifies the text for customOrderedList item.
                 */
                text?: string,

                /**
                 * Specifies the list style for customOrderedList item.
                 */
                listStyle?: string,

                /**
                 * Specifies the image for customOrderedList item.
                 */
                listImage?: string
        }
        declare     export interface ToolsCustomUnorderedList {

            /**
             * Specifies the name for customUnorderedList item.
             */
            name?: string,

                /**
                 * Specifies the title for customUnorderedList item.
                 */
                tooltip?: string,

                /**
                 * Specifies the styles for customUnorderedList item.
                 */
                css?: string,

                /**
                 * Specifies the text for customUnorderedList item.
                 */
                text?: string,

                /**
                 * Specifies the list style for customUnorderedList item.
                 */
                listStyle?: string,

                /**
                 * Specifies the image for customUnorderedList item.
                 */
                listImage?: string
        }
        declare     export interface Tools {

            /**
             * Specifies the alignment tools and the display order of this tool in the RTE toolbar.
             */
            alignment?: any,

                /**
                 * Specifies the casing tools and the display order of this tool in the RTE toolbar.
                 */
                casing?: Array<any>,

                /**
                 * Specifies the clear tools and the display order of this tool in the RTE toolbar.
                 */
                clear?: Array<any>,

                /**
                 * Specifies the clipboard tools and the display order of this tool in the RTE toolbar.
                 */
                clipboard?: Array<any>,

                /**
                 * Specifies the edit tools and the displays tool in the RTE toolbar.
                 */
                edit?: Array<any>,

                /**
                 * Specifies the doAction tools and the display order of this tool in the RTE toolbar.
                 */
                doAction?: Array<any>,

                /**
                 * Specifies the effect of tools and the display order of this tool in RTE toolbar.
                 */
                effects?: Array<any>,

                /**
                 * Specifies the font tools and the display order of this tool in the RTE toolbar.
                 */
                font?: Array<any>,

                /**
                 * Specifies the formatStyle tools and the display order of this tool in the RTE toolbar.
                 */
                formatStyle?: Array<any>,

                /**
                 * Specifies the image tools and the display order of this tool in the RTE toolbar.
                 */
                images?: Array<any>,

                /**
                 * Specifies the indent tools and the display order of this tool in the RTE toolbar.
                 */
                indenting?: Array<any>,

                /**
                 * Specifies the link tools and the display order of this tool in the RTE toolbar.
                 */
                links?: Array<any>,

                /**
                 * Specifies the list tools and the display order of this tool in the RTE toolbar.
                 */
                lists?: Array<any>,

                /**
                 * Specifies the media tools and the display order of this tool in the RTE toolbar.
                 */
                media?: Array<any>,

                /**
                 * Specifies the style tools and the display order of this tool in the RTE toolbar.
                 */
                style?: Array<any>,

                /**
                 * Specifies the table tools and the display order of this tool in the RTE toolbar.
                 */
                tables?: Array<any>,

                /**
                 * Specifies the view tools and the display order of this tool in the RTE toolbar.
                 */
                view?: Array<any>,

                /**
                 * Specifies the print tools and the display order of this tool in the RTE toolbar.
                 */
                print?: Array<any>,

                /**
                 * Specifies the customOrderedList tools and the display order of this tool in the RTE toolbar.
                 */
                customOrderedList?: Array<ToolsCustomOrderedList>,

                /**
                 * Specifies the customUnOrderedList tools and the display order of this tool in the RTE toolbar.
                 */
                customUnorderedList?: Array<ToolsCustomUnorderedList >
        }
    }

    declare module 'Slider' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface SlideEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns current handle number or index
                 */
                sliderIndex?: number,

                /**
                 * returns slider id
                 */
                id?: string,

                /**
                 * returns the slider model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the slider value
                 */
                value?: number
        }
        declare     export interface StartEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
        declare     export interface StopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
        declare     export interface TooltipChangeEventArgs {}
    }

    declare module 'slider' {

    }

    declare module 'SplitButton' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ItemMouseOutEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the split button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the clicked menu item element
                 */
                element?: any,

                /**
                 * returns the event
                 */
                event?: any
        }
        declare     export interface ItemMouseOutEvent {

            /**
             * return the menu item id
             */
            ID?: string,

                /**
                 * return the clicked menu item text
                 */
                Text?: string
        }
        declare     export interface ItemMouseOverEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the split button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the clicked menu item element
                 */
                element?: any,

                /**
                 * returns the event
                 */
                event?: any
        }
        declare     export interface ItemMouseOverEvent {

            /**
             * return the menu item id
             */
            ID?: string,

                /**
                 * return the clicked menu item text
                 */
                Text?: string
        }
        declare     export interface ItemSelectedEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the split button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the clicked menu item element
                 */
                element?: any,

                /**
                 * returns the selected item
                 */
                selectedItem?: any,

                /**
                 * return the menu id
                 */
                menuId?: string,

                /**
                 * return the clicked menu item text
                 */
                menuText?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
    }

    declare module 'Splitter' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeExpandCollapseEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns collapsed pane details.
                 */
                collapsed?: any,

                /**
                 * returns expanded pane details.
                 */
                expanded?: any,

                /**
                 * returns the splitter model.
                 */
                model?: undefined.Model,

                /**
                 * returns the current split bar index.
                 */
                splitbarIndex?: number,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ExpandCollapseEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns collapsed pane details.
                 */
                collapsed?: any,

                /**
                 * returns expanded pane details.
                 */
                expanded?: any,

                /**
                 * returns the splitter model.
                 */
                model?: undefined.Model,

                /**
                 * returns the current split bar index.
                 */
                splitbarIndex?: number,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ResizeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
    }

    declare module 'Tab' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ItemActiveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tab model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: HTMLElement,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: HTMLElement,

                /**
                 * returns current active index.
                 */
                activeIndex?: number,

                /**
                 * returns, is it triggered by interaction or not.
                 */
                isInteraction?: boolean
        }
        declare     export interface AjaxBeforeLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string
        }
        declare     export interface AjaxErrorEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the failed data sent.
                 */
                data?: string
        }
        declare     export interface AjaxLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the name of the URL
                 */
                URL?: string
        }
        declare     export interface AjaxSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the accordion model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns current AJAX content location
                 */
                URL?: string,

                /**
                 * returns the successful data sent.
                 */
                data?: string,

                /**
                 * returns the AJAX content.
                 */
                content?: string
        }
        declare     export interface BeforeActiveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tab model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: HTMLElement,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: HTMLElement,

                /**
                 * returns current active index.
                 */
                activeIndex?: number,

                /**
                 * returns, is it triggered by interaction or not.
                 */
                isInteraction?: boolean
        }
        declare     export interface BeforeItemRemoveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tab model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns current tab item index
                 */
                index?: number
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ItemAddEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tab model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns new added tab header.
                 */
                tabHeader?: HTMLElement,

                /**
                 * returns new added tab content panel.
                 */
                tabContent?: any
        }
        declare     export interface ItemRemoveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tab model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns removed tab header.
                 */
                removedTab?: HTMLElement
        }
        declare interface AjaxSettings {
            type?: string,
                cache: boolean,
                data?: any,
                dataType?: string,
                contentType?: any,
                async?: boolean
        }
    }

    declare module 'TagCloud' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface MouseoutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface MouseoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'TimePicker' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeChangeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the CheckBox model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the status whether the element is checked or not.
                 */
                isChecked?: boolean
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface FocusInEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
    }

    declare module 'ToggleButton' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'Toolbar' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface FocusOutEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ItemHoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Toolbar model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the target of the current object.
                 */
                target?: any,

                /**
                 * returns the target of the current object.
                 */
                currentTarget?: any,

                /**
                 * return the Toolbar state
                 */
                status?: boolean
        }
        declare     export interface ItemLeaveEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Toolbar model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the target of the current object.
                 */
                target?: any,

                /**
                 * returns the target of the current object.
                 */
                currentTarget?: any,

                /**
                 * return the Toolbar state
                 */
                status?: boolean
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
    }

    declare module 'TreeView' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeAddEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the given new node data
                 */
                data?: string | any,

                /**
                 * returns the parent element, the given new nodes to be appended to the given parent element
                 */
                targetParent?: any,

                /**
                 * returns the given parent node details
                 */
                parentDetails?: any
        }
        declare     export interface BeforeCollapseEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * returns the child nodes are loaded or not
                 */
                isChildLoaded?: boolean,

                /**
                 * returns the id of currently clicked node
                 */
                id?: string,

                /**
                 * returns the parent id of currently clicked node
                 */
                parentId?: string,

                /**
                 * returns the format asynchronous or synchronous 
                 */
                async?: boolean
        }
        declare     export interface BeforeCutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the target element, the given node to be cut
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any,

                /**
                 * returns the key pressed key code value
                 */
                keyCode?: number
        }
        declare     export interface BeforeDeleteEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the target element, the given node to be deleted
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any,

                /**
                 * returns the current parent element of the target node
                 */
                parentElement?: any,

                /**
                 * returns the parent node values
                 */
                parentDetails?: any,

                /**
                 * returns the currently removed nodes
                 */
                removedNodes?: Array<any >
        }
        declare     export interface BeforeEditEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any
        }
        declare     export interface BeforeExpandEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * if the child node is ready to expanded state; otherwise, false.
                 */
                isChildLoaded?: boolean,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * returns the id of currently clicked node
                 */
                id?: string,

                /**
                 * returns the parent id of currently clicked node
                 */
                parentId?: string,

                /**
                 * returns the format asynchronous or synchronous 
                 */
                async?: boolean
        }
        declare     export interface BeforeLoadEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the AJAX settings object
                 */
                AjaxOptions?: any
        }
        declare     export interface BeforePasteEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the target element, the given node to be pasted
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any,

                /**
                 * returns the key pressed key code value
                 */
                keyCode?: number
        }
        declare     export interface BeforeSelectEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the target element, the given node to be selected
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface InlineEditValidationEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the new entered text for the node
                 */
                newText?: string,

                /**
                 * returns the current node element id
                 */
                id?: any,

                /**
                 * returns the old node text
                 */
                oldText?: string
        }
        declare     export interface KeyPressEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface LoadErrorEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the AJAX error object
                 */
                error?: any
        }
        declare     export interface LoadSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the success data from the URL
                 */
                data?: any,

                /**
                 * returns the target parent element, the data returned from the URL to be appended to the given parent element, else in TreeView
                 */
                targetParent?: any,

                /**
                 * returns the given parent node details
                 */
                parentDetails?: any
        }
        declare     export interface NodeAddEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the added data, that are given initially
                 */
                data?: any,

                /**
                 * returns the newly added elements
                 */
                nodes?: any,

                /**
                 * returns the target parent element of the added element
                 */
                parentElement?: any,

                /**
                 * returns the given parent node details
                 */
                parentDetails?: any
        }
        declare     export interface NodeCheckEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * returns the id of the current element of the node clicked
                 */
                id?: string,

                /**
                 * returns the id of the parent element of current element of the node clicked
                 */
                parentId?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * it returns true when the node checkbox is checked; otherwise, false.
                 */
                isChecked?: boolean,

                /**
                 * it returns the currently checked node name
                 */
                currentNode?: Array<any>,

                /**
                 * it returns the currently checked and its child node details
                 */
                currentCheckedNodes?: Array<any >
        }
        declare     export interface NodeClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * returns the id of current element
                 */
                id?: string,

                /**
                 * returns the parentId of current element
                 */
                parentId?: string
        }
        declare     export interface NodeCollapseEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the id of the current element of the node clicked
                 */
                id?: string,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the id of the parent element of current element of the node clicked
                 */
                parentId?: string,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * returns the child nodes are loaded or not
                 */
                isChildLoaded?: boolean,

                /**
                 * returns the format asynchronous or synchronous 
                 */
                async?: boolean
        }
        declare     export interface NodeCutEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the current parent element of the cut node
                 */
                parentElement?: any,

                /**
                 * returns the given parent node details
                 */
                parentDetails?: any,

                /**
                 * returns the key pressed key code value
                 */
                keyCode?: number
        }
        declare     export interface NodeDeleteEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the current parent element of the deleted node
                 */
                parentElement?: any,

                /**
                 * returns the given parent node details
                 */
                parentDetails?: any,

                /**
                 * returns the currently removed nodes
                 */
                removedNodes?: Array<any >
        }
        declare     export interface NodeDragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the original drag target
                 */
                dragTarget?: any,

                /**
                 * returns the current target TreeView node
                 */
                target?: any,

                /**
                 * returns the current target details
                 */
                targetElementData?: any,

                /**
                 * returns the current parent element of the target node
                 */
                draggedElement?: any,

                /**
                 * returns the given parent node details
                 */
                draggedElementData?: any,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface NodeDragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the original drag target
                 */
                dragTarget?: any,

                /**
                 * returns the current dragging parent TreeView node
                 */
                parentElement?: any,

                /**
                 * returns the current dragging parent TreeView node details
                 */
                parentElementData?: any,

                /**
                 * returns the current parent element of the dragging node
                 */
                target?: any,

                /**
                 * returns the given parent node details
                 */
                targetElementData?: any,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface NodeDragStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the original drop target
                 */
                dropTarget?: any,

                /**
                 * returns the current dragged TreeView node
                 */
                draggedElement?: any,

                /**
                 * returns the current dragged TreeView node details
                 */
                draggedElementData?: any,

                /**
                 * returns the current parent element of the dragged node
                 */
                target?: any,

                /**
                 * returns the given parent node details
                 */
                targetElementData?: any,

                /**
                 * returns the drop position such as before, after or over
                 */
                position?: string,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface NodeDroppedEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the original drop target
                 */
                dropTarget?: any,

                /**
                 * returns the current dropped TreeView node
                 */
                droppedElement?: any,

                /**
                 * returns the current dropped TreeView node details
                 */
                droppedElementData?: any,

                /**
                 * returns the current parent element of the dropped node
                 */
                target?: any,

                /**
                 * returns the given parent node details
                 */
                targetElementData?: any,

                /**
                 * returns the drop position such as before, after or over
                 */
                position?: string,

                /**
                 * returns the event object
                 */
                event?: any
        }
        declare     export interface NodeEditEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the id of the element
                 */
                id?: string,

                /**
                 * returns the oldText of the element
                 */
                oldText?: string,

                /**
                 * returns the newText of the element
                 */
                newText?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the target element, the given node to be cut
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any
        }
        declare     export interface NodeExpandEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * if the child node is ready to expanded state; otherwise, false.
                 */
                isChildLoaded?: boolean,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * returns the id of currently clicked node
                 */
                id?: string,

                /**
                 * returns the parent id of currently clicked node
                 */
                parentId?: string,

                /**
                 * returns the format asynchronous or synchronous 
                 */
                async?: boolean
        }
        declare     export interface NodePasteEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the pasted element
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any,

                /**
                 * returns the key pressed key code value
                 */
                keyCode?: number
        }
        declare     export interface NodeSelectEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the id of the current element of the node clicked
                 */
                id?: any,

                /**
                 * returns the id of the parent element of current element of the node clicked
                 */
                parentId?: any,

                /**
                 * returns the current selected nodes index of TreeView
                 */
                selectedNodes?: Array<any>,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any
        }
        declare     export interface NodeUncheckEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event object
                 */
                event?: any,

                /**
                 * returns the id of the current element of the node clicked
                 */
                id?: any,

                /**
                 * returns the id of the parent element of current element of the node clicked
                 */
                parentId?: any,

                /**
                 * returns the value of the node
                 */
                value?: string,

                /**
                 * returns the current element of the node clicked
                 */
                currentElement?: any,

                /**
                 * it returns true when the node checkbox is checked; otherwise, false.
                 */
                isChecked?: boolean,

                /**
                 * it returns currently unchecked node name
                 */
                currentNode?: string,

                /**
                 * it returns currently unchecked node and its child node details.
                 */
                currentUncheckedNodes?: Array<any >
        }
        declare     export interface NodeUnselectEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the current element of the node unselected
                 */
                currentElement?: any,

                /**
                 * returns the id of the current element of the node unselected
                 */
                id?: string,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the id of the parent element of current element of the node unselected
                 */
                parentId?: string,

                /**
                 * returns the current selected nodes index of TreeView
                 */
                selectedNodes?: Array<any>,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the value of the node
                 */
                value?: string
        }
        declare     export interface ReadyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface Fields {

            /**
             * Used to group the suggestion list items.
             */
            groupBy?: string,

                /**
                 * Defines the HTML attributes such as id, class, styles for the item.
                 */
                htmlAttributes?: any,

                /**
                 * Defines the specific field name which contains unique key values for the list items.
                 */
                key?: string,

                /**
                 * Defines the specific field name in the data source to load the suggestion list with data.
                 */
                text?: string
        }
        declare     export interface SortSettings {

            /**
             * Enables or disables the sorting option in TreeView control
             * @Default  {false}
             */
            allowSorting?: boolean,

                /**
                 * Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
                 * @Default  {ej.sortOrder.Ascending}
                 */
                sortOrder?: ej.sortOrder | string
        }
    }

    declare module 'Uploadbox' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeSendEventArgs {

            /**
             * Selected FileList Object.
             */
            files?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * XHR-AJAX Object for reference.
                 */
                xhr?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeginEventArgs {

            /**
             * To pass additional information to the server.
             */
            data?: any,

                /**
                 * Selected FileList Object.
                 */
                files?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CancelEventArgs {

            /**
             * Canceled FileList Object.
             */
            fileStatus?: any,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CompleteEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
        declare     export interface SuccessEventArgs {

            /**
             * response from the server.
             */
            responseText?: string,

                /**
                 * AJAX event argument for reference.
                 */
                e?: any,

                /**
                 * successfully uploaded files list.
                 */
                success?: any,

                /**
                 * Uploaded file list.
                 */
                files?: any,

                /**
                 * XHR-AJAX Object for reference.
                 */
                xhr?: any,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ErrorEventArgs {

            /**
             * details about the error information.
             */
            error?: string,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * error event action details.
                 */
                action?: string,

                /**
                 * returns the file details of the file uploaded
                 */
                files?: any
        }
        declare     export interface FileSelectEventArgs {

            /**
             * returns Selected FileList objects
             */
            files?: any,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface InProgressEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * AJAX event argument for reference.
                 */
                e?: any,

                /**
                 * returns Selected FileList objects
                 */
                files?: any,

                /**
                 * returns the Uploadbox model
                 */
                model?: any,

                /**
                 * returns the current progress percentage.
                 */
                percentage?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RemoveEventArgs {

            /**
             * returns the Uploadbox model
             */
            model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the file details of the file object
                 */
                fileStatus?: any
        }
        declare     export interface ButtonText {

            /**
             * Sets the text for the apply button.
             */
            apply?: string,

                /**
                 * Sets the text for the cancel button.
                 */
                cancel?: string,

                /**
                 * Sets the header text for the swatches area.
                 */
                swatches?: string
        }
        declare     export interface CustomFileDetails {

            /**
             * Enables the file upload interactions like remove/cancel in File details of the dialog popup.
             */
            action?: boolean,

                /**
                 * Enables the name in the File details of the dialog popup.
                 */
                name?: boolean,

                /**
                 * Enables or disables the File size details of the dialog popup.
                 */
                size?: boolean,

                /**
                 * Enables or disables the file uploading status visibility in the dialog file details content.
                 */
                status?: boolean,

                /**
                 * Enables the title in File details for the dialog popup.
                 */
                title?: boolean
        }
        declare     export interface DialogAction {

            /**
             * Once uploaded successfully, the dialog popup closes immediately.
             */
            closeOnComplete?: boolean,

                /**
                 * Sets the content container option to the Uploadbox dialog popup.
                 */
                content?: string,

                /**
                 * Enables the drag option to the dialog popup.
                 */
                drag?: boolean,

                /**
                 * Enables or disables the Uploadbox dialogâ€™s modal property to the dialog popup.
                 */
                modal?: boolean
        }
        declare     export interface DialogText {

            /**
             * Sets the uploaded fileâ€™s Name (header text) to the Dialog popup.
             */
            name?: string,

                /**
                 * Sets the upload file Size (header text) to the dialog popup.
                 */
                size?: string,

                /**
                 * Sets the upload file Status (header text) to the dialog popup.
                 */
                status?: string,

                /**
                 * Sets the title text of the dialog popup.
                 */
                title?: string
        }
    }

    declare module 'WaitingPopup' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'Grid' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface ActionFailureEventArgs {}
        declare     export interface BatchAddEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the column object.
                 */
                columnObject?: any,

                /**
                 * Returns the column index.
                 */
                columnIndex?: number,

                /**
                 * Returns the row element.
                 */
                row?: any,

                /**
                 * Returns the primaryKey.
                 */
                primaryKey?: any,

                /**
                 * Returns the cell object.
                 */
                cell?: any
        }
        declare     export interface BatchDeleteEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the primary key.
                 */
                primaryKey?: any,

                /**
                 * Returns the row Index.
                 */
                rowIndex?: number
        }
        declare     export interface BeforeBatchAddEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the default data object.
                 */
                defaultData?: any,

                /**
                 * Returns the primaryKey.
                 */
                primaryKey?: any
        }
        declare     export interface BeforeBatchDeleteEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the primaryKey.
                 */
                primaryKey?: any,

                /**
                 * Returns the row index.
                 */
                rowIndex?: number,

                /**
                 * Returns the row data.
                 */
                rowData?: any,

                /**
                 * Returns the row element.
                 */
                row?: any
        }
        declare     export interface BeforeBatchSaveEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the changed record object.
                 */
                batchChanges?: any
        }
        declare     export interface BeginEditEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns primary key value.
                 */
                primaryKeyValue?: string,

                /**
                 * Returns begin edit data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellEditEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the validation rules.
                 */
                validationRules?: any,

                /**
                 * Returns the column name.
                 */
                columnName?: string,

                /**
                 * Returns the cell value.
                 */
                value?: string,

                /**
                 * Returns the row data object.
                 */
                rowData?: any,

                /**
                 * Returns the previous value of the cell.
                 */
                previousValue?: string,

                /**
                 * Returns the column object.
                 */
                columnObject?: any,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns isForeignKey option value.
                 */
                isForeignKey?: boolean
        }
        declare     export interface CellSaveEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the column name.
                 */
                columnName?: string,

                /**
                 * Returns the cell value.
                 */
                value?: string,

                /**
                 * Returns the row data object.
                 */
                rowData?: any,

                /**
                 * Returns the previous value of the cell.
                 */
                previousValue?: string,

                /**
                 * Returns the column object.
                 */
                columnObject?: any,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns isForeignKey option value.
                 */
                isForeignKey?: boolean
        }
        declare     export interface CellSelectedEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the selected row cell index values.
                 */
                selectedRowCellIndex?: Array<any>,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSelectingEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns whether the ctrl key is pressed while selecting cell
                 */
                isCtrlKeyPressed?: boolean,

                /**
                 * Returns whether the shift key is pressed while selecting cell
                 */
                isShiftKeyPressed?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ColumnDragEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable column object.
                 */
                column?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns target elements based on mouse move position.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ColumnDragStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable column object.
                 */
                column?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns drag start element.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ColumnDropEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: string,

                /**
                 * Returns the draggable column object.
                 */
                column?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns dropped dragged element.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowDragEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns target elements based on mouse move position.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDragStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns drag start element cell.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDropEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: string,

                /**
                 * Returns the draggable row object.
                 */
                rows?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the current mouse position cell element.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface ColumnSelectedEventArgs {

            /**
             * Returns the selected cell index value.
             */
            columnIndex?: number,

                /**
                 * Returns the previous selected column index value.
                 */
                previousColumnIndex?: number,

                /**
                 * Returns the selected header cell element.
                 */
                headerCell?: any,

                /**
                 * Returns the previous selected header cell element.
                 */
                prevColumnHeaderCell?: any,

                /**
                 * Returns corresponding column object (JSON).
                 */
                column?: any,

                /**
                 * Returns the selected columns values.
                 */
                selectedColumnsIndex?: Array<any>,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ColumnSelectingEventArgs {

            /**
             * Returns the selected column index value.
             */
            columnIndex?: number,

                /**
                 * Returns the previous selected column index value.
                 */
                previousColumnIndex?: number,

                /**
                 * Returns the selected header cell element.
                 */
                headerCell?: any,

                /**
                 * Returns the previous selected header cell element.
                 */
                prevColumnHeaderCell?: any,

                /**
                 * Returns corresponding column object (JSON).
                 */
                column?: any,

                /**
                 * Returns whether the ctrl key is pressed while selecting cell
                 */
                isCtrlKeyPressed?: boolean,

                /**
                 * Returns whether the shift key is pressed while selecting cell
                 */
                isShiftKeyPressed?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ContextClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the status of contextmenu item which denotes its enabled state
                 */
                status?: boolean,

                /**
                 * Returns the target item.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ContextOpenEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the status of contextmenu item which denotes its enabled state
                 */
                status?: boolean,

                /**
                 * Returns the target item.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataBoundEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the DropDownList model
                 */
                model?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the data that is bound to DropDownList
                 */
                data?: any
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DetailsCollapseEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns detail row element.
                 */
                detailsRow?: any,

                /**
                 * Returns master row of detail row record object (JSON).
                 */
                masterData?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns master row element.
                 */
                masterRow?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DetailsDataBoundEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns details row element.
                 */
                detailsElement?: any,

                /**
                 * Returns the details row data.
                 */
                data?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DetailsExpandEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns detail row element.
                 */
                detailsRow?: any,

                /**
                 * Returns master row of detail row record object (JSON).
                 */
                masterData?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns master row element.
                 */
                masterRow?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface EndAddEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns added data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface EndDeleteEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface EndEditEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns modified data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface MergeCellInfoEventArgs {

            /**
             * Returns grid cell.
             */
            cell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the text value in the cell.
                 */
                text?: string,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Method to merge Grid rows.
                 */
                rowMerge?: void,

                /**
                 * Method to merge Grid columns.
                 */
                colMerge?: void,

                /**
                 * Method to merge Grid rows and columns.
                 */
                merge?: void,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface QueryCellInfoEventArgs {

            /**
             * Returns grid cell.
             */
            cell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the text value in the cell.
                 */
                text?: string,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RecordClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the jQuery object of the current selected row.
                 */
                row?: any,

                /**
                 * Returns the current selected cell.
                 */
                cell?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the cell index value.
                 */
                cellIndex?: number,

                /**
                 * Returns the corresponding cell value.
                 */
                cellValue?: string,

                /**
                 * Returns the Header text of the column corresponding to the selected cell.
                 */
                columnName?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RecordDoubleClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the jQuery object of the current selected row.
                 */
                row?: any,

                /**
                 * Returns the current selected cell.
                 */
                cell?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the selected cell index value.
                 */
                cellIndex?: number,

                /**
                 * Returns the corresponding cell value.
                 */
                cellValue?: string,

                /**
                 * Returns the Header text of the column corresponding to the selected cell.
                 */
                columnName?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ResizedEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the column index.
                 */
                columnIndex?: number,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the grid object.
                 */
                target?: any,

                /**
                 * Returns the old width value.
                 */
                oldWidth?: number,

                /**
                 * Returns the new width value.
                 */
                newWidth?: number
        }
        declare     export interface ResizeEndEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the column index.
                 */
                columnIndex?: number,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the grid object.
                 */
                target?: any,

                /**
                 * Returns the old width value.
                 */
                oldWidth?: number,

                /**
                 * Returns the new width value.
                 */
                newWidth?: number,

                /**
                 * Returns the extra width value.
                 */
                extra?: number
        }
        declare     export interface ResizeStartEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface RightClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                currentData?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the current selected row.
                 */
                row?: any,

                /**
                 * Returns the selected row data object.
                 */
                data?: any,

                /**
                 * Returns the cell index of the selected cell.
                 */
                cellIndex?: number,

                /**
                 * Returns the cell value.
                 */
                cellValue?: string,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowDataBoundEventArgs {

            /**
             * Returns grid row.
             */
            row?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the current selected row.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectingEventArgs {

            /**
             * Returns the selected row index value.
             */
            rowIndex?: number,

                /**
                 * Returns the selected row element.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface TemplateRefreshEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the current row data.
                 */
                data?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the current row index.
                 */
                rowIndex?: number,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ToolBarClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the status of toolbar item which denotes its enabled state
                 */
                status?: boolean,

                /**
                 * Returns the target item.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the grid model.
                 */
                gridModel?: any,

                /**
                 * Returns the toolbar object of the selected toolbar element.
                 */
                toolbarData?: any,

                /**
                 * Returns the Id of the current toolbar element.
                 */
                itemId?: string,

                /**
                 * Returns the index of the current toolbar element.
                 */
                itemIndex?: number,

                /**
                 * Returns the name of the current toolbar element.
                 */
                itemName?: string
        }
        declare     export interface ColumnsCommand {

            /**
             * Gets or sets an object that indicates to define all the button options which are available in ejButton.
             */
            buttonOptions?: any,

                /**
                 * Gets or sets a value that indicates to add the command column button. See unboundType
                 */
                type?: undefined.UnboundType | string
        }
        declare     export interface Column {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified columns header text.
             * @Default  {null}
             */
            headerText?: string,

                /**
                 * To customize the totalCount properties.
                 * @Default  {false}
                 */
                totalCount?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns key.
                 * @Default  {null}
                 */
                key?: string | number,

                /**
                 * To enable/disable allowDrop for specific column wise.
                 * @Default  {false}
                 */
                allowDrop?: boolean,

                /**
                 * To enable/disable allowDrag for specific column wise.
                 * @Default  {false}
                 */
                allowDrag?: boolean,

                /**
                 * To set column collapse or expand state
                 * @Default  {false}
                 */
                isCollapsed?: boolean,

                /**
                 * To customize the column level constraints with minimum ,maximum limit validation.
                 * @Default  {object}
                 */
                constraints?: ColumnsConstraints,

                /**
                 * Gets or sets a value that indicates to add the template within the header element.
                 * @Default  {null}
                 */
                headerTemplate?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns width.
                 * @Default  {null}
                 */
                width?: string | number,

                /**
                 * Gets or sets an object that indicates to set specific column visibility.
                 * @Default  {true}
                 */
                visible?: boolean,

                /**
                 * Gets or sets an object that indicates whether to show add new button.
                 * @Default  {false}
                 */
                showAddButton?: boolean
        }
        declare     export interface ContextMenuSettingsSubContextMenu {

            /**
             * Used to get or set the corresponding custom context menu item to which the submenu to be appended.
             * @Default  {null}
             */
            contextMenuItem?: string,

                /**
                 * Used to get or set the sub menu items to the custom context menu item.
                 * @Default  {[]}
                 */
                subMenu?: Array<any >
        }
        declare     export interface ContextMenuSettings {

            /**
             * The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default  {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, Sortby, |, NewFolder, Upload, |, Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any,

                /**
                 * The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
                 * @Default  {[]}
                 */
                customMenuFields?: Array<any >
        }
        declare     export interface EditSettings {

            /**
             * Gets or sets a value that indicates whether to enable the editing action in cards of Kanban.
             * @Default  {false}
             */
            allowEditing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the adding action in cards behavior on Kanban.
                 * @Default  {false}
                 */
                allowAdding?: boolean,

                /**
                 * This specifies the id of the template which is require to be edited using the Dialog Box.
                 * @Default  {null}
                 */
                dialogTemplate?: string,

                /**
                 * Get or sets an object that indicates whether to customize the editMode of the Kanban.
                 * @Default  {ej.Kanban.EditMode.Dialog}
                 */
                editMode?: undefined.EditMode | string,

                /**
                 * Get or sets an object that indicates whether to customize the editing fields of Kanban card.
                 * @Default  {Array}
                 */
                editItems?: Array<EditSettingsEditItem>,

                /**
                 * This specifies the id of the template which is require to be edited using the External edit form.
                 * @Default  {null}
                 */
                externalFormTemplate?: string,

                /**
                 * This specifies to set the position of an External edit form either in the right or bottom of the Kanban.
                 * @Default  {ej.Kanban.FormPosition.Bottom}
                 */
                formPosition?: undefined.FormPosition | string
        }
        declare     export interface FilterSettingsFilteredColumn {

            /**
             * Gets or sets a value that indicates whether to define the field name of the column to be filter.
             */
            field?: string,

                /**
                 * Gets or sets a value that indicates whether to define the filter condition to filtered column.
                 */
                operator?: ej.FilterOperators | string,

                /**
                 * Gets or sets a value that indicates whether to define the predicate as and/or.
                 */
                predicate?: string,

                /**
                 * Gets or sets a value that indicates whether to define the value to be filtered in a column.
                 */
                value?: string | number
        }
        declare     export interface FilterSettings {

            /**
             * It allows to search the text given in search Textbox in every keyup event. When this property was set as false, searching will works only on Enter key and searchbar blur.
             * @Default  {true}
             */
            allowSearchOnTyping?: boolean,

                /**
                 * Enables or disables to perform the filter operation with case sensitive.
                 * @Default  {false}
                 */
                caseSensitiveSearch?: boolean,

                /**
                 * Sets the search filter type. There are several filter types available such as &quot;startswith&quot;, &quot;contains&quot;, &quot;endswith&quot;. See filterType.
                 * @Default  {ej.FileExplorer.filterType.Contains}
                 */
                filterType?: ej.FilterType | string
        }
        declare     export interface GroupSettings {

            /**
             * Gets or sets a value that customize the group caption format.
             * @Default  {null}
             */
            captionFormat?: string,

                /**
                 * Gets or sets a value that indicates whether to enable animation button option in the group drop area of the grid.
                 * @Default  {false}
                 */
                enableDropAreaAutoSizing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add grouped columns programmatically at initial load
                 * @Default  {[]}
                 */
                groupedColumns?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to show the group drop area just above the column header. It can be used to avoid ungrouping the already grouped column using groupSettings.
                 * @Default  {true}
                 */
                showDropArea?: boolean,

                /**
                 * Gets or sets a value that indicates whether to hide the grouped columns from the grid
                 * @Default  {false}
                 */
                showGroupedColumn?: boolean,

                /**
                 * Gets or sets a value that indicates whether to show the group button image(toggle button)in the column header and also in the grouped column in the group drop area . It can be used to group/ungroup the columns by click on the toggle button.
                 * @Default  {false}
                 */
                showToggleButton?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the close button in the grouped column which is in the group drop area to ungroup the grouped column
                 * @Default  {false}
                 */
                showUngroupButton?: boolean
        }
        declare     export interface PageSettings {

            /**
             * Gets or sets a value that indicates whether to define which page to display currently in the grid
             * @Default  {1}
             */
            currentPage?: number,

                /**
                 * Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
                 * @Default  {false}
                 */
                enableQueryString?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enables pager template for the grid.
                 * @Default  {false}
                 */
                enableTemplates?: boolean,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
                 * @Default  {8}
                 */
                pageCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of records displayed per page
                 * @Default  {12}
                 */
                pageSize?: number,

                /**
                 * Gets or sets a value that indicates whether to enables default pager for the grid.
                 * @Default  {false}
                 */
                showDefaults?: boolean,

                /**
                 * Gets or sets a value that indicates to add the template as a pager template for grid.
                 * @Default  {null}
                 */
                template?: string,

                /**
                 * Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
                 * @Default  {null}
                 */
                totalPages?: number,

                /**
                 * Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
                 * @Default  {null}
                 */
                totalRecordsCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages to print
                 * @Default  {ej.Grid.PrintMode.AllPages}
                 */
                printMode?: undefined.PrintMode | string
        }
        declare     export interface ResizeSettings {

            /**
             * Gets or sets a value that indicates whether to define the mode of resizing.Accepting types are &quot;normal&quot;, &quot;nextcolumn&quot; and &quot;control&quot;.
             * @Default  {ej.Grid.ResizeMode.Normal}
             */
            resizeMode?: undefined.ResizeMode | string
        }
        declare     export interface RowDropSettings {

            /**
             * This specifies the grid to drop the grid rows only at particular target element.
             * @Default  {null}
             */
            dropTargetID?: any,

                /**
                 * This helps in mapping server-side action when rows are dragged from Grid.
                 * @Default  {null}
                 */
                dragMapper?: string,

                /**
                 * This helps in mapping server-side action when rows are dropped in Grid.
                 * @Default  {null}
                 */
                dropMapper?: string
        }
        declare     export interface SearchSettings {

            /**
             * To customize the fields the searching operation can be perform.
             * @Default  {Array}
             */
            fields?: Array<any>,

                /**
                 * To customize the searching string.
                 */
                key?: string,

                /**
                 * To customize the operator based on searching.
                 * @Default  {contains}
                 */
                operator?: string,

                /**
                 * To customize the ignore case based on searching.
                 * @Default  {true}
                 */
                ignoreCase?: boolean
        }
        declare     export interface SelectionSettings {

            /**
             * Gets or sets a value that indicates whether to enable the toggle selection behavior for row, cell and column.
             * @Default  {false}
             */
            enableToggle?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default selection actions as a selection mode.See selectionMode
                 * @Default  {[row]}
                 */
                selectionMode?: Array<any >
        }
        declare     export interface ScrollSettings {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified scroll height.
             * @Default  {0}
             */
            height?: string | number,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified scroll width.
                 * @Default  {auto}
                 */
                width?: string | number,

                /**
                 * To allow the Kanban to freeze particular swimlane at the time of scrolling , until scroll reaches next swimlane and it continues.
                 * @Default  {false}
                 */
                allowFreezeSwimlane?: boolean
        }
        declare     export interface SortSettingsSortedColumn {

            /**
             * Gets or sets a value that indicates whether to define the direction to sort the column.
             */
            direction?: string,

                /**
                 * Gets or sets a value that indicates whether to define the field name of the column to be sort
                 */
                field?: string
        }
        declare     export interface SortSettings {

            /**
             * Enables or disables the sorting option in TreeView control
             * @Default  {false}
             */
            allowSorting?: boolean,

                /**
                 * Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
                 * @Default  {ej.sortOrder.Ascending}
                 */
                sortOrder?: ej.sortOrder | string
        }
        declare     export interface StackedHeaderRowsStackedHeaderColumn {

            /**
             * Gets or sets a value that indicates the headerText for the particular stacked header column.
             * @Default  {null}
             */
            headerText?: string,

                /**
                 * Gets or sets a value that indicates the column for the particular stacked header column.
                 * @Default  {null}
                 */
                column?: string
        }
        declare     export interface StackedHeaderRow {

            /**
             * Gets or sets a value that indicates whether to add stacked header columns into the stacked header rows.
             * @Default  {Array}
             */
            stackedHeaderColumns?: Array<StackedHeaderRowsStackedHeaderColumn >
        }
        declare     export interface SummaryRowsSummaryColumn {

            /**
             * Gets or sets a value that indicates the text displayed in the summary column as a value
             * @Default  {null}
             */
            customSummaryValue?: string,

                /**
                 * This specifies summary column used to perform the summary calculation
                 * @Default  {null}
                 */
                dataMember?: string,

                /**
                 * Gets or sets a value that indicates to define the target column at which to display the summary.
                 * @Default  {null}
                 */
                displayColumn?: string,

                /**
                 * Gets or sets a value that indicates the format for the text applied on the column
                 * @Default  {null}
                 */
                format?: string,

                /**
                 * Gets or sets a value that indicates the text displayed before the summary column value
                 * @Default  {null}
                 */
                prefix?: string,

                /**
                 * Gets or sets a value that indicates the text displayed after the summary column value
                 * @Default  {null}
                 */
                suffix?: string,

                /**
                 * Gets or sets a value that indicates the type of calculations to be performed for the corresponding summary column
                 * @Default  {[]}
                 */
                summaryType?: undefined.SummaryType | string,

                /**
                 * Gets or sets a value that indicates to add the template for the summary value of dataMember given.
                 * @Default  {null}
                 */
                template?: string
        }
        declare     export interface SummaryRow {

            /**
             * Gets or sets a value that indicates whether to show the summary value within the group caption area for the corresponding summary column while grouping the column
             * @Default  {false}
             */
            showCaptionSummary?: boolean,

                /**
                 * Gets or sets a value that indicates whether to show the group summary value for the corresponding summary column while grouping a column
                 * @Default  {false}
                 */
                showGroupSummary?: boolean,

                /**
                 * Gets or sets a value that indicates whether to show the total summary value the for the corresponding summary column. The summary row is added after the grid content.
                 * @Default  {true}
                 */
                showTotalSummary?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add summary columns into the summary rows.
                 * @Default  {[]}
                 */
                summaryColumns?: Array<SummaryRowsSummaryColumn>,

                /**
                 * This specifies the grid to show the title for the summary rows.
                 */
                title?: string,

                /**
                 * This specifies the grid to show the title of summary row in the specified column.
                 * @Default  {null}
                 */
                titleColumn?: string
        }
        declare     export interface TextWrapSettings {

            /**
             * This specifies the grid to apply the auto wrap for grid content or header or both.
             * @Default  {ej.Grid.WrapMode.Both}
             */
            wrapMode?: undefined.WrapMode | string
        }
        declare     export interface ToolbarSettings {

            /**
             * Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default  {[]}
             */
            customToolbarItems?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to enable toolbar in the grid.
                 * @Default  {false}
                 */
                showToolbar?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
                 * @Default  {[]}
                 */
                toolbarItems?: Array<any >
        }
    }

    declare module 'Sparkline' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface LoadedEventArgs {

            /**
             * Set this option to true to cancel the event
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string
        }
        declare     export interface TooltipInitializeEventArgs {

            /**
             * Set this option to true to cancel the event    
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * X Location of the trackball tooltip in pixels
                 */
                locationX?: any,

                /**
                 * Y Location of the trackball tooltip in pixels
                 */
                locationY?: any,

                /**
                 * Index of the point for which trackball tooltip is displayed
                 */
                pointIndex?: number,

                /**
                 * Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
                 */
                currentText?: string
        }
        declare     export interface SeriesRenderingEventArgs {

            /**
             * Set this option to true to cancel the event
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Minimum x value of the data point
                 */
                minX?: any,

                /**
                 * Minimum y value of the data point
                 */
                minY?: any,

                /**
                 * Maximum x value of the data point
                 */
                maxX?: any,

                /**
                 * Maximum y value of the data point
                 */
                maxY?: any
        }
        declare     export interface PointRegionMouseMoveEventArgs {

            /**
             * Set this option to true to cancel the event
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * X-coordinate of point in pixel
                 */
                locationX?: number,

                /**
                 * Y-coordinate of point in pixel
                 */
                locationY?: number,

                /**
                 * Index of the point in series
                 */
                pointIndex?: number,

                /**
                 * Type of the series
                 */
                seriesType?: string
        }
        declare     export interface PointRegionMouseClickEventArgs {

            /**
             * Set this option to true to cancel the event
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * X-coordinate of point in pixel
                 */
                locationX?: number,

                /**
                 * Y-coordinate of point in pixel
                 */
                locationY?: number,

                /**
                 * Index of the point in series
                 */
                pointIndex?: number,

                /**
                 * Type of the series
                 */
                seriesType?: string
        }
        declare     export interface SparklineMouseMoveEventArgs {

            /**
             * Set this option to true to cancel the event    
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string
        }
        declare     export interface SparklineMouseLeaveEventArgs {

            /**
             * Set this option to true to cancel the event    
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string
        }
        declare     export interface Border {

            /**
             * Border color of the sparkline.
             * @Default  {transparent}
             */
            color?: string,

                /**
                 * Width of the Sparkline border.
                 * @Default  {1}
                 */
                width?: number
        }
        declare     export interface RangeBandSettings {

            /**
             * Start value of the range band.
             * @Default  {null}
             */
            startRange?: number,

                /**
                 * End value of the range band.
                 * @Default  {null}
                 */
                endRange?: number,

                /**
                 * Range band opacity of the series.
                 * @Default  {1}
                 */
                opacity?: number,

                /**
                 * Range band color of the series.
                 * @Default  {transparent}
                 */
                color?: string
        }
        declare     export interface TooltipBorder {

            /**
             * Border color of the tooltip.
             * @Default  {transparent}
             */
            color?: string,

                /**
                 * Border width of the tooltip.
                 * @Default  {1}
                 */
                width?: number
        }
        declare     export interface TooltipFont {

            /**
             * Font color of the text in the tooltip.
             * @Default  {#111111}
             */
            color?: string,

                /**
                 * Font Family for the tooltip.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                /**
                 * Specifies the font Style for the tooltip.
                 * @Default  {Normal}
                 */
                fontStyle?: undefined.FontStyle | string,

                /**
                 * Specifies the font weight for the tooltip.
                 * @Default  {Regular}
                 */
                fontWeight?: undefined.FontWeight | string,

                /**
                 * Opacity for text in the tooltip.
                 * @Default  {1}
                 */
                opacity?: number,

                /**
                 * Font size for text in the tooltip.
                 * @Default  {8px}
                 */
                size?: string
        }
        declare     export interface Tooltip {

            /**
             * Show/hides the tooltip visibility.
             * @Default  {false}
             */
            visible?: boolean,

                /**
                 * Fill color for the sparkline tooltip.
                 * @Default  {white}
                 */
                fill?: string,

                /**
                 * Custom template to the tooltip.
                 */
                template?: string,

                /**
                 * Options for customizing the border of the tooltip.
                 */
                border?: TooltipBorder,

                /**
                 * Options for customizing the font of the tooltip.
                 */
                font?: TooltipFont
        }
        declare     export interface MarkerSettingsBorder {

            /**
             * Border color of the marker shape.
             * @Default  {transparent}
             */
            color?: string,

                /**
                 * Controls the opacity of the marker border.
                 * @Default  {1}
                 */
                opacity?: number,

                /**
                 * Border width of the marker shape.
                 * @Default  {null}
                 */
                width?: number
        }
        declare     export interface MarkerSettings {

            /**
             * Controls the opacity of the marker.
             * @Default  {1}
             */
            opacity?: number,

                /**
                 * Controls the visibility of the marker shape.
                 * @Default  {false}
                 */
                visible?: boolean,

                /**
                 * width of the marker shape.
                 * @Default  {2}
                 */
                width?: number,

                /**
                 * Color of the marker shape.
                 * @Default  {white}
                 */
                fill?: string,

                /**
                 * Options for customizing the border of the marker shape.
                 */
                border?: MarkerSettingsBorder
        }
        declare     export interface Size {

            /**
             * Height of the Sparkline. Height can be specified in either pixel or percentage.
             * @Default  {''}
             */
            height?: string,

                /**
                 * Width of the Sparkline. Width can be specified in either pixel or percentage.
                 * @Default  {''}
                 */
                width?: string
        }
        declare     export interface AxisLineSettings {

            /**
             * Controls the visibility of the axis.
             * @Default  {false}
             */
            visible?: boolean,

                /**
                 * Color of the axis line.
                 * @Default  {'#111111'}
                 */
                color?: string,

                /**
                 * Width of the axis line.
                 * @Default  {1}
                 */
                width?: number,

                /**
                 * Dash array of the axis line.
                 * @Default  {1}
                 */
                dashArray?: number
        }
    }

    declare module 'PivotGrid' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforePivotEnginePopulateEventArgs {

            /**
             * returns the PivotGrid object
             */
            pivotObject?: any,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface CellDoubleClickEventArgs {

            /**
             * return the JSON details of the double clicked cell.
             */
            selectedData?: any,

                /**
                 * return the custom object bounds with PivotGrid widget.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface CellContextEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the cell position (row index and column index) in table.
                 */
                cellPosition?: string,

                /**
                 * returns the type of the cell.
                 */
                cellType?: string,

                /**
                 * returns the serialized data of the header cells.
                 */
                rowData?: string,

                /**
                 * returns the unique name of levels/members.
                 */
                uniqueName?: string
        }
        declare     export interface CellSelectionEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * Returns the selected cell values.
                 */
                cellvalue?: any,

                /**
                 * Returns the selected value cells row headers.
                 */
                rowheaders?: any,

                /**
                 * Returns the selected value cells column headers.
                 */
                colheaders?: any,

                /**
                 * Returns the selected value cells measure.
                 */
                measure?: any,

                /**
                 * Return the row and column measure count.
                 */
                measureValue?: any
        }
        declare     export interface ColumnHeaderHyperlinkClickEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the cell position (row index and column index) in table.
                 */
                cellPosition?: string,

                /**
                 * returns the type of the cell.
                 */
                cellType?: string,

                /**
                 * returns the serialized data of the header cells.
                 */
                rowData?: string,

                /**
                 * returns the unique name of levels/members.
                 */
                uniqueName?: string
        }
        declare     export interface DrillSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DrillThroughEventArgs {

            /**
             * return the JSON records of the generated cells on drill-through operation.
             */
            data?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface RenderCompleteEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderFailureEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * returns the error message with error code.
                 */
                message?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderSuccessEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowHeaderHyperlinkClickEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the cell position (row index and column index) in table.
                 */
                cellPosition?: string,

                /**
                 * returns the type of the cell.
                 */
                cellType?: string,

                /**
                 * returns the serialized data of the header cells.
                 */
                rowData?: string,

                /**
                 * returns the unique name of levels/members.
                 */
                uniqueName?: string
        }
        declare     export interface SummaryCellHyperlinkClickEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the cell position (row index and column index) in table.
                 */
                cellPosition?: string,

                /**
                 * returns the type of the cell.
                 */
                cellType?: string,

                /**
                 * returns the serialized data of the header cells.
                 */
                rowData?: string,

                /**
                 * returns the unique name of levels/members.
                 */
                uniqueName?: string
        }
        declare     export interface ValueCellHyperlinkClickEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the cell position (row index and column index) in table.
                 */
                cellPosition?: string,

                /**
                 * returns the type of the cell.
                 */
                cellType?: string,

                /**
                 * returns the serialized data of the header cells.
                 */
                rowData?: string,

                /**
                 * returns the unique name of levels/members.
                 */
                uniqueName?: string
        }
        declare     export interface DataSourceColumnsAdvancedFilter {

            /**
             * Allows the user to provide level unique name to do advanced filtering (excel-like) for OLAP data source in client-mode.
             */
            name?: string,

                /**
                 * Allows the user to set the operator for label filtering to do advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                labelFilterOperator?: string,

                /**
                 * Allows the user to set the operator for value filtering to do advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                valueFilterOperator?: string,

                /**
                 * Allows the user to set the filtering type while doing advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                advancedFilterType?: string,

                /**
                 * Allows the user to holds the filter value in advanced filtering (excel-like) option for OLAP data source in client-mode.
                 */
                values?: string
        }
        declare     export interface DataSourceColumn {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceColumnsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceRowsAdvancedFilter {

            /**
             * Allows the user to provide level unique name to do advanced filtering (excel-like) for OLAP data source in client-mode.
             */
            name?: string,

                /**
                 * Allows the user to set the operator for label filtering to do advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                labelFilterOperator?: string,

                /**
                 * Allows the user to set the operator for value filtering to do advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                valueFilterOperator?: string,

                /**
                 * Allows the user to set the filtering type while doing advanced filtering (excel-like) for OLAP data source in client-mode.
                 */
                advancedFilterType?: string,

                /**
                 * Allows the user to holds the filter value in advanced filtering (excel-like) option for OLAP data source in client-mode.
                 */
                values?: string
        }
        declare     export interface DataSourceRow {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceRowsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceValue {

            /**
             * This holds the measures unique name to bind them from the Cube.
             * @Default  {[]}
             */
            measures?: Array<any>,

                /**
                 * Allows to set the axis name to place the measures items.
                 * @Default  {â€œâ€}
                 */
                axis?: string,

                /**
                 * Allows the user to bind the item by using its unique name as field name.
                 */
                fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to create new fields by enabling the calculated field option for relational data source at client-side.
                 * @Default  {false}
                 */
                isCalculatedField?: boolean,

                /**
                 * Allows the user to apply the formula as an expression in-order to create new field using calculated field option (in code-behind) for relational data source at client-side.
                 */
                formula?: string
        }
        declare     export interface DataSourceFilter {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSource {

            /**
             * Contains the database name as string type to fetch the data from the given connection string.
             * @Default  {â€œâ€}
             */
            catalog?: string,

                /**
                 * Lists out the items to be arranged in column section of PivotGrid.
                 * @Default  {[]}
                 */
                columns?: Array<DataSourceColumn>,

                /**
                 * Contains the respective Cube name from database as string type.
                 * @Default  {â€œâ€}
                 */
                cube?: string,

                /**
                 * Provides the raw data source for the PivotGrid.
                 * @Default  {null}
                 */
                data?: any,

                /**
                 * Lists out the items to be arranged in row section of PivotGrid.
                 * @Default  {[]}
                 */
                rows?: Array<DataSourceRow>,

                /**
                 * Lists out the items which supports calculation in PivotGrid.
                 * @Default  {[]}
                 */
                values?: Array<DataSourceValue>,

                /**
                 * Allows user to filter the members (by its name and values) by enable the advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {false}
                 */
                enableAdvancedFilter?: boolean,

                /**
                 * Lists out the items which supports filtering of values in PivotGrid.
                 * @Default  {[]}
                 */
                filters?: Array<DataSourceFilter >
        }
        declare     export interface HyperlinkSettings {

            /**
             * Allows the user to enable/disable hyperlink for column header.
             * @Default  {false}
             */
            enableColumnHeaderHyperlink?: boolean,

                /**
                 * Allows the user to enable/disable hyperlink for row header.
                 * @Default  {false}
                 */
                enableRowHeaderHyperlink?: boolean,

                /**
                 * Allows the user to enable/disable hyperlink for summary cells.
                 * @Default  {false}
                 */
                enableSummaryCellHyperlink?: boolean,

                /**
                 * Allows the user to enable/disable hyperlink for value cells.
                 * @Default  {false}
                 */
                enableValueCellHyperlink?: boolean
        }
        declare     export interface ServiceMethodSettings {

            /**
             * Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
             * @Default  {DrillGrid}
             */
            drillDown?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
                 * @Default  {Export}
                 */
                exportPivotGrid?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
                 * @Default  {DeferUpdate}
                 */
                deferUpdate?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
                 * @Default  {FetchMembers}
                 */
                fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
                 * @Default  {InitializeGrid}
                 */
                initialize?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
                 * @Default  {Paging}
                 */
                paging?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
                 * @Default  {Sorting}
                 */
                sorting?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for expanding members inside member editor.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for write-back operation in OLAP Cube. This is only applicable in server-side component.
                 * @Default  {WriteBack}
                 */
                writeBack?: string
        }
    }

    declare module 'PivotSchemaDesigner' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DragMoveEventArgs {

            /**
             * return the HTML of the dragged field from PivotSchemaDesigner.
             */
            dragTarget?: any,

                /**
                 * return the JSON details of the dragged field.
                 */
                draggedElementData?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotSchemaDesigner model
                 */
                model?: undefined.Model
        }
        declare     export interface ServiceMethod {

            /**
             * Allows the user to set the custom name for the service method thatâ€™s responsible for getting the values for the tree-view inside filter dialog.
             * @Default  {FetchMembers}
             */
            fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for filtering operation in Field List.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action, on expanding members in Field List.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for remove operation in Field List.
                 * @Default  {RemoveButton}
                 */
                removeButton?: string
        }
    }

    declare module 'PivotPager' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
    }

    declare module 'PivotChart' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DrillSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RenderCompleteEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderFailureEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * returns the error message with error code.
                 */
                message?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderSuccessEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataSourceColumn {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceColumnsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceRow {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceRowsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceValue {

            /**
             * This holds the measures unique name to bind them from the Cube.
             * @Default  {[]}
             */
            measures?: Array<any>,

                /**
                 * Allows to set the axis name to place the measures items.
                 * @Default  {â€œâ€}
                 */
                axis?: string,

                /**
                 * Allows the user to bind the item by using its unique name as field name.
                 */
                fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to create new fields by enabling the calculated field option for relational data source at client-side.
                 * @Default  {false}
                 */
                isCalculatedField?: boolean,

                /**
                 * Allows the user to apply the formula as an expression in-order to create new field using calculated field option (in code-behind) for relational data source at client-side.
                 */
                formula?: string
        }
        declare     export interface DataSourceFilter {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSource {

            /**
             * Contains the database name as string type to fetch the data from the given connection string.
             * @Default  {â€œâ€}
             */
            catalog?: string,

                /**
                 * Lists out the items to be arranged in column section of PivotGrid.
                 * @Default  {[]}
                 */
                columns?: Array<DataSourceColumn>,

                /**
                 * Contains the respective Cube name from database as string type.
                 * @Default  {â€œâ€}
                 */
                cube?: string,

                /**
                 * Provides the raw data source for the PivotGrid.
                 * @Default  {null}
                 */
                data?: any,

                /**
                 * Lists out the items to be arranged in row section of PivotGrid.
                 * @Default  {[]}
                 */
                rows?: Array<DataSourceRow>,

                /**
                 * Lists out the items which supports calculation in PivotGrid.
                 * @Default  {[]}
                 */
                values?: Array<DataSourceValue>,

                /**
                 * Allows user to filter the members (by its name and values) by enable the advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {false}
                 */
                enableAdvancedFilter?: boolean,

                /**
                 * Lists out the items which supports filtering of values in PivotGrid.
                 * @Default  {[]}
                 */
                filters?: Array<DataSourceFilter >
        }
        declare     export interface ServiceMethodSettings {

            /**
             * Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
             * @Default  {DrillGrid}
             */
            drillDown?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
                 * @Default  {Export}
                 */
                exportPivotGrid?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
                 * @Default  {DeferUpdate}
                 */
                deferUpdate?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
                 * @Default  {FetchMembers}
                 */
                fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
                 * @Default  {InitializeGrid}
                 */
                initialize?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
                 * @Default  {Paging}
                 */
                paging?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
                 * @Default  {Sorting}
                 */
                sorting?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for expanding members inside member editor.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for write-back operation in OLAP Cube. This is only applicable in server-side component.
                 * @Default  {WriteBack}
                 */
                writeBack?: string
        }
    }

    declare module 'PivotClient' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ChartLoadEventArgs {

            /**
             * return the current action of PivotChart control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotChart control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotChart control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotChart model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface RenderCompleteEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderFailureEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * returns the error message with error code.
                 */
                message?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderSuccessEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DisplaySettings {

            /**
             * Letâ€™s the user to customize the display of PivotChart and PivotGrid widgets, either in tab view or in tile view.
             * @Default  {ej.PivotClient.ControlPlacement.Tab}
             */
            controlPlacement?: undefined.ControlPlacement | string,

                /**
                 * Letâ€™s the user to set either Chart or Grid as the start-up widget.
                 * @Default  {ej.PivotClient.DefaultView.Grid}
                 */
                defaultView?: undefined.DefaultView | string,

                /**
                 * Enables/disables the full screen view of PivotChart and PivotGrid in PivotClient.
                 * @Default  {false}
                 */
                enableFullScreen?: boolean,

                /**
                 * Enhances the space for PivotGrid and PivotChart, by hiding Cube Browser and Axis Element Builder.
                 * @Default  {false}
                 */
                enableTogglePanel?: boolean,

                /**
                 * Allows the user to enable PivotClientâ€™s responsiveness in the browser layout.
                 * @Default  {false}
                 */
                isResponsive?: boolean,

                /**
                 * Sets the display mode (Only Chart/Only Grid/Both) in PivotClient.
                 * @Default  {ej.PivotClient.DisplayMode.ChartAndGrid}
                 */
                mode?: undefined.DisplayMode | string
        }
        declare     export interface ServiceMethodSettings {

            /**
             * Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
             * @Default  {DrillGrid}
             */
            drillDown?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
                 * @Default  {Export}
                 */
                exportPivotGrid?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
                 * @Default  {DeferUpdate}
                 */
                deferUpdate?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
                 * @Default  {FetchMembers}
                 */
                fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
                 * @Default  {InitializeGrid}
                 */
                initialize?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
                 * @Default  {Paging}
                 */
                paging?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
                 * @Default  {Sorting}
                 */
                sorting?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for expanding members inside member editor.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for write-back operation in OLAP Cube. This is only applicable in server-side component.
                 * @Default  {WriteBack}
                 */
                writeBack?: string
        }
    }

    declare module 'PivotGauge' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface RenderCompleteEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderFailureEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * returns the error message with error code.
                 */
                message?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderSuccessEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataSourceColumn {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceColumnsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceRowsFilterItems {

            /**
             * Allows the user to set the type of filtering for an item.
             * @Default  {exclude}
             */
            filterType?: string,

                /**
                 * Allows the user to set the values for filtering an item.
                 * @Default  {[]}
                 */
                values?: Array<any >
        }
        declare     export interface DataSourceRow {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceRowsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceValue {

            /**
             * This holds the measures unique name to bind them from the Cube.
             * @Default  {[]}
             */
            measures?: Array<any>,

                /**
                 * Allows to set the axis name to place the measures items.
                 * @Default  {â€œâ€}
                 */
                axis?: string,

                /**
                 * Allows the user to bind the item by using its unique name as field name.
                 */
                fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to create new fields by enabling the calculated field option for relational data source at client-side.
                 * @Default  {false}
                 */
                isCalculatedField?: boolean,

                /**
                 * Allows the user to apply the formula as an expression in-order to create new field using calculated field option (in code-behind) for relational data source at client-side.
                 */
                formula?: string
        }
        declare     export interface DataSourceFilter {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSource {

            /**
             * Contains the database name as string type to fetch the data from the given connection string.
             * @Default  {â€œâ€}
             */
            catalog?: string,

                /**
                 * Lists out the items to be arranged in column section of PivotGrid.
                 * @Default  {[]}
                 */
                columns?: Array<DataSourceColumn>,

                /**
                 * Contains the respective Cube name from database as string type.
                 * @Default  {â€œâ€}
                 */
                cube?: string,

                /**
                 * Provides the raw data source for the PivotGrid.
                 * @Default  {null}
                 */
                data?: any,

                /**
                 * Lists out the items to be arranged in row section of PivotGrid.
                 * @Default  {[]}
                 */
                rows?: Array<DataSourceRow>,

                /**
                 * Lists out the items which supports calculation in PivotGrid.
                 * @Default  {[]}
                 */
                values?: Array<DataSourceValue>,

                /**
                 * Allows user to filter the members (by its name and values) by enable the advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {false}
                 */
                enableAdvancedFilter?: boolean,

                /**
                 * Lists out the items which supports filtering of values in PivotGrid.
                 * @Default  {[]}
                 */
                filters?: Array<DataSourceFilter >
        }
        declare     export interface LabelFormatSettings {

            /**
             * Allows the user to change the number format of the label values in PivotGauge.
             * @Default  {ej.PivotGauge.NumberFormat.Default}
             */
            numberFormat?: undefined.NumberFormat | string,

                /**
                 * Allows you to change the position of a digit on the right-hand side of the decimal point for label value.
                 * @Default  {5}
                 */
                decimalPlaces?: number,

                /**
                 * Allows you to add a text at the beginning of the label.
                 */
                prefixText?: string,

                /**
                 * Allows you to add text at the end of the label.
                 */
                suffixText?: string
        }
        declare     export interface ServiceMethodSettings {

            /**
             * Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
             * @Default  {DrillGrid}
             */
            drillDown?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
                 * @Default  {Export}
                 */
                exportPivotGrid?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
                 * @Default  {DeferUpdate}
                 */
                deferUpdate?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
                 * @Default  {FetchMembers}
                 */
                fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
                 * @Default  {InitializeGrid}
                 */
                initialize?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
                 * @Default  {Paging}
                 */
                paging?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
                 * @Default  {Sorting}
                 */
                sorting?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for expanding members inside member editor.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for write-back operation in OLAP Cube. This is only applicable in server-side component.
                 * @Default  {WriteBack}
                 */
                writeBack?: string
        }
    }

    declare module 'PivotTreeMap' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface AfterServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface BeforeServiceInvokeEventArgs {

            /**
             * return the current action of PivotGrid control.
             */
            action?: string,

                /**
                 * return the custom object bounds with PivotGrid control.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DrillSuccessEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RenderCompleteEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderFailureEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * returns the error message with error code.
                 */
                message?: any,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderSuccessEventArgs {

            /**
             * returns the original event args.
             */
            args?: any,

                /**
                 * returns the current action of PivotGrid control.
                 */
                action?: string,

                /**
                 * returns the custom object bounded with the control.
                 */
                customObject?: any,

                /**
                 * returns the HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataSourceColumn {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceColumnsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceRow {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to filter the report by default using advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {[]}
                 */
                advancedFilter?: Array<DataSourceRowsAdvancedFilter>,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSourceValue {

            /**
             * This holds the measures unique name to bind them from the Cube.
             * @Default  {[]}
             */
            measures?: Array<any>,

                /**
                 * Allows to set the axis name to place the measures items.
                 * @Default  {â€œâ€}
                 */
                axis?: string,

                /**
                 * Allows the user to bind the item by using its unique name as field name.
                 */
                fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to create new fields by enabling the calculated field option for relational data source at client-side.
                 * @Default  {false}
                 */
                isCalculatedField?: boolean,

                /**
                 * Allows the user to apply the formula as an expression in-order to create new field using calculated field option (in code-behind) for relational data source at client-side.
                 */
                formula?: string
        }
        declare     export interface DataSourceFilter {

            /**
             * Allows the user to bind the item by using its unique name as field name.
             */
            fieldName?: string,

                /**
                 * Allows the user to set the display name for an item.
                 */
                fieldCaption?: string,

                /**
                 * Allows the user to enable the usage of named set items in respective axis. This is only applicable for OLAP datasource.
                 * @Default  {false}
                 */
                isNamedSets?: boolean
        }
        declare     export interface DataSource {

            /**
             * Contains the database name as string type to fetch the data from the given connection string.
             * @Default  {â€œâ€}
             */
            catalog?: string,

                /**
                 * Lists out the items to be arranged in column section of PivotGrid.
                 * @Default  {[]}
                 */
                columns?: Array<DataSourceColumn>,

                /**
                 * Contains the respective Cube name from database as string type.
                 * @Default  {â€œâ€}
                 */
                cube?: string,

                /**
                 * Provides the raw data source for the PivotGrid.
                 * @Default  {null}
                 */
                data?: any,

                /**
                 * Lists out the items to be arranged in row section of PivotGrid.
                 * @Default  {[]}
                 */
                rows?: Array<DataSourceRow>,

                /**
                 * Lists out the items which supports calculation in PivotGrid.
                 * @Default  {[]}
                 */
                values?: Array<DataSourceValue>,

                /**
                 * Allows user to filter the members (by its name and values) by enable the advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {false}
                 */
                enableAdvancedFilter?: boolean,

                /**
                 * Lists out the items which supports filtering of values in PivotGrid.
                 * @Default  {[]}
                 */
                filters?: Array<DataSourceFilter >
        }
        declare     export interface ServiceMethodSettings {

            /**
             * Allows the user to set the custom name for the service method that's responsible for drill up/down operation in PivotGrid.
             * @Default  {DrillGrid}
             */
            drillDown?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for exporting.
                 * @Default  {Export}
                 */
                exportPivotGrid?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for performing server-side actions on defer update.
                 * @Default  {DeferUpdate}
                 */
                deferUpdate?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible to getting the values for the tree-view inside filter dialog.
                 * @Default  {FetchMembers}
                 */
                fetchMembers?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for filtering operation in PivotGrid.
                 * @Default  {Filtering}
                 */
                filtering?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for initializing PivotGrid.
                 * @Default  {InitializeGrid}
                 */
                initialize?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for the server-side action, on dropping a node into Field List.
                 * @Default  {NodeDropped}
                 */
                nodeDropped?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for the server-side action on changing the checked state of a node in Field List.
                 * @Default  {NodeStateModified}
                 */
                nodeStateModified?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for performing paging operation in PivotGrid.
                 * @Default  {Paging}
                 */
                paging?: string,

                /**
                 * Allows the user to set the custom name for the service method that's responsible for sorting operation in PivotGrid.
                 * @Default  {Sorting}
                 */
                sorting?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for expanding members inside member editor.
                 * @Default  {MemberExpanded}
                 */
                memberExpand?: string,

                /**
                 * Allows the user to set the custom name for the service method thatâ€™s responsible for write-back operation in OLAP Cube. This is only applicable in server-side component.
                 * @Default  {WriteBack}
                 */
                writeBack?: string
        }
    }

    declare module 'Schedule' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface AppointmentClickEventArgs {

            /**
             * Returns the object of appointmentClick event.
             */
            object?: any,

                /**
                 * Returns the clicked appointment object.
                 */
                appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeAppointmentRemoveEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the deleted appointment object.
                 */
                appointment?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface BeforeAppointmentChangeEventArgs {

            /**
             * Returns the edited appointment object.
             */
            appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface AppointmentHoverEventArgs {

            /**
             * Returns the object of appointmentHover event.
             */
            object?: any,

                /**
                 * Returns the hovered appointment object.
                 */
                appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeAppointmentCreateEventArgs {

            /**
             * Returns the appointment object.
             */
            appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface AppointmentWindowOpenEventArgs {

            /**
             * returns the object of appointmentWindowOpen event while selecting the detail option from quick window or edit appointment or edit series option.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the end time of the double clicked cell.
                 */
                endTime?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the action name that triggers window open.
                 */
                originalEventType?: string,

                /**
                 * Returns the start time of the double clicked cell.
                 */
                startTime?: any,

                /**
                 * Returns the target of the double clicked cell.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the edit appointment object.
                 */
                appointment?: any,

                /**
                 * Returns the edit occurrence option value.
                 */
                edit?: boolean
        }
        declare     export interface BeforeContextMenuOpenEventArgs {

            /**
             * Returns the object of beforeContextMenuOpen event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the current cell index value.
                 */
                cellIndex?: number,

                /**
                 * Returns the current date value.
                 */
                currentDate?: any,

                /**
                 * Returns the current resource details, when multiple resources are present, otherwise returns null.
                 */
                resources?: any,

                /**
                 * Returns the current appointment details while opening the menu from appointment.
                 */
                appointment?: any,

                /**
                 * Returns the object of before opening menu target.
                 */
                events?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellClickEventArgs {

            /**
             * Returns the object of cellClick event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the end time of the clicked cell.
                 */
                endTime?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the start time of the clicked cell.
                 */
                startTime?: any,

                /**
                 * Returns the target of the clicked cell.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellDoubleClickEventArgs {

            /**
             * return the JSON details of the double clicked cell.
             */
            selectedData?: any,

                /**
                 * return the custom object bounds with PivotGrid widget.
                 */
                customObject?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface CellHoverEventArgs {

            /**
             * Returns the object of cellHover event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the index of the hovered cell.
                 */
                cellIndex?: any,

                /**
                 * Returns the current date of the hovered cell.
                 */
                currentDate?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the target of the clicked cell.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface MenuItemClickEventArgs {

            /**
             * Returns the object of menuItemClick event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the object of menu item event.
                 */
                events?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface NavigationEventArgs {

            /**
             * Returns the current date object.
             */
            currentDate?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the current view value.
                 */
                currentView?: string,

                /**
                 * Returns the previous view value.
                 */
                previousView?: string,

                /**
                 * Returns the target of the action.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the previous date of the Schedule.
                 */
                previousDate?: any
        }
        declare     export interface QueryCellInfoEventArgs {

            /**
             * Returns grid cell.
             */
            cell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the text value in the cell.
                 */
                text?: string,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ReminderEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the appointment object for which the reminder is raised.
                 */
                reminderAppointment?: any
        }
        declare     export interface ResizeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface ResizeStartEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface ResizeStopEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the dialog model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Current event object.
                 */
                event?: any
        }
        declare     export interface OverflowButtonClickEventArgs {

            /**
             * Returns the object consisting of start time, end time and resource value of the underlying cell on which the clicked overflow button is present.  
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the object of menu item event.
                 */
                events?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface OverflowButtonHoverEventArgs {

            /**
             * Returns the object consisting of start time, end time and resource value of the underlying cell on which the overflow button is currently hovered.  
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the object of menu item event.
                 */
                events?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface KeyDownEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the object of menu item event.
                 */
                events?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface AppointmentCreatedEventArgs {

            /**
             * Returns the appointment object.
             */
            appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface AppointmentChangedEventArgs {

            /**
             * Returns the edited appointment object.
             */
            appointment?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface AppointmentRemovedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the deleted appointment object.
                 */
                appointment?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the Scheduler event.
                 */
                type?: string
        }
        declare     export interface AppointmentSettings {

            /**
             * The dataSource option accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule appointments.
             * @Default  {[]}
             */
            dataSource?: any | Array<any>,

                /**
                 * It holds either the ej.Query() object or simply the query string that retrieves the specified records from the table.
                 * @Default  {null}
                 */
                query?: string,

                /**
                 * Assign the table name from where the records are to be fetched for the Schedule.
                 * @Default  {null}
                 */
                tableName?: string,

                /**
                 * When set to false, doesn't consider the time difference offset calculation on appointment time.
                 * @Default  {true}
                 */
                applyTimeOffset?: boolean,

                /**
                 * Binds the id field name in dataSource to the id of Schedule appointments. It denotes the unique id assigned to appointments.
                 * @Default  {null}
                 */
                id?: string,

                /**
                 * Binds the name of startTime field in the dataSource with start time of the Schedule appointments. It indicates the date and Time when Schedule appointment actually starts.
                 * @Default  {null}
                 */
                startTime?: string,

                /**
                 * Binds the name of endTime field in dataSource with the end time of Schedule appointments. It indicates the date and time when Schedule appointment actually ends.
                 * @Default  {null}
                 */
                endTime?: string,

                /**
                 * Binds the name of subject field in the dataSource to appointment Subject. Indicates the Subject or title that gets displayed on Schedule appointments.
                 * @Default  {null}
                 */
                subject?: string,

                /**
                 * Binds the description field name in dataSource. It indicates the appointment description.
                 * @Default  {null}
                 */
                description?: string,

                /**
                 * Binds the name of recurrence field in dataSource. It indicates whether the appointment is a recurrence appointment or not.
                 * @Default  {null}
                 */
                recurrence?: string,

                /**
                 * Binds the name of recurrenceRule field in dataSource. It indicates the recurrence pattern associated with appointments.
                 * @Default  {null}
                 */
                recurrenceRule?: string,

                /**
                 * Binds the name of allDay field in dataSource. It indicates whether the appointment is an all-day appointment or not.
                 * @Default  {null}
                 */
                allDay?: string,

                /**
                 * Binds one or more fields in resource collection dataSource. It maps the resource field names with appointments denoting the resource of appointments actually belongs.
                 * @Default  {null}
                 */
                resourceFields?: string,

                /**
                 * Binds the name of categorize field in dataSource. It indicates the categorize value, red categorize, green, yellow and so on applied to the appointments.
                 * @Default  {null}
                 */
                categorize?: string,

                /**
                 * Binds the name of location field in dataSource. It indicates the appointment location.
                 * @Default  {null}
                 */
                location?: string,

                /**
                 * Binds the name of the priority field in dataSource. It indicates the priority, high, low, medium and none of the appointments.
                 * @Default  {null}
                 */
                priority?: string,

                /**
                 * Binds the name of start timezone field in dataSource. It indicates the timezone of appointment start date. When startTimeZone field is not mentioned, the appointment uses the Schedule timeZone or System timeZone.
                 * @Default  {null}
                 */
                startTimeZone?: string,

                /**
                 * Binds the name of end timezone field in dataSource. It indicates the timezone of appointment end date. When the endTimeZone field is not mentioned, the appointment uses the Schedule timeZone or System timeZone.
                 * @Default  {null}
                 */
                endTimeZone?: string
        }
        declare     export interface CategorizeSettings {

            /**
             * When set to true, enables the multiple selection of categories to be applied for the appointments.
             * @Default  {false}
             */
            allowMultiple?: boolean,

                /**
                 * When set to true, enables the categories option to be applied for the appointments.
                 * @Default  {false}
                 */
                enable?: boolean,

                /**
                 * The dataSource option accepts either the JSON object collection or DataManager [ej.DataManager] instance that contains the categorize data.
                 */
                dataSource?: Array<any>| any,

                /**
                 * Binds id field name in the dataSource to id of category data.
                 * @Default  {id}
                 */
                id?: string,

                /**
                 * Binds text field name in the dataSource to category text.
                 * @Default  {text}
                 */
                text?: string,

                /**
                 * Binds color field name in the dataSource to category color.
                 * @Default  {color}
                 */
                color?: string,

                /**
                 * Binds fontColor field name in the dataSource to category font.
                 * @Default  {fontColor}
                 */
                fontColor?: string
        }
        declare     export interface ContextMenuSettingsMenuItems {

            /**
             * All the appointment related context menu items are grouped under this appointment menu collection.
             */
            appointment?: Array<any>,

                /**
                 * All the Scheduler cell related context menu items are grouped under this cells menu item collection.
                 */
                cells?: Array<any >
        }
        declare     export interface ContextMenuSettings {

            /**
             * The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default  {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, Sortby, |, NewFolder, Upload, |, Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any,

                /**
                 * The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
                 * @Default  {[]}
                 */
                customMenuFields?: Array<any >
        }
        declare     export interface Group {

            /**
             * Holds the array of resource names to be grouped on the Schedule.
             */
            resources?: Array<any >
        }
        declare     export interface WorkHours {

            /**
             * When set to true, highlights the work hours of the Schedule.
             * @Default  {true}
             */
            highlight?: boolean,

                /**
                 * Sets the start time to depict the start of working or business hour in a day.
                 * @Default  {9}
                 */
                start?: number,

                /**
                 * Sets the end time to depict the end of working or business hour in a day.
                 * @Default  {18}
                 */
                end?: number
        }
        declare     export interface PrioritySettings {

            /**
             * When set to true, enables the priority options available for the Schedule appointments.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * The dataSource option can accept the JSON object collection that contains the priority related data.
                 * @Default  {{% highlight js%}[{ text: None, value: none },{ text: High, value: high },{ text: Medium, value: medium },{ text: Low, value: low }]{% endhighlight %}}
                 */
                dataSource?: any | Array<any>,

                /**
                 * Binds text field name in the dataSource to prioritySettings text. These text gets listed out in priority field of the appointment window.
                 * @Default  {text}
                 */
                text?: string,

                /**
                 * Binds value field name in the dataSource to prioritySettings value. These field names usually accepts four priority values by default, high, low, medium and none.
                 * @Default  {value}
                 */
                value?: string,

                /**
                 * Allows priority field customization in the appointment window to add custom icons denoting the priority level for the appointments.
                 * @Default  {null}
                 */
                template?: string
        }
        declare     export interface ReminderSettings {

            /**
             * When set to true, enables the reminder option available for the Schedule appointments.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * Sets the timing, when the reminders are to be alerted for the Schedule appointments.
                 * @Default  {5}
                 */
                alertBefore?: number
        }
        declare     export interface RenderDates {

            /**
             * Sets the start of custom date range to be rendered in the Schedule.
             * @Default  {null}
             */
            start?: any,

                /**
                 * Sets the end limit of the custom date range.
                 * @Default  {null}
                 */
                end?: any
        }
        declare     export interface ResourcesResourceSettings {

            /**
             * The dataSource option accepts either JSON object collection or DataManager (ejDataManager) instance that contains the resources related data.
             * @Default  {[]}
             */
            dataSource?: any | Array<any>,

                /**
                 * Binds text field name in the dataSource to resourceSettings text. These text gets listed out in resources field of the appointment window.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Binds id field name in the dataSource to resourceSettings id.
                 * @Default  {null}
                 */
                id?: string,

                /**
                 * Binds groupId field name in the dataSource to resourceSettings groupId.
                 * @Default  {null}
                 */
                groupId?: string,

                /**
                 * Binds color field name in the dataSource to resourceSettings color. The color specified here gets applied to the Schedule appointments denoting to the resource it belongs.
                 * @Default  {null}
                 */
                color?: string,

                /**
                 * Binds the starting work hour field name in the dataSource. It's optional, but providing it with some numeric value will set the starting work hour for specific resources.
                 * @Default  {null}
                 */
                start?: string,

                /**
                 * Binds the end work hour field name in the dataSource. It's optional, but providing it with some numeric value will set the end work hour for specific resources.
                 * @Default  {null}
                 */
                end?: string,

                /**
                 * Binds the resources working days field name in the dataSource. It's optional, and accepts the array of strings (week day names). When provided with specific collection of days (array of day names), only those days will render for the specific resources.
                 * @Default  {null}
                 */
                workWeek?: string,

                /**
                 * Binds appointmentClass field name in the dataSource. It applies custom CSS class name to appointments depicting to the resource it belongs.
                 * @Default  {null}
                 */
                appointmentClass?: string
        }
        declare     export interface Resource {

            /**
             * It holds the name of the resource field to be bound to the Schedule appointments that contains the resource Id.
             * @Default  {null}
             */
            field?: string,

                /**
                 * It holds the title name of the resource field to be displayed on the Schedule appointment window.
                 * @Default  {null}
                 */
                title?: string,

                /**
                 * A unique resource name that is used for differentiating various resource objects while grouping it in various levels.
                 * @Default  {null}
                 */
                name?: string,

                /**
                 * When set to true, allows multiple selection of resource names, thus creating multiple instances of same appointment for the selected resources.
                 * @Default  {false}
                 */
                allowMultiple?: boolean,

                /**
                 * It holds the field names of the resources to be bound to the Schedule and also the dataSource.
                 */
                resourceSettings?: ResourcesResourceSettings
        }
        declare     export interface TimeZoneCollection {

            /**
             * Sets the collection of timezone items to the dataSource that accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule timezones.
             */
            dataSource?: any,

                /**
                 * Binds text field name in the dataSource to timeZoneCollection text. These text gets listed out in the timezone fields of the appointment window.
                 * @Default  {text}
                 */
                text?: string,

                /**
                 * Binds id field name in the dataSource to timeZoneCollection id.
                 * @Default  {id}
                 */
                id?: string,

                /**
                 * Binds value field name in the dataSource to timeZoneCollection value.
                 * @Default  {value}
                 */
                value?: string
        }
        declare     export interface AgendaViewSettings {

            /**
             * You can display the summary of multiple week's appointment by setting this value.
             * @Default  {7}
             */
            daysInAgenda?: number,

                /**
                 * You can customize the Date column display based on the requirement.
                 * @Default  {null}
                 */
                dateColumnTemplateId?: string,

                /**
                 * You can customize the time column display based on the requirement.
                 * @Default  {null}
                 */
                timeColumnTemplateId?: string
        }
        declare     export interface TooltipSettings {

            /**
             * To enable or disable the tooltip display.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * To customize the tooltip display based on your requirements.
                 * @Default  {null}
                 */
                template?: string
        }
        declare     export interface TimeScale {

            /**
             * When set to true, displays the time slots on the Scheduler.
             * @Default  {true}
             */
            enable?: boolean,

                /**
                 * When set with some specific value, defines the number of time divisions split per hour(as per value given for the majorTimeSlot). Those time divisions are meant to be the minor slots.
                 * @Default  {2}
                 */
                minorSlotCount?: number,

                /**
                 * Accepts the value in minutes. When provided with specific value, displays the appropriate time interval on the Scheduler
                 * @Default  {60}
                 */
                majorSlot?: number,

                /**
                 * Template design that customizes the timecells (minor slots) that are partitioned based on minorSlotCount. Accepts id value of the template defined for minor time slots.
                 * @Default  {null}
                 */
                minorSlotTemplateId?: string,

                /**
                 * Template design that customizes the timecells (major slots). Accepts id value of the template defined for major time slots.
                 * @Default  {null}
                 */
                majorSlotTemplateId?: string
        }
        declare     export interface BlockoutSettings {

            /**
             * When set to true, enables the blockout option to be applied on the Scheduler cells.
             * @Default  {false}
             */
            enable?: boolean,

                /**
                 * Template design that applies on the Schedule block intervals. All the field names that are mapped from dataSource to the appropriate field properties within the blockoutSettings can be used within the template.
                 * @Default  {null}
                 */
                templateId?: string,

                /**
                 * The dataSource option accepts either JSON object collection or DataManager (ej.DataManager) instance that contains Schedule block intervals.
                 * @Default  {[]}
                 */
                dataSource?: any | Array<any>,

                /**
                 * It holds either the ej.Query() object or simply the query string that retrieves the specified records from the table.
                 * @Default  {null}
                 */
                query?: string,

                /**
                 * Assign the table name from where the records are to be fetched for the Schedule.
                 * @Default  {null}
                 */
                tableName?: string,

                /**
                 * Binds the id field name in dataSource to the id of block time interval. It denotes the unique id assigned to each of the block records.
                 * @Default  {null}
                 */
                id?: string,

                /**
                 * Binds the name of startTime field in the dataSource with start time of block time interval. It indicates the date and time, when the block interval actually starts in the Scheduler.
                 * @Default  {null}
                 */
                startTime?: string,

                /**
                 * Binds the name of endTime field in dataSource with the end time of block time interval. It indicates the date and time, when the block interval actually ends in the Scheduler.
                 * @Default  {null}
                 */
                endTime?: string,

                /**
                 * Binds the name of subject field in the dataSource to block time Subject. Indicates the Subject or title that gets displayed on the Schedule block intervals.
                 * @Default  {null}
                 */
                subject?: string,

                /**
                 * Binds the name of isBlockAppointment field in dataSource. When set to true, disables the appointments that lies on the blocked area and restrict to perform CRUD operations in it.
                 * @Default  {null}
                 */
                isBlockAppointment?: string,

                /**
                 * Binds the name of isAllDay field in dataSource. It indicates whether an entire day is blocked or not.
                 * @Default  {null}
                 */
                isAllDay?: string,

                /**
                 * Binds the name of resourceId field in dataSource. Specifies the id of the resources, to which the time intervals are needed to be blocked.
                 * @Default  {null}
                 */
                resourceId?: string,

                /**
                 * Binds the name of customStyle field in dataSource. It applies the custom CSS to the block intervals.
                 * @Default  {null}
                 */
                customStyle?: string
        }
    }

    declare module 'RecurrenceEditor' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
    }

    declare module 'Gantt' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface BeginEditEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns primary key value.
                 */
                primaryKeyValue?: string,

                /**
                 * Returns begin edit data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSelectingEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns whether the ctrl key is pressed while selecting cell
                 */
                isCtrlKeyPressed?: boolean,

                /**
                 * Returns whether the shift key is pressed while selecting cell
                 */
                isShiftKeyPressed?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSelectedEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the selected row cell index values.
                 */
                selectedRowCellIndex?: Array<any>,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowDragEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns target elements based on mouse move position.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDragStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns drag start element cell.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDragStopEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row which we start to drag.
                 */
                draggedRow?: any,

                /**
                 * Returns the row index which we start to drag.
                 */
                draggedRowIndex?: number,

                /**
                 * Returns the row which we are dropped to row.
                 */
                targetRow?: any,

                /**
                 * Returns the row index which we are dropped to row.
                 */
                targetRowIndex?: number,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns request type.
                 */
                requestType?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CollapsedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of collapsed record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of collapsed record.
                 */
                data?: any,

                /**
                 * Returns Request Type.
                 */
                requestType?: string,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface CollapsingEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of collapsing record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of edited cell record..
                 */
                data?: any,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface ContextMenuOpenEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the default context menu items to which we add custom items.
                 */
                contextMenuItems?: Array<any>,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns request type.
                 */
                requestType?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface EndEditEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns modified data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ExpandedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of expanded record.
                 */
                data?: any,

                /**
                 * Returns Request Type.
                 */
                requestType?: string,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface ExpandingEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of record.
                 */
                recordIndex?: any,

                /**
                 * Returns the data of edited cell record..
                 */
                data?: any,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface QueryCellInfoEventArgs {

            /**
             * Returns grid cell.
             */
            cell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the text value in the cell.
                 */
                text?: string,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface QueryTaskbarInfoEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the taskbar background of current item.
                 */
                TaskbarBackground?: string,

                /**
                 * Returns the progressbar background of current item.
                 */
                ProgressbarBackground?: string,

                /**
                 * Returns the parent taskbar background of current item.
                 */
                parentTaskbarBackground?: string,

                /**
                 * Returns the parent progressbar background of current item.
                 */
                parentProgressbarBackground?: string,

                /**
                 * Returns the data of the record.
                 */
                data?: any
        }
        declare     export interface RowDataBoundEventArgs {

            /**
             * Returns grid row.
             */
            row?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the current selected row.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectingEventArgs {

            /**
             * Returns the selected row index value.
             */
            rowIndex?: number,

                /**
                 * Returns the selected row element.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface TaskbarEditedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the data of edited record.
                 */
                data?: any,

                /**
                 * Returns the previous data value of edited record.
                 */
                previousData?: any,

                /**
                 * Returns 'true' if taskbar is dragged.
                 */
                dragging?: boolean,

                /**
                 * Returns 'true' if taskbar is left resized.
                 */
                leftResizing?: boolean,

                /**
                 * Returns 'true' if taskbar is right resized.
                 */
                rightResizing?: boolean,

                /**
                 * Returns 'true' if taskbar is progress resized.
                 */
                progressResizing?: boolean,

                /**
                 * Returns the field values of record being edited.
                 */
                editingFields?: any,

                /**
                 * Returns the Gantt model.
                 */
                model?: any
        }
        declare     export interface TaskbarEditingEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns the row object being edited.
                 */
                rowData?: any,

                /**
                 * Returns the field values of record being edited.
                 */
                editingFields?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ToolbarClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns the name of the toolbar item on which mouse click has been performed
                 */
                itemName?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DragTooltip {

            /**
             * Specifies option to enable/disable tooltip while drag and drop a row.
             * @Default  {true}
             */
            showTooltip?: boolean,

                /**
                 * Specifies the data source fields to be displayed in the drag tooltip.
                 * @Default  {[]}
                 */
                tooltipItems?: Array<any>,

                /**
                 * Specifies the custom template for drag tooltip.
                 * @Default  {null}
                 */
                tooltipTemplate?: string
        }
        declare     export interface SplitterSettings {

            /**
             * Specifies position of the splitter in Gantt , splitter can be placed either based on percentage values or pixel values.
             */
            position?: string,

                /**
                 * Specifies the position of splitter in Gantt, based on column index in Gantt.
                 */
                index?: string
        }
        declare     export interface EditSettings {

            /**
             * Gets or sets a value that indicates whether to enable the editing action in cards of Kanban.
             * @Default  {false}
             */
            allowEditing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the adding action in cards behavior on Kanban.
                 * @Default  {false}
                 */
                allowAdding?: boolean,

                /**
                 * This specifies the id of the template which is require to be edited using the Dialog Box.
                 * @Default  {null}
                 */
                dialogTemplate?: string,

                /**
                 * Get or sets an object that indicates whether to customize the editMode of the Kanban.
                 * @Default  {ej.Kanban.EditMode.Dialog}
                 */
                editMode?: undefined.EditMode | string,

                /**
                 * Get or sets an object that indicates whether to customize the editing fields of Kanban card.
                 * @Default  {Array}
                 */
                editItems?: Array<EditSettingsEditItem>,

                /**
                 * This specifies the id of the template which is require to be edited using the External edit form.
                 * @Default  {null}
                 */
                externalFormTemplate?: string,

                /**
                 * This specifies to set the position of an External edit form either in the right or bottom of the Kanban.
                 * @Default  {ej.Kanban.FormPosition.Bottom}
                 */
                formPosition?: undefined.FormPosition | string
        }
        declare     export interface ScheduleHeaderSettings {

            /**
             * Specified the format for day view in schedule header
             * @Default  {ddd}
             */
            dayHeaderFormat?: string,

                /**
                 * Specified the format for Hour view in schedule header
                 * @Default  {HH}
                 */
                hourHeaderFormat?: string,

                /**
                 * Specifies the number of minutes per interval
                 * @Default  {ej.Gantt.minutesPerInterval.Auto}
                 */
                minutesPerInterval?: undefined.minutesPerInterval | string,

                /**
                 * Specified the format for month view in schedule header
                 * @Default  {MMM}
                 */
                monthHeaderFormat?: string,

                /**
                 * Specifies the schedule mode
                 * @Default  {ej.Gantt.ScheduleHeaderType.Week}
                 */
                scheduleHeaderType?: undefined.ScheduleHeaderType | string,

                /**
                 * Specifies the round-off mode for the start date in schedule header.
                 * @Default  {ej.Gantt.TimescaleRoundMode.Auto}
                 */
                timescaleStartDateMode?: undefined.TimescaleRoundMode | string,

                /**
                 * Specified the background for weekends in Gantt
                 * @Default  {#F2F2F2}
                 */
                weekendBackground?: string,

                /**
                 * Specified the format for week view in schedule header
                 * @Default  {ddd}
                 */
                weekHeaderFormat?: string,

                /**
                 * Specified the format for year view in schedule header
                 * @Default  {yyyy}
                 */
                yearHeaderFormat?: string
        }
        declare     export interface SizeSettings {

            /**
             * Specifies the height of Gantt control
             * @Default  {450px}
             */
            height?: string,

                /**
                 * Specifies the width of Gantt control
                 * @Default  {1000px}
                 */
                width?: string
        }
        declare     export interface SelectedCellIndex {

            /**
             * Specifies the row index of the cell to be selected Gantt control
             */
            rowIndex?: number,

                /**
                 * Specifies the cell index to be selected in the row.
                 * @Default  { }
                 */
                cellIndex?: number
        }
        declare     export interface SortSettings {

            /**
             * Enables or disables the sorting option in TreeView control
             * @Default  {false}
             */
            allowSorting?: boolean,

                /**
                 * Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
                 * @Default  {ej.sortOrder.Ascending}
                 */
                sortOrder?: ej.sortOrder | string
        }
        declare     export interface ToolbarSettings {

            /**
             * Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default  {[]}
             */
            customToolbarItems?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to enable toolbar in the grid.
                 * @Default  {false}
                 */
                showToolbar?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
                 * @Default  {[]}
                 */
                toolbarItems?: Array<any >
        }
    }

    declare module 'ReportViewer' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface DrillThroughEventArgs {

            /**
             * return the JSON records of the generated cells on drill-through operation.
             */
            data?: any,

                /**
                 * return the outer HTML of PivotGrid control.
                 */
                element?: string,

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                /**
                 * returns the PivotGrid model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface RenderingBeginEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RenderingCompleteEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the collection of parameters.
                 */
                reportParameters?: any
        }
        declare     export interface ReportErrorEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the error details.
                 */
                error?: string,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ReportExportEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ReportLoadedEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ViewReportClickEventArgs {

            /**
             * true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the parameter collection.
                 */
                parameters?: any,

                /**
                 * returns the report model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DataSource {

            /**
             * Contains the database name as string type to fetch the data from the given connection string.
             * @Default  {â€œâ€}
             */
            catalog?: string,

                /**
                 * Lists out the items to be arranged in column section of PivotGrid.
                 * @Default  {[]}
                 */
                columns?: Array<DataSourceColumn>,

                /**
                 * Contains the respective Cube name from database as string type.
                 * @Default  {â€œâ€}
                 */
                cube?: string,

                /**
                 * Provides the raw data source for the PivotGrid.
                 * @Default  {null}
                 */
                data?: any,

                /**
                 * Lists out the items to be arranged in row section of PivotGrid.
                 * @Default  {[]}
                 */
                rows?: Array<DataSourceRow>,

                /**
                 * Lists out the items which supports calculation in PivotGrid.
                 * @Default  {[]}
                 */
                values?: Array<DataSourceValue>,

                /**
                 * Allows user to filter the members (by its name and values) by enable the advanced filtering (excel-like) option for OLAP data source in client-mode.
                 * @Default  {false}
                 */
                enableAdvancedFilter?: boolean,

                /**
                 * Lists out the items which supports filtering of values in PivotGrid.
                 * @Default  {[]}
                 */
                filters?: Array<DataSourceFilter >
        }
        declare     export interface ExportSettings {

            /**
             * Specifies the export formats.
             * @Default  {ej.ReportViewer.ExportOptions.All}
             */
            exportOptions?: undefined.ExportOptions | string,

                /**
                 * Specifies the excel export format.
                 * @Default  {ej.ReportViewer.ExcelFormats.Excel97to2003}
                 */
                excelFormat?: undefined.ExcelFormats | string,

                /**
                 * Specifies the word export format.
                 * @Default  {ej.ReportViewer.WordFormats.Doc}
                 */
                wordFormat?: undefined.WordFormats | string
        }
        declare     export interface PageSettings {

            /**
             * Gets or sets a value that indicates whether to define which page to display currently in the grid
             * @Default  {1}
             */
            currentPage?: number,

                /**
                 * Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
                 * @Default  {false}
                 */
                enableQueryString?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enables pager template for the grid.
                 * @Default  {false}
                 */
                enableTemplates?: boolean,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
                 * @Default  {8}
                 */
                pageCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of records displayed per page
                 * @Default  {12}
                 */
                pageSize?: number,

                /**
                 * Gets or sets a value that indicates whether to enables default pager for the grid.
                 * @Default  {false}
                 */
                showDefaults?: boolean,

                /**
                 * Gets or sets a value that indicates to add the template as a pager template for grid.
                 * @Default  {null}
                 */
                template?: string,

                /**
                 * Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
                 * @Default  {null}
                 */
                totalPages?: number,

                /**
                 * Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
                 * @Default  {null}
                 */
                totalRecordsCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages to print
                 * @Default  {ej.Grid.PrintMode.AllPages}
                 */
                printMode?: undefined.PrintMode | string
        }
        declare     export interface Parameter {

            /**
             * Gets or sets the parameter labels.
             * @Default  {null}
             */
            labels?: Array<any>,

                /**
                 * Gets or sets the name of the parameter.
                 * @Default  {empty}
                 */
                name?: string,

                /**
                 * Gets or sets whether the parameter allows nullable value or not.
                 * @Default  {false}
                 */
                nullable?: boolean,

                /**
                 * Gets or sets the prompt message associated with the specified parameter.
                 * @Default  {empty}
                 */
                prompt?: string,

                /**
                 * Gets or sets the parameter values.
                 * @Default  {[]}
                 */
                values?: Array<any >
        }
        declare     export interface ToolbarSettings {

            /**
             * Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default  {[]}
             */
            customToolbarItems?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to enable toolbar in the grid.
                 * @Default  {false}
                 */
                showToolbar?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
                 * @Default  {[]}
                 */
                toolbarItems?: Array<any >
        }
    }

    declare module 'TreeGrid' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface BeginEditEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the Kanban model.
                 */
                model?: any,

                /**
                 * Returns primary key value.
                 */
                primaryKeyValue?: string,

                /**
                 * Returns begin edit data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CollapsedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of collapsed record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of collapsed record.
                 */
                data?: any,

                /**
                 * Returns Request Type.
                 */
                requestType?: string,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface CollapsingEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of collapsing record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of edited cell record..
                 */
                data?: any,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface ColumnResizedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the control model values.
                 */
                model?: any,

                /**
                 * Returns the event Type.
                 */
                type?: string,

                /**
                 * Returns the column data which is resized
                 */
                column?: any,

                /**
                 * Returns the index of the column being resized.
                 */
                columnIndex?: number,

                /**
                 * Returns resized column width after resized.
                 */
                newWidth?: number,

                /**
                 * Returns resized column width before resizing
                 */
                oldWidth?: number
        }
        declare     export interface ColumnResizeStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the control model values.
                 */
                model?: any,

                /**
                 * Returns the event Type.
                 */
                type?: string,

                /**
                 * Returns the column data in which the resizing started
                 */
                column?: any,

                /**
                 * Returns the column index in which the resizing started
                 */
                columnIndex?: number,

                /**
                 * Returns column width before dragging
                 */
                oldWidth?: number,

                /**
                 * Returns initial column element object.
                 */
                target?: any
        }
        declare     export interface ColumnResizeEndEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the control model values.
                 */
                model?: any,

                /**
                 * Returns the event Type.
                 */
                type?: string,

                /**
                 * Returns the column data in which the resizing started
                 */
                column?: any,

                /**
                 * Returns the column index in which the resizing started
                 */
                columnIndex?: number,

                /**
                 * Returns the column width difference, before and after the resizing
                 */
                extra?: number,

                /**
                 * Returns the new column width after resized
                 */
                newWidth?: number,

                /**
                 * Returns column width before dragging
                 */
                oldWidth?: number,

                /**
                 * Returns initial column element object.
                 */
                target?: any
        }
        declare     export interface ContextMenuOpenEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the default context menu items to which we add custom items.
                 */
                contextMenuItems?: Array<any>,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns request type.
                 */
                requestType?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface EndEditEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns modified data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ExpandedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of record.
                 */
                recordIndex?: number,

                /**
                 * Returns the data of expanded record.
                 */
                data?: any,

                /**
                 * Returns Request Type.
                 */
                requestType?: string,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface ExpandingEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row index of record.
                 */
                recordIndex?: any,

                /**
                 * Returns the data of edited cell record..
                 */
                data?: any,

                /**
                 * Returns state of a record whether it is in expanded or collapsed state.
                 */
                expanded?: boolean
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface QueryCellInfoEventArgs {

            /**
             * Returns grid cell.
             */
            cell?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the text value in the cell.
                 */
                text?: string,

                /**
                 * Returns the column object.
                 */
                column?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowDataBoundEventArgs {

            /**
             * Returns grid row.
             */
            row?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns current row record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowDragEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns target elements based on mouse move position.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDragStartEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns draggable element type.
                 */
                draggableType?: any,

                /**
                 * Returns the draggable row object.
                 */
                target?: any,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns drag start element cell.
                 */
                currentTarget?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the JSON data of dragged rows.
                 */
                data?: any
        }
        declare     export interface RowDragStopEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the row which we start to drag.
                 */
                draggedRow?: any,

                /**
                 * Returns the row index which we start to drag.
                 */
                draggedRowIndex?: number,

                /**
                 * Returns the row which we are dropped to row.
                 */
                targetRow?: any,

                /**
                 * Returns the row index which we are dropped to row.
                 */
                targetRowIndex?: number,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns request type.
                 */
                requestType?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSelectingEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns whether the ctrl key is pressed while selecting cell
                 */
                isCtrlKeyPressed?: boolean,

                /**
                 * Returns whether the shift key is pressed while selecting cell
                 */
                isShiftKeyPressed?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSelectedEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the selected row cell index values.
                 */
                selectedRowCellIndex?: Array<any>,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectedEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the foreign key record object (JSON).
                 */
                foreignKeyData?: any,

                /**
                 * Returns the row index of the selected row.
                 */
                rowIndex?: number,

                /**
                 * Returns the current selected row.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface RowSelectingEventArgs {

            /**
             * Returns the selected row index value.
             */
            rowIndex?: number,

                /**
                 * Returns the selected row element.
                 */
                row?: any,

                /**
                 * Returns the previous selected row element.
                 */
                prevRow?: any,

                /**
                 * Returns the previous selected row index.
                 */
                prevRowIndex?: number,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ToolbarClickEventArgs {

            /**
             * Returns the cancel option value.
             */
            cancel?: boolean,

                /**
                 * Returns the current item.
                 */
                currentTarget?: any,

                /**
                 * Returns the Gantt model.
                 */
                model?: any,

                /**
                 * Returns the name of the toolbar item on which mouse click has been performed
                 */
                itemName?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface Column {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified columns header text.
             * @Default  {null}
             */
            headerText?: string,

                /**
                 * To customize the totalCount properties.
                 * @Default  {false}
                 */
                totalCount?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns key.
                 * @Default  {null}
                 */
                key?: string | number,

                /**
                 * To enable/disable allowDrop for specific column wise.
                 * @Default  {false}
                 */
                allowDrop?: boolean,

                /**
                 * To enable/disable allowDrag for specific column wise.
                 * @Default  {false}
                 */
                allowDrag?: boolean,

                /**
                 * To set column collapse or expand state
                 * @Default  {false}
                 */
                isCollapsed?: boolean,

                /**
                 * To customize the column level constraints with minimum ,maximum limit validation.
                 * @Default  {object}
                 */
                constraints?: ColumnsConstraints,

                /**
                 * Gets or sets a value that indicates to add the template within the header element.
                 * @Default  {null}
                 */
                headerTemplate?: string,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified columns width.
                 * @Default  {null}
                 */
                width?: string | number,

                /**
                 * Gets or sets an object that indicates to set specific column visibility.
                 * @Default  {true}
                 */
                visible?: boolean,

                /**
                 * Gets or sets an object that indicates whether to show add new button.
                 * @Default  {false}
                 */
                showAddButton?: boolean
        }
        declare     export interface ContextMenuSettings {

            /**
             * The items property is used to configure and group the required ContextMenu items in FileExplorer control.
             * @Default  {{% highlight javascript %}{navbar: [NewFolder, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, Getinfo],cwd: [Refresh, Paste,|, Sortby, |, NewFolder, Upload, |, Getinfo],files: [Open, Download, |, Upload, |, Delete, Rename, |, Cut, Copy, Paste, |, OpenFolderLocation, Getinfo]}{% endhighlight %}}
             */
            items?: any,

                /**
                 * The customMenuFields property is used to define custom functionality for custom ContextMenu item's which are defined in items property.
                 * @Default  {[]}
                 */
                customMenuFields?: Array<any >
        }
        declare     export interface DragTooltip {

            /**
             * Specifies option to enable/disable tooltip while drag and drop a row.
             * @Default  {true}
             */
            showTooltip?: boolean,

                /**
                 * Specifies the data source fields to be displayed in the drag tooltip.
                 * @Default  {[]}
                 */
                tooltipItems?: Array<any>,

                /**
                 * Specifies the custom template for drag tooltip.
                 * @Default  {null}
                 */
                tooltipTemplate?: string
        }
        declare     export interface EditSettings {

            /**
             * Gets or sets a value that indicates whether to enable the editing action in cards of Kanban.
             * @Default  {false}
             */
            allowEditing?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable the adding action in cards behavior on Kanban.
                 * @Default  {false}
                 */
                allowAdding?: boolean,

                /**
                 * This specifies the id of the template which is require to be edited using the Dialog Box.
                 * @Default  {null}
                 */
                dialogTemplate?: string,

                /**
                 * Get or sets an object that indicates whether to customize the editMode of the Kanban.
                 * @Default  {ej.Kanban.EditMode.Dialog}
                 */
                editMode?: undefined.EditMode | string,

                /**
                 * Get or sets an object that indicates whether to customize the editing fields of Kanban card.
                 * @Default  {Array}
                 */
                editItems?: Array<EditSettingsEditItem>,

                /**
                 * This specifies the id of the template which is require to be edited using the External edit form.
                 * @Default  {null}
                 */
                externalFormTemplate?: string,

                /**
                 * This specifies to set the position of an External edit form either in the right or bottom of the Kanban.
                 * @Default  {ej.Kanban.FormPosition.Bottom}
                 */
                formPosition?: undefined.FormPosition | string
        }
        declare     export interface FilterSettings {

            /**
             * It allows to search the text given in search Textbox in every keyup event. When this property was set as false, searching will works only on Enter key and searchbar blur.
             * @Default  {true}
             */
            allowSearchOnTyping?: boolean,

                /**
                 * Enables or disables to perform the filter operation with case sensitive.
                 * @Default  {false}
                 */
                caseSensitiveSearch?: boolean,

                /**
                 * Sets the search filter type. There are several filter types available such as &quot;startswith&quot;, &quot;contains&quot;, &quot;endswith&quot;. See filterType.
                 * @Default  {ej.FileExplorer.filterType.Contains}
                 */
                filterType?: ej.FilterType | string
        }
        declare     export interface PageSettings {

            /**
             * Gets or sets a value that indicates whether to define which page to display currently in the grid
             * @Default  {1}
             */
            currentPage?: number,

                /**
                 * Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
                 * @Default  {false}
                 */
                enableQueryString?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enables pager template for the grid.
                 * @Default  {false}
                 */
                enableTemplates?: boolean,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
                 * @Default  {8}
                 */
                pageCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of records displayed per page
                 * @Default  {12}
                 */
                pageSize?: number,

                /**
                 * Gets or sets a value that indicates whether to enables default pager for the grid.
                 * @Default  {false}
                 */
                showDefaults?: boolean,

                /**
                 * Gets or sets a value that indicates to add the template as a pager template for grid.
                 * @Default  {null}
                 */
                template?: string,

                /**
                 * Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
                 * @Default  {null}
                 */
                totalPages?: number,

                /**
                 * Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
                 * @Default  {null}
                 */
                totalRecordsCount?: number,

                /**
                 * Gets or sets a value that indicates whether to define the number of pages to print
                 * @Default  {ej.Grid.PrintMode.AllPages}
                 */
                printMode?: undefined.PrintMode | string
        }
        declare     export interface SizeSettings {

            /**
             * Specifies the height of Gantt control
             * @Default  {450px}
             */
            height?: string,

                /**
                 * Specifies the width of Gantt control
                 * @Default  {1000px}
                 */
                width?: string
        }
        declare     export interface SortSettings {

            /**
             * Enables or disables the sorting option in TreeView control
             * @Default  {false}
             */
            allowSorting?: boolean,

                /**
                 * Sets the sorting order type. There are two sorting types available, such as &quot;ascending&quot;, &quot;descending&quot;.
                 * @Default  {ej.sortOrder.Ascending}
                 */
                sortOrder?: ej.sortOrder | string
        }
        declare     export interface ToolbarSettings {

            /**
             * Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default  {[]}
             */
            customToolbarItems?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to enable toolbar in the grid.
                 * @Default  {false}
                 */
                showToolbar?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
                 * @Default  {[]}
                 */
                toolbarItems?: Array<any >
        }
    }

    declare module 'GroupButton' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeSelectEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the TreeView model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the target element, the given node to be selected
                 */
                target?: any,

                /**
                 * returns the given target node values
                 */
                nodeDetails?: any
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface KeyPressEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface SelectEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string,

                /**
                 * Text of the selected item.
                 */
                text?: string,

                /**
                 * Key of the selected item.
                 */
                key?: string,

                /**
                 * Data object of the selected item.
                 */
                Item?: undefined.Model
        }
    }

    declare module 'NavigationDrawer' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface BeforeCloseEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the DatePicker model.
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the event parameters from DatePicker.
                 */
                events?: any,

                /**
                 * returns the DatePicker popup.
                 */
                element?: HTMLElement
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface SwipeEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the Navigation Drawer model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
    }

    declare module 'RadialMenu' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the button model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * return the button state
                 */
                status?: boolean,

                /**
                 * return the event model for sever side processing. 
                 */
                e?: any
        }
        declare     export interface OpenEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: undefined.Model,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface CloseEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string
        }
        declare     export interface ItemsBadge {

            /**
             * Specifies whether to enable radialmenu item badge or not.
             */
            enabled?: boolean,

                /**
                 * Specifies the value of radial menu item badge.
                 */
                value?: number
        }
        declare     export interface ItemsSliderSettings {

            /**
             * Specifies the sliderSettings ticks values of nested radial menu items.
             */
            ticks?: Array<any>,

                /**
                 * Specifies the sliderSettings stroke Width value.
                 */
                strokeWidth?: number,

                /**
                 * Specifies the value of sliderSettings labelSpace .
                 */
                labelSpace?: number
        }
        declare     export interface Item {

            /**
             * Specify the URL of the frame background image for radial menu item.
             */
            imageUrl?: string,

                /**
                 * Specifies the text of RadialMenu item.
                 */
                text?: string,

                /**
                 * Specifies the enable state of RadialMenu item.
                 */
                enabled?: boolean,

                /**
                 * specify the click event to corresponding image/text for performing some specific action.
                 */
                click?: string,

                /**
                 * Specifies radialmenu item badges.
                 */
                badge?: ItemsBadge,

                /**
                 * Specifies the type of nested radial menu item.
                 */
                type?: string,

                /**
                 * Specifies the sliderSettings ticks for nested radial menu items.
                 */
                sliderSettings?: ItemsSliderSettings,

                /**
                 * Specifies to add sub level items .
                 */
                items?: Array<any >
        }
    }

    declare module 'Tile' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface MouseDownEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any,

                /**
                 * If the child element exist return true; otherwise, false.
                 */
                hasChild?: boolean,

                /**
                 * returns the current list item.
                 */
                item?: string,

                /**
                 * returns the current text of item.
                 */
                text?: string,

                /**
                 * returns the current Index of the item.
                 */
                index?: number,

                /**
                 * If checked return true; otherwise, false.
                 */
                isChecked?: boolean,

                /**
                 * returns the list of checked items.
                 */
                checkedItems?: number,

                /**
                 * returns the current checked item text.
                 */
                checkedItemsText?: string
        }
        declare     export interface MouseUpEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the tile model
                 */
                model?: boolean,

                /**
                 * returns the name of the event
                 */
                type?: boolean,

                /**
                 * returns the current tile text
                 */
                text?: boolean,

                /**
                 * returns the index of current tile item 
                 */
                index?: number
        }
        declare     export interface Badge {

            /**
             * Specifies whether to enable badge or not.
             * @Default  {false}
             */
            enabled?: boolean,

                /**
                 * Specifies maximum value for tile badge.
                 * @Default  {100}
                 */
                maxValue?: number,

                /**
                 * Specifies minimum value for tile badge.
                 * @Default  {1}
                 */
                minValue?: number,

                /**
                 * Specifies text instead of number for tile badge.
                 * @Default  {null}
                 */
                text?: string,

                /**
                 * Sets value for tile badge.
                 * @Default  {1}
                 */
                value?: number,

                /**
                 * Sets position for tile badge.
                 * @Default  {â€œbottomrightâ€}
                 */
                position?: undefined.BadgePosition | string
        }
        declare     export interface Caption {

            /**
             * Specifies whether the tile text to be shown or hidden.
             * @Default  {true}
             */
            enabled?: boolean,

                /**
                 * Changes the text of a tile.
                 * @Default  {Text}
                 */
                text?: string,

                /**
                 * It is used to align the text of a tile.
                 * @Default  {normal}
                 */
                alignment?: undefined.CaptionAlignment | string,

                /**
                 * It is used to specify the caption position like Inner top,  inner bottom and outer.
                 * @Default  {Innerbottom}
                 */
                position?: undefined.CaptionPosition | string,

                /**
                 * sets the icon instead of text.
                 * @Default  {null}
                 */
                icon?: string
        }
        declare     export interface LiveTile {

            /**
             * Specifies whether to enable liveTile or not.
             * @Default  {false}
             */
            enabled?: boolean,

                /**
                 * Specifies liveTile images in CSS classes.
                 * @Default  {null}
                 */
                imageClass?: Array<any>,

                /**
                 * Specifies liveTile images in templates.
                 * @Default  {null}
                 */
                imageTemplateId?: Array<any>,

                /**
                 * Specifies liveTile images in CSS classes.
                 * @Default  {null}
                 */
                imageUrl?: Array<any>,

                /**
                 * Specifies liveTile type for Tile. See orientation
                 * @Default  {flip}
                 */
                type?: undefined.liveTileType | string,

                /**
                 * Specifies time interval between two successive liveTile animation
                 * @Default  {2000}
                 */
                updateInterval?: number,

                /**
                 * Sets the text to each living tile
                 * @Default  {Null}
                 */
                text?: Array<any >
        }
    }

    declare module 'RadialSlider' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ChangeEventArgs {

            /**
             * Set this option to true to cancel the event.
             */
            cancel?: boolean,

                /**
                 * Instance of the autocomplete model object.
                 */
                model?: any,

                /**
                 * Name of the event.
                 */
                type?: string,

                /**
                 * Value of the autocomplete textbox.
                 */
                value?: string
        }
        declare     export interface CreateEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the scroller model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface MouseoverEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the mask edit model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the mask edit value
                 */
                value?: number,

                /**
                 * returns unstripped value in mask edit textbox control.
                 */
                unmaskedValue?: string
        }
        declare     export interface SlideEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns current handle number or index
                 */
                sliderIndex?: number,

                /**
                 * returns slider id
                 */
                id?: string,

                /**
                 * returns the slider model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the slider value
                 */
                value?: number
        }
        declare     export interface StartEventArgs {

            /**
             * returns the cancel option value
             */
            cancel?: boolean,

                /**
                 * returns the ProgressBar model
                 */
                model?: undefined.Model,

                /**
                 * returns the current progress percentage
                 */
                percentage?: any,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the current progress value
                 */
                value?: string
        }
        declare     export interface StopEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
    }

    declare module 'Spreadsheet' {
        declare     export interface XLCellType {

            /**
             * This method is used to set a cell type from the specified range of cells in the spreadsheet.
             * @param  the range where you want apply cell type.
             * @param  type of cell type and its settings.
             * @param  . Pass sheet index.
             * @returns  
             */
            addCellTypes(range: string, settings: any, sheetIdx: number): void,

                /**
                 * This method is used to remove cell type from the specified range of cells in the Spreadsheet.
                 * @param  the range where you want remove cell type.
                 * @param  .  Pass sheet index.
                 * @returns  
                 */
                removeCellTypes(range: string, sheetIdx: number): void
        }
        declare     export interface XLCFormat {

            /**
             * This method is used to clear the applied conditional formatting rules in the Spreadsheet.
             * @param  true if you want to clear rules from selected cells else it will clear rules from entire sheet.
             * @param  .   If range is specified, it will clear rules for the specified range else it will use the current selected range.
             * @returns  
             */
            clearCF(isSelected: boolean, range: Array<any>| string): void,

                /**
                 * This method is used to get the applied conditional formatting rules as array of objects based on the specified row Index and column Index in the Spreadsheet.
                 * @param  the row index.
                 * @param  the column index.
                 * @returns  
                 */
                getCFRule(rowIdx: number, colIdx: number): Array<any>,

                /**
                 * This method is used to set the conditional formatting rule in the Spreadsheet.
                 * @param  the rule to set.
                 * @returns  
                 */
                setCFRule(rule: any): void
        }
        declare     export interface XLChart {

            /**
             * This method is used to create a chart for specified range in Spreadsheet.
             * @param  .  If range is specified, it will create chart for the specified range else it will use the current selected range.
             * @param  .  To pass the type of chart and chart name.
             * @returns  
             */
            createChart(range: string, options: any): void,

                /**
                 * This method is used to refresh the chart in the Spreadsheet.
                 * @param  pass the chart Id.
                 * @param  pass the type of chart and chart name.
                 * @returns  
                 */
                refreshChart(id: string, options: any): void,

                /**
                 * This method is used to resize the chart of specified id in the Spreadsheet.
                 * @param  pass the chart id.
                 * @param  pass height value.
                 * @param  pass the width value.
                 * @returns  
                 */
                resizeChart(id: string, height: number, width: number): void
        }
        declare     export interface XLClipboard {

            /**
             * This method is used to copy the selected cells in the Spreadsheet.
             * @returns  
             */
            copy(): void,

                /**
                 * This method is used to cut the selected cells in the Spreadsheet.
                 * @returns  
                 */
                cut(): void,

                /**
                 * This method is used to paste the cut or copied cells data in the Spreadsheet.
                 * @returns  
                 */
                paste(): void
        }
        declare     export interface XLComment {

            /**
             * This method is used to delete the comment in the specified range in Spreadsheet.
             * @param  .  If range is specified, it will delete comments for the specified range else it will use the current selected range. 
             * @param  .  If sheetIdx is specified, it will delete comment in specified sheet else it will use active sheet.
             * @param  .  Pass true, if you want to skip the hidden rows data.
             * @returns  
             */
            deleteComment(range: Array<any>| string, sheetIdx: number, skipHiddenRow: boolean): void,

                /**
                 * This method is used to edit the comment in the target Cell in Spreadsheet.
                 * @param  .  Pass the row index and column index of the cell which contains comment. 
                 * @returns  
                 */
                editComment(targetCell: any): void,

                /**
                 * This method is used to find the next comment from the active cell in Spreadsheet.
                 * @returns  
                 */
                findNextComment(): boolean,

                /**
                 * This method is used to find the previous comment from the active cell in Spreadsheet.
                 * @returns  
                 */
                findPrevComment(): boolean,

                /**
                 * This method is used to get comment data for the specified cell.
                 * @param  the DOM element to get comment data as object.
                 * @returns  
                 */
                getComment(cell: HTMLElement): any,

                /**
                 * This method is used to set new comment in Spreadsheet.
                 * @param  .  If we pass the range comment will set in the range otherwise it will set with selected cells. 
                 * @param  .  Pass the comment data.
                 * @param  .  Pass true to show comment in edit mode 
                 * @returns  
                 */
                setComment(range: string | Array<any>, data: string, showEditPanel: boolean): void,

                /**
                 * This method is used to show all the comments in the Spreadsheet.
                 * @returns  
                 */
                showAllComments(): void,

                /**
                 * This method is used to show or hide the specific comment in the Spreadsheet.
                 * @param  .  Pass the cell DOM element to show or hide its comment. If pass empty argument active cell will processed.
                 * @returns  
                 */
                showHideComment(targetCell: HTMLElement): void
        }
        declare     export interface XLDragDrop {

            /**
             * This method is used to drag and drop the selected range of cells to destination range in the Spreadsheet.
             * @param  the source range to perform drag and drop.
             * @param  the destination range to drop the dragged cells.
             * @returns  
             */
            moveRangeTo(sourceRange: any | Array<any>, destinationRange: any | Array<any>): void
        }
        declare     export interface XLDragFill {

            /**
             * This method is used to perform auto fill in Spreadsheet.
             * @param  the options to perform auto fill in Spreadsheet.
             * @returns  
             */
            autoFill(options: any): void,

                /**
                 * This method is used to hide the auto fill element in the Spreadsheet.
                 * @returns  
                 */
                hideAutoFillElement(): void,

                /**
                 * This method is used to hide the auto fill options in the Spreadsheet.
                 * @returns  
                 */
                hideAutoFillOptions(): void,

                /**
                 * This method is used to set position of the auto fill element in the Spreadsheet.
                 * @param  the drag fill status as boolean value for show auto fill options in Spreadsheet.
                 * @returns  
                 */
                positionAutoFillElement(isDragFill: boolean): void
        }
        declare     export interface XLEdit {

            /**
             * This method is used to calculate formulas in the specified sheet.
             * @param  .  If sheet index is specified, then it will calculate formulas in the specified sheet only else it will calculate formulas in all sheets.
             * @returns  
             */
            calcNow(sheetIdx: number): void,

                /**
                 * This method is used to edit a particular cell based on the row index and column index in the Spreadsheet.
                 * @param  the row index to edit particular cell.
                 * @param  the column index to edit particular cell.
                 * @param  true, if you want to maintain previous cell value.
                 * @returns  
                 */
                editCell(rowIdx: number, colIdx: number, oldData: boolean): void,

                /**
                 * This method is used to get the property value of particular cell, based on the row and column index in the Spreadsheet.
                 * @param  the row index to get the property value.
                 * @param  the column index to get the property value.
                 * @param  . Pass the property name that you want("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader",  "filterState", "tableName", "comment", "formatStr", "decimalPlaces", "cellType").
                 * @param  .  Pass the index of the sheet.
                 * @returns  
                 */
                getPropertyValue(
                    rowIdx: number,
                    colIdx: number,
                    prop: string,
                    sheetIdx: number): any | string | Array<any>,

                /**
                 * This method is used to get the property value in specified cell in Spreadsheet.
                 * @param  the cell element to get property value.
                 * @param  the property name that you want ("value", "value2", "type", "cFormatRule", "range", "thousandSeparator", "rule", "format", "border", "picture", "chart", "calcValue", "align", "hyperlink", "formats", "borders", "tformats", "tborders", "isFilterHeader", "filterState", "tableName", "comment", "formatStr", "decimalPlaces", "cellType").
                 * @param  the index of sheet.
                 * @returns  
                 */
                getPropertyValueByElem(elem: HTMLElement, property: string, sheetIdx: number): void,

                /**
                 * This method is used to save the edited cell value in the Spreadsheet.
                 * @returns  
                 */
                saveCell(): void,

                /**
                 * This method is used to update a particular cell value in the Spreadsheet.
                 * @param  row index and column index of the cell.
                 * @param  the cell value.
                 * @returns  
                 */
                updateCell(cell: any, value: string | number): void,

                /**
                 * This method is used to update a particular cell value and its format in the Spreadsheet.
                 * @param  row index and column index of the cell.
                 * @param  the cell value.
                 * @param  the class name to update format. 
                 * @param  sheet index.
                 * @returns  
                 */
                updateCellValue(
                    cellIdx: any,
                    val: string | number,
                    formatClass: string,
                    sheetIdx: number): void
        }
        declare     export interface XLExport {

            /**
             * This method is used to save the sheet data as Excel or CSV document (.xls, .xlsx and .csv) in Spreadsheet.
             * @param  the export type that you want. 
             * @returns  
             */
            export (type: string): void
        }
        declare     export interface XLFilter {

            /**
             * This method is used to clear the filter in filtered columns in the Spreadsheet.
             * @returns  
             */
            clearFilter(): void,

                /**
                 * This method is used to apply filter for the selected range of cells in the Spreadsheet.
                 * @param  the range of the selected cells.
                 * @returns  
                 */
                filter(range: string): void,

                /**
                 * This method is used to apply filter for the column by active cell's value in the Spreadsheet.
                 * @returns  
                 */
                filterByActiveCell(): void
        }
        declare     export interface XLFormat {

            /**
             * This method is used to create a table for the selected range of cells in the Spreadsheet.
             * @param  the table object.
             * @param  .   If the range is specified, then it will create table in the specified range else it will use the current selected range. 
             * @returns  
             */
            createTable(tableObject: any, range: string): void,

                /**
                 * This method is used to set format style and values in a cell or range of cells.
                 * @param  the formatObject which contains style, type, format, groupSeparator and decimalPlaces.
                 * @param  the range indices to format cells.
                 * @returns  
                 */
                format(formatObj: any, range: string): void,

                /**
                 * This method is used to remove the style in the specified range.
                 * @param  the cell range .
                 * @param  . Pass the options for which the style gets removed.
                 * @returns  
                 */
                removeStyle(range: Array<any>| string, options: any): void,

                /**
                 * This method is used to remove table with specified tableId in the Spreadsheet.
                 * @param  the tableId that you want to remove.
                 * @returns  
                 */
                removeTable(tableId: number): void,

                /**
                 * This method is used to update the decimal places for numeric value for the selected range of cells in the Spreadsheet.
                 * @param  the decimal places type in increment/decrement.
                 * @param  the range indices.
                 * @returns  
                 */
                updateDecimalPlaces(type: string, range: string): void,

                /**
                 * This method is used to update the format for the selected range of cells in the Spreadsheet.
                 * @param  the format object that you want to update.
                 * @param  .  If the range is specified, then it will update format in the specified range else it will use the current selected range. 
                 * @returns  
                 */
                updateFormat(formatObj: any, range: Array<any>): void,

                /**
                 * This method is used to update the unique format for selected range of cells in the Spreadsheet.
                 * @param  the unique format class.
                 * @param  .  If the range is specified, then it will update format in the specified range else it will use the current selected range.
                 * @returns  
                 */
                updateUniqueFormat(formatClass: string, range: Array<any>): void
        }
        declare     export interface XLFreeze {

            /**
             * This method is used to freeze columns upto the specified column index in the Spreadsheet.
             * @param  of the column to be freeze.
             * @returns  
             */
            freezeColumns(colIdx: number): void,

                /**
                 * This method is used to freeze the first column in the Spreadsheet.
                 * @returns  
                 */
                freezeLeftColumn(): void,

                /**
                 * This method is used to freeze rows and columns before the specified cell in the Spreadsheet.
                 * @param  index and column index of the cell which you want to freeze.
                 * @returns  
                 */
                freezePanes(cell: any): void,

                /**
                 * This method is used to freeze rows upto the specified row index in the Spreadsheet.
                 * @param  of the row to be freeze.
                 * @returns  
                 */
                freezeRows(rowIdx: number): void,

                /**
                 * This method is used to freeze the top row in the Spreadsheet.
                 * @returns  
                 */
                freezeTopRow(): void
        }
        declare     export interface XLPivot {

            /**
             * This property is used to clear the pivot table list in Spreadsheet.
             * @param  the name of the pivot table. 
             * @returns  
             */
            clearPivotFieldList(pivotName: string): void,

                /**
                 * This method is used to create pivot table.
                 * @param  specifies the range for which the pivot table is created.
                 * @param  specifies the location in which the pivot table is created.
                 * @param  specifies the name of the pivot table.
                 * @param  the pivot table settings.
                 * @param  the pivot range, sheet index, address and data source .
                 * @returns  
                 */
                createPivotTable(range: string, location: string, name: string, settings: any, pvt: any): void,

                /**
                 * This method is used to delete the pivot table which is selected.
                 * @param  the name of the pivot table.
                 * @returns  
                 */
                deletePivotTable(pivotName: string): void,

                /**
                 * This method is used to refresh data in pivot table.
                 * @param  . Pass the name of the pivot table.
                 * @param  . Pass the index of the sheet.
                 * @returns  
                 */
                refreshDataSource(name: string, sheetIdx: number): void
        }
        declare     export interface XLPrint {

            /**
             * This method is used to print the selected contents in the Spreadsheet.
             * @returns  
             */
            printSelection(): void,

                /**
                 * This method is used to print the entire contents in the active sheet.
                 * @returns  
                 */
                printSheet(): void
        }
        declare     export interface XLResize {

            /**
             * This method is used to get the column width of the specified column index in the Spreadsheet.
             * @param  the column index.
             * @returns  
             */
            getColWidth(colIdx: number): number,

                /**
                 * This method is used to get the row height of the specified row index in the Spreadsheet.
                 * @param  the row index which you want to find its height.
                 * @returns  
                 */
                getRowHeight(rowIdx: number): number,

                /**
                 * This method is used to set the column width of the specified column index in the Spreadsheet.
                 * @param  the column index.
                 * @param  the width value that you want to set.
                 * @returns  
                 */
                setColWidth(colIdx: number, size: number): void,

                /**
                 * This method is used to set the row height of the specified row index in the Spreadsheet.
                 * @param  the row index.
                 * @param  the height value that you want to set.
                 * @returns  
                 */
                setRowHeight(rowIdx: number, size: number): void
        }
        declare     export interface XLRibbon {

            /**
             * This method is used to add a new name in the Spreadsheet name manager.
             * @param  the name that you want to define in name manager.
             * @param  the cell reference.
             * @param  .  Pass comment, if you want.
             * @param  .   Pass the sheet index.
             * @returns  
             */
            addNamedRange(name: string, refersTo: string, comment: string, sheetIdx: number): void,

                /**
                 * This method is used to insert the few type (SUM, MAX, MIN, AVG, COUNT) of formulas in the selected range of cells in the Spreadsheet.
                 * @param  pass the type("SUM","MAX","MIN","AVG","COUNT").
                 * @param  range is specified, it will apply auto sum for the specified range else it will use the current selected range.
                 * @returns  
                 */
                autoSum(type: string, range: string): void,

                /**
                 * This method is used to delete the defined name in the Spreadsheet name manager.
                 * @param  the defined name that you want to remove from name manager.
                 * @returns  
                 */
                removeNamedRange(name: string): void,

                /**
                 * This method is used to update the ribbon icons in the Spreadsheet.
                 * @returns  
                 */
                updateRibbonIcons(): void
        }
        declare     export interface XLSearch {

            /**
             * This method is used to find and replace all data by workbook in the Spreadsheet.
             * @param  the search data.
             * @param  the replace data.
             * @param  true, if you want to match with case-sensitive.
             * @param  true, if you want to match with entire cell contents.
             * @returns  
             */
            replaceAllByBook(
                    findData: string,
                    replaceData: string,
                    isCSen: boolean,
                    isEMatch: boolean): void,

                /**
                 * This method is used to find and replace all data by sheet in Spreadsheet.
                 * @param  the search data.
                 * @param  the replace data.
                 * @param  true, if you want to match with case-sensitive.
                 * @param  true, if you want to match with entire cell contents.
                 * @returns  
                 */
                replaceAllBySheet(
                    findData: string,
                    replaceData: string,
                    isCSen: boolean,
                    isEMatch: boolean): void
        }
        declare     export interface XLSelection {

            /**
             * This method is used to get the selected cells element based on specified sheet index in the Spreadsheet.
             * @param  the sheet index to get the cells element.
             * @returns  
             */
            getSelectedCells(sheetIdx: number): HTMLElement,

                /**
                 * This method is used to refresh the selection in the Spreadsheet.
                 * @param  .  Pass range to refresh selection.
                 * @returns  
                 */
                refreshSelection(range: Array<any>): void,

                /**
                 * This method is used to select a single column in the Spreadsheet.
                 * @param  the column index value.
                 * @returns  
                 */
                selectColumn(colIdx: number): void,

                /**
                 * This method is used to select entire columns in a specified range (start index and end index) in the Spreadsheet.
                 * @param  the column start index.
                 * @param  the column end index.
                 * @returns  
                 */
                selectColumns(startIdx: number, endIdx: number): void,

                /**
                 * This method is used to select the specified range of cells in the Spreadsheet.
                 * @param  range which want to select.
                 * @returns  
                 */
                selectRange(range: string): void,

                /**
                 * This method is used to select a single row in the Spreadsheet.
                 * @param  the row index value.
                 * @returns  
                 */
                selectRow(rowIdx: number): void,

                /**
                 * This method is used to select entire rows in a specified range (start index and end index) in the Spreadsheet.
                 * @param  the start row index.
                 * @param  the end row index.
                 * @returns  
                 */
                selectRows(startIdx: number, endIdx: number): void,

                /**
                 * This method is used to select all cells in active sheet.
                 * @returns  
                 */
                selectSheet(): void
        }
        declare     export interface XLSort {

            /**
             * This method is used to sort a particular range of cells based on its cell or font color in the Spreadsheet.
             * @param  'PutCellColor' to sort by cell color or 'PutFontColor' for by font color.
             * @param  the HEX color code to sort.
             * @param  the range
             * @returns  
             */
            sortByColor(operation: string, color: any, range: string): void,

                /**
                 * This method is used to sort a particular range of cells based on its values in the Spreadsheet.
                 * @param  the range to sort.
                 * @param  the column name.
                 * @param  the direction to sort (ascending or descending).
                 * @returns  
                 */
                sortByRange(range: Array<any>| string, columnName: string, direction: any): void
        }
        declare     export interface XLValidate {

            /**
             * This method is used to apply data validation rules in a selected range of cells based on the defined condition in the Spreadsheet.
             * @param  range is specified, it will apply rules for the specified range else it will use the current selected range. 
             * @param  the validation condition, value1 and value2.
             * @param  the data type.
             * @param  'true' if you ignore blank values.
             * @param  'true' if you want to show an error alert.
             * @returns  
             */
            applyDVRules(
                    range: string,
                    values: Array<any>,
                    type: string,
                    required: boolean,
                    showErrorAlert: boolean): void,

                /**
                 * This method is used to clear the applied validation rules in a specified range of cells in the Spreadsheet.
                 * @param  .  If range is specified, it will clear rules for the specified range else it will use the current selected range. 
                 * @returns  
                 */
                clearDV(range: string): void,

                /**
                 * This method is used to highlight invalid data in a specified range of cells in the Spreadsheet.
                 * @param  .  If range is specified, it will clear rules for the specified range else it will use the current selected range.
                 * @returns  
                 */
                highlightInvalidData(range: string): void
        }
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface ActionBeginEventArgs {}
        declare     export interface ActionCompleteEventArgs {}
        declare     export interface AutoFillBeginEventArgs {

            /**
             * Returns auto fill begin cell range.
             */
            dataRange?: Array<any>,

                /**
                 * Returns which direction drag the auto fill.
                 */
                direction?: string,

                /**
                 * Returns fill cells range.
                 */
                fillRange?: Array<any>,

                /**
                 * Returns the auto fill type.
                 */
                fillType?: string,

                /**
                 * Returns the sheet index.
                 */
                sheetIdx?: number,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface AutoFillCompleteEventArgs {

            /**
             * Returns auto fill begin cell range.
             */
            dataRange?: Array<any>,

                /**
                 * Returns which direction to drag the auto fill.
                 */
                direction?: string,

                /**
                 * Returns fill cells range.
                 */
                fillRange?: Array<any>,

                /**
                 * Returns the auto fill type.
                 */
                fillType?: string,

                /**
                 * Returns the sheet index.
                 */
                sheetIdx?: number,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface BeforeBatchSaveEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the changed record object.
                 */
                batchChanges?: any
        }
        declare     export interface BeforeCellFormatEventArgs {

            /**
             * Returns the sheet index.
             */
            sheetIdx?: number,

                /**
                 * Returns the applied style format object.
                 */
                format?: any,

                /**
                 * Returns the selected cells.
                 */
                cells?: Array<any>| any,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforeCellSelectEventArgs {

            /**
             * Returns the previous cell range.
             */
            prevRange?: Array<any>,

                /**
                 * Returns the current cell range.
                 */
                currRange?: Array<any>,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface BeforeDropEventArgs {

            /**
             * Returns the sheet index.
             */
            sheetIdx?: number,

                /**
                 * Returns the current cell row and column index.
                 */
                currentCell?: any,

                /**
                 * Returns the drag cells range object.
                 */
                dragAndDropRange?: any,

                /**
                 * Returns the cell Overwriting alert option value.
                 */
                preventAlert?: boolean,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the target item.
                 */
                target?: HTMLElement,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface BeforeOpenEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the opened item type.
                 */
                itemType?: string,

                /**
                 * returns the FileExplorer model.
                 */
                model?: undefined.Model,

                /**
                 * returns the path of currently opened item.
                 */
                path?: string,

                /**
                 * returns the selected item details.
                 */
                selectedItems?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string
        }
        declare     export interface BeforePanelOpenEventArgs {

            /**
             * Returns the sheet index.
             */
            sheetIdx?: number,

                /**
                 * Returns the activation panel element.
                 */
                activationPanel?: any,

                /**
                 * Returns the range option value.
                 */
                range?: any,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface CellClickEventArgs {

            /**
             * Returns the object of cellClick event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the end time of the clicked cell.
                 */
                endTime?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the start time of the clicked cell.
                 */
                startTime?: any,

                /**
                 * Returns the target of the clicked cell.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellEditEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the validation rules.
                 */
                validationRules?: any,

                /**
                 * Returns the column name.
                 */
                columnName?: string,

                /**
                 * Returns the cell value.
                 */
                value?: string,

                /**
                 * Returns the row data object.
                 */
                rowData?: any,

                /**
                 * Returns the previous value of the cell.
                 */
                previousValue?: string,

                /**
                 * Returns the column object.
                 */
                columnObject?: any,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns isForeignKey option value.
                 */
                isForeignKey?: boolean
        }
        declare     export interface CellFormattingEventArgs {

            /**
             * Returns the sheet index
             */
            SheetIdx?: number,

                /**
                 * Returns the applied style format object
                 */
                Format?: any,

                /**
                 * Returns the cell index.
                 */
                Cell?: number,

                /**
                 * Returns the name of the css theme.
                 */
                cssClass?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the target element.
                 */
                target?: HTMLElement,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model
        }
        declare     export interface CellHoverEventArgs {

            /**
             * Returns the object of cellHover event.
             */
            object?: any,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the index of the hovered cell.
                 */
                cellIndex?: any,

                /**
                 * Returns the current date of the hovered cell.
                 */
                currentDate?: any,

                /**
                 * Returns the Schedule model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the target of the clicked cell.
                 */
                target?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface CellSaveEventArgs {

            /**
             * Returns the grid model.
             */
            model?: any,

                /**
                 * Returns deleted data.
                 */
                data?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the column name.
                 */
                columnName?: string,

                /**
                 * Returns the cell value.
                 */
                value?: string,

                /**
                 * Returns the row data object.
                 */
                rowData?: any,

                /**
                 * Returns the previous value of the cell.
                 */
                previousValue?: string,

                /**
                 * Returns the column object.
                 */
                columnObject?: any,

                /**
                 * Returns the cell object.
                 */
                cell?: any,

                /**
                 * Returns isForeignKey option value.
                 */
                isForeignKey?: boolean
        }
        declare     export interface CellSelectedEventArgs {

            /**
             * Returns the selected cell index value.
             */
            cellIndex?: number,

                /**
                 * Returns the previous selected cell index value.
                 */
                previousRowCellIndex?: number,

                /**
                 * Returns the selected cell element.
                 */
                currentCell?: any,

                /**
                 * Returns the previous selected cell element.
                 */
                previousRowCell?: any,

                /**
                 * Returns current record object (JSON).
                 */
                data?: any,

                /**
                 * Returns the selected row cell index values.
                 */
                selectedRowCellIndex?: Array<any>,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the grid model.
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string
        }
        declare     export interface ContextMenuClickEventArgs {

            /**
             * returns clicked menu item text.
             */
            text?: string,

                /**
                 * returns clicked menu item element.
                 */
                element?: any,

                /**
                 * returns the selected item.
                 */
                selectedItem?: number
        }
        declare     export interface DragEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DragStartEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the draggable model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the event model values
                 */
                event?: any,

                /**
                 * returns the exact mouse down target element
                 */
                target?: any
        }
        declare     export interface DropEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * returns the element which accepts the droppable element.
                 */
                targetElement?: any
        }
        declare     export interface EditRangeBeginEventArgs {

            /**
             * Returns the sheet index.
             */
            sheetIdx?: number,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the range option value.
                 */
                range?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface EditRangeCompleteEventArgs {

            /**
             * Returns the sheet index.
             */
            sheetIdx?: number,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the range option value.
                 */
                range?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface LoadEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface LoadCompleteEventArgs {

            /**
             * returns true if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns the model value of the control.
                 */
                model?: any
        }
        declare     export interface MenuClickEventArgs {

            /**
             * Returns menu click element.
             */
            element?: HTMLElement,

                /**
                 * Returns the event information.
                 */
                event?: any,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns target element parent Id.
                 */
                parentId?: string,

                /**
                 * Returns target element parent text.
                 */
                parentText?: string,

                /**
                 * Returns target element text.
                 */
                text?: string,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface OnImportEventArgs {

            /**
             * Returns the name of the event.
             */
            type?: string,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean,

                /**
                 * Returns the imported data.
                 */
                importData?: any
        }
        declare     export interface OpenFailureEventArgs {

            /**
             * Returns the failure type.
             */
            failureType?: string,

                /**
                 * Returns the status index.
                 */
                status?: number,

                /**
                 * Returns the status in text.
                 */
                statusText?: string,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface PagerClickEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the rotator model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string,

                /**
                 * the current rotator id.
                 */
                itemId?: string,

                /**
                 * returns the current slide index.
                 */
                activeItemIndex?: number
        }
        declare     export interface RibbonClickEventArgs {

            /**
             * Returns element Id.
             */
            Id?: string,

                /**
                 * Returns target information.
                 */
                prop?: any,

                /**
                 * Returns the Spreadsheet model.
                 */
                model?: undefined.Model,

                /**
                 * Returns status.
                 */
                status?: boolean,

                /**
                 * Returns isChecked in boolean.
                 */
                isChecked?: boolean,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the target element.
                 */
                target?: HTMLElement,

                /**
                 * Returns the cancel option value.
                 */
                cancel?: boolean
        }
        declare     export interface SeriesRenderingEventArgs {

            /**
             * Set this option to true to cancel the event
             */
            cancel?: boolean,

                /**
                 * Instance of the sparkline model object
                 */
                model?: any,

                /**
                 * Name of the event
                 */
                type?: string,

                /**
                 * Minimum x value of the data point
                 */
                minX?: any,

                /**
                 * Minimum y value of the data point
                 */
                minY?: any,

                /**
                 * Maximum x value of the data point
                 */
                maxX?: any,

                /**
                 * Maximum y value of the data point
                 */
                maxY?: any
        }
        declare     export interface TabClickEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: any,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: any,

                /**
                 * returns current active index.
                 */
                activeIndex?: number
        }
        declare     export interface TabSelectEventArgs {

            /**
             * Set to true when the event has to be canceled, else false.
             */
            cancel?: boolean,

                /**
                 * returns the ribbon model.
                 */
                model?: any,

                /**
                 * returns the name of the event.
                 */
                type?: string,

                /**
                 * returns previous active tab header.
                 */
                prevActiveHeader?: any,

                /**
                 * returns previous active index.
                 */
                prevActiveIndex?: number,

                /**
                 * returns current active tab header .
                 */
                activeHeader?: any,

                /**
                 * returns current active index.
                 */
                activeIndex?: number
        }
        declare     export interface AutoFillSettings {

            /**
             * This property is used to set fillType unit in Spreadsheet. It has five types which are CopyCells, FillSeries, FillFormattingOnly, FillWithoutFormatting and FlashFill.
             * @Default  {ej.Spreadsheet.AutoFillOptions.FillSeries}
             */
            fillType?: undefined.AutoFillOptions | string,

                /**
                 * Gets or sets a value that indicates to enable or disable auto fill options in the Spreadsheet.
                 * @Default  {true}
                 */
                showFillOptions?: boolean
        }
        declare     export interface ChartSettings {

            /**
             * Gets or sets a value that defines the chart height in Spreadsheet.
             * @Default  {220}
             */
            height?: number,

                /**
                 * Gets or sets a value that defines the chart width in the Spreadsheet.
                 * @Default  {440}
                 */
                width?: number
        }
        declare     export interface ExportSettings {

            /**
             * Specifies the export formats.
             * @Default  {ej.ReportViewer.ExportOptions.All}
             */
            exportOptions?: undefined.ExportOptions | string,

                /**
                 * Specifies the excel export format.
                 * @Default  {ej.ReportViewer.ExcelFormats.Excel97to2003}
                 */
                excelFormat?: undefined.ExcelFormats | string,

                /**
                 * Specifies the word export format.
                 * @Default  {ej.ReportViewer.WordFormats.Doc}
                 */
                wordFormat?: undefined.WordFormats | string
        }
        declare     export interface FormatSettings {

            /**
             * Gets or sets a value that indicates whether to enable or disable cell border feature in the Spreadsheet.
             * @Default  {true}
             */
            allowCellBorder?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable or disable decimal places in the Spreadsheet.
                 * @Default  {true}
                 */
                allowDecimalPlaces?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable or disable font family feature in Spreadsheet.
                 * @Default  {true}
                 */
                allowFontFamily?: boolean
        }
        declare     export interface ImportSettings {

            /**
             * Sets import mapper to perform import feature in Spreadsheet.
             */
            importMapper?: string,

                /**
                 * Gets or sets a value that indicates whether to enable or disable import while initial loading.
                 * @Default  {false}
                 */
                importOnLoad?: boolean,

                /**
                 * Sets import URL to access the online files in the Spreadsheet.
                 */
                importUrl?: string,

                /**
                 * Gets or sets a value that indicates to define password while importing in the Spreadsheet.
                 */
                password?: string
        }
        declare     export interface PictureSettings {

            /**
             * Gets or sets a value that indicates whether to enable or disable picture feature in Spreadsheet. By enabling this, you can add pictures in Spreadsheet.
             * @Default  {true}
             */
            allowPictures?: boolean,

                /**
                 * Gets or sets a value that indicates to define height to picture in the Spreadsheet.
                 * @Default  {220}
                 */
                height?: number,

                /**
                 * Gets or sets a value that indicates to define width to picture in the Spreadsheet.
                 * @Default  {440}
                 */
                width?: number
        }
        declare     export interface PrintSettings {

            /**
             * Gets or sets a value that indicates whether to enable or disable page setup support for printing in Spreadsheet.
             * @Default  {true}
             */
            allowPageSetup?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable or disable page size support for printing in Spreadsheet.
                 * @Default  {false}
                 */
                allowPageSize?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable or disable print feature in the Spreadsheet.
                 * @Default  {true}
                 */
                allowPrinting?: boolean
        }
        declare     export interface RibbonSettingsApplicationTabMenuSettings {

            /**
             * Gets or sets a value that indicates whether to enable or disable isAppend property in ribbon settings.
             * @Default  {false}
             */
            isAppend?: boolean,

                /**
                 * Specifies the data source to append in applicationtab.
                 * @Default  {[]}
                 */
                dataSource?: Array<any >
        }
        declare     export interface RibbonSettingsApplicationTab {

            /**
             * Gets or sets a value that indicates to set application tab type in Spreadsheet. It has two types, Menu and Backstage.
             * @Default  {ej.Ribbon.ApplicationTabType.Backstage}
             */
            type?: undefined.ApplicationTabType | string,

                /**
                 * Gets or sets an object that indicates menu settings for application tab in Spreadsheet.
                 */
                menuSettings?: RibbonSettingsApplicationTabMenuSettings
        }
        declare     export interface RibbonSettings {

            /**
             * Gets or sets an object that indicates application tab settings in Spreadsheet.
             */
            applicationTab?: RibbonSettingsApplicationTab
        }
        declare     export interface ScrollSettings {

            /**
             * Gets or sets an object that indicates to render the Kanban with specified scroll height.
             * @Default  {0}
             */
            height?: string | number,

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified scroll width.
                 * @Default  {auto}
                 */
                width?: string | number,

                /**
                 * To allow the Kanban to freeze particular swimlane at the time of scrolling , until scroll reaches next swimlane and it continues.
                 * @Default  {false}
                 */
                allowFreezeSwimlane?: boolean
        }
        declare     export interface SelectionSettings {

            /**
             * Gets or sets a value that indicates whether to enable the toggle selection behavior for row, cell and column.
             * @Default  {false}
             */
            enableToggle?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default selection actions as a selection mode.See selectionMode
                 * @Default  {[row]}
                 */
                selectionMode?: Array<any >
        }
        declare     export interface SheetsBorder {

            /**
             * 
             */
            type?: undefined.BorderType | string,

                /**
                 * Specifies border color for range of cells in Spreadsheet.
                 */
                color?: string,

                /**
                 * To apply border for the specified range of cell.
                 */
                range?: string
        }
        declare     export interface SheetsCFormatRule {

            /**
             * Specifies the conditions to apply for the range of cells in Spreadsheet.
             */
            action?: undefined.CFormatRule | string,

                /**
                 * Specifies the color to apply for the range of cell while conditional formatting.
                 */
                color?: undefined.CFormatHighlightColor | string,

                /**
                 * Specifies the inputs for conditional formatting in Spreadsheet.
                 * @Default  {[]}
                 */
                inputs?: Array<any>,

                /**
                 * Specifies the range for conditional formatting in Spreadsheet.
                 */
                range?: string
        }
        declare     export interface SheetsRangeSetting {

            /**
             * Gets or sets the data to render the Spreadsheet.
             * @Default  {null}
             */
            dataSource?: any,

                /**
                 * Specifies the header styles for the headers in datasource range.
                 * @Default  {null}
                 */
                headerStyles?: any,

                /**
                 * Specifies the primary key for the datasource in Spreadsheet.
                 */
                primaryKey?: string,

                /**
                 * Specifies the query for the datasource in Spreadsheet.
                 * @Default  {null}
                 */
                query?: any,

                /**
                 * Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
                 * @Default  {false}
                 */
                showHeader?: boolean,

                /**
                 * Specifies the start cell for the datasource range in Spreadsheet.
                 * @Default  {A1}
                 */
                startCell?: string
        }
        declare     export interface SheetsRowsCellsComment {

            /**
             * Get or sets the value that indicates whether to show or hide comments in Spreadsheet.
             * @Default  {false}
             */
            isVisible?: boolean,

                /**
                 * Specifies the value for the comment in Spreadsheet.
                 */
                value?: string
        }
        declare     export interface SheetsRowsCellsFormat {

            /**
             * Specifies the type of the format in Spreadsheet.
             */
            type?: string
        }
        declare     export interface SheetsRowsCellsHyperlink {

            /**
             * Specifies the web address for the hyperlink of a cell.
             */
            webAddr?: string,

                /**
                 * Specifies the cell address for the hyperlink of a cell.
                 */
                cellAddr?: string,

                /**
                 * Specifies the sheet index to which the cell is referred.
                 * @Default  {1}
                 */
                sheetIndex?: number
        }
        declare     export interface SheetsRowsCellsStyle {

            /**
             * Specifies the background color of a cell in the Spreadsheet.
             */
            backgroundColor?: string,

                /**
                 * Specifies the font color of a cell in the Spreadsheet.
                 */
                color?: string,

                /**
                 * Specifies the font weight of a cell in the Spreadsheet.
                 */
                fontWeight?: string
        }
        declare     export interface SheetsRowsCell {

            /**
             * Specifies the comment for a cell in Spreadsheet.
             * @Default  {null}
             */
            comment?: SheetsRowsCellsComment,

                /**
                 * Specifies the format of a cell in Spreadsheet.
                 * @Default  {null}
                 */
                format?: SheetsRowsCellsFormat,

                /**
                 * Specifies the hyperlink for a cell in Spreadsheet.
                 * @Default  {null}
                 */
                hyperlink?: SheetsRowsCellsHyperlink,

                /**
                 * Specifies the index of a cell in Spreadsheet.
                 * @Default  {0}
                 */
                index?: number,

                /**
                 * Specifies the styles of a cell in Spreadsheet.
                 * @Default  {null}
                 */
                style?: SheetsRowsCellsStyle,

                /**
                 * Specifies the value for a cell in Spreadsheet.
                 */
                value?: string
        }
        declare     export interface SheetsRow {

            /**
             * Gets or sets the height of a row in Spreadsheet.
             * @Default  {20}
             */
            height?: number,

                /**
                 * Specifies the cells of a row in Spreadsheet.
                 * @Default  {[]}
                 */
                cells?: Array<SheetsRowsCell>,

                /**
                 * Gets or sets the index of a row in Spreadsheet.
                 * @Default  {0}
                 */
                index?: number
        }
        declare     export interface Sheet {

            /**
             * Specifies the border for the cell in the Spreadsheet.
             * @Default  {[]}
             */
            border?: Array<SheetsBorder>,

                /**
                 * Specifies the conditional formatting for the range of cell in Spreadsheet.
                 * @Default  {[]}
                 */
                cFormatRule?: Array<SheetsCFormatRule>,

                /**
                 * Gets or sets a value that indicates to define column count in the Spreadsheet.
                 * @Default  {21}
                 */
                colCount?: number,

                /**
                 * Gets or sets a value that indicates to define column width in the Spreadsheet.
                 * @Default  {64}
                 */
                columnWidth?: number,

                /**
                 * Gets or sets the data to render the Spreadsheet.
                 * @Default  {null}
                 */
                dataSource?: any,

                /**
                 * Gets or sets a value that indicates whether to enable or disable field as column header in the Spreadsheet.
                 * @Default  {false}
                 */
                fieldAsColumnHeader?: boolean,

                /**
                 * Specifies the header styles for the headers in datasource range.
                 * @Default  {null}
                 */
                headerStyles?: any,

                /**
                 * To hide the specified columns in Spreadsheet.
                 * @Default  {[]}
                 */
                hideColumns?: Array<any>,

                /**
                 * To hide the specified rows in Spreadsheet.
                 * @Default  {[]}
                 */
                hideRows?: Array<any>,

                /**
                 * To merge specified ranges in Spreadsheet.
                 * @Default  {[]}
                 */
                mergeCells?: Array<any>,

                /**
                 * Specifies the primary key for the datasource in Spreadsheet.
                 */
                primaryKey?: string,

                /**
                 * Specifies the query for the dataSource in Spreadsheet.
                 * @Default  {null}
                 */
                query?: any,

                /**
                 * Specifies single range or multiple range settings for a sheet in Spreadsheet.
                 * @Default  {[]}
                 */
                rangeSettings?: Array<SheetsRangeSetting>,

                /**
                 * Gets or sets a value that indicates to define row count in the Spreadsheet.
                 * @Default  {20}
                 */
                rowCount?: number,

                /**
                 * Specifies the rows for a sheet in Spreadsheet.
                 * @Default  {[]}
                 */
                rows?: Array<SheetsRow>,

                /**
                 * Gets or sets a value that indicates whether to show or hide grid lines in the Spreadsheet.
                 * @Default  {true}
                 */
                showGridlines?: boolean,

                /**
                 * Gets or sets a value that indicates whether to enable or disable the datasource header in Spreadsheet.
                 * @Default  {false}
                 */
                showHeader?: boolean,

                /**
                 * Gets or sets a value that indicates whether to show or hide headings in the Spreadsheet.
                 * @Default  {true}
                 */
                showHeadings?: boolean,

                /**
                 * Specifies the start cell for the datasource range in Spreadsheet.
                 * @Default  {A1}
                 */
                startCell?: string
        }
    }

    declare module 'PdfViewer' {
        declare     export interface Model {

            /**
             * If clone is specified.
             * @Default  {false}
             */
            clone?: boolean,

                /**
                 * Sets the offset of the dragging helper relative to the mouse cursor.
                 * @Default  {{ top: -1, left: -2 }}
                 */
                cursorAt?: any,

                /**
                 * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                 * @Default  {1}
                 */
                distance?: number,

                /**
                 * The drag area is used to restrict the dragging element bounds.
                 * @Default  {false}
                 */
                dragArea?: boolean,

                /**
                 * If specified, restricts drag start click to the specified element(s).
                 * @Default  {null}
                 */
                handle?: string,

                /**
                 * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                 * @Default  {'default'}
                 */
                scope?: string,

                /**
                 * This event is triggered when dragging element is destroyed. 
                 */
                destroy(e: DestroyEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                drag(e: DragEventArgs): void,

                /**
                 * Supply a callback function to handle the drag start event as an init option. 
                 */
                dragStart(e: DragStartEventArgs): void,

                /**
                 * This event is triggered when the mouse is moved during the dragging. 
                 */
                dragStop(e: DragStopEventArgs): void,

                /**
                 * This event is triggered when dragged. 
                 */
                helper(e: HelperEventArgs): void
        }
        declare     export interface DocumentLoadEventArgs {

            /**
             * true, if the event should be canceled; otherwise, false.
             */
            Cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                Model?: any,

                /**
                 * Returns the name of the event
                 */
                Type?: string
        }
        declare     export interface PageChangeEventArgs {

            /**
             * true, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the current page number in view.
                 */
                currentPageNumber?: number
        }
        declare     export interface ZoomChangeEventArgs {

            /**
             * true, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                model?: any,

                /**
                 * Returns the name of the event.
                 */
                type?: string,

                /**
                 * Returns the previous zoom percentage of the PDF viewer control
                 */
                previousZoomPercentage?: number,

                /**
                 * Returns the current zoom percentage of the PDF viewer control
                 */
                currentZoomPercentage?: number
        }
        declare     export interface HyperlinkClickEventArgs {

            /**
             * true, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string,

                /**
                 * Returns the clicked hyperlink
                 */
                hyperlink?: string
        }
        declare     export interface BeforePrintEventArgs {

            /**
             * True, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string
        }
        declare     export interface AfterPrintEventArgs {

            /**
             * True, if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * Returns the PDF viewer model
                 */
                model?: any,

                /**
                 * Returns the name of the event
                 */
                type?: string
        }
        declare     export interface DestroyEventArgs {

            /**
             * if the event should be canceled; otherwise, false.
             */
            cancel?: boolean,

                /**
                 * returns the autocomplete model
                 */
                model?: undefined.Model,

                /**
                 * returns the name of the event
                 */
                type?: string
        }
        declare     export interface ToolbarSettings {

            /**
             * Gets or sets a value that indicates whether to add custom toolbar items within the toolbar to perform any action in the grid
             * @Default  {[]}
             */
            customToolbarItems?: Array<any>,

                /**
                 * Gets or sets a value that indicates whether to enable toolbar in the grid.
                 * @Default  {false}
                 */
                showToolbar?: boolean,

                /**
                 * Gets or sets a value that indicates whether to add the default editing actions as a toolbar items
                 * @Default  {[]}
                 */
                toolbarItems?: Array<any >
        }
    }

    declare module 'datavisualization' {
        declare module 'SymbolPalette' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface SelectionChangeEventArgs {

                /**
                 * returns whether an element is selected or unselected
                 */
                changeType?: string,

                    /**
                     * returns the node or connector that is selected or unselected
                     */
                    element?: any
            }
            declare         export interface DefaultSettings {

                /**
                 * Defines the default properties of the nodes
                 * @Default  {null}
                 */
                node?: any,

                    /**
                     * Defines the default properties of the connectors
                     * @Default  {null}
                     */
                    connector?: any
            }
            declare         export interface Palette {

                /**
                 * Defines the name of the palette
                 * @Default  {null}
                 */
                name?: string,

                    /**
                     * Defines whether the palette must be in expanded state or in collapsed state
                     * @Default  {true}
                     */
                    expanded?: boolean,

                    /**
                     * Defines the palette items
                     * @Default  {[]}
                     */
                    items?: Array<any >
            }
        }

        declare module 'LinearGauge' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface DrawBarPointersEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the pointer
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the current Bar pointer element.
                     */
                    barElement?: any,

                    /**
                     * returns the index of the bar pointer.
                     */
                    barPointerIndex?: number,

                    /**
                     * returns the value of the bar pointer.
                     */
                    PointerValue?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawCustomLabelEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the customLabel
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the customLabel style
                     */
                    style?: any,

                    /**
                     * returns the current customLabel element.
                     */
                    customLabelElement?: any,

                    /**
                     * returns the index of the customLabel.
                     */
                    customLabelIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawIndicatorsEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the Indicator
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the Indicator style
                     */
                    style?: string,

                    /**
                     * returns the current Indicator element.
                     */
                    IndicatorElement?: any,

                    /**
                     * returns the index of the Indicator.
                     */
                    IndicatorIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawLabelsEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the label
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the label belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the label style
                     */
                    style?: string,

                    /**
                     * returns the angle of the label.
                     */
                    angle?: number,

                    /**
                     * returns the current label element.
                     */
                    element?: any,

                    /**
                     * returns the index of the label.
                     */
                    index?: number,

                    /**
                     * returns the label value of the label.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawMarkerPointersEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the pointer
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the ticks style
                     */
                    style?: string,

                    /**
                     * returns the current marker pointer element.
                     */
                    markerElement?: any,

                    /**
                     * returns the index of the marker pointer.
                     */
                    markerPointerIndex?: number,

                    /**
                     * returns the value of the marker pointer.
                     */
                    pointerValue?: number,

                    /**
                     * returns the angle of the marker pointer.
                     */
                    pointerAngle?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawRangeEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the range
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the range style
                     */
                    style?: string,

                    /**
                     * returns the current range element.
                     */
                    rangeElement?: any,

                    /**
                     * returns the index of the range.
                     */
                    rangeIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawTicksEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the ticks
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the tick belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the ticks style
                     */
                    style?: string,

                    /**
                     * returns the angle of the tick.
                     */
                    angle?: number,

                    /**
                     * returns the current tick element.
                     */
                    element?: any,

                    /**
                     * returns the index of the tick.
                     */
                    index?: number,

                    /**
                     * returns the tick value of the tick.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface InitEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the entire scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface MouseClickEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element 
                     * @param  .markerpointer returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    markerpointerindex?: number,

                    /**
                     * returns the pointer element.
                     */
                    markerpointerelement?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    markerpointervalue?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface MouseClickMoveEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    index?: number,

                    /**
                     * returns the pointer element.
                     */
                    element?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    value?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface MouseClickUpEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element 
                     * @param  .markerpointer returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    markerpointerIndex?: number,

                    /**
                     * returns the pointer element.
                     */
                    markerpointerElement?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    markerpointerValue?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface RenderCompleteEventArgs {

                /**
                 * returns the original event args.
                 */
                args?: any,

                    /**
                     * returns the current action of PivotGrid control.
                     */
                    action?: string,

                    /**
                     * returns the custom object bounded with the control.
                     */
                    customObject?: any,

                    /**
                     * returns the HTML of PivotGrid control.
                     */
                    element?: string,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the PivotGrid model.
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface Frame {

                /**
                 * Specifies the frame background image URL of linear gauge
                 * @Default  {null}
                 */
                backgroundImageUrl?: string,

                    /**
                     * Specifies the frame InnerWidth
                     * @Default  {8}
                     */
                    innerWidth?: number,

                    /**
                     * Specifies the frame OuterWidth
                     * @Default  {12}
                     */
                    outerWidth?: number
            }
            declare         export interface ScalesBarPointersBorder {

                /**
                 * Specifies the border Color of bar pointer
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border Width of bar pointer
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesBarPointer {

                /**
                 * Specifies the backgroundColor of bar pointer
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border of bar pointer
                     * @Default  {null}
                     */
                    border?: ScalesBarPointersBorder,

                    /**
                     * Specifies the distanceFromScale of bar pointer
                     * @Default  {0}
                     */
                    distanceFromScale?: number,

                    /**
                     * Specifies the scaleBar Gradient of bar pointer
                     * @Default  {null}
                     */
                    gradients?: any,

                    /**
                     * Specifies the opacity of bar pointer
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the value of bar pointer
                     * @Default  {null}
                     */
                    value?: number,

                    /**
                     * Specifies the pointer Width of bar pointer
                     * @Default  {width=30}
                     */
                    width?: number
            }
            declare         export interface ScalesBorder {

                /**
                 * Specifies the border color of the Scale.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border width of the Scale.
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesCustomLabelsFont {

                /**
                 * Specifies the fontFamily in customLabels
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle in customLabels. See FontStyle
                     * @Default  {Bold}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the font size in customLabels
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesCustomLabelsPosition {

                /**
                 * Specifies the position x in customLabels
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the y in customLabels
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesCustomLabel {

                /**
                 * Specifies the label Color in customLabels
                 * @Default  {null}
                 */
                color?: number,

                    /**
                     * Specifies the font in customLabels
                     * @Default  {null}
                     */
                    font?: ScalesCustomLabelsFont,

                    /**
                     * Specifies the opacity in customLabels
                     * @Default  {0}
                     */
                    opacity?: string,

                    /**
                     * Specifies the position in customLabels
                     * @Default  {null}
                     */
                    position?: ScalesCustomLabelsPosition,

                    /**
                     * Specifies the positionType in customLabels.See CustomLabelPositionType
                     * @Default  {null}
                     */
                    positionType?: any,

                    /**
                     * Specifies the textAngle in customLabels
                     * @Default  {0}
                     */
                    textAngle?: number,

                    /**
                     * Specifies the label Value in customLabels
                     */
                    value?: string
            }
            declare         export interface ScalesIndicatorsBorder {

                /**
                 * Specifies the border Color in bar indicators
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border Width in bar indicators
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesIndicatorsFont {

                /**
                 * Specifies the fontFamily of font in bar indicators
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle of font in bar indicators. See FontStyle
                     * @Default  {ej.datavisualization.LinearGauge.FontStyle.Bold}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the size of font in bar indicators
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesIndicatorsPosition {

                /**
                 * Specifies the x position in bar indicators
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the y position in bar indicators
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesIndicatorsStateRange {

                /**
                 * Specifies the backgroundColor in bar indicators state ranges
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the borderColor in bar indicators state ranges
                     * @Default  {null}
                     */
                    borderColor?: string,

                    /**
                     * Specifies the endValue in bar indicators state ranges
                     * @Default  {60}
                     */
                    endValue?: number,

                    /**
                     * Specifies the startValue in bar indicators state ranges
                     * @Default  {50}
                     */
                    startValue?: number,

                    /**
                     * Specifies the text in bar indicators state ranges
                     */
                    text?: string,

                    /**
                     * Specifies the textColor in bar indicators state ranges
                     * @Default  {null}
                     */
                    textColor?: string
            }
            declare         export interface ScalesIndicatorsTextLocation {

                /**
                 * Specifies the textLocation position in bar indicators
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the Y position in bar indicators
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesIndicator {

                /**
                 * Specifies the backgroundColor in bar indicators
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border in bar indicators
                     * @Default  {null}
                     */
                    border?: ScalesIndicatorsBorder,

                    /**
                     * Specifies the font of bar indicators
                     * @Default  {null}
                     */
                    font?: ScalesIndicatorsFont,

                    /**
                     * Specifies the indicator Height of bar indicators
                     * @Default  {30}
                     */
                    height?: number,

                    /**
                     * Specifies the opacity in bar indicators
                     * @Default  {NaN}
                     */
                    opacity?: number,

                    /**
                     * Specifies the position in bar indicators
                     * @Default  {null}
                     */
                    position?: ScalesIndicatorsPosition,

                    /**
                     * Specifies the state ranges in bar indicators
                     * @Default  {Array}
                     */
                    stateRanges?: Array<ScalesIndicatorsStateRange>,

                    /**
                     * Specifies the textLocation in bar indicators
                     * @Default  {null}
                     */
                    textLocation?: ScalesIndicatorsTextLocation,

                    /**
                     * Specifies the indicator Style of font in bar indicators
                     * @Default  {ej.datavisualization.LinearGauge.IndicatorType.Rectangle}
                     */
                    type?: undefined.IndicatorTypes | string,

                    /**
                     * Specifies the indicator Width in bar indicators
                     * @Default  {30}
                     */
                    width?: number
            }
            declare         export interface ScalesLabelsDistanceFromScale {

                /**
                 * Specifies the xDistanceFromScale of labels.
                 * @Default  {-10}
                 */
                x?: number,

                    /**
                     * Specifies the yDistanceFromScale of labels.
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesLabelsFont {

                /**
                 * Specifies the fontFamily of font.
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle of font.See FontStyle
                     * @Default  {ej.datavisualization.LinearGauge.FontStyle.Bold}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the size of font.
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesLabel {

                /**
                 * Specifies the angle of labels.
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Specifies the DistanceFromScale of labels.
                     * @Default  {null}
                     */
                    distanceFromScale?: ScalesLabelsDistanceFromScale,

                    /**
                     * Specifies the font of labels.
                     * @Default  {null}
                     */
                    font?: ScalesLabelsFont,

                    /**
                     * need to includeFirstValue.
                     * @Default  {true}
                     */
                    includeFirstValue?: boolean,

                    /**
                     * Specifies the opacity of label.
                     * @Default  {0}
                     */
                    opacity?: number,

                    /**
                     * Specifies the label Placement of label. See LabelPlacement
                     * @Default  {Near}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the textColor of font.
                     * @Default  {null}
                     */
                    textColor?: string,

                    /**
                     * Specifies the label Style of label. See LabelType
                     * @Default  {ej.datavisualization.LinearGauge.LabelType.Major}
                     */
                    type?: undefined.ScaleType | string,

                    /**
                     * Specifies the unitText of label.
                     */
                    unitText?: string,

                    /**
                     * Specifies the unitText Position of label.See UnitTextPlacement
                     * @Default  {Back}
                     */
                    unitTextPlacement?: undefined.UnitTextPlacement | string
            }
            declare         export interface ScalesMarkerPointersBorder {

                /**
                 * Specifies the border color of marker pointer
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border of marker pointer
                     * @Default  {number}
                     */
                    width?: number
            }
            declare         export interface ScalesMarkerPointer {

                /**
                 * Specifies the backgroundColor of marker pointer
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border of marker pointer
                     * @Default  {null}
                     */
                    border?: ScalesMarkerPointersBorder,

                    /**
                     * Specifies the distanceFromScale of marker pointer
                     * @Default  {0}
                     */
                    distanceFromScale?: number,

                    /**
                     * Specifies the pointer Gradient of marker pointer
                     * @Default  {null}
                     */
                    gradients?: any,

                    /**
                     * Specifies the pointer Length of marker pointer
                     * @Default  {30}
                     */
                    length?: number,

                    /**
                     * Specifies the opacity of marker pointer
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the pointer Placement of marker pointer See PointerPlacement
                     * @Default  {Far}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the marker Style of marker pointerSee MarkerType
                     * @Default  {Triangle}
                     */
                    type?: undefined.MarkerType | string,

                    /**
                     * Specifies the value of marker pointer
                     * @Default  {null}
                     */
                    value?: number,

                    /**
                     * Specifies the pointer Width of marker pointer
                     * @Default  {30}
                     */
                    width?: number
            }
            declare         export interface ScalesPosition {

                /**
                 * Specifies the Horizontal position
                 * @Default  {50}
                 */
                x?: number,

                    /**
                     * Specifies the vertical position
                     * @Default  {50}
                     */
                    y?: number
            }
            declare         export interface ScalesRangesBorder {

                /**
                 * Specifies the border color in the ranges.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border width in the ranges.
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesRange {

                /**
                 * Specifies the backgroundColor in the ranges.
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border in the ranges.
                     * @Default  {null}
                     */
                    border?: ScalesRangesBorder,

                    /**
                     * Specifies the distanceFromScale in the ranges.
                     * @Default  {0}
                     */
                    distanceFromScale?: number,

                    /**
                     * Specifies the endValue in the ranges.
                     * @Default  {60}
                     */
                    endValue?: number,

                    /**
                     * Specifies the endWidth in the ranges.
                     * @Default  {10}
                     */
                    endWidth?: number,

                    /**
                     * Specifies the range Gradient in the ranges.
                     * @Default  {null}
                     */
                    gradients?: any,

                    /**
                     * Specifies the opacity in the ranges.
                     * @Default  {null}
                     */
                    opacity?: number,

                    /**
                     * Specifies the range Position in the ranges. See RangePlacement
                     * @Default  {Center}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the startValue in the ranges.
                     * @Default  {20}
                     */
                    startValue?: number,

                    /**
                     * Specifies the startWidth in the ranges.
                     * @Default  {10}
                     */
                    startWidth?: number
            }
            declare         export interface ScalesTicksDistanceFromScale {

                /**
                 * Specifies the xDistanceFromScale in the tick.
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the yDistanceFromScale in the tick.
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesTick {

                /**
                 * Specifies the angle in the tick.
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Specifies the tick Color in the tick.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Specifies the DistanceFromScale in the tick.
                     * @Default  {null}
                     */
                    distanceFromScale?: ScalesTicksDistanceFromScale,

                    /**
                     * Specifies the tick Height in the tick.
                     * @Default  {10}
                     */
                    height?: number,

                    /**
                     * Specifies the opacity in the tick.
                     * @Default  {0}
                     */
                    opacity?: number,

                    /**
                     * Specifies the tick Placement in the tick. See TickPlacement
                     * @Default  {Near}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the tick Style in the tick. See TickType
                     * @Default  {MajorInterval}
                     */
                    type?: undefined.TicksType | string,

                    /**
                     * Specifies the tick Width in the tick.
                     * @Default  {3}
                     */
                    width?: number
            }
            declare         export interface Scales {

                /**
                 * Specifies the backgroundColor of the Scale.
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the scaleBar Gradient of bar pointer
                     * @Default  {Array}
                     */
                    barPointers?: Array<ScalesBarPointer>,

                    /**
                     * Specifies the border of the Scale.
                     * @Default  {null}
                     */
                    border?: ScalesBorder,

                    /**
                     * Specifies the customLabel
                     * @Default  {Array}
                     */
                    customLabels?: Array<ScalesCustomLabel>,

                    /**
                     * Specifies the scale Direction of the Scale. See Directions
                     * @Default  {CounterClockwise}
                     */
                    direction?: undefined.Direction | string,

                    /**
                     * Specifies the indicator
                     * @Default  {Array}
                     */
                    indicators?: Array<ScalesIndicator>,

                    /**
                     * Specifies the labels.
                     * @Default  {Array}
                     */
                    labels?: Array<ScalesLabel>,

                    /**
                     * Specifies the scaleBar Length.
                     * @Default  {290}
                     */
                    length?: number,

                    /**
                     * Specifies the majorIntervalValue of the Scale.
                     * @Default  {10}
                     */
                    majorIntervalValue?: number,

                    /**
                     * Specifies the markerPointers
                     * @Default  {Array}
                     */
                    markerPointers?: Array<ScalesMarkerPointer>,

                    /**
                     * Specifies the maximum of the Scale.
                     * @Default  {null}
                     */
                    maximum?: number,

                    /**
                     * Specifies the minimum of the Scale.
                     * @Default  {null}
                     */
                    minimum?: number,

                    /**
                     * Specifies the minorIntervalValue of the Scale.
                     * @Default  {2}
                     */
                    minorIntervalValue?: number,

                    /**
                     * Specifies the opacity of the Scale.
                     * @Default  {NaN}
                     */
                    opacity?: number,

                    /**
                     * Specifies the position
                     * @Default  {null}
                     */
                    position?: ScalesPosition,

                    /**
                     * Specifies the ranges in the tick.
                     * @Default  {Array}
                     */
                    ranges?: Array<ScalesRange>,

                    /**
                     * Specifies the shadowOffset.
                     * @Default  {0}
                     */
                    shadowOffset?: number,

                    /**
                     * Specifies the showBarPointers state.
                     * @Default  {true}
                     */
                    showBarPointers?: boolean,

                    /**
                     * Specifies the showCustomLabels state.
                     * @Default  {false}
                     */
                    showCustomLabels?: boolean,

                    /**
                     * Specifies the showIndicators state.
                     * @Default  {false}
                     */
                    showIndicators?: boolean,

                    /**
                     * Specifies the showLabels state.
                     * @Default  {true}
                     */
                    showLabels?: boolean,

                    /**
                     * Specifies the showMarkerPointers state.
                     * @Default  {true}
                     */
                    showMarkerPointers?: boolean,

                    /**
                     * Specifies the showRanges state.
                     * @Default  {false}
                     */
                    showRanges?: boolean,

                    /**
                     * Specifies the showTicks state.
                     * @Default  {true}
                     */
                    showTicks?: boolean,

                    /**
                     * Specifies the ticks in the scale.
                     * @Default  {Array}
                     */
                    ticks?: Array<ScalesTick>,

                    /**
                     * Specifies the scaleBar type .See ScaleType
                     * @Default  {Rectangle}
                     */
                    type?: undefined.ScaleType | string,

                    /**
                     * Specifies the scaleBar width.
                     * @Default  {30}
                     */
                    width?: number
            }
            declare         export interface Tooltip {

                /**
                 * Show/hides the tooltip visibility.
                 * @Default  {false}
                 */
                visible?: boolean,

                    /**
                     * Fill color for the sparkline tooltip.
                     * @Default  {white}
                     */
                    fill?: string,

                    /**
                     * Custom template to the tooltip.
                     */
                    template?: string,

                    /**
                     * Options for customizing the border of the tooltip.
                     */
                    border?: TooltipBorder,

                    /**
                     * Options for customizing the font of the tooltip.
                     */
                    font?: TooltipFont
            }
        }

        declare module 'CircularGauge' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface DrawCustomLabelEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the customLabel
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the customLabel style
                     */
                    style?: any,

                    /**
                     * returns the current customLabel element.
                     */
                    customLabelElement?: any,

                    /**
                     * returns the index of the customLabel.
                     */
                    customLabelIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawIndicatorsEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the Indicator
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the Indicator style
                     */
                    style?: string,

                    /**
                     * returns the current Indicator element.
                     */
                    IndicatorElement?: any,

                    /**
                     * returns the index of the Indicator.
                     */
                    IndicatorIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawLabelsEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the label
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the label belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the label style
                     */
                    style?: string,

                    /**
                     * returns the angle of the label.
                     */
                    angle?: number,

                    /**
                     * returns the current label element.
                     */
                    element?: any,

                    /**
                     * returns the index of the label.
                     */
                    index?: number,

                    /**
                     * returns the label value of the label.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawPointerCapEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the startX and startY of the pointer cap.
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the pointer cap style
                     */
                    style?: string,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface DrawPointersEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the pointer
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the angle of the pointer.
                     */
                    angle?: number,

                    /**
                     * returns the current pointer element.
                     */
                    element?: any,

                    /**
                     * returns the index of the pointer.
                     */
                    index?: number,

                    /**
                     * returns the value of the pointer.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface DrawRangeEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the range
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the range style
                     */
                    style?: string,

                    /**
                     * returns the current range element.
                     */
                    rangeElement?: any,

                    /**
                     * returns the index of the range.
                     */
                    rangeIndex?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawTicksEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the ticks
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the tick belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the ticks style
                     */
                    style?: string,

                    /**
                     * returns the angle of the tick.
                     */
                    angle?: number,

                    /**
                     * returns the current tick element.
                     */
                    element?: any,

                    /**
                     * returns the index of the tick.
                     */
                    index?: number,

                    /**
                     * returns the tick value of the tick.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface MouseClickEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element 
                     * @param  .markerpointer returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    markerpointerindex?: number,

                    /**
                     * returns the pointer element.
                     */
                    markerpointerelement?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    markerpointervalue?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface MouseClickMoveEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    index?: number,

                    /**
                     * returns the pointer element.
                     */
                    element?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    value?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface MouseClickUpEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: any,

                    /**
                     * returns the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the pointer belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the context element 
                     * @param  .markerpointer returns the context element
                     */
                    context?: any,

                    /**
                     * returns the pointer Index
                     */
                    markerpointerIndex?: number,

                    /**
                     * returns the pointer element.
                     */
                    markerpointerElement?: any,

                    /**
                     * returns the value of the pointer.
                     */
                    markerpointerValue?: number,

                    /**
                     * returns the pointer style
                     */
                    style?: string,

                    /**
                     * returns the startX and startY of the pointer.
                     */
                    position?: any
            }
            declare         export interface RenderCompleteEventArgs {

                /**
                 * returns the original event args.
                 */
                args?: any,

                    /**
                     * returns the current action of PivotGrid control.
                     */
                    action?: string,

                    /**
                     * returns the custom object bounded with the control.
                     */
                    customObject?: any,

                    /**
                     * returns the HTML of PivotGrid control.
                     */
                    element?: string,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the PivotGrid model.
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface Frame {

                /**
                 * Specifies the frame background image URL of linear gauge
                 * @Default  {null}
                 */
                backgroundImageUrl?: string,

                    /**
                     * Specifies the frame InnerWidth
                     * @Default  {8}
                     */
                    innerWidth?: number,

                    /**
                     * Specifies the frame OuterWidth
                     * @Default  {12}
                     */
                    outerWidth?: number
            }
            declare         export interface ScalesBorder {

                /**
                 * Specifies the border color of the Scale.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border width of the Scale.
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesCustomLabelsPosition {

                /**
                 * Specifies the position x in customLabels
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the y in customLabels
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesCustomLabelsFont {

                /**
                 * Specifies the fontFamily in customLabels
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle in customLabels. See FontStyle
                     * @Default  {Bold}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the font size in customLabels
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesCustomLabel {

                /**
                 * Specifies the label Color in customLabels
                 * @Default  {null}
                 */
                color?: number,

                    /**
                     * Specifies the font in customLabels
                     * @Default  {null}
                     */
                    font?: ScalesCustomLabelsFont,

                    /**
                     * Specifies the opacity in customLabels
                     * @Default  {0}
                     */
                    opacity?: string,

                    /**
                     * Specifies the position in customLabels
                     * @Default  {null}
                     */
                    position?: ScalesCustomLabelsPosition,

                    /**
                     * Specifies the positionType in customLabels.See CustomLabelPositionType
                     * @Default  {null}
                     */
                    positionType?: any,

                    /**
                     * Specifies the textAngle in customLabels
                     * @Default  {0}
                     */
                    textAngle?: number,

                    /**
                     * Specifies the label Value in customLabels
                     */
                    value?: string
            }
            declare         export interface ScalesIndicatorsPosition {

                /**
                 * Specifies the x position in bar indicators
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specifies the y position in bar indicators
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesIndicatorsStateRange {

                /**
                 * Specifies the backgroundColor in bar indicators state ranges
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the borderColor in bar indicators state ranges
                     * @Default  {null}
                     */
                    borderColor?: string,

                    /**
                     * Specifies the endValue in bar indicators state ranges
                     * @Default  {60}
                     */
                    endValue?: number,

                    /**
                     * Specifies the startValue in bar indicators state ranges
                     * @Default  {50}
                     */
                    startValue?: number,

                    /**
                     * Specifies the text in bar indicators state ranges
                     */
                    text?: string,

                    /**
                     * Specifies the textColor in bar indicators state ranges
                     * @Default  {null}
                     */
                    textColor?: string
            }
            declare         export interface ScalesIndicator {

                /**
                 * Specifies the backgroundColor in bar indicators
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border in bar indicators
                     * @Default  {null}
                     */
                    border?: ScalesIndicatorsBorder,

                    /**
                     * Specifies the font of bar indicators
                     * @Default  {null}
                     */
                    font?: ScalesIndicatorsFont,

                    /**
                     * Specifies the indicator Height of bar indicators
                     * @Default  {30}
                     */
                    height?: number,

                    /**
                     * Specifies the opacity in bar indicators
                     * @Default  {NaN}
                     */
                    opacity?: number,

                    /**
                     * Specifies the position in bar indicators
                     * @Default  {null}
                     */
                    position?: ScalesIndicatorsPosition,

                    /**
                     * Specifies the state ranges in bar indicators
                     * @Default  {Array}
                     */
                    stateRanges?: Array<ScalesIndicatorsStateRange>,

                    /**
                     * Specifies the textLocation in bar indicators
                     * @Default  {null}
                     */
                    textLocation?: ScalesIndicatorsTextLocation,

                    /**
                     * Specifies the indicator Style of font in bar indicators
                     * @Default  {ej.datavisualization.LinearGauge.IndicatorType.Rectangle}
                     */
                    type?: undefined.IndicatorTypes | string,

                    /**
                     * Specifies the indicator Width in bar indicators
                     * @Default  {30}
                     */
                    width?: number
            }
            declare         export interface ScalesLabelsFont {

                /**
                 * Specifies the fontFamily of font.
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle of font.See FontStyle
                     * @Default  {ej.datavisualization.LinearGauge.FontStyle.Bold}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the size of font.
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesLabel {

                /**
                 * Specifies the angle of labels.
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Specifies the DistanceFromScale of labels.
                     * @Default  {null}
                     */
                    distanceFromScale?: ScalesLabelsDistanceFromScale,

                    /**
                     * Specifies the font of labels.
                     * @Default  {null}
                     */
                    font?: ScalesLabelsFont,

                    /**
                     * need to includeFirstValue.
                     * @Default  {true}
                     */
                    includeFirstValue?: boolean,

                    /**
                     * Specifies the opacity of label.
                     * @Default  {0}
                     */
                    opacity?: number,

                    /**
                     * Specifies the label Placement of label. See LabelPlacement
                     * @Default  {Near}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the textColor of font.
                     * @Default  {null}
                     */
                    textColor?: string,

                    /**
                     * Specifies the label Style of label. See LabelType
                     * @Default  {ej.datavisualization.LinearGauge.LabelType.Major}
                     */
                    type?: undefined.ScaleType | string,

                    /**
                     * Specifies the unitText of label.
                     */
                    unitText?: string,

                    /**
                     * Specifies the unitText Position of label.See UnitTextPlacement
                     * @Default  {Back}
                     */
                    unitTextPlacement?: undefined.UnitTextPlacement | string
            }
            declare         export interface ScalesPointerCap {

                /**
                 * Specify cap backgroundColor of circular gauge
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specify cap borderColor of circular gauge
                     * @Default  {null}
                     */
                    borderColor?: string,

                    /**
                     * Specify pointerCap borderWidth value of circular gauge
                     * @Default  {3}
                     */
                    borderWidth?: number,

                    /**
                     * Specify cap interiorGradient value of circular gauge
                     * @Default  {null}
                     */
                    interiorGradient?: any,

                    /**
                     * Specify pointerCap Radius value of circular gauge
                     * @Default  {7}
                     */
                    radius?: number
            }
            declare         export interface ScalesPointersBorder {

                /**
                 * Specify border color for pointer of circular gauge
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specify border width for pointers of circular gauge
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesPointersPointerValueTextFont {

                /**
                 * Specify pointer value text font family of circular gauge.
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Specify pointer value text font style of circular gauge.
                     * @Default  {Bold}
                     */
                    fontStyle?: string,

                    /**
                     * Specify pointer value text size of circular gauge.
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ScalesPointersPointerValueText {

                /**
                 * Specify pointer text angle of circular gauge.
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Specify pointer text auto angle of circular gauge.
                     * @Default  {false}
                     */
                    autoAngle?: boolean,

                    /**
                     * Specify pointer value text color of circular gauge.
                     * @Default  {#8c8c8c}
                     */
                    color?: string,

                    /**
                     * Specify pointer value text distance from pointer of circular gauge.
                     * @Default  {20}
                     */
                    distance?: number,

                    /**
                     * Specify pointer value text font option of circular gauge.
                     * @Default  {object}
                     */
                    font?: ScalesPointersPointerValueTextFont,

                    /**
                     * Specify pointer value text opacity of circular gauge.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * enable pointer value text visibility of circular gauge.
                     * @Default  {false}
                     */
                    showValue?: boolean
            }
            declare         export interface ScalesPointer {

                /**
                 * Specify backgroundColor for the pointer of circular gauge
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specify backNeedleLength of circular gauge
                     * @Default  {10}
                     */
                    backNeedleLength?: number,

                    /**
                     * Specify the border for pointers of circular gauge
                     * @Default  {Object}
                     */
                    border?: ScalesPointersBorder,

                    /**
                     * Specify distanceFromScale value for pointers of circular gauge
                     * @Default  {0}
                     */
                    distanceFromScale?: number,

                    /**
                     * Specify pointer gradients of circular gauge
                     * @Default  {null}
                     */
                    gradients?: any,

                    /**
                     * Specify pointer image of circular gauge.It is applicable for both marker as well as needle type pointers.
                     * @Default  {NULL}
                     */
                    imageUrl?: string,

                    /**
                     * Specify pointer length of circular gauge
                     * @Default  {150}
                     */
                    length?: number,

                    /**
                     * Specify marker Style value of circular gauge. See MarkerType
                     * @Default  {Rectangle}
                     */
                    markerType?: undefined.MarkerType | string,

                    /**
                     * Specify needle Style value of circular gauge. See NeedleType
                     * @Default  {Triangle}
                     */
                    needleType?: undefined.NeedleType | string,

                    /**
                     * Specify opacity value for pointer of circular gauge
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specify pointer Placement value of circular gauge. See PointerPlacement
                     * @Default  {Near}
                     */
                    placement?: undefined.Placement | string,

                    /**
                     * Specify pointer value text of circular gauge.
                     * @Default  {Object}
                     */
                    pointerValueText?: ScalesPointersPointerValueText,

                    /**
                     * Specify showBackNeedle value of circular gauge
                     * @Default  {false}
                     */
                    showBackNeedle?: boolean,

                    /**
                     * Specify pointer type value of circular gauge. See PointerType
                     * @Default  {Needle}
                     */
                    type?: undefined.PointerType | string,

                    /**
                     * Specify value of the pointer of circular gauge
                     * @Default  {null}
                     */
                    value?: number,

                    /**
                     * Specify pointer width of circular gauge
                     * @Default  {7}
                     */
                    width?: number
            }
            declare         export interface ScalesRangesBorder {

                /**
                 * Specifies the border color in the ranges.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border width in the ranges.
                     * @Default  {1.5}
                     */
                    width?: number
            }
            declare         export interface ScalesRange {

                /**
                 * Specifies the backgroundColor in the ranges.
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the border in the ranges.
                     * @Default  {null}
                     */
                    border?: ScalesRangesBorder,

                    /**
                     * Specifies the distanceFromScale in the ranges.
                     * @Default  {0}
                     */
                    distanceFromScale?: number,

                    /**
                     * Specifies the endValue in the ranges.
                     * @Default  {60}
                     */
                    endValue?: number,

                    /**
                     * Specifies the endWidth in the ranges.
                     * @Default  {10}
                     */
                    endWidth?: number,

                    /**
                     * Specifies the range Gradient in the ranges.
                     * @Default  {null}
                     */
                    gradients?: any,

                    /**
                     * Specifies the opacity in the ranges.
                     * @Default  {null}
                     */
                    opacity?: number,

                    /**
                     * Specifies the range Position in the ranges. See RangePlacement
                     * @Default  {Center}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the startValue in the ranges.
                     * @Default  {20}
                     */
                    startValue?: number,

                    /**
                     * Specifies the startWidth in the ranges.
                     * @Default  {10}
                     */
                    startWidth?: number
            }
            declare         export interface ScalesSubGaugesPosition {

                /**
                 * Specify x-axis position for sub-gauge of circular gauge
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Specify y-axis position for sub-gauge of circular gauge
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ScalesSubGauge {

                /**
                 * Specify subGauge Height of circular gauge
                 * @Default  {150}
                 */
                height?: number,

                    /**
                     * Specify position for sub-gauge of circular gauge
                     * @Default  {Object}
                     */
                    position?: ScalesSubGaugesPosition,

                    /**
                     * Specify subGauge Width of circular gauge
                     * @Default  {150}
                     */
                    width?: number
            }
            declare         export interface ScalesTick {

                /**
                 * Specifies the angle in the tick.
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Specifies the tick Color in the tick.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Specifies the DistanceFromScale in the tick.
                     * @Default  {null}
                     */
                    distanceFromScale?: ScalesTicksDistanceFromScale,

                    /**
                     * Specifies the tick Height in the tick.
                     * @Default  {10}
                     */
                    height?: number,

                    /**
                     * Specifies the opacity in the tick.
                     * @Default  {0}
                     */
                    opacity?: number,

                    /**
                     * Specifies the tick Placement in the tick. See TickPlacement
                     * @Default  {Near}
                     */
                    placement?: undefined.PointerPlacement | string,

                    /**
                     * Specifies the tick Style in the tick. See TickType
                     * @Default  {MajorInterval}
                     */
                    type?: undefined.TicksType | string,

                    /**
                     * Specifies the tick Width in the tick.
                     * @Default  {3}
                     */
                    width?: number
            }
            declare         export interface Scales {

                /**
                 * Specifies the backgroundColor of the Scale.
                 * @Default  {null}
                 */
                backgroundColor?: string,

                    /**
                     * Specifies the scaleBar Gradient of bar pointer
                     * @Default  {Array}
                     */
                    barPointers?: Array<ScalesBarPointer>,

                    /**
                     * Specifies the border of the Scale.
                     * @Default  {null}
                     */
                    border?: ScalesBorder,

                    /**
                     * Specifies the customLabel
                     * @Default  {Array}
                     */
                    customLabels?: Array<ScalesCustomLabel>,

                    /**
                     * Specifies the scale Direction of the Scale. See Directions
                     * @Default  {CounterClockwise}
                     */
                    direction?: undefined.Direction | string,

                    /**
                     * Specifies the indicator
                     * @Default  {Array}
                     */
                    indicators?: Array<ScalesIndicator>,

                    /**
                     * Specifies the labels.
                     * @Default  {Array}
                     */
                    labels?: Array<ScalesLabel>,

                    /**
                     * Specifies the scaleBar Length.
                     * @Default  {290}
                     */
                    length?: number,

                    /**
                     * Specifies the majorIntervalValue of the Scale.
                     * @Default  {10}
                     */
                    majorIntervalValue?: number,

                    /**
                     * Specifies the markerPointers
                     * @Default  {Array}
                     */
                    markerPointers?: Array<ScalesMarkerPointer>,

                    /**
                     * Specifies the maximum of the Scale.
                     * @Default  {null}
                     */
                    maximum?: number,

                    /**
                     * Specifies the minimum of the Scale.
                     * @Default  {null}
                     */
                    minimum?: number,

                    /**
                     * Specifies the minorIntervalValue of the Scale.
                     * @Default  {2}
                     */
                    minorIntervalValue?: number,

                    /**
                     * Specifies the opacity of the Scale.
                     * @Default  {NaN}
                     */
                    opacity?: number,

                    /**
                     * Specifies the position
                     * @Default  {null}
                     */
                    position?: ScalesPosition,

                    /**
                     * Specifies the ranges in the tick.
                     * @Default  {Array}
                     */
                    ranges?: Array<ScalesRange>,

                    /**
                     * Specifies the shadowOffset.
                     * @Default  {0}
                     */
                    shadowOffset?: number,

                    /**
                     * Specifies the showBarPointers state.
                     * @Default  {true}
                     */
                    showBarPointers?: boolean,

                    /**
                     * Specifies the showCustomLabels state.
                     * @Default  {false}
                     */
                    showCustomLabels?: boolean,

                    /**
                     * Specifies the showIndicators state.
                     * @Default  {false}
                     */
                    showIndicators?: boolean,

                    /**
                     * Specifies the showLabels state.
                     * @Default  {true}
                     */
                    showLabels?: boolean,

                    /**
                     * Specifies the showMarkerPointers state.
                     * @Default  {true}
                     */
                    showMarkerPointers?: boolean,

                    /**
                     * Specifies the showRanges state.
                     * @Default  {false}
                     */
                    showRanges?: boolean,

                    /**
                     * Specifies the showTicks state.
                     * @Default  {true}
                     */
                    showTicks?: boolean,

                    /**
                     * Specifies the ticks in the scale.
                     * @Default  {Array}
                     */
                    ticks?: Array<ScalesTick>,

                    /**
                     * Specifies the scaleBar type .See ScaleType
                     * @Default  {Rectangle}
                     */
                    type?: undefined.ScaleType | string,

                    /**
                     * Specifies the scaleBar width.
                     * @Default  {30}
                     */
                    width?: number
            }
            declare         export interface Tooltip {

                /**
                 * Show/hides the tooltip visibility.
                 * @Default  {false}
                 */
                visible?: boolean,

                    /**
                     * Fill color for the sparkline tooltip.
                     * @Default  {white}
                     */
                    fill?: string,

                    /**
                     * Custom template to the tooltip.
                     */
                    template?: string,

                    /**
                     * Options for customizing the border of the tooltip.
                     */
                    border?: TooltipBorder,

                    /**
                     * Options for customizing the font of the tooltip.
                     */
                    font?: TooltipFont
            }
        }

        declare module 'DigitalGauge' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface InitEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the entire scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ItemRenderingEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the all the options of the items.
                     */
                    items?: any,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the gauge model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface RenderCompleteEventArgs {

                /**
                 * returns the original event args.
                 */
                args?: any,

                    /**
                     * returns the current action of PivotGrid control.
                     */
                    action?: string,

                    /**
                     * returns the custom object bounded with the control.
                     */
                    customObject?: any,

                    /**
                     * returns the HTML of PivotGrid control.
                     */
                    element?: string,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the PivotGrid model.
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface Frame {

                /**
                 * Specifies the frame background image URL of linear gauge
                 * @Default  {null}
                 */
                backgroundImageUrl?: string,

                    /**
                     * Specifies the frame InnerWidth
                     * @Default  {8}
                     */
                    innerWidth?: number,

                    /**
                     * Specifies the frame OuterWidth
                     * @Default  {12}
                     */
                    outerWidth?: number
            }
            declare         export interface ItemsCharacterSettings {

                /**
                 * Specifies the CharacterCount value for the DigitalGauge.
                 * @Default  {4}
                 */
                count?: number,

                    /**
                     * Specifies the opacity value for the DigitalGauge.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the value for spacing between the characters
                     * @Default  {2}
                     */
                    spacing?: number,

                    /**
                     * Specifies the character type for the text to be displayed.
                     * @Default  {ej.datavisualization.DigitalGauge.CharacterType.EightCrossEightDotMatrix}
                     */
                    type?: undefined.CharacterType | string
            }
            declare         export interface ItemsFont {

                /**
                 * Set the font family value
                 * @Default  {Arial}
                 */
                fontFamily?: string,

                    /**
                     * Set the font style for the font
                     * @Default  {italic}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Set the font size value
                     * @Default  {11px}
                     */
                    size?: string
            }
            declare         export interface ItemsPosition {

                /**
                 * Set the horizontal location for the text, where it needs to be placed within the gauge.
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Set the vertical location for the text, where it needs to be placed within the gauge.
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ItemsSegmentSettings {

                /**
                 * Set the color for the text segments.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Set the gradient for the text segments.
                     * @Default  {null}
                     */
                    gradient?: any,

                    /**
                     * Set the length for the text segments.
                     * @Default  {2}
                     */
                    length?: number,

                    /**
                     * Set the opacity for the text segments.
                     * @Default  {0}
                     */
                    opacity?: number,

                    /**
                     * Set the spacing for the text segments.
                     * @Default  {1}
                     */
                    spacing?: number,

                    /**
                     * Set the width for the text segments.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface Items {

                /**
                 * Specifies the Character settings for the DigitalGauge.
                 * @Default  {null}
                 */
                characterSettings?: ItemsCharacterSettings,

                    /**
                     * Enable/Disable the custom font to be applied to the text in the gauge.
                     * @Default  {false}
                     */
                    enableCustomFont?: boolean,

                    /**
                     * Set the specific font for the text, when the enableCustomFont is set to true
                     * @Default  {null}
                     */
                    font?: ItemsFont,

                    /**
                     * Set the location for the text, where it needs to be placed within the gauge.
                     * @Default  {null}
                     */
                    position?: ItemsPosition,

                    /**
                     * Set the segment settings for the digital gauge.
                     * @Default  {null}
                     */
                    segmentSettings?: ItemsSegmentSettings,

                    /**
                     * Set the value for enabling/disabling the blurring effect for the shadows of the text
                     * @Default  {0}
                     */
                    shadowBlur?: number,

                    /**
                     * Specifies the color of the text shadow.
                     * @Default  {null}
                     */
                    shadowColor?: string,

                    /**
                     * Set the x offset value for the shadow of the text, indicating the location where it needs to be displayed.
                     * @Default  {1}
                     */
                    shadowOffsetX?: number,

                    /**
                     * Set the y offset value for the shadow of the text, indicating the location where it needs to be displayed.
                     * @Default  {1}
                     */
                    shadowOffsetY?: number,

                    /**
                     * Set the alignment of the text that is displayed within the gauge.See TextAlign
                     * @Default  {left}
                     */
                    textAlign?: string,

                    /**
                     * Specifies the color of the text.
                     * @Default  {null}
                     */
                    textColor?: string,

                    /**
                     * Specifies the text value.
                     * @Default  {null}
                     */
                    value?: string
            }
        }

        declare module 'Chart' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface AnimationCompleteEventArgs {

                /**
                 * Instance of the series that completed has animation.
                 */
                series?: any,

                    /**
                     * Set this option to true to cancel the event
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface AxesLabelRenderingEventArgs {

                /**
                 * Instance of the corresponding axis.
                 */
                Axis?: any,

                    /**
                     * Formatted text of the respective label. You can also add custom text to the label.
                     */
                    LabelText?: string,

                    /**
                     * Actual value of the label.
                     */
                    LabelValue?: string,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface AxesLabelsInitializeEventArgs {

                /**
                 * Collection of axes in Chart
                 */
                dataAxes?: any,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface AxesRangeCalculateEventArgs {

                /**
                 * Difference between minimum and maximum value of axis range.
                 */
                delta?: number,

                    /**
                     * Interval value of axis range. Grid lines, tick lines and axis labels are drawn based on this interval value.
                     */
                    interval?: number,

                    /**
                     * Maximum value of axis range.
                     */
                    max?: number,

                    /**
                     * Minimum value of axis range.
                     */
                    min?: number,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface AxesTitleRenderingEventArgs {

                /**
                 * Instance of the axis whose title is being rendered
                 */
                axes?: any,

                    /**
                     * X-coordinate of title location
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of title location
                     */
                    locationY?: number,

                    /**
                     * Axis title text. You can add custom text to the title.
                     */
                    title?: string,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface ChartAreaBoundsCalculateEventArgs {

                /**
                 * Height of the chart area.
                 */
                areaBoundsHeight?: number,

                    /**
                     * Width of the chart area.
                     */
                    areaBoundsWidth?: number,

                    /**
                     * X-coordinate of the chart area.
                     */
                    areaBoundsX?: number,

                    /**
                     * Y-coordinate of the chart area.
                     */
                    areaBoundsY?: number,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface CreateEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the scroller model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface DestroyEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the autocomplete model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface DisplayTextRenderingEventArgs {

                /**
                 * Text displayed in data label. You can add custom text to the data label
                 */
                text?: string,

                    /**
                     * X-coordinate of data label location
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of data label location
                     */
                    locationY?: number,

                    /**
                     * Index of the series in series Collection whose data label is being rendered 
                     */
                    seriesIndex?: number,

                    /**
                     * Index of the point in series whose data label is being rendered 
                     */
                    pointIndex?: number,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface LegendBoundsCalculateEventArgs {

                /**
                 * Height of the legend.
                 */
                legendBoundsHeight?: number,

                    /**
                     * Width of the legend.
                     */
                    legendBoundsWidth?: number,

                    /**
                     * Number of rows to display the legend items
                     */
                    legendBoundsRows?: number,

                    /**
                     * Set this option to true to cancel the event.
                     */
                    cancel?: boolean,

                    /**
                     * Instance of the chart model object.
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface LegendItemClickEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of legend item in pixel
                     */
                    startX?: number,

                    /**
                     * Y-coordinate of legend item in pixel
                     */
                    startY?: number,

                    /**
                     * Instance of the legend item object that is about to be rendered
                     */
                    LegendItem?: any,

                    /**
                     * Options to customize the legend item styles such as border, color, size, etcâ€¦,
                     */
                    style?: any,

                    /**
                     * Instance that holds information about legend bounds and legend item bounds.
                     */
                    Bounds?: any,

                    /**
                     * Name of the legend item shape. Use this option to customize legend item shape before rendering
                     */
                    symbolShape?: string,

                    /**
                     * Instance of the series object corresponding to the legend item
                     */
                    series?: any
            }
            declare         export interface LegendItemMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of legend item in pixel
                     */
                    startX?: number,

                    /**
                     * Y-coordinate of legend item in pixel
                     */
                    startY?: number,

                    /**
                     * Instance of the legend item object that is about to be rendered
                     */
                    LegendItem?: any,

                    /**
                     * Options to customize the legend item styles such as border, color, size, etcâ€¦,
                     */
                    style?: any,

                    /**
                     * Options to customize the legend item styles such as border, color, size, etcâ€¦,
                     */
                    Bounds?: any,

                    /**
                     * Name of the legend item shape. Use this option to customize legend item shape before rendering
                     */
                    symbolShape?: string,

                    /**
                     * Instance of the series object corresponding to the legend item
                     */
                    series?: any
            }
            declare         export interface LegendItemRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of legend item in pixel
                     */
                    startX?: number,

                    /**
                     * Y-coordinate of legend item in pixel
                     */
                    startY?: number,

                    /**
                     * Instance of the legend item object that is about to be rendered
                     */
                    legendItem?: any,

                    /**
                     * Options to customize the legend item styles such as border, color, size, etc.
                     */
                    style?: any,

                    /**
                     * Name of the legend item shape. Use this option to customize legend item shape before rendering
                     */
                    symbolShape?: string
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface PointRegionClickEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of point in pixel
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of point in pixel
                     */
                    locationY?: number,

                    /**
                     * Index of the point in series
                     */
                    pointIndex?: number,

                    /**
                     * Index of the series in series collection to which the point belongs
                     */
                    seriesIndex?: number
            }
            declare         export interface PointRegionMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of point in pixel
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of point in pixel
                     */
                    locationY?: number,

                    /**
                     * Index of the point in series
                     */
                    pointIndex?: number,

                    /**
                     * Type of the series
                     */
                    seriesType?: string
            }
            declare         export interface PreRenderEventArgs {

                /**
                 * When the event is canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * Returns the RTE model
                     */
                    model?: any,

                    /**
                     * Returns the name of the event
                     */
                    type?: string
            }
            declare         export interface SeriesRegionClickEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Instance of the selected series
                     */
                    series?: any,

                    /**
                     * Index of the selected series
                     */
                    seriesIndex?: number
            }
            declare         export interface SeriesRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Minimum x value of the data point
                     */
                    minX?: any,

                    /**
                     * Minimum y value of the data point
                     */
                    minY?: any,

                    /**
                     * Maximum x value of the data point
                     */
                    maxX?: any,

                    /**
                     * Maximum y value of the data point
                     */
                    maxY?: any
            }
            declare         export interface SymbolRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Instance that holds the location of marker symbol
                     */
                    location?: any,

                    /**
                     * Options to customize the marker style such as color, border and size
                     */
                    style?: any
            }
            declare         export interface TitleRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Option to customize the title location in pixels
                     */
                    location?: any,

                    /**
                     * Read-only option to find the size of the title
                     */
                    size?: any,

                    /**
                     * Use this option to add custom text in title
                     */
                    title?: string
            }
            declare         export interface ToolTipInitializeEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Text to be displayed in tooltip. Set this option to customize the text displayed in tooltip
                     */
                    currentText?: string,

                    /**
                     * Index of the point on which mouse is hovered
                     */
                    pointIndex?: number,

                    /**
                     * Index of the series in series collection whose point is hovered by mouse
                     */
                    seriesIndex?: number
            }
            declare         export interface TrackAxisToolTipEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Location of the crosshair label in pixels
                     */
                    location?: any,

                    /**
                     * Index of the axis for which crosshair label is displayed
                     */
                    axisIndex?: number,

                    /**
                     * Instance of the chart axis object for which cross hair label is displayed
                     */
                    crossAxis?: number,

                    /**
                     * Text to be displayed in crosshair label. Use this option to add custom text in crosshair label
                     */
                    currentTrackText?: string
            }
            declare         export interface TrackToolTipEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Location of the trackball tooltip in pixels
                     */
                    location?: any,

                    /**
                     * Index of the point for which trackball tooltip is displayed
                     */
                    pointIndex?: number,

                    /**
                     * Index of the series in series collection
                     */
                    seriesIndex?: number,

                    /**
                     * Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
                     */
                    currentText?: string,

                    /**
                     * Instance of the series object for which trackball tooltip is displayed.
                     */
                    series?: any
            }
            declare         export interface AxisLabelClickEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the labels in chart area. 
                     */
                    location?: any,

                    /**
                     * Index of the label.
                     */
                    index?: number,

                    /**
                     * Instance of the corresponding axis.
                     */
                    axis?: any,

                    /**
                     * Label that is clicked.
                     */
                    text?: string
            }
            declare         export interface AxisLabelMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the labels in chart area. 
                     */
                    location?: any,

                    /**
                     * Index of the label.
                     */
                    index?: number,

                    /**
                     * Instance of the corresponding axis.
                     */
                    axis?: any,

                    /**
                     * Label that is hovered.
                     */
                    text?: string
            }
            declare         export interface ChartClickEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the points with respect to chart area.  
                     */
                    location?: any,

                    /**
                     * ID of the target element. 
                     */
                    id?: string,

                    /**
                     * Width and height of the chart. 
                     */
                    size?: any,

                    /**
                     * x-coordinate of the pointer, relative to the page 
                     */
                    pageX?: number,

                    /**
                     * y-coordinate of the pointer, relative to the page 
                     */
                    pageY?: number
            }
            declare         export interface ChartMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the points with respect to chart area.  
                     */
                    location?: any,

                    /**
                     * ID of the target element. 
                     */
                    id?: string,

                    /**
                     * Width and height of the chart. 
                     */
                    size?: any,

                    /**
                     * x-coordinate of the pointer, relative to the page 
                     */
                    pageX?: number,

                    /**
                     * y-coordinate of the pointer, relative to the page 
                     */
                    pageY?: number
            }
            declare         export interface ChartDoubleClickEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the points with respect to chart area.  
                     */
                    location?: any,

                    /**
                     * ID of the target element. 
                     */
                    id?: string,

                    /**
                     * Width and height of the chart. 
                     */
                    size?: any,

                    /**
                     * x-coordinate of the pointer, relative to the page 
                     */
                    pageX?: number,

                    /**
                     * y-coordinate of the pointer, relative to the page 
                     */
                    pageY?: number
            }
            declare         export interface AnnotationClickEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X and Y co-ordinate of the annotation in chart area.  
                     */
                    location?: any,

                    /**
                     * Information about the annotation, like Coordinate unit, Region, content 
                     */
                    contentData?: any,

                    /**
                     * x-coordinate of the pointer, relative to the page  
                     */
                    pageX?: number,

                    /**
                     * y-coordinate of the pointer, relative to the page 
                     */
                    pageY?: number
            }
            declare         export interface AfterResizeEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Chart width, after resize  
                     */
                    width?: number,

                    /**
                     * Chart height, after resize  
                     */
                    height?: number,

                    /**
                     * Chart width, before resize  
                     */
                    prevWidth?: number,

                    /**
                     * Chart height, before resize  
                     */
                    prevHeight?: number,

                    /**
                     * Chart width, when the chart was first rendered  
                     */
                    originalWidth?: number,

                    /**
                     * Chart height, when the chart was first rendered  
                     */
                    originalHeight?: number
            }
            declare         export interface BeforeResizeEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Chart width, before resize  
                     */
                    currentWidth?: number,

                    /**
                     * Chart height, before resize  
                     */
                    currentHeight?: number,

                    /**
                     * Chart width, after resize   
                     */
                    newWidth?: number,

                    /**
                     * Chart height, after resize   
                     */
                    newHeight?: number
            }
            declare         export interface ErrorBarRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the chart model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Error bar Object  
                     */
                    errorbar?: any
            }
            declare         export interface ScrollChangedEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position old start and end range value on changing scrollbar
                     */
                    dataoldRange?: any,

                    /**
                     * returns the scrollbar position new start and end range value on changing scrollbar
                     */
                    datanewRange?: any,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ScrollStartEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position starting range value on changing scrollbar
                     */
                    datastartRange?: string,

                    /**
                     * returns the scrollbar position end range value on changing scrollbar
                     */
                    dataendRange?: string,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ScrollEndEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position old start and end range value on change end of scrollbar
                     */
                    dataoldRange?: any,

                    /**
                     * returns the scrollbar position new start and end range value on change end of scrollbar
                     */
                    datanewRange?: any,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface AnnotationsMargin {

                /**
                 * Annotation is placed at the specified value above its original position.
                 * @Default  {0}
                 */
                bottom?: number,

                    /**
                     * Annotation is placed at the specified value from left side of its original position.
                     * @Default  {0}
                     */
                    left?: number,

                    /**
                     * Annotation is placed at the specified value from the right side of its original position.
                     * @Default  {0}
                     */
                    right?: number,

                    /**
                     * Annotation is placed at the specified value under its original position.
                     * @Default  {0}
                     */
                    top?: number
            }
            declare         export interface Annotation {

                /**
                 * Angle to rotate the annotation in degrees.
                 * @Default  {'0'}
                 */
                angle?: number,

                    /**
                     * Text content or id of a HTML element to be displayed as annotation.
                     */
                    content?: string,

                    /**
                     * Specifies how annotations have to be placed in Chart.
                     * @Default  {none. See CoordinateUnit}
                     */
                    coordinateUnit?: undefined.CoordinateUnit | string,

                    /**
                     * Specifies the horizontal alignment of the annotation.
                     * @Default  {middle. See HorizontalAlignment}
                     */
                    horizontalAlignment?: undefined.HorizontalAlignment | string,

                    /**
                     * Options to customize the margin of annotation.
                     */
                    margin?: AnnotationsMargin,

                    /**
                     * Controls the opacity of the annotation.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies whether annotation has to be placed with respect to chart or series.
                     * @Default  {chart. See Region}
                     */
                    region?: undefined.Region | string,

                    /**
                     * Specifies the vertical alignment of the annotation.
                     * @Default  {middle. See VerticalAlignment}
                     */
                    verticalAlignment?: undefined.VerticalAlignment | string,

                    /**
                     * Controls the visibility of the annotation.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * Represents the horizontal offset when coordinateUnit is pixels.when coordinateUnit is points, it represents the x-coordinate of axis bounded with xAxisName property or primary X axis when xAxisName is not provided.This property is not applicable when coordinateUnit is none.
                     * @Default  {0}
                     */
                    x?: number,

                    /**
                     * Name of the horizontal axis to be used for positioning the annotation. This property is applicable only when coordinateUnit is points.
                     */
                    xAxisName?: string,

                    /**
                     * Represents the vertical offset when coordinateUnit is pixels.When coordinateUnit is points, it represents the y-coordinate of axis bounded with yAxisName property or primary Y axis when yAxisName is not provided.This property is not applicable when coordinateUnit is none.
                     * @Default  {0}
                     */
                    y?: number,

                    /**
                     * Name of the vertical axis to be used for positioning the annotation.This property is applicable only when coordinateUnit is points.
                     */
                    yAxisName?: string
            }
            declare         export interface Border {

                /**
                 * Border color of the sparkline.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Width of the Sparkline border.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface ExportSettings {

                /**
                 * Specifies the export formats.
                 * @Default  {ej.ReportViewer.ExportOptions.All}
                 */
                exportOptions?: undefined.ExportOptions | string,

                    /**
                     * Specifies the excel export format.
                     * @Default  {ej.ReportViewer.ExcelFormats.Excel97to2003}
                     */
                    excelFormat?: undefined.ExcelFormats | string,

                    /**
                     * Specifies the word export format.
                     * @Default  {ej.ReportViewer.WordFormats.Doc}
                     */
                    wordFormat?: undefined.WordFormats | string
            }
            declare         export interface ChartAreaBorder {

                /**
                 * Border color of the plot area.
                 * @Default  {Gray}
                 */
                color?: string,

                    /**
                     * Opacity of the plot area border.
                     * @Default  {0.3}
                     */
                    opacity?: number,

                    /**
                     * Border width of the plot area.
                     * @Default  {0.5}
                     */
                    width?: number
            }
            declare         export interface ChartArea {

                /**
                 * Background color of the plot area.
                 * @Default  {transparent}
                 */
                background?: string,

                    /**
                     * Options for customizing the border of the plot area.
                     */
                    border?: ChartAreaBorder
            }
            declare         export interface ColumnDefinition {

                /**
                 * Specifies the unit to measure the width of the column in plotting area.
                 * @Default  {'pixel'. See Unit}
                 */
                unit?: undefined.Unit | string,

                    /**
                     * Width of the column in plotting area. Width is measured in either pixel or percentage based on the value of unit property.
                     * @Default  {50}
                     */
                    columnWidth?: number,

                    /**
                     * Color of the line that indicates the starting point of the column in plotting area.
                     * @Default  {transparent}
                     */
                    lineColor?: string,

                    /**
                     * Width of the line that indicates the starting point of the column in plot area.
                     * @Default  {1}
                     */
                    lineWidth?: number
            }
            declare         export interface CommonSeriesOptionsBorder {

                /**
                 * Border color of all series.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * DashArray for border of the series.
                     * @Default  {null}
                     */
                    dashArray?: string,

                    /**
                     * Border width of all series.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsFont {

                /**
                 * Font color of the text in all series.
                 * @Default  {#707070}
                 */
                color?: string,

                    /**
                     * Font Family for all the series.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the font Style for all the series.
                     * @Default  {normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the font weight for all the series.
                     * @Default  {regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity for text in all the series.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size for text in all the series.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface CommonSeriesOptionsMarkerBorder {

                /**
                 * Border color of the marker shape.
                 * @Default  {white}
                 */
                color?: string,

                    /**
                     * Border width of the marker shape.
                     * @Default  {3}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsMarkerDataLabelBorder {

                /**
                 * Border color of the data label.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of the data label.
                     * @Default  {0.1}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsMarkerDataLabelConnectorLine {

                /**
                 * Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
                 * @Default  {line. See ConnectorLineType}
                 */
                type?: undefined.ConnectorLineType | string,

                    /**
                     * Width of the connector.
                     * @Default  {0.5}
                     */
                    width?: number,

                    /**
                     * Color of the connector line.
                     * @Default  {#565656}
                     */
                    color?: string,

                    /**
                     * Height of the connector line.
                     * @Default  {null}
                     */
                    height?: string
            }
            declare         export interface CommonSeriesOptionsMarkerDataLabelFont {

                /**
                 * Font family of the data label.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of the data label.
                     * @Default  {normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the data label.
                     * @Default  {regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the data label.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface CommonSeriesOptionsMarkerDataLabelMargin {

                /**
                 * Bottom margin of the text.
                 * @Default  {5}
                 */
                bottom?: number,

                    /**
                     * Left margin of the text.
                     * @Default  {5}
                     */
                    left?: number,

                    /**
                     * Right margin of the text.
                     * @Default  {5}
                     */
                    right?: number,

                    /**
                     * Top margin of the text.
                     * @Default  {5}
                     */
                    top?: number
            }
            declare         export interface CommonSeriesOptionsMarkerDataLabel {

                /**
                 * Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
                 * @Default  {null}
                 */
                angle?: number,

                    /**
                     * Options for customizing the border of the data label.
                     */
                    border?: CommonSeriesOptionsMarkerDataLabelBorder,

                    /**
                     * Options for displaying and customizing the line that connects point and data label.
                     */
                    connectorLine?: CommonSeriesOptionsMarkerDataLabelConnectorLine,

                    /**
                     * Background color of the data label.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the data label font.
                     */
                    font?: CommonSeriesOptionsMarkerDataLabelFont,

                    /**
                     * Horizontal alignment of the data label.
                     * @Default  {center}
                     */
                    horizontalTextAlignment?: undefined.HorizontalTextAlignment | string,

                    /**
                     * Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
                     */
                    margin?: CommonSeriesOptionsMarkerDataLabelMargin,

                    /**
                     * Opacity of the data label.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Background shape of the data label.
                     * @Default  {none. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Name of a field in data source, where datalabel text is displayed.
                     */
                    textMappingName?: string,

                    /**
                     * Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
                     * @Default  {top. See TextPosition}
                     */
                    textPosition?: undefined.TextPosition | string,

                    /**
                     * Vertical alignment of the data label.
                     * @Default  {center}
                     */
                    verticalTextAlignment?: undefined.VerticalTextAlignment | string,

                    /**
                     * Controls the visibility of the data labels.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface CommonSeriesOptionsMarkerSize {

                /**
                 * Height of the marker.
                 * @Default  {6}
                 */
                height?: number,

                    /**
                     * Width of the marker.
                     * @Default  {6}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsMarker {

                /**
                 * Options for customizing the border of the marker shape.
                 */
                border?: CommonSeriesOptionsMarkerBorder,

                    /**
                     * Options for displaying and customizing data labels.
                     */
                    dataLabel?: CommonSeriesOptionsMarkerDataLabel,

                    /**
                     * Color of the marker shape.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * The URL for the Image to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
                     */
                    imageUrl?: string,

                    /**
                     * Opacity of the marker.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the shape of the marker.
                     * @Default  {circle. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Options for customizing the size of the marker shape.
                     */
                    size?: CommonSeriesOptionsMarkerSize,

                    /**
                     * Controls the visibility of the marker shape.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface CommonSeriesOptionsTooltipBorder {

                /**
                 * Border color of the tooltip.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of the tooltip.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsTooltip {

                /**
                 * Options for customizing the border of the tooltip.
                 */
                border?: CommonSeriesOptionsTooltipBorder,

                    /**
                     * Customize the corner radius of the tooltip rectangle.
                     * @Default  {0}
                     */
                    rx?: number,

                    /**
                     * Customize the corner radius of the tooltip rectangle.
                     * @Default  {0}
                     */
                    ry?: number,

                    /**
                     * Specifies the duration, the tooltip has to be displayed.
                     * @Default  {500ms}
                     */
                    duration?: string,

                    /**
                     * Enables/disables the animation of the tooltip when moving from one point to other.
                     * @Default  {true}
                     */
                    enableAnimation?: boolean,

                    /**
                     * Background color of the tooltip.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Format of the tooltip content.
                     * @Default  {#point.x# : #point.y#}
                     */
                    format?: string,

                    /**
                     * Opacity of the tooltip.
                     * @Default  {0.5}
                     */
                    opacity?: number,

                    /**
                     * Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
                     * @Default  {null}
                     */
                    template?: string,

                    /**
                     * Controls the visibility of the tooltip.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface CommonSeriesOptionsEmptyPointSettingsStyleBorder {

                /**
                 * Border color of the empty point.
                 */
                color?: string,

                    /**
                     * Border width of the empty point.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface CommonSeriesOptionsEmptyPointSettingsStyle {

                /**
                 * Color of the empty point.
                 */
                color?: string,

                    /**
                     * Options for customizing border of the empty point in the series.
                     */
                    border?: CommonSeriesOptionsEmptyPointSettingsStyleBorder
            }
            declare         export interface CommonSeriesOptionsEmptyPointSettings {

                /**
                 * Controls the visibility of the empty point.
                 * @Default  {true}
                 */
                visible?: boolean,

                    /**
                     * Specifies the mode of empty point.
                     * @Default  {gap}
                     */
                    displayMode?: undefined.EmptyPointMode | string,

                    /**
                     * Options for customizing the color and border of the empty point in the series.
                     */
                    style?: CommonSeriesOptionsEmptyPointSettingsStyle
            }
            declare         export interface CommonSeriesOptionsConnectorLine {

                /**
                 * Width of the connector line.
                 * @Default  {1}
                 */
                width?: number,

                    /**
                     * Color of the connector line.
                     * @Default  {#565656}
                     */
                    color?: string,

                    /**
                     * DashArray of the connector line.
                     * @Default  {null}
                     */
                    dashArray?: string,

                    /**
                     * DashArray of the connector line.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface CommonSeriesOptionsErrorBarCap {

                /**
                 * Show/Hides the error bar cap.
                 * @Default  {true}
                 */
                visible?: boolean,

                    /**
                     * Width of the error bar cap.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Length of the error bar cap.
                     * @Default  {1}
                     */
                    length?: number,

                    /**
                     * Color of the error bar cap.
                     * @Default  {â€œ#000000â€}
                     */
                    fill?: string
            }
            declare         export interface CommonSeriesOptionsErrorBar {

                /**
                 * Show/hides the error bar
                 * @Default  {visible}
                 */
                visibility?: boolean,

                    /**
                     * Specifies the type of error bar.
                     * @Default  {FixedValue}
                     */
                    type?: undefined.ErrorBarType | string,

                    /**
                     * Specifies the mode of error bar.
                     * @Default  {vertical}
                     */
                    mode?: undefined.ErrorBarMode | string,

                    /**
                     * Specifies the direction of error bar.
                     * @Default  {both}
                     */
                    direction?: undefined.ErrorBarDirection | string,

                    /**
                     * Value of vertical error bar.
                     * @Default  {3}
                     */
                    verticalErrorValue?: number,

                    /**
                     * Value of horizontal  error bar.
                     * @Default  {1}
                     */
                    horizontalErrorValue?: number,

                    /**
                     * Value of positive horizontal error bar.
                     * @Default  {1}
                     */
                    horizontalPositiveErrorValue?: number,

                    /**
                     * Value of negative horizontal error bar.
                     * @Default  {1}
                     */
                    horizontalNegativeErrorValue?: number,

                    /**
                     * Value of positive vertical error bar.
                     * @Default  {5}
                     */
                    verticalPositiveErrorValue?: number,

                    /**
                     * Value of negative vertical error bar.
                     * @Default  {5}
                     */
                    verticalNegativeErrorValue?: number,

                    /**
                     * Fill color of the error bar.
                     * @Default  {#000000}
                     */
                    fill?: string,

                    /**
                     * Width of the error bar.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Options for customizing the error bar cap.
                     */
                    cap?: CommonSeriesOptionsErrorBarCap
            }
            declare         export interface CommonSeriesOptionsTrendline {

                /**
                 * Show/hides the trendline.
                 */
                visibility?: boolean,

                    /**
                     * Specifies the type of the trendline for the series.
                     * @Default  {linear. See TrendlinesType}
                     */
                    type?: string,

                    /**
                     * Name for the trendlines that is to be displayed in the legend text.
                     * @Default  {trendline}
                     */
                    name?: string,

                    /**
                     * Fill color of the trendlines.
                     * @Default  {#0000FF}
                     */
                    fill?: string,

                    /**
                     * Width of the trendlines.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Opacity of the trendline.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Pattern of dashes and gaps used to stroke the trendline.
                     */
                    dashArray?: string,

                    /**
                     * Future trends of the current series.
                     * @Default  {0}
                     */
                    forwardForecast?: number,

                    /**
                     * Past trends of the current series.
                     * @Default  {0}
                     */
                    backwardForecast?: number,

                    /**
                     * Specifies the order of the polynomial trendlines.
                     * @Default  {0}
                     */
                    polynomialOrder?: number,

                    /**
                     * Specifies the moving average starting period value.
                     * @Default  {2}
                     */
                    period?: number
            }
            declare         export interface CommonSeriesOptionsHighlightSettingsBorder {

                /**
                 * Border color of the series/point on highlight.
                 */
                color?: string,

                    /**
                     * Border width of the series/point on highlight.
                     * @Default  {2}
                     */
                    width?: string
            }
            declare         export interface CommonSeriesOptionsHighlightSettings {

                /**
                 * Enables/disables the ability to highlight the series or data point interactively.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * Specifies whether the series or data point has to be highlighted.
                     * @Default  {series. See Mode}
                     */
                    mode?: undefined.Mode | string,

                    /**
                     * Color of the series/point on highlight.
                     */
                    color?: string,

                    /**
                     * Opacity of the series/point on highlight.
                     * @Default  {0.6}
                     */
                    opacity?: number,

                    /**
                     * Options for customizing the border of series on highlight.
                     */
                    border?: CommonSeriesOptionsHighlightSettingsBorder,

                    /**
                     * Specifies the pattern for the series/point on highlight.
                     * @Default  {none. See Pattern}
                     */
                    pattern?: string,

                    /**
                     * Custom pattern for the series on highlight.
                     */
                    customPattern?: string
            }
            declare         export interface CommonSeriesOptionsSelectionSettingsBorder {

                /**
                 * Border color of the series/point on selection.
                 */
                color?: string,

                    /**
                     * Border width of the series/point on selection.
                     * @Default  {2}
                     */
                    width?: string
            }
            declare         export interface CommonSeriesOptionsSelectionSettings {

                /**
                 * Enables/disables the ability to select a series/data point interactively.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * Specifies the type of selection.
                     * @Default  {single}
                     */
                    type?: undefined.SelectionType | string,

                    /**
                     * Specifies whether the series or data point has to be selected.
                     * @Default  {series. See Mode}
                     */
                    mode?: undefined.Mode | string,

                    /**
                     * Specifies the drawn rectangle type.
                     * @Default  {xy}
                     */
                    rangeType?: undefined.RangeType | string,

                    /**
                     * Color of the series/point on selection.
                     */
                    color?: string,

                    /**
                     * Opacity of the series/point on selection.
                     * @Default  {0.6}
                     */
                    opacity?: number,

                    /**
                     * Options for customizing the border of the series on selection.
                     */
                    border?: CommonSeriesOptionsSelectionSettingsBorder,

                    /**
                     * Specifies the pattern for the series/point on selection.
                     * @Default  {none. See Pattern}
                     */
                    pattern?: string,

                    /**
                     * Custom pattern for the series on selection.
                     */
                    customPattern?: string
            }
            declare         export interface CommonSeriesOptions {

                /**
                 * Options to customize the border of all the series.
                 */
                border?: CommonSeriesOptionsBorder,

                    /**
                     * Relative width of the columns in column type series. Value ranges from 0 to 1. Width also depends upon columnSpacing property.
                     * @Default  {0.7}
                     */
                    columnWidth?: number,

                    /**
                     * Spacing between columns of different series. Value ranges from 0 to 1
                     * @Default  {0}
                     */
                    columnSpacing?: number,

                    /**
                     * Enables or disables the visibility of legend item.
                     * @Default  {visible}
                     */
                    visibleOnLegend?: string,

                    /**
                     * Pattern of dashes and gaps used to stroke all the line type series.
                     */
                    dashArray?: string,

                    /**
                     * Set the dataSource for all series. It can be an array of JSON objects or an instance of ej.DataManager.
                     * @Default  {null}
                     */
                    dataSource?: any,

                    /**
                     * Controls the size of the hole in doughnut series. Value ranges from 0 to 1
                     * @Default  {0.4}
                     */
                    doughnutCoefficient?: number,

                    /**
                     * Controls the size of the doughnut series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    doughnutSize?: number,

                    /**
                     * Specifies the type of series to be drawn in radar or polar series.
                     * @Default  {line. See DrawType}
                     */
                    drawType?: undefined.DrawType | string,

                    /**
                     * Enable/disable the animation for all the series.
                     * @Default  {true}
                     */
                    enableAnimation?: boolean,

                    /**
                     * To avoid overlapping of data labels smartly.
                     * @Default  {true}
                     */
                    enableSmartLabels?: boolean,

                    /**
                     * Start angle of pie/doughnut series.
                     * @Default  {null}
                     */
                    endAngle?: number,

                    /**
                     * Explodes the pie/doughnut slices on mouse move.
                     * @Default  {false}
                     */
                    explode?: boolean,

                    /**
                     * Explodes all the slice of pie/doughnut on render.
                     * @Default  {false}
                     */
                    explodeAll?: boolean,

                    /**
                     * Index of the point to be exploded from pie/doughnut/pyramid/funnel.
                     * @Default  {null}
                     */
                    explodeIndex?: number,

                    /**
                     * Specifies the distance of the slice from the center, when it is exploded.
                     * @Default  {0.4}
                     */
                    explodeOffset?: number,

                    /**
                     * Fill color for all the series.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the font of all the series.
                     */
                    font?: CommonSeriesOptionsFont,

                    /**
                     * Sets the height of the funnel in funnel series. Values can be either pixel or percentage.
                     * @Default  {32.7%}
                     */
                    funnelHeight?: string,

                    /**
                     * Sets the width of the funnel in funnel series. Values can be either pixel or percentage.
                     * @Default  {11.6%}
                     */
                    funnelWidth?: string,

                    /**
                     * Gap between the slices in pyramid and funnel series.
                     * @Default  {0}
                     */
                    gapRatio?: number,

                    /**
                     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
                     * @Default  {true}
                     */
                    isClosed?: boolean,

                    /**
                     * Specifies whether to stack the column series in polar/radar charts.
                     * @Default  {false}
                     */
                    isStacking?: boolean,

                    /**
                     * Renders the chart vertically. This is applicable only for Cartesian type series.
                     * @Default  {false}
                     */
                    isTransposed?: boolean,

                    /**
                     * Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
                     * @Default  {inside. See LabelPosition}
                     */
                    labelPosition?: undefined.LabelPosition | string,

                    /**
                     * Specifies the line cap of the series.
                     * @Default  {butt. See LineCap}
                     */
                    lineCap?: undefined.LineCap | string,

                    /**
                     * Specifies the type of shape to be used where two lines meet.
                     * @Default  {round. See LineJoin}
                     */
                    lineJoin?: undefined.LineJoin | string,

                    /**
                     * Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
                     */
                    marker?: CommonSeriesOptionsMarker,

                    /**
                     * Opacity of the series.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Name of a field in data source, where the fill color for all the data points is generated.
                     */
                    palette?: string,

                    /**
                     * Controls the size of pie series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    pieCoefficient?: number,

                    /**
                     * Name of the property in the datasource that contains fill color for the series.
                     * @Default  {null}
                     */
                    pointColorMappingName?: string,

                    /**
                     * Specifies the mode of the pyramid series.
                     * @Default  {linear. See PyramidMode}
                     */
                    pyramidMode?: undefined.PyramidMode | string,

                    /**
                     * Start angle from where the pie/doughnut series renders. By default it starts from 0.
                     * @Default  {null}
                     */
                    startAngle?: number,

                    /**
                     * Options for customizing the tooltip of chart.
                     */
                    tooltip?: CommonSeriesOptionsTooltip,

                    /**
                     * Specifies the type of the series to render in chart.
                     * @Default  {column. See Type}
                     */
                    type?: undefined.Type | string,

                    /**
                     * Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    xAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains x value for the series.
                     * @Default  {null}
                     */
                    xName?: string,

                    /**
                     * Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    yAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains y value for the series.
                     * @Default  {null}
                     */
                    yName?: string,

                    /**
                     * Name of the property in the datasource that contains high value for the series.
                     * @Default  {null}
                     */
                    high?: string,

                    /**
                     * Name of the property in the datasource that contains low value for the series.
                     * @Default  {null}
                     */
                    low?: string,

                    /**
                     * Name of the property in the datasource that contains open value for the series.
                     * @Default  {null}
                     */
                    open?: string,

                    /**
                     * Name of the property in the datasource that contains close value for the series.
                     * @Default  {null}
                     */
                    close?: string,

                    /**
                     * zOrder of the series.
                     * @Default  {0}
                     */
                    zOrder?: number,

                    /**
                     * Name of the property in the datasource that contains the size value for the bubble series.
                     * @Default  {null}
                     */
                    size?: string,

                    /**
                     * Options for customizing the empty point in the series.
                     */
                    emptyPointSettings?: CommonSeriesOptionsEmptyPointSettings,

                    /**
                     * Fill color for the positive column of the waterfall.
                     * @Default  {null}
                     */
                    positiveFill?: string,

                    /**
                     * Options for customizing the waterfall connector line.
                     */
                    connectorLine?: CommonSeriesOptionsConnectorLine,

                    /**
                     * Options to customize the error bar in series.
                     */
                    errorBar?: CommonSeriesOptionsErrorBar,

                    /**
                     * Option to add the trendlines to chart.
                     */
                    trendlines?: Array<CommonSeriesOptionsTrendline>,

                    /**
                     * Options for customizing the appearance of the series or data point while highlighting.
                     */
                    highlightSettings?: CommonSeriesOptionsHighlightSettings,

                    /**
                     * Options for customizing the appearance of the series/data point on selection.
                     */
                    selectionSettings?: CommonSeriesOptionsSelectionSettings
            }
            declare         export interface CrosshairMarkerBorder {

                /**
                 * Border width of the marker.
                 * @Default  {3}
                 */
                width?: number
            }
            declare         export interface CrosshairMarkerSize {

                /**
                 * Height of the marker.
                 * @Default  {10}
                 */
                height?: number,

                    /**
                     * Width of the marker.
                     * @Default  {10}
                     */
                    width?: number
            }
            declare         export interface CrosshairMarker {

                /**
                 * Options for customizing the border.
                 */
                border?: CrosshairMarkerBorder,

                    /**
                     * Opacity of the marker.
                     * @Default  {true}
                     */
                    opacity?: boolean,

                    /**
                     * Options for customizing the size of the marker.
                     */
                    size?: CrosshairMarkerSize,

                    /**
                     * Show/hides the marker.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface CrosshairLine {

                /**
                 * Color of the crosshair line.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Width of the crosshair line.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface Crosshair {

                /**
                 * Options for customizing the marker in crosshair.
                 */
                marker?: CrosshairMarker,

                    /**
                     * Options for customizing the crosshair line.
                     */
                    line?: CrosshairLine,

                    /**
                     * Specifies the type of the crosshair. It can be trackball or crosshair
                     * @Default  {crosshair. See CrosshairType}
                     */
                    type?: undefined.CrosshairType | string,

                    /**
                     * Show/hides the crosshair/trackball visibility.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface IndicatorsHistogramBorder {

                /**
                 * Color of the histogram border in MACD indicator.
                 * @Default  {#9999ff}
                 */
                color?: string,

                    /**
                     * Controls the width of histogram border line in MACD indicator.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface IndicatorsHistogram {

                /**
                 * Options to customize the histogram border in MACD indicator.
                 */
                border?: IndicatorsHistogramBorder,

                    /**
                     * Color of histogram columns in MACD indicator.
                     * @Default  {#ccccff}
                     */
                    fill?: string,

                    /**
                     * Opacity of histogram columns in MACD indicator.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface IndicatorsLowerLine {

                /**
                 * Color of lower line.
                 * @Default  {#008000}
                 */
                fill?: string,

                    /**
                     * Width of the lower line.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface IndicatorsMacdLine {

                /**
                 * Color of MACD line.
                 * @Default  {#ff9933}
                 */
                fill?: string,

                    /**
                     * Width of the MACD line.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface IndicatorsPeriodLine {

                /**
                 * Color of period line in indicator.
                 * @Default  {blue}
                 */
                fill?: string,

                    /**
                     * Width of the period line in indicators.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface IndicatorsTooltipBorder {

                /**
                 * Border color of indicator tooltip.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of indicator tooltip.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface IndicatorsTooltip {

                /**
                 * Option to customize the border of indicator tooltip.
                 */
                border?: IndicatorsTooltipBorder,

                    /**
                     * Specifies the animation duration of indicator tooltip.
                     * @Default  {500ms}
                     */
                    duration?: string,

                    /**
                     * Enables/disables the tooltip animation.
                     * @Default  {true}
                     */
                    enableAnimation?: boolean,

                    /**
                     * Format of indicator tooltip. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
                     * @Default  {#point.x# : #point.y#}
                     */
                    format?: string,

                    /**
                     * Background color of indicator tooltip.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Opacity of indicator tooltip.
                     * @Default  {0.95}
                     */
                    opacity?: number,

                    /**
                     * Controls the visibility of indicator tooltip.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface IndicatorsUpperLine {

                /**
                 * Fill color of the upper line in indicators
                 * @Default  {#ff9933}
                 */
                fill?: string,

                    /**
                     * Width of the upper line in indicators.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface Indicator {

                /**
                 * The dPeriod value for stochastic indicator.
                 * @Default  {3}
                 */
                dPeriod?: number,

                    /**
                     * Enables/disables the animation.
                     * @Default  {false}
                     */
                    enableAnimation?: boolean,

                    /**
                     * Color of the technical indicator.
                     * @Default  {#00008B}
                     */
                    fill?: string,

                    /**
                     * Options to customize the histogram in MACD indicator.
                     */
                    histogram?: IndicatorsHistogram,

                    /**
                     * Specifies the k period in stochastic indicator.
                     * @Default  {3}
                     */
                    kPeriod?: number,

                    /**
                     * Specifies the long period in MACD indicator.
                     * @Default  {26}
                     */
                    longPeriod?: number,

                    /**
                     * Options to customize the lower line in indicators.
                     */
                    lowerLine?: IndicatorsLowerLine,

                    /**
                     * Options to customize the MACD line.
                     */
                    macdLine?: IndicatorsMacdLine,

                    /**
                     * Specifies the type of the MACD indicator.
                     * @Default  {line. See MACDType}
                     */
                    macdType?: string,

                    /**
                     * Specifies period value in indicator.
                     * @Default  {14}
                     */
                    period?: number,

                    /**
                     * Options to customize the period line in indicators.
                     */
                    periodLine?: IndicatorsPeriodLine,

                    /**
                     * Name of the series for which indicator has to be drawn.
                     */
                    seriesName?: string,

                    /**
                     * Specifies the short period in MACD indicator.
                     * @Default  {13}
                     */
                    shortPeriod?: number,

                    /**
                     * Specifies the standard deviation value for Bollinger band indicator.
                     * @Default  {2}
                     */
                    standardDeviations?: number,

                    /**
                     * Options to customize the tooltip.
                     */
                    tooltip?: IndicatorsTooltip,

                    /**
                     * Trigger value of MACD indicator.
                     * @Default  {9}
                     */
                    trigger?: number,

                    /**
                     * Specifies the visibility of indicator.
                     * @Default  {visible}
                     */
                    visibility?: string,

                    /**
                     * Specifies the type of indicator that has to be rendered.
                     * @Default  {sma. See IndicatorsType}
                     */
                    type?: string,

                    /**
                     * Options to customize the upper line in indicators
                     */
                    upperLine?: IndicatorsUpperLine,

                    /**
                     * Width of the indicator line.
                     * @Default  {2}
                     */
                    width?: number,

                    /**
                     * Name of the horizontal axis used for indicator. Primary X axis is used when x axis name is not specified.
                     */
                    xAxisName?: string,

                    /**
                     * Name of the vertical axis used for indicator. Primary Y axis is used when y axis name is not specified
                     */
                    yAxisName?: string
            }
            declare         export interface LegendBorder {

                /**
                 * Border color of the legend.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Border width of the legend.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface LegendFont {

                /**
                 * Font family for legend item text.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style for legend item text.
                     * @Default  {Normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight for legend item text.
                     * @Default  {Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Font size for legend item text.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface LegendItemStyleBorder {

                /**
                 * Border color of the legend items.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Border width of the legend items.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface LegendItemStyle {

                /**
                 * Options for customizing the border of legend items.
                 */
                border?: LegendItemStyleBorder,

                    /**
                     * Height of the shape in legend items.
                     * @Default  {10}
                     */
                    height?: number,

                    /**
                     * Width of the shape in legend items.
                     * @Default  {10}
                     */
                    width?: number
            }
            declare         export interface LegendLocation {

                /**
                 * X value or horizontal offset to position the legend in chart.
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Y value or vertical offset to position the legend.
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface LegendSize {

                /**
                 * Height of the legend. Height can be specified in either pixel or percentage.
                 * @Default  {null}
                 */
                height?: string,

                    /**
                     * Width of the legend. Width can be specified in either pixel or percentage.
                     * @Default  {null}
                     */
                    width?: string
            }
            declare         export interface LegendTitleFont {

                /**
                 * Font family for the text in legend title.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style for legend title.
                     * @Default  {normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight for legend title.
                     * @Default  {normal. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Font size for legend title.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface LegendTitle {

                /**
                 * Options to customize the font used for legend title
                 */
                font?: LegendTitleFont,

                    /**
                     * Text to be displayed in legend title.
                     */
                    text?: string,

                    /**
                     * Alignment of the legend title.
                     * @Default  {center. See Alignment}
                     */
                    textAlignment?: undefined.Alignment | string
            }
            declare         export interface Legend {

                /**
                 * Horizontal alignment of the legend.
                 * @Default  {Center. See Alignment}
                 */
                alignment?: undefined.Alignment | string,

                    /**
                     * Background for the legend. Use this property to add a background image or background color for the legend.
                     */
                    background?: string,

                    /**
                     * Options for customizing the legend border.
                     */
                    border?: LegendBorder,

                    /**
                     * Number of columns to arrange the legend items.
                     * @Default  {null}
                     */
                    columnCount?: number,

                    /**
                     * Controls whether legend has to use scrollbar or not. When enabled, scroll bar appears depending upon size and position properties of legend.
                     * @Default  {true}
                     */
                    enableScrollbar?: boolean,

                    /**
                     * Fill color for the legend items. By using this property, it displays all legend item shapes in same color.Legend items representing invisible series is displayed in gray color.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options to customize the font used for legend item text.
                     */
                    font?: LegendFont,

                    /**
                     * Gap or padding between the legend items.
                     * @Default  {10}
                     */
                    itemPadding?: number,

                    /**
                     * Options to customize the style of legend items.
                     */
                    itemStyle?: LegendItemStyle,

                    /**
                     * Options to customize the location of chart legend. Legend is placed in provided location only when value of position property is custom
                     */
                    location?: LegendLocation,

                    /**
                     * Opacity of the legend.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Places the legend at specified position. Legend can be placed at left, right, top or bottom of the chart area.To manually specify the location of legend, set custom as value to this property.
                     * @Default  {Bottom. See Position}
                     */
                    position?: undefined.Position | string,

                    /**
                     * Number of rows to arrange the legend items.
                     * @Default  {null}
                     */
                    rowCount?: number,

                    /**
                     * Shape of the legend items. Default shape for pie and doughnut series is circle and all other series uses rectangle.
                     * @Default  {None. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Options to customize the size of the legend.
                     */
                    size?: LegendSize,

                    /**
                     * Options to customize the legend title.
                     */
                    title?: LegendTitle,

                    /**
                     * Specifies the action taken when the legend width is more than the textWidth.
                     * @Default  {none. See textOverflow}
                     */
                    textOverflow?: undefined.TextOverflow | string,

                    /**
                     * Text width for legend item.
                     * @Default  {34}
                     */
                    textWidth?: number,

                    /**
                     * Controls the visibility of the legend.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface PrimaryXAxisAlternateGridBandEven {

                /**
                 * Fill color for the even grid bands.
                 * @Default  {transparent}
                 */
                fill?: string,

                    /**
                     * Opacity of the even grid band.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface PrimaryXAxisAlternateGridBandOdd {

                /**
                 * Fill color of the odd grid bands
                 * @Default  {transparent}
                 */
                fill?: string,

                    /**
                     * Opacity of odd grid band
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface PrimaryXAxisAlternateGridBand {

                /**
                 * Options for customizing even grid band.
                 */
                even?: PrimaryXAxisAlternateGridBandEven,

                    /**
                     * Options for customizing odd grid band.
                     */
                    odd?: PrimaryXAxisAlternateGridBandOdd
            }
            declare         export interface PrimaryXAxisAxisLine {

                /**
                 * Pattern of dashes and gaps to be applied to the axis line.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
                     * @Default  {null}
                     */
                    offset?: number,

                    /**
                     * Show/hides the axis line.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of axis line.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryXAxisCrosshairLabel {

                /**
                 * Show/hides the crosshair label associated with this axis.
                 * @Default  {false}
                 */
                visible?: boolean
            }
            declare         export interface PrimaryXAxisFont {

                /**
                 * Font family of labels.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of labels.
                     * @Default  {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the label.
                     * @Default  {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the axis labels.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the axis labels.
                     * @Default  {13px}
                     */
                    size?: string
            }
            declare         export interface PrimaryXAxisMajorGridLines {

                /**
                 * Pattern of dashes and gaps used to stroke the major grid lines.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Color of the major grid line.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Opacity of major grid lines.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Show/hides the major grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the major grid lines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryXAxisMajorTickLines {

                /**
                 * Length of the major tick lines.
                 * @Default  {5}
                 */
                size?: number,

                    /**
                     * Show/hides the major tick lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the major tick lines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryXAxisMinorGridLines {

                /**
                 * Patterns of dashes and gaps used to stroke the minor grid lines.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Show/hides the minor grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the minorGridLines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryXAxisMinorTickLines {

                /**
                 * Length of the minor tick lines.
                 * @Default  {5}
                 */
                size?: number,

                    /**
                     * Show/hides the minor tick lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the minor tick line.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryXAxisRange {

                /**
                 * Minimum value of the axis range.
                 * @Default  {null}
                 */
                min?: number,

                    /**
                     * Maximum value of the axis range.
                     * @Default  {null}
                     */
                    max?: number,

                    /**
                     * Interval of the axis range.
                     * @Default  {null}
                     */
                    interval?: number
            }
            declare         export interface PrimaryXAxisStripLineFont {

                /**
                 * Font color of the strip line text.
                 * @Default  {black}
                 */
                color?: string,

                    /**
                     * Font family of the strip line text.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Font style of the strip line text.
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the strip line text.
                     * @Default  {regular}
                     */
                    fontWeight?: string,

                    /**
                     * Opacity of the strip line text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the strip line text.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface PrimaryXAxisStripLine {

                /**
                 * Border color of the strip line.
                 * @Default  {gray}
                 */
                borderColor?: string,

                    /**
                     * Background color of the strip line.
                     * @Default  {gray}
                     */
                    color?: string,

                    /**
                     * End value of the strip line.
                     * @Default  {null}
                     */
                    end?: number,

                    /**
                     * Options for customizing the font of the text.
                     */
                    font?: PrimaryXAxisStripLineFont,

                    /**
                     * Start value of the strip line.
                     * @Default  {null}
                     */
                    start?: number,

                    /**
                     * Indicates whether to render the strip line from the minimum/start value of the axis. This property does not work when start property is set.
                     * @Default  {false}
                     */
                    startFromAxis?: boolean,

                    /**
                     * Specifies text to be displayed inside the strip line.
                     * @Default  {stripLine}
                     */
                    text?: string,

                    /**
                     * Specifies the alignment of the text inside the strip line.
                     * @Default  {middlecenter. See TextAlignment}
                     */
                    textAlignment?: undefined.TextAlignment | string,

                    /**
                     * Show/hides the strip line.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * Width of the strip line.
                     * @Default  {0}
                     */
                    width?: number,

                    /**
                     * Specifies the order where the strip line and the series have to be rendered. When Z-order is â€œbehindâ€, strip line is rendered under the series and when it is â€œoverâ€, it is rendered above the series.
                     * @Default  {over. See ZIndex}
                     */
                    zIndex?: undefined.ZIndex | string
            }
            declare         export interface PrimaryXAxisTitleFont {

                /**
                 * Font family of the title text.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of the title text.
                     * @Default  {ej.datavisualization.Chart.FontStyle.Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the title text.
                     * @Default  {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the axis title text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the axis title.
                     * @Default  {16px}
                     */
                    size?: string
            }
            declare         export interface PrimaryXAxisTitle {

                /**
                 * Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
                 * @Default  {false}
                 */
                enableTrim?: boolean,

                    /**
                     * Options for customizing the title font.
                     */
                    font?: PrimaryXAxisTitleFont,

                    /**
                     * Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
                     * @Default  {34}
                     */
                    maximumTitleWidth?: number,

                    /**
                     * Title for the axis.
                     */
                    text?: string,

                    /**
                     * Controls the visibility of axis title.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface PrimaryXAxis {

                /**
                 * Options for customizing horizontal axis alternate grid band.
                 */
                alternateGridBand?: PrimaryXAxisAlternateGridBand,

                    /**
                     * Specifies where horizontal axis should intersect the vertical axis or vice versa. Value should be provided in axis co-ordinates. If provided value is greater than the maximum value of crossing axis, then axis will be placed at the opposite side.
                     * @Default  {null}
                     */
                    crossesAt?: number,

                    /**
                     * Name of the axis used for crossing. Vertical axis name should be provided for horizontal axis and vice versa. If the provided name does not belongs to a valid axis, then primary X axis or primary Y axis will be used for crossing
                     * @Default  {null}
                     */
                    crossesInAxis?: string,

                    /**
                     * Category axis can also plot points based on index value of data points. Index based plotting can be enabled by setting â€˜isIndexedâ€™ property to true.
                     * @Default  {false}
                     */
                    isIndexed?: boolean,

                    /**
                     * Options for customizing the axis line.
                     */
                    axisLine?: PrimaryXAxisAxisLine,

                    /**
                     * Specifies the index of the column where the axis is associated, when the chart area is divided into multiple plot areas by using columnDefinitions.
                     * @Default  {null}
                     */
                    columnIndex?: number,

                    /**
                     * Specifies the number of columns or plot areas an axis has to span horizontally.
                     * @Default  {null}
                     */
                    columnSpan?: number,

                    /**
                     * Options to customize the crosshair label.
                     */
                    crosshairLabel?: PrimaryXAxisCrosshairLabel,

                    /**
                     * With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
                     * @Default  {null}
                     */
                    desiredIntervals?: number,

                    /**
                     * Specifies the position of labels at the edge of the axis.
                     * @Default  {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
                     */
                    edgeLabelPlacement?: undefined.EdgeLabelPlacement | string,

                    /**
                     * Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
                     * @Default  {false}
                     */
                    enableTrim?: boolean,

                    /**
                     * Options for customizing the font of the axis Labels.
                     */
                    font?: PrimaryXAxisFont,

                    /**
                     * Specifies the type of interval in date time axis.
                     * @Default  {null. See IntervalType}
                     */
                    intervalType?: undefined.IntervalType | string,

                    /**
                     * Specifies whether to inverse the axis.
                     * @Default  {false}
                     */
                    isInversed?: boolean,

                    /**
                     * Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
                     * @Default  {null}
                     */
                    labelFormat?: string,

                    /**
                     * Specifies the action to take when the axis labels are overlapping with each other.
                     * @Default  {ej.datavisualization.Chart.LabelIntersectAction.None. See LabelIntersectAction}
                     */
                    labelIntersectAction?: undefined.LabelIntersectAction | string,

                    /**
                     * Specifies the position of the axis labels.
                     * @Default  {outside. See LabelPosition}
                     */
                    labelPosition?: undefined.LabelPosition | string,

                    /**
                     * Angle in degrees to rotate the axis labels.
                     * @Default  {null}
                     */
                    labelRotation?: number,

                    /**
                     * Logarithmic base value. This is applicable only for logarithmic axis.
                     * @Default  {10}
                     */
                    logBase?: number,

                    /**
                     * Options for customizing major gird lines.
                     */
                    majorGridLines?: PrimaryXAxisMajorGridLines,

                    /**
                     * Options for customizing the major tick lines.
                     */
                    majorTickLines?: PrimaryXAxisMajorTickLines,

                    /**
                     * Maximum number of labels to be displayed in every 100 pixels.
                     * @Default  {3}
                     */
                    maximumLabels?: number,

                    /**
                     * Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
                     * @Default  {34}
                     */
                    maximumLabelWidth?: number,

                    /**
                     * Options for customizing the minor grid lines.
                     */
                    minorGridLines?: PrimaryXAxisMinorGridLines,

                    /**
                     * Options for customizing the minor tick lines.
                     */
                    minorTickLines?: PrimaryXAxisMinorTickLines,

                    /**
                     * Specifies the number of minor ticks per interval.
                     * @Default  {null}
                     */
                    minorTicksPerInterval?: number,

                    /**
                     * Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
                     * @Default  {null}
                     */
                    name?: string,

                    /**
                     * Specifies whether to render the axis at the opposite side of its default position.
                     * @Default  {false}
                     */
                    opposedPosition?: boolean,

                    /**
                     * Specifies the padding for the plot area.
                     * @Default  {10}
                     */
                    plotOffset?: number,

                    /**
                     * Options to customize the range of the axis.
                     */
                    range?: PrimaryXAxisRange,

                    /**
                     * Specifies the padding for the axis range.
                     * @Default  {None. See RangePadding}
                     */
                    rangePadding?: undefined.RangePadding | string,

                    /**
                     * Rounds the number to the given number of decimals.
                     * @Default  {null}
                     */
                    roundingPlaces?: number,

                    /**
                     * Options for customizing the strip lines.
                     * @Default  {[ ]}
                     */
                    stripLine?: Array<PrimaryXAxisStripLine>,

                    /**
                     * Specifies the position of the axis tick lines.
                     * @Default  {outside. See TickLinesPosition}
                     */
                    tickLinesPosition?: undefined.TickLinesPosition | string,

                    /**
                     * Options for customizing the axis title.
                     */
                    title?: PrimaryXAxisTitle,

                    /**
                     * Specifies the type of data the axis is handling.
                     * @Default  {null. See ValueType}
                     */
                    valueType?: undefined.ValueType | string,

                    /**
                     * Show/hides the axis.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
                     * @Default  {1}
                     */
                    zoomFactor?: number,

                    /**
                     * Position of the zoomed axis. Value ranges from 0 to 1.
                     * @Default  {0}
                     */
                    zoomPosition?: number
            }
            declare         export interface PrimaryYAxisAlternateGridBandEven {

                /**
                 * Fill color for the even grid bands.
                 * @Default  {transparent}
                 */
                fill?: string,

                    /**
                     * Opacity of the even grid band.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface PrimaryYAxisAlternateGridBandOdd {

                /**
                 * Fill color of the odd grid bands.
                 * @Default  {transparent}
                 */
                fill?: string,

                    /**
                     * Opacity of odd grid band.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface PrimaryYAxisAlternateGridBand {

                /**
                 * Options for customizing even grid band.
                 */
                even?: PrimaryYAxisAlternateGridBandEven,

                    /**
                     * Options for customizing odd grid band.
                     */
                    odd?: PrimaryYAxisAlternateGridBandOdd
            }
            declare         export interface PrimaryYAxisAxisLine {

                /**
                 * Pattern of dashes and gaps to be applied to the axis line.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Padding for axis line. Normally, it is used along with plotOffset to pad the plot area.
                     * @Default  {null}
                     */
                    offset?: number,

                    /**
                     * Show/hides the axis line.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of axis line.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryYAxisCrosshairLabel {

                /**
                 * Show/hides the crosshair label associated with this axis.
                 * @Default  {false}
                 */
                visible?: boolean
            }
            declare         export interface PrimaryYAxisFont {

                /**
                 * Font family of labels.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of labels.
                     * @Default  {ej.datavisualization.Chart.FontStyle.Normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the label.
                     * @Default  {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the axis labels.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the axis labels.
                     * @Default  {13px}
                     */
                    size?: string
            }
            declare         export interface PrimaryYAxisMajorGridLines {

                /**
                 * Pattern of dashes and gaps used to stroke the major grid lines.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Color of the major grid lines.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Opacity of major grid lines.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Show/hides the major grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the major grid lines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryYAxisMajorTickLines {

                /**
                 * Length of the major tick lines.
                 * @Default  {5}
                 */
                size?: number,

                    /**
                     * Show/hides the major tick lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the major tick lines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryYAxisMinorGridLines {

                /**
                 * Patterns of dashes and gaps used to stroke the minor grid lines.
                 * @Default  {null}
                 */
                dashArray?: string,

                    /**
                     * Show/hides the minor grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the minorGridLines.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryYAxisMinorTickLines {

                /**
                 * Length of the minor tick lines.
                 * @Default  {5}
                 */
                size?: number,

                    /**
                     * Show/hides the minor tick lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Width of the minor tick line
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface PrimaryYAxisRange {

                /**
                 * Minimum value of the axis range.
                 * @Default  {null}
                 */
                min?: number,

                    /**
                     * Maximum value of the axis range.
                     * @Default  {null}
                     */
                    max?: number,

                    /**
                     * Interval for the range.
                     * @Default  {null}
                     */
                    interval?: number
            }
            declare         export interface PrimaryYAxisStripLineFont {

                /**
                 * Font color of the strip line text.
                 * @Default  {black}
                 */
                color?: string,

                    /**
                     * Font family of the strip line text.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Font style of the strip line text.
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the strip line text.
                     * @Default  {regular}
                     */
                    fontWeight?: string,

                    /**
                     * Opacity of the strip line text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the strip line text.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface PrimaryYAxisStripLine {

                /**
                 * Border color of the strip line.
                 * @Default  {gray}
                 */
                borderColor?: string,

                    /**
                     * Background color of the strip line.
                     * @Default  {gray}
                     */
                    color?: string,

                    /**
                     * End value of the strip line.
                     * @Default  {null}
                     */
                    end?: number,

                    /**
                     * Options for customizing the font of the text.
                     */
                    font?: PrimaryYAxisStripLineFont,

                    /**
                     * Start value of the strip line.
                     * @Default  {null}
                     */
                    start?: number,

                    /**
                     * Indicates whether to render the strip line from the minimum/start value of the axis. This property wonâ€™t work when start property is set.
                     * @Default  {false}
                     */
                    startFromAxis?: boolean,

                    /**
                     * Specifies text to be displayed inside the strip line.
                     * @Default  {stripLine}
                     */
                    text?: string,

                    /**
                     * Specifies the alignment of the text inside the strip line.
                     * @Default  {middlecenter. See TextAlignment}
                     */
                    textAlignment?: undefined.TextAlignment | string,

                    /**
                     * Show/hides the strip line.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * Width of the strip line.
                     * @Default  {0}
                     */
                    width?: number,

                    /**
                     * Specifies the order in which strip line and the series have to be rendered. When Z-order is â€œbehindâ€, strip line is rendered below the series and when it is â€œoverâ€, it is rendered above the series.
                     * @Default  {over. See ZIndex}
                     */
                    zIndex?: undefined.ZIndex | string
            }
            declare         export interface PrimaryYAxisTitleFont {

                /**
                 * Font family of the title text.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of the title text.
                     * @Default  {ej.datavisualization.Chart.FontStyle.Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the title text.
                     * @Default  {ej.datavisualization.Chart.FontWeight.Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the axis title text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the axis title.
                     * @Default  {16px}
                     */
                    size?: string
            }
            declare         export interface PrimaryYAxisTitle {

                /**
                 * Specifies whether to trim the axis title when it exceeds the chart area or the maximum width of the title.
                 * @Default  {ej.datavisualization.Chart.enableTrim}
                 */
                enableTrim?: boolean,

                    /**
                     * Options for customizing the title font.
                     */
                    font?: PrimaryYAxisTitleFont,

                    /**
                     * Maximum width of the title, when the title exceeds this width, the title gets trimmed, when enableTrim is true.
                     * @Default  {ej.datavisualization.Chart.maximumTitleWidth.null}
                     */
                    maximumTitleWidth?: number,

                    /**
                     * Title for the axis.
                     */
                    text?: string,

                    /**
                     * Controls the visibility of axis title.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface PrimaryYAxis {

                /**
                 * Options for customizing vertical axis alternate grid band.
                 */
                alternateGridBand?: PrimaryYAxisAlternateGridBand,

                    /**
                     * Options for customizing the axis line.
                     */
                    axisLine?: PrimaryYAxisAxisLine,

                    /**
                     * Specifies where horizontal axis should intersect the vertical axis or vice versa. Value should be provided in axis co-ordinates. If provided value is greater than the maximum value of crossing axis, then axis will be placed at the opposite side.
                     * @Default  {null}
                     */
                    crossesAt?: number,

                    /**
                     * Name of the axis used for crossing. Vertical axis name should be provided for horizontal axis and vice versa. If the provided name does not belongs to a valid axis, then primary X axis or primary Y axis will be used for crossing
                     * @Default  {null}
                     */
                    crossesInAxis?: string,

                    /**
                     * Options to customize the crosshair label.
                     */
                    crosshairLabel?: PrimaryYAxisCrosshairLabel,

                    /**
                     * With this setting, you can request axis to calculate intervals approximately equal to your desired interval.
                     * @Default  {null}
                     */
                    desiredIntervals?: number,

                    /**
                     * Specifies the position of labels at the edge of the axis.
                     * @Default  {ej.datavisualization.Chart.EdgeLabelPlacement.None. See EdgeLabelPlacement}
                     */
                    edgeLabelPlacement?: undefined.EdgeLabelPlacement | string,

                    /**
                     * Specifies whether to trim the axis label when the width of the label exceeds the maximumLabelWidth.
                     * @Default  {false}
                     */
                    enableTrim?: boolean,

                    /**
                     * Options for customizing the font of the axis Labels.
                     */
                    font?: PrimaryYAxisFont,

                    /**
                     * Specifies the type of interval in date time axis.
                     * @Default  {null. See IntervalType}
                     */
                    intervalType?: undefined.IntervalType | string,

                    /**
                     * Specifies whether to inverse the axis.
                     * @Default  {false}
                     */
                    isInversed?: boolean,

                    /**
                     * Custom formatting for axis label and supports all standard formatting type of numerical and date time values.
                     * @Default  {null}
                     */
                    labelFormat?: string,

                    /**
                     * Specifies the action to take when the axis labels are overlapping with each other.
                     * @Default  {ej.datavisualization.Chart.LabelIntersectAction.None}
                     */
                    labelIntersectAction?: undefined.LabelIntersectAction | string,

                    /**
                     * Specifies the position of the axis labels.
                     * @Default  {outside. See LabelPosition}
                     */
                    labelPosition?: undefined.LabelPosition | string,

                    /**
                     * Logarithmic base value. This is applicable only for logarithmic axis.
                     * @Default  {10}
                     */
                    logBase?: number,

                    /**
                     * Options for customizing major gird lines.
                     */
                    majorGridLines?: PrimaryYAxisMajorGridLines,

                    /**
                     * Options for customizing the major tick lines.
                     */
                    majorTickLines?: PrimaryYAxisMajorTickLines,

                    /**
                     * Maximum number of labels to be displayed in every 100 pixels.
                     * @Default  {3}
                     */
                    maximumLabels?: number,

                    /**
                     * Maximum width of the axis label. When the label exceeds the width, the label gets trimmed when the enableTrim is set to true.
                     * @Default  {ej.datavisualization.Chart.maximumLabelWidth type {int}}
                     */
                    maximumLabelWidth?: number,

                    /**
                     * Options for customizing the minor grid lines.
                     */
                    minorGridLines?: PrimaryYAxisMinorGridLines,

                    /**
                     * Options for customizing the minor tick lines.
                     */
                    minorTickLines?: PrimaryYAxisMinorTickLines,

                    /**
                     * Specifies the number of minor ticks per interval.
                     * @Default  {null}
                     */
                    minorTicksPerInterval?: number,

                    /**
                     * Unique name of the axis. To associate an axis with the series, you have to set this name to the xAxisName/yAxisName property of the series.
                     * @Default  {null}
                     */
                    name?: string,

                    /**
                     * Specifies whether to render the axis at the opposite side of its default position.
                     * @Default  {false}
                     */
                    opposedPosition?: boolean,

                    /**
                     * Specifies the padding for the plot area.
                     * @Default  {10}
                     */
                    plotOffset?: number,

                    /**
                     * Options to customize the range of the axis.
                     */
                    range?: PrimaryYAxisRange,

                    /**
                     * Specifies the padding for the axis range.
                     * @Default  {ej.datavisualization.Chart.RangePadding.None. See RangePadding}
                     */
                    rangePadding?: undefined.RangePadding | string,

                    /**
                     * Rounds the number to the given number of decimals.
                     * @Default  {null}
                     */
                    roundingPlaces?: number,

                    /**
                     * Specifies the index of the row to which the axis is associated, when the chart area is divided into multiple plot areas by using rowDefinitions.
                     * @Default  {null}
                     */
                    rowIndex?: number,

                    /**
                     * Specifies the number of row or plot areas an axis has to span vertically.
                     * @Default  {null}
                     */
                    rowSpan?: number,

                    /**
                     * Options for customizing the strip lines.
                     * @Default  {[ ]}
                     */
                    stripLine?: Array<PrimaryYAxisStripLine>,

                    /**
                     * Specifies the position of the axis tick lines.
                     * @Default  {outside. See TickLinesPosition}
                     */
                    tickLinesPosition?: undefined.TickLinesPosition | string,

                    /**
                     * Options for customizing the axis title.
                     */
                    title?: PrimaryYAxisTitle,

                    /**
                     * Specifies the type of data the axis is handling.
                     * @Default  {null. See ValueType}
                     */
                    valueType?: undefined.ValueType | string,

                    /**
                     * Show/hides the axis.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Values ranges from 0 to 1.
                     * @Default  {1}
                     */
                    zoomFactor?: number,

                    /**
                     * Position of the zoomed axis. Value ranges from 0 to 1
                     * @Default  {0}
                     */
                    zoomPosition?: number
            }
            declare         export interface RowDefinition {

                /**
                 * Specifies the unit to measure the height of the row in plotting area.
                 * @Default  {'pixel'. See Unit}
                 */
                unit?: undefined.Unit | string,

                    /**
                     * Height of the row in plotting area. Height is measured in either pixel or percentage based on the value of unit property.
                     * @Default  {50}
                     */
                    rowHeight?: number,

                    /**
                     * Color of the line that indicates the starting point of the row in plotting area.
                     * @Default  {transparent}
                     */
                    lineColor?: string,

                    /**
                     * Width of the line that indicates the starting point of the row in plot area.
                     * @Default  {1}
                     */
                    lineWidth?: number
            }
            declare         export interface SeriesBorder {

                /**
                 * Border color of the series.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Border width of the series.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * DashArray for border of the series.
                     * @Default  {null}
                     */
                    dashArray?: string
            }
            declare         export interface SeriesFont {

                /**
                 * Font color of the series text.
                 * @Default  {#707070}
                 */
                color?: string,

                    /**
                     * Font Family of the series.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Font Style of the series.
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the series.
                     * @Default  {Regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of series text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Size of the series text.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface SeriesMarkerBorder {

                /**
                 * Border color of the marker shape.
                 * @Default  {white}
                 */
                color?: string,

                    /**
                     * Border width of the marker shape.
                     * @Default  {3}
                     */
                    width?: number
            }
            declare         export interface SeriesMarkerDataLabelBorder {

                /**
                 * Border color of the data label.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of the data label.
                     * @Default  {0.1}
                     */
                    width?: number
            }
            declare         export interface SeriesMarkerDataLabelConnectorLine {

                /**
                 * Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
                 * @Default  {line. See ConnectorLineType}
                 */
                type?: undefined.Type | string,

                    /**
                     * Width of the connector.
                     * @Default  {0.5}
                     */
                    width?: number,

                    /**
                     * Color of the connector.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Height of the connector.
                     * @Default  {null}
                     */
                    height?: number
            }
            declare         export interface SeriesMarkerDataLabelFont {

                /**
                 * Font family of the data label.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of the data label.
                     * @Default  {normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the data label.
                     * @Default  {regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the data label.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface SeriesMarkerDataLabelMargin {

                /**
                 * Bottom margin of the text.
                 * @Default  {5}
                 */
                bottom?: number,

                    /**
                     * Left margin of the text.
                     * @Default  {5}
                     */
                    left?: number,

                    /**
                     * Right margin of the text.
                     * @Default  {5}
                     */
                    right?: number,

                    /**
                     * Top margin of the text.
                     * @Default  {5}
                     */
                    top?: number
            }
            declare         export interface SeriesMarkerDataLabel {

                /**
                 * Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
                 * @Default  {null}
                 */
                angle?: number,

                    /**
                     * Options for customizing the border of the data label.
                     */
                    border?: SeriesMarkerDataLabelBorder,

                    /**
                     * Options for displaying and customizing the line that connects point and data label.
                     */
                    connectorLine?: SeriesMarkerDataLabelConnectorLine,

                    /**
                     * Background color of the data label.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the data label font.
                     */
                    font?: SeriesMarkerDataLabelFont,

                    /**
                     * Horizontal alignment of the data label.
                     * @Default  {center}
                     */
                    horizontalTextAlignment?: undefined.HorizontalTextAlignment | string,

                    /**
                     * Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
                     */
                    margin?: SeriesMarkerDataLabelMargin,

                    /**
                     * Opacity of the data label.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Background shape of the data label.
                     * @Default  {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Name of a field in data source where datalabel text is displayed.
                     */
                    textMappingName?: string,

                    /**
                     * Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
                     * @Default  {top. See TextPosition}
                     */
                    textPosition?: undefined.TextPosition | string,

                    /**
                     * Vertical alignment of the data label.
                     * @Default  {'center'}
                     */
                    verticalTextAlignment?: undefined.VerticalTextAlignment | string,

                    /**
                     * Controls the visibility of the data labels.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
                     */
                    template?: string,

                    /**
                     * Moves the label vertically by some offset.
                     * @Default  {0}
                     */
                    offset?: number
            }
            declare         export interface SeriesMarkerSize {

                /**
                 * Height of the marker.
                 * @Default  {6}
                 */
                height?: number,

                    /**
                     * Width of the marker.
                     * @Default  {6}
                     */
                    width?: number
            }
            declare         export interface SeriesMarker {

                /**
                 * Options for customizing the border of the marker shape.
                 */
                border?: SeriesMarkerBorder,

                    /**
                     * Options for displaying and customizing data labels.
                     */
                    dataLabel?: SeriesMarkerDataLabel,

                    /**
                     * Color of the marker shape.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
                     */
                    imageUrl?: string,

                    /**
                     * Opacity of the marker.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the shape of the marker.
                     * @Default  {circle. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Options for customizing the size of the marker shape.
                     */
                    size?: SeriesMarkerSize,

                    /**
                     * Controls the visibility of the marker shape.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface SeriesEmptyPointSettingsStyleBorder {

                /**
                 * Border color of the empty point.
                 */
                color?: string,

                    /**
                     * Border width of the empty point.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface SeriesEmptyPointSettingsStyle {

                /**
                 * Color of the empty point.
                 */
                color?: string,

                    /**
                     * Options for customizing border of the empty point in the series.
                     */
                    border?: SeriesEmptyPointSettingsStyleBorder
            }
            declare         export interface SeriesEmptyPointSettings {

                /**
                 * Controls the visibility of the empty point.
                 * @Default  {true}
                 */
                visible?: boolean,

                    /**
                     * Specifies the mode of empty point.
                     * @Default  {gap}
                     */
                    displayMode?: undefined.EmptyPointMode | string,

                    /**
                     * Options for customizing the color and border of the empty point in the series.
                     */
                    style?: SeriesEmptyPointSettingsStyle
            }
            declare         export interface SeriesConnectorLine {

                /**
                 * Width of the connector line.
                 * @Default  {1}
                 */
                width?: number,

                    /**
                     * Color of the connector line.
                     * @Default  {#565656}
                     */
                    color?: string,

                    /**
                     * DashArray of the connector line.
                     * @Default  {null}
                     */
                    dashArray?: string,

                    /**
                     * Opacity of the connector line.
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface SeriesErrorBarCap {

                /**
                 * Show/Hides the error bar cap.
                 * @Default  {true}
                 */
                visible?: boolean,

                    /**
                     * Width of the error bar cap.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Length of the error bar cap.
                     * @Default  {1}
                     */
                    length?: number,

                    /**
                     * Color of the error bar cap.
                     * @Default  {#000000}
                     */
                    fill?: string
            }
            declare         export interface SeriesErrorBar {

                /**
                 * Show/hides the error bar
                 * @Default  {visible}
                 */
                visibility?: boolean,

                    /**
                     * Specifies the type of error bar.
                     * @Default  {FixedValue}
                     */
                    type?: undefined.ErrorBarType | string,

                    /**
                     * Specifies the mode of error bar.
                     * @Default  {vertical}
                     */
                    mode?: undefined.ErrorBarMode | string,

                    /**
                     * Specifies the direction of error bar.
                     * @Default  {both}
                     */
                    direction?: undefined.ErrorBarDirection | string,

                    /**
                     * Value of vertical error bar.
                     * @Default  {3}
                     */
                    verticalErrorValue?: number,

                    /**
                     * Value of horizontal  error bar.
                     * @Default  {1}
                     */
                    horizontalErrorValue?: number,

                    /**
                     * Value of positive horizontal error bar.
                     * @Default  {1}
                     */
                    horizontalPositiveErrorValue?: number,

                    /**
                     * Value of negative horizontal error bar.
                     * @Default  {1}
                     */
                    horizontalNegativeErrorValue?: number,

                    /**
                     * Value of positive vertical error bar.
                     * @Default  {5}
                     */
                    verticalPositiveErrorValue?: number,

                    /**
                     * Value of negative vertical error bar.
                     * @Default  {5}
                     */
                    verticalNegativeErrorValue?: number,

                    /**
                     * Fill color of the error bar.
                     * @Default  {#000000}
                     */
                    fill?: string,

                    /**
                     * Width of the error bar.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Options for customizing the error bar cap.
                     */
                    cap?: SeriesErrorBarCap
            }
            declare         export interface SeriesPointsBorder {

                /**
                 * Border color of the point.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of the point.
                     * @Default  {null}
                     */
                    width?: number
            }
            declare         export interface SeriesPointsMarkerBorder {

                /**
                 * Border color of the marker shape.
                 * @Default  {white}
                 */
                color?: string,

                    /**
                     * Border width of the marker shape.
                     * @Default  {3}
                     */
                    width?: number
            }
            declare         export interface SeriesPointsMarkerDataLabelBorder {

                /**
                 * Border color of the data label.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border width of the data label.
                     * @Default  {0.1}
                     */
                    width?: number
            }
            declare         export interface SeriesPointsMarkerDataLabelConnectorLine {

                /**
                 * Specifies when the connector has to be drawn as Bezier curve or straight line. This is applicable only for Pie and Doughnut chart types.
                 * @Default  {line. See ConnectorLineType}
                 */
                type?: undefined.ConnectorLineType | string,

                    /**
                     * Width of the connector.
                     * @Default  {0.5}
                     */
                    width?: number
            }
            declare         export interface SeriesPointsMarkerDataLabelFont {

                /**
                 * Font family of the data label.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style of the data label.
                     * @Default  {normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight of the data label.
                     * @Default  {regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the text.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size of the data label.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface SeriesPointsMarkerDataLabelMargin {

                /**
                 * Bottom margin of the text.
                 * @Default  {5}
                 */
                bottom?: number,

                    /**
                     * Left margin of the text.
                     * @Default  {5}
                     */
                    left?: number,

                    /**
                     * Right margin of the text.
                     * @Default  {5}
                     */
                    right?: number,

                    /**
                     * Top margin of the text.
                     * @Default  {5}
                     */
                    top?: number
            }
            declare         export interface SeriesPointsMarkerDataLabel {

                /**
                 * Angle of the data label in degrees. Only the text gets rotated, whereas the background and border does not rotate.
                 * @Default  {null}
                 */
                angle?: number,

                    /**
                     * Options for customizing the border of the data label.
                     */
                    border?: SeriesPointsMarkerDataLabelBorder,

                    /**
                     * Options for displaying and customizing the line that connects point and data label.
                     */
                    connectorLine?: SeriesPointsMarkerDataLabelConnectorLine,

                    /**
                     * Background color of the data label.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the data label font.
                     */
                    font?: SeriesPointsMarkerDataLabelFont,

                    /**
                     * Horizontal alignment of the data label.
                     * @Default  {center}
                     */
                    horizontalTextAlignment?: undefined.HorizontalTextAlignment | string,

                    /**
                     * Margin of the text to its background shape. The size of the background shape increases based on the margin applied to its text.
                     */
                    margin?: SeriesPointsMarkerDataLabelMargin,

                    /**
                     * Opacity of the data label.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Background shape of the data label.
                     * @Default  {No shape is rendered by default, so its value is â€˜noneâ€™. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Specifies the position of the data label. This property can be used only for the series such as column, bar, stacked column, stacked bar, 100% stacked column, 100% stacked bar, candle and OHLC.
                     * @Default  {top. See TextPosition}
                     */
                    textPosition?: undefined.TextPosition | string,

                    /**
                     * Vertical alignment of the data label.
                     * @Default  {'center'}
                     */
                    verticalTextAlignment?: undefined.VerticalTextAlignment | string,

                    /**
                     * Controls the visibility of the data labels.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * Custom template to format the data label content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
                     */
                    template?: string,

                    /**
                     * Moves the label vertically by specified offset.
                     * @Default  {0}
                     */
                    offset?: number
            }
            declare         export interface SeriesPointsMarkerSize {

                /**
                 * Height of the marker.
                 * @Default  {6}
                 */
                height?: number,

                    /**
                     * Width of the marker.
                     * @Default  {6}
                     */
                    width?: number
            }
            declare         export interface SeriesPointsMarker {

                /**
                 * Options for customizing the border of the marker shape.
                 */
                border?: SeriesPointsMarkerBorder,

                    /**
                     * Options for displaying and customizing data label.
                     */
                    dataLabel?: SeriesPointsMarkerDataLabel,

                    /**
                     * Color of the marker shape.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * The URL for the Image that is to be displayed as marker. In order to display image as marker, set series.marker.shape as â€˜imageâ€™.
                     */
                    imageUrl?: string,

                    /**
                     * Opacity of the marker.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the shape of the marker.
                     * @Default  {circle. See Shape}
                     */
                    shape?: undefined.Shape | string,

                    /**
                     * Options for customizing the size of the marker shape.
                     */
                    size?: SeriesPointsMarkerSize,

                    /**
                     * Controls the visibility of the marker shape.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface SeriesPoint {

                /**
                 * Options for customizing the border of a point. This is applicable only for column type series and accumulation type series.
                 */
                border?: SeriesPointsBorder,

                    /**
                     * Enables or disables the visibility of legend item.
                     * @Default  {visible}
                     */
                    visibleOnLegend?: string,

                    /**
                     * To show/hide the intermediate summary from the last intermediate point.
                     * @Default  {false}
                     */
                    showIntermediateSum?: boolean,

                    /**
                     * To show/hide the total summary of the waterfall series.
                     * @Default  {false}
                     */
                    showTotalSum?: boolean,

                    /**
                     * Close value of the point. Close value is applicable only for financial type series.
                     * @Default  {null}
                     */
                    close?: number,

                    /**
                     * Size of a bubble in the bubble series. This is applicable only for the bubble series.
                     * @Default  {null}
                     */
                    size?: number,

                    /**
                     * Background color of the point. This is applicable only for column type series and accumulation type series.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * High value of the point. High value is applicable only for financial type series, range area series and range column series.
                     * @Default  {null}
                     */
                    high?: number,

                    /**
                     * Low value of the point. Low value is applicable only for financial type series, range area series and range column series.
                     * @Default  {null}
                     */
                    low?: number,

                    /**
                     * Options for displaying and customizing marker for a data point. Marker contains shapes and/or data labels.
                     */
                    marker?: SeriesPointsMarker,

                    /**
                     * Open value of the point. This is applicable only for financial type series.
                     * @Default  {null}
                     */
                    open?: number,

                    /**
                     * Datalabel text for the point.
                     * @Default  {null}
                     */
                    text?: string,

                    /**
                     * X value of the point.
                     * @Default  {null}
                     */
                    x?: number,

                    /**
                     * Y value of the point.
                     * @Default  {null}
                     */
                    y?: number
            }
            declare         export interface SeriesTooltipBorder {

                /**
                 * Border Color of the tooltip.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Border Width of the tooltip.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface SeriesTooltip {

                /**
                 * Options for customizing the border of the tooltip.
                 */
                border?: SeriesTooltipBorder,

                    /**
                     * Customize the corner radius of the tooltip rectangle.
                     * @Default  {0}
                     */
                    rx?: number,

                    /**
                     * Customize the corner radius of the tooltip rectangle.
                     * @Default  {0}
                     */
                    ry?: number,

                    /**
                     * Specifies the duration, the tooltip has to be displayed.
                     * @Default  {500ms}
                     */
                    duration?: string,

                    /**
                     * Enables/disables the animation of the tooltip when moving from one point to another.
                     * @Default  {true}
                     */
                    enableAnimation?: boolean,

                    /**
                     * Background color of the tooltip.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Format of the tooltip content.
                     * @Default  {#point.x# : #point.y#}
                     */
                    format?: string,

                    /**
                     * Opacity of the tooltip.
                     * @Default  {0.95}
                     */
                    opacity?: number,

                    /**
                     * Custom template to format the tooltip content. Use â€œpoint.xâ€ and â€œpoint.yâ€ as a placeholder text to display the corresponding data pointâ€™s x and y value.
                     * @Default  {null}
                     */
                    template?: string,

                    /**
                     * Controls the visibility of the tooltip.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface SeriesTrendline {

                /**
                 * Show/hides the trendline.
                 */
                visibility?: boolean,

                    /**
                     * Specifies the type of trendline for the series.
                     * @Default  {linear. See TrendlinesType}
                     */
                    type?: string,

                    /**
                     * Name for the trendlines that is to be displayed in legend text.
                     * @Default  {Trendline}
                     */
                    name?: string,

                    /**
                     * Fill color of the trendlines.
                     * @Default  {#0000FF}
                     */
                    fill?: string,

                    /**
                     * Width of the trendlines.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Opacity of the trendline.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Pattern of dashes and gaps used to stroke the trendline.
                     */
                    dashArray?: string,

                    /**
                     * Future trends of the current series.
                     * @Default  {0}
                     */
                    forwardForecast?: number,

                    /**
                     * Past trends of the current series.
                     * @Default  {0}
                     */
                    backwardForecast?: number,

                    /**
                     * Specifies the order of polynomial trendlines.
                     * @Default  {0}
                     */
                    polynomialOrder?: number,

                    /**
                     * Specifies the moving average starting period  value.
                     * @Default  {2}
                     */
                    period?: number
            }
            declare         export interface SeriesHighlightSettingsBorder {

                /**
                 * Border color of the series/point on highlight.
                 */
                color?: string,

                    /**
                     * Border width of the series/point on highlight.
                     * @Default  {2}
                     */
                    width?: string
            }
            declare         export interface SeriesHighlightSettings {

                /**
                 * Enables/disables the ability to highlight series or data point interactively.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * Specifies whether series or data point has to be highlighted.
                     * @Default  {series. See Mode}
                     */
                    mode?: undefined.Mode | string,

                    /**
                     * Color of the series/point on highlight.
                     */
                    color?: string,

                    /**
                     * Opacity of the series/point on highlight.
                     * @Default  {0.6}
                     */
                    opacity?: number,

                    /**
                     * Options for customizing the border of series on highlight.
                     */
                    border?: SeriesHighlightSettingsBorder,

                    /**
                     * Specifies the pattern for the series/point on highlight.
                     * @Default  {none. See Pattern}
                     */
                    pattern?: string,

                    /**
                     * Custom pattern for the series on highlight.
                     */
                    customPattern?: string
            }
            declare         export interface SeriesSelectionSettingsBorder {

                /**
                 * Border color of the series/point on selection.
                 */
                color?: string,

                    /**
                     * Border width of the series/point on selection.
                     * @Default  {2}
                     */
                    width?: string
            }
            declare         export interface SeriesSelectionSettings {

                /**
                 * Enables/disables the ability to select a series/data point interactively.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * Specifies whether series or data point has to be selected.
                     * @Default  {series. See Mode}
                     */
                    mode?: undefined.Mode | string,

                    /**
                     * Specifies the type of selection.
                     * @Default  {single}
                     */
                    type?: undefined.SelectionType | string,

                    /**
                     * Specifies the drawn rectangle type.
                     * @Default  {xy}
                     */
                    rangeType?: undefined.RangeType | string,

                    /**
                     * Color of the series/point on selection.
                     */
                    color?: string,

                    /**
                     * Opacity of the series/point on selection.
                     * @Default  {0.6}
                     */
                    opacity?: number,

                    /**
                     * Options for customizing the border of series on selection.
                     */
                    border?: SeriesSelectionSettingsBorder,

                    /**
                     * Specifies the pattern for the series/point on selection.
                     * @Default  {none. See Pattern}
                     */
                    pattern?: string,

                    /**
                     * Custom pattern for the series on selection.
                     */
                    customPattern?: string
            }
            declare         export interface Series {

                /**
                 * Color of the point, where the close is up in financial chart.
                 * @Default  {null}
                 */
                bearFillColor?: string,

                    /**
                     * Options for customizing the border of the series.
                     */
                    border?: SeriesBorder,

                    /**
                     * Color of the point, where the close is down in financial chart.
                     * @Default  {null}
                     */
                    bullFillColor?: string,

                    /**
                     * Relative width of the columns in column type series. Value ranges from 0 to 1. Width also depends upon columnSpacing property.
                     * @Default  {0.7}
                     */
                    columnWidth?: number,

                    /**
                     * Spacing between columns of different series. Value ranges from 0 to 1
                     * @Default  {0}
                     */
                    columnSpacing?: number,

                    /**
                     * Pattern of dashes and gaps used to stroke the line type series.
                     */
                    dashArray?: string,

                    /**
                     * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
                     * @Default  {null}
                     */
                    dataSource?: any,

                    /**
                     * Controls the size of the hole in doughnut series. Value ranges from 0 to 1.
                     * @Default  {0.4}
                     */
                    doughnutCoefficient?: number,

                    /**
                     * Controls the size of the doughnut series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    doughnutSize?: number,

                    /**
                     * Type of series to be drawn in radar or polar series.
                     * @Default  {line. See DrawType}
                     */
                    drawType?: boolean,

                    /**
                     * Enable/disable the animation of series.
                     * @Default  {false}
                     */
                    enableAnimation?: boolean,

                    /**
                     * To avoid overlapping of data labels smartly.
                     * @Default  {null}
                     */
                    enableSmartLabels?: number,

                    /**
                     * End angle of pie/doughnut series. For a complete circle, it has to be 360, by default.
                     * @Default  {null}
                     */
                    endAngle?: number,

                    /**
                     * Explodes the pie/doughnut slices on mouse move.
                     * @Default  {false}
                     */
                    explode?: boolean,

                    /**
                     * Explodes all the slice of pie/doughnut on render.
                     * @Default  {null}
                     */
                    explodeAll?: boolean,

                    /**
                     * Index of the point to be exploded from pie/doughnut/pyramid/funnel.
                     * @Default  {null}
                     */
                    explodeIndex?: number,

                    /**
                     * Specifies the distance of the slice from the center, when it is exploded.
                     * @Default  {25}
                     */
                    explodeOffset?: number,

                    /**
                     * Fill color of the series.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the series font.
                     */
                    font?: SeriesFont,

                    /**
                     * Specifies the height of the funnel in funnel series. Values can be in both pixel and percentage.
                     * @Default  {32.7%}
                     */
                    funnelHeight?: string,

                    /**
                     * Specifies the width of the funnel in funnel series. Values can be in both pixel and percentage.
                     * @Default  {11.6%}
                     */
                    funnelWidth?: string,

                    /**
                     * Gap between the slices of pyramid/funnel series.
                     * @Default  {0}
                     */
                    gapRatio?: number,

                    /**
                     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
                     * @Default  {true}
                     */
                    isClosed?: boolean,

                    /**
                     * Specifies whether to stack the column series in polar/radar charts.
                     * @Default  {true}
                     */
                    isStacking?: boolean,

                    /**
                     * Renders the chart vertically. This is applicable only for Cartesian type series.
                     * @Default  {false}
                     */
                    isTransposed?: boolean,

                    /**
                     * Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
                     * @Default  {inside. See LabelPosition}
                     */
                    labelPosition?: undefined.LabelPosition | string,

                    /**
                     * Specifies the line cap of the series.
                     * @Default  {Butt. See LineCap}
                     */
                    lineCap?: undefined.LineCap | string,

                    /**
                     * Specifies the type of shape to be used where two lines meet.
                     * @Default  {Round. See LineJoin}
                     */
                    lineJoin?: undefined.LineJoin | string,

                    /**
                     * Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
                     */
                    marker?: SeriesMarker,

                    /**
                     * Name of the series, that is to be displayed in the legend.
                     * @Default  {Add a comment to this line}
                     */
                    name?: string,

                    /**
                     * Opacity of the series.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Name of a field in data source where fill color for all the data points is generated.
                     */
                    palette?: string,

                    /**
                     * Controls the size of pie series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    pieCoefficient?: number,

                    /**
                     * Options for customizing the empty point in the series.
                     */
                    emptyPointSettings?: SeriesEmptyPointSettings,

                    /**
                     * Fill color for the positive column of the waterfall.
                     * @Default  {null}
                     */
                    positiveFill?: string,

                    /**
                     * Options for customizing the waterfall connector line.
                     */
                    connectorLine?: SeriesConnectorLine,

                    /**
                     * Options to customize the error bar in series.
                     */
                    errorBar?: SeriesErrorBar,

                    /**
                     * Option to add data points; each point should have x and y property. Also, optionally, you can customize the points color, border, marker by using fill, border and marker options.
                     */
                    points?: Array<SeriesPoint>,

                    /**
                     * Specifies the mode of the pyramid series.
                     * @Default  {linear}
                     */
                    pyramidMode?: undefined.PyramidMode | string,

                    /**
                     * Specifies ej.Query to select data from dataSource. This property is applicable only when the dataSource is ej.DataManager.
                     * @Default  {null}
                     */
                    query?: any,

                    /**
                     * Start angle from where the pie/doughnut series renders. It starts from 0, by default.
                     * @Default  {null}
                     */
                    startAngle?: number,

                    /**
                     * Options for customizing the tooltip of chart.
                     */
                    tooltip?: SeriesTooltip,

                    /**
                     * Specifies the type of the series to render in chart.
                     * @Default  {column. see Type}
                     */
                    type?: undefined.Type | string,

                    /**
                     * Controls the visibility of the series.
                     * @Default  {visible}
                     */
                    visibility?: string,

                    /**
                     * Enables or disables the visibility of legend item.
                     * @Default  {visible}
                     */
                    visibleOnLegend?: string,

                    /**
                     * Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    xAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains x value for the series.
                     * @Default  {null}
                     */
                    xName?: string,

                    /**
                     * Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    yAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains y value for the series.
                     * @Default  {null}
                     */
                    yName?: string,

                    /**
                     * Name of the property in the datasource that contains high value for the series.
                     * @Default  {null}
                     */
                    high?: string,

                    /**
                     * Name of the property in the datasource that contains low value for the series.
                     * @Default  {null}
                     */
                    low?: string,

                    /**
                     * Name of the property in the datasource that contains open value for the series.
                     * @Default  {null}
                     */
                    open?: string,

                    /**
                     * Name of the property in the datasource that contains close value for the series.
                     * @Default  {null}
                     */
                    close?: string,

                    /**
                     * Name of the property in the datasource that contains fill color for the series.
                     * @Default  {null}
                     */
                    pointColorMappingName?: string,

                    /**
                     * zOrder of the series.
                     * @Default  {0}
                     */
                    zOrder?: number,

                    /**
                     * Name of the property in the datasource that contains the size value for the bubble series.
                     * @Default  {null}
                     */
                    size?: string,

                    /**
                     * Option to add trendlines to chart.
                     */
                    trendlines?: Array<SeriesTrendline>,

                    /**
                     * Options for customizing the appearance of the series or data point while highlighting.
                     */
                    highlightSettings?: SeriesHighlightSettings,

                    /**
                     * Options for customizing the appearance of the series/data point on selection.
                     */
                    selectionSettings?: SeriesSelectionSettings
            }
            declare         export interface Size {

                /**
                 * Height of the Sparkline. Height can be specified in either pixel or percentage.
                 * @Default  {''}
                 */
                height?: string,

                    /**
                     * Width of the Sparkline. Width can be specified in either pixel or percentage.
                     * @Default  {''}
                     */
                    width?: string
            }
            declare         export interface TitleBorder {

                /**
                 * Width of the title border.
                 * @Default  {1}
                 */
                width?: number,

                    /**
                     * color of the title border.
                     * @Default  {transparent}
                     */
                    color?: string,

                    /**
                     * opacity of the title border.
                     * @Default  {0.8}
                     */
                    opacity?: number,

                    /**
                     * opacity of the title border.
                     * @Default  {0.8}
                     */
                    cornerRadius?: number
            }
            declare         export interface TitleFont {

                /**
                 * Font family for Chart title.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style for Chart title.
                     * @Default  {Normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight for Chart title.
                     * @Default  {Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the Chart title.
                     * @Default  {0.5}
                     */
                    opacity?: number,

                    /**
                     * Font size for Chart title.
                     * @Default  {20px}
                     */
                    size?: string
            }
            declare         export interface TitleSubTitleFont {

                /**
                 * Font family of sub title.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Font style for sub title.
                     * @Default  {Normal. See FontStyle}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Font weight for sub title.
                     * @Default  {Regular. See FontWeight}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity of the sub title.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size for sub title.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface TitleSubTitleBorder {

                /**
                 * Width of the subtitle border.
                 * @Default  {1}
                 */
                width?: number,

                    /**
                     * color of the subtitle border.
                     * @Default  {transparent}
                     */
                    color?: string,

                    /**
                     * opacity of the subtitle border.
                     * @Default  {0.8}
                     */
                    opacity?: number,

                    /**
                     * opacity of the subtitle border.
                     * @Default  {0.8}
                     */
                    cornerRadius?: number
            }
            declare         export interface TitleSubTitle {

                /**
                 * Options for customizing the font of sub title.
                 */
                font?: TitleSubTitleFont,

                    /**
                     * Background color for the chart subtitle.
                     * @Default  {transparent}
                     */
                    background?: string,

                    /**
                     * Options to customize the border of the title.
                     */
                    border?: TitleSubTitleBorder,

                    /**
                     * Text to be displayed in sub title.
                     */
                    text?: string,

                    /**
                     * Alignment of sub title text.
                     * @Default  {far. See TextAlignment}
                     */
                    textAlignment?: undefined.Alignment | string
            }
            declare         export interface Title {

                /**
                 * Background color for the chart title.
                 * @Default  {transparent}
                 */
                background?: string,

                    /**
                     * Options to customize the border of the title.
                     */
                    border?: TitleBorder,

                    /**
                     * Options for customizing the font of Chart title.
                     */
                    font?: TitleFont,

                    /**
                     * Options to customize the sub title of Chart.
                     */
                    subTitle?: TitleSubTitle,

                    /**
                     * Text to be displayed in Chart title.
                     */
                    text?: string,

                    /**
                     * Alignment of the title text.
                     * @Default  {Center. See TextAlignment}
                     */
                    textAlignment?: undefined.Alignment | string
            }
            declare         export interface Zooming {

                /**
                 * Enables or disables zooming.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * Enables or disables pinch zooming.
                     * @Default  {true}
                     */
                    enablePinching?: boolean,

                    /**
                     * Enable or disables the differed zooming. When it is enabled, chart is updated only on mouse up action while zooming and panning.
                     * @Default  {false}
                     */
                    enableDeferredZoom?: boolean,

                    /**
                     * Enables/disables the ability to zoom the chart on moving the mouse wheel.
                     * @Default  {false}
                     */
                    enableMouseWheel?: boolean,

                    /**
                     * Specifies whether to allow zooming the chart vertically or horizontally or in both ways.
                     * @Default  {'x,y'}
                     */
                    type?: string,

                    /**
                     * To display user specified buttons in zooming toolbar.
                     * @Default  {[zoomIn, zoomOut, zoom, pan, reset]}
                     */
                    toolbarItems?: Array<any >
            }
        }

        declare module 'RangeNavigator' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface LoadedEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface RangeChangedEventArgs {

                /**
                 * parameters from range navigator
                 */
                Data?: any,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the range navigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ScrollChangedEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position old start and end range value on changing scrollbar
                     */
                    dataoldRange?: any,

                    /**
                     * returns the scrollbar position new start and end range value on changing scrollbar
                     */
                    datanewRange?: any,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ScrollStartEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position starting range value on changing scrollbar
                     */
                    datastartRange?: string,

                    /**
                     * returns the scrollbar position end range value on changing scrollbar
                     */
                    dataendRange?: string,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface ScrollEndEventArgs {

                /**
                 * parameters from RangeNavigator
                 */
                data?: any,

                    /**
                     * returns the scrollbar position old start and end range value on change end of scrollbar
                     */
                    dataoldRange?: any,

                    /**
                     * returns the scrollbar position new start and end range value on change end of scrollbar
                     */
                    datanewRange?: any,

                    /**
                     * if the event should be canceled; otherwise, false.
                     */
                    cancel?: boolean,

                    /**
                     * returns the RangeNavigator model
                     */
                    model?: any,

                    /**
                     * returns the name of the event
                     */
                    type?: string
            }
            declare         export interface Border {

                /**
                 * Border color of the sparkline.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Width of the Sparkline border.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface Series {

                /**
                 * Color of the point, where the close is up in financial chart.
                 * @Default  {null}
                 */
                bearFillColor?: string,

                    /**
                     * Options for customizing the border of the series.
                     */
                    border?: SeriesBorder,

                    /**
                     * Color of the point, where the close is down in financial chart.
                     * @Default  {null}
                     */
                    bullFillColor?: string,

                    /**
                     * Relative width of the columns in column type series. Value ranges from 0 to 1. Width also depends upon columnSpacing property.
                     * @Default  {0.7}
                     */
                    columnWidth?: number,

                    /**
                     * Spacing between columns of different series. Value ranges from 0 to 1
                     * @Default  {0}
                     */
                    columnSpacing?: number,

                    /**
                     * Pattern of dashes and gaps used to stroke the line type series.
                     */
                    dashArray?: string,

                    /**
                     * Specifies the dataSource for the series. It can be an array of JSON objects or an instance of ej.DataManager.
                     * @Default  {null}
                     */
                    dataSource?: any,

                    /**
                     * Controls the size of the hole in doughnut series. Value ranges from 0 to 1.
                     * @Default  {0.4}
                     */
                    doughnutCoefficient?: number,

                    /**
                     * Controls the size of the doughnut series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    doughnutSize?: number,

                    /**
                     * Type of series to be drawn in radar or polar series.
                     * @Default  {line. See DrawType}
                     */
                    drawType?: boolean,

                    /**
                     * Enable/disable the animation of series.
                     * @Default  {false}
                     */
                    enableAnimation?: boolean,

                    /**
                     * To avoid overlapping of data labels smartly.
                     * @Default  {null}
                     */
                    enableSmartLabels?: number,

                    /**
                     * End angle of pie/doughnut series. For a complete circle, it has to be 360, by default.
                     * @Default  {null}
                     */
                    endAngle?: number,

                    /**
                     * Explodes the pie/doughnut slices on mouse move.
                     * @Default  {false}
                     */
                    explode?: boolean,

                    /**
                     * Explodes all the slice of pie/doughnut on render.
                     * @Default  {null}
                     */
                    explodeAll?: boolean,

                    /**
                     * Index of the point to be exploded from pie/doughnut/pyramid/funnel.
                     * @Default  {null}
                     */
                    explodeIndex?: number,

                    /**
                     * Specifies the distance of the slice from the center, when it is exploded.
                     * @Default  {25}
                     */
                    explodeOffset?: number,

                    /**
                     * Fill color of the series.
                     * @Default  {null}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the series font.
                     */
                    font?: SeriesFont,

                    /**
                     * Specifies the height of the funnel in funnel series. Values can be in both pixel and percentage.
                     * @Default  {32.7%}
                     */
                    funnelHeight?: string,

                    /**
                     * Specifies the width of the funnel in funnel series. Values can be in both pixel and percentage.
                     * @Default  {11.6%}
                     */
                    funnelWidth?: string,

                    /**
                     * Gap between the slices of pyramid/funnel series.
                     * @Default  {0}
                     */
                    gapRatio?: number,

                    /**
                     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
                     * @Default  {true}
                     */
                    isClosed?: boolean,

                    /**
                     * Specifies whether to stack the column series in polar/radar charts.
                     * @Default  {true}
                     */
                    isStacking?: boolean,

                    /**
                     * Renders the chart vertically. This is applicable only for Cartesian type series.
                     * @Default  {false}
                     */
                    isTransposed?: boolean,

                    /**
                     * Position of the data label in pie/doughnut/pyramid/funnel series. OutsideExtended position is not applicable for pyramid/funnel.
                     * @Default  {inside. See LabelPosition}
                     */
                    labelPosition?: undefined.LabelPosition | string,

                    /**
                     * Specifies the line cap of the series.
                     * @Default  {Butt. See LineCap}
                     */
                    lineCap?: undefined.LineCap | string,

                    /**
                     * Specifies the type of shape to be used where two lines meet.
                     * @Default  {Round. See LineJoin}
                     */
                    lineJoin?: undefined.LineJoin | string,

                    /**
                     * Options for displaying and customizing marker for individual point in a series. Marker contains shapes and/or data labels.
                     */
                    marker?: SeriesMarker,

                    /**
                     * Name of the series, that is to be displayed in the legend.
                     * @Default  {Add a comment to this line}
                     */
                    name?: string,

                    /**
                     * Opacity of the series.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Name of a field in data source where fill color for all the data points is generated.
                     */
                    palette?: string,

                    /**
                     * Controls the size of pie series. Value ranges from 0 to 1.
                     * @Default  {0.8}
                     */
                    pieCoefficient?: number,

                    /**
                     * Options for customizing the empty point in the series.
                     */
                    emptyPointSettings?: SeriesEmptyPointSettings,

                    /**
                     * Fill color for the positive column of the waterfall.
                     * @Default  {null}
                     */
                    positiveFill?: string,

                    /**
                     * Options for customizing the waterfall connector line.
                     */
                    connectorLine?: SeriesConnectorLine,

                    /**
                     * Options to customize the error bar in series.
                     */
                    errorBar?: SeriesErrorBar,

                    /**
                     * Option to add data points; each point should have x and y property. Also, optionally, you can customize the points color, border, marker by using fill, border and marker options.
                     */
                    points?: Array<SeriesPoint>,

                    /**
                     * Specifies the mode of the pyramid series.
                     * @Default  {linear}
                     */
                    pyramidMode?: undefined.PyramidMode | string,

                    /**
                     * Specifies ej.Query to select data from dataSource. This property is applicable only when the dataSource is ej.DataManager.
                     * @Default  {null}
                     */
                    query?: any,

                    /**
                     * Start angle from where the pie/doughnut series renders. It starts from 0, by default.
                     * @Default  {null}
                     */
                    startAngle?: number,

                    /**
                     * Options for customizing the tooltip of chart.
                     */
                    tooltip?: SeriesTooltip,

                    /**
                     * Specifies the type of the series to render in chart.
                     * @Default  {column. see Type}
                     */
                    type?: undefined.Type | string,

                    /**
                     * Controls the visibility of the series.
                     * @Default  {visible}
                     */
                    visibility?: string,

                    /**
                     * Enables or disables the visibility of legend item.
                     * @Default  {visible}
                     */
                    visibleOnLegend?: string,

                    /**
                     * Specifies the name of the x-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    xAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains x value for the series.
                     * @Default  {null}
                     */
                    xName?: string,

                    /**
                     * Specifies the name of the y-axis that has to be associated with this series. Add an axis instance with this name to axes collection.
                     * @Default  {null}
                     */
                    yAxisName?: string,

                    /**
                     * Name of the property in the datasource that contains y value for the series.
                     * @Default  {null}
                     */
                    yName?: string,

                    /**
                     * Name of the property in the datasource that contains high value for the series.
                     * @Default  {null}
                     */
                    high?: string,

                    /**
                     * Name of the property in the datasource that contains low value for the series.
                     * @Default  {null}
                     */
                    low?: string,

                    /**
                     * Name of the property in the datasource that contains open value for the series.
                     * @Default  {null}
                     */
                    open?: string,

                    /**
                     * Name of the property in the datasource that contains close value for the series.
                     * @Default  {null}
                     */
                    close?: string,

                    /**
                     * Name of the property in the datasource that contains fill color for the series.
                     * @Default  {null}
                     */
                    pointColorMappingName?: string,

                    /**
                     * zOrder of the series.
                     * @Default  {0}
                     */
                    zOrder?: number,

                    /**
                     * Name of the property in the datasource that contains the size value for the bubble series.
                     * @Default  {null}
                     */
                    size?: string,

                    /**
                     * Option to add trendlines to chart.
                     */
                    trendlines?: Array<SeriesTrendline>,

                    /**
                     * Options for customizing the appearance of the series or data point while highlighting.
                     */
                    highlightSettings?: SeriesHighlightSettings,

                    /**
                     * Options for customizing the appearance of the series/data point on selection.
                     */
                    selectionSettings?: SeriesSelectionSettings
            }
            declare         export interface LabelSettingsHigherLevelBorder {

                /**
                 * Specifies the border color of grid lines.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Specifies the border width of grid lines.
                     * @Default  {0.5}
                     */
                    width?: string
            }
            declare         export interface LabelSettingsHigherLevelGridLineStyle {

                /**
                 * Specifies the color of grid lines in higher level.
                 * @Default  {#B5B5B5}
                 */
                color?: string,

                    /**
                     * Specifies the dashArray of grid lines in higher level.
                     * @Default  {20 5 0}
                     */
                    dashArray?: string,

                    /**
                     * Specifies the width of grid lines in higher level.
                     * @Default  {#B5B5B5}
                     */
                    width?: string
            }
            declare         export interface LabelSettingsHigherLevelStyleFont {

                /**
                 * Specifies the label font color. Labels render with the specified font color.
                 * @Default  {black}
                 */
                color?: string,

                    /**
                     * Specifies the label font family. Labels render with the specified font family.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the label font style. Labels render with the specified font style.
                     * @Default  {Normal}
                     */
                    fontStyle?: string,

                    /**
                     * Specifies the label font weight. Labels render with the specified font weight.
                     * @Default  {regular}
                     */
                    fontWeight?: string,

                    /**
                     * Specifies the label opacity. Labels render with the specified opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the label font size. Labels render with the specified font size.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface LabelSettingsHigherLevelStyle {

                /**
                 * Options for customizing the font properties.
                 */
                font?: LabelSettingsHigherLevelStyleFont,

                    /**
                     * Specifies the horizontal text alignment of the text in label.
                     * @Default  {middle}
                     */
                    horizontalAlignment?: string
            }
            declare         export interface LabelSettingsHigherLevel {

                /**
                 * Options for customizing the border of grid lines in higher level.
                 */
                border?: LabelSettingsHigherLevelBorder,

                    /**
                     * Specifies the fill color of higher level labels.
                     * @Default  {transparent}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the grid line colors, width, dashArray, border.
                     */
                    gridLineStyle?: LabelSettingsHigherLevelGridLineStyle,

                    /**
                     * Specifies the intervalType for higher level labels. See IntervalType
                     * @Default  {auto}
                     */
                    intervalType?: undefined.IntervalType | string,

                    /**
                     * Specifies the position of the labels to render either inside or outside of plot area
                     * @Default  {outside}
                     */
                    labelPlacement?: undefined.LabelPlacement | string,

                    /**
                     * Specifies the position of the labels in higher level
                     * @Default  {top}
                     */
                    position?: undefined.Position | string,

                    /**
                     * Options for customizing the style of higher level labels.
                     */
                    style?: LabelSettingsHigherLevelStyle,

                    /**
                     * Toggles the visibility of higher level labels.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface LabelSettingsLowerLevelBorder {

                /**
                 * Specifies the border color of grid lines.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Specifies the border width of grid lines.
                     * @Default  {0.5}
                     */
                    width?: string
            }
            declare         export interface LabelSettingsLowerLevelGridLineStyle {

                /**
                 * Specifies the color of grid lines in lower level.
                 * @Default  {#B5B5B5}
                 */
                color?: string,

                    /**
                     * Specifies the dashArray of gridLines in lowerLevel.
                     * @Default  {20 5 0}
                     */
                    dashArray?: string,

                    /**
                     * Specifies the width of grid lines in lower level.
                     * @Default  {#B5B5B5}
                     */
                    width?: string
            }
            declare         export interface LabelSettingsLowerLevelStyleFont {

                /**
                 * Specifies the color of labels. Label text render in this specified color.
                 * @Default  {black}
                 */
                color?: string,

                    /**
                     * Specifies the font family of labels. Label text render in this specified font family.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the font style of labels. Label text render in this specified font style.
                     * @Default  {Normal}
                     */
                    fontStyle?: string,

                    /**
                     * Specifies the font weight of labels. Label text render in this specified font weight.
                     * @Default  {regular}
                     */
                    fontWeight?: string,

                    /**
                     * Specifies the opacity of labels. Label text render in this specified opacity.
                     * @Default  {12px}
                     */
                    opacity?: string,

                    /**
                     * Specifies the size of labels. Label text render in this specified size.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface LabelSettingsLowerLevelStyle {

                /**
                 * Options for customizing the font of labels.
                 */
                font?: LabelSettingsLowerLevelStyleFont,

                    /**
                     * Specifies the horizontal text alignment of the text in label.
                     * @Default  {middle}
                     */
                    horizontalAlignment?: string
            }
            declare         export interface LabelSettingsLowerLevel {

                /**
                 * Options for customizing the border of grid lines in lower level.
                 */
                border?: LabelSettingsLowerLevelBorder,

                    /**
                     * Specifies the fill color of labels in lower level.
                     * @Default  {transparent}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the grid lines in lower level.
                     */
                    gridLineStyle?: LabelSettingsLowerLevelGridLineStyle,

                    /**
                     * Specifies the intervalType of the labels in lower level.See IntervalType
                     * @Default  {auto}
                     */
                    intervalType?: undefined.IntervalType | string,

                    /**
                     * Specifies the position of the labels to render either inside or outside of plot area. See LabelPlacement
                     * @Default  {outside}
                     */
                    labelPlacement?: undefined.LabelPlacement | string,

                    /**
                     * Specifies the position of the labels in lower level.See Position
                     * @Default  {bottom}
                     */
                    position?: undefined.Position | string,

                    /**
                     * Options for customizing the style of labels.
                     */
                    style?: LabelSettingsLowerLevelStyle,

                    /**
                     * Toggles the visibility of labels in lower level.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface LabelSettingsStyleFont {

                /**
                 * Specifies the label color. This color is applied to the labels in range navigator.
                 * @Default  {#FFFFFF}
                 */
                color?: string,

                    /**
                     * Specifies the label font family. Labels render with the specified font family.
                     * @Default  {Segoe UI}
                     */
                    family?: string,

                    /**
                     * Specifies the label font opacity. Labels render with the specified font opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the label font size. Labels render with the specified font size.
                     * @Default  {1px}
                     */
                    size?: string,

                    /**
                     * Specifies the label font style. Labels render with the specified font style..
                     * @Default  {Normal}
                     */
                    style?: undefined.FontStyle | string,

                    /**
                     * Specifies the label font weight
                     * @Default  {regular}
                     */
                    weight?: undefined.FontWeight | string
            }
            declare         export interface LabelSettingsStyle {

                /**
                 * Options for customizing the font of labels in range navigator.
                 */
                font?: LabelSettingsStyleFont,

                    /**
                     * Specifies the horizontalAlignment of the label in RangeNavigator
                     * @Default  {middle}
                     */
                    horizontalAlignment?: undefined.HorizontalAlignment | string
            }
            declare         export interface LabelSettings {

                /**
                 * Options for customizing the higher level labels in range navigator.
                 */
                higherLevel?: LabelSettingsHigherLevel,

                    /**
                     * Options for customizing the labels in lower level.
                     */
                    lowerLevel?: LabelSettingsLowerLevel,

                    /**
                     * Options for customizing the style of labels in range navigator.
                     */
                    style?: LabelSettingsStyle
            }
            declare         export interface NavigatorStyleSettingsBorder {

                /**
                 * Specifies the border color of range navigator.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Specifies the dash array of range navigator.
                     * @Default  {null}
                     */
                    dashArray?: string,

                    /**
                     * Specifies the border width of range navigator.
                     * @Default  {0.5}
                     */
                    width?: number
            }
            declare         export interface NavigatorStyleSettingsMajorGridLineStyle {

                /**
                 * Specifies the color of major grid lines in range navigator.
                 * @Default  {#B5B5B5}
                 */
                color?: string,

                    /**
                     * Toggles the visibility of major grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface NavigatorStyleSettingsMinorGridLineStyle {

                /**
                 * Specifies the color of minor grid lines in range navigator.
                 * @Default  {#B5B5B5}
                 */
                color?: string,

                    /**
                     * Toggles the visibility of minor grid lines.
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface NavigatorStyleSettingsHighlightSettingsBorder {

                /**
                 * To set the border color to the highlight.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * To set the border width to the highlight.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface NavigatorStyleSettingsHighlightSettings {

                /**
                 * Enable the highlight settings in range navigator.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * To set the color to the highlight.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * To set the opacity to the highlight.
                     * @Default  {0.5}
                     */
                    opacity?: number,

                    /**
                     * Contains the border properties for highlighting rectangle.
                     */
                    border?: NavigatorStyleSettingsHighlightSettingsBorder
            }
            declare         export interface NavigatorStyleSettingsSelectionSettingsBorder {

                /**
                 * To set the border color to the selection.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * To set the border width to the selection.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface NavigatorStyleSettingsSelectionSettings {

                /**
                 * Enable the selection settings in range navigator.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * To set the color to the selection.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * To set the opacity to the selection.
                     * @Default  {0.5}
                     */
                    opacity?: number,

                    /**
                     * Contains the border properties for selecting the rectangle.
                     */
                    border?: NavigatorStyleSettingsSelectionSettingsBorder
            }
            declare         export interface NavigatorStyleSettings {

                /**
                 * Specifies the background color of range navigator.
                 * @Default  {#dddddd}
                 */
                background?: string,

                    /**
                     * Options for customizing the border color and width of range navigator.
                     */
                    border?: NavigatorStyleSettingsBorder,

                    /**
                     * Specifies the left side thumb template in range navigator we can give either div id or HTML string
                     * @Default  {null}
                     */
                    leftThumbTemplate?: string,

                    /**
                     * Options for customizing the major grid lines.
                     */
                    majorGridLineStyle?: NavigatorStyleSettingsMajorGridLineStyle,

                    /**
                     * Options for customizing the minor grid lines.
                     */
                    minorGridLineStyle?: NavigatorStyleSettingsMinorGridLineStyle,

                    /**
                     * Specifies the opacity of RangeNavigator.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the right side thumb template in range navigator we can give either div id or HTML string
                     * @Default  {null}
                     */
                    rightThumbTemplate?: string,

                    /**
                     * Specifies the color of the selected region in range navigator.
                     * @Default  {#EFEFEF}
                     */
                    selectedRegionColor?: string,

                    /**
                     * Specifies the opacity of Selected Region.
                     * @Default  {0}
                     */
                    selectedRegionOpacity?: number,

                    /**
                     * Specifies the color of the thumb in range navigator.
                     * @Default  {#2382C3}
                     */
                    thumbColor?: string,

                    /**
                     * Specifies the radius of the thumb in range navigator.
                     * @Default  {10}
                     */
                    thumbRadius?: number,

                    /**
                     * Specifies the stroke color of the thumb in range navigator.
                     * @Default  {#303030}
                     */
                    thumbStroke?: string,

                    /**
                     * Specifies the color of the unselected region in range navigator.
                     * @Default  {#5EABDE}
                     */
                    unselectedRegionColor?: string,

                    /**
                     * Specifies the opacity of Unselected Region.
                     * @Default  {0.3}
                     */
                    unselectedRegionOpacity?: number,

                    /**
                     * Contains the options for highlighting the range navigator on mouse over.
                     */
                    highlightSettings?: NavigatorStyleSettingsHighlightSettings,

                    /**
                     * Contains the options for selection the range navigator on mouse over.
                     */
                    selectionSettings?: NavigatorStyleSettingsSelectionSettings
            }
            declare         export interface RangeSettings {

                /**
                 * Specifies the ending range of range navigator.
                 * @Default  {null}
                 */
                end?: string,

                    /**
                     * Specifies the starting range of range navigator.
                     * @Default  {null}
                     */
                    start?: string
            }
            declare         export interface SelectedRangeSettings {

                /**
                 * Specifies the ending range of range navigator.
                 * @Default  {null}
                 */
                end?: string,

                    /**
                     * Specifies the starting range of range navigator.
                     * @Default  {null}
                     */
                    start?: string
            }
            declare         export interface ScrollRangeSettings {

                /**
                 * Specifies the ending range of range navigator scrollbar and that should be greater than the rangenavigator datasource end value.
                 * @Default  {null}
                 */
                end?: string,

                    /**
                     * Specifies the starting range of range navigator scrollbar and that should be less than the rangenavigator datasource start value.
                     * @Default  {null}
                     */
                    start?: string
            }
            declare         export interface SizeSettings {

                /**
                 * Specifies the height of Gantt control
                 * @Default  {450px}
                 */
                height?: string,

                    /**
                     * Specifies the width of Gantt control
                     * @Default  {1000px}
                     */
                    width?: string
            }
            declare         export interface TooltipSettingsFont {

                /**
                 * Specifies the color of text in tooltip. Tooltip text render in the specified color.
                 * @Default  {#FFFFFF}
                 */
                color?: string,

                    /**
                     * Specifies the font family of text in tooltip. Tooltip text render in the specified font family.
                     * @Default  {Segoe UI}
                     */
                    family?: string,

                    /**
                     * Specifies the font style of text in tooltip. Tooltip text render in the specified font style.
                     * @Default  {ej.datavisualization.RangeNavigator.fontStyle.Normal}
                     */
                    fontStyle?: string,

                    /**
                     * Specifies the opacity of text in tooltip. Tooltip text render in the specified opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the size of text in tooltip. Tooltip text render in the specified size.
                     * @Default  {10px}
                     */
                    size?: string,

                    /**
                     * Specifies the weight of text in tooltip. Tooltip text render in the specified weight.
                     * @Default  {ej.datavisualization.RangeNavigator.weight.Regular}
                     */
                    weight?: string
            }
            declare         export interface TooltipSettings {

                /**
                 * To enable or disable the tooltip display.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * To customize the tooltip display based on your requirements.
                     * @Default  {null}
                     */
                    template?: string
            }
            declare         export interface ValueAxisSettingsAxisLine {

                /**
                 * Toggles the visibility of axis line.
                 * @Default  {none}
                 */
                visible?: string
            }
            declare         export interface ValueAxisSettingsFont {

                /**
                 * Text in axis render with the specified size.
                 * @Default  {0px}
                 */
                size?: string
            }
            declare         export interface ValueAxisSettingsMajorGridLines {

                /**
                 * Toggles the visibility of major grid lines.
                 * @Default  {false}
                 */
                visible?: boolean
            }
            declare         export interface ValueAxisSettingsMajorTickLines {

                /**
                 * Specifies the size of the majorTickLines in range navigator
                 * @Default  {0}
                 */
                size?: number,

                    /**
                     * Toggles the visibility of major tick lines.
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Specifies width of the major tick lines.
                     * @Default  {0}
                     */
                    width?: number
            }
            declare         export interface ValueAxisSettings {

                /**
                 * Options for customizing the axis line.
                 */
                axisLine?: ValueAxisSettingsAxisLine,

                    /**
                     * Options for customizing the font of the axis.
                     */
                    font?: ValueAxisSettingsFont,

                    /**
                     * Options for customizing the major grid lines.
                     */
                    majorGridLines?: ValueAxisSettingsMajorGridLines,

                    /**
                     * Options for customizing the major tick lines in axis.
                     */
                    majorTickLines?: ValueAxisSettingsMajorTickLines,

                    /**
                     * If the range is not given explicitly, range will be calculated automatically. You can customize the automatic range calculation using rangePadding.
                     * @Default  {none}
                     */
                    rangePadding?: string,

                    /**
                     * Toggles the visibility of axis in range navigator.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
        }

        declare module 'BulletGraph' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface DrawCaptionEventArgs {

                /**
                 * returns the object of the bullet graph.
                 */
                Object?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: HTMLElement,

                    /**
                     * returns the current captionSettings element.
                     */
                    captionElement?: HTMLElement,

                    /**
                     * returns the type of the captionSettings.
                     */
                    captionType?: string
            }
            declare         export interface DrawCategoryEventArgs {

                /**
                 * returns the object of the bullet graph.
                 */
                Object?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: HTMLElement,

                    /**
                     * returns the options of category element.
                     */
                    categoryElement?: HTMLElement,

                    /**
                     * returns the text value of the category that is drawn.
                     */
                    Value?: string
            }
            declare         export interface DrawComparativeMeasureSymbolEventArgs {

                /**
                 * returns the object of the bullet graph.
                 */
                Object?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: HTMLElement,

                    /**
                     * returns the options of comparative measure element.
                     */
                    targetElement?: HTMLElement,

                    /**
                     * returns the value of the comparative measure symbol.
                     */
                    Value?: number
            }
            declare         export interface DrawFeatureMeasureBarEventArgs {

                /**
                 * returns the object of the bullet graph.
                 */
                Object?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: HTMLElement,

                    /**
                     * returns the options of feature measure element.
                     */
                    currentElement?: HTMLElement,

                    /**
                     * returns the value of the feature measure bar.
                     */
                    Value?: number
            }
            declare         export interface DrawIndicatorEventArgs {

                /**
                 * returns an object to customize bullet graph indicator text and symbol before rendering it.
                 */
                indicatorSettings?: any,

                    /**
                     * returns the object of bullet graph.
                     */
                    model?: any,

                    /**
                     * returns the type of event.
                     */
                    type?: string,

                    /**
                     * for canceling the event.
                     */
                    cancel?: boolean
            }
            declare         export interface DrawLabelsEventArgs {

                /**
                 * returns the object of the gauge.
                 */
                object?: any,

                    /**
                     * returns the cancel option value
                     */
                    cancel?: boolean,

                    /**
                     * returns the context element
                     */
                    context?: any,

                    /**
                     * returns the startX and startY of the label
                     */
                    position?: any,

                    /**
                     * returns the gauge model
                     */
                    Model?: any,

                    /**
                     * returns the options of the scale element.
                     */
                    scaleElement?: any,

                    /**
                     * returns the scaleIndex to which the label belongs.
                     */
                    scaleIndex?: number,

                    /**
                     * returns the label style
                     */
                    style?: string,

                    /**
                     * returns the angle of the label.
                     */
                    angle?: number,

                    /**
                     * returns the current label element.
                     */
                    element?: any,

                    /**
                     * returns the index of the label.
                     */
                    index?: number,

                    /**
                     * returns the label value of the label.
                     */
                    value?: number,

                    /**
                     * returns the name of the event
                     */
                    type?: any
            }
            declare         export interface DrawQualitativeRangesEventArgs {

                /**
                 * returns the object of the bullet graph.
                 */
                Object?: any,

                    /**
                     * returns the index of current range.
                     */
                    rangeIndex?: number,

                    /**
                     * returns the settings for current range.
                     */
                    rangeOptions?: any,

                    /**
                     * returns the end value of current range.
                     */
                    rangeEndValue?: number
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface CaptionSettingsFont {

                /**
                 * Specifies the color of the text in caption.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the fontFamily of caption. Caption text render with this fontFamily
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the fontStyle of caption
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the fontWeight of caption
                     * @Default  {regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Specifies the opacity of caption. Caption text render with this opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the size of caption. Caption text render with this size
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface CaptionSettingsIndicatorFont {

                /**
                 * Specifies the color of the indicator's text.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the fontFamily of indicator. Indicator text render with this fontFamily.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the fontStyle of indicator. Indicator text render with this fontStyle. See FontStyle
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the fontWeight of indicator. Indicator text render with this fontWeight. See FontWeight
                     * @Default  {regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Specifies the opacity of indicator text. Indicator text render with this Opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the size of indicator. Indicator text render with this size.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface CaptionSettingsIndicatorLocation {

                /**
                 * Specifies the horizontal position of the indicator.
                 * @Default  {10}
                 */
                x?: number,

                    /**
                     * Specifies the vertical position of the indicator.
                     * @Default  {60}
                     */
                    y?: number
            }
            declare         export interface CaptionSettingsIndicatorSymbolBorder {

                /**
                 * Specifies the border color of indicator symbol.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the border width of indicator symbol.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface CaptionSettingsIndicatorSymbolSize {

                /**
                 * Specifies the height of indicator symbol.
                 * @Default  {10}
                 */
                height?: number,

                    /**
                     * Specifies the width of indicator symbol.
                     * @Default  {10}
                     */
                    width?: number
            }
            declare         export interface CaptionSettingsIndicatorSymbol {

                /**
                 * Contains property to customize the border of indicator symbol.
                 */
                border?: CaptionSettingsIndicatorSymbolBorder,

                    /**
                     * Specifies the color of indicator symbol.
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Specifies the URL of image that represents indicator symbol.
                     */
                    imageURL?: string,

                    /**
                     * Specifies the opacity of indicator symbol.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the shape of indicator symbol.
                     */
                    shape?: string,

                    /**
                     * Contains property to customize the size of indicator symbol.
                     */
                    size?: CaptionSettingsIndicatorSymbolSize
            }
            declare         export interface CaptionSettingsIndicator {

                /**
                 * Contains property to customize the font of indicator.
                 */
                font?: CaptionSettingsIndicatorFont,

                    /**
                     * Contains property to customize the location of indicator.
                     */
                    location?: CaptionSettingsIndicatorLocation,

                    /**
                     * Specifies the padding to be applied when text position is used.
                     * @Default  {2}
                     */
                    padding?: number,

                    /**
                     * Contains property to customize the symbol of indicator.
                     */
                    symbol?: CaptionSettingsIndicatorSymbol,

                    /**
                     * Specifies the text to be displayed as indicator text. By default difference between current value and target will be displayed
                     */
                    text?: string,

                    /**
                     * Specifies the alignment of indicator with respect to scale based on text position
                     * @Default  {'Near'}
                     */
                    textAlignment?: undefined.TextAlignment | string,

                    /**
                     * Specifies where indicator text should be anchored when indicator overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
                     * @Default  {'start'}
                     */
                    textAnchor?: undefined.TextAnchor | string,

                    /**
                     * indicator text render in the specified angle.
                     * @Default  {0}
                     */
                    textAngle?: number,

                    /**
                     * Specifies where indicator should be placed
                     * @Default  {'float'}
                     */
                    textPosition?: undefined.TextPosition | string,

                    /**
                     * Specifies the space between indicator symbol and text.
                     * @Default  {3}
                     */
                    textSpacing?: number,

                    /**
                     * Specifies whether indicator will be visible or not.
                     * @Default  {false}
                     */
                    visible?: boolean
            }
            declare         export interface CaptionSettingsLocation {

                /**
                 * Specifies the position in horizontal direction
                 * @Default  {17}
                 */
                x?: number,

                    /**
                     * Specifies the position in horizontal direction
                     * @Default  {30}
                     */
                    y?: number
            }
            declare         export interface CaptionSettingsSubTitleFont {

                /**
                 * Specifies the color of the subtitle's text.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * Specifies the fontFamily of subtitle. Subtitle text render with this fontFamily.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the fontStyle of subtitle. Subtitle text render with this fontStyle. See FontStyle
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the fontWeight of subtitle. Subtitle text render with this fontWeight. See FontWeight
                     * @Default  {regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Specifies the opacity of subtitle. Subtitle text render with this opacity.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Specifies the size of subtitle. Subtitle text render with this size.
                     * @Default  {12px}
                     */
                    size?: string
            }
            declare         export interface CaptionSettingsSubTitleLocation {

                /**
                 * Specifies the horizontal position of the subtitle.
                 * @Default  {10}
                 */
                x?: number,

                    /**
                     * Specifies the vertical position of the subtitle.
                     * @Default  {45}
                     */
                    y?: number
            }
            declare         export interface CaptionSettingsSubTitle {

                /**
                 * Contains property to customize the font of subtitle.
                 */
                font?: CaptionSettingsSubTitleFont,

                    /**
                     * Contains property to customize the location of subtitle.
                     */
                    location?: CaptionSettingsSubTitleLocation,

                    /**
                     * Specifies the padding to be applied when text position is used.
                     * @Default  {5}
                     */
                    padding?: number,

                    /**
                     * Specifies the text to be displayed as subtitle.
                     */
                    text?: string,

                    /**
                     * Specifies the alignment of sub title text with respect to scale. Alignment will not be applied in float position.
                     * @Default  {'Near'}
                     */
                    textAlignment?: undefined.TextAlignment | string,

                    /**
                     * Specifies where subtitle text should be anchored when sub title text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
                     * @Default  {'start'}
                     */
                    textAnchor?: undefined.TextAnchor | string,

                    /**
                     * Subtitle render in the specified angle.
                     * @Default  {0}
                     */
                    textAngle?: number,

                    /**
                     * Specifies where sub title text should be placed.
                     * @Default  {'float'}
                     */
                    textPosition?: undefined.TextPosition | string
            }
            declare         export interface CaptionSettings {

                /**
                 * Specifies whether trim the labels will be true or false.
                 * @Default  {true}
                 */
                enableTrim?: boolean,

                    /**
                     * Contains property to customize the font of caption.
                     */
                    font?: CaptionSettingsFont,

                    /**
                     * Contains property to customize the indicator.
                     */
                    indicator?: CaptionSettingsIndicator,

                    /**
                     * Contains property to customize the location.
                     */
                    location?: CaptionSettingsLocation,

                    /**
                     * Specifies the padding to be applied when text position is used.
                     * @Default  {5}
                     */
                    padding?: number,

                    /**
                     * Contains property to customize the subtitle.
                     */
                    subTitle?: CaptionSettingsSubTitle,

                    /**
                     * Specifies the text to be displayed on bullet graph.
                     */
                    text?: string,

                    /**
                     * Specifies the alignment of caption text with respect to scale. This property will not be applied when text position is float.
                     * @Default  {'Near'}
                     */
                    textAlignment?: undefined.TextAlignment | string,

                    /**
                     * Specifies caption text anchoring when caption text overlaps with other caption group text. Text will be anchored when overlapping caption group text are at same position. Anchoring is not applicable for float position.
                     * @Default  {'start'}
                     */
                    textAnchor?: undefined.TextAnchor | string,

                    /**
                     * Specifies the angel in which the caption is rendered.
                     * @Default  {0}
                     */
                    textAngle?: number,

                    /**
                     * Specifies how caption text should be placed.
                     * @Default  {'float'}
                     */
                    textPosition?: undefined.TextPosition | string
            }
            declare         export interface QualitativeRange {

                /**
                 * Specifies the ending range to which the qualitative ranges will render.
                 * @Default  {3}
                 */
                rangeEnd?: number,

                    /**
                     * Specifies the opacity for the qualitative ranges.
                     * @Default  {1}
                     */
                    rangeOpacity?: number,

                    /**
                     * Specifies the stroke for the qualitative ranges.
                     * @Default  {null}
                     */
                    rangeStroke?: string
            }
            declare         export interface QuantitativeScaleSettingsComparativeMeasureSettings {

                /**
                 * Specifies the stroke of the comparative measure.
                 * @Default  {null}
                 */
                stroke?: number,

                    /**
                     * Specifies the width of the comparative measure.
                     * @Default  {5}
                     */
                    width?: number
            }
            declare         export interface QuantitativeScaleSettingsFeaturedMeasureSettings {

                /**
                 * Specifies the Stroke of the featured measure in bullet graph.
                 * @Default  {null}
                 */
                stroke?: number,

                    /**
                     * Specifies the width of the featured measure in bullet graph.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface QuantitativeScaleSettingsFeatureMeasure {

                /**
                 * Specifies the category of feature measure.
                 * @Default  {null}
                 */
                category?: string,

                    /**
                     * Comparative measure render till the specified value.
                     * @Default  {null}
                     */
                    comparativeMeasureValue?: number,

                    /**
                     * Feature measure render till the specified value.
                     * @Default  {null}
                     */
                    value?: number
            }
            declare         export interface QuantitativeScaleSettingsFields {

                /**
                 * Specifies the category of the bullet graph.
                 * @Default  {null}
                 */
                category?: string,

                    /**
                     * Comparative measure render based on the values in the specified field.
                     * @Default  {null}
                     */
                    comparativeMeasure?: string,

                    /**
                     * Specifies the dataSource for the bullet graph.
                     * @Default  {null}
                     */
                    dataSource?: any,

                    /**
                     * Feature measure render based on the values in the specified field.
                     * @Default  {null}
                     */
                    featureMeasures?: string,

                    /**
                     * Specifies the query for fetching the values form data source to render the bullet graph.
                     * @Default  {null}
                     */
                    query?: string,

                    /**
                     * Specifies the name of the table.
                     * @Default  {null}
                     */
                    tableName?: string
            }
            declare         export interface QuantitativeScaleSettingsLabelSettingsFont {

                /**
                 * Specifies the fontFamily of labels in bullet graph. Labels render with this fontFamily.
                 * @Default  {Segoe UI}
                 */
                fontFamily?: string,

                    /**
                     * Specifies the fontStyle of labels in bullet graph. Labels render with this fontStyle. See FontStyle
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the fontWeight of labels in bullet graph. Labels render with this fontWeight. See FontWeight
                     * @Default  {regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Specifies the opacity of labels in bullet graph. Labels render with this opacity
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface QuantitativeScaleSettingsLabelSettings {

                /**
                 * Contains property to customize the font of the labels in bullet graph.
                 */
                font?: QuantitativeScaleSettingsLabelSettingsFont,

                    /**
                     * Specifies the placement of labels in bullet graph scale.
                     * @Default  {outside}
                     */
                    labelPlacement?: undefined.LabelPlacement | string,

                    /**
                     * Specifies the prefix to be added with labels in bullet graph.
                     * @Default  {Empty string}
                     */
                    labelPrefix?: string,

                    /**
                     * Specifies the suffix to be added after labels in bullet graph.
                     * @Default  {Empty string}
                     */
                    labelSuffix?: string,

                    /**
                     * Specifies the horizontal/vertical padding of labels.
                     * @Default  {15}
                     */
                    offset?: number,

                    /**
                     * Specifies the position of the labels to render either above or below the graph. See Position
                     * @Default  {below}
                     */
                    position?: undefined.LabelPosition | string,

                    /**
                     * Specifies the Size of the labels.
                     * @Default  {12}
                     */
                    size?: number,

                    /**
                     * Specifies the stroke color of the labels in bullet graph.
                     * @Default  {null}
                     */
                    stroke?: string
            }
            declare         export interface QuantitativeScaleSettingsLocation {

                /**
                 * This property specifies the x position for rendering quantitative scale.
                 * @Default  {10}
                 */
                x?: number,

                    /**
                     * This property specifies the y position for rendering quantitative scale.
                     * @Default  {10}
                     */
                    y?: number
            }
            declare         export interface QuantitativeScaleSettingsMajorTickSettings {

                /**
                 * Specifies the size of the major ticks.
                 * @Default  {13}
                 */
                size?: number,

                    /**
                     * Specifies the stroke color of the major tick lines.
                     * @Default  {null}
                     */
                    stroke?: string,

                    /**
                     * Specifies the width of the major tick lines.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface QuantitativeScaleSettingsMinorTickSettings {

                /**
                 * Specifies the size of minor ticks.
                 * @Default  {7}
                 */
                size?: number,

                    /**
                     * Specifies the stroke color of minor ticks in bullet graph.
                     * @Default  {null}
                     */
                    stroke?: string,

                    /**
                     * Specifies the width of the minor ticks in bullet graph.
                     * @Default  {2}
                     */
                    width?: number
            }
            declare         export interface QuantitativeScaleSettings {

                /**
                 * Contains property to customize the comparative measure.
                 */
                comparativeMeasureSettings?: QuantitativeScaleSettingsComparativeMeasureSettings,

                    /**
                     * Contains property to customize the featured measure.
                     */
                    featuredMeasureSettings?: QuantitativeScaleSettingsFeaturedMeasureSettings,

                    /**
                     * Contains property to customize the featured measure.
                     */
                    featureMeasures?: Array<QuantitativeScaleSettingsFeatureMeasure>,

                    /**
                     * Contains property to customize the fields.
                     */
                    fields?: QuantitativeScaleSettingsFields,

                    /**
                     * Specifies the interval for the Graph.
                     * @Default  {1}
                     */
                    interval?: number,

                    /**
                     * Contains property to customize the labels.
                     */
                    labelSettings?: QuantitativeScaleSettingsLabelSettings,

                    /**
                     * Contains property to customize the position of the quantitative scale
                     */
                    location?: QuantitativeScaleSettingsLocation,

                    /**
                     * Contains property to customize the major tick lines.
                     */
                    majorTickSettings?: QuantitativeScaleSettingsMajorTickSettings,

                    /**
                     * Specifies the maximum value of the Graph.
                     * @Default  {10}
                     */
                    maximum?: number,

                    /**
                     * Specifies the minimum value of the Graph.
                     * @Default  {0}
                     */
                    minimum?: number,

                    /**
                     * Contains property to customize the minor ticks.
                     */
                    minorTickSettings?: QuantitativeScaleSettingsMinorTickSettings,

                    /**
                     * The specified number of minor ticks will be rendered per interval.
                     * @Default  {4}
                     */
                    minorTicksPerInterval?: number,

                    /**
                     * Specifies the placement of ticks to render either inside or outside the scale.
                     * @Default  {ej.datavisualization.BulletGraph.TickPlacement.Outside}
                     */
                    tickPlacement?: undefined.TickPlacement | string,

                    /**
                     * Specifies the position of the ticks to render either above,below or inside
                     * @Default  {ej.datavisualization.BulletGraph.TickPosition.Far}
                     */
                    tickPosition?: undefined.TickPosition | string
            }
            declare         export interface TooltipSettings {

                /**
                 * To enable or disable the tooltip display.
                 * @Default  {false}
                 */
                enable?: boolean,

                    /**
                     * To customize the tooltip display based on your requirements.
                     * @Default  {null}
                     */
                    template?: string
            }
        }

        declare module 'Barcode' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface QuietZone {

                /**
                 * Specifies the quiet zone around the Barcode.
                 */
                all?: number,

                    /**
                     * Specifies the bottom quiet zone of the Barcode.
                     */
                    bottom?: number,

                    /**
                     * Specifies the left quiet zone of the Barcode.
                     */
                    left?: number,

                    /**
                     * Specifies the right quiet zone of the Barcode.
                     */
                    right?: number,

                    /**
                     * Specifies the top quiet zone of the Barcode.
                     */
                    top?: number
            }
        }

        declare module 'Map' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface MarkerSelectedEventArgs {

                /**
                 * Returns marker object.
                 */
                originalEvent?: any
            }
            declare         export interface MouseleaveEventArgs {

                /**
                 * Returns hovered map shape object.
                 */
                originalEvent?: any
            }
            declare         export interface MouseoverEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the mask edit model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event
                     */
                    type?: string,

                    /**
                     * returns the mask edit value
                     */
                    value?: number,

                    /**
                     * returns unstripped value in mask edit textbox control.
                     */
                    unmaskedValue?: string
            }
            declare         export interface OnRenderCompleteEventArgs {

                /**
                 * Event parameters from map
                 */
                originalEvent?: any
            }
            declare         export interface PannedEventArgs {

                /**
                 * Event parameters from map
                 */
                originalEvent?: any
            }
            declare         export interface ShapeSelectedEventArgs {

                /**
                 * Returns selected shape object.
                 */
                originalEvent?: any
            }
            declare         export interface ZoomedInEventArgs {

                /**
                 * Event parameters from map
                 */
                originalEvent?: any,

                    /**
                     * Returns zoom level value for which the map is zoomed.
                     */
                    zoomLevel?: any
            }
            declare         export interface ZoomedOutEventArgs {

                /**
                 * Event parameters from map
                 */
                originalEvent?: any,

                    /**
                     * Returns zoom level value for which the map is zoomed.
                     */
                    zoomLevel?: any
            }
            declare         export interface ZoomSettings {

                /**
                 * Enables or Disables the zooming of map
                 * @Default  {true}
                 */
                enableZoom?: boolean,

                    /**
                     * Enables or Disables the zoom on selecting the map shape
                     * @Default  {false}
                     */
                    enableZoomOnSelection?: boolean,

                    /**
                     * Specifies the zoom factor for map zoom value.
                     * @Default  {1}
                     */
                    factor?: number,

                    /**
                     * Specifies the zoom level value for which map to be zoomed
                     * @Default  {1}
                     */
                    level?: number,

                    /**
                     * Specifies the minimum zoomSettings level of the map
                     * @Default  {1}
                     */
                    minValue?: number,

                    /**
                     * Specifies the maximum zoom level of the map
                     * @Default  {100}
                     */
                    maxValue?: number
            }
            declare         export interface NavigationControl {

                /**
                 * Set the absolutePosition for navigation control
                 * @Default  {{x:0,y:0}}
                 */
                absolutePosition?: any,

                    /**
                     * Specifies the navigation control template for map
                     * @Default  {null}
                     */
                    content?: string,

                    /**
                     * Set the dockPosition value for navigation control
                     * @Default  {centerleft}
                     */
                    dockPosition?: undefined.Position | string,

                    /**
                     * Enables or Disables the Navigation for handling zooming map
                     * @Default  {false}
                     */
                    enableNavigation?: boolean,

                    /**
                     * Set the orientation value for navigation control
                     * @Default  {vertical}
                     */
                    orientation?: undefined.LabelOrientation | string
            }
            declare         export interface LayersBubbleSettings {

                /**
                 * Specifies the bubble Opacity value of bubbles for shape layer in map
                 * @Default  {0.9}
                 */
                bubbleOpacity?: number,

                    /**
                     * Specifies the mouse hover color of the shape layer in map
                     * @Default  {gray}
                     */
                    color?: string,

                    /**
                     * Specifies the colorMappings of the shape layer in map
                     * @Default  {null}
                     */
                    colorMappings?: any,

                    /**
                     * Specifies the bubble color valuePath of the shape layer in map
                     * @Default  {null}
                     */
                    colorValuePath?: string,

                    /**
                     * Specifies the maximum size value of bubbles for shape layer in map
                     * @Default  {20}
                     */
                    maxValue?: number,

                    /**
                     * Specifies the minimum size value of bubbles for shape layer in map
                     * @Default  {10}
                     */
                    minValue?: number,

                    /**
                     * Specifies the showBubble visibility status map
                     * @Default  {true}
                     */
                    showBubble?: boolean,

                    /**
                     * Specifies the tooltip visibility status of the shape layer in map
                     * @Default  {false}
                     */
                    showTooltip?: boolean,

                    /**
                     * Specifies the bubble tooltip template of the shape layer in map
                     * @Default  {null}
                     */
                    tooltipTemplate?: string,

                    /**
                     * Specifies the bubble valuePath of the shape layer in map
                     * @Default  {null}
                     */
                    valuePath?: string
            }
            declare         export interface LayersLabelSettings {

                /**
                 * enable or disable the enableSmartLabel property
                 * @Default  {false}
                 */
                enableSmartLabel?: boolean,

                    /**
                     * set the labelLength property
                     * @Default  {'2'}
                     */
                    labelLength?: number,

                    /**
                     * set the labelPath property
                     * @Default  {null}
                     */
                    labelPath?: string,

                    /**
                     * The property specifies whether to show labels or not.
                     * @Default  {false}
                     */
                    showLabels?: boolean,

                    /**
                     * set the smartLabelSize property
                     * @Default  {fixed}
                     */
                    smartLabelSize?: undefined.LabelSize | string
            }
            declare         export interface LayersLegendSettings {

                /**
                 * Determines whether the legend should be placed outside or inside the map bounds
                 * @Default  {false}
                 */
                dockOnMap?: boolean,

                    /**
                     * Determines the legend placement and it is valid only when dockOnMap is true
                     * @Default  {top}
                     */
                    dockPosition?: undefined.DockPosition | string,

                    /**
                     * height value for legend setting
                     * @Default  {0}
                     */
                    height?: number,

                    /**
                     * to get icon value for legend setting
                     * @Default  {rectangle}
                     */
                    icon?: undefined.LegendIcons | string,

                    /**
                     * icon height value for legend setting
                     * @Default  {20}
                     */
                    iconHeight?: number,

                    /**
                     * icon Width value for legend setting
                     * @Default  {20}
                     */
                    iconWidth?: number,

                    /**
                     * set the orientation of legend labels
                     * @Default  {vertical}
                     */
                    labelOrientation?: undefined.LabelOrientation | string,

                    /**
                     * to get leftLabel value for legend setting
                     * @Default  {null}
                     */
                    leftLabel?: string,

                    /**
                     * to get mode of legend setting
                     * @Default  {default}
                     */
                    mode?: undefined.Mode | string,

                    /**
                     * set the position of legend settings
                     * @Default  {topleft}
                     */
                    position?: undefined.Position | string,

                    /**
                     * x position value for legend setting
                     * @Default  {0}
                     */
                    positionX?: number,

                    /**
                     * y position value for legend setting
                     * @Default  {0}
                     */
                    positionY?: number,

                    /**
                     * to get rightLabel value for legend setting
                     * @Default  {null}
                     */
                    rightLabel?: string,

                    /**
                     * Enables or Disables the showLabels
                     * @Default  {false}
                     */
                    showLabels?: boolean,

                    /**
                     * Enables or Disables the showLegend
                     * @Default  {false}
                     */
                    showLegend?: boolean,

                    /**
                     * to get title of legend setting
                     * @Default  {null}
                     */
                    title?: string,

                    /**
                     * to get type of legend setting
                     * @Default  {layers}
                     */
                    type?: undefined.LegendType | string,

                    /**
                     * width value for legend setting
                     * @Default  {0}
                     */
                    width?: number
            }
            declare         export interface LayersShapeSettingsColorMappingsRangeColorMapping {

                /**
                 * Specifies the start range colorMappings in the shape layer of map.
                 * @Default  {null}
                 */
                from?: number,

                    /**
                     * Specifies the to range colorMappings in the shape layer of map.
                     * @Default  {null}
                     */
                    to?: number,

                    /**
                     * Specifies the gradientColors in the shape layer of map.
                     * @Default  {null}
                     */
                    gradientColors?: Array<any >
            }
            declare         export interface LayersShapeSettingsColorMappingsEqualColorMapping {

                /**
                 * Specifies the equalColorMapping value in the shape layer of map.
                 * @Default  {null}
                 */
                value?: string,

                    /**
                     * Specifies the equalColorMapping color in the shape layer of map.
                     * @Default  {null}
                     */
                    color?: string
            }
            declare         export interface LayersShapeSettingsColorMappings {

                /**
                 * Specifies the range colorMappings in the shape layer of map.
                 * @Default  {null}
                 */
                rangeColorMapping?: Array<LayersShapeSettingsColorMappingsRangeColorMapping>,

                    /**
                     * Specifies the equalColorMapping in the shape layer of map.
                     * @Default  {null}
                     */
                    equalColorMapping?: Array<LayersShapeSettingsColorMappingsEqualColorMapping >
            }
            declare         export interface LayersShapeSettings {

                /**
                 * Enables or Disables the auto fill colors for shape layer in map. When this property value set to true, shapes will be filled with palette colors.
                 * @Default  {false}
                 */
                autoFill?: boolean,

                    /**
                     * Specifies the colorMappings of the shape layer in map
                     * @Default  {null}
                     */
                    colorMappings?: LayersShapeSettingsColorMappings,

                    /**
                     * Specifies the shape color palette value of the shape layer in map. Accepted colorPalette values are palette1, palette2, palette3 and custompalette.
                     * @Default  {palette1}
                     */
                    colorPalette?: undefined.ColorPalette | string,

                    /**
                     * Specifies the shape color valuePath of the shape layer in map
                     * @Default  {null}
                     */
                    colorValuePath?: string,

                    /**
                     * Enables or Disables the gradient colors for map shapes.
                     * @Default  {false}
                     */
                    enableGradient?: boolean,

                    /**
                     * Specifies the shape fill color of the shape layer in map
                     * @Default  {#E5E5E5}
                     */
                    fill?: string,

                    /**
                     * Specifies the mouse over width of the shape layer in map
                     * @Default  {1}
                     */
                    highlightBorderWidth?: number,

                    /**
                     * Specifies the mouse hover color of the shape layer in map
                     * @Default  {gray}
                     */
                    highlightColor?: string,

                    /**
                     * Specifies the mouse over stroke color of the shape layer in map
                     * @Default  {#C1C1C1}
                     */
                    highlightStroke?: string,

                    /**
                     * Specifies the shape selection color of the shape layer in map
                     * @Default  {gray}
                     */
                    selectionColor?: string,

                    /**
                     * Specifies the shape selection stroke color of the shape layer in map
                     * @Default  {#C1C1C1}
                     */
                    selectionStroke?: string,

                    /**
                     * Specifies the shape selection stroke width of the shape layer in map
                     * @Default  {1}
                     */
                    selectionStrokeWidth?: number,

                    /**
                     * Specifies the shape stroke color of the shape layer in map
                     * @Default  {#C1C1C1}
                     */
                    stroke?: string,

                    /**
                     * Specifies the shape stroke thickness value of the shape layer in map
                     * @Default  {0.2}
                     */
                    strokeThickness?: number,

                    /**
                     * Specifies the shape valuePath of the shape layer in map
                     * @Default  {null}
                     */
                    valuePath?: string
            }
            declare         export interface Layer {

                /**
                 * to get the type of bing map.
                 * @Default  {aerial}
                 */
                bingMapType?: undefined.BingMapType | string,

                    /**
                     * Specifies the bubble settings for map
                     */
                    bubbleSettings?: LayersBubbleSettings,

                    /**
                     * Specifies the datasource for the shape layer
                     */
                    dataSource?: any,

                    /**
                     * Specifies the data path of shape
                     */
                    shapeDataPath?: string,

                    /**
                     * Specifies the data path of shape
                     */
                    shapePropertyPath?: string,

                    /**
                     * Enables or disables the shape mouse hover
                     * @Default  {false}
                     */
                    enableMouseHover?: boolean,

                    /**
                     * Enables or disables the shape selection
                     * @Default  {true}
                     */
                    enableSelection?: boolean,

                    /**
                     * }
                     * @Default  {null}
                     */
                    key?: string,

                    /**
                     * Options for enabling and configuring labelSettings labelPath, smartLabelSize, labelLength etc.,
                     */
                    labelSettings?: LayersLabelSettings,

                    /**
                     * Specifies the map type.
                     * @Default  {'geometry'}
                     */
                    layerType?: undefined.LayerType | string,

                    /**
                     * Options for enabling and configuring legendSettings position, height, width, mode, type etc.,
                     */
                    legendSettings?: LayersLegendSettings,

                    /**
                     * Specifies the map items template for shapes.
                     */
                    mapItemsTemplate?: string,

                    /**
                     * Specify markers for shape layer.
                     * @Default  {[]}
                     */
                    markers?: Array<any>,

                    /**
                     * Specifies the map marker template for map layer.
                     * @Default  {null}
                     */
                    markerTemplate?: string,

                    /**
                     * Specify selectedMapShapes for shape layer
                     * @Default  {[]}
                     */
                    selectedMapShapes?: Array<any>,

                    /**
                     * Specifies the selection mode of the map. Accepted selection mode values are Default and Multiple.
                     * @Default  {default}
                     */
                    selectionMode?: undefined.SelectionMode | string,

                    /**
                     * Specifies the shape data for the shape layer
                     */
                    shapeData?: any,

                    /**
                     * Specifies the shape settings of map layer
                     */
                    shapeSettings?: LayersShapeSettings,

                    /**
                     * Shows or hides the map items.
                     * @Default  {false}
                     */
                    showMapItems?: boolean,

                    /**
                     * Shows or hides the tooltip for shapes
                     * @Default  {false}
                     */
                    showTooltip?: boolean,

                    /**
                     * Specifies the tooltip template for shapes.
                     */
                    tooltipTemplate?: string,

                    /**
                     * Specifies the URL template for the OSM type map.
                     * @Default  {'http://a.tile.openstreetmap.org/level/tileX/tileY.png'}
                     */
                    urlTemplate?: string
            }
        }

        declare module 'TreeMap' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface TreeMapItemSelectedEventArgs {

                /**
                 * Returns selected treeMapItem object.
                 */
                originalEvent?: any
            }
            declare         export interface UniColorMapping {

                /**
                 * Specifies the uniform color mapping of the treemap
                 * @Default  {null}
                 */
                color?: string
            }
            declare         export interface DesaturationColorMapping {

                /**
                 * Specifies the to value for desaturation color mapping
                 * @Default  {0}
                 */
                to?: number,

                    /**
                     * Specifies the color for desaturationColorMapping
                     * @Default  {null}
                     */
                    color?: string,

                    /**
                     * Specifies the from value for desaturation color mapping
                     * @Default  {0}
                     */
                    from?: number,

                    /**
                     * Specifies the rangeMaximum value for desaturation color mapping
                     * @Default  {0}
                     */
                    rangeMaximum?: number,

                    /**
                     * Specifies the rangeMinimum value for desaturation color mapping
                     * @Default  {0}
                     */
                    rangeMinimum?: number
            }
            declare         export interface PaletteColorMapping {

                /**
                 * Specifies the colors of the paletteColorMapping
                 * @Default  {[]}
                 */
                colors?: Array<any >
            }
            declare         export interface GroupColorMapping {

                /**
                 * Specifies the groupID for GroupColorMapping.
                 * @Default  {null}
                 */
                groupID?: string
            }
            declare         export interface LegendSettings {

                /**
                 * Specifies the height for legend
                 * @Default  {30}
                 */
                height?: number,

                    /**
                     * Specifies the width for legend
                     * @Default  {100}
                     */
                    width?: number,

                    /**
                     * Specifies the iconHeight for legend
                     * @Default  {15}
                     */
                    iconHeight?: number,

                    /**
                     * Specifies the iconWidth for legend
                     * @Default  {15}
                     */
                    iconWidth?: number,

                    /**
                     * Specifies the template for legendSettings
                     * @Default  {null}
                     */
                    template?: string,

                    /**
                     * Specifies the mode for legendSettings whether defaul or interactive mode
                     * @Default  {default}
                     */
                    mode?: string,

                    /**
                     * Specifies the title text for legend
                     */
                    title?: string,

                    /**
                     * Specifies the leftLabel text for legend
                     */
                    leftLabel?: string,

                    /**
                     * Specifies the rightLabel text for legend
                     */
                    rightLabel?: string,

                    /**
                     * Specifies the dockPosition text for legend
                     * @Default  {top}
                     */
                    dockPosition?: string,

                    /**
                     * Specifies the alignment text for legend
                     * @Default  {near}
                     */
                    alignment?: string,

                    /**
                     * Specifies the alignment text for legend
                     * @Default  {0}
                     */
                    columnCount?: number
            }
            declare         export interface LeafItemSettings {

                /**
                 * Specifies the border brush color of the leaf item.
                 * @Default  {white}
                 */
                borderBrush?: string,

                    /**
                     * Specifies the border thickness of the leaf item.
                     * @Default  {1}
                     */
                    borderThickness?: number,

                    /**
                     * Specifies the label template of the leaf item.
                     * @Default  {null}
                     */
                    itemTemplate?: string,

                    /**
                     * Specifies the label path of the leaf item.
                     * @Default  {null}
                     */
                    labelPath?: string,

                    /**
                     * Specifies the position of the leaf labels.
                     * @Default  {center}
                     */
                    labelPosition?: undefined.Position | string,

                    /**
                     * Specifies the mode of label visibility
                     * @Default  {visible}
                     */
                    labelVisibilityMode?: undefined.VisibilityMode | string,

                    /**
                     * Shows or hides the label of the leaf item.
                     * @Default  {false}
                     */
                    showLabels?: boolean
            }
            declare         export interface RangeColorMapping {

                /**
                 * Specifies the color value for rangeColorMapping.
                 * @Default  {null}
                 */
                color?: string,

                    /**
                     * specifies the gradient colors for th given range value
                     * @Default  {[]}
                     */
                    gradientColors?: Array<any>,

                    /**
                     * Specifies the from value for rangeColorMapping.
                     * @Default  {-1}
                     */
                    from?: number,

                    /**
                     * Specifies the legend label value for rangeColorMapping.
                     * @Default  {null}
                     */
                    legendLabel?: string,

                    /**
                     * Specifies the to value for rangeColorMapping.
                     * @Default  {-1}
                     */
                    to?: number
            }
            declare         export interface Level {

                /**
                 * specifies the group background
                 * @Default  {null}
                 */
                groupBackground?: string,

                    /**
                     * Specifies the group border color for tree map level.
                     * @Default  {null}
                     */
                    groupBorderColor?: string,

                    /**
                     * Specifies the group border thickness for tree map level.
                     * @Default  {1}
                     */
                    groupBorderThickness?: number,

                    /**
                     * Specifies the group gap for tree map level.
                     * @Default  {1}
                     */
                    groupGap?: number,

                    /**
                     * Specifies the group padding for tree map level.
                     * @Default  {4}
                     */
                    groupPadding?: number,

                    /**
                     * Specifies the group path for tree map level.
                     */
                    groupPath?: string,

                    /**
                     * Specifies the header height for tree map level.
                     * @Default  {0}
                     */
                    headerHeight?: number,

                    /**
                     * Specifies the header template for tree map level.
                     * @Default  {null}
                     */
                    headerTemplate?: string,

                    /**
                     * Specifies the mode of header visibility
                     * @Default  {visible}
                     */
                    headerVisibilityMode?: undefined.VisibilityMode | string,

                    /**
                     * Specifies the position of the labels.
                     * @Default  {center}
                     */
                    labelPosition?: undefined.Position | string,

                    /**
                     * Specifies the label template for tree map level.
                     * @Default  {null}
                     */
                    labelTemplate?: string,

                    /**
                     * Specifies the mode of label visibility
                     * @Default  {visible}
                     */
                    labelVisibilityMode?: undefined.VisibilityMode | string,

                    /**
                     * Shows or hides the header for tree map level.
                     * @Default  {false}
                     */
                    showHeader?: boolean,

                    /**
                     * Shows or hides the labels for tree map level.
                     * @Default  {false}
                     */
                    showLabels?: boolean
            }
        }

        declare module 'Diagram' {
            declare         export interface Options {

                /**
                 * name of the file to be downloaded.
                 */
                fileName?: string,

                    /**
                     * format of the exported file/data. See [File Formats](/js/api/global#fileformats).
                     */
                    format?: string,

                    /**
                     * to set whether to export diagram as a file or as raw data. See [Export Modes](/js/api/global#exportmodes).
                     */
                    mode?: string,

                    /**
                     * to set the region of the diagram to be exported. See [Region](/js/api/global#region).
                     */
                    region?: string,

                    /**
                     * to export any custom region of diagram.
                     */
                    bounds?: any,

                    /**
                     * to set margin to the exported data.
                     */
                    margin?: any
            }
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface AutoScrollChangeEventArgs {

                /**
                 * Returns the delay between subsequent auto scrolls
                 */
                delay?: string
            }
            declare         export interface ClickEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the button model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event
                     */
                    type?: string,

                    /**
                     * return the button state
                     */
                    status?: boolean,

                    /**
                     * return the event model for sever side processing. 
                     */
                    e?: any
            }
            declare         export interface ConnectionChangeEventArgs {

                /**
                 * parameter returns the connection that is changed between nodes, ports or points
                 */
                element?: any,

                    /**
                     * parameter returns the new source node or target node of the connector
                     */
                    connection?: string,

                    /**
                     * parameter returns the new source port or target port of the connector
                     */
                    port?: any,

                    /**
                     * parameter defines whether to cancel the change or not
                     */
                    cancel?: boolean
            }
            declare         export interface ConnectorCollectionChangeEventArgs {

                /**
                 * parameter returns whether the connector is inserted or removed
                 */
                changeType?: string,

                    /**
                     * parameter returns the connector that is to be added or deleted
                     */
                    element?: any,

                    /**
                     * parameter defines whether to cancel the collection change or not
                     */
                    cancel?: boolean
            }
            declare         export interface ConnectorSourceChangeEventArgs {

                /**
                 * returns the connector, the source point of which is being dragged
                 */
                element?: any,

                    /**
                     * returns the source node of the element
                     */
                    node?: any,

                    /**
                     * returns the source point of the element
                     */
                    point?: any,

                    /**
                     * returns the source port of the element
                     */
                    port?: any,

                    /**
                     * returns the state of connection end point dragging(starting, dragging, completed)
                     */
                    dragState?: string,

                    /**
                     * parameter defines whether to cancel the change or not
                     */
                    cancel?: boolean
            }
            declare         export interface ConnectorTargetChangeEventArgs {

                /**
                 * parameter returns the connector, the target point of which is being dragged
                 */
                element?: any,

                    /**
                     * returns the target node of the element
                     */
                    node?: any,

                    /**
                     * returns the target point of the element
                     */
                    point?: any,

                    /**
                     * returns the target port of the element
                     */
                    port?: any,

                    /**
                     * returns the state of connection end point dragging(starting, dragging, completed)
                     */
                    dragState?: string,

                    /**
                     * parameter defines whether to cancel the change or not
                     */
                    cancel?: boolean
            }
            declare         export interface ContextMenuBeforeOpenEventArgs {

                /**
                 * parameter returns the diagram object
                 */
                diagram?: any,

                    /**
                     * parameter returns the actual arguments from context menu
                     */
                    contextmenu?: any,

                    /**
                     * parameter returns the object that was clicked
                     */
                    target?: any
            }
            declare         export interface ContextMenuClickEventArgs {

                /**
                 * returns clicked menu item text.
                 */
                text?: string,

                    /**
                     * returns clicked menu item element.
                     */
                    element?: any,

                    /**
                     * returns the selected item.
                     */
                    selectedItem?: number
            }
            declare         export interface DoubleClickEventArgs {

                /**
                 * parameter returns the object that is actually clicked
                 */
                actualObject?: any,

                    /**
                     * parameter returns the selected object
                     */
                    element?: any
            }
            declare         export interface DragEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the draggable model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event
                     */
                    type?: string,

                    /**
                     * returns the event model values
                     */
                    event?: any,

                    /**
                     * returns the exact mouse down target element
                     */
                    target?: any
            }
            declare         export interface DragEnterEventArgs {

                /**
                 * parameter returns the node or connector that is dragged into diagram
                 */
                element?: any,

                    /**
                     * parameter returns whether to add or remove the symbol from diagram
                     */
                    cancel?: boolean
            }
            declare         export interface DragLeaveEventArgs {

                /**
                 * parameter returns the node or connector that is dragged outside of the diagram
                 */
                element?: any
            }
            declare         export interface DragOverEventArgs {

                /**
                 * parameter returns the node or connector that is dragged over diagram
                 */
                element?: any,

                    /**
                     * parameter defines whether the symbol can be dropped at the current mouse position
                     */
                    allowDrop?: boolean,

                    /**
                     * parameter returns the node/connector over which the symbol is dragged
                     */
                    target?: any,

                    /**
                     * parameter returns the previous position of the node/connector
                     */
                    oldValue?: any,

                    /**
                     * parameter returns the new position of the node/connector
                     */
                    newValue?: any,

                    /**
                     * parameter returns whether or not to cancel the dragOver event
                     */
                    cancel?: boolean
            }
            declare         export interface DropEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the autocomplete model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event
                     */
                    type?: string,

                    /**
                     * returns the element which accepts the droppable element.
                     */
                    targetElement?: any
            }
            declare         export interface GroupChangeEventArgs {

                /**
                 * parameter returns the object that is added to/removed from a group
                 */
                element?: any,

                    /**
                     * parameter returns the old parent group(if any) of the object
                     */
                    oldParent?: any,

                    /**
                     * parameter returns the new parent group(if any) of the object
                     */
                    newParent?: any,

                    /**
                     * parameter returns the cause of group change("group", unGroup")
                     */
                    cause?: string
            }
            declare         export interface HistoryChangeEventArgs {

                /**
                 * An array of objects, where each object represents the changes made in last undo/redo. To explore how the changes are defined, refer [Undo Redo Changes](#undo-redo-changes)
                 */
                changes?: Array<any>,

                    /**
                     * A collection of objects that are changed in the last undo/redo
                     */
                    Source?: Array<any >
            }
            declare         export interface ItemClickEventArgs {

                /**
                 * parameter returns the object that was actually clicked
                 */
                actualObject?: any,

                    /**
                     * parameter returns the object that is selected
                     */
                    selectedObject?: any,

                    /**
                     * parameter returns whether or not to cancel the drop event
                     */
                    cancel?: boolean,

                    /**
                     * parameter returns the actual click event arguments that explains which button is clicked
                     */
                    event?: any
            }
            declare         export interface MouseEnterEventArgs {

                /**
                 * parameter returns the target node or connector
                 */
                element?: any,

                    /**
                     * parameter returns the object from where the selected object is dragged
                     */
                    source?: any,

                    /**
                     * parameter returns the target object over which the selected object is dragged
                     */
                    target?: any
            }
            declare         export interface MouseLeaveEventArgs {

                /**
                 * parameter returns the target node or connector
                 */
                element?: any,

                    /**
                     * parameter returns the object from where the selected object is dragged
                     */
                    source?: any,

                    /**
                     * parameter returns the target object over which the selected object is dragged
                     */
                    target?: any
            }
            declare         export interface MouseOverEventArgs {

                /**
                 * parameter returns the target node or connector
                 */
                element?: any,

                    /**
                     * parameter returns the object from where the element is dragged
                     */
                    source?: any,

                    /**
                     * parameter returns the object over which the element is being dragged.
                     */
                    target?: any
            }
            declare         export interface NodeCollectionChangeEventArgs {

                /**
                 * parameter returns whether the node is to be added or removed
                 */
                changeType?: string,

                    /**
                     * parameter returns the node which needs to be added or deleted
                     */
                    element?: any,

                    /**
                     * parameter defines whether to cancel the collection change or not
                     */
                    cancel?: boolean
            }
            declare         export interface PropertyChangeEventArgs {

                /**
                 * parameter returns the selected element
                 */
                element?: any,

                    /**
                     * parameter returns the action is nudge or not
                     */
                    cause?: string,

                    /**
                     * parameter returns the new value of the node property that is being changed
                     */
                    newValue?: any,

                    /**
                     * parameter returns the old value of the property that is being changed
                     */
                    oldValue?: any,

                    /**
                     * parameter returns the name of the property that is changed
                     */
                    propertyName?: string
            }
            declare         export interface RotationChangeEventArgs {

                /**
                 * parameter returns the node that is rotated
                 */
                element?: any,

                    /**
                     * parameter returns the previous rotation angle
                     */
                    oldValue?: any,

                    /**
                     * parameter returns the new rotation angle
                     */
                    newValue?: any,

                    /**
                     * parameter to specify whether or not to cancel the event
                     */
                    cancel?: boolean
            }
            declare         export interface ScrollChangeEventArgs {

                /**
                 * Parameter returns the new zoom value, horizontal and vertical scroll offsets.
                 */
                newValues?: any,

                    /**
                     * parameter returns the previous zoom value, horizontal and vertical scroll offsets.
                     */
                    oldValues?: any
            }
            declare         export interface SegmentChangeEventArgs {

                /**
                 * Parameter returns the connector that is being edited
                 */
                element?: any,

                    /**
                     * parameter returns the state of editing (starting, dragging, completed)
                     */
                    dragState?: string,

                    /**
                     * parameter returns the current mouse position
                     */
                    point?: any,

                    /**
                     * parameter to specify whether or not to cancel the event
                     */
                    cancel?: boolean
            }
            declare         export interface SelectionChangeEventArgs {

                /**
                 * returns whether an element is selected or unselected
                 */
                changeType?: string,

                    /**
                     * returns the node or connector that is selected or unselected
                     */
                    element?: any
            }
            declare         export interface SizeChangeEventArgs {

                /**
                 * parameter returns node that was resized
                 */
                element?: any,

                    /**
                     * parameter to cancel the size change
                     */
                    cancel?: boolean,

                    /**
                     * parameter returns the new width, height, offsetX and offsetY values of the element that is being resized
                     */
                    newValue?: any,

                    /**
                     * parameter returns the previous width,height,offsetX and offsetY values of the element that is being resized
                     */
                    oldValue?: any,

                    /**
                     * parameter returns the state of resizing(starting,resizing,completed)
                     */
                    resizeState?: string,

                    /**
                     * parameter returns the difference between new and old value
                     */
                    offset?: any
            }
            declare         export interface TextChangeEventArgs {

                /**
                 * parameter returns the node that contains the text being edited
                 */
                element?: any,

                    /**
                     * parameter returns the new text
                     */
                    value?: string,

                    /**
                     * parameter returns the keyCode of the key entered
                     */
                    keyCode?: string
            }
            declare         export interface CreateEventArgs {

                /**
                 * if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the scroller model
                     */
                    model?: undefined.Model,

                    /**
                     * returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface BackgroundImage {

                /**
                 * Defines how to align the background image over the diagram area.
                 * @Default  {ej.datavisualization.Diagram.ImageAlignment.XMidYMid}
                 */
                alignment?: undefined.ImageAlignment | string,

                    /**
                     * Defines how the background image should be scaled/stretched
                     * @Default  {ej.datavisualization.Diagram.ScaleConstraints.Meet}
                     */
                    scale?: undefined.ScaleConstraints | string,

                    /**
                     * Sets the source path of the background image
                     * @Default  {null}
                     */
                    source?: string
            }
            declare         export interface CommandManagerCommandsGesture {

                /**
                 * Sets the key value, on recognition of which the command will be executed.
                 * @Default  {ej.datavisualization.Diagram.Keys.None}
                 */
                key?: undefined.Keys | string,

                    /**
                     * Sets a combination of key modifiers, on recognition of which the command will be executed.
                     * @Default  {ej.datavisualization.Diagram.KeyModifiers.None}
                     */
                    keyModifiers?: undefined.KeyModifiers | string
            }
            declare         export interface CommandManagerCommands {

                /**
                 * A method that defines whether the command is executable at the moment or not.
                 */
                canExecute?: Function,

                    /**
                     * A method that defines what to be executed when the key combination is recognized.
                     */
                    execute?: Function,

                    /**
                     * Defines a combination of keys and key modifiers, on recognition of which the command will be executed
                     */
                    gesture?: CommandManagerCommandsGesture,

                    /**
                     * Defines any additional parameters that are required at runtime
                     * @Default  {null}
                     */
                    parameter?: any
            }
            declare         export interface CommandManager {

                /**
                 * An object that maps a set of command names with the corresponding command objects
                 * @Default  {{}}
                 */
                commands?: CommandManagerCommands
            }
            declare         export interface ConnectorsLabelsMargin {

                /**
                 * To set the margin of the label in right direction
                 * @Default  {0}
                 */
                right?: number,

                    /**
                     * To set the margin of the label in left direction
                     * @Default  {0}
                     */
                    left?: number,

                    /**
                     * To set the margin of the label in top direction
                     * @Default  {0}
                     */
                    top?: number,

                    /**
                     * To set the margin of the label in bottom direction
                     * @Default  {0}
                     */
                    bottom?: number
            }
            declare         export interface ConnectorsLabel {

                /**
                 * Defines how the label should be aligned with respect to the segment
                 * @Default  {ej.datavisualization.Diagram.Alignment.Center}
                 */
                alignment?: undefined.Alignment | string,

                    /**
                     * Enables/disables the bold style
                     * @Default  {false}
                     */
                    bold?: boolean,

                    /**
                     * Sets the border color of the label
                     * @Default  {transparent}
                     */
                    borderColor?: string,

                    /**
                     * Sets the border width of the label
                     * @Default  {0}
                     */
                    borderWidth?: number,

                    /**
                     * Defines whether the label should be aligned within the connector boundaries
                     * @Default  {true}
                     */
                    boundaryConstraints?: boolean,

                    /**
                     * Sets the fill color of the text area
                     * @Default  {transparent}
                     */
                    fillColor?: string,

                    /**
                     * Sets the font color of the text
                     * @Default  {black}
                     */
                    fontColor?: string,

                    /**
                     * Sets the font family of the text
                     * @Default  {Arial}
                     */
                    fontFamily?: string,

                    /**
                     * Defines the font size of the text
                     * @Default  {12}
                     */
                    fontSize?: number,

                    /**
                     * Sets the horizontal alignment of the label.
                     * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Center}
                     */
                    horizontalAlignment?: undefined.HorizontalAlignment | string,

                    /**
                     * Enables/disables the italic style
                     * @Default  {false}
                     */
                    italic?: boolean,

                    /**
                     * Gets whether the label is currently being edited or not.
                     * @Default  {ej.datavisualization.Diagram.LabelEditMode.Edit}
                     */
                    mode?: undefined.LabelEditMode | string,

                    /**
                     * Sets the unique identifier of the label
                     */
                    name?: string,

                    /**
                     * Sets the fraction/ratio(relative to connector) that defines the position of the label
                     * @Default  {ej.datavisualization.Diagram.Point(0.5, 0.5)}
                     */
                    offset?: any,

                    /**
                     * Sets the fraction/ratio(relative to connector) that defines the position of the label
                     * @Default  {ej.datavisualization.Diagram.Point(0.5, 0.5)}
                     */
                    margin?: ConnectorsLabelsMargin,

                    /**
                     * Defines the transparency of labels
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Defines whether the label is editable or not
                     * @Default  {false}
                     */
                    readOnly?: boolean,

                    /**
                     * Defines whether the label should be positioned whether relative to segments or connector boundaries
                     * @Default  {ej.datavisualization.Diagram.LabelRelativeMode.SegmentPath}
                     */
                    relativeMode?: undefined.LabelRelativeMode | string,

                    /**
                     * Defines the angle to which the label needs to be rotated
                     * @Default  {0}
                     */
                    rotateAngle?: number,

                    /**
                     * Sets the position of the label with respect to the total segment length
                     * @Default  {0.5}
                     */
                    segmentOffset?: string,

                    /**
                     * Defines the label text
                     */
                    text?: string,

                    /**
                     * Defines how to align the text inside the label.
                     * @Default  {ej.datavisualization.Diagram.TextAlign.Center}
                     */
                    textAlign?: undefined.TextAlign | string,

                    /**
                     * Sets how to decorate the label text.
                     * @Default  {ej.datavisualization.Diagram.TextDecorations.None}
                     */
                    textDecoration?: undefined.TextDecorations | string,

                    /**
                     * Sets the vertical alignment of the label.
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Center}
                     */
                    verticalAlignment?: undefined.VerticalAlignment | string,

                    /**
                     * Enables or disables the visibility of the label
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Sets the width of the label(the maximum value of label width and the connector width will be considered as label width)
                     * @Default  {50}
                     */
                    width?: number,

                    /**
                     * Defines how the label text needs to be wrapped.
                     * @Default  {ej.datavisualization.Diagram.TextWrapping.WrapWithOverflow}
                     */
                    wrapping?: undefined.TextWrapping | string
            }
            declare         export interface ConnectorsSegment {

                /**
                 * Sets the direction of orthogonal segment
                 */
                direction?: string,

                    /**
                     * Describes the length of orthogonal segment
                     * @Default  {undefined}
                     */
                    length?: number,

                    /**
                     * Describes the end point of bezier/straight segment
                     * @Default  {Diagram.Point()}
                     */
                    point?: undefined.ConnectorsSourcePoint | string,

                    /**
                     * Defines the first control point of the bezier segment
                     * @Default  {null}
                     */
                    point1?: undefined.ConnectorsSourcePoint | string,

                    /**
                     * Defines the second control point of bezier segment
                     * @Default  {null}
                     */
                    point2?: undefined.ConnectorsSourcePoint | string,

                    /**
                     * Sets the type of the segment.
                     * @Default  {ej.datavisualization.Diagram.Segments.Straight}
                     */
                    type?: undefined.Segments | string,

                    /**
                     * Describes the length and angle between the first control point and the start point of bezier segment
                     * @Default  {null}
                     */
                    vector1?: any,

                    /**
                     * Describes the length and angle between the second control point and end point of bezier segment
                     * @Default  {null}
                     */
                    vector2?: any
            }
            declare         export interface ConnectorsShape {

                /**
                 * Sets the type of the connector
                 * @Default  {ej.datavisualization.Diagram.ConnectorShapes.BPMN}
                 */
                type?: undefined.ConnectorShapes | string,

                    /**
                     * Sets the type of the flow in a BPMN Process
                     * @Default  {ej.datavisualization.Diagram.BPMNFlows.Sequence}
                     */
                    flow?: undefined.BPMNFlows | string,

                    /**
                     * Sets the type of the Association in a BPMN Process
                     * @Default  {ej.datavisualization.Diagram.AssociationFlows.Default}
                     */
                    association?: undefined.AssociationFlows | string,

                    /**
                     * Sets the type of the message flow. Applicable, if the connector is of type &quot;BPMN&quot;
                     * @Default  {ej.datavisualization.Diagram.BPMNMessageFlows.Default}
                     */
                    message?: undefined.BPMNMessageFlows | string,

                    /**
                     * Sets the type of BPMN sequence flow
                     * @Default  {ej.datavisualization.Diagram.BPMNSequenceFlows.Normal}
                     */
                    sequence?: undefined.BPMNSequenceFlows | string,

                    /**
                     * Defines the role of the connector in a UML Class Diagram. Applicable, if the type of the connector is &quot;classifier&quot;.
                     * @Default  {ej.datavisualization.Diagram.ClassifierShapes.Association}
                     */
                    relationship?: string,

                    /**
                     * Defines the multiplicity of a relationship in UML class diagram
                     */
                    multiplicity?: string
            }
            declare         export interface ConnectorsSourceDecorator {

                /**
                 * Sets the border color of the source decorator
                 * @Default  {black}
                 */
                borderColor?: string,

                    /**
                     * Sets the border width of the decorator
                     * @Default  {1}
                     */
                    borderWidth?: number,

                    /**
                     * Sets the fill color of the source decorator
                     * @Default  {black}
                     */
                    fillColor?: string,

                    /**
                     * Sets the height of the source decorator
                     * @Default  {8}
                     */
                    height?: number,

                    /**
                     * Defines the custom shape of the source decorator
                     */
                    pathData?: string,

                    /**
                     * Defines the shape of the source decorator.
                     * @Default  {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
                     */
                    shape?: undefined.DecoratorShapes | string,

                    /**
                     * Defines the width of the source decorator
                     * @Default  {8}
                     */
                    width?: number
            }
            declare         export interface ConnectorsSourcePoint {

                /**
                 * Defines the x-coordinate of a position
                 * @Default  {0}
                 */
                x?: number,

                    /**
                     * Defines the y-coordinate of a position
                     * @Default  {0}
                     */
                    y?: number
            }
            declare         export interface ConnectorsTargetDecorator {

                /**
                 * Sets the border color of the decorator
                 * @Default  {black}
                 */
                borderColor?: string,

                    /**
                     * Sets the color with which the decorator will be filled
                     * @Default  {black}
                     */
                    fillColor?: string,

                    /**
                     * Defines the height of the target decorator
                     * @Default  {8}
                     */
                    height?: number,

                    /**
                     * Defines the custom shape of the target decorator
                     */
                    pathData?: string,

                    /**
                     * Defines the shape of the target decorator.
                     * @Default  {ej.datavisualization.Diagram.DecoratorShapes.Arrow}
                     */
                    shape?: undefined.DecoratorShapes | string,

                    /**
                     * Defines the width of the target decorator
                     * @Default  {8}
                     */
                    width?: number
            }
            declare         export interface Connector {

                /**
                 * To maintain additional information about connectors
                 * @Default  {null}
                 */
                addInfo?: any,

                    /**
                     * Defines the width of the line bridges
                     * @Default  {10}
                     */
                    bridgeSpace?: number,

                    /**
                     * Enables or disables the behaviors of connectors.
                     * @Default  {ej.datavisualization.Diagram.ConnectorConstraints.Default}
                     */
                    constraints?: undefined.ConnectorConstraints | string,

                    /**
                     * Defines the radius of the rounded corner
                     * @Default  {0}
                     */
                    cornerRadius?: number,

                    /**
                     * Configures the styles of shapes
                     */
                    cssClass?: string,

                    /**
                     * Sets the horizontal alignment of the connector. Applicable, if the parent of the connector is a container.
                     * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Left}
                     */
                    horizontalAlign?: undefined.HorizontalAlignment | string,

                    /**
                     * A collection of JSON objects where each object represents a label.
                     * @Default  {[]}
                     */
                    labels?: Array<ConnectorsLabel>,

                    /**
                     * Sets the stroke color of the connector
                     * @Default  {black}
                     */
                    lineColor?: string,

                    /**
                     * Sets the pattern of dashes and gaps used to stroke the path of the connector
                     */
                    lineDashArray?: string,

                    /**
                     * Defines the padding value to ease the interaction with connectors
                     * @Default  {10}
                     */
                    lineHitPadding?: number,

                    /**
                     * Sets the width of the line
                     * @Default  {1}
                     */
                    lineWidth?: number,

                    /**
                     * Defines the minimum space to be left between the bottom of parent bounds and the connector. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginBottom?: number,

                    /**
                     * Defines the minimum space to be left between the left of parent bounds and the connector. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginLeft?: number,

                    /**
                     * Defines the minimum space to be left between the right of parent bounds and the connector. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginRight?: number,

                    /**
                     * Defines the minimum space to be left between the top of parent bounds and the connector. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginTop?: number,

                    /**
                     * Sets a unique name for the connector
                     */
                    name?: string,

                    /**
                     * Defines the transparency of the connector
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Defines the size and preview size of the node to add that to symbol palette. To explore palette item, refer Palette Item
                     * @Default  {null}
                     */
                    paletteItem?: any,

                    /**
                     * Sets the parent name of the connector.
                     */
                    parent?: string,

                    /**
                     * An array of JSON objects where each object represents a segment
                     * @Default  {[ { type:straight } ]}
                     */
                    segments?: Array<ConnectorsSegment>,

                    /**
                     * Defines the role/meaning of the connector
                     * @Default  {null}
                     */
                    shape?: ConnectorsShape,

                    /**
                     * Defines the source decorator of the connector
                     * @Default  {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
                     */
                    sourceDecorator?: ConnectorsSourceDecorator,

                    /**
                     * Sets the source node of the connector
                     */
                    sourceNode?: string,

                    /**
                     * Defines the space to be left between the source node and the source point of a connector
                     * @Default  {0}
                     */
                    sourcePadding?: number,

                    /**
                     * Describes the start point of the connector
                     * @Default  {ej.datavisualization.Diagram.Point()}
                     */
                    sourcePoint?: ConnectorsSourcePoint,

                    /**
                     * Sets the source port of the connector
                     */
                    sourcePort?: string,

                    /**
                     * Defines the target decorator of the connector
                     * @Default  {{ shape:arrow, width: 8, height:8, borderColor:black, fillColor:black }}
                     */
                    targetDecorator?: ConnectorsTargetDecorator,

                    /**
                     * Sets the target node of the connector
                     */
                    targetNode?: string,

                    /**
                     * Defines the space to be left between the target node and the target point of the connector
                     * @Default  {0}
                     */
                    targetPadding?: number,

                    /**
                     * Describes the end point of the connector
                     * @Default  {ej.datavisualization.Diagram.Point()}
                     */
                    targetPoint?: undefined.ConnectorsSourcePoint | string,

                    /**
                     * Sets the targetPort of the connector
                     */
                    targetPort?: string,

                    /**
                     * Defines the tooltip that should be shown when the mouse hovers over connector. For tooltip properties, refer Tooltip
                     * @Default  {null}
                     */
                    tooltip?: any,

                    /**
                     * To set the vertical alignment of connector (Applicable,if the parent is group).
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Top}
                     */
                    verticalAlign?: undefined.VerticalAlignment | string,

                    /**
                     * Enables or disables the visibility of connector
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Sets the z-index of the connector
                     * @Default  {0}
                     */
                    zOrder?: number
            }
            declare         export interface ContextMenu {

                /**
                 * Defines the collection of context menu items
                 * @Default  {[]}
                 */
                items?: Array<any>,

                    /**
                     * To set whether to display the default context menu items or not
                     * @Default  {false}
                     */
                    showCustomMenuItemsOnly?: boolean
            }
            declare         export interface DataSourceSettings {

                /**
                 * Defines the data source either as a collection of objects or as an instance of ej.DataManager
                 * @Default  {null}
                 */
                dataSource?: any,

                    /**
                     * Sets the unique id of the data source items
                     */
                    id?: string,

                    /**
                     * Defines the parent id of the data source item
                     * @Default  {''}
                     */
                    parent?: string,

                    /**
                     * Describes query to retrieve a set of data from the specified datasource
                     * @Default  {null}
                     */
                    query?: string,

                    /**
                     * Sets the unique id of the root data source item
                     */
                    root?: string,

                    /**
                     * Describes the name of the table on which the specified query has to be executed
                     * @Default  {null}
                     */
                    tableName?: string
            }
            declare         export interface DefaultSettings {

                /**
                 * Defines the default properties of the nodes
                 * @Default  {null}
                 */
                node?: any,

                    /**
                     * Defines the default properties of the connectors
                     * @Default  {null}
                     */
                    connector?: any
            }
            declare         export interface HistoryManager {

                /**
                 * A method that takes a history entry as argument and returns whether the specific entry can be popped or not
                 */
                canPop?: Function,

                    /**
                     * A method that ends grouping the changes
                     */
                    closeGroupAction?: Function,

                    /**
                     * A method that removes the history of a recent change made in diagram
                     */
                    pop?: Function,

                    /**
                     * A method that allows to track the custom changes made in diagram
                     */
                    push?: Function,

                    /**
                     * Defines what should be happened while trying to restore a custom change
                     * @Default  {null}
                     */
                    redo?: Function,

                    /**
                     * A method that starts to group the changes to revert/restore them in a single undo or redo
                     */
                    startGroupAction?: Function,

                    /**
                     * Defines what should be happened while trying to revert a custom change
                     */
                    undo?: Function
            }
            declare         export interface Layout {

                /**
                 * Specifies the custom bounds to arrange/align the layout
                 * @Default  {ej.datavisualization.Diagram.Rectangle()}
                 */
                bounds?: any,

                    /**
                     * Defines the fixed node with reference to which, the layout will be arranged and fixed node will not be repositioned
                     */
                    fixedNode?: string,

                    /**
                     * Customizes the orientation of trees/sub trees. For orientations, see Chart Orientations. For chart types, see Chart Types
                     * @Default  {null}
                     */
                    getLayoutInfo?: any,

                    /**
                     * Sets the space to be horizontally left between nodes
                     * @Default  {30}
                     */
                    horizontalSpacing?: number,

                    /**
                     * Defines the space to be left between layout bounds and layout.
                     * @Default  {ej.datavisualization.Diagram.Margin()}
                     */
                    margin?: any,

                    /**
                     * Defines how to horizontally align the layout within the layout bounds
                     * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Center}
                     */
                    horizontalAlignment?: undefined.HorizontalAlignment | string,

                    /**
                     * Defines how to vertically align the layout within the layout bounds
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Center}
                     */
                    verticalAlignment?: undefined.VerticalAlignment | string,

                    /**
                     * Sets the orientation/direction to arrange the diagram elements.
                     * @Default  {ej.datavisualization.Diagram.LayoutOrientations.TopToBottom}
                     */
                    orientation?: undefined.LayoutOrientations | string,

                    /**
                     * Sets the type of the layout based on which the elements will be arranged.
                     * @Default  {ej.datavisualization.Diagram.LayoutTypes.None}
                     */
                    type?: undefined.LayoutTypes | string,

                    /**
                     * Sets the space to be vertically left between nodes
                     * @Default  {30}
                     */
                    verticalSpacing?: number
            }
            declare         export interface NodesAnnotation {

                /**
                 * Sets the angle between the BPMN shape and the annotation
                 * @Default  {0}
                 */
                angle?: number,

                    /**
                     * Sets the direction of the text annotation
                     * @Default  {ej.datavisualization.Diagram.BPMNAnnotationDirections.Left}
                     */
                    direction?: undefined.BPMNAnnotationDirection | string,

                    /**
                     * Sets the height of the text annotation
                     * @Default  {20}
                     */
                    height?: number,

                    /**
                     * Sets the distance between the BPMN shape and the annotation
                     * @Default  {0}
                     */
                    length?: number,

                    /**
                     * Defines the additional information about the flow object in a BPMN Process
                     */
                    text?: string,

                    /**
                     * Sets the  width of the text annotation
                     * @Default  {20}
                     */
                    width?: number
            }
            declare         export interface NodesClassAttribute {

                /**
                 * Sets the name of the attribute
                 */
                name?: string,

                    /**
                     * Sets the data type of attribute
                     */
                    type?: string,

                    /**
                     * Defines the visibility of the attribute
                     * @Default  {ej.datavisualization.Diagram.ScopeValueDefaults.Public}
                     */
                    scope?: string
            }
            declare         export interface NodesClassMethod {

                /**
                 * Sets the visibility of the method.
                 * @Default  {ej.datavisualization.Diagram.ScopeValueDefaults.Public}
                 */
                scope?: string
            }
            declare         export interface NodesClass {

                /**
                 * Sets the name of class.
                 */
                name?: string,

                    /**
                     * Defines the collection of attributes
                     * @Default  {[]}
                     */
                    attributes?: Array<NodesClassAttribute>,

                    /**
                     * Defines the collection of methods of a Class.
                     * @Default  {[]}
                     */
                    methods?: Array<NodesClassMethod >
            }
            declare         export interface NodesContainer {

                /**
                 * Defines the orientation of the container. Applicable, if the group is a container.
                 * @Default  {vertical}
                 */
                orientation?: string,

                    /**
                     * Sets the type of the container. Applicable if the group is a container.
                     * @Default  {ej.datavisualization.Diagram.ContainerType.Canvas}
                     */
                    type?: undefined.ContainerType | string
            }
            declare         export interface NodesData {

                /**
                 * Sets the type of the BPMN Data object
                 * @Default  {ej.datavisualization.Diagram.BPMNDataObjects.None}
                 */
                type?: undefined.BPMNDataObjects | string,

                    /**
                     * Defines whether the BPMN data object is a collection or not
                     * @Default  {false}
                     */
                    collection?: boolean
            }
            declare         export interface NodesEnumerationMember {

                /**
                 * Sets the name of the enumeration member
                 */
                name?: string
            }
            declare         export interface NodesEnumeration {

                /**
                 * Sets the name of the Enumeration
                 */
                name?: string,

                    /**
                     * Defines the collection of enumeration members
                     * @Default  {[]}
                     */
                    members?: Array<NodesEnumerationMember >
            }
            declare         export interface NodesGradientLinearGradient {

                /**
                 * Defines the different colors and the region of color transitions
                 * @Default  {[]}
                 */
                stops?: Array<any>,

                    /**
                     * Defines the left most position(relative to node) of the rectangular region that needs to be painted
                     * @Default  {0}
                     */
                    x1?: number,

                    /**
                     * Defines the right most position(relative to node) of the rectangular region that needs to be painted
                     * @Default  {0}
                     */
                    x2?: number,

                    /**
                     * Defines the top most position(relative to node) of the rectangular region that needs to be painted
                     * @Default  {0}
                     */
                    y1?: number,

                    /**
                     * Defines the bottom most position(relative to node) of the rectangular region that needs to be painted
                     * @Default  {0}
                     */
                    y2?: number
            }
            declare         export interface NodesGradientRadialGradient {

                /**
                 * Defines the position of the outermost circle
                 * @Default  {0}
                 */
                cx?: number,

                    /**
                     * Defines the outer most circle of the radial gradient
                     * @Default  {0}
                     */
                    cy?: number,

                    /**
                     * Defines the innermost circle of the radial gradient
                     * @Default  {0}
                     */
                    fx?: number,

                    /**
                     * Defines the innermost circle of the radial gradient
                     * @Default  {0}
                     */
                    fy?: number,

                    /**
                     * Defines the different colors and the region of color transitions.
                     * @Default  {[]}
                     */
                    stops?: Array<any >
            }
            declare         export interface NodesGradientStop {

                /**
                 * Sets the color to be filled over the specified region
                 */
                color?: string,

                    /**
                     * Sets the position where the previous color transition ends and a new color transition starts
                     * @Default  {0}
                     */
                    offset?: number,

                    /**
                     * Describes the transparency level of the region
                     * @Default  {1}
                     */
                    opacity?: number
            }
            declare         export interface NodesGradient {

                /**
                 * Paints the node with linear color transitions
                 */
                LinearGradient?: NodesGradientLinearGradient,

                    /**
                     * Paints the node with radial color transitions. A focal point defines the beginning of the gradient, and a circle defines the end point of the gradient.
                     */
                    RadialGradient?: NodesGradientRadialGradient,

                    /**
                     * Defines the color and a position where the previous color transition ends and a new color transition starts
                     */
                    Stop?: NodesGradientStop
            }
            declare         export interface NodesInterfaceAttribute {

                /**
                 * Sets the name of the attribute
                 */
                name?: string,

                    /**
                     * Sets the type of the attribute
                     */
                    type?: string,

                    /**
                     * Sets the visibility of the attribute
                     */
                    scope?: string
            }
            declare         export interface NodesInterfaceMethod {

                /**
                 * Sets the visibility of the method
                 */
                scope?: string
            }
            declare         export interface NodesInterface {

                /**
                 * Sets the name of the interface
                 */
                name?: string,

                    /**
                     * Defines a collection of attributes of the interface
                     * @Default  {[]}
                     */
                    attributes?: Array<NodesInterfaceAttribute>,

                    /**
                     * Defines the collection of public methods of an interface
                     * @Default  {[]}
                     */
                    methods?: Array<NodesInterfaceMethod >
            }
            declare         export interface NodesLabel {

                /**
                 * Enables/disables the bold style
                 * @Default  {false}
                 */
                bold?: boolean,

                    /**
                     * Sets the border color of the label
                     * @Default  {transparent}
                     */
                    borderColor?: string,

                    /**
                     * Sets the border width of the label
                     * @Default  {0}
                     */
                    borderWidth?: number,

                    /**
                     * Sets the fill color of the text area
                     * @Default  {transparent}
                     */
                    fillColor?: string,

                    /**
                     * Sets the font color of the text
                     * @Default  {black}
                     */
                    fontColor?: string,

                    /**
                     * Sets the font family of the text
                     * @Default  {Arial}
                     */
                    fontFamily?: string,

                    /**
                     * Defines the font size of the text
                     * @Default  {12}
                     */
                    fontSize?: number,

                    /**
                     * Sets the horizontal alignment of the label.
                     * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Center}
                     */
                    horizontalAlignment?: undefined.HorizontalAlignment | string,

                    /**
                     * Enables/disables the italic style
                     * @Default  {false}
                     */
                    italic?: boolean,

                    /**
                     * To set the margin of the label
                     * @Default  {ej.datavisualization.Diagram.Margin()}
                     */
                    margin?: any,

                    /**
                     * Gets whether the label is currently being edited or not.
                     * @Default  {ej.datavisualization.Diagram.LabelEditMode.Edit}
                     */
                    mode?: undefined.LabelEditMode | string,

                    /**
                     * Sets the unique identifier of the label
                     */
                    name?: string,

                    /**
                     * Sets the fraction/ratio(relative to node) that defines the position of the label
                     * @Default  {ej.datavisualization.Diagram.Point(0.5, 0.5)}
                     */
                    offset?: any,

                    /**
                     * Defines the transparency of the labels
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Defines whether the label is editable or not
                     * @Default  {false}
                     */
                    readOnly?: boolean,

                    /**
                     * Defines the angle to which the label needs to be rotated
                     * @Default  {0}
                     */
                    rotateAngle?: number,

                    /**
                     * Defines the label text
                     */
                    text?: string,

                    /**
                     * Defines how to align the text inside the label.
                     * @Default  {ej.datavisualization.Diagram.TextAlign.Center}
                     */
                    textAlign?: undefined.TextAlign | string,

                    /**
                     * Sets how to decorate the label text.
                     * @Default  {ej.datavisualization.Diagram.TextDecorations.None}
                     */
                    textDecoration?: undefined.TextDecorations | string,

                    /**
                     * Sets the vertical alignment of the label.
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Center}
                     */
                    verticalAlignment?: undefined.VerticalAlignment | string,

                    /**
                     * Enables or disables the visibility of the label
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Sets the width of the label(the maximum value of label width and the node width will be considered as label width)
                     * @Default  {50}
                     */
                    width?: number,

                    /**
                     * Defines how the label text needs to be wrapped.
                     * @Default  {ej.datavisualization.Diagram.TextWrapping.WrapWithOverflow}
                     */
                    wrapping?: undefined.TextWrapping | string
            }
            declare         export interface NodesLane {

                /**
                 * Defines the width of lane
                 * @Default  {0}
                 */
                width?: number,

                    /**
                     * Defines the height of lane
                     * @Default  {0}
                     */
                    height?: number,

                    /**
                     * Defines the z-index of the lane
                     * @Default  {0}
                     */
                    zorder?: number,

                    /**
                     * Allows to maintain additional information about lane
                     * @Default  {{}}
                     */
                    addInfo?: any,

                    /**
                     * An array of objects where each object represents a child node of the lane
                     * @Default  {[]}
                     */
                    children?: Array<any>,

                    /**
                     * Defines the fill color of the lane
                     * @Default  {white}
                     */
                    fillColor?: string,

                    /**
                     * Defines the header of the lane
                     * @Default  {{ text: Function, fontSize: 11 }}
                     */
                    header?: any,

                    /**
                     * Defines the object as a lane
                     * @Default  {false}
                     */
                    isLane?: boolean,

                    /**
                     * Sets the unique identifier of the lane
                     */
                    name?: string,

                    /**
                     * Sets the orientation of the lane.
                     * @Default  {vertical}
                     */
                    orientation?: string
            }
            declare         export interface NodesPaletteItem {

                /**
                 * Defines whether the symbol should be drawn at its actual size regardless of precedence factors or not
                 * @Default  {true}
                 */
                enableScale?: boolean,

                    /**
                     * Defines the height of the symbol
                     * @Default  {0}
                     */
                    height?: number,

                    /**
                     * Defines the margin of the symbol item
                     * @Default  {{ left: 4, right: 4, top: 4, bottom: 4 }}
                     */
                    margin?: any,

                    /**
                     * Defines the preview height of the symbol
                     * @Default  {undefined}
                     */
                    previewHeight?: number,

                    /**
                     * Defines the preview width of the symbol
                     * @Default  {undefined}
                     */
                    previewWidth?: number,

                    /**
                     * Defines the width of the symbol
                     * @Default  {0}
                     */
                    width?: number
            }
            declare         export interface NodesPhase {

                /**
                 * Defines the header of the smaller regions
                 * @Default  {null}
                 */
                label?: any,

                    /**
                     * Defines the line color of the splitter that splits adjacent phases.
                     * @Default  {#606060}
                     */
                    lineColor?: string,

                    /**
                     * Sets the dash array that used to stroke the phase splitter
                     * @Default  {3,3}
                     */
                    lineDashArray?: string,

                    /**
                     * Sets the lineWidth of the phase
                     * @Default  {1}
                     */
                    lineWidth?: number,

                    /**
                     * Sets the unique identifier of the phase
                     */
                    name?: string,

                    /**
                     * Sets the length of the smaller region(phase) of a swimlane
                     * @Default  {100}
                     */
                    offset?: number,

                    /**
                     * Sets the orientation of the phase
                     * @Default  {horizontal}
                     */
                    orientation?: string,

                    /**
                     * Sets the type of the object as phase
                     * @Default  {phase}
                     */
                    type?: string
            }
            declare         export interface NodesPort {

                /**
                 * Sets the border color of the port
                 * @Default  {#1a1a1a}
                 */
                borderColor?: string,

                    /**
                     * Sets the stroke width of the port
                     * @Default  {1}
                     */
                    borderWidth?: number,

                    /**
                     * Defines the space to be left between the port bounds and its incoming and outgoing connections.
                     * @Default  {0}
                     */
                    connectorPadding?: number,

                    /**
                     * Defines whether connections can be created with the port
                     * @Default  {ej.datavisualization.Diagram.PortConstraints.Connect}
                     */
                    constraints?: undefined.PortConstraints | string,

                    /**
                     * Sets the fill color of the port
                     * @Default  {white}
                     */
                    fillColor?: string,

                    /**
                     * Sets the unique identifier of the port
                     */
                    name?: string,

                    /**
                     * Defines the position of the port as fraction/ ratio relative to node
                     * @Default  {ej.datavisualization.Diagram.Point(0, 0)}
                     */
                    offset?: any,

                    /**
                     * Defines the path data to draw the port. Applicable, if the port shape is path.
                     */
                    pathData?: string,

                    /**
                     * Defines the shape of the port.
                     * @Default  {ej.datavisualization.Diagram.PortShapes.Square}
                     */
                    shape?: undefined.PortShapes | string,

                    /**
                     * Defines the size of the port
                     * @Default  {8}
                     */
                    size?: number,

                    /**
                     * Defines when the port should be visible.
                     * @Default  {ej.datavisualization.Diagram.PortVisibility.Default}
                     */
                    visibility?: undefined.PortVisibility | string
            }
            declare         export interface NodesShadow {

                /**
                 * Defines the angle of the shadow relative to node
                 * @Default  {45}
                 */
                angle?: number,

                    /**
                     * Sets the distance to move the shadow relative to node
                     * @Default  {5}
                     */
                    distance?: number,

                    /**
                     * Defines the opaque of the shadow
                     * @Default  {0.7}
                     */
                    opacity?: number
            }
            declare         export interface NodesSubProcess {

                /**
                 * Defines whether the BPMN sub process is without any prescribed order or not
                 * @Default  {false}
                 */
                adhoc?: boolean,

                    /**
                     * Sets the boundary of the BPMN process
                     * @Default  {ej.datavisualization.Diagram.BPMNBoundary.Default}
                     */
                    boundary?: undefined.BPMNBoundary | string,

                    /**
                     * Sets whether the BPMN subprocess is triggered as a compensation of a specific activity
                     * @Default  {false}
                     */
                    compensation?: boolean,

                    /**
                     * Sets whether the BPMN subprocess is triggered as a collapsed of a specific activity
                     * @Default  {true}
                     */
                    collapsed?: boolean,

                    /**
                     * Sets the type of the event by which the sub-process will be triggered
                     * @Default  {ej.datavisualization.Diagram.BPMNEvents.Start}
                     */
                    event?: undefined.BPMNEvents | string,

                    /**
                     * Defines the collection of events that need to be appended with BPMN Sub-Process
                     */
                    events?: Array<any>,

                    /**
                     * Defines the loop type of a sub process.
                     * @Default  {ej.datavisualization.Diagram.BPMNLoops.None}
                     */
                    loop?: undefined.BPMNLoops | string,

                    /**
                     * Defines the type of the event trigger
                     * @Default  {ej.datavisualization.Diagram.BPMNTriggers.Message}
                     */
                    trigger?: undefined.BPMNTriggers | string,

                    /**
                     * Defines the type of a sub process
                     * @Default  {ej.datavisualization.Diagram.BPMNSubProcessTypes.None}
                     */
                    type?: undefined.BPMNSubProcessTypes | string
            }
            declare         export interface NodesTask {

                /**
                 * To set whether the task is a global task or not
                 * @Default  {false}
                 */
                call?: boolean,

                    /**
                     * Sets whether the task is triggered as a compensation of another specific activity
                     * @Default  {false}
                     */
                    compensation?: boolean,

                    /**
                     * Sets the loop type of a BPMN task.
                     * @Default  {ej.datavisualization.Diagram.BPMNLoops.None}
                     */
                    loop?: undefined.BPMNLoops | string,

                    /**
                     * Sets the type of the BPMN task.
                     * @Default  {ej.datavisualization.Diagram.BPMNTasks.None}
                     */
                    type?: undefined.BPMNTasks | string
            }
            declare         export interface Node {

                /**
                 * Defines the type of BPMN Activity. Applicable, if the node is a BPMN activity.
                 * @Default  {ej.datavisualization.Diagram.BPMNActivity.Task}
                 */
                activity?: undefined.BPMNActivity | string,

                    /**
                     * To maintain additional information about nodes
                     * @Default  {{}}
                     */
                    addInfo?: any,

                    /**
                     * Defines the additional information of a process. It is not directly related to the message flows or sequence flows of the process.
                     * @Default  {ej.datavisualization.Diagram.BPMNTextAnnotation()}
                     */
                    annotation?: NodesAnnotation,

                    /**
                     * Sets the border color of node
                     * @Default  {black}
                     */
                    borderColor?: string,

                    /**
                     * Sets the pattern of dashes and gaps to stroke the border
                     */
                    borderDashArray?: string,

                    /**
                     * Sets the border width of the node
                     * @Default  {1}
                     */
                    borderWidth?: number,

                    /**
                     * Defines whether the group can be ungrouped or not
                     * @Default  {true}
                     */
                    canUngroup?: boolean,

                    /**
                     * Array of JSON objects where each object represents a child node/connector
                     * @Default  {[]}
                     */
                    children?: Array<any>,

                    /**
                     * Sets the type of UML classifier. Applicable, if the node is a UML Class Diagram shape.
                     * @Default  {ej.datavisualization.Diagram.ClassifierShapes.Class}
                     */
                    classifier?: undefined.ClassifierShapes | string,

                    /**
                     * Defines the name, attributes and methods of a Class. Applicable, if the node is a Class.
                     * @Default  {null}
                     */
                    class?: NodesClass,

                    /**
                     * Defines the distance to be left between a node and its connections(In coming and out going connections).
                     * @Default  {0}
                     */
                    connectorPadding?: number,

                    /**
                     * Enables or disables the default behaviors of the node.
                     * @Default  {ej.datavisualization.Diagram.NodeConstraints.Default}
                     */
                    constraints?: undefined.NodeConstraints | string,

                    /**
                     * Defines how the child objects need to be arranged(Either in any predefined manner or automatically). Applicable, if the node is a group.
                     * @Default  {null}
                     */
                    container?: NodesContainer,

                    /**
                     * Defines the corner radius of rectangular shapes.
                     * @Default  {0}
                     */
                    cornerRadius?: number,

                    /**
                     * Configures the styles of shapes
                     */
                    cssClass?: string,

                    /**
                     * Defines the BPMN data object
                     */
                    data?: NodesData,

                    /**
                     * Defines an Enumeration in a UML Class Diagram
                     * @Default  {null}
                     */
                    enumeration?: NodesEnumeration,

                    /**
                     * Sets the type of the BPMN Events. Applicable, if the node is a BPMN event.
                     * @Default  {ej.datavisualization.Diagram.BPMNEvents.Start}
                     */
                    event?: undefined.BPMNEvents | string,

                    /**
                     * Defines whether the node can be automatically arranged using layout or not
                     * @Default  {false}
                     */
                    excludeFromLayout?: boolean,

                    /**
                     * Defines the fill color of the node
                     * @Default  {white}
                     */
                    fillColor?: string,

                    /**
                     * Sets the type of the BPMN Gateway. Applicable, if the node is a BPMN gateway.
                     * @Default  {ej.datavisualization.Diagram.BPMNGateways.None}
                     */
                    gateway?: undefined.BPMNGateways | string,

                    /**
                     * Paints the node with a smooth transition from one color to another color
                     */
                    gradient?: NodesGradient,

                    /**
                     * Sets the type of the BPMN Shapes as group. Applicable, if the node is a BPMN.
                     * @Default  {ej.datavisualization.Diagram.BPMNShapes}
                     */
                    group?: any,

                    /**
                     * Defines the header of a swimlane/lane
                     * @Default  {{ text: Title, fontSize: 11 }}
                     */
                    header?: any,

                    /**
                     * Defines the height of the node
                     * @Default  {0}
                     */
                    height?: number,

                    /**
                     * Sets the horizontal alignment of the node. Applicable, if the parent of the node is a container.
                     * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Left}
                     */
                    horizontalAlign?: undefined.HorizontalAlignment | string,

                    /**
                     * A read only collection of the incoming connectors/edges of the node
                     * @Default  {[]}
                     */
                    inEdges?: Array<any>,

                    /**
                     * Defines an interface in a UML Class Diagram
                     * @Default  {null}
                     */
                    interface?: NodesInterface,

                    /**
                     * Defines whether the sub tree of the node is expanded or collapsed
                     * @Default  {true}
                     */
                    isExpanded?: boolean,

                    /**
                     * Sets the node as a swimlane
                     * @Default  {false}
                     */
                    isSwimlane?: boolean,

                    /**
                     * A collection of objects where each object represents a label
                     * @Default  {[]}
                     */
                    labels?: Array<NodesLabel>,

                    /**
                     * An array of objects where each object represents a lane. Applicable, if the node is a swimlane.
                     * @Default  {[]}
                     */
                    lanes?: Array<NodesLane>,

                    /**
                     * Defines the minimum space to be left between the bottom of parent bounds and the node. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginBottom?: number,

                    /**
                     * Defines the minimum space to be left between the left of parent bounds and the node. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginLeft?: number,

                    /**
                     * Defines the minimum space to be left between the right of the parent bounds and the node. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginRight?: number,

                    /**
                     * Defines the minimum space to be left between the top of parent bounds and the node. Applicable, if the parent is a container.
                     * @Default  {0}
                     */
                    marginTop?: number,

                    /**
                     * Defines the maximum height limit of the node
                     * @Default  {0}
                     */
                    maxHeight?: number,

                    /**
                     * Defines the maximum width limit of the node
                     * @Default  {0}
                     */
                    maxWidth?: number,

                    /**
                     * Defines the minimum height limit of the node
                     * @Default  {0}
                     */
                    minHeight?: number,

                    /**
                     * Defines the minimum width limit of the node
                     * @Default  {0}
                     */
                    minWidth?: number,

                    /**
                     * Sets the unique identifier of the node
                     */
                    name?: string,

                    /**
                     * Defines the position of the node on X-Axis
                     * @Default  {0}
                     */
                    offsetX?: number,

                    /**
                     * Defines the position of the node on Y-Axis
                     * @Default  {0}
                     */
                    offsetY?: number,

                    /**
                     * Defines the opaque of the node
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Defines the orientation of nodes. Applicable, if the node is a swimlane.
                     * @Default  {vertical}
                     */
                    orientation?: string,

                    /**
                     * A read only collection of outgoing connectors/edges of the node
                     * @Default  {[]}
                     */
                    outEdges?: Array<any>,

                    /**
                     * Defines the minimum padding value to be left between the bottom most position of a group and its children. Applicable, if the group is a container.
                     * @Default  {0}
                     */
                    paddingBottom?: number,

                    /**
                     * Defines the minimum padding value to be left between the left most position of a group and its children. Applicable, if the group is a container.
                     * @Default  {0}
                     */
                    paddingLeft?: number,

                    /**
                     * Defines the minimum padding value to be left between the right most position of a group and its children. Applicable, if the group is a container.
                     * @Default  {0}
                     */
                    paddingRight?: number,

                    /**
                     * Defines the minimum padding value to be left between the top most position of a group and its children. Applicable, if the group is a container.
                     * @Default  {0}
                     */
                    paddingTop?: number,

                    /**
                     * Defines the size and preview size of the node to add that to symbol palette
                     * @Default  {null}
                     */
                    paletteItem?: NodesPaletteItem,

                    /**
                     * Sets the name of the parent group
                     */
                    parent?: string,

                    /**
                     * Sets the path geometry that defines the shape of a path node
                     */
                    pathData?: string,

                    /**
                     * An array of objects, where each object represents a smaller region(phase) of a swimlane.
                     * @Default  {[]}
                     */
                    phases?: Array<NodesPhase>,

                    /**
                     * Sets the height of the phase headers
                     * @Default  {0}
                     */
                    phaseSize?: number,

                    /**
                     * Sets the ratio/ fractional value relative to node, based on which the node will be transformed(positioning, scaling and rotation)
                     * @Default  {ej.datavisualization.Diagram.Points(0.5,0.5)}
                     */
                    pivot?: any,

                    /**
                     * Defines a collection of points to draw a polygon. Applicable, if the shape is a polygon.
                     * @Default  {[]}
                     */
                    points?: Array<any>,

                    /**
                     * An array of objects where each object represents a port
                     * @Default  {[]}
                     */
                    ports?: Array<NodesPort>,

                    /**
                     * Sets the angle to which the node should be rotated
                     * @Default  {0}
                     */
                    rotateAngle?: number,

                    /**
                     * Defines how the node should be scaled/stretched
                     * @Default  {ej.datavisualization.Diagram.ScaleConstraints.Meet}
                     */
                    scale?: undefined.ScaleConstraints | string,

                    /**
                     * Defines the opacity and the position of shadow
                     * @Default  {ej.datavisualization.Diagram.Shadow()}
                     */
                    shadow?: NodesShadow,

                    /**
                     * Sets the shape of the node. It depends upon the type of node.
                     * @Default  {ej.datavisualization.Diagram.BasicShapes.Rectangle}
                     */
                    shape?: undefined.BasicShapes | string,

                    /**
                     * Sets the source path of the image. Applicable, if the type of the node is image.
                     */
                    source?: string,

                    /**
                     * Defines the sub process of a BPMN Activity. Applicable, if the type of the BPMN activity is sub process.
                     * @Default  {ej.datavisualization.Diagram.BPMNSubProcess()}
                     */
                    subProcess?: NodesSubProcess,

                    /**
                     * Defines the task of the BPMN activity. Applicable, if the type of activity is set as task.
                     * @Default  {ej.datavisualization.Diagram.BPMNTask()}
                     */
                    task?: NodesTask,

                    /**
                     * Sets the id of svg/html templates. Applicable, if the node is HTML or native.
                     */
                    templateId?: string,

                    /**
                     * Defines the textBlock of a text node
                     * @Default  {null}
                     */
                    textBlock?: any,

                    /**
                     * Defines the tooltip that should be shown when the mouse hovers over node. For tooltip properties, refer Tooltip
                     * @Default  {null}
                     */
                    tooltip?: any,

                    /**
                     * Sets the type of BPMN Event Triggers.
                     * @Default  {ej.datavisualization.Diagram.BPMNTriggers.None}
                     */
                    trigger?: undefined.BPMNTriggers | string,

                    /**
                     * Defines the type of the node.
                     * @Default  {ej.datavisualization.Diagram.Shapes.Basic}
                     */
                    type?: undefined.Shapes | string,

                    /**
                     * Sets the vertical alignment of a node. Applicable, if the parent of a node is a container.
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Top}
                     */
                    verticalAlign?: undefined.VerticalAlignment | string,

                    /**
                     * Defines the visibility of the node
                     * @Default  {true}
                     */
                    visible?: boolean,

                    /**
                     * Defines the width of the node
                     * @Default  {0}
                     */
                    width?: number,

                    /**
                     * Defines the z-index of the node
                     * @Default  {0}
                     */
                    zOrder?: number
            }
            declare         export interface PageSettings {

                /**
                 * Gets or sets a value that indicates whether to define which page to display currently in the grid
                 * @Default  {1}
                 */
                currentPage?: number,

                    /**
                     * Gets or sets a value that indicates whether to pass the current page information as a query string along with the URL while navigating to other page.
                     * @Default  {false}
                     */
                    enableQueryString?: boolean,

                    /**
                     * Gets or sets a value that indicates whether to enables pager template for the grid.
                     * @Default  {false}
                     */
                    enableTemplates?: boolean,

                    /**
                     * Gets or sets a value that indicates whether to define the number of pages displayed in the pager for navigation
                     * @Default  {8}
                     */
                    pageCount?: number,

                    /**
                     * Gets or sets a value that indicates whether to define the number of records displayed per page
                     * @Default  {12}
                     */
                    pageSize?: number,

                    /**
                     * Gets or sets a value that indicates whether to enables default pager for the grid.
                     * @Default  {false}
                     */
                    showDefaults?: boolean,

                    /**
                     * Gets or sets a value that indicates to add the template as a pager template for grid.
                     * @Default  {null}
                     */
                    template?: string,

                    /**
                     * Get the value of total number of pages in the grid. The totalPages value is calculated based on page size and total records of grid
                     * @Default  {null}
                     */
                    totalPages?: number,

                    /**
                     * Get the value of total number of records which is bound to the grid. The totalRecordsCount value is calculated based on dataSource bound to the grid.
                     * @Default  {null}
                     */
                    totalRecordsCount?: number,

                    /**
                     * Gets or sets a value that indicates whether to define the number of pages to print
                     * @Default  {ej.Grid.PrintMode.AllPages}
                     */
                    printMode?: undefined.PrintMode | string
            }
            declare         export interface ScrollSettings {

                /**
                 * Gets or sets an object that indicates to render the Kanban with specified scroll height.
                 * @Default  {0}
                 */
                height?: string | number,

                    /**
                     * Gets or sets an object that indicates to render the Kanban with specified scroll width.
                     * @Default  {auto}
                     */
                    width?: string | number,

                    /**
                     * To allow the Kanban to freeze particular swimlane at the time of scrolling , until scroll reaches next swimlane and it continues.
                     * @Default  {false}
                     */
                    allowFreezeSwimlane?: boolean
            }
            declare         export interface SelectedItemsUserHandle {

                /**
                 * Defines the background color of the user handle
                 * @Default  {#2382c3}
                 */
                backgroundColor?: string,

                    /**
                     * Sets the border color of the user handle
                     * @Default  {transparent}
                     */
                    borderColor?: string,

                    /**
                     * Defines whether the user handle should be added, when more than one element is selected
                     * @Default  {false}
                     */
                    enableMultiSelection?: boolean,

                    /**
                     * Sets the stroke color of the user handle
                     * @Default  {transparent}
                     */
                    pathColor?: string,

                    /**
                     * Defines the custom shape of the user handle
                     */
                    pathData?: string,

                    /**
                     * Defines the position of the user handle
                     * @Default  {ej.datavisualization.Diagram.UserHandlePositions.BottomCenter}
                     */
                    position?: undefined.UserHandlePositions | string,

                    /**
                     * Defines the size of the user handle
                     * @Default  {8}
                     */
                    size?: number,

                    /**
                     * Defines the interactive behaviors of the user handle
                     */
                    tool?: any,

                    /**
                     * Defines the visibility of the user handle
                     * @Default  {true}
                     */
                    visible?: boolean
            }
            declare         export interface SelectedItems {

                /**
                 * A read only collection of the selected items
                 * @Default  {[]}
                 */
                children?: Array<any>,

                    /**
                     * Controls the visibility of selector.
                     * @Default  {ej.datavisualization.Diagram.SelectorConstraints.All}
                     */
                    constraints?: undefined.SelectorConstraints | string,

                    /**
                     * Defines a method that dynamically enables/ disables the interaction with multiple selection.
                     * @Default  {null}
                     */
                    getConstraints?: any,

                    /**
                     * Sets the height of the selected items
                     * @Default  {0}
                     */
                    height?: number,

                    /**
                     * Sets the x position of the selector
                     * @Default  {0}
                     */
                    offsetX?: number,

                    /**
                     * Sets the y position of the selector
                     * @Default  {0}
                     */
                    offsetY?: number,

                    /**
                     * Sets the angle to rotate the selected items
                     * @Default  {0}
                     */
                    rotateAngle?: number,

                    /**
                     * Sets the angle to rotate the selected items. For tooltip properties, refer Tooltip
                     * @Default  {ej.datavisualization.Diagram.Tooltip()}
                     */
                    tooltip?: any,

                    /**
                     * A collection of frequently used commands that will be added around the selector
                     * @Default  {[]}
                     */
                    userHandles?: Array<SelectedItemsUserHandle>,

                    /**
                     * Sets the width of the selected items
                     * @Default  {0}
                     */
                    width?: number
            }
            declare         export interface SnapSettingsHorizontalGridLines {

                /**
                 * Defines the line color of horizontal grid lines
                 * @Default  {lightgray}
                 */
                lineColor?: string,

                    /**
                     * Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
                     */
                    lineDashArray?: string,

                    /**
                     * A pattern of lines and gaps that defines a set of horizontal gridlines
                     * @Default  {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
                     */
                    linesInterval?: Array<any>,

                    /**
                     * Specifies a set of intervals to snap the objects
                     * @Default  {[20]}
                     */
                    snapInterval?: Array<any >
            }
            declare         export interface SnapSettingsVerticalGridLines {

                /**
                 * Defines the line color of horizontal grid lines
                 * @Default  {lightgray}
                 */
                lineColor?: string,

                    /**
                     * Specifies the pattern of dashes and gaps used to stroke horizontal grid lines
                     */
                    lineDashArray?: string,

                    /**
                     * A pattern of lines and gaps that defines a set of horizontal gridlines
                     * @Default  {[1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75]}
                     */
                    linesInterval?: Array<any>,

                    /**
                     * Specifies a set of intervals to snap the objects
                     * @Default  {[20]}
                     */
                    snapInterval?: Array<any >
            }
            declare         export interface SnapSettings {

                /**
                 * Enables or disables snapping nodes/connectors to objects
                 * @Default  {true}
                 */
                enableSnapToObject?: boolean,

                    /**
                     * Defines the appearance of horizontal gridlines
                     */
                    horizontalGridLines?: SnapSettingsHorizontalGridLines,

                    /**
                     * Defines the angle by which the object needs to be snapped
                     * @Default  {5}
                     */
                    snapAngle?: number,

                    /**
                     * Defines and sets the snapConstraints
                     */
                    snapConstraints?: undefined.SnapConstraints | string,

                    /**
                     * Defines the minimum distance between the selected object and the nearest object
                     * @Default  {5}
                     */
                    snapObjectDistance?: number,

                    /**
                     * Defines the appearance of horizontal gridlines
                     */
                    verticalGridLines?: SnapSettingsVerticalGridLines
            }
            declare         export interface TooltipAlignment {

                /**
                 * Defines the horizontal alignment of tooltip.
                 * @Default  {ej.datavisualization.Diagram.HorizontalAlignment.Center}
                 */
                horizontal?: undefined.HorizontalAlignment | string,

                    /**
                     * Defines the vertical alignment of tooltip.
                     * @Default  {ej.datavisualization.Diagram.VerticalAlignment.Bottom}
                     */
                    vertical?: undefined.VerticalAlignment | string
            }
            declare         export interface Tooltip {

                /**
                 * Show/hides the tooltip visibility.
                 * @Default  {false}
                 */
                visible?: boolean,

                    /**
                     * Fill color for the sparkline tooltip.
                     * @Default  {white}
                     */
                    fill?: string,

                    /**
                     * Custom template to the tooltip.
                     */
                    template?: string,

                    /**
                     * Options for customizing the border of the tooltip.
                     */
                    border?: TooltipBorder,

                    /**
                     * Options for customizing the font of the tooltip.
                     */
                    font?: TooltipFont
            }
        }

        declare module 'HeatMap' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface CellMouseOverEventArgs {

                /**
                 * Value displayed on the cell
                 */
                cellValue?: string,

                    /**
                     * Returns the HeatMap cell data
                     */
                    source?: any,

                    /**
                     * Returns the specific HeatMap cell
                     */
                    cell?: any
            }
            declare         export interface CellMouseEnterEventArgs {

                /**
                 * Value displayed on the cell
                 */
                cellValue?: string,

                    /**
                     * Returns the HeatMap cell data
                     */
                    source?: any,

                    /**
                     * Returns the specific HeatMap cell
                     */
                    cell?: any
            }
            declare         export interface CellMouseLeaveEventArgs {

                /**
                 * Value displayed on the cell
                 */
                cellValue?: string,

                    /**
                     * Returns the HeatMap cell data
                     */
                    source?: any,

                    /**
                     * Returns the specific HeatMap cell
                     */
                    cell?: any
            }
            declare         export interface CellSelectedEventArgs {

                /**
                 * Returns the selected cell index value.
                 */
                cellIndex?: number,

                    /**
                     * Returns the previous selected cell index value.
                     */
                    previousRowCellIndex?: number,

                    /**
                     * Returns the selected cell element.
                     */
                    currentCell?: any,

                    /**
                     * Returns the previous selected cell element.
                     */
                    previousRowCell?: any,

                    /**
                     * Returns current record object (JSON).
                     */
                    data?: any,

                    /**
                     * Returns the selected row cell index values.
                     */
                    selectedRowCellIndex?: Array<any>,

                    /**
                     * Returns the cancel option value.
                     */
                    cancel?: boolean,

                    /**
                     * Returns the grid model.
                     */
                    model?: any,

                    /**
                     * Returns the name of the event.
                     */
                    type?: string
            }
            declare         export interface HeatMapCell {

                /**
                 * Specifies whether the cell content can be visible or not.
                 * @Default  {ej.HeatMap.CellVisibility.Visible}
                 */
                showContent?: undefined.CellVisibility | string,

                    /**
                     * Specifies whether the cell color can be visible or not.
                     * @Default  {true}
                     */
                    showColor?: boolean
            }
            declare         export interface DefaultColumnStyle {

                /**
                 * Specifies the alignment mode of the heat map column.
                 * @Default  {ej.HeatMap.TextAlign.Center}
                 */
                textAlign?: any,

                    /**
                     * Specifies the template id of the heat map column header.
                     */
                    headerTemplateID?: string,

                    /**
                     * Specifies the template id of all individual cell data of the heat map.
                     */
                    templateID?: string
            }
            declare         export interface ItemsMappingColumnStyle {

                /**
                 * Specifies the width of the heat map column.
                 * @Default  {0}
                 */
                width?: number,

                    /**
                     * Specifies the text align mode of the heat map column.
                     * @Default  {ej.HeatMap.TextAlign.Center}
                     */
                    textAlign?: string,

                    /**
                     * Specifies the template id of the column header.
                     */
                    headerTemplateID?: string,

                    /**
                     * Specifies the template id of all individual cell data.
                     */
                    templateID?: string
            }
            declare         export interface ItemsMappingColumn {

                /**
                 * Specifies the name of the column or row.
                 */
                propertyName?: string,

                    /**
                     * Specifies the value of the column or row.
                     */
                    displayName?: string
            }
            declare         export interface ItemsMappingRow {

                /**
                 * Specifies the name of the column or row.
                 */
                propertyName?: string,

                    /**
                     * Specifies the value of the column or row.
                     */
                    displayName?: string
            }
            declare         export interface ItemsMappingValue {

                /**
                 * Specifies the name of the column or row.
                 */
                propertyName?: string,

                    /**
                     * Specifies the value of the column or row.
                     */
                    displayName?: string
            }
            declare         export interface ItemsMappingHeaderMapping {

                /**
                 * Specifies the name of the column or row.
                 */
                propertyName?: string,

                    /**
                     * Specifies the value of the column or row.
                     */
                    displayName?: string,

                    /**
                     * Specifies the property and display value of the header.
                     * @Default  {null}
                     */
                    columnStyle?: any
            }
            declare         export interface ItemsMapping {

                /**
                 * Column settings for the individual heat map column.
                 * @Default  {null}
                 */
                columnStyle?: ItemsMappingColumnStyle,

                    /**
                     * Specifies the property and display value of the column.
                     * @Default  {null}
                     */
                    column?: ItemsMappingColumn,

                    /**
                     * Specifies the property and display value of the heat map.row
                     * @Default  {null}
                     */
                    row?: ItemsMappingRow,

                    /**
                     * Specifies the property and display value of the column value.
                     * @Default  {null}
                     */
                    value?: ItemsMappingValue,

                    /**
                     * Specifies the property and display value of the header.
                     * @Default  {null}
                     */
                    headerMapping?: ItemsMappingHeaderMapping,

                    /**
                     * Specifies the property and display value of the collection of column.
                     * @Default  {[]}
                     */
                    columnMapping?: Array<any >
            }
            declare         export interface ColorMappingCollectionLabel {

                /**
                 * Enables/disables the bold style of the heat map label.
                 * @Default  {false}
                 */
                bold?: boolean,

                    /**
                     * Enables/disables the italic style of the heat map label.
                     * @Default  {false}
                     */
                    italic?: boolean,

                    /**
                     * specifies the text value of the heat map label.
                     */
                    text?: string,

                    /**
                     * Specifies the text style of the heat map label.
                     * @Default  {ej.HeatMap.TextDecoration.None}
                     */
                    textDecoration?: undefined.TextDecoration | string,

                    /**
                     * Specifies the font size of the heat map label.
                     * @Default  {10}
                     */
                    fontSize?: number,

                    /**
                     * Specifies the font family of the heat map label.
                     * @Default  {Arial}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the font color of the heat map label.
                     * @Default  {black}
                     */
                    fontColor?: string
            }
            declare         export interface ColorMappingCollection {

                /**
                 * Specifies the color of the heat map column data.
                 * @Default  {white}
                 */
                color?: string,

                    /**
                     * Specifies the color values of the heat map column data.
                     * @Default  {0}
                     */
                    value?: number,

                    /**
                     * Specifies the label properties of the heat map color.
                     * @Default  {null}
                     */
                    label?: ColorMappingCollectionLabel
            }
        }

        declare module 'HeatMapLegend' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface ColorMappingCollectionLabel {

                /**
                 * Enables/disables the bold style of the heat map label.
                 * @Default  {false}
                 */
                bold?: boolean,

                    /**
                     * Enables/disables the italic style of the heat map label.
                     * @Default  {false}
                     */
                    italic?: boolean,

                    /**
                     * specifies the text value of the heat map label.
                     */
                    text?: string,

                    /**
                     * Specifies the text style of the heat map label.
                     * @Default  {ej.HeatMap.TextDecoration.None}
                     */
                    textDecoration?: undefined.TextDecoration | string,

                    /**
                     * Specifies the font size of the heat map label.
                     * @Default  {10}
                     */
                    fontSize?: number,

                    /**
                     * Specifies the font family of the heat map label.
                     * @Default  {Arial}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the font color of the heat map label.
                     * @Default  {black}
                     */
                    fontColor?: string
            }
            declare         export interface ColorMappingCollection {

                /**
                 * Specifies the color of the heat map column data.
                 * @Default  {white}
                 */
                color?: string,

                    /**
                     * Specifies the color values of the heat map column data.
                     * @Default  {0}
                     */
                    value?: number,

                    /**
                     * Specifies the label properties of the heat map color.
                     * @Default  {null}
                     */
                    label?: ColorMappingCollectionLabel
            }
        }

        declare module 'Sparkline' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
            declare         export interface LoadEventArgs {

                /**
                 * returns true if the event should be canceled; otherwise, false.
                 */
                cancel?: boolean,

                    /**
                     * returns the name of the event.
                     */
                    type?: string,

                    /**
                     * returns the model value of the control.
                     */
                    model?: any
            }
            declare         export interface LoadedEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface TooltipInitializeEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X Location of the trackball tooltip in pixels
                     */
                    locationX?: any,

                    /**
                     * Y Location of the trackball tooltip in pixels
                     */
                    locationY?: any,

                    /**
                     * Index of the point for which trackball tooltip is displayed
                     */
                    pointIndex?: number,

                    /**
                     * Text to be displayed in trackball tooltip. Use this option to add custom text in trackball tooltip
                     */
                    currentText?: string
            }
            declare         export interface SeriesRenderingEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * Minimum x value of the data point
                     */
                    minX?: any,

                    /**
                     * Minimum y value of the data point
                     */
                    minY?: any,

                    /**
                     * Maximum x value of the data point
                     */
                    maxX?: any,

                    /**
                     * Maximum y value of the data point
                     */
                    maxY?: any
            }
            declare         export interface PointRegionMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of point in pixel
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of point in pixel
                     */
                    locationY?: number,

                    /**
                     * Index of the point in series
                     */
                    pointIndex?: number,

                    /**
                     * Type of the series
                     */
                    seriesType?: string
            }
            declare         export interface PointRegionMouseClickEventArgs {

                /**
                 * Set this option to true to cancel the event
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string,

                    /**
                     * X-coordinate of point in pixel
                     */
                    locationX?: number,

                    /**
                     * Y-coordinate of point in pixel
                     */
                    locationY?: number,

                    /**
                     * Index of the point in series
                     */
                    pointIndex?: number,

                    /**
                     * Type of the series
                     */
                    seriesType?: string
            }
            declare         export interface SparklineMouseMoveEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface SparklineMouseLeaveEventArgs {

                /**
                 * Set this option to true to cancel the event    
                 */
                cancel?: boolean,

                    /**
                     * Instance of the sparkline model object
                     */
                    model?: any,

                    /**
                     * Name of the event
                     */
                    type?: string
            }
            declare         export interface Border {

                /**
                 * Border color of the sparkline.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Width of the Sparkline border.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface RangeBandSettings {

                /**
                 * Start value of the range band.
                 * @Default  {null}
                 */
                startRange?: number,

                    /**
                     * End value of the range band.
                     * @Default  {null}
                     */
                    endRange?: number,

                    /**
                     * Range band opacity of the series.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Range band color of the series.
                     * @Default  {transparent}
                     */
                    color?: string
            }
            declare         export interface TooltipBorder {

                /**
                 * Border color of the tooltip.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Border width of the tooltip.
                     * @Default  {1}
                     */
                    width?: number
            }
            declare         export interface TooltipFont {

                /**
                 * Font color of the text in the tooltip.
                 * @Default  {#111111}
                 */
                color?: string,

                    /**
                     * Font Family for the tooltip.
                     * @Default  {Segoe UI}
                     */
                    fontFamily?: string,

                    /**
                     * Specifies the font Style for the tooltip.
                     * @Default  {Normal}
                     */
                    fontStyle?: undefined.FontStyle | string,

                    /**
                     * Specifies the font weight for the tooltip.
                     * @Default  {Regular}
                     */
                    fontWeight?: undefined.FontWeight | string,

                    /**
                     * Opacity for text in the tooltip.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Font size for text in the tooltip.
                     * @Default  {8px}
                     */
                    size?: string
            }
            declare         export interface Tooltip {

                /**
                 * Show/hides the tooltip visibility.
                 * @Default  {false}
                 */
                visible?: boolean,

                    /**
                     * Fill color for the sparkline tooltip.
                     * @Default  {white}
                     */
                    fill?: string,

                    /**
                     * Custom template to the tooltip.
                     */
                    template?: string,

                    /**
                     * Options for customizing the border of the tooltip.
                     */
                    border?: TooltipBorder,

                    /**
                     * Options for customizing the font of the tooltip.
                     */
                    font?: TooltipFont
            }
            declare         export interface MarkerSettingsBorder {

                /**
                 * Border color of the marker shape.
                 * @Default  {transparent}
                 */
                color?: string,

                    /**
                     * Controls the opacity of the marker border.
                     * @Default  {1}
                     */
                    opacity?: number,

                    /**
                     * Border width of the marker shape.
                     * @Default  {null}
                     */
                    width?: number
            }
            declare         export interface MarkerSettings {

                /**
                 * Controls the opacity of the marker.
                 * @Default  {1}
                 */
                opacity?: number,

                    /**
                     * Controls the visibility of the marker shape.
                     * @Default  {false}
                     */
                    visible?: boolean,

                    /**
                     * width of the marker shape.
                     * @Default  {2}
                     */
                    width?: number,

                    /**
                     * Color of the marker shape.
                     * @Default  {white}
                     */
                    fill?: string,

                    /**
                     * Options for customizing the border of the marker shape.
                     */
                    border?: MarkerSettingsBorder
            }
            declare         export interface Size {

                /**
                 * Height of the Sparkline. Height can be specified in either pixel or percentage.
                 * @Default  {''}
                 */
                height?: string,

                    /**
                     * Width of the Sparkline. Width can be specified in either pixel or percentage.
                     * @Default  {''}
                     */
                    width?: string
            }
            declare         export interface AxisLineSettings {

                /**
                 * Controls the visibility of the axis.
                 * @Default  {false}
                 */
                visible?: boolean,

                    /**
                     * Color of the axis line.
                     * @Default  {'#111111'}
                     */
                    color?: string,

                    /**
                     * Width of the axis line.
                     * @Default  {1}
                     */
                    width?: number,

                    /**
                     * Dash array of the axis line.
                     * @Default  {1}
                     */
                    dashArray?: number
            }
        }

        declare module 'Overview' {
            declare         export interface Model {

                /**
                 * If clone is specified.
                 * @Default  {false}
                 */
                clone?: boolean,

                    /**
                     * Sets the offset of the dragging helper relative to the mouse cursor.
                     * @Default  {{ top: -1, left: -2 }}
                     */
                    cursorAt?: any,

                    /**
                     * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
                     * @Default  {1}
                     */
                    distance?: number,

                    /**
                     * The drag area is used to restrict the dragging element bounds.
                     * @Default  {false}
                     */
                    dragArea?: boolean,

                    /**
                     * If specified, restricts drag start click to the specified element(s).
                     * @Default  {null}
                     */
                    handle?: string,

                    /**
                     * Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
                     * @Default  {'default'}
                     */
                    scope?: string,

                    /**
                     * This event is triggered when dragging element is destroyed. 
                     */
                    destroy(e: DestroyEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    drag(e: DragEventArgs): void,

                    /**
                     * Supply a callback function to handle the drag start event as an init option. 
                     */
                    dragStart(e: DragStartEventArgs): void,

                    /**
                     * This event is triggered when the mouse is moved during the dragging. 
                     */
                    dragStop(e: DragStopEventArgs): void,

                    /**
                     * This event is triggered when dragged. 
                     */
                    helper(e: HelperEventArgs): void
            }
        }

    }

}
declare interface JQueryXHR {}
declare interface JQueryPromise<T>{}
declare type JQueryDeferred<T>= {} & JQueryPromise
declare interface JQueryParam {}
declare interface JQuery {
    data(key: any): any
}
declare interface Window {
    ej: typeof ej
}