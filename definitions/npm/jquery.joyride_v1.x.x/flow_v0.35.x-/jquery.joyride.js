// @flow
/**
 * Flowtype definitions for jquery.joyride
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * HTML segments for tip layout
 */
declare interface JoyrideTemplate {

    /**
     * Link template
     * @member  {string}
     */
    link?: string,

        /**
         * Timer template
         * @member  {string}
         */
        timer?: string,

        /**
         * Tip template
         * @member  {string}
         */
        tip?: string,

        /**
         * Wrapper template
         * @member  {string}
         */
        wrapper?: string,

        /**
         * Button template
         * @member  {string}
         */
        button?: string,

        /**
         * Modal template
         * @member  {string}
         */
        modal?: string,

        /**
         * Exposed Cover template
         * @member  {string}
         */
        exposeCover?: string
}
declare interface JoyrideOptions {

    /**
     * Version
     * @member  {string}
     */
    version?: string,

        /**
         * 'top' or 'bottom' in relation to parent
         * @member  {string}
         */
        tipLocation?: string,

        /**
         * override on a per tooltip bases
         * @member  {any}
         */
        nubPosition?: any,

        /**
         * whether to scroll to tips
         * @member  {boolean}
         */
        scroll?: boolean,

        /**
         * Page scrolling speed in ms
         * @member  {number}
         */
        scrollSpeed?: number,

        /**
         * 0 = off, all other numbers = time(ms)
         * @member  {number}
         */
        timer?: number,

        /**
         * true or false - false tour starts when restart called
         * @member  {boolean}
         */
        autoStart?: boolean,

        /**
         * true/false to start timer on first click
         * @member  {boolean}
         */
        startTimerOnClick?: boolean,

        /**
         * the index of the tooltip you want to start on (index of the li)
         * @member  {number}
         */
        startOffset?: number,

        /**
         * true/false for next button visibility
         * @member  {boolean}
         */
        nextButton?: boolean,

        /**
         * 'pop' or 'fade' in each tip
         * @member  {string}
         */
        tipAnimation?: string,

        /**
         * array of indexes where to pause the tour after
         * @member  {any[]}
         */
        pauseAfter?: any[],

        /**
         * if 'fade'- speed in ms of transition
         * @member  {number}
         */
        tipAnimationFadeSpeed?: number,

        /**
         * true/false for whether cookies are used
         * @member  {boolean}
         */
        cookieMonster?: boolean,

        /**
         * choose your own cookie name
         * member {string}
         */
        cookieName?: string,

        /**
         * Will this cookie be attached to a domain, ie. '.notableapp.com'
         * @member  {any}
         */
        cookieDomain?: any,

        /**
         * Set to '/' if you want the cookie for the whole website
         * @member  {any}
         */
        cookiePath?: any,

        /**
         * true or false to control whether localstorage is used
         * @member  {boolean}
         */
        localStorage?: boolean,

        /**
         * Keyname in localstorage
         * @member  {string}
         */
        localStorageKey?: string,

        /**
         * Where the tip be attached if not inline
         * @member  {HTMLElement}
         */
        tipContainer?: HTMLElement,

        /**
         * Whether to cover page with modal during the tour
         * @member  {boolean}
         */
        modal?: boolean,

        /**
         * Whether to expose the elements at each step in the tour (requires modal:true)
         * @member  {boolean}
         */
        expose?: boolean,

        /**
         * A method to call after an element has been exposed
         * @method  * 
         * @param  Tip Index
         * @param  Tip object
         * @param  Element
         */
        postExposeCallback?: (index: number, nextTip: JQuery, el?: JQuery) => void,

        /**
         * A method to call before the tour starts (passed index, tip, and cloned exposed element)
         * @method  * 
         * @param  Current Tip Index
         * @param  Current Tip object
         * @param  Element
         */
        preRideCallback?: (index: number, currentTip: JQuery, el?: JQuery) => void,

        /**
         * a method to call once the tour closes
         * @method  * 
         * @param  Current Tip Index
         * @param  Current Tip object
         * @param  Is Aborted?
         */
        postRideCallback?: (index: number, currentTip: JQuery, isAborted?: boolean) => void,

        /**
         * A method to call after each step
         * @method  * 
         * @param  Current Tip Index
         * @param  Current Tip object
         * @param  Is Aborted?
         */
        postStepCallback?: (index: number, currentTip: JQuery, isAborted?: boolean) => void,

        /**
         * A method to call before each step
         * @method  * 
         * @param  Tip Index
         * @param  Tip object
         * @param  Element
         */
        preStepCallback?: (index: number, nextTip: JQuery, el?: JQuery) => void,

        /**
         * HTML segments for tip layout
         * @member  {JoyrideTemplate}
         */
        template?: JoyrideTemplate
}
declare interface Joyride {

    /**
     * Default function, no options
     * @method  * 
     * @return  JQuery instance
     */
    (): JQuery,

    /**
     * Function with options
     * @method  * 
     * @param  An object with all the joyride options you want to overwrite.
     * @return  JQuery instance
     */
    (options: JoyrideOptions): JQuery,

    /**
     * Function with method name and params
     * @method  * 
     * @param  Name of method to call.
     * @param  parameters for method
     * @return  JQuery instance
     */
    (methodName: string, ...params: any[]): JQuery
}
declare interface JQuery {

    /**
     * joyride function
     * @return  Joyride instance.
     */
    joyride: Joyride
}