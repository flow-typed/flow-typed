// @flow
/**
 * Flowtype definitions for devextreme-15.1.5
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'viz' {
    declare module 'core' {
        declare         export interface Border {

            /**
             * Sets a border color for a selected series. 
             */
            color?: string,

                /**
                 * Sets border visibility for a selected series. 
                 */
                visible?: boolean,

                /**
                 * Sets a border width for a selected series. 
                 */
                width?: number
        }
        declare         export type DashedBorder = {

            /**
             * Specifies a dash style for the border of a selected series point. 
             */
            dashStyle?: string
        } & Border

        declare         export type DashedBorderWithOpacity = {

            /**
             * Specifies the opacity of the tooltip's border. 
             */
            opacity?: number
        } & DashedBorder

        declare         export interface Font {

            /**
             * Specifies the font color for a strip label. 
             */
            color?: string,

                /**
                 * Specifies the font family for a strip label. 
                 */
                family?: string,

                /**
                 * Specifies the font opacity for a strip label. 
                 */
                opacity?: number,

                /**
                 * Specifies the font size for a strip label. 
                 */
                size?: any,

                /**
                 * Specifies the font weight for the text displayed in strips. 
                 */
                weight?: number
        }
        declare         export interface Hatching {

            /**
             * Specifies how to apply hatching to highlight a selected series. 
             */
            direction?: string,

                /**
                 * Specifies the opacity of hatching lines. 
                 */
                opacity?: number,

                /**
                 * Specifies the distance between hatching lines in pixels. 
                 */
                step?: number,

                /**
                 * Specifies the width of hatching lines in pixels. 
                 */
                width?: number
        }
        declare         export interface Margins {

            /**
             * Specifies the legend's bottom margin in pixels. 
             */
            bottom?: number,

                /**
                 * Specifies the legend's left margin in pixels. 
                 */
                left?: number,

                /**
                 * Specifies the legend's right margin in pixels. 
                 */
                right?: number,

                /**
                 * Specifies the legend's bottom margin in pixels. 
                 */
                top?: number
        }
        declare         export interface Size {

            /**
             * Specifies the width of the widget. 
             */
            width?: number,

                /**
                 * Specifies the height of the widget. 
                 */
                height?: number
        }
        declare         export interface Tooltip {

            /**
             * Specifies the length of the tooltip's arrow in pixels. 
             */
            arrowLength?: number,

                /**
                 * Specifies the appearance of the tooltip's border. 
                 */
                border?: undefined.DashedBorderWithOpacity,

                /**
                 * Specifies a color for the tooltip. 
                 */
                color?: string,

                /**
                 * Specifies the z-index for tooltips. 
                 */
                zIndex?: number,

                /**
                 * Specifies text and appearance of a set of tooltips. 
                 */
                customizeTooltip?: (arg: Object) => {
                    color?: string,
                        text?: string
                },

                /**
                 * Specifies whether or not the tooltip is enabled. 
                 */
                enabled?: boolean,

                /**
                 * Specifies font options for the text displayed by the tooltip. 
                 */
                font?: Font,

                /**
                 * Specifies a format for the text displayed by the tooltip. 
                 */
                format?: string,

                /**
                 * Specifies the opacity of a tooltip. 
                 */
                opacity?: number,

                /**
                 * Specifies a distance from the tooltip's left/right boundaries to the inner text in pixels. 
                 */
                paddingLeftRight?: number,

                /**
                 * Specifies a distance from the tooltip's top/bottom boundaries to the inner text in pixels. 
                 */
                paddingTopBottom?: number,

                /**
                 * Specifies a precision for formatted values displayed by the tooltip. 
                 */
                precision?: number,

                /**
                 * Specifies options of the tooltip's shadow. 
                 */
                shadow?: {

                    /**
                     * Specifies the blur distance of the tooltip's shadow. 
                     */
                    blur?: number,

                    /**
                     * Specifies the color of the tooltip's shadow. 
                     */
                    color?: string,

                    /**
                     * Specifies the horizontal offset of the tooltip's shadow relative to the tooltip in pixels. 
                     */
                    offsetX?: number,

                    /**
                     * Specifies the vertical offset of the tooltip's shadow relative to the tooltip in pixels. 
                     */
                    offsetY?: number,

                    /**
                     * Specifies the opacity of the tooltip's shadow. 
                     */
                    opacity?: number
                }
        }
        declare         export interface Animation {

            /**
             * Determines how long animation runs. 
             */
            duration?: number,

                /**
                 * Specifies the animation easing mode. 
                 */
                easing?: string,

                /**
                 * Indicates whether or not animation is enabled. 
                 */
                enabled?: boolean
        }
        declare         export interface LoadingIndicator {

            /**
             * Specifies a color for the loading indicator background. 
             */
            backgroundColor?: string,

                /**
                 * Specifies font options for the loading indicator text. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies whether to show the loading indicator or not. 
                 */
                show?: boolean,

                /**
                 * Specifies a text to be displayed by the loading indicator. 
                 */
                text?: string
        }
        declare         export type LegendBorder = {

            /**
             * Specifies a radius for the corners of the legend border. 
             */
            cornerRadius?: number
        }
        declare         export interface BaseLegend {

            /**
             * Specifies the color of the legend's background. 
             */
            backgroundColor?: string,

                /**
                 * Specifies legend border settings. 
                 */
                border?: undefined.LegendBorder,

                /**
                 * Specifies how many columns must be taken to arrange legend items. 
                 */
                columnCount?: number,

                /**
                 * Specifies the spacing between a pair of neighboring legend columns in pixels. 
                 */
                columnItemSpacing?: number,

                /**
                 * Specifies font options for legend items. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies the legend's position on the map. 
                 */
                horizontalAlignment?: string,

                /**
                 * Specifies the alignment of legend items. 
                 */
                itemsAlignment?: string,

                /**
                 * Specifies the position of text relative to the item marker. 
                 */
                itemTextPosition?: string,

                /**
                 * Specifies the distance between the legend and the container borders in pixels. 
                 */
                margin?: undefined.Margins,

                /**
                 * Specifies the size of item markers in the legend in pixels. 
                 */
                markerSize?: number,

                /**
                 * Specifies whether to arrange legend items horizontally or vertically.  
                 */
                orientation?: string,

                /**
                 * Specifies the spacing between the legend left/right border and legend items in pixels. 
                 */
                paddingLeftRight?: number,

                /**
                 * Specifies the spacing between the legend top/bottom border and legend items in pixels. 
                 */
                paddingTopBottom?: number,

                /**
                 * Specifies how many rows must be taken to arrange legend items. 
                 */
                rowCount?: number,

                /**
                 * Specifies the spacing between a pair of neighboring legend rows in pixels. 
                 */
                rowItemSpacing?: number,

                /**
                 * Specifies the legend's position on the map. 
                 */
                verticalAlignment?: string,

                /**
                 * Specifies whether or not the legend is visible on the map. 
                 */
                visible?: boolean
        }
        declare         export interface BaseWidgetOptions {
            drawn?: (widget: Object) => void,

                /**
                 * A handler for the drawn event. 
                 */
                onDrawn?: (e: {
                    component: BaseWidget,
                    element: Element
                }) => void,
                incidentOccured?: (
                    incidentInfo: {
                        id: string,
                        type: string,
                        args: any,
                        text: string,
                        widget: string,
                        version: string
                    }) => void,

                /**
                 * A handler for the incidentOccurred event. 
                 */
                onIncidentOccurred?: (
                    component: BaseWidget,
                    element: Element,
                    target: {
                        id: string,
                        type: string,
                        args: any,
                        text: string,
                        widget: string,
                        version: string
                    }) => void,

                /**
                 * Notifies a widget that it is embedded into an HTML page that uses a path modifier. 
                 */
                pathModified?: boolean,

                /**
                 * Specifies whether or not the widget supports right-to-left representation. 
                 */
                rtlEnabled?: boolean,

                /**
                 * Sets the name of the theme to be used in the widget. 
                 */
                theme?: string
        }

        /**
         * This section describes options and methods that are common to all widgets. 
         */
        declare         export class BaseWidget mixins DOMComponent {

            /**
             * Returns the widget's SVG markup. 
             */
            svg(): string
        }
    }

    declare module 'charts' {

        /**
         * This section describes the fields and methods that can be used in code to manipulate the Series object. 
         */
        declare         export interface BaseSeries {

            /**
             * Provides information about the state of the series object. 
             */
            fullState: number,

                /**
                 * Returns the type of the series. 
                 */
                type: string,

                /**
                 * Unselects all the selected points of the series. The points are displayed in an initial style. 
                 */
                clearSelection(): void,

                /**
                 * Gets the color of a particular series. 
                 */
                getColor(): string,

                /**
                 * Gets a point from the series point collection based on the specified argument.
                 * @deprecated  getPointsByArg(pointArg).md
                 */
                getPointByArg(pointArg: any): Object,

                /**
                 * Gets points from the series point collection based on the specified argument. 
                 */
                getPointsByArg(pointArg: any): Array<BasePoint>,

                /**
                 * Gets a point from the series point collection based on the specified point position. 
                 */
                getPointByPos(positionIndex: number): Object,

                /**
                 * Selects the series. The series is displayed in a 'selected' style until another series is selected or the current series is deselected programmatically. 
                 */
                select(): void,

                /**
                 * Selects the specified point. The point is displayed in a 'selected' style. 
                 */
                selectPoint(point: BasePoint): void,

                /**
                 * Deselects the specified point. The point is displayed in an initial style. 
                 */
                deselectPoint(point: BasePoint): void,

                /**
                 * Returns an array of all points in the series. 
                 */
                getAllPoints(): Array<BasePoint>,

                /**
                 * Returns visible series points. 
                 */
                getVisiblePoints(): Array<BasePoint >
        }

        /**
         * This section describes the methods that can be used in code to manipulate the Point object. 
         */
        declare         export interface BasePoint {

            /**
             * Provides information about the state of the point object. 
             */
            fullState: number,

                /**
                 * Returns the point's argument value that was set in the data source. 
                 */
                originalArgument: any,

                /**
                 * Returns the point's value that was set in the data source. 
                 */
                originalValue: any,

                /**
                 * Returns the tag of the point. 
                 */
                tag: string,

                /**
                 * Deselects the point. 
                 */
                clearSelection(): void,

                /**
                 * Gets the color of a particular point. 
                 */
                getColor(): string,

                /**
                 * Hides the tooltip of the point. 
                 */
                hideTooltip(): void,

                /**
                 * Provides information about the hover state of a point. 
                 */
                isHovered(): any,

                /**
                 * Provides information about the selection state of a point. 
                 */
                isSelected(): any,

                /**
                 * Selects the point. The point is displayed in a 'selected' style until another point is selected or the current point is deselected programmatically. 
                 */
                select(): void,

                /**
                 * Shows the tooltip of the point. 
                 */
                showTooltip(): void,

                /**
                 * Allows you to obtain the label of a series point. 
                 */
                getLabel(): any,

                /**
                 * Returns the series object to which the point belongs. 
                 */
                series: BaseSeries
        }

        /**
         * This section describes the fields and methods that can be used in code to manipulate the Series object. 
         */
        declare         export type ChartSeries = {

            /**
             * Returns the name of the series pane. 
             */
            pane: string,

            /**
             * Returns the name of the value axis of the series. 
             */
            axis: string,

            /**
             * Returns the name of the series. 
             */
            name: string,

            /**
             * Returns the tag of the series. 
             */
            tag: string,

            /**
             * Hides a series. 
             */
            hide(): void,

            /**
             * Provides information about the hover state of a series. 
             */
            isHovered(): any,

            /**
             * Provides information about the selection state of a series. 
             */
            isSelected(): any,

            /**
             * Provides information about the visibility state of a series. 
             */
            isVisible(): boolean,

            /**
             * Makes a particular series visible. 
             */
            show(): void,
            selectPoint(point: ChartPoint): void,
            deselectPoint(point: ChartPoint): void,
            getAllPoints(): Array<ChartPoint>,
            getVisiblePoints(): Array<ChartPoint >
        } & BaseSeries


        /**
         * This section describes the methods that can be used in code to manipulate the Point object. 
         */
        declare         export type ChartPoint = {

            /**
             * Contains the close value of the point. This field is useful for points belonging to a series of the candle stick or stock type only. 
             */
            originalCloseValue: any,

            /**
             * Contains the high value of the point. This field is useful for points belonging to a series of the candle stick or stock type only. 
             */
            originalHighValue: any,

            /**
             * Contains the low value of the point. This field is useful for points belonging to a series of the candle stick or stock type only. 
             */
            originalLowValue: any,

            /**
             * Contains the first value of the point. This field is useful for points belonging to a series of the range area or range bar type only. 
             */
            originalMinValue: any,

            /**
             * Contains the open value of the point. This field is useful for points belonging to a series of the candle stick or stock type only. 
             */
            originalOpenValue: any,

            /**
             * Contains the size of the bubble as it was set in the data source. This field is useful for points belonging to a series of the bubble type only. 
             */
            size: any,

            /**
             * Gets the parameters of the point's minimum bounding rectangle (MBR). 
             */
            getBoundingRect(): {
                x: number,
                y: number,
                width: number,
                height: number
            },
            series: ChartSeries
        } & BasePoint


        /**
         * This section describes the methods that can be used in code to manipulate the Label object. 
         */
        declare         export interface Label {

            /**
             * Gets the parameters of the label's minimum bounding rectangle (MBR). 
             */
            getBoundingRect(): {
                    x: number,
                    y: number,
                    width: number,
                    height: number
                },

                /**
                 * Hides the point label. 
                 */
                hide(): void,

                /**
                 * Shows the point label. 
                 */
                show(): void
        }
        declare         export type PieSeries = {
            selectPoint(point: PiePoint): void,
            deselectPoint(point: PiePoint): void,
            getAllPoints(): Array<PiePoint>,
            getVisiblePoints(): Array<PiePoint >
        } & BaseSeries


        /**
         * This section describes the methods that can be used in code to manipulate the Point object. 
         */
        declare         export type PiePoint = {

            /**
             * Gets the percentage value of the specific point. 
             */
            percent: any,

            /**
             * Provides information about the visibility state of a point. 
             */
            isVisible(): boolean,

            /**
             * Makes a specific point visible. 
             */
            show(): void,

            /**
             * Hides a specific point. 
             */
            hide(): void,
            series: PieSeries
        } & BasePoint


        /**
         * This section describes the fields and methods that can be used in code to manipulate the Series object. 
         */
        declare         export type PolarSeries = {

            /**
             * Returns the name of the value axis of the series. 
             */
            axis: string,

            /**
             * Returns the name of the series. 
             */
            name: string,

            /**
             * Returns the tag of the series. 
             */
            tag: string,

            /**
             * Hides a series. 
             */
            hide(): void,

            /**
             * Provides information about the hover state of a series. 
             */
            isHovered(): any,

            /**
             * Provides information about the selection state of a series. 
             */
            isSelected(): any,

            /**
             * Provides information about the visibility state of a series. 
             */
            isVisible(): boolean,

            /**
             * Makes a particular series visible. 
             */
            show(): void,
            selectPoint(point: PolarPoint): void,
            deselectPoint(point: PolarPoint): void,
            getAllPoints(): Array<PolarPoint>,
            getVisiblePoints(): Array<PolarPoint >
        } & BaseSeries


        /**
         * This section describes the methods that can be used in code to manipulate the Point object. 
         */
        declare         export type PolarPoint = {
            series: PolarSeries
        } & BasePoint

        declare         export interface Strip {

            /**
             * Specifies a color for a strip. 
             */
            color?: string,

                /**
                 * An object that defines the label configuration options of a strip. 
                 */
                label?: {

                    /**
                     * Specifies the text displayed in a strip. 
                     */
                    text?: string
                },

                /**
                 * Specifies a start value for a strip. 
                 */
                startValue?: any,

                /**
                 * Specifies an end value for a strip. 
                 */
                endValue?: any
        }
        declare         export interface BaseSeriesConfigLabel {

            /**
             * Specifies a format for arguments displayed by point labels. 
             */
            argumentFormat?: string,

                /**
                 * Specifies a precision for formatted point arguments displayed in point labels. 
                 */
                argumentPrecision?: number,

                /**
                 * Specifies a background color for point labels. 
                 */
                backgroundColor?: string,

                /**
                 * Specifies border options for point labels. 
                 */
                border?: undefined.DashedBorder,

                /**
                 * Specifies connector options for series point labels. 
                 */
                connector?: {

                    /**
                     * Specifies the color of label connectors. 
                     */
                    color?: string,

                    /**
                     * Indicates whether or not label connectors are visible. 
                     */
                    visible?: boolean,

                    /**
                     * Specifies the width of label connectors. 
                     */
                    width?: number
                },

                /**
                 * Specifies a callback function that returns the text to be displayed by point labels. 
                 */
                customizeText?: (pointInfo: Object) => string,

                /**
                 * Specifies font options for the text displayed in point labels. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies a format for the text displayed by point labels. 
                 */
                format?: string,
                position?: string,

                /**
                 * Specifies a precision for formatted point values displayed in point labels. 
                 */
                precision?: number,

                /**
                 * Specifies the angle used to rotate point labels from their initial position. 
                 */
                rotationAngle?: number,

                /**
                 * Specifies the visibility of point labels. 
                 */
                visible?: boolean
        }
        declare         export type SeriesConfigLabel = {

            /**
             * Specifies whether or not to show a label when the point has a zero value. 
             */
            showForZeroValues?: boolean
        } & BaseSeriesConfigLabel

        declare         export type ChartSeriesConfigLabel = {

            /**
             * Specifies how to align point labels relative to the corresponding data points that they represent. 
             */
            alignment?: string,

            /**
             * Specifies how to shift point labels horizontally from their initial positions. 
             */
            horizontalOffset?: number,

            /**
             * Specifies how to shift point labels vertically from their initial positions. 
             */
            verticalOffset?: number,

            /**
             * Specifies a precision for the percentage values displayed in the labels of a full-stacked-like series. 
             */
            percentPrecision?: number
        } & SeriesConfigLabel

        declare         export interface BaseCommonSeriesConfig {

            /**
             * Specifies the data source field that provides arguments for series points. 
             */
            argumentField?: string,
                axis?: string,

                /**
                 * An object defining the label configuration options for a series in the dxChart widget. 
                 */
                label?: ChartSeriesConfigLabel,

                /**
                 * Specifies border options for point labels. 
                 */
                border?: undefined.DashedBorder,

                /**
                 * Specifies a series color. 
                 */
                color?: string,

                /**
                 * Specifies the dash style of the series' line. 
                 */
                dashStyle?: string,
                hoverMode?: string,

                /**
                 * An object defining configuration options for a hovered series. 
                 */
                hoverStyle?: {

                    /**
                     * An object defining the border options for a hovered series. 
                     */
                    border?: undefined.DashedBorder,

                    /**
                     * <p>Sets a color for a series when it is hovered over.</p> 
                     */
                    color?: string,

                    /**
                     * Specifies the dash style for the line in a hovered series. 
                     */
                    dashStyle?: string,

                    /**
                     * Specifies the hatching options to be applied when a series is hovered over. 
                     */
                    hatching?: undefined.Hatching,

                    /**
                     * Specifies the width of a line in a hovered series. 
                     */
                    width?: number
                },

                /**
                 * Specifies whether a chart ignores null data points or not. 
                 */
                ignoreEmptyPoints?: boolean,

                /**
                 * Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed. 
                 */
                maxLabelCount?: number,

                /**
                 * Specifies the minimal length of a displayed bar in pixels. 
                 */
                minBarSize?: number,

                /**
                 * Specifies opacity for a series. 
                 */
                opacity?: number,

                /**
                 * Specifies the series elements to highlight when the series is selected. 
                 */
                selectionMode?: string,

                /**
                 * An object defining configuration options for a selected series. 
                 */
                selectionStyle?: {

                    /**
                     * An object defining the border options for a selected series. 
                     */
                    border?: undefined.DashedBorder,

                    /**
                     * Sets a color for a series when it is selected. 
                     */
                    color?: string,

                    /**
                     * Specifies the dash style for the line in a selected series. 
                     */
                    dashStyle?: string,

                    /**
                     * Specifies the hatching options to be applied when a series is selected. 
                     */
                    hatching?: undefined.Hatching,

                    /**
                     * Specifies the width of a line in a selected series. 
                     */
                    width?: number
                },

                /**
                 * Specifies whether or not to show the series in the chart's legend. 
                 */
                showInLegend?: boolean,

                /**
                 * Specifies the name of the stack where the values of the _stackedBar_ series must be located. 
                 */
                stack?: string,

                /**
                 * Specifies the name of the data source field that provides data about a point. 
                 */
                tagField?: string,

                /**
                 * Specifies the data source field that provides values for series points. 
                 */
                valueField?: string,

                /**
                 * Specifies the visibility of a series. 
                 */
                visible?: boolean,

                /**
                 * Specifies a line width. 
                 */
                width?: number,

                /**
                 * Configures error bars. 
                 */
                valueErrorBar?: {

                    /**
                     * Specifies whether error bars must be displayed in full or partially. 
                     */
                    displayMode?: string,

                    /**
                     * Specifies the data field that provides data for low error values. 
                     */
                    lowValueField?: string,

                    /**
                     * Specifies the data field that provides data for high error values. 
                     */
                    highValueField?: string,

                    /**
                     * Specifies how error bar values must be calculated. 
                     */
                    type?: string,

                    /**
                     * Specifies the value to be used for generating error bars. 
                     */
                    value?: number,

                    /**
                     * Specifies the color of error bars. 
                     */
                    color?: string,

                    /**
                     * Specifies the opacity of error bars. 
                     */
                    opacity?: number,

                    /**
                     * Specifies the length of the lines that indicate the error bar edges. 
                     */
                    edgeLength?: number,

                    /**
                     * Specifies the width of the error bar line. 
                     */
                    lineWidth?: number
                }
        }
        declare         export interface CommonPointOptions {

            /**
             * Specifies border options for points in the line and area series. 
             */
            border?: undefined.Border,

                /**
                 * Specifies the points color. 
                 */
                color?: string,

                /**
                 * Specifies what series points to highlight when a point is hovered over. 
                 */
                hoverMode?: string,

                /**
                 * An object defining configuration options for a hovered point. 
                 */
                hoverStyle?: {

                    /**
                     * An object defining the border options for a hovered point. 
                     */
                    border?: undefined.Border,

                    /**
                     * Sets a color for a point when it is hovered over. 
                     */
                    color?: string,

                    /**
                     * Specifies the diameter of a hovered point in the series that represents data points as symbols (not as bars for instance). 
                     */
                    size?: number
                },

                /**
                 * Specifies what series points to highlight when a point is selected. 
                 */
                selectionMode?: string,

                /**
                 * An object defining configuration options for a selected point. 
                 */
                selectionStyle?: {

                    /**
                     * An object defining the border options for a selected point. 
                     */
                    border?: undefined.Border,

                    /**
                     * <p>Sets a color for a point when it is selected.</p> 
                     */
                    color?: string,

                    /**
                     * Specifies the diameter of a selected point in the series that represents data points as symbols (not as bars for instance). 
                     */
                    size?: number
                },

                /**
                 * Specifies the point diameter in pixels for those series that represent data points as symbols (not as bars for instance). 
                 */
                size?: number,

                /**
                 * Specifies a symbol for presenting points of the line and area series. 
                 */
                symbol?: string,
                visible?: boolean
        }
        declare         export type ChartCommonPointOptions = {

            /**
             * An object specifying the parameters of an image that is used as a point marker. 
             */
            image?: {

                /**
                 * Specifies the height of an image that is used as a point marker. 
                 */
                height?: any,

                /**
                 * Specifies a URL leading to the image to be used as a point marker. 
                 */
                url?: any,

                /**
                 * Specifies the width of an image that is used as a point marker. 
                 */
                width?: any
            }
        } & CommonPointOptions

        declare         export type PolarCommonPointOptions = {

            /**
             * An object specifying the parameters of an image that is used as a point marker. 
             */
            image?: {

                /**
                 * Specifies the height of an image that is used as a point marker. 
                 */
                height?: number,

                /**
                 * Specifies a URL leading to the image to be used as a point marker. 
                 */
                url?: string,

                /**
                 * Specifies the width of an image that is used as a point marker. 
                 */
                width?: number
            }
        } & CommonPointOptions


        /**
         * An object that defines configuration options for chart series. 
         */
        declare         export type CommonSeriesConfig = {

            /**
             * Specifies the data source field that provides a 'close' value for a _candleStick_ or _stock_ series. 
             */
            closeValueField?: string,

            /**
             * Specifies a radius for bar corners. 
             */
            cornerRadius?: number,

            /**
             * Specifies the data source field that provides a 'high' value for a _candleStick_ or _stock_ series. 
             */
            highValueField?: string,

            /**
             * Specifies the color for the body (rectangle) of a _candleStick_ series. 
             */
            innerColor?: string,

            /**
             * Specifies the data source field that provides a 'low' value for a _candleStick_ or _stock_ series. 
             */
            lowValueField?: string,

            /**
             * Specifies the data source field that provides an 'open' value for a _candleStick_ or _stock_ series. 
             */
            openValueField?: string,

            /**
             * Specifies the pane that will be used to display a series. 
             */
            pane?: string,

            /**
             * An object defining configuration options for points in line-, scatter- and area-like series. 
             */
            point?: ChartCommonPointOptions,

            /**
             * Specifies the data source field that provides values for one end of a range series. To set the data source field for the other end of the range series, use the rangeValue2Field property. 
             */
            rangeValue1Field?: string,

            /**
             * Specifies the data source field that provides values for the second end of a range series. To set the data source field for the other end of the range series, use the rangeValue1Field property. 
             */
            rangeValue2Field?: string,

            /**
             * Specifies reduction options for the stock or candleStick series. 
             */
            reduction?: {

                /**
                 * Specifies a color for the points whose reduction level price is lower in comparison to the value in the previous point. 
                 */
                color?: string,

                /**
                 * Specifies for which price level (open, high, low or close) to enable reduction options in the series. 
                 */
                level?: string
            },

            /**
             * Specifies the data source field that defines the size of bubbles. 
             */
            sizeField?: string
        } & BaseCommonSeriesConfig

        declare         export type CommonSeriesSettings = {

            /**
             * <p>An object that specifies configuration options for all series of the <i>area</i> type in the chart.</p> 
             */
            area?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _bar_ type in the chart. 
             */
            bar?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the bubble type in the chart. 
             */
            bubble?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _candleStick_ type in the chart. 
             */
            candlestick?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _fullStackedArea_ type in the chart. 
             */
            fullstackedarea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the Full-Stacked Spline Area type in the chart. 
             */
            fullstackedsplinearea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _fullStackedBar_ type in the chart. 
             */
            fullstackedbar?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _fullStackedLine_ type in the chart. 
             */
            fullstackedline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the Full-Stacked Spline type in the chart. 
             */
            fullstackedspline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _line_ type in the chart. 
             */
            line?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _rangeArea_ type in the chart. 
             */
            rangearea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _rangeBar_ type in the chart. 
             */
            rangebar?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _scatter_ type in the chart. 
             */
            scatter?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _spline_ type in the chart. 
             */
            spline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _splineArea_ type in the chart. 
             */
            splinearea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stackedArea_ type in the chart. 
             */
            stackedarea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the Stacked Spline Area type in the chart. 
             */
            stackedsplinearea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stackedBar_ type in the chart. 
             */
            stackedbar?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stackedLine_ type in the chart. 
             */
            stackedline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the Stacked Spline type in the chart. 
             */
            stackedspline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stepArea_ type in the chart. 
             */
            steparea?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stepLine_ type in the chart. 
             */
            stepline?: CommonSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stock_ type in the chart. 
             */
            stock?: CommonSeriesConfig,

            /**
             * Sets a series type. 
             */
            type?: string
        } & CommonSeriesConfig

        declare         export type SeriesConfig = {

            /**
             * Specifies the name that identifies the series. 
             */
            name?: string,

            /**
             * Specifies data about a series. 
             */
            tag?: any,

            /**
             * Sets the series type. 
             */
            type?: string
        } & CommonSeriesConfig


        /**
         * An object that defines configuration options for polar chart series. 
         */
        declare         export type CommonPolarSeriesConfig = {

            /**
             * Specifies whether or not to close the chart by joining the end point with the first point. 
             */
            closed?: boolean,
            label?: SeriesConfigLabel,
            point?: PolarCommonPointOptions
        } & BaseCommonSeriesConfig

        declare         export type CommonPolarSeriesSettings = {

            /**
             * An object that specifies configuration options for all series of the <i>area</i> type in the chart. 
             */
            area?: CommonPolarSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _bar_ type in the chart. 
             */
            bar?: CommonPolarSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _line_ type in the chart. 
             */
            line?: CommonPolarSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _scatter_ type in the chart. 
             */
            scatter?: CommonPolarSeriesConfig,

            /**
             * An object that specifies configuration options for all series of the _stackedBar_ type in the chart. 
             */
            stackedbar?: CommonPolarSeriesConfig,

            /**
             * Sets a series type. 
             */
            type?: string
        } & CommonPolarSeriesConfig

        declare         export type PolarSeriesConfig = {

            /**
             * Specifies the name that identifies the series. 
             */
            name?: string,

            /**
             * Specifies data about a series. 
             */
            tag?: any,

            /**
             * Sets the series type. 
             */
            type?: string
        } & CommonPolarSeriesConfig

        declare         export type PieSeriesConfigLabel = {

            /**
             * Specifies how to shift labels from their initial position in a radial direction in pixels. 
             */
            radialOffset?: number,

            /**
             * Specifies a precision for the percentage values displayed in labels. 
             */
            percentPrecision?: number
        } & BaseSeriesConfigLabel


        /**
         * An object that defines configuration options for chart series. 
         */
        declare         export interface CommonPieSeriesConfig {

            /**
             * Specifies the data source field that provides arguments for series points. 
             */
            argumentField?: string,

                /**
                 * Specifies the required type for series arguments. 
                 */
                argumentType?: string,

                /**
                 * An object defining the series border configuration options. 
                 */
                border?: undefined.DashedBorder,

                /**
                 * Specifies a series color. 
                 */
                color?: string,

                /**
                 * Specifies the chart elements to highlight when a series is hovered over. 
                 */
                hoverMode?: string,

                /**
                 * An object defining configuration options for a hovered series. 
                 */
                hoverStyle?: {

                    /**
                     * An object defining the border options for a hovered series. 
                     */
                    border?: undefined.DashedBorder,

                    /**
                     * Sets a color for the series when it is hovered over. 
                     */
                    color?: string,

                    /**
                     * Specifies the hatching options to be applied when a point is hovered over. 
                     */
                    hatching?: undefined.Hatching
                },

                /**
                 * Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. 
                 */
                innerRadius?: number,

                /**
                 * An object defining the label configuration options. 
                 */
                label?: PieSeriesConfigLabel,

                /**
                 * Specifies how many points are acceptable to be in a series to display all labels for these points. Otherwise, the labels will not be displayed. 
                 */
                maxLabelCount?: number,

                /**
                 * Specifies a minimal size of a displayed pie segment. 
                 */
                minSegmentSize?: number,

                /**
                 * Specifies the direction in which the dxPieChart's series points are located. 
                 */
                segmentsDirection?: string,

                /**
                 * <p>Specifies the chart elements to highlight when the series is selected.</p> 
                 */
                selectionMode?: string,

                /**
                 * An object defining configuration options for the series when it is selected. 
                 */
                selectionStyle?: {

                    /**
                     * An object defining the border options for a selected series. 
                     */
                    border?: undefined.DashedBorder,

                    /**
                     * Sets a color for a series when it is selected. 
                     */
                    color?: string,

                    /**
                     * Specifies the hatching options to be applied when a point is selected. 
                     */
                    hatching?: undefined.Hatching
                },

                /**
                 * Specifies chart segment grouping options. 
                 */
                smallValuesGrouping?: {

                    /**
                     * Specifies the name of the grouped chart segment. This name represents the segment in the chart legend. 
                     */
                    groupName?: string,

                    /**
                     * Specifies the segment grouping mode. 
                     */
                    mode?: string,

                    /**
                     * Specifies a threshold for segment values. 
                     */
                    threshold?: number,

                    /**
                     * Specifies how many segments must not be grouped. 
                     */
                    topCount?: number
                },

                /**
                 * Specifies a start angle for a pie chart in arc degrees. 
                 */
                startAngle?: number,

                /**
                 * <p>Specifies the name of the data source field that provides data about a point.</p> 
                 */
                tagField?: string,

                /**
                 * Specifies the data source field that provides values for series points. 
                 */
                valueField?: string
        }
        declare         export type PieSeriesConfig = {

            /**
             * Sets the series type. 
             */
            type?: string
        } & CommonPieSeriesConfig

        declare         export interface SeriesTemplate {

            /**
             * Specifies a callback function that returns a series object with individual series settings. 
             */
            customizeSeries?: (seriesName: string) => SeriesConfig,

                /**
                 * Specifies a data source field that represents the series name. 
                 */
                nameField?: string
        }
        declare         export interface PolarSeriesTemplate {

            /**
             * Specifies a callback function that returns a series object with individual series settings. 
             */
            customizeSeries?: (seriesName: string) => PolarSeriesConfig,

                /**
                 * Specifies a data source field that represents the series name. 
                 */
                nameField?: string
        }
        declare         export interface ChartCommonConstantLineLabel {

            /**
             * Specifies font options for a constant line label. 
             */
            font?: undefined.Font,

                /**
                 * Specifies the position of the constant line label relative to the chart plot. 
                 */
                position?: string,

                /**
                 * Indicates whether or not to display labels for the axis constant lines. 
                 */
                visible?: boolean
        }
        declare         export interface PolarCommonConstantLineLabel {

            /**
             * Indicates whether or not to display labels for the axis constant lines. 
             */
            visible?: boolean,

                /**
                 * Specifies font options for a constant line label. 
                 */
                font?: undefined.Font
        }
        declare         export interface ConstantLineStyle {

            /**
             * Specifies a color for a constant line. 
             */
            color?: string,

                /**
                 * Specifies a dash style for a constant line. 
                 */
                dashStyle?: string,

                /**
                 * Specifies a constant line width in pixels. 
                 */
                width?: number
        }
        declare         export type ChartCommonConstantLineStyle = {

            /**
             * An object defining constant line label options. 
             */
            label?: ChartCommonConstantLineLabel,

            /**
             * Specifies the space between the constant line label and the left/right side of the constant line. 
             */
            paddingLeftRight?: number,

            /**
             * Specifies the space between the constant line label and the top/bottom side of the constant line. 
             */
            paddingTopBottom?: number
        } & ConstantLineStyle

        declare         export type PolarCommonConstantLineStyle = {

            /**
             * An object defining constant line label options. 
             */
            label?: PolarCommonConstantLineLabel
        } & ConstantLineStyle

        declare         export interface CommonAxisLabel {

            /**
             * Specifies font options for axis labels. 
             */
            font?: undefined.Font,

                /**
                 * Specifies the spacing between an axis and its labels in pixels. 
                 */
                indentFromAxis?: number,

                /**
                 * Indicates whether or not axis labels are visible. 
                 */
                visible?: boolean
        }
        declare         export type ChartCommonAxisLabel = {

            /**
             * Specifies the label's position relative to the tick (grid line). 
             */
            alignment?: string,

            /**
             * Specifies the overlap resolving algorithm to be applied to axis labels. 
             */
            overlappingBehavior?: {

                /**
                 * Specifies how to arrange axis labels. 
                 */
                mode?: string,

                /**
                 * Specifies the angle used to rotate axis labels. 
                 */
                rotationAngle?: number,

                /**
                 * Specifies the spacing that must be set between staggered rows when the 'stagger' algorithm is applied. 
                 */
                staggeringSpacing?: number
            }
        } & CommonAxisLabel

        declare         export type PolarCommonAxisLabel = {

            /**
             * Specifies the overlap resolving algorithm to be applied to axis labels. 
             */
            overlappingBehavior?: string
        } & CommonAxisLabel

        declare         export interface CommonAxisTitle {

            /**
             * Specifies font options for an axis title. 
             */
            font?: undefined.Font,

                /**
                 * Specifies a margin for an axis title in pixels. 
                 */
                margin?: number
        }
        declare         export interface BaseCommonAxisSettings {

            /**
             * Specifies the color of the line that represents an axis. 
             */
            color?: string,

                /**
                 * Specifies whether ticks/grid lines of a discrete axis are located between labels or cross the labels. 
                 */
                discreteAxisDivisionMode?: string,

                /**
                 * An object defining the configuration options for the grid lines of an axis in the dxPolarChart widget. 
                 */
                grid?: {

                    /**
                     * Specifies a color for grid lines. 
                     */
                    color?: string,

                    /**
                     * Specifies an opacity for grid lines. 
                     */
                    opacity?: number,

                    /**
                     * Indicates whether or not the grid lines of an axis are visible. 
                     */
                    visible?: boolean,

                    /**
                     * Specifies the width of grid lines. 
                     */
                    width?: number
                },

                /**
                 * Specifies the options of the minor grid. 
                 */
                minorGrid?: {

                    /**
                     * Specifies a color for the lines of the minor grid. 
                     */
                    color?: string,

                    /**
                     * Specifies an opacity for the lines of the minor grid. 
                     */
                    opacity?: number,

                    /**
                     * Indicates whether the minor grid is visible or not. 
                     */
                    visible?: boolean,

                    /**
                     * Specifies a width for the lines of the minor grid. 
                     */
                    width?: number
                },

                /**
                 * Indicates whether or not an axis is inverted. 
                 */
                inverted?: boolean,

                /**
                 * Specifies the opacity of the line that represents an axis. 
                 */
                opacity?: number,

                /**
                 * Indicates whether or not to set ticks/grid lines of a continuous axis of the 'date-time' type at the beginning of each date-time interval. 
                 */
                setTicksAtUnitBeginning?: boolean,

                /**
                 * An object defining the configuration options for axis ticks. 
                 */
                tick?: {

                    /**
                     * Specifies ticks color. 
                     */
                    color?: string,

                    /**
                     * Specifies tick opacity. 
                     */
                    opacity?: number,

                    /**
                     * Indicates whether or not ticks are visible on an axis. 
                     */
                    visible?: boolean
                },

                /**
                 * Specifies the options of the minor ticks. 
                 */
                minorTick?: {

                    /**
                     * Specifies a color for the minor ticks. 
                     */
                    color?: string,

                    /**
                     * Specifies an opacity for the minor ticks. 
                     */
                    opacity?: number,

                    /**
                     * Indicates whether or not the minor ticks are displayed on an axis. 
                     */
                    visible?: boolean
                },

                /**
                 * Indicates whether or not the line that represents an axis in a chart is visible. 
                 */
                visible?: boolean,

                /**
                 * Specifies the width of the line that represents an axis in the chart. 
                 */
                width?: number
        }
        declare         export type ChartCommonAxisSettings = {

            /**
             * Specifies the appearance of all the widget's constant lines. 
             */
            constantLineStyle?: ChartCommonConstantLineStyle,

            /**
             * An object defining the label configuration options that are common for all axes in the dxChart widget. 
             */
            label?: ChartCommonAxisLabel,

            /**
             * Specifies a coefficient that determines the spacing between the maximum series point and the axis. 
             */
            maxValueMargin?: number,

            /**
             * Specifies a coefficient that determines the spacing between the minimum series point and the axis. 
             */
            minValueMargin?: number,

            /**
             * Specifies, in pixels, the space reserved for an axis. 
             */
            placeholderSize?: number,

            /**
             * An object defining configuration options for strip style. 
             */
            stripStyle?: {

                /**
                 * An object defining the configuration options for a strip label style. 
                 */
                label?: {

                    /**
                     * Specifies font options for a strip label. 
                     */
                    font?: undefined.Font,

                    /**
                     * Specifies the label's position on a strip. 
                     */
                    horizontalAlignment?: string,

                    /**
                     * Specifies a label's position on a strip. 
                     */
                    verticalAlignment?: string
                },

                /**
                 * Specifies the spacing, in pixels, between the left/right strip border and the strip label. 
                 */
                paddingLeftRight?: number,

                /**
                 * Specifies the spacing, in pixels, between the top/bottom strip borders and the strip label. 
                 */
                paddingTopBottom?: number
            },

            /**
             * An object defining the title configuration options that are common for all axes in the dxChart widget. 
             */
            title?: CommonAxisTitle,

            /**
             * Indicates whether or not to display series with indents from axis boundaries. 
             */
            valueMarginsEnabled?: boolean
        } & BaseCommonAxisSettings

        declare         export type PolarCommonAxisSettings = {

            /**
             * Specifies the appearance of all the widget's constant lines. 
             */
            constantLineStyle?: PolarCommonConstantLineStyle,

            /**
             * An object defining the label configuration options that are common for all axes in the dxPolarChart widget. 
             */
            label?: PolarCommonAxisLabel,

            /**
             * An object defining configuration options for strip style. 
             */
            stripStyle?: {

                /**
                 * An object defining the configuration options for a strip label style. 
                 */
                label?: {

                    /**
                     * Specifies font options for a strip label. 
                     */
                    font?: undefined.Font
                }
            }
        } & BaseCommonAxisSettings

        declare         export type ChartConstantLineLabel = {

            /**
             * Specifies the horizontal alignment of a constant line label. 
             */
            horizontalAlignment?: string,

            /**
             * Specifies the vertical alignment of a constant line label. 
             */
            verticalAlignment?: string,

            /**
             * Specifies the text to be displayed in a constant line label. 
             */
            text?: string
        } & ChartCommonConstantLineLabel

        declare         export type PolarConstantLineLabel = {

            /**
             * Specifies the text to be displayed in a constant line label. 
             */
            text?: string
        } & PolarCommonConstantLineLabel

        declare         export interface AxisLabel {

            /**
             * Specifies the text for a hint that appears when a user hovers the mouse pointer over a label on the value axis. 
             */
            customizeHint?: (argument: {
                    value: any,
                    valueText: string
                }) => string,

                /**
                 * Specifies a callback function that returns the text to be displayed in value axis labels. 
                 */
                customizeText?: (argument: {
                    value: any,
                    valueText: string
                }) => string,

                /**
                 * Specifies a format for the text displayed by axis labels. 
                 */
                format?: string,

                /**
                 * Specifies a precision for the formatted value displayed in the axis labels. 
                 */
                precision?: number
        }
        declare         export type ChartAxisLabel = {} & ChartCommonAxisLabel & AxisLabel

        declare         export type PolarAxisLabel = {} & PolarCommonAxisLabel & AxisLabel

        declare         export type AxisTitle = {

            /**
             * Specifies the text for the value axis title. 
             */
            text?: string
        } & CommonAxisTitle

        declare         export type ChartConstantLineStyle = {

            /**
             * An object defining constant line label options. 
             */
            label?: ChartConstantLineLabel
        } & ChartCommonConstantLineStyle

        declare         export type ChartConstantLine = {

            /**
             * An object defining constant line label options. 
             */
            label?: ChartConstantLineLabel,

            /**
             * Specifies a value to be displayed by a constant line. 
             */
            value?: any
        } & ChartConstantLineStyle

        declare         export type PolarConstantLine = {

            /**
             * An object defining constant line label options. 
             */
            label?: PolarConstantLineLabel,

            /**
             * Specifies a value to be displayed by a constant line. 
             */
            value?: any
        } & PolarCommonConstantLineStyle

        declare         export interface Axis {

            /**
             * Specifies a coefficient for dividing the value axis. 
             */
            axisDivisionFactor?: number,

                /**
                 * Specifies the order in which discrete values are arranged on the value axis. 
                 */
                categories?: Array<any>,

                /**
                 * Specifies the value to be raised to a power when generating ticks for a logarithmic axis. 
                 */
                logarithmBase?: number,

                /**
                 * Specifies an interval between axis ticks/grid lines. 
                 */
                tickInterval?: any,

                /**
                 * Specifies the interval between minor ticks. 
                 */
                minorTickInterval?: any,

                /**
                 * Specifies the number of minor ticks between two neighboring major ticks. 
                 */
                minorTickCount?: number,

                /**
                 * Specifies the required type of the value axis. 
                 */
                type?: string,

                /**
                 * Specifies the pane on which the current value axis will be displayed. 
                 */
                pane?: string,

                /**
                 * Specifies options for value axis strips. 
                 */
                strips?: Array<Strip >
        }
        declare         export type ChartAxis = {

            /**
             * Defines an array of the value axis constant lines. 
             */
            constantLines?: Array<ChartConstantLine>,

            /**
             * Specifies the appearance options for the constant lines of the value axis. 
             */
            constantLineStyle?: ChartCommonConstantLineStyle,

            /**
             * Specifies options for value axis labels. 
             */
            label?: ChartAxisLabel,

            /**
             * Specifies the maximum value on the value axis. 
             */
            max?: any,

            /**
             * Specifies the minimum value on the value axis. 
             */
            min?: any,

            /**
             * Specifies the position of the value axis on a chart. 
             */
            position?: string,

            /**
             * Specifies the title for a value axis. 
             */
            title?: AxisTitle
        } & ChartCommonAxisSettings & Axis

        declare         export type PolarAxis = {

            /**
             * Defines an array of the value axis constant lines. 
             */
            constantLines?: Array<PolarConstantLine>,

            /**
             * Specifies options for value axis labels. 
             */
            label?: PolarAxisLabel
        } & PolarCommonAxisSettings & Axis

        declare         export interface ArgumentAxis {

            /**
             * Specifies the desired type of axis values. 
             */
            argumentType?: string,

                /**
                 * Specifies the elements that will be highlighted when the argument axis is hovered over. 
                 */
                hoverMode?: string
        }
        declare         export type ChartArgumentAxis = {} & ChartAxis & ArgumentAxis

        declare         export type PolarArgumentAxis = {

            /**
             * Specifies a start angle for the argument axis in degrees. 
             */
            startAngle?: number,

            /**
             * Specifies whether or not to display the first point at the angle specified by the startAngle option. 
             */
            firstPointOnStartAngle?: boolean,

            /**
             * Specifies the period of the argument values in the data source. 
             */
            period?: number
        } & PolarAxis & ArgumentAxis

        declare         export interface ValueAxis {

            /**
             * Specifies the name of the value axis. 
             */
            name?: string,

                /**
                 * Specifies whether or not to indicate a zero value on the value axis. 
                 */
                showZero?: boolean,

                /**
                 * Specifies the desired type of axis values. 
                 */
                valueType?: string
        }
        declare         export type ChartValueAxis = {

            /**
             * Specifies the spacing, in pixels, between multiple value axes in a chart. 
             */
            multipleAxesSpacing?: number,

            /**
             * Specifies the value by which the chart's value axes are synchronized. 
             */
            synchronizedValue?: number
        } & ChartAxis & ValueAxis

        declare         export type PolarValueAxis = {

            /**
             * Indicates whether to display series with indents from axis boundaries. 
             */
            valueMarginsEnabled?: boolean,

            /**
             * Specifies a coefficient that determines the spacing between the maximum series point and the axis. 
             */
            maxValueMargin?: number,

            /**
             * Specifies a coefficient that determines the spacing between the minimum series point and the axis. 
             */
            minValueMargin?: number,
            tick?: {
                visible?: boolean
            }
        } & PolarAxis & ValueAxis

        declare         export interface CommonPane {

            /**
             * Specifies a background color in a pane. 
             */
            backgroundColor?: string,

                /**
                 * Specifies the border options of a chart's pane. 
                 */
                border?: PaneBorder
        }
        declare         export type Pane = {

            /**
             * Specifies the name of a pane. 
             */
            name?: string
        } & CommonPane

        declare         export type PaneBorder = {

            /**
             * Specifies the bottom border's visibility state in a pane. 
             */
            bottom?: boolean,

            /**
             * Specifies the left border's visibility state in a pane. 
             */
            left?: boolean,

            /**
             * Specifies the right border's visibility state in a pane. 
             */
            right?: boolean,

            /**
             * Specifies the top border's visibility state in a pane. 
             */
            top?: boolean
        }
        declare         export type ChartAnimation = {

            /**
             * Specifies the maximum series point count in the chart that the animation supports. 
             */
            maxPointCountSupported?: number
        }
        declare         export type BaseChartTooltip = {

            /**
             * Specifies a format for arguments of the chart's series points. 
             */
            argumentFormat?: string,

            /**
             * Specifies a precision for formatted arguments displayed in tooltips. 
             */
            argumentPrecision?: number,

            /**
             * Specifies a precision for a percent value displayed in tooltips for stacked series and dxPieChart series. 
             */
            percentPrecision?: number
        }
        declare         export type BaseChartOptions<TPoint>= {

            /**
             * Specifies adaptive layout options. 
             */
            adaptiveLayout?: {

                /**
                 * Specifies the width of the widget container that is small enough for the layout to begin adapting. 
                 */
                width?: number,

                /**
                 * Specifies the height of the widget container that is small enough for the layout to begin adapting. 
                 */
                height?: number,

                /**
                 * Specifies whether or not point labels can be hidden when the layout is adapting. 
                 */
                keepLabels?: boolean
            },

            /**
             * Specifies animation options. 
             */
            animation?: ChartAnimation,

            /**
             * Specifies a callback function that returns an object with options for a specific point label. 
             */
            customizeLabel?: (labelInfo: Object) => Object,

            /**
             * Specifies a callback function that returns an object with options for a specific point. 
             */
            customizePoint?: (pointInfo: Object) => Object,

            /**
             * Specifies a data source for the chart. 
             */
            dataSource?: any,
            done?: Function,

            /**
             * Specifies the appearance of the loading indicator. 
             */
            loadingIndicator?: undefined.LoadingIndicator,

            /**
             * Specifies options of a dxChart's (dxPieChart's) legend. 
             */
            legend?: core.BaseLegend,

            /**
             * Specifies the blank space between the chart's extreme elements and the boundaries of the area provided for the widget (see size) in pixels. 
             */
            margin?: undefined.Margins,

            /**
             * Sets the name of the palette to be used in the chart. Alternatively, an array of colors can be set as a custom palette to be used within this chart. 
             */
            palette?: any,

            /**
             * A handler for the done event. 
             */
            onDone?: (e: {
                component: BaseChart,
                element: Element
            }) => void,

            /**
             * A handler for the pointClick event. 
             */
            onPointClick?: any,
            pointClick?: any,

            /**
             * A handler for the pointHoverChanged event. 
             */
            onPointHoverChanged?: (e: {
                component: BaseChart,
                element: Element,
                target: TPoint
            }) => void,
            pointHoverChanged?: (point: TPoint) => void,

            /**
             * A handler for the pointSelectionChanged event. 
             */
            onPointSelectionChanged?: (e: {
                component: BaseChart,
                element: Element,
                target: TPoint
            }) => void,
            pointSelectionChanged?: (point: TPoint) => void,

            /**
             * Specifies whether a single point or multiple points can be selected in the chart. 
             */
            pointSelectionMode?: string,

            /**
             * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates. 
             */
            redrawOnResize?: boolean,

            /**
             * Specifies options for the dxChart and dxPieChart widget series. 
             */
            series?: any,

            /**
             * Specifies the size of the widget in pixels. 
             */
            size?: undefined.Size,

            /**
             * Specifies a title for the chart. 
             */
            title?: {

                /**
                 * Specifies font options for the title. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies the title's horizontal position in the chart. 
                 */
                horizontalAlignment?: string,

                /**
                 * Specifies a title's position on the chart in the vertical direction. 
                 */
                verticalAlignment?: string,

                /**
                 * Specifies the distance between the title and surrounding chart elements in pixels. 
                 */
                margin?: undefined.Margins,

                /**
                 * Specifies the height of the space reserved for the title. 
                 */
                placeholderSize?: number,

                /**
                 * Specifies a text for the chart's title. 
                 */
                text?: string
            },

            /**
             * Specifies tooltip options. 
             */
            tooltip?: BaseChartTooltip,

            /**
             * A handler for the tooltipShown event. 
             */
            onTooltipShown?: (e: {
                component: BaseChart,
                element: Element,
                target: BasePoint
            }) => void,

            /**
             * A handler for the tooltipHidden event. 
             */
            onTooltipHidden?: (e: {
                component: BaseChart,
                element: Element,
                target: BasePoint
            }) => void,
            tooltipHidden?: (point: TPoint) => void,
            tooltipShown?: (point: TPoint) => void
        }

        /**
         * A base class for all chart widgets included in the ChartJS library. 
         */
        declare         export class BaseChart mixins undefined.BaseWidget {

            /**
             * Deselects the chart's selected series. The series is displayed in an initial style. 
             */
            clearSelection(): void;

            /**
             * Gets the current size of the widget. 
             */
            getSize(): {
                width: number,
                height: number
            };

            /**
             * Displays the loading indicator. 
             */
            showLoadingIndicator(): void;

            /**
             * Conceals the loading indicator. 
             */
            hideLoadingIndicator(): void;

            /**
             * Hides all widget tooltips. 
             */
            hideTooltip(): void;

            /**
             * Redraws a widget. 
             */
            render(
                renderOptions?: {
                    force?: boolean,
                    animate?: boolean,
                    asyncSeriesRendering?: boolean
                }): void
        }
        declare         export type AdvancedLegend = {

            /**
             * Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item. 
             */
            customizeHint?: (
                seriesInfo: {
                    seriesName: string,
                    seriesIndex: number,
                    seriesColor: string
                }) => string,

            /**
             * <p>Specifies a callback function that returns the text to be displayed by legend items.</p> 
             */
            customizeText?: (
                seriesInfo: {
                    seriesName: string,
                    seriesIndex: number,
                    seriesColor: string
                }) => string,

            /**
             * Specifies what series elements to highlight when a corresponding item in the legend is hovered over. 
             */
            hoverMode?: string
        }
        declare         export type AdvancedOptions<TPoint, TSeries>= {

            /**
             * A handler for the argumentAxisClick event. 
             */
            onArgumentAxisClick?: any,

            /**
             * Specifies the color of the parent page element. 
             */
            containerBackgroundColor?: string,

            /**
             * An object providing options for managing data from a data source. 
             */
            dataPrepareSettings?: {

                /**
                 * Specifies whether or not to validate the values from a data source. 
                 */
                checkTypeForAllData?: boolean,

                /**
                 * Specifies whether or not to convert the values from a data source into the data type of an axis. 
                 */
                convertToAxisDataType?: boolean,

                /**
                 * Specifies how to sort the series points. 
                 */
                sortingMethod?: any
            },

            /**
             * A handler for the legendClick event. 
             */
            onLegendClick?: any,

            /**
             * A handler for the seriesClick event. 
             */
            onSeriesClick?: any,

            /**
             * A handler for the seriesHoverChanged event. 
             */
            onSeriesHoverChanged?: (e: {
                component: BaseChart,
                element: Element,
                target: TSeries
            }) => void,

            /**
             * A handler for the seriesSelectionChanged event. 
             */
            onSeriesSelectionChanged?: (e: {
                component: BaseChart,
                element: Element,
                target: TSeries
            }) => void,

            /**
             * Specifies whether a single series or multiple series can be selected in the chart. 
             */
            seriesSelectionMode?: string,

            /**
             * Specifies how the chart must behave when series point labels overlap. 
             */
            resolveLabelOverlapping?: string
        } & BaseChartOptions

        declare         export type Legend = {

            /**
             * Specifies whether the legend is located outside or inside the chart's plot. 
             */
            position?: string
        } & AdvancedLegend

        declare         export type ChartTooltip = {

            /**
             * Specifies whether the tooltip must be located in the center of a bar or on its edge. Applies only to the Bar series. 
             */
            location?: string,

            /**
             * Specifies the kind of information to display in a tooltip. 
             */
            shared?: boolean
        } & BaseChartTooltip

        declare         export type dxChartOptions = {

            /**
             * Specifies a value indicating whether all bars in a series must have the same width, or may have different widths if any points in other series are missing. 
             */
            equalBarWidth?: any,
            adaptiveLayout?: {
                keepLabels?: boolean
            },

            /**
             * Indicates whether or not to synchronize value axes when they are displayed on a single pane. 
             */
            synchronizeMultiAxes?: boolean,

            /**
             * Specifies whether or not to filter the series points depending on their quantity. 
             */
            useAggregation?: boolean,

            /**
             * Indicates whether or not to adjust a value axis to the current minimum and maximum values of a zoomed chart. 
             */
            adjustOnZoom?: boolean,

            /**
             * Specifies argument axis options for the dxChart widget. 
             */
            argumentAxis?: ChartArgumentAxis,
            argumentAxisClick?: any,

            /**
             * An object defining the configuration options that are common for all axes of the dxChart widget. 
             */
            commonAxisSettings?: ChartCommonAxisSettings,

            /**
             * An object defining the configuration options that are common for all panes in the dxChart widget. 
             */
            commonPaneSettings?: CommonPane,

            /**
             * An object defining the configuration options that are common for all series of the dxChart widget. 
             */
            commonSeriesSettings?: CommonSeriesSettings,

            /**
             * An object that specifies the appearance options of the chart crosshair. 
             */
            crosshair?: {

                /**
                 * Specifies a color for the crosshair lines. 
                 */
                color?: string,

                /**
                 * Specifies a dash style for the crosshair lines. 
                 */
                dashStyle?: string,

                /**
                 * Specifies whether to enable the crosshair or not. 
                 */
                enabled?: boolean,

                /**
                 * Specifies the opacity of the crosshair lines. 
                 */
                opacity?: number,

                /**
                 * Specifies the width of the crosshair lines. 
                 */
                width?: number,

                /**
                 * Specifies the appearance of the horizontal crosshair line. 
                 */
                horizontalLine?: CrosshaierWithLabel,

                /**
                 * Specifies the appearance of the vertical crosshair line. 
                 */
                verticalLine?: CrosshaierWithLabel,

                /**
                 * Specifies the options of the crosshair labels. 
                 */
                label?: {

                    /**
                     * Specifies a color for the background of the crosshair labels. 
                     */
                    backgroundColor?: string,

                    /**
                     * Specifies whether the crosshair labels are visible or not. 
                     */
                    visible?: boolean,

                    /**
                     * Specifies font options for the text of the crosshair labels. 
                     */
                    font?: undefined.Font
                }
            },

            /**
             * Specifies a default pane for the chart's series. 
             */
            defaultPane?: string,

            /**
             * Specifies a coefficient determining the diameter of the largest bubble. 
             */
            maxBubbleSize?: number,

            /**
             * Specifies the diameter of the smallest bubble measured in pixels. 
             */
            minBubbleSize?: number,

            /**
             * Defines the dxChart widget's <a href="/Documentation/Guide/Data_Visualization/Charts/Chart_Elements?version=15_1#Panes">pane(s)</a>. 
             */
            panes?: Array<Pane>,

            /**
             * Swaps the axes round so that the value axis becomes horizontal and the argument axes becomes vertical. 
             */
            rotated?: boolean,

            /**
             * Specifies the options of a chart's legend. 
             */
            legend?: Legend,

            /**
             * Specifies options for dxChart widget series. 
             */
            series?: Array<SeriesConfig>,
            legendClick?: any,
            seriesClick?: any,
            seriesHoverChanged?: (series: ChartSeries) => void,
            seriesSelectionChanged?: (series: ChartSeries) => void,

            /**
             * Defines options for the series template. 
             */
            seriesTemplate?: SeriesTemplate,

            /**
             * Specifies tooltip options. 
             */
            tooltip?: ChartTooltip,

            /**
             * Specifies value axis options for the dxChart widget. 
             */
            valueAxis?: Array<ChartValueAxis>,

            /**
             * Enables scrolling in your chart. 
             */
            scrollingMode?: string,

            /**
             * Enables zooming in your chart. 
             */
            zoomingMode?: string,

            /**
             * Specifies the settings of the scroll bar. 
             */
            scrollBar?: {

                /**
                 * Specifies whether the scroll bar is visible or not. 
                 */
                visible?: boolean,

                /**
                 * Specifies the spacing between the scroll bar and the chart's plot in pixels. 
                 */
                offset?: number,

                /**
                 * Specifies the color of the scroll bar. 
                 */
                color?: string,

                /**
                 * Specifies the width of the scroll bar in pixels. 
                 */
                width?: number,

                /**
                 * Specifies the opacity of the scroll bar. 
                 */
                opacity?: number,

                /**
                 * Specifies the position of the scroll bar in the chart. 
                 */
                position?: string
            }
        } & AdvancedOptions


        /**
         * A widget used to embed charts into HTML JS applications. 
         */
        declare         export class dxChart mixins BaseChart {
            constructor(element: JQuery, options?: dxChartOptions): this;
            constructor(element: Element, options?: dxChartOptions): this;

            /**
             * Returns an array of all series in the chart. 
             */
            getAllSeries(): Array<ChartSeries>;

            /**
             * Gets a series within the chart's series collection by the specified name (see the name option). 
             */
            getSeriesByName(seriesName: string): ChartSeries;

            /**
             * Gets a series within the chart's series collection by its position number. 
             */
            getSeriesByPos(seriesIndex: number): ChartSeries;

            /**
             * Sets the specified start and end values for the chart's argument axis. 
             */
            zoomArgument(startValue: any, endValue: any): void
        }
        declare type CrosshaierWithLabel = {

            /**
             * Configures the label that belongs to the horizontal crosshair line. 
             */
            label?: {

                /**
                 * Specifies a color for the background of the label that belongs to the horizontal crosshair line. 
                 */
                backgroundColor?: string,

                /**
                 * Specifies whether the label of the horizontal crosshair line is visible or not. 
                 */
                visible?: boolean,

                /**
                 * Specifies font options for the text of the label that belongs to the horizontal crosshair line. 
                 */
                font?: undefined.Font
            }
        }
        declare         export type PolarChartTooltip = {

            /**
             * Specifies the kind of information to display in a tooltip. 
             */
            shared?: boolean
        } & BaseChartTooltip

        declare         export type dxPolarChartOptions = {

            /**
             * Specifies a value indicating whether all bars in a series must have the same angle, or may have different angles if any points in other series are missing. 
             */
            equalBarWidth?: boolean,

            /**
             * Specifies adaptive layout options. 
             */
            adaptiveLayout?: {
                width?: number,
                height?: number,

                /**
                 * Specifies whether or not point labels can be hidden when the layout is adapting. 
                 */
                keepLabels?: boolean
            },

            /**
             * Indicates whether or not to display a "spider web". 
             */
            useSpiderWeb?: boolean,

            /**
             * Specifies argument axis options for the dxPolarChart widget. 
             */
            argumentAxis?: PolarArgumentAxis,

            /**
             * An object defining the configuration options that are common for all axes of the dxPolarChart widget. 
             */
            commonAxisSettings?: PolarCommonAxisSettings,

            /**
             * An object defining the configuration options that are common for all series of the dxPolarChart widget. 
             */
            commonSeriesSettings?: CommonPolarSeriesSettings,

            /**
             * Specifies the options of a chart's legend. 
             */
            legend?: AdvancedLegend,

            /**
             * Specifies options for dxPolarChart widget series. 
             */
            series?: Array<PolarSeriesConfig>,

            /**
             * Defines options for the series template. 
             */
            seriesTemplate?: PolarSeriesTemplate,

            /**
             * Specifies tooltip options. 
             */
            tooltip?: PolarChartTooltip,

            /**
             * Specifies value axis options for the dxPolarChart widget. 
             */
            valueAxis?: PolarValueAxis
        } & AdvancedOptions


        /**
         * A chart widget displaying data in a polar coordinate system. 
         */
        declare         export class dxPolarChart mixins BaseChart {
            constructor(element: JQuery, options?: dxPolarChartOptions): this;
            constructor(element: Element, options?: dxPolarChartOptions): this;

            /**
             * Returns an array of all series in the chart. 
             */
            getAllSeries(): Array<PolarSeries>;

            /**
             * Gets a series within the chart's series collection by the specified name (see the name option). 
             */
            getSeriesByName(seriesName: string): PolarSeries;

            /**
             * Gets a series within the chart's series collection by its position number. 
             */
            getSeriesByPos(seriesIndex: number): PolarSeries
        }
        declare         export type PieLegend = {

            /**
             * Specifies what chart elements to highlight when a corresponding item in the legend is hovered over. 
             */
            hoverMode?: string,

            /**
             * Specifies the text for a hint that appears when a user hovers the mouse pointer over a legend item. 
             */
            customizeHint?: (
                pointInfo: {
                    pointName: string,
                    pointIndex: number,
                    pointColor: string
                }) => string,

            /**
             * Specifies a callback function that returns the text to be displayed by a legend item. 
             */
            customizeText?: (
                pointInfo: {
                    pointName: string,
                    pointIndex: number,
                    pointColor: string
                }) => string
        }
        declare         export type dxPieChartOptions = {

            /**
             * Specifies adaptive layout options. 
             */
            adaptiveLayout?: {

                /**
                 * Specifies whether or not point labels can be hidden when the layout is adapting. 
                 */
                keepLabels?: boolean
            },

            /**
             * Specifies dxPieChart legend options. 
             */
            legend?: PieLegend,

            /**
             * Specifies options for the series of the dxPieChart widget. 
             */
            series?: Array<PieSeriesConfig>,

            /**
             * Specifies the diameter of the pie. 
             */
            diameter?: number,

            /**
             * A handler for the legendClick event. 
             */
            onLegendClick?: any,
            legendClick?: any,

            /**
             * Specifies how the chart must behave when series point labels overlap. 
             */
            resolveLabelOverlapping?: string
        } & BaseChartOptions


        /**
         * A circular chart widget for HTML JS applications. 
         */
        declare         export class dxPieChart mixins BaseChart {
            constructor(element: JQuery, options?: dxPieChartOptions): this;
            constructor(element: Element, options?: dxPieChartOptions): this;

            /**
             * Provides access to the dxPieChart series. 
             */
            getSeries(): PieSeries
        }
    }

    declare module 'gauges' {
        declare         export interface BaseRangeContainer {

            /**
             * Specifies a range container's background color. 
             */
            backgroundColor?: string,

                /**
                 * Specifies the offset of the range container from an invisible scale line in pixels. 
                 */
                offset?: number,

                /**
                 * Sets the name of the palette or an array of colors to be used for coloring the gauge range container. 
                 */
                palette?: any,

                /**
                 * An array of objects representing ranges contained in the range container. 
                 */
                ranges?: Array<{
                    startValue: number,
                    endValue: number,
                    color: string
                }>,

                /**
                 * Specifies a color of a range. 
                 */
                color?: string,

                /**
                 * Specifies an end value of a range. 
                 */
                endValue?: number,

                /**
                 * Specifies a start value of a range. 
                 */
                startValue?: number
        }
        declare         export interface ScaleTick {

            /**
             * Specifies the color of the scale's minor ticks. 
             */
            color?: string,

                /**
                 * Specifies an array of custom minor ticks. 
                 */
                customTickValues?: Array<any>,

                /**
                 * Specifies the length of the scale's minor ticks. 
                 */
                length?: number,

                /**
                 * Indicates whether automatically calculated minor ticks are visible or not. 
                 */
                showCalculatedTicks?: boolean,

                /**
                 * Specifies an interval between minor ticks. 
                 */
                tickInterval?: number,

                /**
                 * Indicates whether scale minor ticks are visible or not. 
                 */
                visible?: boolean,

                /**
                 * Specifies the width of the scale's minor ticks. 
                 */
                width?: number
        }
        declare         export type ScaleMajorTick = {

            /**
             * Specifies whether or not to expand the current major tick interval if labels overlap each other. 
             */
            useTicksAutoArrangement?: boolean
        } & ScaleTick

        declare         export interface BaseScaleLabel {

            /**
             * Specifies whether or not scale labels should be colored similarly to their corresponding ranges in the range container. 
             */
            useRangeColors?: boolean,

                /**
                 * Specifies a callback function that returns the text to be displayed in scale labels. 
                 */
                customizeText?: (scaleValue: {
                    value: number,
                    valueText: string
                }) => string,

                /**
                 * Specifies font options for the text displayed in the scale labels of the gauge. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies a format for the text displayed in scale labels. 
                 */
                format?: string,

                /**
                 * Specifies a precision for the formatted value displayed in the scale labels. 
                 */
                precision?: number,

                /**
                 * Specifies whether or not scale labels are visible on the gauge. 
                 */
                visible?: boolean
        }
        declare         export interface BaseScale {

            /**
             * Specifies the end value for the scale of the gauge. 
             */
            endValue?: number,

                /**
                 * Specifies whether or not to hide the first scale label. 
                 */
                hideFirstLabel?: boolean,

                /**
                 * Specifies whether or not to hide the first major tick on the scale. 
                 */
                hideFirstTick?: boolean,

                /**
                 * Specifies whether or not to hide the last scale label. 
                 */
                hideLastLabel?: boolean,

                /**
                 * Specifies whether or not to hide the last major tick on the scale. 
                 */
                hideLastTick?: boolean,

                /**
                 * Specifies common options for scale labels. 
                 */
                label?: BaseScaleLabel,

                /**
                 * Specifies options of the gauge's major ticks. 
                 */
                majorTick?: ScaleMajorTick,

                /**
                 * Specifies options of the gauge's minor ticks. 
                 */
                minorTick?: ScaleTick,

                /**
                 * Specifies the start value for the scale of the gauge. 
                 */
                startValue?: number
        }
        declare         export interface BaseValueIndicator {

            /**
             * Specifies the type of subvalue indicators. 
             */
            type?: string,

                /**
                 * Specifies the background color for the indicator of the rangeBar type. 
                 */
                backgroundColor?: string,

                /**
                 * Specifies the base value for the indicator of the rangeBar type. 
                 */
                baseValue?: number,

                /**
                 * Specifies a color of the indicator. 
                 */
                color?: string,

                /**
                 * Specifies the range bar size for an indicator of the rangeBar type. 
                 */
                size?: number,
                text?: {

                    /**
                     * Specifies a callback function that returns the text to be displayed in an indicator. 
                     */
                    customizeText?: (indicatedValue: {
                        value: number,
                        valueText: string
                    }) => string,
                    font?: undefined.Font,

                    /**
                     * Specifies a format for the text displayed in an indicator. 
                     */
                    format?: string,

                    /**
                     * Specifies the range bar's label indent in pixels. 
                     */
                    indent?: number,

                    /**
                     * Specifies a precision for the formatted value displayed by an indicator. 
                     */
                    precision?: number
                },
                offset?: number,
                length?: number,
                width?: number,

                /**
                 * Specifies the length of an arrow for the indicator of the textCloud type in pixels. 
                 */
                arrowLength?: number,

                /**
                 * Sets the array of colors to be used for coloring subvalue indicators. 
                 */
                palette?: Array<any>,

                /**
                 * Specifies the distance between the needle and the center of a gauge for the indicator of a needle-like type. 
                 */
                indentFromCenter?: number,

                /**
                 * Specifies the second color for the indicator of the twoColorNeedle type. 
                 */
                secondColor?: string,

                /**
                 * Specifies the length of a twoNeedleColor type indicator tip as a percentage. 
                 */
                secondFraction?: number,

                /**
                 * Specifies the spindle's diameter in pixels for the indicator of a needle-like type. 
                 */
                spindleSize?: number,

                /**
                 * Specifies the inner diameter in pixels, so that the spindle has the shape of a ring. 
                 */
                spindleGapSize?: number,

                /**
                 * Specifies the orientation of the rangeBar indicator on a vertically oriented dxLinearGauge widget. 
                 */
                horizontalOrientation?: string,

                /**
                 * Specifies the orientation of the rangeBar indicator on a horizontally oriented dxLinearGauge widget. 
                 */
                verticalOrientation?: string
        }
        declare         export interface SharedGaugeOptions {

            /**
             * Specifies animation options. 
             */
            animation?: undefined.Animation,

                /**
                 * Specifies the appearance of the loading indicator. 
                 */
                loadingIndicator?: undefined.LoadingIndicator,

                /**
                 * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates. 
                 */
                redrawOnResize?: boolean,

                /**
                 * Specifies the size of the widget in pixels. 
                 */
                size?: undefined.Size,

                /**
                 * Specifies a subtitle for a gauge. 
                 */
                subtitle?: {

                    /**
                     * Specifies font options for the subtitle. 
                     */
                    font?: undefined.Font,

                    /**
                     * Specifies a text for the subtitle. 
                     */
                    text?: string
                },

                /**
                 * Specifies a title for a gauge. 
                 */
                title?: {

                    /**
                     * Specifies font options for the title. 
                     */
                    font?: undefined.Font,

                    /**
                     * Specifies a title's position on the gauge. 
                     */
                    position?: string,

                    /**
                     * Specifies a text for the title. 
                     */
                    text?: string
                },

                /**
                 * Specifies options for gauge tooltips. 
                 */
                tooltip?: undefined.Tooltip,

                /**
                 * A handler for the tooltipShown event. 
                 */
                onTooltipShown?: (e: {
                    component: dxBaseGauge,
                    element: Element,
                    target: {}
                }) => void,

                /**
                 * A handler for the tooltipHidden event. 
                 */
                onTooltipHidden?: (e: {
                    component: dxBaseGauge,
                    element: Element,
                    target: {}
                }) => void
        }
        declare         export type BaseGaugeOptions = {

            /**
             * Specifies the color of the parent page element. 
             */
            containerBackgroundColor?: string,

            /**
             * Specifies the blank space in pixels between the widget's extreme elements and the boundaries of the area provided for the widget (see the size option). 
             */
            margin?: undefined.Margins,

            /**
             * Specifies options of the gauge's range container. 
             */
            rangeContainer?: BaseRangeContainer,

            /**
             * Specifies a gauge's scale options. 
             */
            scale?: BaseScale,

            /**
             * Specifies the appearance options of subvalue indicators. 
             */
            subvalueIndicator?: BaseValueIndicator,

            /**
             * Specifies a set of subvalues to be designated by the subvalue indicators. 
             */
            subvalues?: Array<number>,

            /**
             * Specifies the main value on a gauge. 
             */
            value?: number,

            /**
             * Specifies the appearance options of the value indicator. 
             */
            valueIndicator?: BaseValueIndicator
        } & & SharedGaugeOptions


        /**
         * A gauge widget. 
         */
        declare         export class dxBaseGauge mixins undefined.BaseWidget {

            /**
             * Displays the loading indicator. 
             */
            showLoadingIndicator(): void;

            /**
             * Conceals the loading indicator. 
             */
            hideLoadingIndicator(): void;

            /**
             * Redraws a widget. 
             */
            render(): void;

            /**
             * Returns the main gauge value. 
             */
            value(): number;

            /**
             * Updates a gauge value. 
             */
            value(value: number): void;

            /**
             * Returns an array of gauge subvalues. 
             */
            subvalues(): Array<number>;

            /**
             * Updates gauge subvalues. 
             */
            subvalues(subvalues: Array<number>): void
        }
        declare         export type LinearRangeContainer = {

            /**
             * Specifies the orientation of the range container on a vertically oriented dxLinearGauge widget. 
             */
            horizontalOrientation?: string,

            /**
             * Specifies the orientation of a range container on a horizontally oriented dxLinearGauge widget. 
             */
            verticalOrientation?: string,

            /**
             * Specifies the width of the range container's start and end boundaries in the dxLinearGauge widget. 
             */
            width?: any,

            /**
             * Specifies an end width of a range container. 
             */
            end?: number,

            /**
             * Specifies a start width of a range container. 
             */
            start?: number
        } & BaseRangeContainer

        declare         export type LinearScaleLabel = {

            /**
             * Specifies the spacing between scale labels and ticks. 
             */
            indentFromTick?: number
        } & BaseScaleLabel

        declare         export type LinearScale = {

            /**
             * Specifies the orientation of scale ticks on a vertically oriented dxLinearGauge widget. 
             */
            horizontalOrientation?: string,
            label?: LinearScaleLabel,

            /**
             * Specifies the orientation of scale ticks on a horizontally oriented dxLinearGauge widget. 
             */
            verticalOrientation?: string
        } & BaseScale

        declare         export type dxLinearGaugeOptions = {

            /**
             * Specifies the options required to set the geometry of the dxLinearGauge widget. 
             */
            geometry?: {

                /**
                 * Indicates whether to display the dxLinearGauge widget vertically or horizontally. 
                 */
                orientation?: string
            },

            /**
             * Specifies gauge range container options. 
             */
            rangeContainer?: LinearRangeContainer,
            scale?: LinearScale
        } & BaseGaugeOptions


        /**
         * A widget that represents a gauge with a linear scale. 
         */
        declare         export class dxLinearGauge mixins dxBaseGauge {
            constructor(element: JQuery, options?: dxLinearGaugeOptions): this;
            constructor(element: Element, options?: dxLinearGaugeOptions): this
        }
        declare         export type CircularRangeContainer = {

            /**
             * Specifies the orientation of the range container in the dxCircularGauge widget. 
             */
            orientation?: string,

            /**
             * Specifies the range container's width in pixels. 
             */
            width?: number
        } & BaseRangeContainer

        declare         export type CircularScaleLabel = {

            /**
             * Specifies the spacing between scale labels and ticks. 
             */
            indentFromTick?: number
        } & BaseScaleLabel

        declare         export type CircularScale = {
            label?: CircularScaleLabel,

            /**
             * Specifies the orientation of scale ticks. 
             */
            orientation?: string
        } & BaseScale

        declare         export type dxCircularGaugeOptions = {

            /**
             * Specifies the options required to set the geometry of the dxCircularGauge widget. 
             */
            geometry?: {

                /**
                 * Specifies the end angle of the circular gauge's arc. 
                 */
                endAngle?: number,

                /**
                 * Specifies the start angle of the circular gauge's arc. 
                 */
                startAngle?: number
            },

            /**
             * Specifies gauge range container options. 
             */
            rangeContainer?: CircularRangeContainer,
            scale?: CircularScale
        } & BaseGaugeOptions


        /**
         * A widget that represents a gauge with a circular scale. 
         */
        declare         export class dxCircularGauge mixins dxBaseGauge {
            constructor(element: JQuery, options?: dxCircularGaugeOptions): this;
            constructor(element: Element, options?: dxCircularGaugeOptions): this
        }
        declare         export type dxBarGaugeOptions = {

            /**
             * Specifies a color for the remaining segment of the bar's track. 
             */
            backgroundColor?: string,

            /**
             * Specifies a distance between bars in pixels. 
             */
            barSpacing?: number,

            /**
             * Specifies a base value for bars. 
             */
            baseValue?: number,

            /**
             * Specifies an end value for the gauge's invisible scale. 
             */
            endValue?: number,

            /**
             * Defines the shape of the gauge's arc. 
             */
            geometry?: {

                /**
                 * Specifies the end angle of the bar gauge's arc. 
                 */
                endAngle?: number,

                /**
                 * Specifies the start angle of the bar gauge's arc. 
                 */
                startAngle?: number
            },

            /**
             * Specifies the options of the labels that accompany gauge bars. 
             */
            label?: {

                /**
                 * Specifies a color for the label connector text. 
                 */
                connectorColor?: string,

                /**
                 * Specifies the width of the label connector in pixels. 
                 */
                connectorWidth?: number,

                /**
                 * Specifies a callback function that returns a text for labels. 
                 */
                customizeText?: (barValue: {
                    value: number,
                    valueText: string
                }) => string,

                /**
                 * Specifies font options for bar labels. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies a format for bar labels. 
                 */
                format?: string,

                /**
                 * Specifies the distance between the upper bar and bar labels in pixels. 
                 */
                indent?: number,

                /**
                 * Specifies a precision for the formatted value displayed by labels. 
                 */
                precision?: number,

                /**
                 * Specifies whether bar labels appear on a gauge or not. 
                 */
                visible?: boolean
            },

            /**
             * Sets the name of the palette or an array of colors to be used for coloring the gauge range container. 
             */
            palette?: string,

            /**
             * Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar. 
             */
            relativeInnerRadius?: number,

            /**
             * Specifies a start value for the gauge's invisible scale. 
             */
            startValue?: number,

            /**
             * Specifies the array of values to be indicated on a bar gauge. 
             */
            values?: Array<number >
        } & & SharedGaugeOptions


        /**
         * A circular bar widget. 
         */
        declare         export class dxBarGauge mixins undefined.BaseWidget {
            constructor(element: JQuery, options?: dxBarGaugeOptions): this;
            constructor(element: Element, options?: dxBarGaugeOptions): this;

            /**
             * Displays the loading indicator. 
             */
            showLoadingIndicator(): void;

            /**
             * Conceals the loading indicator. 
             */
            hideLoadingIndicator(): void;

            /**
             * Redraws the widget. 
             */
            render(): void;

            /**
             * Returns an array of gauge values. 
             */
            values(): Array<number>;

            /**
             * Updates the values displayed by a gauge. 
             */
            values(values: Array<number>): void
        }
    }

    declare module 'rangeSelector' {
        declare         export type dxRangeSelectorOptions = {

            /**
             * Specifies the options for the range selector's background. 
             */
            background?: {

                /**
                 * Specifies the background color for the dxRangeSelector. 
                 */
                color?: string,

                /**
                 * Specifies image options. 
                 */
                image?: {

                    /**
                     * Specifies a location for the image in the background of a range selector. 
                     */
                    location?: string,

                    /**
                     * Specifies the image's URL. 
                     */
                    url?: string
                },

                /**
                 * Indicates whether or not the background (background color and/or image) is visible. 
                 */
                visible?: boolean
            },

            /**
             * Specifies the dxRangeSelector's behavior options. 
             */
            behavior?: {

                /**
                 * Indicates whether or not you can swap sliders. 
                 */
                allowSlidersSwap?: boolean,

                /**
                 * Indicates whether or not animation is enabled.
                 */
                animationEnabled?: boolean,

                /**
                 * Specifies when to call the onSelectedRangeChanged function. 
                 */
                callSelectedRangeChanged?: string,

                /**
                 * Indicates whether or not an end user can specify the range using a mouse, without the use of sliders. 
                 */
                manualRangeSelectionEnabled?: boolean,

                /**
                 * Indicates whether or not an end user can shift the selected range to the required location on a scale by clicking. 
                 */
                moveSelectedRangeByClick?: boolean,

                /**
                 * Indicates whether to snap a slider to ticks. 
                 */
                snapToTicks?: boolean
            },

            /**
             * Specifies the options required to display a chart as the range selector's background. 
             */
            chart?: {

                /**
                 * Specifies a coefficient for determining an indent from the bottom background boundary to the lowest chart point. 
                 */
                bottomIndent?: number,

                /**
                 * An object defining the common configuration options for the chart’s series. 
                 */
                commonSeriesSettings?: undefined.CommonSeriesSettings,

                /**
                 * An object providing options for managing data from a data source. 
                 */
                dataPrepareSettings?: {

                    /**
                     * Specifies whether or not to validate values from a data source. 
                     */
                    checkTypeForAllData?: boolean,

                    /**
                     * Specifies whether or not to convert the values from a data source into the data type of an axis. 
                     */
                    convertToAxisDataType?: boolean,

                    /**
                     * Specifies how to sort series points. 
                     */
                    sortingMethod?: any
                },

                /**
                 * Specifies a value indicating whether all bars in a series must have the same width, or may have different widths if any points in other series are missing. 
                 */
                equalBarWidth?: any,

                /**
                 * An object defining the chart’s series. 
                 */
                series?: Array<undefined.SeriesConfig>,

                /**
                 * Defines options for the series template. 
                 */
                seriesTemplate?: undefined.SeriesTemplate,

                /**
                 * Specifies a coefficient for determining an indent from the background's top boundary to the topmost chart point. 
                 */
                topIndent?: number,

                /**
                 * Specifies whether or not to filter the series points depending on their quantity. 
                 */
                useAggregation?: boolean,

                /**
                 * Specifies options for the chart's value axis. 
                 */
                valueAxis?: {

                    /**
                     * Indicates whether or not the chart's value axis must be inverted. 
                     */
                    inverted?: boolean,

                    /**
                     * Specifies the value to be raised to a power when generating ticks for a logarithmic value axis. 
                     */
                    logarithmBase?: number,

                    /**
                     * Specifies the maximum value of the chart's value axis. 
                     */
                    max?: number,

                    /**
                     * Specifies the minimum value of the chart's value axis. 
                     */
                    min?: number,

                    /**
                     * Specifies the type of the value axis. 
                     */
                    type?: string,

                    /**
                     * Specifies the desired type of axis values. 
                     */
                    valueType?: string
                }
            },

            /**
             * Specifies the color of the parent page element. 
             */
            containerBackgroundColor?: string,

            /**
             * Specifies a data source for the scale values and for the chart at the background. 
             */
            dataSource?: any,

            /**
             * Specifies the data source field that provides data for the scale. 
             */
            dataSourceField?: string,

            /**
             * Specifies the appearance of the loading indicator. 
             */
            loadingIndicator?: undefined.LoadingIndicator,

            /**
             * Specifies the blank space in pixels between the dxRangeSelector widget's extreme elements and the boundaries of the area provided for the widget (see size). 
             */
            margin?: undefined.Margins,

            /**
             * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates. 
             */
            redrawOnResize?: boolean,

            /**
             * Specifies options of the range selector's scale. 
             */
            scale?: {

                /**
                 * Specifies the scale's end value. 
                 */
                endValue?: any,

                /**
                 * Specifies common options for scale labels. 
                 */
                label?: {

                    /**
                     * Specifies a callback function that returns the text to be displayed in scale labels. 
                     */
                    customizeText?: (scaleValue: {
                        value: any,
                        valueText: string
                    }) => string,

                    /**
                     * Specifies font options for the text displayed in the range selector's scale labels. 
                     */
                    font?: undefined.Font,

                    /**
                     * Specifies a format for the text displayed in scale labels. 
                     */
                    format?: string,

                    /**
                     * Specifies a precision for the formatted value displayed in the scale labels. 
                     */
                    precision?: number,

                    /**
                     * Specifies a spacing between scale labels and the background bottom edge. 
                     */
                    topIndent?: number,

                    /**
                     * Specifies whether or not the scale's labels are visible. 
                     */
                    visible?: boolean
                },

                /**
                 * Specifies the value to be raised to a power when generating ticks for a logarithmic scale. 
                 */
                logarithmBase?: number,

                /**
                 * Specifies an interval between major ticks. 
                 */
                majorTickInterval?: any,

                /**
                 * Specifies options for the date-time scale's markers. 
                 */
                marker?: {

                    /**
                     * Defines the options that can be set for the text that is displayed by the scale markers. 
                     */
                    label?: {

                        /**
                         * Specifies a callback function that returns the text to be displayed in scale markers. 
                         */
                        customizeText?: (markerValue: {
                            value: any,
                            valueText: string
                        }) => string,

                        /**
                         * Specifies a format for the text displayed in scale markers. 
                         */
                        format?: string
                    },

                    /**
                     * Specifies the height of the marker's separator. 
                     */
                    separatorHeight?: number,

                    /**
                     * Specifies the space between the marker label and the marker separator. 
                     */
                    textLeftIndent?: number,

                    /**
                     * Specifies the space between the marker's label and the top edge of the marker's separator. 
                     */
                    textTopIndent?: number,

                    /**
                     * Specified the indent between the marker and the scale lables. 
                     */
                    topIndent?: number,

                    /**
                     * Indicates whether scale markers are visible. 
                     */
                    visible?: boolean
                },

                /**
                 * Specifies the maximum range that can be selected. 
                 */
                maxRange?: any,

                /**
                 * Specifies the number of minor ticks between neighboring major ticks. 
                 */
                minorTickCount?: number,

                /**
                 * Specifies an interval between minor ticks.
                 */
                minorTickInterval?: any,

                /**
                 * Specifies the minimum range that can be selected. 
                 */
                minRange?: any,

                /**
                 * Specifies the height of the space reserved for the scale in pixels. 
                 */
                placeholderHeight?: number,

                /**
                 * Indicates whether or not to set ticks of a date-time scale at the beginning of each date-time interval. 
                 */
                setTicksAtUnitBeginning?: boolean,

                /**
                 * Specifies whether or not to show ticks for the boundary scale values, when neither major ticks nor minor ticks are created for these values. 
                 */
                showCustomBoundaryTicks?: boolean,

                /**
                 * Indicates whether or not to show minor ticks on the scale. 
                 */
                showMinorTicks?: boolean,

                /**
                 * Specifies the scale's start value. 
                 */
                startValue?: any,

                /**
                 * Specifies options defining the appearance of scale ticks. 
                 */
                tick?: {

                    /**
                     * Specifies the color of scale ticks (both major and minor ticks). 
                     */
                    color?: string,

                    /**
                     * Specifies the opacity of scale ticks (both major and minor ticks). 
                     */
                    opacity?: number,

                    /**
                     * Specifies the width of the scale's ticks (both major and minor ticks). 
                     */
                    width?: number
                },

                /**
                 * Specifies the type of the scale. 
                 */
                type?: string,

                /**
                 * Specifies whether or not to expand the current tick interval if labels overlap each other. 
                 */
                useTicksAutoArrangement?: boolean,

                /**
                 * Specifies the type of values on the scale. 
                 */
                valueType?: string,

                /**
                 * Specifies the order of arguments on a discrete scale. 
                 */
                categories?: Array<any >
            },

            /**
             * Specifies the range to be selected when displaying the dxRangeSelector. 
             */
            selectedRange?: {

                /**
                 * Specifies the start value of the range to be selected when displaying the dxRangeSelector widget on a page. 
                 */
                startValue?: any,

                /**
                 * Specifies the end value of the range to be selected when displaying the dxRangeSelector widget on a page. 
                 */
                endValue?: any
            },

            /**
             * Specifies the color of the selected range. 
             */
            selectedRangeColor?: string,

            /**
             * Range selector's indent options. 
             */
            indent?: {

                /**
                 * Specifies range selector's left indent. 
                 */
                left?: number,

                /**
                 * Specifies range selector's right indent. 
                 */
                right?: number
            },
            selectedRangeChanged?: (selectedRange: {
                startValue: any,
                endValue: any
            }) => void,

            /**
             * A handler for the selectedRangeChanged event. 
             */
            onSelectedRangeChanged?: (
                e: {
                    startValue: any,
                    endValue: any,
                    component: dxRangeSelector,
                    element: Element
                }) => void,

            /**
             * Specifies range selector shutter options. 
             */
            shutter?: {

                /**
                 * Specifies shutter color. 
                 */
                color?: string,

                /**
                 * Specifies the opacity of the color of shutters. 
                 */
                opacity?: number
            },

            /**
             * Specifies in pixels the size of the dxRangeSelector widget. 
             */
            size?: undefined.Size,

            /**
             * Specifies the appearance of the range selector's slider handles. 
             */
            sliderHandle?: {

                /**
                 * Specifies the color of the slider handles. 
                 */
                color?: string,

                /**
                 * Specifies the opacity of the slider handles. 
                 */
                opacity?: number,

                /**
                 * Specifies the width of the slider handles. 
                 */
                width?: number
            },

            /**
             * Defines the options of the range selector slider markers. 
             */
            sliderMarker?: {

                /**
                 * Specifies the color of the slider markers. 
                 */
                color?: string,

                /**
                 * Specifies a callback function that returns the text to be displayed by slider markers. 
                 */
                customizeText?: (scaleValue: {
                    value: any,
                    valueText: any
                }) => string,

                /**
                 * Specifies font options for the text displayed by the range selector slider markers. 
                 */
                font?: undefined.Font,

                /**
                 * Specifies a format for the text displayed in slider markers. 
                 */
                format?: string,

                /**
                 * Specifies the color used for the slider marker text when the currently selected range does not match the minRange and maxRange values. 
                 */
                invalidRangeColor?: string,

                /**
                 * Specifies the empty space between the marker's border and the marker’s text.
                 * @deprecated  Use the 'paddingTopBottom' and 'paddingLeftRight' options instead
                 */
                padding?: number,

                /**
                 * Specifies the empty space between the marker's top and bottom borders and the marker's text. 
                 */
                paddingTopBottom?: number,

                /**
                 * Specifies the empty space between the marker's left and right borders and the marker's text. 
                 */
                paddingLeftRight?: number,

                /**
                 * Specifies the placeholder height of the slider marker. 
                 */
                placeholderHeight?: number,

                /**
                 * Specifies in pixels the height and width of the space reserved for the range selector slider markers.
                 * @deprecated  Use the 'placeholderHeight' and 'indent' options instead
                 */
                placeholderSize?: {

                    /**
                     * Specifies the height of the placeholder for the left and right slider markers. 
                     */
                    height?: number,

                    /**
                     * Specifies the width of the placeholder for the left and right slider markers. 
                     */
                    width?: {

                        /**
                         * Specifies the width of the left slider marker's placeholder. 
                         */
                        left?: number,

                        /**
                         * Specifies the width of the right slider marker's placeholder. 
                         */
                        right?: number
                    }
                },

                /**
                 * Specifies a precision for the formatted value displayed in slider markers. 
                 */
                precision?: number,

                /**
                 * Indicates whether or not the slider markers are visible. 
                 */
                visible?: boolean
            }
        }

        /**
         * A widget that allows end users to select a range of values on a scale. 
         */
        declare         export class dxRangeSelector mixins undefined.BaseWidget {
            constructor(element: JQuery, options?: dxRangeSelectorOptions): this;
            constructor(element: Element, options?: dxRangeSelectorOptions): this;

            /**
             * Displays the loading indicator. 
             */
            showLoadingIndicator(): void;

            /**
             * Conceals the loading indicator. 
             */
            hideLoadingIndicator(): void;

            /**
             * Redraws a widget. 
             */
            render(skipChartAnimation?: boolean): void;

            /**
             * Returns the currently selected range. 
             */
            getSelectedRange(): {
                startValue: any,
                endValue: any
            };

            /**
             * Sets a specified range. 
             */
            setSelectedRange(selectedRange: {
                startValue: any,
                endValue: any
            }): void
        }
    }

    declare module 'map' {

        /**
         * This section describes the fields and methods that can be used in code to manipulate the Area object. 
         */
        declare         export interface Area {

            /**
             * Contains the element type. 
             */
            type: string,

                /**
                 * Return the value of an attribute. 
                 */
                attribute(name: string): any,

                /**
                 * Provides information about the selection state of an area. 
                 */
                selected(): boolean,

                /**
                 * Sets a new selection state for an area. 
                 */
                selected(state: boolean): void,

                /**
                 * Applies the area settings specified as a parameter and updates the area appearance. 
                 */
                applySettings(settings: any): void
        }

        /**
         * This section describes the fields and methods that can be used in code to manipulate the Markers object. 
         */
        declare         export interface Marker {

            /**
             * Contains the descriptive text accompanying the map marker. 
             */
            text: string,

                /**
                 * Contains the type of the element. 
                 */
                type: string,

                /**
                 * Contains the URL of an image map marker. 
                 */
                url: string,

                /**
                 * Contains the value of a bubble map marker. 
                 */
                value: number,

                /**
                 * Contains the values of a pie map marker. 
                 */
                values: Array<number>,

                /**
                 * Returns the value of an attribute. 
                 */
                attribute(name: string): any,

                /**
                 * Returns the coordinates of a specific marker. 
                 */
                coordinates(): Array<number>,

                /**
                 * Provides information about the selection state of a marker. 
                 */
                selected(): boolean,

                /**
                 * Sets a new selection state for a marker. 
                 */
                selected(state: boolean): void,

                /**
                 * Applies the marker settings specified as a parameter and updates the marker appearance. 
                 */
                applySettings(settings: any): void
        }
        declare         export interface AreaSettings {

            /**
             * Specifies the width of the area border in pixels. 
             */
            borderWidth?: number,

                /**
                 * Specifies a color for the area border. 
                 */
                borderColor?: string,
                click?: any,

                /**
                 * Specifies a color for an area. 
                 */
                color?: string,

                /**
                 * Specifies the function that customizes each area individually. 
                 */
                customize?: (areaInfo: Area) => AreaSettings,

                /**
                 * Specifies a color for the area border when the area is hovered over. 
                 */
                hoveredBorderColor?: string,

                /**
                 * Specifies the pixel-measured width of the area border when the area is hovered over. 
                 */
                hoveredBorderWidth?: number,

                /**
                 * Specifies a color for an area when this area is hovered over. 
                 */
                hoveredColor?: string,

                /**
                 * Specifies whether or not to change the appearance of an area when it is hovered over. 
                 */
                hoverEnabled?: boolean,

                /**
                 * Configures area labels. 
                 */
                label?: {

                    /**
                     * Specifies the data field that provides data for area labels. 
                     */
                    dataField?: string,

                    /**
                     * Enables area labels. 
                     */
                    enabled?: boolean,

                    /**
                     * Specifies font options for area labels. 
                     */
                    font?: undefined.Font
                },

                /**
                 * Specifies the name of the palette or a custom range of colors to be used for coloring a map. 
                 */
                palette?: any,

                /**
                 * Specifies the number of colors in a palette. 
                 */
                paletteSize?: number,

                /**
                 * Allows you to paint areas with similar attributes in the same color. 
                 */
                colorGroups?: Array<number>,

                /**
                 * Specifies the field that provides data to be used for coloring areas. 
                 */
                colorGroupingField?: string,

                /**
                 * Specifies a color for the area border when the area is selected. 
                 */
                selectedBorderColor?: string,

                /**
                 * Specifies a color for an area when this area is selected. 
                 */
                selectedColor?: string,

                /**
                 * Specifies the pixel-measured width of the area border when the area is selected. 
                 */
                selectedBorderWidth?: number,
                selectionChanged?: (area: Area) => void,

                /**
                 * Specifies whether single or multiple areas can be selected on a vector map. 
                 */
                selectionMode?: string
        }
        declare         export interface MarkerSettings {

            /**
             * Specifies a color for the marker border. 
             */
            borderColor?: string,

                /**
                 * Specifies the width of the marker border in pixels. 
                 */
                borderWidth?: number,
                click?: any,

                /**
                 * Specifies a color for a marker of the dot or bubble type. 
                 */
                color?: string,

                /**
                 * Specifies the function that customizes each marker individually. 
                 */
                customize?: (markerInfo: Marker) => MarkerSettings,
                font?: Object,

                /**
                 * Specifies the pixel-measured width of the marker border when the marker is hovered over. 
                 */
                hoveredBorderWidth?: number,

                /**
                 * Specifies a color for the marker border when the marker is hovered over. 
                 */
                hoveredBorderColor?: string,

                /**
                 * Specifies a color for a marker of the dot or bubble type when this marker is hovered over. 
                 */
                hoveredColor?: string,

                /**
                 * Specifies whether or not to change the appearance of a marker when it is hovered over. 
                 */
                hoverEnabled?: boolean,

                /**
                 * Specifies marker label options. 
                 */
                label?: {

                    /**
                     * Enables marker labels. 
                     */
                    enabled?: boolean,

                    /**
                     * Specifies font options for marker labels. 
                     */
                    font?: undefined.Font
                },

                /**
                 * Specifies the pixel-measured diameter of the marker that represents the biggest value. Setting this option makes sense only if you use markers of the bubble type. 
                 */
                maxSize?: number,

                /**
                 * Specifies the pixel-measured diameter of the marker that represents the smallest value. Setting this option makes sense only if you use markers of the bubble type. 
                 */
                minSize?: number,

                /**
                 * Specifies the opacity of markers. Setting this option makes sense only if you use markers of the bubble type. 
                 */
                opacity?: number,

                /**
                 * Specifies the pixel-measured width of the marker border when the marker is selected. 
                 */
                selectedBorderWidth?: number,

                /**
                 * Specifies a color for the marker border when the marker is selected. 
                 */
                selectedBorderColor?: string,

                /**
                 * Specifies a color for a marker of the dot or bubble type when this marker is selected. 
                 */
                selectedColor?: string,
                selectionChanged?: (marker: Marker) => void,

                /**
                 * Specifies whether a single or multiple markers can be selected on a vector map. 
                 */
                selectionMode?: string,

                /**
                 * Specifies the size of markers. Setting this option makes sense for any type of marker except bubble. 
                 */
                size?: number,

                /**
                 * Specifies the type of markers to be used on the map. 
                 */
                type?: string,

                /**
                 * Specifies the name of a palette or a custom set of colors to be used for coloring markers of the pie type. 
                 */
                palette?: any,

                /**
                 * Allows you to paint markers with similar attributes in the same color. 
                 */
                colorGroups?: Array<number>,

                /**
                 * Specifies the field that provides data to be used for coloring markers. 
                 */
                colorGroupingField?: string,

                /**
                 * Allows you to display bubbles with similar attributes in the same size. 
                 */
                sizeGroups?: Array<number>,

                /**
                 * Specifies the field that provides data to be used for sizing bubble markers. 
                 */
                sizeGroupingField?: string
        }
        declare         export type dxVectorMapOptions = {

            /**
             * An object specifying options for the map areas. 
             */
            areaSettings?: AreaSettings,

            /**
             * Specifies the options for the map background. 
             */
            background?: {

                /**
                 * Specifies a color for the background border. 
                 */
                borderColor?: string,

                /**
                 * Specifies a color for the background. 
                 */
                color?: string
            },

            /**
             * Specifies the positioning of a map in geographical coordinates. 
             */
            bounds?: Array<number>,

            /**
             * Specifies the options of the control bar. 
             */
            controlBar?: {

                /**
                 * Specifies a color for the outline of the control bar elements. 
                 */
                borderColor?: string,

                /**
                 * Specifies a color for the inner area of the control bar elements. 
                 */
                color?: string,

                /**
                 * Specifies whether or not to display the control bar. 
                 */
                enabled?: boolean,

                /**
                 * Specifies the margin of the control bar in pixels. 
                 */
                margin?: number,

                /**
                 * Specifies the position of the control bar. 
                 */
                horizontalAlignment?: string,

                /**
                 * Specifies the position of the control bar. 
                 */
                verticalAlignment?: string,

                /**
                 * Specifies the opacity of the Control_Bar. 
                 */
                opacity?: number
            },

            /**
             * Specifies the appearance of the loading indicator. 
             */
            loadingIndicator?: undefined.LoadingIndicator,

            /**
             * Specifies a data source for the map area. 
             */
            mapData?: any,

            /**
             * Specifies a data source for the map markers. 
             */
            markers?: any,

            /**
             * An object specifying options for the map markers. 
             */
            markerSettings?: MarkerSettings,

            /**
             * Specifies the size of the dxVectorMap widget. 
             */
            size?: undefined.Size,

            /**
             * Specifies tooltip options. 
             */
            tooltip?: undefined.Tooltip,

            /**
             * Configures map legends. 
             */
            legends?: Array<Legend>,

            /**
             * Specifies whether or not the map should respond when a user rolls the mouse wheel. 
             */
            wheelEnabled?: boolean,

            /**
             * Specifies whether the map should respond to touch gestures. 
             */
            touchEnabled?: boolean,

            /**
             * Disables the zooming capability. 
             */
            zoomingEnabled?: boolean,

            /**
             * Specifies the geographical coordinates of the center for a map. 
             */
            center?: Array<number>,
            centerChanged?: (center: Array<number>) => void,

            /**
             * A handler for the centerChanged event. 
             */
            onCenterChanged?: (e: {
                center: Array<number>,
                component: dxVectorMap,
                element: Element
            }) => void,

            /**
             * A handler for the tooltipShown event. 
             */
            onTooltipShown?: (e: {
                component: dxVectorMap,
                element: Element,
                target: {}
            }) => void,

            /**
             * A handler for the tooltipHidden event. 
             */
            onTooltipHidden?: (e: {
                component: dxVectorMap,
                element: Element,
                target: {}
            }) => void,

            /**
             * Specifies a number that is used to zoom a map initially. 
             */
            zoomFactor?: number,

            /**
             * Specifies a map's maximum zoom factor. 
             */
            maxZoomFactor?: number,
            zoomFactorChanged?: (zoomFactor: number) => void,

            /**
             * A handler for the zoomFactorChanged event. 
             */
            onZoomFactorChanged?: (e: {
                zoomFactor: number,
                component: dxVectorMap,
                element: Element
            }) => void,
            click?: any,

            /**
             * A handler for the click event. 
             */
            onClick?: any,

            /**
             * A handler for the areaClick event. 
             */
            onAreaClick?: any,

            /**
             * A handler for the areaSelectionChanged event. 
             */
            onAreaSelectionChanged?: (e: {
                target: Area,
                component: dxVectorMap,
                element: Element
            }) => void,

            /**
             * A handler for the markerClick event. 
             */
            onMarkerClick?: any,

            /**
             * A handler for the markerSelectionChanged event. 
             */
            onMarkerSelectionChanged?: (e: {
                target: Marker,
                component: dxVectorMap,
                element: Element
            }) => void,

            /**
             * Disables the panning capability. 
             */
            panningEnabled?: boolean
        }
        declare         export type Legend = {

            /**
             * Specifies whether the legend is located outside or inside the chart's plot. 
             */
            position?: string
        } & AdvancedLegend


        /**
         * A vector map widget. 
         */
        declare         export class dxVectorMap mixins undefined.BaseWidget {
            constructor(element: JQuery, options?: dxVectorMapOptions): this;
            constructor(element: Element, options?: dxVectorMapOptions): this;

            /**
             * Displays the loading indicator. 
             */
            showLoadingIndicator(): void;

            /**
             * Conceals the loading indicator. 
             */
            hideLoadingIndicator(): void;

            /**
             * Redraws a widget. 
             */
            render(): void;

            /**
             * Gets the current coordinates of the map center. 
             */
            center(): Array<number>;

            /**
             * Sets the coordinates of the map center. 
             */
            center(centerCoordinates: Array<number>): void;

            /**
             * Deselects all the selected areas on a map. The areas are displayed in their initial style after. 
             */
            clearAreaSelection(): void;

            /**
             * Deselects all the selected markers on a map. The markers are displayed in their initial style after. 
             */
            clearMarkerSelection(): void;

            /**
             * Deselects all the selected area and markers on a map at once. The areas and markers are displayed in their initial style after. 
             */
            clearSelection(): void;

            /**
             * Converts client area coordinates into map coordinates. 
             */
            convertCoordinates(x: number, y: number): Array<number>;

            /**
             * Returns an array with all the map areas. 
             */
            getAreas(): Array<Area>;

            /**
             * Returns an array with all the map markers. 
             */
            getMarkers(): Array<Marker>;

            /**
             * Gets the current coordinates of the map viewport. 
             */
            viewport(): Array<any>;

            /**
             * Sets the coordinates of the map viewport. 
             */
            viewport(viewportCoordinates: Array<number>): void;

            /**
             * Gets the current value of the map zoom factor. 
             */
            zoomFactor(): number;

            /**
             * Sets the value of the map zoom factor. 
             */
            zoomFactor(zoomFactor: number): void
        }
    }

    declare module 'sparklines' {
        declare         export type SparklineTooltip = {

            /**
             * Specifies how a tooltip is horizontally aligned relative to the graph.
             * @deprecated  Tooltip alignment is no more available.
             */
            horizontalAlignment?: string,

            /**
             * Specifies how a tooltip is vertically aligned relative to the graph.
             * @deprecated  Tooltip alignment is no more available.
             */
            verticalAlignment?: string
        }
        declare         export type BaseSparklineOptions = {

            /**
             * Specifies the blank space between the widget's extreme elements and the boundaries of the area provided for the widget in pixels. 
             */
            margin?: undefined.Margins,

            /**
             * Specifies the size of the widget. 
             */
            size?: undefined.Size,

            /**
             * Specifies tooltip options. 
             */
            tooltip?: SparklineTooltip,

            /**
             * A handler for the tooltipShown event. 
             */
            onTooltipShown?: (e: {
                component: BaseSparkline,
                element: Element
            }) => void,

            /**
             * A handler for the tooltipHidden event. 
             */
            onTooltipHidden?: (e: {
                component: BaseSparkline,
                element: Element
            }) => void
        }

        /**
         * Overridden by descriptions for particular widgets. 
         */
        declare         export class BaseSparkline mixins undefined.BaseWidget {

            /**
             * Redraws a widget. 
             */
            render(): void
        }
        declare         export type dxBulletOptions = {

            /**
             * Specifies a color for the bullet bar. 
             */
            color?: string,

            /**
             * Specifies an end value for the invisible scale. 
             */
            endScaleValue?: number,

            /**
             * Specifies whether or not to show the target line. 
             */
            showTarget?: boolean,

            /**
             * Specifies whether or not to show the line indicating zero on the invisible scale. 
             */
            showZeroLevel?: boolean,

            /**
             * Specifies a start value for the invisible scale. 
             */
            startScaleValue?: number,

            /**
             * Specifies the value indicated by the target line. 
             */
            target?: number,

            /**
             * Specifies a color for both the target and zero level lines. 
             */
            targetColor?: string,

            /**
             * Specifies the width of the target line. 
             */
            targetWidth?: number,

            /**
             * Specifies the primary value indicated by the bullet bar. 
             */
            value?: number
        } & BaseSparkline


        /**
         * A bullet graph widget. 
         */
        declare         export class dxBullet mixins BaseSparkline {
            constructor(element: JQuery, options?: dxBulletOptions): this;
            constructor(element: Element, options?: dxBulletOptions): this
        }
        declare         export type dxSparklineOptions = {

            /**
             * Specifies the data source field that provides arguments for a sparkline. 
             */
            argumentField?: string,

            /**
             * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only. 
             */
            barNegativeColor?: string,

            /**
             * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only. 
             */
            barPositiveColor?: string,

            /**
             * Specifies a data source for the sparkline. 
             */
            dataSource?: Array<any>,

            /**
             * Sets a color for the boundary of both the first and last points on a sparkline. 
             */
            firstLastColor?: string,

            /**
             * Specifies whether a sparkline ignores null data points or not. 
             */
            ignoreEmptyPoints?: boolean,

            /**
             * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types. 
             */
            lineColor?: string,

            /**
             * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types. 
             */
            lineWidth?: number,

            /**
             * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only. 
             */
            lossColor?: string,

            /**
             * Sets a color for the boundary of the maximum point on a sparkline. 
             */
            maxColor?: string,

            /**
             * Sets a color for the boundary of the minimum point on a sparkline. 
             */
            minColor?: string,

            /**
             * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types. 
             */
            pointColor?: string,

            /**
             * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types. 
             */
            pointSize?: number,

            /**
             * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types. 
             */
            pointSymbol?: string,

            /**
             * Specifies whether or not to indicate both the first and last values on a sparkline. 
             */
            showFirstLast?: boolean,

            /**
             * Specifies whether or not to indicate both the minimum and maximum values on a sparkline. 
             */
            showMinMax?: boolean,

            /**
             * Determines the type of a sparkline. 
             */
            type?: string,

            /**
             * Specifies the data source field that provides values for a sparkline. 
             */
            valueField?: string,

            /**
             * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only. 
             */
            winColor?: string,

            /**
             * Specifies a value that serves as a threshold for the sparkline of the winloss type. 
             */
            winlossThreshold?: number,

            /**
             * Specifies the minimum value of the sparkline value axis. 
             */
            minValue?: number,

            /**
             * Specifies the maximum value of the sparkline's value axis. 
             */
            maxValue?: number
        } & BaseSparklineOptions


        /**
         * A sparkline widget. 
         */
        declare         export class dxSparkline mixins BaseSparkline {
            constructor(element: JQuery, options?: dxSparklineOptions): this;
            constructor(element: Element, options?: dxSparklineOptions): this
        }
    }

}
declare interface JQuery {
    dxProgressBar(): JQuery,
        dxProgressBar(options: "instance"): undefined.dxProgressBar,
        dxProgressBar(options: string): any,
        dxProgressBar(options: string, ...params: any[]): any,
        dxProgressBar(options: undefined.dxProgressBarOptions): JQuery,
        dxSlider(): JQuery,
        dxSlider(options: "instance"): undefined.dxSlider,
        dxSlider(options: string): any,
        dxSlider(options: string, ...params: any[]): any,
        dxSlider(options: undefined.dxSliderOptions): JQuery,
        dxRangeSlider(): JQuery,
        dxRangeSlider(options: "instance"): undefined.dxRangeSlider,
        dxRangeSlider(options: string): any,
        dxRangeSlider(options: string, ...params: any[]): any,
        dxRangeSlider(options: undefined.dxRangeSliderOptions): JQuery,
        dxFileUploader(): JQuery,
        dxFileUploader(options: "instance"): undefined.dxFileUploader,
        dxFileUploader(options: string): any,
        dxFileUploader(options: string, ...params: any[]): any,
        dxFileUploader(options: undefined.dxFileUploaderOptions): JQuery,
        dxValidator(): JQuery,
        dxValidator(options: "instance"): undefined.dxValidator,
        dxValidator(options: string): any,
        dxValidator(options: string, ...params: any[]): any,
        dxValidationGroup(): JQuery,
        dxValidationGroup(options: "instance"): undefined.dxValidationGroup,
        dxValidationGroup(options: string): any,
        dxValidationGroup(options: string, ...params: any[]): any,
        dxValidationSummary(): JQuery,
        dxValidationSummary(options: "instance"): undefined.dxValidationSummary,
        dxValidationSummary(options: string): any,
        dxValidationSummary(options: string, ...params: any[]): any,
        dxTooltip(): JQuery,
        dxTooltip(options: "instance"): undefined.dxTooltip,
        dxTooltip(options: string): any,
        dxTooltip(options: string, ...params: any[]): any,
        dxTooltip(options: undefined.dxTooltipOptions): JQuery,
        dxResizable(): JQuery,
        dxResizable(options: "instance"): undefined.dxResizable,
        dxResizable(options: string): any,
        dxResizable(options: string, ...params: any[]): any,
        dxResizable(options: undefined.dxResizableOptions): JQuery,
        dxDropDownList(): JQuery,
        dxDropDownList(options: "instance"): undefined.dxDropDownList,
        dxDropDownList(options: string): any,
        dxDropDownList(options: string, ...params: any[]): any,
        dxDropDownList(options: undefined.dxDropDownListOptions): JQuery,
        dxToolbar(): JQuery,
        dxToolbar(options: "instance"): undefined.dxToolbar,
        dxToolbar(options: string): any,
        dxToolbar(options: string, ...params: any[]): any,
        dxToolbar(options: undefined.dxToolbarOptions): JQuery,
        dxToast(): JQuery,
        dxToast(options: "instance"): undefined.dxToast,
        dxToast(options: string): any,
        dxToast(options: string, ...params: any[]): any,
        dxToast(options: undefined.dxToastOptions): JQuery,
        dxTextEditor(): JQuery,
        dxTextEditor(options: "instance"): undefined.dxTextEditor,
        dxTextEditor(options: string): any,
        dxTextEditor(options: string, ...params: any[]): any,
        dxTextEditor(options: undefined.dxTextEditorOptions): JQuery,
        dxTextBox(): JQuery,
        dxTextBox(options: "instance"): undefined.dxTextBox,
        dxTextBox(options: string): any,
        dxTextBox(options: string, ...params: any[]): any,
        dxTextBox(options: undefined.dxTextBoxOptions): JQuery,
        dxTextArea(): JQuery,
        dxTextArea(options: "instance"): undefined.dxTextArea,
        dxTextArea(options: string): any,
        dxTextArea(options: string, ...params: any[]): any,
        dxTextArea(options: undefined.dxTextAreaOptions): JQuery,
        dxTabs(): JQuery,
        dxTabs(options: "instance"): undefined.dxTabs,
        dxTabs(options: string): any,
        dxTabs(options: string, ...params: any[]): any,
        dxTabs(options: undefined.dxTabsOptions): JQuery,
        dxTabPanel(): JQuery,
        dxTabPanel(options: "instance"): undefined.dxTabPanel,
        dxTabPanel(options: string): any,
        dxTabPanel(options: string, ...params: any[]): any,
        dxTabPanel(options: undefined.dxTabPanelOptions): JQuery,
        dxSelectBox(): JQuery,
        dxSelectBox(options: "instance"): undefined.dxSelectBox,
        dxSelectBox(options: string): any,
        dxSelectBox(options: string, ...params: any[]): any,
        dxSelectBox(options: undefined.dxSelectBoxOptions): JQuery,
        dxScrollView(): JQuery,
        dxScrollView(options: "instance"): undefined.dxScrollView,
        dxScrollView(options: string): any,
        dxScrollView(options: string, ...params: any[]): any,
        dxScrollView(options: undefined.dxScrollViewOptions): JQuery,
        dxScrollable(): JQuery,
        dxScrollable(options: "instance"): undefined.dxScrollable,
        dxScrollable(options: string): any,
        dxScrollable(options: string, ...params: any[]): any,
        dxScrollable(options: undefined.dxScrollableOptions): JQuery,
        dxRadioGroup(): JQuery,
        dxRadioGroup(options: "instance"): undefined.dxRadioGroup,
        dxRadioGroup(options: string): any,
        dxRadioGroup(options: string, ...params: any[]): any,
        dxRadioGroup(options: undefined.dxRadioGroupOptions): JQuery,
        dxPopup(): JQuery,
        dxPopup(options: "instance"): undefined.dxPopup,
        dxPopup(options: string): any,
        dxPopup(options: string, ...params: any[]): any,
        dxPopup(options: undefined.dxPopupOptions): JQuery,
        dxPopover(): JQuery,
        dxPopover(options: "instance"): undefined.dxPopover,
        dxPopover(options: string): any,
        dxPopover(options: string, ...params: any[]): any,
        dxPopover(options: undefined.dxPopoverOptions): JQuery,
        dxOverlay(): JQuery,
        dxOverlay(options: "instance"): undefined.dxOverlay,
        dxOverlay(options: string): any,
        dxOverlay(options: string, ...params: any[]): any,
        dxOverlay(options: undefined.dxOverlayOptions): JQuery,
        dxNumberBox(): JQuery,
        dxNumberBox(options: "instance"): undefined.dxNumberBox,
        dxNumberBox(options: string): any,
        dxNumberBox(options: string, ...params: any[]): any,
        dxNumberBox(options: undefined.dxNumberBoxOptions): JQuery,
        dxNavBar(): JQuery,
        dxNavBar(options: "instance"): undefined.dxNavBar,
        dxNavBar(options: string): any,
        dxNavBar(options: string, ...params: any[]): any,
        dxNavBar(options: undefined.dxNavBarOptions): JQuery,
        dxMultiView(): JQuery,
        dxMultiView(options: "instance"): undefined.dxMultiView,
        dxMultiView(options: string): any,
        dxMultiView(options: string, ...params: any[]): any,
        dxMultiView(options: undefined.dxMultiViewOptions): JQuery,
        dxMap(): JQuery,
        dxMap(options: "instance"): undefined.dxMap,
        dxMap(options: string): any,
        dxMap(options: string, ...params: any[]): any,
        dxMap(options: undefined.dxMapOptions): JQuery,
        dxLookup(): JQuery,
        dxLookup(options: "instance"): undefined.dxLookup,
        dxLookup(options: string): any,
        dxLookup(options: string, ...params: any[]): any,
        dxLookup(options: undefined.dxLookupOptions): JQuery,
        dxLoadPanel(): JQuery,
        dxLoadPanel(options: "instance"): undefined.dxLoadPanel,
        dxLoadPanel(options: string): any,
        dxLoadPanel(options: string, ...params: any[]): any,
        dxLoadPanel(options: undefined.dxLoadPanelOptions): JQuery,
        dxLoadIndicator(): JQuery,
        dxLoadIndicator(options: "instance"): undefined.dxLoadIndicator,
        dxLoadIndicator(options: string): any,
        dxLoadIndicator(options: string, ...params: any[]): any,
        dxLoadIndicator(options: undefined.dxLoadIndicatorOptions): JQuery,
        dxList(): JQuery,
        dxList(options: "instance"): undefined.dxList,
        dxList(options: string): any,
        dxList(options: string, ...params: any[]): any,
        dxList(options: undefined.dxListOptions): JQuery,
        dxGallery(): JQuery,
        dxGallery(options: "instance"): undefined.dxGallery,
        dxGallery(options: string): any,
        dxGallery(options: string, ...params: any[]): any,
        dxGallery(options: undefined.dxGalleryOptions): JQuery,
        dxDropDownEditor(): JQuery,
        dxDropDownEditor(options: "instance"): undefined.dxDropDownEditor,
        dxDropDownEditor(options: string): any,
        dxDropDownEditor(options: string, ...params: any[]): any,
        dxDropDownEditor(options: undefined.dxDropDownEditorOptions): JQuery,
        dxDateBox(): JQuery,
        dxDateBox(options: "instance"): undefined.dxDateBox,
        dxDateBox(options: string): any,
        dxDateBox(options: string, ...params: any[]): any,
        dxDateBox(options: undefined.dxDateBoxOptions): JQuery,
        dxCheckBox(): JQuery,
        dxCheckBox(options: "instance"): undefined.dxCheckBox,
        dxCheckBox(options: string): any,
        dxCheckBox(options: string, ...params: any[]): any,
        dxCheckBox(options: undefined.dxCheckBoxOptions): JQuery,
        dxBox(): JQuery,
        dxBox(options: "instance"): undefined.dxBox,
        dxBox(options: string): any,
        dxBox(options: string, ...params: any[]): any,
        dxBox(options: undefined.dxBoxOptions): JQuery,
        dxButton(): JQuery,
        dxButton(options: "instance"): undefined.dxButton,
        dxButton(options: string): any,
        dxButton(options: string, ...params: any[]): any,
        dxButton(options: undefined.dxButtonOptions): JQuery,
        dxCalendar(): JQuery,
        dxCalendar(options: "instance"): undefined.dxCalendar,
        dxCalendar(options: string): any,
        dxCalendar(options: string, ...params: any[]): any,
        dxCalendar(options: undefined.dxCalendarOptions): JQuery,
        dxAccordion(): JQuery,
        dxAccordion(options: "instance"): undefined.dxAccordion,
        dxAccordion(options: string): any,
        dxAccordion(options: string, ...params: any[]): any,
        dxAccordion(options: undefined.dxAccordionOptions): JQuery,
        dxAutocomplete(): JQuery,
        dxAutocomplete(options: "instance"): undefined.dxAutocomplete,
        dxAutocomplete(options: string): any,
        dxAutocomplete(options: string, ...params: any[]): any,
        dxAutocomplete(options: undefined.dxAutocompleteOptions): JQuery
}