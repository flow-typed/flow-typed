// @flow
/**
 * Flowtype definitions for cropperjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'cropperjs' {
    declare     export type CropperCustomEvent = {
        detail: Data
    } & CustomEvent

    declare     export interface CropperOptions {

        /**
         * Function called when crop box is moved or resized
         */
        crop?: (event: CropperCustomEvent) => void,

            /**
             * Function called at start of crop box being moved or resized
             */
            cropstart?: (event: CropperCustomEvent) => void,

            /**
             * Function called when crop box is moved
             */
            cropmove?: (event: CropperCustomEvent) => void,

            /**
             * Function called when crop box is finished being moved or resized
             */
            cropend?: (event: CropperCustomEvent) => void,

            /**
             * Define the view mode of the cropper.
             * @default  0
             */
            viewMode?: CropperViewMods,

            /**
             * Define the dragging mode of the cropper.
             * 'crop': create a new crop box
            'move': move the canvas
            'none': do nothing
            */
            dragMode?: string,

            /**
             * Set the aspect ratio of the crop box. By default, the crop box is free ratio.
             * @default  Nan
             */
            aspectRatio?: number,

            /**
             * The previous cropped data if you had stored, will be passed to setData method automatically.
             * @default  null
             */
            data?: Object,

            /**
             * Add extra elements (containers) for previewing.
             * Valid selector for Document.querySelectorAll
             * @default  ''
             */
            preview?: string,

            /**
             * Rebuild the cropper when resize the window.
             * @default  true
             */
            responsive?: boolean,

            /**
             * By default, the plugin will check the image origin, and if it is a cross-origin image,
             * a crossOrigin attribute will be added to the image element and a timestamp will be added to the image url to reload the image for "getCroppedCanvas".
            By adding crossOrigin attribute to image will stop adding timestamp to image url, and stop reload of image.
             * @default  true
            */
            checkCrossOrigin?: boolean,

            /**
             * Show the black modal above the image and under the crop box.
             * @default  true
             */
            modal?: boolean,

            /**
             * Show the dashed lines above the crop box.
             * @default  true
             */
            guides?: boolean,

            /**
             * Show the center indicator above the crop box.
             * @default  true
             */
            center?: boolean,

            /**
             * Show the white modal above the crop box (highlight the crop box).
             * @default  true
             */
            highlight?: boolean,

            /**
             * Show the grid background of the container.
             * @default  true
             */
            background?: boolean,

            /**
             * Enable to crop the image automatically when initialize.
             * @default  true
             */
            autoCrop?: boolean,

            /**
             * A number between 0 and 1. Define the automatic cropping area size (percentage).
             * @default  0.8 (80% of the image)
             */
            autoCropArea?: number,

            /**
             * Enable to move the image.
             * @default  true
             */
            movable?: boolean,

            /**
             * Enable to rotate the image.
             * @default  true
             */
            rotatable?: boolean,

            /**
             * Enable to scale the image.
             * @default  true
             */
            scalable?: boolean,

            /**
             * Enable to zoom the image.
             * @default  true
             */
            zoomable?: boolean,

            /**
             * Enable to zoom the image by dragging touch.
             * @default  true
             */
            zoomOnTouch?: boolean,

            /**
             * Enable to zoom the image by wheeling mouse.
             * @default  true
             */
            zoomOnWheel?: boolean,

            /**
             * Define zoom ratio when zoom the image by wheeling mouse.
             * @default  0.1
             */
            wheelZoomRatio?: number,

            /**
             * Enable to move the crop box.
             * @default  true
             */
            cropBoxMovable?: boolean,

            /**
             * Enable to resize the crop box.
             * @default  true
             */
            cropBoxResizable?: boolean,

            /**
             * Enable to toggle drag mode between "crop" and "move" when click twice on the cropper.
             * @default  true
             */
            toggleDragModeOnDblclick?: boolean,

            /**
             * The minimum width of the container
             * @default  200
             */
            minContainerWidth?: number,

            /**
             * The minimum height of the container.
             * @default  100
             */
            minContainerHeight?: number,

            /**
             * The minimum width of the canvas (image wrapper).
             * @default  0
             */
            minCanvasWidth?: number,

            /**
             * The minimum height of the canvas (image wrapper).
             * @default  0
             */
            minCanvasHeight?: number,

            /**
             * The minimum width of the crop box.
             * @default  0
             */
            minCropBoxWidth?: number,

            /**
             * The minimum height of the crop box.
             * @default  0
             */
            minCropBoxHeight?: number,

            /**
             * This function will be called when a cropper instance starts to load an image.
             * Return false to prevent to build
             * @default  null
             */
            build?: () => boolean,

            /**
             * This function will be called when a cropper instance has built completely.
             * @default  null
             */
            built?: () => void
    }
    declare interface Data {

        /**
         * the offset left of the cropped area
         */
        x: number,

            /**
             * the offset top of the cropped area
             */
            y: number,

            /**
             * the width of the cropped area
             */
            width: number,

            /**
             * the height of the cropped area
             */
            height: number,

            /**
             * the rotated degrees of the image
             */
            rotate: number,

            /**
             * the scaling factor to apply on the abscissa of the image
             */
            scaleX: number,

            /**
             * the scaling factor to apply on the ordinate of the image
             */
            scaleY: number
    }
    declare interface ContainerData {

        /**
         * The current width of the container
         */
        width: number,

            /**
             * The current height of the container
             */
            height: number
    }
    declare interface CropBoxData {

        /**
         * the offset left of the crop box
         */
        left: number,

            /**
             * the offset top of the crop box
             */
            top: number,

            /**
             * the width of the crop box
             */
            width: number,

            /**
             * the height of the crop box
             */
            height: number
    }
    declare interface CanvasData {

        /**
         * offset left of the canvas
         */
        left: number,

            /**
             * new offset top of the canvas
             */
            top: number,

            /**
             * new width of the canvas
             */
            width: number,

            /**
             * new height of the canvas
             */
            height: number
    }
    declare interface ImageData {

        /**
         * the offset left of the image
         */
        left: number,

            /**
             * the offset top of the image
             */
            top: number,

            /**
             * the width of the image
             */
            width: number,

            /**
             * the height of the image
             */
            height: number,

            /**
             * the natural width of the image
             */
            naturalWidth: number,

            /**
             * the natural height of the image
             */
            naturalHeight: number,

            /**
             * the aspect ratio of the image
             */
            aspectRatio: number,

            /**
             * the rotated degrees of the image if rotated
             */
            rotate: number,

            /**
             * the scaling factor to apply on the abscissa of the image if scaled
             */
            scaleX: number,

            /**
             * the scaling factor to apply on the ordinate of the image if scaled
             */
            scaleY: number
    }
    declare interface CroppedCanvasOptions {

        /**
         * the destination width of the output canvas
         */
        width?: number,

            /**
             * the destination height of the output canvas
             */
            height?: number,

            /**
             * a color to fill any alpha values in the output canvas
             */
            fillColor?: string
    }
    declare module.exports: typeof Cropper
    declare     var Cropper: typeof undefined;
}