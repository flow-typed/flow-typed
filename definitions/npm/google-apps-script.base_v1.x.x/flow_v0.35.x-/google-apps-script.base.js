// @flow
/**
 * Flowtype definitions for google-apps-script.base
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'Base' {

    /**
     * A data interchange object for Apps Script services.
     */
    declare     export interface Blob {
        copyBlob(): Blob,
            getAs(contentType: string): Blob,
            getBytes(): Byte[],
            getContentType(): string,
            getDataAsString(): string,
            getDataAsString(charset: string): string,
            getName(): string,
            isGoogleType(): boolean,
            setBytes(data: Byte[]): Blob,
            setContentType(contentType: string): Blob,
            setContentTypeFromExtension(): Blob,
            setDataFromString(string: string): Blob,
            setDataFromString(string: string, charset: string): Blob,
            setName(name: string): Blob,
            getAllBlobs(): Blob[]
    }

    /**
     * Interface for objects that can export their data as a Blob.
     * Implementing classes

    NameBrief description

    AttachmentA Sites Attachment such as a file attached to a page.

    BlobA data interchange object for Apps Script services.

    ChartA Chart object, which can be embedded into documents, UI elements, or used as a static image.

    DocumentA document, containing rich text and elements such as tables and lists.

    EmbeddedChartRepresents a chart that has been embedded into a Spreadsheet.

    FileA file in Google Drive.

    GmailAttachmentAn attachment from Gmail.

    HTTPResponseThis class allows users to access specific information on HTTP responses.

    HtmlOutputAn HtmlOutput object that can be served from a script.

    InlineImageAn element representing an embedded image.

    JdbcBlobA JDBC Blob.

    JdbcClobA JDBC Clob.

    SpreadsheetThis class allows users to access and modify Google Sheets files.

    StaticMapAllows for the creation and decoration of static map images.
    */
    declare     export interface BlobSource {
        getAs(contentType: string): Blob,
            getBlob(): Blob
    }

    /**
     * This class provides access to Google Apps specific dialog boxes.
     * 
      The methods in this class are only available for use in the context of a Google Spreadsheet.
    See also

    ButtonSet
    */
    declare     export interface Browser {
        Buttons: ButtonSet,
            inputBox(prompt: string): string,
            inputBox(prompt: string, buttons: ButtonSet): string,
            inputBox(title: string, prompt: string, buttons: ButtonSet): string,
            msgBox(prompt: string): string,
            msgBox(prompt: string, buttons: ButtonSet): string,
            msgBox(title: string, prompt: string, buttons: ButtonSet): string
    }

    /**
     * This class allows the developer to write out text to the debugging logs.
     */
    declare     export interface Logger {
        clear(): void,
            getLog(): string,
            log(data: Object): Logger,
            log(format: string, ...values: Object[]): Logger
    }

    /**
     * A custom menu in an instance of the user interface for a Google App. A script can only interact
     *   with the UI for the current instance of an open document or form, and only if the script is
      container-bound to the document or form. For more
      information, see the guide to menus.

          // Add a custom menu to the active spreadsheet, including a separator and a sub-menu.
          function onOpen(e) {
            SpreadsheetApp.getUi()
                .createMenu('My Menu')
                .addItem('My Menu Item', 'myFunction')
                .addSeparator()
                .addSubMenu(SpreadsheetApp.getUi().createMenu('My Submenu')
                    .addItem('One Submenu Item', 'mySecondFunction')
                    .addItem('Another Submenu Item', 'myThirdFunction'))
                .addToUi();
          }
    */
    declare     export interface Menu {
        addItem(caption: string, functionName: string): Menu,
            addSeparator(): Menu,
            addSubMenu(menu: Menu): Menu,
            addToUi(): void
    }

    /**
     * A response to a prompt dialog displayed in the
     *   user-interface environment for a Google App. The response contains any text the user entered in
      the dialog's input field and indicates which button the user clicked to dismiss the dialog.

          // Display a dialog box with a title, message, input field, and "Yes" and "No" buttons. The
          // user can also close the dialog by clicking the close button in its title bar.
          var ui = DocumentApp.getUi();
          var response = ui.prompt('Getting to know you', 'May I know your name?', ui.ButtonSet.YES_NO);

          // Process the user's response.
          if (response.getSelectedButton() == ui.Button.YES) {
            Logger.log('The user\'s name is %s.', response.getResponseText());
          } else if (response.getSelectedButton() == ui.Button.NO) {
            Logger.log('The user didn\'t want to provide a name.');
          } else {
            Logger.log('The user clicked the close button in the dialog\'s title bar.');
          }
    */
    declare     export interface PromptResponse {
        getResponseText(): string,
            getSelectedButton(): Button
    }

    /**
     * The Session class provides access to session information, such as the user's email address (in
     *   some circumstances) and language setting.
     */
    declare     export interface Session {
        getActiveUser(): User,
            getActiveUserLocale(): string,
            getEffectiveUser(): User,
            getScriptTimeZone(): string,
            getTimeZone(): string,
            getUser(): User
    }

    /**
     * An instance of the user-interface environment for a Google App that allows the script to add
     *   features like menus, dialogs, and sidebars. A script can only interact with the UI for the
      current instance of an open editor, and only if the script is
      container-bound to the editor.

          // Display a dialog box with a title, message, input field, and "Yes" and "No" buttons. The
          // user can also close the dialog by clicking the close button in its title bar.
          var ui = SpreadsheetApp.getUi();
          var response = ui.prompt('Getting to know you', 'May I know your name?', ui.ButtonSet.YES_NO);

          // Process the user's response.
          if (response.getSelectedButton() == ui.Button.YES) {
            Logger.log('The user\'s name is %s.', response.getResponseText());
          } else if (response.getSelectedButton() == ui.Button.NO) {
            Logger.log('The user didn\'t want to provide a name.');
          } else {
            Logger.log('The user clicked the close button in the dialog\'s title bar.');
          }
    */
    declare     export interface Ui {
        Button: Button,
            ButtonSet: ButtonSet,
            alert(prompt: string): Button,
            alert(prompt: string, buttons: ButtonSet): Button,
            alert(title: string, prompt: string, buttons: ButtonSet): Button,
            createAddonMenu(): Menu,
            createMenu(caption: string): Menu,
            prompt(prompt: string): PromptResponse,
            prompt(prompt: string, buttons: ButtonSet): PromptResponse,
            prompt(title: string, prompt: string, buttons: ButtonSet): PromptResponse,
            showModalDialog(userInterface: Object, title: string): void,
            showModelessDialog(userInterface: Object, title: string): void,
            showSidebar(userInterface: Object): void,
            showDialog(userInterface: Object): void
    }

    /**
     * Representation of a user, suitable for scripting.
     */
    declare     export interface User {
        getEmail(): string,
            getUserLoginId(): string
    }
}
declare var Browser: undefined.Browser;
declare var Logger: undefined.Logger;
declare var Session: undefined.Session;