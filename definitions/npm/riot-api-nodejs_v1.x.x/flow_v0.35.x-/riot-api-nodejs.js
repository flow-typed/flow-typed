// @flow
/**
 * Flowtype definitions for riot-api-nodejs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'riot-api-nodejs' {
    declare     export var BASE_URL: string;
    declare     export var URL_1_2: string;
    declare     export var URL_1_3: string;
    declare     export var URL_1_4: string;
    declare     export var URL_2_2: string;
    declare     export var URL_2_4: string;
    declare     export var URL_2_5: string;

    /**
     * Base API
     */
    declare     export class API {
        constructor(ApiKeys: string[]): this;

        /**
         * Send a request to the Riot Games Api and return a formatted json via a callback
         * @param  request url
         * @param  method(post / put / get)
         * @param  body parameters
         * @param  callback function with formatted JSON
         */
        getJSON(url: string, method: string, data: any): Promise<any>;
        request(url: string, method: string, data: any, prop?: string): Promise<any>;

        /**
         * get the API Key that is used for the requests
         * @return  the current API Key
         */
        getCurrentApiKey(): string;

        /**
         * set the API Keys
         * @param  the API Keys
         */
        setApikeys(ApiKeys: string[]): void
    }

    /**
     * Tournament API
     */
    declare     export class TournamentAPI mixins API {
        constructor(...apiKeys: string[]): this;

        /**
         * create tournament Codes for a given tournament
         * @param  the ID of the tournament
         * @param  Number of codes you want
         * @param  Tournament Code parameters
         * @param  Tournaments Codes                                                                    [description]
         */
        createTournamentCodes(
            tournamentId: number,
            count: number,
            params: undefined.TournamentCodeParameters): Promise<number[]>;

        /**
         * get tournament infos for a given tournament code
         * @param  Tournament Code
         * @param  Tournament Infos
         */
        getTournamentByCode(tournamentCode: string): Promise<undefined.TournamentCodeDto>;

        /**
         * edit the tournament Code parameters for a given tournament Code
         * @param  Tournament Code to update
         * @param  parameters to edit
         * @param  callback if succes
         */
        editTournamentByCode(
            tournamentCode: string,
            params: undefined.TournamentCodeUpdateParameters): Promise<() => void>;

        /**
         * get the lobby envents for a given tournament Code
         * @param  the tournament code to get the lobby events
         * @param  lobby events
         */
        getLobbyEventByCode(tournamentCode: string): Promise<undefined.LobbyEventDto>;

        /**
         * Register a new tournament provider
         * @param  region where you want to register the provider
         * @param  url of callback for the POST notifications
         * @param  returns  the tounament provider ID
         */
        registerProvider(region: region_e, url: string): Promise<number>;

        /**
         * Register a new tournament
         * @param  Name of tournament
         * @param  Provider ID
         * @param  returns the tournament ID
         */
        registerTournament(name: string, providerId: number): Promise<number >
    }
    declare     export class ClassicAPI mixins API {

        /**
         * ClassicAPI Constructor
         * @param  API Keys for the requests
         * @param  region where you want to send requests
         */
        constructor(ApiKeys: string[], region: region_e): this;

        /**
         * Edit the consts for a valid url for the riot games api
         * @param  the URL to parse
         * @return  the Parsed URL
         */
        parseURL(unparsedURL: string): string;

        /**
         * get the region where send send request
         * @return  the current region
         */
        getRegion(): region_e;

        /**
         * set the region where you want to send requests
         * @param  the region
         */
        setRegion(region: region_e): void;

        /**
         * get all champions of league of legends
         * @param  data callback
         */
        getChampions(): Promise<undefined.ChampionListDto>;

        /**
         * get the champion for a given id
         * @param  the champion id
         * @param  data callback
         */
        getChampionById(id: number): Promise<undefined.ChampionDto>;

        /**
         * get the free to play champions
         * @param  data callback
         */
        getFreeToPlayChampions(): Promise<undefined.ChampionListDto>;

        /**
         * get Champion mastery of a player for a given champion ID
         * @param  summoner ID
         * @param  Champion ID
         * @param  data callback
         */
        getChampionMastery(summonerId: number, championId: number): Promise<undefined.ChampionMasteryDto>;

        /**
         * get all champion masteries for a given summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getChampionMasteryBySummoner(summonerId: number): Promise<[undefined.ChampionMasteryDto]>;

        /**
         * get the mastery score of a summoner
         * @param  Summoner ID
         * @param  Mastery Score
         */
        getChampionMasteryScore(summonerId: number): Promise<number>;

        /**
         * get The 3 best champion masteries
         * @param  Summoner ID
         * @param  data callback
         */
        getTopChampionMastery(summonerId: any): Promise<[undefined.ChampionMasteryDto]>;

        /**
         * get the current game infos for a given summoner ID
         * @param  Summoner ID
         * @param  data callback
         */
        getCurrentGame(summonerId: number): Promise<undefined.CurrentGameInfo>;

        /**
         * get the featured games
         * @param  data callback
         */
        getFeaturedGame(): Promise<undefined.FeaturedGames>;

        /**
         * get the recents games for a given Summoner ID
         * @param  Summoner ID
         * @param  data callback
         */
        getRecentGames(summonerId: number): Promise<undefined.RecentGamesDto>;

        /**
         * Get League infos of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getLeagueBySummonerId(summonerId: number): Promise<undefined.LeagueDto[]>;

        /**
         * get League infos of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getLeagueBySummonerIdEntry(summonerId: number): Promise<undefined.LeagueDto[]>;

        /**
         * get league infos by team
         * @param  Team ID
         * @param  data callback
         */
        getLeagueByTeamId(teamId: string): Promise<undefined.LeagueDto[]>;

        /**
         * get league infos by team
         * @param  Team ID
         * @param  data callback
         */
        getLeagueByTeamIdEntry(teamId: string): Promise<undefined.LeagueDto[]>;

        /**
         * get Challengers in SOLO Queue
         * @param  data callback
         */
        getChallengers_SOLO(): Promise<undefined.LeagueDto>;

        /**
         * get Challengers Teams in 3x3
         * @param  data callback
         */
        getChallengers_3x3(): Promise<undefined.LeagueDto>;

        /**
         * get Challengers Teams in 5x5
         * @param  data callback
         */
        getChallengers_5x5(): Promise<undefined.LeagueDto>;

        /**
         * get Masters in Solo Queue
         * @param  data callback
         */
        getMasters_SOLO(): Promise<undefined.LeagueDto>;

        /**
         * get Master Teams in 3x3
         * @param  data callback
         */
        getMasters_3x3(): Promise<undefined.LeagueDto>;

        /**
         * get Master Teams in 5x5
         * @param  data callback
         */
        getMasters_5x5(): Promise<undefined.LeagueDto>;

        /**
         * get Champions (static data)
         * @param  data callback
         */
        staticDataChampions(): Promise<undefined.ChampionListDto>;

        /**
         * get data by champion ID
         * @param  Champion ID
         * @param  data callback
         */
        staticDataChampionById(championsId: number): Promise<undefined.ChampionDto>;

        /**
         * get League of Legends Items
         * @param  data callback
         */
        staticDataItems(): Promise<undefined.ItemListDto>;

        /**
         * Get item infos by ID
         * @param  item ID
         * @param  data callback
         */
        staticDataItemById(itemId: number): Promise<undefined.ItemDto>;

        /**
         * get league of legends languages
         * @param  data callback
         */
        staticDataLanguagesStrings(): Promise<undefined.LanguageStringsDto>;

        /**
         * get league of legends languages
         * @param  data callback
         */
        staticDataLanguages(): Promise<string[]>;

        /**
         * get Map data
         * @param  data callback
         */
        staticDataMap(): Promise<undefined.MapDataDto>;

        /**
         * get all masteries
         * @param  data callback
         */
        staticDataMastery(): Promise<undefined.MasteryListDto>;

        /**
         * get data by mastery ID
         * @param  Mastery ID
         * @param  data callback
         */
        staticDataMasteryById(masteryId: number): Promise<undefined.MasteryDto>;
        staticDataRealm(): Promise<undefined.RealmDto>;

        /**
         * get all runes
         * @param  data callback
         */
        staticDataRunes(): Promise<undefined.RuneListDto>;

        /**
         * get rune by Rune ID
         * @param  Rune ID
         * @param  data callback
         */
        staticDataRuneById(runeId: number): Promise<undefined.RuneDto>;

        /**
         * get all summoner spells
         * @param  data callback
         */
        staticDataSummonerSpells(): Promise<undefined.SummonerSpellListDto>;

        /**
         * get summoner spell by summoner spell ID
         * @param  Summoner spell ID
         * @param  data callback
         */
        staticDataSummonSpellById(summonerSpellId: number): Promise<undefined.SummonerSpellDto>;

        /**
         * get league of legends  versions
         * @param  data callback
         */
        staticDataVersion(): Promise<string[]>;

        /**
         * get league of legends status
         * @param  data callback
         */
        getStatus(): Promise<undefined.Shard[]>;

        /**
         * get status for a given region
         * @param  region
         * @param  data callback
         */
        getStatusByRegion(region: region_e): Promise<undefined.Shard>;

        /**
         * get match infos for a given match ID
         * @param  Match ID
         * @param  data callback
         */
        getMatch(matchId: number): Promise<undefined.MatchDetail>;

        /**
         * get all matches for a given tournament code
         * @param  Tournament Code
         * @param  data callback
         */
        getMatchIdsByTournamentCode(tournamentCode: string): Promise<number[]>;

        /**
         * get match by ID in a tournament
         * @param  Match ID
         * @param  data callback
         */
        getMatchForTournament(matchId: number): Promise<undefined.MatchDetail>;

        /**
         * get match list of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getMatchList(summonerId: number): Promise<undefined.MatchList>;

        /**
         * get ranked stats of summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getStatsRanked(summonerId: number): Promise<undefined.RankedStatsDto>;

        /**
         * get summary ranked stats of summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getStatsSummary(summonerId: number): Promise<undefined.PlayerStatsSummaryListDto>;

        /**
         * get summoner infos by Summoner Name
         * @param  Summoner Name
         * @param  data callback
         */
        getSummonerByName(summonerName: string): Promise<undefined.SummonerDto>;

        /**
         * get summoner infos by summoner ID
         * @param  Summoner ID
         * @param  data callback
         */
        getSummonerById(summonerId: number): Promise<undefined.SummonerDto>;

        /**
         * get masteries of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getSummonerMasteries(summonerId: number): Promise<undefined.MasteryPagesDto>;

        /**
         * get the Summoner Name of a summoner ID
         * @param  Summoner ID
         * @param  data callback
         */
        getSummonerName(summonerId: number): Promise<string>;

        /**
         * get the runes of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getSummonerRunes(summonerId: number): Promise<undefined.RunePagesDto>;

        /**
         * get teams of a summoner
         * @param  Summoner ID
         * @param  data callback
         */
        getTeamsBySummoner(summonerId: number): Promise<undefined.TeamDto[]>;

        /**
         * get Team infos by Team ID
         * @param  Team ID
         * @param  data callback
         */
        getTeamById(teamId: string): Promise<undefined.TeamDto >
    }
}