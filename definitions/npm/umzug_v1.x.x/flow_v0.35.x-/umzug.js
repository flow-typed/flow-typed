// @flow
/**
 * Flowtype definitions for umzug
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'umzug' {
    declare interface umzug$MigrationOptions {
        params?: Array<any>,

            /**
             * The path to the migrations directory. 
             */
            path?: string,

            /**
             * The pattern that determines whether or not a file is a migration. 
             */
            pattern?: RegExp,

            /**
             * A function that receives and returns the to be executed function.
             * This can be used to modify the function.
             */
            wrap?:<T>(fn: T) => T
    }

    declare interface umzug$JSONStorageOptions {

        /**
         * The path to the json storage.
         * Defaults to process.cwd() + '/umzug.json';
         */
        path?: string
    }

    declare interface umzug$SequelizeStorageOptions {

        /**
         * The configured instance of Sequelize.
         * Optional if `model` is passed.
         */
        sequelize?: Sequelize.Sequelize,

            /**
             * The to be used Sequelize model.
             * Must have column name matching `columnName` option
            Optional of `sequelize` is passed.
            */
            model?: Sequelize.Model<any, any>,

            /**
             * The name of the to be used model.
             * Defaults to 'SequelizeMeta'
             */
            modelName?: string,

            /**
             * The name of table to create if `model` option is not supplied
             * Defaults to `modelName`
             */
            tableName?: string,

            /**
             * The name of table column holding migration name.
             * Defaults to 'name'.
             */
            columnName: string,

            /**
             * The type of the column holding migration name.
             * Defaults to `Sequelize.STRING`
             */
            columnType: Sequelize.DataTypeAbstract
    }

    declare interface umzug$ExecuteOptions {
        migrations?: Array<string>,
            method?: string
    }

    declare interface umzug$UmzugOptions {

        /**
         * The storage.
         * Possible values: 'json', 'sequelize', an object
         */
        storage?: string,

            /**
             * The options for the storage.
             */
            storageOptions?: umzug$JSONStorageOptions | umzug$SequelizeStorageOptions | Object,

            /**
             * The logging function.
             * A function that gets executed everytime migrations start and have ended.
             */
            logging?: boolean | Function,

            /**
             * The name of the positive method in migrations.
             */
            upName?: string,

            /**
             * The name of the negative method in migrations.
             */
            downName?: string,

            /**
             * Options for defined migration
             */
            migrations?: umzug$MigrationOptions
    }

    declare interface umzug$UpDownToOptions {

        /**
         * It is also possible to pass the name of a migration in order to
         * just run the migrations from the current state to the passed
        migration name.
        */
        to: string
    }

    declare interface umzug$UpDownMigrationsOptions {

        /**
         * Running specific migrations while ignoring the right order, can be
         * done like this:
         */
        migrations: Array<string >
    }

    declare interface umzug$Migration {
        path: string,
            file: string
    }

    declare interface umzug$Umzug {

        /**
         * The execute method is a general purpose function that runs for
         * every specified migrations the respective function.
         */
        execute(options?: umzug$ExecuteOptions): Promise<umzug$Migration[]>,

            /**
             * You can get a list of pending/not yet executed migrations like this:
             */
            pending(): Promise<umzug$Migration[]>,

            /**
             * You can get a list of already executed migrations like this:
             */
            executed(): Promise<umzug$Migration[]>,

            /**
             * The up method can be used to execute all pending migrations.
             */
            up(migration?: string): Promise<umzug$Migration[]>,
            up(migrations?: string[]): Promise<umzug$Migration[]>,
            up(
                options?: umzug$UpDownToOptions | umzug$UpDownMigrationsOptions): Promise<umzug$Migration[]>,

            /**
             * The down method can be used to revert the last executed migration.
             */
            down(migration?: string): Promise<umzug$Migration[]>,
            down(migrations?: string[]): Promise<umzug$Migration[]>,
            down(
                options?: umzug$UpDownToOptions | umzug$UpDownMigrationsOptions): Promise<umzug$Migration[] >
    }

    declare interface umzug$UmzugStatic {
        new(options?: umzug$UmzugOptions): umzug$Umzug
    }
    declare     var umzug: umzug$UmzugStatic;
    declare module.exports: typeof umzug
}