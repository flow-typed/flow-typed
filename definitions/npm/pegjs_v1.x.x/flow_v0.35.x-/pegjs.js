/**
 * Flowtype definitions for pegjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$PEG: {
    parse: typeof PEG$parse,
}
declare function PEG$parse(input: string): any

declare interface PEG$Location {
    line: number,
        column: number,
        offset: number
}

declare interface PEG$LocationRange {
    start: PEG$Location,
        end: PEG$Location
}

declare class SyntaxError {
    line: number;
    column: number;
    offset: number;
    location: PEG$LocationRange;
    expected: any[];
    found: any;
    name: string;
    message: string
}
declare module 'pegjs' {
    declare interface Location {
        line: number,
            column: number,
            offset: number
    }
    declare interface LocationRange {
        start: PEG$Location,
            end: PEG$Location
    }
    declare interface ExpectedItem {
        type: string,
            value?: string,
            description: string
    }
    declare type PegjsError = {
        name: string,
        message: string,
        location: PEG$LocationRange,
        found?: any,
        expected?: ExpectedItem[],
        stack?: any
    } & Error

    declare type GrammarError = PegjsError;
    declare var GrammarError: any;
    declare interface ParserOptions {
        startRule: string,
            tracer: any
    }
    declare interface Parser {
        parse(input: string, options?: ParserOptions): any,
            SyntaxError: any
    }
    declare interface BuildOptionsBase {

        /**
         * rules the parser will be allowed to start parsing from (default: the first rule in the grammar) 
         */
        allowedStartRules?: string[],

            /**
             * if `true`, makes the parser cache results, avoiding exponential parsing time in pathological cases but making the parser slower (default: `false`) 
             */
            cache?: boolean,

            /**
             * selects between optimizing the generated parser for parsing speed (`"speed"`) or code size (`"size"`) (default: `"speed"`) 
             */
            optimize?: "speed" | "size",

            /**
             * plugins to use 
             */
            plugins?: any[],

            /**
             * makes the parser trace its progress (default: `false`) 
             */
            trace?: boolean
    }
    declare type ParserBuildOptions = {

        /**
         * if set to `"parser"`, the method will return generated parser object; if set to `"source"`, it will return parser source code as a string (default: `"parser"`) 
         */
        output?: "parser"
    } & BuildOptionsBase

    declare type OutputFormatAmdCommonjs = {

        /**
         * if set to `"parser"`, the method will return generated parser object; if set to `"source"`, it will return parser source code as a string (default: `"parser"`) 
         */
        output: "source",

        /**
         * format of the genreated parser (`"amd"`, `"bare"`, `"commonjs"`, `"globals"`, or `"umd"`); valid only when `output` is set to `"source"` (default: `"bare"`) 
         */
        format: "amd" | "commonjs",

        /**
         * parser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when `format` is set to `"amd"`, `"commonjs"`, or `"umd"` (default: `{}`) 
         */
        dependencies?: any
    } & BuildOptionsBase

    declare type OutputFormatUmd = {

        /**
         * if set to `"parser"`, the method will return generated parser object; if set to `"source"`, it will return parser source code as a string (default: `"parser"`) 
         */
        output: "source",

        /**
         * format of the genreated parser (`"amd"`, `"bare"`, `"commonjs"`, `"globals"`, or `"umd"`); valid only when `output` is set to `"source"` (default: `"bare"`) 
         */
        format: "umd",

        /**
         * parser dependencies, the value is an object which maps variables used to access the dependencies in the parser to module IDs used to load them; valid only when `format` is set to `"amd"`, `"commonjs"`, or `"umd"` (default: `{}`) 
         */
        dependencies?: any,

        /**
         * name of a global variable into which the parser object is assigned to when no module loader is detected; valid only when `format` is set to `"globals"` or `"umd"` (default: `null`) 
         */
        exportVar?: any
    } & BuildOptionsBase

    declare type OutputFormatGlobals = {

        /**
         * if set to `"parser"`, the method will return generated parser object; if set to `"source"`, it will return parser source code as a string (default: `"parser"`) 
         */
        output: "source",

        /**
         * format of the genreated parser (`"amd"`, `"bare"`, `"commonjs"`, `"globals"`, or `"umd"`); valid only when `output` is set to `"source"` (default: `"bare"`) 
         */
        format: "globals",

        /**
         * name of a global variable into which the parser object is assigned to when no module loader is detected; valid only when `format` is set to `"globals"` or `"umd"` (default: `null`) 
         */
        exportVar?: any
    } & BuildOptionsBase

    declare type OutputFormatBare = {

        /**
         * if set to `"parser"`, the method will return generated parser object; if set to `"source"`, it will return parser source code as a string (default: `"parser"`) 
         */
        output: "source",

        /**
         * format of the genreated parser (`"amd"`, `"bare"`, `"commonjs"`, `"globals"`, or `"umd"`); valid only when `output` is set to `"source"` (default: `"bare"`) 
         */
        format?: "bare"
    } & BuildOptionsBase


    /**
     * Returns a generated parser object. It will throw an exception if the grammar is invalid. The exception will contain `message` property with more details about the error. 
     */
    declare function generate(grammar: string, options?: ParserBuildOptions): Parser
    declare type parser$SyntaxError = PegjsError;

    declare var SyntaxError: any;
}