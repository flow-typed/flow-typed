// @flow
/**
 * Flowtype definitions for twilio
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module.exports: typeof twilio
declare var npm$namespace$twilio: {
    webhook: typeof twilio$webhook,
    validateRequest: typeof twilio$validateRequest,
    validateExpressRequest: typeof twilio$validateExpressRequest,
}
declare export interface twilio$GrantPayload {}

declare export interface twilio$Grant {
    toPayload(): twilio$GrantPayload
}

declare export interface twilio$RequestCallback {
    (err: any, data: any, response: Http.ClientResponse): void
}

declare export interface twilio$BaseRequestCallback {
    (err: any, data: any): void
}

declare export interface twilio$RestMethod {
    (args: any | twilio$BaseRequestCallback, callback?: twilio$RequestCallback): Q.Promise<any >
}

declare export interface twilio$BaseMappedResource<T>{
    (resourceSid: string): T
}

declare export interface twilio$Resource {
    get: twilio$RestMethod
}

declare export type twilio$DeletableResource = {
    delete: twilio$RestMethod
} & twilio$Resource


declare export type twilio$ListableResource = {
    list: twilio$RestMethod
} & twilio$Resource


declare export type twilio$MappedResource<T>= {} & twilio$Resource & twilio$BaseMappedResource


declare export type twilio$PostableResource = {
    post: twilio$RestMethod
} & twilio$Resource


declare export type twilio$InstanceResource = {
    update: twilio$RestMethod
} & twilio$PostableResource & twilio$DeletableResource


declare export type twilio$CreatableMappedResource<T>= {
    create: twilio$RestMethod
} & twilio$MappedResource & twilio$PostableResource


declare export type twilio$ListMappedResource<T>= {} & twilio$CreatableMappedResource & twilio$ListableResource


declare export interface twilio$IpMessagingGrantOptions {
    serviceSid: string,
        endpointId: string,
        deploymentRoleSid: string,
        pushCredentialSid: string
}

declare export type twilio$IpMessagingGrantPayload = {
    service_sid: string,
    endpoint_id: string,
    deployment_role_sid: string,
    push_credential_sid: string
} & twilio$GrantPayload


declare export class IpMessagingGrant mixins Grant {
    serviceSid: string;
    endpointId: string;
    deploymentRoleSid: string;
    pushCredentialSid: string;
    key: string;
    constructor(options?: twilio$IpMessagingGrantOptions): this;
    toPayload(): twilio$IpMessagingGrantPayload
}

declare export interface twilio$ConversationsGrantOptions {
    configurationProfileSid: string
}

declare export type twilio$ConversationsGrantPayload = {
    configuration_profile_sid: string
} & twilio$GrantPayload


declare export class ConversationsGrant mixins Grant {
    configurationProfileSid: string;
    constructor(options?: twilio$ConversationsGrantOptions): this;
    toPayload(): twilio$ConversationsGrantPayload
}

declare export interface twilio$AccessTokenOptions {
    ttl: number,
        identity: string,
        nbf: number
}

declare export class AccessToken {
    accountSid: string;
    keySid: string;
    secret: string;
    ttl: number;
    identity: string;
    nbf: number;
    grants: Array<twilio$Grant>;
    IpMessagingGrant: twilio$IpMessagingGrant;
    ConversationGrant: twilio$ConversationsGrant;
    DEFAULT_ALGORITHM: string;
    ALGORITHMS: Array<string>;
    constructor(accountSid: string, keySid: string, secret: string, opts?: twilio$AccessTokenOptions): this;
    addGrant(grant: twilio$Grant): void;
    toJwt(algorithm: string): any
}

declare export class Capability {
    accountSid: string;
    authToken: string;
    capabilities: Array<string>;
    clientName: string;
    outgoingScopeParams: any;
    scopeParams: any;
    constructor(sid?: string, tkn?: string): this;
    allowClientIncoming(clientName: string): twilio$Capability;
    allowClientOutgoing(appSid: string, params?: any): twilio$Capability;
    allowEventStream(filters?: any): twilio$Capability;
    generate(timeout?: number): string
}

declare export interface twilio$ClientOptions {
    host?: string,
        apiVersion?: string,
        timeout?: number
}

declare export interface twilio$ClientRequestOptions {
    url: string,
        method?: string,
        form?: any
}

declare export class Client {
    accountSid: string;
    authToken: string;
    host: string;
    apiVersion: string;
    timeout: number;
    constructor(sid?: string, tkn?: string, host?: string, api_version?: string, timeout?: number): this;
    getBaseUrl(): string;
    request(
        options: twilio$ClientRequestOptions,
        callback?: twilio$RequestCallback): Q.Promise<any >
}

declare export class IpMessagingClient mixins Client {
    services: twilio$ServiceResource;
    credentials: twilio$CredentialResource;
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this
}

declare export class LookupsClient mixins Client {
    phoneNumbers: twilio$PhoneNumberResource;
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this
}

declare export class MonitorClient mixins Client {
    events: twilio$EventResource;
    alerts: twilio$AlertResource;
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this
}

declare export class PricingClient mixins Client {
    voice: twilio$PricingVoiceResource;
    phoneNumbers: twilio$PricingPhoneNumberResource;
    messaging: twilio$PricingMessagingResource;
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this
}

declare export class RestClient mixins Client {
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this;
    accounts: twilio$AccountResource;
    availablePhoneNumbers: twilio$AvailablePhoneNumberResource;
    outgoingCallerIds: twilio$OutgoingCallerIdResource;
    incomingPhoneNumbers: twilio$IncomingPhoneNumberResource;
    messages: twilio$MessageResource;
    sms: twilio$SMSIntermediary;
    applications: twilio$ApplicationResource;
    connectApps: twilio$ConnectAppResource;
    authorizedConnectApps: twilio$AuthorizedConnectAppResource;
    calls: twilio$CallResource;
    conferences: twilio$ConferenceResource;
    queues: twilio$QueueResource;
    recordings: twilio$RecordingResource;
    tokens: twilio$TokenResource;
    transcriptions: twilio$TranscriptionResource;
    notifications: twilio$NotificationResource;
    usage: twilio$UsageIntermediary;
    sip: twilio$SIPIntermediary;
    addresses: twilio$AddressResource;
    keys: twilio$KeyResource;
    put: twilio$RestMethod;
    post: twilio$RestMethod;
    get: twilio$RestMethod;
    update: twilio$RestMethod;
    list: twilio$RestMethod;
    sendSms: twilio$RestMethod;
    sendMms: twilio$RestMethod;
    sendMessage: twilio$RestMethod;
    listSms: twilio$RestMethod;
    listMessages: twilio$RestMethod;
    getSms(messageSid: string, callback?: twilio$RequestCallback): Q.Promise<any>;
    getMessage(messageSid: string, callback?: twilio$RequestCallback): Q.Promise<any>;
    makeCall: twilio$RestMethod;
    listCalls: twilio$RestMethod;
    getCall(callSid: string, callback?: twilio$RequestCallback): Q.Promise<any>;
    request(
        options: twilio$ClientRequestOptions,
        callback?: twilio$RequestCallback): Q.Promise<any >
}

declare export interface twilio$Policy {
    url: string,
        method: string,
        query_filter?: any,
        post_filter?: any,
        allow: boolean
}

declare export class TaskRouterCapability {
    accountSid: string;
    authToken: string;
    policies: Array<twilio$Policy>;
    workspaceSid: string;
    channelId: string;
    constructor(accountSid: string, authToken: string, workspaceSid: string, channelId: string): this;
    _setupResource(): void;
    allowFetchSubresources(): void;
    allowUpdates(): void;
    allowUpdatesSubresources(): void;
    allowDelete(): void;
    allowDeleteSubresources(): void;
    allowWorkerActivityUpdates(): void;
    allowWorkerFetchAttributes(): void;
    allowTaskReservationUpdates(): void;
    addPolicy(
        url: string,
        method: string,
        allowed?: boolean,
        queryFilter?: any,
        postFilter?: any): void;
    allow(url: string, method: string, queryFilter?: any, postFilter?: any): void;
    deny(url: string, method: string, queryFilter?: any, postFilter?: any): void;
    generate(ttl: number): string
}

declare export class TaskRouterClient mixins Client {
    workspaces: twilio$WorkspaceResource;
    workspace: twilio$WorkspaceResource;
    constructor(sid?: string, tkn?: string, workspaceSid?: string, options?: twilio$ClientOptions): this
}

declare export class TaskRouterTaskQueueCapability mixins TaskRouterCapability {
    constructor(accountSid: string, authToken: string, workspaceSid: string, taskQueueSid: string): this;
    _setupResource(): void
}

declare export class TaskRouterWorkerCapability mixins TaskRouterCapability {
    reservationsUrl: string;
    activityUrl: string;
    workerReservationsUrl: string;
    constructor(accountSid: string, authToken: string, workspaceSid: string, workerSid: string): this;
    _setupResource(): void;
    allowActivityUpdates(): void;
    allowReservationUpdates(): void
}

declare export class TaskRouterWorkspaceCapability mixins TaskRouterCapability {
    constructor(accountSid: string, authToken: string, workspaceSid: string): this;
    _setupResource(): void
}

declare export class TrunkingClient mixins Client {
    trunks: twilio$TrunkResource;
    constructor(sid?: string, tkn?: string, options?: twilio$ClientOptions): this
}

declare export interface twilio$NodeOptions {
    name: string,
        attributes?: any,
        text?: string,
        topLevel?: boolean,
        legalNodes: Array<string >
}

declare export interface twilio$TwimlMethod {
    (): twilio$Node,
    (arg1: twilio$TwimlCallback | string, arg2?: any): twilio$Node,
    (arg1: any, arg2?: twilio$TwimlCallback | string): twilio$Node
}

declare export interface twilio$TwimlCallback {
    (node: twilio$Node): void
}

declare export class Node mixins NodeOptions {
    name: string;
    attributes: any;
    text: any;
    topLevel: boolean;
    legalNodes: Array<string>;
    constructor(config?: twilio$NodeOptions): this;
    gather: twilio$TwimlMethod;
    say: twilio$TwimlMethod;
    play: twilio$TwimlMethod;
    pause: twilio$TwimlMethod;
    dial: twilio$TwimlMethod;
    number: twilio$TwimlMethod;
    client: twilio$TwimlMethod;
    conference: twilio$TwimlMethod;
    queue: twilio$TwimlMethod;
    sip: twilio$TwimlMethod;
    message: twilio$TwimlMethod;
    media: twilio$TwimlMethod;
    body: twilio$TwimlMethod;
    enqueue: twilio$TwimlMethod;
    task: twilio$TwimlMethod;
    record: twilio$TwimlMethod;
    sms: twilio$TwimlMethod;
    hangup: twilio$TwimlMethod;
    redirect: twilio$TwimlMethod;
    reject: twilio$TwimlMethod;
    leave: twilio$TwimlMethod;
    toString(): string
}

declare export class TwimlResponse mixins Node {}

declare export interface twilio$WebhookOptions {
    validate?: boolean,
        includeHelpers?: boolean,
        host?: string,
        protocol?: string
}

declare export interface twilio$WebhookExpressOptions {
    url?: string,
        host?: string,
        protocol?: string
}

declare export interface twilio$MiddlewareFunction {
    (request: Http.ServerRequest, response: Http.ServerResponse, next: Express.NextFunction): void
}

declare export function twilio$webhook(authToken: string, options?: twilio$WebhookOptions): twilio$MiddlewareFunction

declare export function twilio$validateRequest(authToken: string, twilioHeader: string, url: string, params?: any): boolean

declare export function twilio$validateExpressRequest(
    request: Express.Request,
    authToken: string,
    options?: twilio$WebhookExpressOptions): boolean

declare export type twilio$OutgoingCallerIdInstance = {
    put: twilio$RestMethod
} & twilio$InstanceResource


declare export type twilio$OutgoingCallerIdResource = {} & twilio$CreatableMappedResource


declare export type twilio$SMSMessageInstance = {} & twilio$Resource


declare export type twilio$SMSMessageResource = {} & twilio$CreatableMappedResource


declare export type twilio$SMSShortCodeInstance = {
    update: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$SMSShortCodeResource = {} & twilio$MappedResource


declare export interface twilio$SMSIntermediary {
    messages: twilio$SMSMessageResource,
        shortCodes: twilio$SMSShortCodeResource
}

declare export type twilio$ApplicationInstance = {} & twilio$InstanceResource


declare export type twilio$ApplicationResource = {} & twilio$CreatableMappedResource


declare export type twilio$ConnectAppInstance = {
    update: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$ConnectAppResource = {} & twilio$MappedResource


declare export type twilio$AuthorizedConnectAppInstance = {} & twilio$Resource


declare export type twilio$AuthorizedConnectAppResource = {} & twilio$MappedResource


declare export interface twilio$TokenInstance {}

declare export type twilio$TokenResource = {
    post: twilio$RestMethod,
    create: twilio$RestMethod
} & twilio$BaseMappedResource


declare export type twilio$TranscriptionInstance = {} & twilio$DeletableResource


declare export type twilio$TranscriptionResource = {} & twilio$MappedResource


declare export type twilio$NotificationInstance = {} & twilio$DeletableResource


declare export type twilio$NotificationResource = {} & twilio$MappedResource


declare export type twilio$UsageTriggerInstance = {} & twilio$InstanceResource


declare export type twilio$UsageTriggerResource = {} & twilio$CreatableMappedResource


declare export interface twilio$UsageIntermediary {
    records: twilio$UsageRecordResource,
        triggers: twilio$UsageTriggerResource
}

declare export interface twilio$SIPIntermediary {
    domains: twilio$DomainResource,
        ipAccessControlLists: twilio$IPAccessControlListResource,
        credentialLists: twilio$CredentialListResource
}

declare export type twilio$KeyInstance = {} & twilio$InstanceResource


declare export type twilio$KeyResource = {} & twilio$CreatableMappedResource


declare export type twilio$AccountInstance = {
    update: twilio$RestMethod,
    put: twilio$RestMethod,
    availablePhoneNumbers: twilio$AvailablePhoneNumberResource,
    outgoingCallerIds: twilio$OutgoingCallerIdResource,
    incomingPhoneNumbers: twilio$IncomingPhoneNumberResource,
    messages: twilio$MessageResource,
    sms: twilio$SMSIntermediary,
    applications: twilio$ApplicationResource,
    connectApps: twilio$ConnectAppResource,
    authorizedConnectApps: twilio$AuthorizedConnectAppResource,
    calls: twilio$CallResource,
    conferences: twilio$ConferenceResource,
    queues: twilio$QueueResource,
    recordings: twilio$RecordingResource,
    tokens: twilio$TokenResource,
    transcriptions: twilio$TranscriptionResource,
    notifications: twilio$NotificationResource,
    usage: twilio$UsageIntermediary,
    sip: twilio$SIPIntermediary,
    addresses: twilio$AddressResource,
    keys: twilio$KeyResource
} & twilio$PostableResource


declare export type twilio$AccountResource = {} & twilio$AccountInstance & twilio$ListMappedResource


declare export type twilio$DependentPhoneNumberResource = {} & twilio$ListableResource


declare export type twilio$AddressInstance = {
    dependentPhoneNumbers: twilio$DependentPhoneNumberResource
} & twilio$PostableResource & twilio$DeletableResource


declare export type twilio$AddressResource = {} & twilio$ListMappedResource


declare export type twilio$AvailablePhoneNumberResourceGroup = {
    search: twilio$RestMethod
} & twilio$ListableResource


declare export interface twilio$AvailablePhoneNumberInstance {
    local: twilio$AvailablePhoneNumberResourceGroup,
        tollFree: twilio$AvailablePhoneNumberResourceGroup,
        mobile: twilio$AvailablePhoneNumberResourceGroup
}

declare export type twilio$AvailablePhoneNumberResource = {} & twilio$BaseMappedResource


declare export type twilio$CallRecordingResource = {} & twilio$ListableResource


declare export type twilio$CallNotificationResource = {} & twilio$ListableResource


declare export type twilio$CallFeedbackResource = {
    create: twilio$RestMethod
} & twilio$PostableResource & twilio$DeletableResource


declare export type twilio$CallInstance = {
    recordings: twilio$CallRecordingResource,
    notifications: twilio$CallNotificationResource,
    feedback: twilio$CallFeedbackResource
} & twilio$InstanceResource


declare export type twilio$CallFeedbackSummaryInstance = {} & twilio$DeletableResource


declare export type twilio$CallFeedbackSummaryResource = {
    post: twilio$RestMethod,
    create: twilio$RestMethod
} & twilio$BaseMappedResource


declare export type twilio$CallResource = {
    feedbackSummary: twilio$CallFeedbackSummaryResource
} & twilio$CreatableMappedResource


declare export type twilio$ConferenceParticipantInstance = {
    kick: twilio$RestMethod
} & twilio$InstanceResource


declare export type twilio$ConferenceParticipantResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$ConferenceInstance = {
    participants: twilio$ConferenceParticipantResource
} & twilio$Resource


declare export type twilio$ConferenceResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$IncomingPhoneNumberResourceGroup = {
    create: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$IncomingPhoneNumberInstance = {
    put: twilio$RestMethod
} & twilio$InstanceResource


declare export type twilio$IncomingPhoneNumberResource = {
    local: twilio$IncomingPhoneNumberResourceGroup,
    tollFree: twilio$IncomingPhoneNumberResourceGroup,
    mobile: twilio$IncomingPhoneNumberResourceGroup
} & twilio$CreatableMappedResource


declare export type twilio$MessageMediaInstance = {} & twilio$DeletableResource


declare export type twilio$MessageMediaResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$MessageInstance = {
    media: twilio$MessageMediaResource
} & twilio$PostableResource & twilio$DeletableResource


declare export type twilio$MessageResource = {} & twilio$ListMappedResource


declare export type twilio$QueueMemberInstance = {
    update: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$QueueMemberResource = {
    front: twilio$QueueMemberInstance
} & twilio$MappedResource


declare export type twilio$QueueInstance = {
    members: twilio$QueueMemberResource
} & twilio$InstanceResource


declare export type twilio$QueueResource = {} & twilio$CreatableMappedResource


declare export type twilio$RecordingTranscriptionResource = {} & twilio$ListableResource


declare export type twilio$RecordingInstance = {
    transcriptions: twilio$RecordingTranscriptionResource
} & twilio$ListableResource & twilio$DeletableResource


declare export type twilio$RecordingResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$UsageRecordInstance = {} & twilio$Resource


declare export type twilio$UsageRecordRange = {} & twilio$ListableResource


declare export type twilio$UsageRecordResource = {
    daily: twilio$UsageRecordRange,
    monthly: twilio$UsageRecordRange,
    yearly: twilio$UsageRecordRange,
    allTime: twilio$UsageRecordRange,
    today: twilio$UsageRecordRange,
    yesterday: twilio$UsageRecordRange,
    thisMonth: twilio$UsageRecordRange,
    lastMonth: twilio$UsageRecordRange
} & twilio$MappedResource


declare export type twilio$CredentialInstance = {} & twilio$InstanceResource


declare export type twilio$CredentialResource = {} & twilio$ListMappedResource


declare export type twilio$ServiceUserInstance = {} & twilio$InstanceResource


declare export type twilio$ServiceUserResource = {} & twilio$ListMappedResource


declare export type twilio$ServiceRoleInstance = {} & twilio$Resource


declare export type twilio$ServiceRoleResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$ServiceChannelMessageInstance = {} & twilio$InstanceResource


declare export type twilio$ServiceChannelMessageResource = {} & twilio$ListMappedResource


declare export type twilio$ServiceChannelMemberInstance = {} & twilio$InstanceResource


declare export type twilio$ServiceChannelMemberResource = {} & twilio$ListMappedResource


declare export type twilio$ServiceChannelInstance = {
    messages: twilio$ServiceChannelMessageResource,
    members: twilio$ServiceChannelMemberResource
} & twilio$InstanceResource


declare export type twilio$ServiceChannelResource = {} & twilio$ListMappedResource


declare export type twilio$ServiceInstance = {
    users: twilio$ServiceUserResource,
    roles: twilio$ServiceRoleResource,
    channels: twilio$ServiceChannelResource
} & twilio$InstanceResource


declare export type twilio$ServiceResource = {} & twilio$ListMappedResource


declare export type twilio$PhoneNumberInstance = {} & twilio$Resource


declare export type twilio$PhoneNumberResource = {} & twilio$BaseMappedResource


declare export type twilio$AlertInstance = {} & twilio$Resource


declare export type twilio$AlertResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$EventInstance = {} & twilio$Resource


declare export type twilio$EventResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$CountryInstance = {} & twilio$Resource


declare export type twilio$CountryResource = {} & twilio$MappedResource & twilio$ListableResource


declare export interface twilio$PricingMessagingResource {
    countries: twilio$CountryResource
}

declare export interface twilio$PricingPhoneNumberResource {
    countries: twilio$CountryResource
}

declare export type twilio$NumberInstance = {} & twilio$Resource


declare export type twilio$NumberResource = {} & twilio$MappedResource & twilio$ListableResource


declare export interface twilio$PricingVoiceResource {
    countries: twilio$CountryResource,
        numbers: twilio$NumberResource
}

declare export type twilio$CredentialListInstance = {
    credentials: twilio$CredentialResource
} & twilio$InstanceResource


declare export type twilio$CredentialListResource = {} & twilio$ListMappedResource


declare export type twilio$IPAccessControlListMappingInstance = {} & twilio$DeletableResource


declare export type twilio$IPAccessControlListMappingResource = {} & twilio$ListMappedResource


declare export type twilio$CredentialListMappingInstance = {} & twilio$DeletableResource


declare export type twilio$CredentialListMappingResource = {} & twilio$ListMappedResource


declare export type twilio$DomainInstance = {
    ipAccessControlListMappings: twilio$IPAccessControlListMappingResource,
    credentialListMappings: twilio$CredentialListMappingResource
} & twilio$InstanceResource


declare export type twilio$DomainResource = {} & twilio$ListMappedResource


declare export type twilio$IPAddressInstance = {} & twilio$InstanceResource


declare export type twilio$IPAddressResource = {} & twilio$ListMappedResource


declare export type twilio$IPAccessControlListInstance = {
    ipAddresses: twilio$IPAddressResource
} & twilio$InstanceResource


declare export type twilio$IPAccessControlListResource = {} & twilio$ListMappedResource


declare export interface twilio$WorkflowRuleTargetOptions {
    queue: string,
        expression?: string,
        priority?: number,
        timeout?: number
}

declare export class WorkflowRuleTarget {
    queue: string;
    expression: string;
    priority: number;
    timeout: number;
    constructor(options?: twilio$WorkflowRuleTargetOptions): this
}

declare export interface twilio$WorkflowRuleOptions {
    expression: string,
        targets: Array<twilio$WorkflowRuleTargetOptions>,
        friendly_name?: string,
        friendlyName?: string,
        filter_friendly_name?: string
}

declare export class WorkflowRule {
    friendly_name: string;
    expression: string;
    targets: Array<twilio$WorkflowRuleTarget>;
    friendlyName: string;
    constructor(options?: twilio$WorkflowRuleOptions): this
}

declare export interface twilio$TaskRoutingConfigurationOptions {
    filters: Array<twilio$WorkflowRuleOptions>,
        default_filter?: twilio$WorkflowRuleOptions,
        defaultFilter?: twilio$WorkflowRuleOptions
}

declare export class TaskRoutingConfiguration {
    filters: Array<twilio$WorkflowRule>;
    default_filter: twilio$WorkflowRuleOptions;
    defaultFilter: twilio$WorkflowRuleOptions;
    constructor(options?: twilio$TaskRoutingConfigurationOptions): this
}

declare export interface twilio$WorkflowConfigurationOptions {
    task_routing?: twilio$TaskRoutingConfigurationOptions,
        taskRouting?: twilio$TaskRoutingConfigurationOptions
}

declare export class WorkflowConfiguration {
    task_routing: twilio$TaskRoutingConfiguration;
    taskRouting: twilio$TaskRoutingConfiguration;
    constructor(options?: twilio$WorkflowConfigurationOptions): this;
    fromJSON(json: string): twilio$WorkflowConfiguration;
    toJSON(): string
}

declare export type twilio$WorkspaceActivityInstance = {} & twilio$InstanceResource


declare export type twilio$WorkspaceActivityResource = {} & twilio$ListMappedResource


declare export type twilio$WorkspaceEventInstance = {} & twilio$Resource


declare export type twilio$WorkspaceEventResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$WorkspaceTaskReservationInstance = {
    update: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$WorkspaceTaskReservationResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$WorkspaceTaskInstance = {
    reservations: twilio$WorkspaceTaskReservationResource
} & twilio$InstanceResource


declare export type twilio$WorkspaceTaskResource = {} & twilio$ListMappedResource


declare export type twilio$WorkspaceInstanceStatisticResource = {} & twilio$Resource


declare export type twilio$WorkspaceStatisticResource = {} & twilio$ListableResource


declare export type twilio$WorkspaceTaskQueueInstance = {
    statistics: twilio$WorkspaceInstanceStatisticResource
} & twilio$InstanceResource


declare export type twilio$WorkspaceTaskQueueResource = {
    statistics: twilio$WorkspaceStatisticResource
} & twilio$ListMappedResource


declare export type twilio$WorkspaceWorkerReservationInstance = {
    update: twilio$RestMethod
} & twilio$PostableResource


declare export type twilio$WorkspaceWorkerReservationResource = {} & twilio$MappedResource & twilio$ListableResource


declare export type twilio$WorkspaceWorkerInstance = {
    statistics: twilio$WorkspaceInstanceStatisticResource,
    reservations: twilio$WorkspaceWorkerReservationResource
} & twilio$InstanceResource


declare export type twilio$WorkspaceWorkerResource = {
    statistics: twilio$WorkspaceStatisticResource
} & twilio$ListMappedResource


declare export type twilio$WorkspaceWorkflowInstance = {
    statistics: twilio$WorkspaceInstanceStatisticResource
} & twilio$InstanceResource


declare export type twilio$WorkspaceWorkflowResource = {
    statistics: twilio$WorkspaceStatisticResource
} & twilio$ListMappedResource


declare export type twilio$WorkspaceInstance = {
    activities: twilio$WorkspaceActivityResource,
    events: twilio$WorkspaceEventResource,
    tasks: twilio$WorkspaceTaskResource,
    taskQueues: twilio$WorkspaceTaskQueueResource,
    workers: twilio$WorkspaceWorkerResource,
    workflows: twilio$WorkspaceWorkflowResource,
    statistics: twilio$WorkspaceInstanceStatisticResource
} & twilio$InstanceResource


declare export type twilio$WorkspaceResource = {} & twilio$CreatableMappedResource


declare export type twilio$OriginationURLInstance = {} & twilio$InstanceResource


declare export type twilio$OriginationURLResource = {} & twilio$ListMappedResource


declare export type twilio$TrunkInstance = {
    ipAccessControlLists: twilio$IPAccessControlListResource,
    credentialLists: twilio$CredentialListResource,
    phoneNumbers: twilio$PhoneNumberResource,
    originationUrls: twilio$OriginationURLResource
} & twilio$InstanceResource


declare export type twilio$TrunkResource = {} & twilio$ListMappedResource