// @flow
/**
 * Flowtype definitions for chart
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface ChartDataSet {
    label: string,
        fillColor: string,
        strokeColor: string,
        pointColor?: string,
        pointStrokeColor?: string,
        pointHighlightFill?: string,
        pointHighlightStroke?: string,
        highlightFill?: string,
        highlightStroke?: string,
        data: number[]
}
declare interface LinearChartData {
    labels: string[],
        datasets: ChartDataSet[]
}
declare interface CircularChartData {
    value: number,
        color?: string,
        highlight?: string,
        label?: string
}
declare interface ChartSettings {
    animation?: boolean,
        animationSteps?: number,
        animationEasing?: string,
        showScale?: boolean,
        scaleOverride?: boolean,
        scaleSteps?: number,
        scaleStepWidth?: number,
        scaleStartValue?: number,
        scaleLineColor?: string,
        scaleLineWidth?: number,
        scaleShowLabels?: boolean,
        scaleLabel?: string,
        scaleIntegersOnly?: boolean,
        scaleBeginAtZero?: boolean,
        scaleFontFamily?: string,
        scaleFontSize?: number,
        scaleFontStyle?: string,
        scaleFontColor?: string,
        responsive?: boolean,
        maintainAspectRatio?: boolean,
        showTooltips?: boolean,
        tooltipEvents?: string[],
        tooltipFillColor?: string,
        tooltipFontFamily?: string,
        tooltipFontSize?: number,
        tooltipFontStyle?: string,
        tooltipFontColor?: string,
        tooltipTitleFontFamily?: string,
        tooltipTitleFontSize?: number,
        tooltipTitleFontStyle?: string,
        tooltipTitleFontColor?: string,
        tooltipYPadding?: number,
        tooltipXPadding?: number,
        tooltipCaretSize?: number,
        tooltipCornerRadius?: number,
        tooltipXOffset?: number,
        tooltipTemplate?: string,
        multiTooltipTemplate?: string,
        onAnimationProgress?: () => any,
        onAnimationComplete?: () => any
}
declare type ChartOptions = {
    scaleShowGridLines?: boolean,
    scaleGridLineColor?: string,
    scaleGridLineWidth?: number,
    scaleShowHorizontalLines?: boolean,
    scaleShowVerticalLines?: boolean,
    legendTemplate?: string
} & ChartSettings
declare interface PointsAtEvent {
    value: number,
        label: string,
        datasetLabel: string,
        strokeColor: string,
        fillColor: string,
        highlightFill: string,
        highlightStroke: string,
        x: number,
        y: number
}
declare interface ChartInstance {
    clear: () => void,
        stop: () => void,
        resize: () => void,
        destroy: () => void,
        toBase64Image: () => string,
        generateLegend: () => string
}
declare type LinearInstance = {
    getPointsAtEvent: (event: Event) => PointsAtEvent[],
    update: () => void,
    addData: (valuesArray: number[], label: string) => void,
    removeData: (index?: number) => void
} & ChartInstance
declare type CircularInstance = {
    getSegmentsAtEvent: (event: Event) => {}[],
    update: () => void,
    addData: (valuesArray: CircularChartData, index?: number) => void,
    removeData: (index: number) => void,
    segments: Array<CircularChartData >
} & ChartInstance
declare type LineChartOptions = {
    bezierCurve?: boolean,
    bezierCurveTension?: number,
    pointDot?: boolean,
    pointDotRadius?: number,
    pointDotStrokeWidth?: number,
    pointHitDetectionRadius?: number,
    datasetStroke?: boolean,
    datasetStrokeWidth?: number,
    datasetFill?: boolean
} & ChartOptions
declare type BarChartOptions = {
    scaleBeginAtZero?: boolean,
    barShowStroke?: boolean,
    barStrokeWidth?: number,
    barValueSpacing?: number,
    barDatasetSpacing?: number
} & ChartOptions
declare type RadarChartOptions = {
    scaleShowLine?: boolean,
    angleShowLineOut?: boolean,
    scaleShowLabels?: boolean,
    scaleBeginAtZero?: boolean,
    angleLineColor?: string,
    angleLineWidth?: number,
    pointLabelFontFamily?: string,
    pointLabelFontStyle?: string,
    pointLabelFontSize?: number,
    pointLabelFontColor?: string,
    pointDot?: boolean,
    pointDotRadius?: number,
    pointDotStrokeWidth?: number,
    pointHitDetectionRadius?: number,
    datasetStroke?: boolean,
    datasetStrokeWidth?: number,
    datasetFill?: boolean,
    legendTemplate?: string
} & ChartSettings
declare type PolarAreaChartOptions = {
    scaleShowLabelBackdrop?: boolean,
    scaleBackdropColor?: string,
    scaleBeginAtZero?: boolean,
    scaleBackdropPaddingY?: number,
    scaleBackdropPaddingX?: number,
    scaleShowLine?: boolean,
    segmentShowStroke?: boolean,
    segmentStrokeColor?: string,
    segmentStrokeWidth?: number,
    animationSteps?: number,
    animationEasing?: string,
    animateRotate?: boolean,
    animateScale?: boolean,
    legendTemplate?: string
} & ChartSettings
declare type PieChartOptions = {
    segmentShowStroke?: boolean,
    segmentStrokeColor?: string,
    segmentStrokeWidth?: number,
    percentageInnerCutout?: number,
    animationSteps?: number,
    animationEasing?: string,
    animateRotate?: boolean,
    animateScale?: boolean,
    legendTemplate?: string
} & ChartSettings
declare interface Chart {
    Line(data: LinearChartData, options?: LineChartOptions): LinearInstance,
        Bar(data: LinearChartData, options?: BarChartOptions): LinearInstance,
        Radar(data: LinearChartData, options?: RadarChartOptions): LinearInstance,
        PolarArea(data: CircularChartData[], options?: PolarAreaChartOptions): CircularInstance,
        Pie(data: CircularChartData[], options?: PieChartOptions): CircularInstance,
        Doughnut(data: CircularChartData[], options?: PieChartOptions): CircularInstance
}
declare var Chart: {
    new(context: CanvasRenderingContext2D): Chart,
    defaults: {
        global: ChartSettings
    }
};