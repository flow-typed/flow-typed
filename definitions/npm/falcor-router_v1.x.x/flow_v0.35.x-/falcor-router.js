// @flow
/**
 * Flowtype definitions for falcor-router
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare class Router mixins DataSource {
    constructor(routes: Array<FalcorRouter$RouteDefinition>, options?: FalcorRouter$RouterOptions): this;

    /**
     * When a route misses on a call, get, or set the unhandledDataSource will
     * have a chance to fulfill that request.
     */
    routeUnhandledPathsTo(dataSource: DataSource): void;
    createClass(routes?: Array<FalcorRouter$RouteDefinition>): typeof CreatedRouter
}

declare class CreatedRouter mixins Router {
    constructor(options?: FalcorRouter$RouterOptions): this
}

declare interface FalcorRouter$Route {
    route: string
}

declare type FalcorRouter$RoutePathSet = FalcorJsonGraph.PathSet;

declare type FalcorRouter$CallRoute = {
    call(
        callPath: FalcorRouter$RoutePathSet,
        args: Array<any>): FalcorRouter$RouteResult | Promise<FalcorRouter$RouteResult >
} & FalcorRouter$Route


declare type FalcorRouter$GetRoute = {
    get(
        pathset: FalcorRouter$RoutePathSet): FalcorRouter$RouteResult | Promise<FalcorRouter$RouteResult >
} & FalcorRouter$Route


declare type FalcorRouter$SetRoute = {
    set(
        jsonGraph: FalcorJsonGraph.JSONGraph): FalcorRouter$RouteResult | Promise<FalcorRouter$RouteResult >
} & FalcorRouter$Route


declare type FalcorRouter$RouteDefinition = FalcorRouter$GetRoute | FalcorRouter$SetRoute | FalcorRouter$CallRoute;

declare type FalcorRouter$RouteResult = FalcorJsonGraph.PathValue | Array<FalcorJsonGraph.PathValue>| FalcorJsonGraph.JSONEnvelope<any>;

declare interface FalcorRouter$RouterOptions {
    debug?: boolean,
        maxPaths?: number,
        maxRefFollow?: number
}
declare module 'falcor-router' {
    declare module.exports: typeof FalcorRouter$Router
}