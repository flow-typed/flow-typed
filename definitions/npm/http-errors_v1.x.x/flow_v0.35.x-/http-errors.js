// @flow
/**
 * Flowtype definitions for http-errors
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'http-errors' {
    declare type createHttpError$HttpError = {
        status: number,
        statusCode: number,
        expose: boolean
    } & Error


    declare type createHttpError$HttpErrorConstructor = (msg?: string) => createHttpError$HttpError;

    declare interface createHttpError$CreateHttpError {
        [code: string]: () => createHttpError$HttpError,
        (...args: Array<Error | string | number | Object>): createHttpError$HttpError,
        Continue: createHttpError$HttpErrorConstructor,
            SwitchingProtocols: createHttpError$HttpErrorConstructor,
            Processing: createHttpError$HttpErrorConstructor,
            OK: createHttpError$HttpErrorConstructor,
            Created: createHttpError$HttpErrorConstructor,
            Accepted: createHttpError$HttpErrorConstructor,
            NonAuthoritativeInformation: createHttpError$HttpErrorConstructor,
            NoContent: createHttpError$HttpErrorConstructor,
            ResetContent: createHttpError$HttpErrorConstructor,
            PartialContent: createHttpError$HttpErrorConstructor,
            MultiStatus: createHttpError$HttpErrorConstructor,
            AlreadyReported: createHttpError$HttpErrorConstructor,
            IMUsed: createHttpError$HttpErrorConstructor,
            MultipleChoices: createHttpError$HttpErrorConstructor,
            MovedPermanently: createHttpError$HttpErrorConstructor,
            Found: createHttpError$HttpErrorConstructor,
            SeeOther: createHttpError$HttpErrorConstructor,
            NotModified: createHttpError$HttpErrorConstructor,
            UseProxy: createHttpError$HttpErrorConstructor,
            Unused: createHttpError$HttpErrorConstructor,
            TemporaryRedirect: createHttpError$HttpErrorConstructor,
            PermanentRedirect: createHttpError$HttpErrorConstructor,
            BadRequest: createHttpError$HttpErrorConstructor,
            Unauthorized: createHttpError$HttpErrorConstructor,
            PaymentRequired: createHttpError$HttpErrorConstructor,
            Forbidden: createHttpError$HttpErrorConstructor,
            NotFound: createHttpError$HttpErrorConstructor,
            MethodNotAllowed: createHttpError$HttpErrorConstructor,
            NotAcceptable: createHttpError$HttpErrorConstructor,
            ProxyAuthenticationRequired: createHttpError$HttpErrorConstructor,
            RequestTimeout: createHttpError$HttpErrorConstructor,
            Conflict: createHttpError$HttpErrorConstructor,
            Gone: createHttpError$HttpErrorConstructor,
            LengthRequired: createHttpError$HttpErrorConstructor,
            PreconditionFailed: createHttpError$HttpErrorConstructor,
            PayloadTooLarge: createHttpError$HttpErrorConstructor,
            URITooLong: createHttpError$HttpErrorConstructor,
            UnsupportedMediaType: createHttpError$HttpErrorConstructor,
            RangeNotSatisfiable: createHttpError$HttpErrorConstructor,
            ExpectationFailed: createHttpError$HttpErrorConstructor,
            ImATeapot: createHttpError$HttpErrorConstructor,
            MisdirectedRequest: createHttpError$HttpErrorConstructor,
            UnprocessableEntity: createHttpError$HttpErrorConstructor,
            Locked: createHttpError$HttpErrorConstructor,
            FailedDependency: createHttpError$HttpErrorConstructor,
            UnorderedCollection: createHttpError$HttpErrorConstructor,
            UpgradeRequired: createHttpError$HttpErrorConstructor,
            PreconditionRequired: createHttpError$HttpErrorConstructor,
            TooManyRequests: createHttpError$HttpErrorConstructor,
            RequestHeaderFieldsTooLarge: createHttpError$HttpErrorConstructor,
            UnavailableForLegalReasons: createHttpError$HttpErrorConstructor,
            InternalServerError: createHttpError$HttpErrorConstructor,
            NotImplemented: createHttpError$HttpErrorConstructor,
            BadGateway: createHttpError$HttpErrorConstructor,
            ServiceUnavailable: createHttpError$HttpErrorConstructor,
            GatewayTimeout: createHttpError$HttpErrorConstructor,
            HTTPVersionNotSupported: createHttpError$HttpErrorConstructor,
            VariantAlsoNegotiates: createHttpError$HttpErrorConstructor,
            InsufficientStorage: createHttpError$HttpErrorConstructor,
            LoopDetected: createHttpError$HttpErrorConstructor,
            BandwidthLimitExceeded: createHttpError$HttpErrorConstructor,
            NotExtended: createHttpError$HttpErrorConstructor,
            NetworkAuthenticationRequired: createHttpError$HttpErrorConstructor
    }
    declare     var createHttpError: createHttpError$CreateHttpError;
    declare module.exports: typeof createHttpError
}