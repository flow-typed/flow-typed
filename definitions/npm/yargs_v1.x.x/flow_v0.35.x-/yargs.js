// @flow
/**
 * Flowtype definitions for yargs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'yargs' {
    declare interface yargs$Argv {
        argv: any,
            (...args: any[]): any,
            parse(...args: any[]): any,
            reset(): yargs$Argv,
            locale(): string,
            locale(loc: string): yargs$Argv,
            detectLocale(detect: boolean): yargs$Argv,
            terminalWidth(): number,
            alias(shortName: string, longName: string): yargs$Argv,
            alias(aliases: {
                [shortName: string]: string
            }): yargs$Argv,
            alias(aliases: {
                [shortName: string]: string[]
            }): yargs$Argv,
            array(key: string): yargs$Argv,
            array(keys: string[]): yargs$Argv,
            default (key: string, value: any): yargs$Argv,
            default (defaults: {
                [key: string]: any
            }): yargs$Argv,
            demand(key: string, msg: string): yargs$Argv,
            demand(key: string, required?: boolean): yargs$Argv,
            demand(keys: string[], msg: string): yargs$Argv,
            demand(keys: string[], required?: boolean): yargs$Argv,
            demand(positionals: number, required?: boolean): yargs$Argv,
            demand(positionals: number, msg: string): yargs$Argv,
            require(key: string, msg: string): yargs$Argv,
            require(key: string, required: boolean): yargs$Argv,
            require(keys: number[], msg: string): yargs$Argv,
            require(keys: number[], required: boolean): yargs$Argv,
            require(positionals: number, required: boolean): yargs$Argv,
            require(positionals: number, msg: string): yargs$Argv,
            required(key: string, msg: string): yargs$Argv,
            required(key: string, required: boolean): yargs$Argv,
            required(keys: number[], msg: string): yargs$Argv,
            required(keys: number[], required: boolean): yargs$Argv,
            required(positionals: number, required: boolean): yargs$Argv,
            required(positionals: number, msg: string): yargs$Argv,
            requiresArg(key: string): yargs$Argv,
            requiresArg(keys: string[]): yargs$Argv,
            describe(key: string, description: string): yargs$Argv,
            describe(descriptions: {
                [key: string]: string
            }): yargs$Argv,
            option(key: string, options: yargs$Options): yargs$Argv,
            option(options: {
                [key: string]: yargs$Options
            }): yargs$Argv,
            options(key: string, options: yargs$Options): yargs$Argv,
            options(options: {
                [key: string]: yargs$Options
            }): yargs$Argv,
            usage(message: string, options?: {
                [key: string]: yargs$Options
            }): yargs$Argv,
            usage(options?: {
                [key: string]: yargs$Options
            }): yargs$Argv,
            command(command: string, description: string): yargs$Argv,
            command(
                command: string,
                description: string,
                handler: (args: yargs$Argv) => void): yargs$Argv,
            command(
                command: string,
                description: string,
                builder: (args: yargs$Argv) => yargs$Options): yargs$Argv,
            command(
                command: string,
                description: string,
                builder: {
                    [optionName: string]: yargs$Options
                }): yargs$Argv,
            command(
                command: string,
                description: string,
                builder: {
                    [optionName: string]: yargs$Options
                },
                handler: (args: yargs$Argv) => void): yargs$Argv,
            command(
                command: string,
                description: string,
                builder: (args: yargs$Argv) => yargs$Options,
                handler: (args: yargs$Argv) => void): yargs$Argv,
            commandDir(dir: string, opts?: yargs$RequireDirectoryOptions): yargs$Argv,
            completion(cmd: string, fn?: yargs$SyncCompletionFunction): yargs$Argv,
            completion(
                cmd: string,
                description?: string,
                fn?: yargs$SyncCompletionFunction): yargs$Argv,
            completion(cmd: string, fn?: yargs$AsyncCompletionFunction): yargs$Argv,
            completion(
                cmd: string,
                description?: string,
                fn?: yargs$AsyncCompletionFunction): yargs$Argv,
            example(command: string, description: string): yargs$Argv,
            check(func: (argv: any, aliases: {
                [alias: string]: string
            }) => any): yargs$Argv,
            boolean(key: string): yargs$Argv,
            boolean(keys: string[]): yargs$Argv,
            string(key: string): yargs$Argv,
            string(keys: string[]): yargs$Argv,
            choices(choices: Object): yargs$Argv,
            choices(key: string, values: any[]): yargs$Argv,
            config(key: string): yargs$Argv,
            config(keys: string[]): yargs$Argv,
            wrap(columns: number): yargs$Argv,
            strict(): yargs$Argv,
            help(): yargs$Argv,
            help(option: string, description?: string): yargs$Argv,
            env(prefix?: string): yargs$Argv,
            env(enable: boolean): yargs$Argv,
            epilog(msg: string): yargs$Argv,
            epilogue(msg: string): yargs$Argv,
            version(version: string, option?: string, description?: string): yargs$Argv,
            version(version: () => string, option?: string, description?: string): yargs$Argv,
            showHelpOnFail(enable: boolean, message?: string): yargs$Argv,
            showHelp(func?: (message: string) => any): yargs$Argv,
            exitProcess(enabled: boolean): yargs$Argv,
            global(key: string): yargs$Argv,
            global(keys: string[]): yargs$Argv,
            group(key: string, groupName: string): yargs$Argv,
            group(keys: string[], groupName: string): yargs$Argv,
            nargs(key: string, count: number): yargs$Argv,
            nargs(nargs: {
                [key: string]: number
            }): yargs$Argv,
            normalize(key: string): yargs$Argv,
            normalize(keys: string[]): yargs$Argv,
            implies(key: string, value: string): yargs$Argv,
            implies(implies: {
                [key: string]: string
            }): yargs$Argv,
            count(key: string): yargs$Argv,
            count(keys: string[]): yargs$Argv,
            fail(func: (msg: string, err: Error) => any): yargs$Argv
    }

    declare interface yargs$RequireDirectoryOptions {
        recurse?: boolean,
            extensions?: string[],
            visit?: (commandObject: any, pathToFile?: string, filename?: string) => any,
            include?: RegExp | ((pathToFile: string) => boolean),
            exclude?: RegExp | ((pathToFile: string) => boolean)
    }

    declare interface yargs$Options {
        type?: string,
            group?: string,
            alias?: any,
            demand?: any,
            required?: any,
            require?: any,
            default?: any,
            defaultDescription?: string,
            boolean?: boolean,
            string?: boolean,
            count?: boolean,
            describe?: any,
            description?: any,
            desc?: any,
            requiresArg?: any,
            choices?: string[],
            global?: boolean,
            array?: boolean,
            config?: boolean,
            number?: boolean,
            normalize?: boolean,
            nargs?: number
    }

    declare type yargs$SyncCompletionFunction = (current: string, argv: any) => string[];

    declare type yargs$AsyncCompletionFunction = (current: string, argv: any, done: (completion: string[]) => void) => void;
    declare     var yargs: yargs$Argv;
    declare module.exports: typeof yargs
}