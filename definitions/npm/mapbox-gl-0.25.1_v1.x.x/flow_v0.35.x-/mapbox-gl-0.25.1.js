/**
 * Flowtype definitions for mapbox-gl-0.25.1
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$mapboxgl: {
    supported: typeof mapboxgl$supported,
}
declare
var accessToken: string;

declare
var version: string;

declare
export function mapboxgl$supported(options?: {
    failIfMajorPerformanceCaveat?: boolean
}): boolean


/**
 * Map
 */
declare
export class Map mixins Evented {
    constructor(options?: mapboxgl$MapboxOptions): this;
    addControl(control: mapboxgl$Control): this;
    addClass(klass: string, options?: mapboxgl$StyleOptions): this;
    removeClass(klass: string, options?: mapboxgl$StyleOptions): this;
    setClasses(klasses: string[], options?: mapboxgl$StyleOptions): this;
    hasClass(klass: string): boolean;
    getClasses(): string[];
    resize(): this;
    getBounds(): mapboxgl$LngLatBounds;
    setMaxBounds(lnglatbounds?: mapboxgl$LngLatBounds | number[][]): this;
    setMinZoom(minZoom?: number): this;
    setMaxZoom(maxZoom?: number): this;
    project(lnglat: mapboxgl$LngLat | number[]): mapboxgl$Point;
    unproject(point: mapboxgl$Point | number[]): mapboxgl$LngLat;
    queryRenderedFeatures(
        pointOrBox?: mapboxgl$Point | number[] | mapboxgl$Point[] | number[][],
        parameters?: {
            layers?: string[],
            filter?: any[]
        }): GeoJSON.Feature<GeoJSON.GeometryObject>[];
    querySourceFeatures(
        sourceID: string,
        parameters: {
            sourceLayer?: string,
            filter?: any[]
        }): GeoJSON.Feature<GeoJSON.GeometryObject>[];
    setStyle(style: mapboxgl$Style | string): this;
    getStyle(): mapboxgl$Style;
    addSource(
        id: string,
        source: mapboxgl$VectorSource |
        mapboxgl$RasterSource |
        mapboxgl$GeoJSONSource |
        mapboxgl$ImageSource |
        mapboxgl$VideoSource |
        mapboxgl$GeoJSONSourceRaw): this;
    removeSource(id: string): this;
    getSource(
            id: string): mapboxgl$VectorSource |
        mapboxgl$RasterSource |
        mapboxgl$GeoJSONSource |
        mapboxgl$ImageSource |
        mapboxgl$VideoSource;
    addLayer(layer: mapboxgl$Layer, before?: string): this;
    removeLayer(id: string): this;
    getLayer(id: string): mapboxgl$Layer;
    setFilter(layer: string, filter: any[]): this;
    setLayerZoomRange(layerId: string, minzoom: number, maxzoom: number): this;
    getFilter(layer: string): any[];
    setPaintProperty(layer: string, name: string, value: any, klass?: string): this;
    getPaintProperty(layer: string, name: string, klass?: string): any;
    setLayoutProperty(layer: string, name: string, value: any): this;
    getLayoutProperty(layer: string, name: string, klass?: string): any;
    getContainer(): HTMLElement;
    getCanvasContainer(): HTMLElement;
    getCanvas(): HTMLCanvasElement;
    loaded(): boolean;
    remove(): void;
    onError(): void;
    showTileBoundaries: boolean;
    showCollisionBoxes: boolean;
    repaint: boolean;
    getCenter(): mapboxgl$LngLat;
    setCenter(center: mapboxgl$LngLat | number[], eventData?: mapboxgl$EventData): this;
    panBy(
        offset: number[],
        options?: mapboxgl$AnimationOptions,
        eventData?: mapboxgl$EventData): this;
    panTo(
        lnglat: mapboxgl$LngLat,
        options?: mapboxgl$AnimationOptions,
        eventdata?: mapboxgl$EventData): this;
    getZoom(): number;
    setZoom(zoom: number, eventData?: mapboxgl$EventData): this;
    zoomTo(
        zoom: number,
        options?: mapboxgl$AnimationOptions,
        eventData?: mapboxgl$EventData): this;
    zoomIn(options?: mapboxgl$AnimationOptions, eventData?: mapboxgl$EventData): this;
    zoomOut(options?: mapboxgl$AnimationOptions, eventData?: mapboxgl$EventData): this;
    getBearing(): number;
    setBearing(bearing: number, eventData?: mapboxgl$EventData): this;
    rotateTo(
        bearing: number,
        options?: mapboxgl$AnimationOptions,
        eventData?: mapboxgl$EventData): this;
    resetNorth(options?: mapboxgl$AnimationOptions, eventData?: mapboxgl$EventData): this;
    snapToNorth(options?: mapboxgl$AnimationOptions, eventData?: mapboxgl$EventData): this;
    getPitch(): number;
    setPitch(pitch: number, eventData?: mapboxgl$EventData): this;
    fitBounds(
        bounds: mapboxgl$LngLatBounds | number[][],
        options?: {
            linear?: boolean,
            easing?: Function,
            padding?: number,
            offset?: mapboxgl$Point | number[],
            maxZoom?: number
        }): this;
    jumpTo(options: mapboxgl$CameraOptions, eventData?: mapboxgl$EventData): this;
    easeTo(
        options: mapboxgl$CameraOptions | mapboxgl$AnimationOptions,
        eventData?: mapboxgl$EventData): this;
    flyTo(options: mapboxgl$FlyToOptions, eventData?: mapboxgl$EventData): this;
    stop(): this;
    scrollZoom: mapboxgl$ScrollZoomHandler;
    boxZoom: mapboxgl$BoxZoomHandler;
    dragRotate: mapboxgl$DragRotateHandler;
    dragPan: mapboxgl$DragPanHandler;
    keyboard: mapboxgl$KeyboardHandler;
    doublClickZoom: mapboxgl$DoubleClickZoomHandler;
    touchZoomRotate: mapboxgl$TouchZoomRotateHandler
}

declare
export interface mapboxgl$MapboxOptions {

    /**
     * If true, an attribution control will be added to the map. 
     */
    attributionControl?: boolean,
        bearing?: number,

        /**
         * Snap to north threshold in degrees. 
         */
        bearingSnap?: number,

        /**
         * If true, enable the "box zoom" interaction (see BoxZoomHandler) 
         */
        boxZoom?: boolean,

        /**
         * initial map center 
         */
        center?: mapboxgl$LngLat | number[],

        /**
         * Style class names with which to initialize the map 
         */
        classes?: string[],

        /**
         * ID of the container element 
         */
        container?: string | Element,

        /**
         * If true, enable the "drag to pan" interaction (see DragPanHandler). 
         */
        dragPan?: boolean,

        /**
         * If true, enable the "drag to rotate" interaction (see DragRotateHandler). 
         */
        dragRotate?: boolean,

        /**
         * If true, enable the "double click to zoom" interaction (see DoubleClickZoomHandler). 
         */
        doubleClickZoom?: boolean,

        /**
         * If true, the map will track and update the page URL according to map position 
         */
        hash?: boolean,

        /**
         * If true, map creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than expected. 
         */
        failIfMayorPerformanceCaveat?: boolean,

        /**
         * If false, no mouse, touch, or keyboard listeners are attached to the map, so it will not respond to input 
         */
        interactive?: boolean,

        /**
         * If true, enable keyboard shortcuts (see KeyboardHandler). 
         */
        keyboard?: boolean,

        /**
         * If set, the map is constrained to the given bounds. 
         */
        maxBounds?: mapboxgl$LngLatBounds | number[][],

        /**
         * Maximum zoom of the map 
         */
        maxZoom?: number,

        /**
         * Minimum zoom of the map 
         */
        minZoom?: number,

        /**
         * If true, The maps canvas can be exported to a PNG using map.getCanvas().toDataURL();. This is false by default as a performance optimization. 
         */
        preserveDrawingBuffer?: boolean,
        pitch?: number,

        /**
         * If true, enable the "scroll to zoom" interaction 
         */
        scrollZoom?: boolean,

        /**
         * stylesheet location 
         */
        style?: mapboxgl$Style | string,

        /**
         * If  true, the map will automatically resize when the browser window resizes 
         */
        trackResize?: boolean,

        /**
         * If true, enable the "pinch to rotate and zoom" interaction (see TouchZoomRotateHandler). 
         */
        touchZoomRotate?: boolean,

        /**
         * Initial zoom level 
         */
        zoom?: number
}


/**
 * BoxZoomHandler
 */
declare
export class BoxZoomHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void
}


/**
 * ScrollZoomHandler
 */
declare
export class ScrollZoomHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void
}


/**
 * DragPenHandler
 */
declare
export class DragPanHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void
}


/**
 * DragRotateHandler
 */
declare
export class DragRotateHandler {
    constructor(map: mapboxgl$Map, options?: {
        bearingSnap?: number,
        pitchWithRotate?: boolean
    }): this;
    isEnabled(): boolean;
    isActive(): boolean;
    enable(): void;
    disable(): void
}


/**
 * KeyboardHandler
 */
declare
export class KeyboardHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void
}


/**
 * DoubleClickZoomHandler
 */
declare
export class DoubleClickZoomHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void
}


/**
 * TouchZoomRotateHandler
 */
declare
export class TouchZoomRotateHandler {
    constructor(map: mapboxgl$Map): this;
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
    disableRotation(): void;
    enableRotation(): void
}


/**
 * Control
 */
declare
export class Control mixins Evented {
    addTo(map: mapboxgl$Map): this;
    remove(): this
}


/**
 * ControlOptions
 */
declare
export interface mapboxgl$ControlOptions {
    position?: "top-right" | "top-left" | "bottom-right" | "bottom-left"
}


/**
 * Navigation
 */
declare
export class Navigation mixins Control {
    constructor(options?: mapboxgl$ControlOptions): this
}


/**
 * Geolocate
 */
declare
export class Geolocate mixins Control {
    constructor(options?: mapboxgl$ControlOptions): this
}


/**
 * Attribution
 */
declare
export class Attribution mixins Control {
    constructor(options?: mapboxgl$ControlOptions): this
}


/**
 * Scale
 */
declare
export class Scale mixins Control {
    constructor(options?: {
        position?: "top-right" | "top-left" | "bottom-right" | "bottom-left",
        maxWidth?: number,
        unit?: string
    }): this
}


/**
 * Popup
 */
declare
export class Popup mixins Evented {
    constructor(options?: mapboxgl$PopupOptions): this;
    addTo(map: mapboxgl$Map): this;
    isOpen(): boolean;
    remove(): this;
    getLngLat(): mapboxgl$LngLat;
    setLngLat(lnglat: mapboxgl$LngLat | number[]): this;
    setText(text: string): this;
    setHTML(html: string): this;
    setDOMContent(htmlNode: Node): this
}

declare
export interface mapboxgl$PopupOptions {
    closeButton?: boolean,
        closeOnClick?: boolean,
        anchor?: "top" |
        "bottom" |
        "left" |
        "right" |
        "top-left" |
        "top-right" |
        "bottom-left" |
        "bottom-right",
        offset?: number | mapboxgl$Point | number[] | {
            [key: string]: mapboxgl$Point | number[]
        }
}

declare
export interface mapboxgl$Style {
    bearing?: number,
        center?: number[],
        glyphs?: string,
        layers?: mapboxgl$Layer[],
        metadata?: any,
        name?: string,
        pitch?: number,
        sources?: any,
        sprite?: string,
        transition?: mapboxgl$Transition,
        version: number,
        zoom?: number
}

declare
export interface mapboxgl$Transition {
    delay?: number,
        duration?: number
}

declare
export interface mapboxgl$Source {
    type: "vector" |
        "raster" |
        "geojson" |
        "image" |
        "video"
}


/**
 * GeoJSONSource
 */
declare
export type mapboxgl$GeoJSONSourceRaw = {
    type: "geojson"
} & mapboxgl$Source & mapboxgl$GeoJSONSourceOptions


declare
export class GeoJSONSource mixins GeoJSONSourceRaw {
    type: "geojson";
    constructor(options?: mapboxgl$GeoJSONSourceOptions): this;
    setData(
        data: GeoJSON.Feature<GeoJSON.GeometryObject>| GeoJSON.FeatureCollection<GeoJSON.GeometryObject>| String): this
}

declare
export interface mapboxgl$GeoJSONSourceOptions {
    data?: GeoJSON.Feature<GeoJSON.GeometryObject>| GeoJSON.FeatureCollection<GeoJSON.GeometryObject>| string,
        maxzoom?: number,
        buffer?: number,
        tolerance?: number,
        cluster?: number | boolean,
        clusterRadius?: number,
        clusterMaxZoom?: number
}


/**
 * VideoSource
 */
declare
export class VideoSource mixins Source, VideoSourceOptions {
    type: "video";
    constructor(options?: mapboxgl$VideoSourceOptions): this;
    getVideo(): HTMLVideoElement;
    setCoordinates(coordinates: number[][]): this
}

declare
export interface mapboxgl$VideoSourceOptions {
    urls?: string[],
        coordinates?: number[][]
}


/**
 * ImageSource
 */
declare
export class ImageSource mixins Source, ImageSourceOptions {
    type: "image";
    constructor(options?: mapboxgl$ImageSourceOptions): this;
    setCoordinates(coordinates: number[][]): this
}

declare
export interface mapboxgl$ImageSourceOptions {
    url?: string,
        coordinates?: number[][]
}

declare type mapboxgl$VectorSource = {
    type: "vector",
    url?: string,
    tiles?: string[],
    minzoom?: number,
    maxzoom?: number
} & mapboxgl$Source


declare type mapboxgl$RasterSource = {
    type: "raster",
    url: string,
    tiles?: string[],
    minzoom?: number,
    maxzoom?: number,
    tileSize?: number
} & mapboxgl$Source



/**
 * LngLat
 */
declare
export class LngLat {
    lng: number;
    lat: number;
    constructor(lng: number, lat: number): this;

    /**
     * Return a new LngLat object whose longitude is wrapped to the range (-180, 180). 
     */
    wrap(): mapboxgl$LngLat;

    /**
     * Return a LngLat as an array 
     */
    toArray(): number[];

    /**
     * Return a LngLat as a string 
     */
    toString(): string;
    convert(input: number[] | mapboxgl$LngLat): mapboxgl$LngLat
}


/**
 * LngLatBounds
 */
declare
export class LngLatBounds {
    sw: mapboxgl$LngLat | number[];
    ne: mapboxgl$LngLat | number[];
    constructor(sw?: mapboxgl$LngLat, ne?: mapboxgl$LngLat): this;

    /**
     * Extend the bounds to include a given LngLat or LngLatBounds. 
     */
    extend(obj: mapboxgl$LngLat | mapboxgl$LngLatBounds): this;

    /**
     * Get the point equidistant from this box's corners 
     */
    getCenter(): mapboxgl$LngLat;

    /**
     * Get southwest corner 
     */
    getSouthWest(): mapboxgl$LngLat;

    /**
     * Get northeast corner 
     */
    getNorthEast(): mapboxgl$LngLat;

    /**
     * Get northwest corner 
     */
    getNorthWest(): mapboxgl$LngLat;

    /**
     * Get southeast corner 
     */
    getSouthEast(): mapboxgl$LngLat;

    /**
     * Get west edge longitude 
     */
    getWest(): number;

    /**
     * Get south edge latitude 
     */
    getSouth(): number;

    /**
     * Get east edge longitude 
     */
    getEast(): number;

    /**
     * Get north edge latitude 
     */
    getNorth(): number;

    /**
     * Returns a LngLatBounds as an array 
     */
    toArray(): number[][];

    /**
     * Return a LngLatBounds as a string 
     */
    toString(): string;

    /**
     * Convert an array to a LngLatBounds object, or return an existing LngLatBounds object unchanged. 
     */
    convert(input: mapboxgl$LngLatBounds | number[] | number[][]): mapboxgl$LngLatBounds
}


/**
 * Point
 */
declare
export class Point {
    constructor(options?: Object): this;
    clone(): mapboxgl$Point;
    add(p: number): mapboxgl$Point;
    sub(p: number): mapboxgl$Point;
    mult(k: number): mapboxgl$Point;
    div(k: number): mapboxgl$Point;
    rotate(a: number): mapboxgl$Point;
    matMult(m: number): mapboxgl$Point;
    unit(): mapboxgl$Point;
    perp(): mapboxgl$Point;
    round(): mapboxgl$Point;
    mag(): number;
    equals(): boolean;
    dist(): number;
    distSqr(): number;
    angle(): number;
    angleTo(): number;
    angleWidth(): number;
    angleWidthSep(): number
}

declare
export class Marker {
    constructor(element?: HTMLElement, options?: {
        offset?: mapboxgl$Point | number[]
    }): this;
    addTo(map: mapboxgl$Map): this;
    remove(): this;
    getLngLat(): mapboxgl$LngLat;
    setLngLat(lngLat: mapboxgl$LngLat | number[]): this;
    setPopup(popup?: mapboxgl$Popup): this;
    getPopup(): mapboxgl$Popup;
    togglePopup(): this
}


/**
 * Evented
 */
declare
export class Evented {
    on(type: string, listener: Function): this;
    off(type?: string | any, listener?: Function): this;
    once(type: string, listener: Function): this;
    fire(type: string, data?: mapboxgl$EventData | Object): this;
    listens(type: string): boolean
}


/**
 * StyleOptions
 */
declare
export interface mapboxgl$StyleOptions {
    transition?: boolean
}


/**
 * EventData
 */
declare
export class EventData {
    type: string;
    target: mapboxgl$Map;
    originalEvent: Event;
    point: mapboxgl$Point;
    lngLat: mapboxgl$LngLat
}

declare
export class MapMouseEvent {
    type: string;
    target: mapboxgl$Map;
    originalEvent: MouseEvent;
    point: mapboxgl$Point;
    lngLat: mapboxgl$LngLat
}

declare
export class MapTouchEvent {
    type: string;
    target: mapboxgl$Map;
    originalEvent: TouchEvent;
    point: mapboxgl$Point;
    lngLat: mapboxgl$LngLat;
    points: mapboxgl$Point[];
    lngLats: mapboxgl$LngLat[]
}

declare
export class MapBoxZoomEvent {
    originalEvent: MouseEvent;
    boxZoomBounds: mapboxgl$LngLatBounds
}


/**
 * AnimationOptions
 */
declare
export interface mapboxgl$AnimationOptions {

    /**
     * Number in milliseconds 
     */
    duration?: number,
        easing?: Function,

        /**
         * point, origin of movement relative to map center 
         */
        offset?: mapboxgl$Point | number[],

        /**
         * When set to false, no animation happens 
         */
        animate?: boolean
}


/**
 * CameraOptions
 */
declare
export interface mapboxgl$CameraOptions {

    /**
     * Map center 
     */
    center?: mapboxgl$LngLat | number[],

        /**
         * Map zoom level 
         */
        zoom?: number,

        /**
         * Map rotation bearing in degrees counter-clockwise from north 
         */
        bearing?: number,

        /**
         * Map angle in degrees at which the camera is looking at the ground 
         */
        pitch?: number,

        /**
         * If zooming, the zoom center (defaults to map center) 
         */
        around?: mapboxgl$LngLat | number[]
}


/**
 * FlyToOptions
 */
declare
export type mapboxgl$FlyToOptions = {
    curve?: number,
    minZoom?: number,
    speed?: number,
    screenSpeed?: number,
    easing?: Function
} & mapboxgl$AnimationOptions & mapboxgl$CameraOptions



/**
 * MapEvent
 */
declare
export interface mapboxgl$MapEvent {
    webglcontextlost?: {
            originalEvent: WebGLContextEvent
        },
        webglcontextrestored?: {
            originalEvent: WebGLContextEvent
        },
        render?: void,
        contextmenu?: {
            data: mapboxgl$MapMouseEvent
        },
        dblclick?: {
            data: mapboxgl$MapMouseEvent
        },
        click?: {
            data: mapboxgl$MapMouseEvent
        },
        touchcancel?: {
            data: mapboxgl$MapTouchEvent
        },
        touchmove?: {
            data: mapboxgl$MapTouchEvent
        },
        touchend?: {
            data: mapboxgl$MapTouchEvent
        },
        touchstart?: {
            data: mapboxgl$MapTouchEvent
        },
        mousemove?: {
            data: mapboxgl$MapMouseEvent
        },
        mouseup?: {
            data: mapboxgl$MapMouseEvent
        },
        mousedown?: {
            data: mapboxgl$MapMouseEvent
        },
        moveend?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        move?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        movestart?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        mouseout?: {
            data: mapboxgl$MapMouseEvent
        },
        load?: void,
        zoomend?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        zoom?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        zoomstart?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        boxzoomcancel?: {
            data: mapboxgl$MapBoxZoomEvent
        },
        boxzoomstart?: {
            data: mapboxgl$MapBoxZoomEvent
        },
        boxzoomend?: {
            data: mapboxgl$MapBoxZoomEvent
        },
        rotate?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        rotatestart?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        rotateend?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        drag?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        dragend?: {
            data: mapboxgl$MapMouseEvent | mapboxgl$MapTouchEvent
        },
        pitch?: {
            data: mapboxgl$EventData
        }
}

declare
export interface mapboxgl$Layer {
    id: string,
        type?: "fill" |
        "line" |
        "symbol" |
        "circle" |
        "raster" |
        "background" |
        string,
        metadata?: any,
        ref?: string,
        source?: string,
        source - layer?: string,
        minzoom?: number,
        maxzoom?: number,
        interactive?: boolean,
        filter?: any[],
        layout?: mapboxgl$BackgroundLayout |
        mapboxgl$FillLayout |
        mapboxgl$LineLayout |
        mapboxgl$SymbolLayout |
        mapboxgl$RasterLayout |
        mapboxgl$CircleLayout,
        paint?: mapboxgl$BackgroundPaint |
        mapboxgl$FillPaint |
        mapboxgl$LinePaint |
        mapboxgl$SymbolPaint |
        mapboxgl$RasterPaint |
        mapboxgl$CirclePaint
}

declare
export interface mapboxgl$StyleFunction {
    stops: any[][],
        property?: string,
        base?: number,
        type?: "continuous" | "interval" | "categorical"
}

declare
export interface mapboxgl$BackgroundLayout {
    visibility?: "visible" | "none"
}

declare
export interface mapboxgl$BackgroundPaint {
    background - color?: string,
        background - pattern?: string,
        background - opacity?: number
}

declare
export interface mapboxgl$FillLayout {
    visibility?: "visible" | "none"
}

declare
export interface mapboxgl$FillPaint {
    fill - antialias?: boolean,
        fill - opacity?: number | mapboxgl$StyleFunction,
        fill - color?: string | mapboxgl$StyleFunction,
        fill - outline - color: string | mapboxgl$StyleFunction,
        fill - translate?: number[],
        fill - translate - anchor?: "map" | "viewport",
        fill - pattern?: "string"
}

declare
export interface mapboxgl$LineLayout {
    visibility?: "visible" | "none",
        line - cap?: "butt" | "round" | "square",
        line - join?: "bevel" | "round" | "miter",
        line - miter - limit?: number,
        line - round - limit?: number
}

declare
export interface mapboxgl$LinePaint {
    line - opacity?: number,
        line - color?: string | mapboxgl$StyleFunction,
        line - translate?: number[],
        line - translate - anchor?: "map" | "viewport",
        line - width?: number,
        line - gap - width?: number,
        line - offset?: number,
        line - blur?: number,
        line - dasharray?: number[],
        line - dasharray - transition?: mapboxgl$Transition,
        line - pattern?: string
}

declare
export interface mapboxgl$SymbolLayout {
    visibility?: "visible" | "none",
        symbol - placement?: "point" | "line",
        symbol - spacing?: number,
        symbol - avoid - edges?: boolean,
        icon - allow - overlap?: boolean,
        icon - ignore - placement?: boolean,
        icon - optional?: boolean,
        icon - rotation - alignment?: "map" | "viewport" | "auto",
        icon - size?: number,
        icon - text - fit?: "none" | "both" | "width" | "height",
        icon - text - fit - padding?: number[],
        icon - image?: string,
        icon - rotate?: number | mapboxgl$StyleFunction,
        icon - padding?: number,
        icon - keep - upright?: boolean,
        icon - offset?: number[],
        text - pitch - alignment?: "map" | "viewport" | "auto",
        text - rotation - alignment?: "map" | "viewport" | "auto",
        text - field?: string,
        text - font?: string | string[],
        text - size?: number,
        text - max - width?: number,
        text - line - height?: number,
        text - letter - spacing?: number,
        text - justify?: "left" | "center" | "right",
        text - anchor?: "center" |
        "left" |
        "right" |
        "top" |
        "bottom" |
        "top-left" |
        "top-right" |
        "bottom-left" |
        "bottom-right",
        text - max - angle?: number,
        text - rotate?: number,
        text - padding?: number,
        text - keep - upright?: boolean,
        text - transform?: "none" | "uppercase" | "lowercase",
        text - offset?: number[],
        text - allow - overlap?: boolean,
        text - ignore - placement?: boolean,
        text - optional?: boolean
}

declare
export interface mapboxgl$SymbolPaint {
    icon - opacity?: number,
        icon - color?: string,
        icon - halo - color?: string,
        icon - halo - width?: number,
        icon - halo - blur?: number,
        icon - translate?: number[],
        icon - translate - anchor?: "map" | "viewport",
        text - opacity?: number,
        text - color?: "string",
        text - halo - color?: "string",
        text - halo - width?: number,
        text - halo - blur?: number,
        text - translate?: number[],
        text - translate - anchor?: "map" | "viewport"
}

declare
export interface mapboxgl$RasterLayout {
    visibility?: "visible" | "none"
}

declare
export interface mapboxgl$RasterPaint {
    raster - opacity?: number,
        raster - hue - rotate?: number,
        raster - brightness - min?: number,
        raster - brightness - max?: number,
        raster - saturation?: number,
        raster - contrast?: number,
        raster - fade - duration?: number
}

declare
export interface mapboxgl$CircleLayout {
    visibility?: "visible" | "none"
}

declare
export interface mapboxgl$CirclePaint {
    circle - radius?: number | mapboxgl$StyleFunction,
        circle - radius - transition?: mapboxgl$Transition,
        circle - color?: number | mapboxgl$StyleFunction,
        circle - blur?: number | mapboxgl$StyleFunction,
        circle - opacity?: number | mapboxgl$StyleFunction,
        circle - translate?: number[],
        circle - translate - anchor?: "map" | "viewport",
        circle - pitch - scale?: "map" | "viewport"
}
declare module 'mapbox-gl' {
    declare module.exports: typeof mapboxgl
}