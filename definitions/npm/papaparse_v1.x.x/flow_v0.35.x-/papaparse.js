/**
 * Flowtype definitions for papaparse
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface PapaParse$Static {

    /**
     * Parse a csv string or a csv file
     */
    parse(csvString: string, config?: PapaParse$ParseConfig): PapaParse$ParseResult,
        parse(file: File, config?: PapaParse$ParseConfig): PapaParse$ParseResult,

        /**
         * Unparses javascript data objects and returns a csv string
         */
        unparse(data: Array<Object>, config?: PapaParse$UnparseConfig): string,
        unparse(data: Array<Array<any >> , config?: PapaParse$UnparseConfig): string,
        unparse(data: PapaParse$UnparseObject, config?: PapaParse$UnparseConfig): string,

        /**
         * Read-Only Properties
         */
        BAD_DELIMETERS: Array<string>,
        RECORD_SEP: string,
        UNIT_SEP: string,
        WORKERS_SUPPORTED: boolean,
        SCRIPT_PATH: string,

        /**
         * Configurable Properties
         */
        LocalChunkSize: string,
        RemoteChunkSize: string,
        DefaultDelimiter: string,

        /**
         * On Papa there are actually more classes exposed
         * but none of them are officially documented
        Since we can interact with the Parser from one of the callbacks
        I have included the API for this class.
        */
        Parser: PapaParse$ParserConstructor
}

declare interface PapaParse$ParseConfig {
    delimiter?: string,
        newline?: string,
        header?: boolean,
        dynamicTyping?: boolean,
        preview?: number,
        encoding?: string,
        worker?: boolean,
        comments?: boolean,
        download?: boolean,
        skipEmptyLines?: boolean,
        fastMode?: boolean,
        step(results: PapaParse$ParseResult, parser: PapaParse$Parser): void,
        complete(results: PapaParse$ParseResult, file?: File): void,
        error(error: PapaParse$ParseError, file?: File): void,
        chunk(results: PapaParse$ParseResult, parser: PapaParse$Parser): void,
        beforeFirstChunk(chunk: string): string | void
}

declare interface PapaParse$UnparseConfig {
    quotes: boolean,
        delimiter: string,
        newline: string
}

declare interface PapaParse$UnparseObject {
    fields: Array<any>,
        data: string | Array<any >
}

declare interface PapaParse$ParseError {
    type: string,
        code: string,
        message: string,
        row: number
}

declare interface PapaParse$ParseMeta {
    delimiter: string,
        linebreak: string,
        aborted: boolean,
        fields: Array<string>,
        truncated: boolean
}


/**
 * 
 * @interface  ParseResult

data: is an array of rows. If header is false, rows are arrays; otherwise they are objects of data keyed by the field name.
errors: is an array of errors
meta: contains extra information about the parse, such as delimiter used, the newline sequence, whether the process was aborted, etc. Properties in this object are not guaranteed to exist in all situations
*/
declare interface PapaParse$ParseResult {
    data: Array<any>,
        errors: Array<PapaParse$ParseError>,
        meta: PapaParse$ParseMeta
}


/**
 * Parser
 */
declare interface PapaParse$ParserConstructor {
    new(config: PapaParse$ParseConfig): PapaParse$Parser
}

declare interface PapaParse$Parser {
    parse(input: string, baseIndex: number, ignoreLastRow: boolean): any,
        abort(): void,
        getCharIndex(): number
}
declare
var Papa: PapaParse$Static;
declare module 'papaparse' {
    declare var Papa: PapaParse$Static;
    declare module.exports: typeof Papa
}