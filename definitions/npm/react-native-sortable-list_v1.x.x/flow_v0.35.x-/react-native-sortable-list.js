// @flow
/**
 * Flowtype definitions for react-native-sortable-list
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type ___SortableList$DataKey = string | number;

declare export type ___SortableList$DataValue = any;

declare type ___SortableList$DataByNumber = {
    [key: number]: ___SortableList$DataValue
};

declare type ___SortableList$DataByString = {
    [key: string]: ___SortableList$DataValue
};

declare export type ___SortableList$Data = ___SortableList$DataByNumber | ___SortableList$DataByString;

declare export interface ___SortableList$RowProps {
    active: boolean,
        data: ___SortableList$DataValue,
        key?: ___SortableList$DataKey,
        index?: number,
        disabled?: boolean
}

declare interface ___SortableList$SortableListProps {

    /**
     * data source
     */
    data: ___SortableList$Data,

        /**
         * an array of keys from data, the order of keys from the array will be used to initial rows order
         */
        order?: ___SortableList$DataKey[],

        /**
         * style of HOC
         */
        style?: React.ViewStyle,

        /**
         * these styles will be applied to the inner scroll view content container
         */
        contentContainerStyle?: React.ViewStyle,

        /**
         * when false, rows are not sortable. The default value is true.
         */
        sortingEnabled?: boolean,

        /**
         * when false, the content does not scrollable. The default value is true.
         */
        scrollEnabled?: boolean,

        /**
         * Takes a row key, row index, data entry from the data source and its statuses disabled,
         *   active and should return a renderable component to be rendered as the row.
         */
        renderRow: (props: ___SortableList$RowProps) => JSX.Element,

        /**
         * Called when rows were reordered, takes an array of rows keys of the next rows order.
         */
        onChangeOrder?: (nextOrder: ___SortableList$DataKey[]) => void,

        /**
         * Called when a row was activated (user long tapped).
         */
        onActivateRow?: (key: ___SortableList$DataKey) => void,

        /**
         * Called when the active row was released.
         */
        onReleaseRow?: (key: ___SortableList$DataKey) => void
}

declare export type ___SortableList$SortableListStatic = {}

declare export var SortableList: ___SortableList$SortableListStatic;

declare export type ___SortableList$SortableList = ___SortableList$SortableListStatic;
declare module 'react-native-sortable-list' {
    declare     export interface RowProps {
        active: boolean,
            data: ___SortableList$DataValue,
            key?: ___SortableList$DataKey,
            index?: number,
            disabled?: boolean
    }
    declare module.exports: typeof SortableList.SortableList
}