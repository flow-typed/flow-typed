// @flow
/**
 * Flowtype definitions for common-tags
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'common-tags' {
    declare type TemplateTag = (literals: string[], ...placeholders: any[]) => string;
    declare type TemplateTransformer = {
        onSubstitution?: (substitution: string, resultSoFar: string) => string,
        onEndResult?: (endResult: string) => string
    };
    declare     export var commaLists: TemplateTag;
    declare     export var commaListsAnd: TemplateTag;
    declare     export var commaListsOr: TemplateTag;
    declare     export var html: TemplateTag;
    declare     export var codeBlock: TemplateTag;
    declare     export var source: TemplateTag;
    declare     export var oneLine: TemplateTag;
    declare     export var oneLineTrim: TemplateTag;
    declare     export var oneLineCommaLists: TemplateTag;
    declare     export var oneLineCommaListsOr: TemplateTag;
    declare     export var oneLineCommaListsAnd: TemplateTag;
    declare     export var inlineLists: TemplateTag;
    declare     export var oneLineInlineLists: TemplateTag;
    declare     export var stripIndent: TemplateTag;
    declare     export var stripIndents: TemplateTag;
    declare     export var TemplateTag: {
        new(): TemplateTag,
        new(...transformers: TemplateTransformer[]): TemplateTag,
        new(transformers: TemplateTransformer[]): TemplateTag
    };
    declare     export var trimResultTransformer: (side?: "left" | "right") => TemplateTransformer;
    declare     export var stripIndentTransformer: (type?: "initial" | "all") => TemplateTransformer;
    declare     export var replaceResultTransformer: (replaceWhat: string, replaceWith: string) => TemplateTransformer;
    declare     export var inlineArrayTransformer: (opts?: {
        separator?: string,
        conjunction?: string
    }) => TemplateTransformer;
    declare     export var splitStringTransformer: (splitBy: string) => TemplateTransformer;
}