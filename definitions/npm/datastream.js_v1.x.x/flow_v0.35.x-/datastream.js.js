

declare module 'datastream.js' {
				declare class DataStream  {
		BIG_ENDIAN: boolean;
		LITTLE_ENDIAN: boolean;
		constructor(arrayBuffer: ArrayBuffer): this;
		constructor(arrayBuffer: ArrayBuffer, byteOffset: number): this;
		constructor(arrayBuffer: ArrayBuffer, byteOffset: number, endianness: boolean): this;
		save(filename: string): void;
		dynamicSize: boolean;
		byteLength: number;
		buffer: ArrayBuffer;
		byteOffset: number;
		dataView: Object;
		seek(pos: number): void;
		isEof(): boolean;
		mapInt32Array(length: number): Int32Array;
		mapInt32Array(length: number, e: boolean): Int32Array;
		mapInt16Array(length: number): Int16Array;
		mapInt16Array(length: number, e: boolean): Int16Array;
		mapInt8Array(length: number): Int8Array;
		mapUint32Array(length: number): Uint32Array;
		mapUint32Array(length: number, e: boolean): Uint32Array;
		mapUint16Array(length: number): Uint16Array;
		mapUint16Array(length: number, e: boolean): Uint16Array;
		mapUint8Array(length: number): Uint8Array;
		mapFloat64Array(length: number): Float64Array;
		mapFloat64Array(length: number, e: boolean): Float64Array;
		mapFloat32Array(length: number): Float32Array;
		mapFloat32Array(length: number, e: boolean): Float32Array;
		readInt32Array(length: number): Int32Array;
		readInt32Array(length: number, e: boolean): Int32Array;
		readInt16Array(length: number): Int16Array;
		readInt16Array(length: number, e: boolean): Int16Array;
		readInt8Array(length: number): Int8Array;
		readUint32Array(length: number): Uint32Array;
		readUint32Array(length: number, e: boolean): Uint32Array;
		readUint16Array(length: number): Uint16Array;
		readUint16Array(length: number, e: boolean): Uint16Array;
		readUint8Array(length: number): Uint8Array;
		readFloat64Array(length: number, e: boolean): Float64Array;
		readFloat64Array(length: number): Float64Array;
		readFloat32Array(length: number, e: boolean): Float32Array;
		readFloat32Array(length: number): Float32Array;
		writeInt32Array(arr: Int32Array, e: boolean): void;
		writeInt32Array(arr: Int32Array): void;
		writeInt16Array(arr: Int16Array, e: boolean): void;
		writeInt16Array(arr: Int16Array): void;
		writeInt8Array(arr: Int8Array): void;
		writeUint32Array(arr: Uint32Array, e: boolean): void;
		writeUint32Array(arr: Uint32Array): void;
		writeUint16Array(arr: Uint16Array, e: boolean): void;
		writeUint16Array(arr: Uint16Array): void;
		writeUint8Array(arr: Uint8Array): void;
		writeFloat64Array(arr: Float64Array): void;
		writeFloat64Array(arr: Float64Array, e: boolean): void;
		writeFloat32Array(arr: Float32Array): void;
		writeFloat32Array(arr: Float32Array, e: boolean): void;
		readInt32(): number;
		readInt32(e: boolean): number;
		readInt16(): number;
		readInt16(e: boolean): number;
		readInt8(): number;
		readUint32(): number;
		readUint32(e: boolean): number;
		readUint16(): number;
		readUint16(e: boolean): number;
		readUint8(): number;
		readFloat32(): number;
		readFloat32(e: boolean): number;
		readFloat64(): number;
		readFloat64(e: boolean): number;
		writeInt32(v: number): void;
		writeInt32(v: number, e: boolean): void;
		writeInt16(v: number): void;
		writeInt16(v: number, e: boolean): void;
		writeInt8(v: number): void;
		writeUint32(v: number): void;
		writeUint32(v: number, e: boolean): void;
		writeUint16(v: number): void;
		writeUint16(v: number, e: boolean): void;
		writeUint8(v: number): void;
		writeFloat32(v: number): void;
		writeFloat32(v: number, e: boolean): void;
		writeFloat64(v: number): void;
		writeFloat64(v: number, e: boolean): void;
		readStruct(structDefinition: any[]): Object;
		writeStruct(structDefinition: Object, struct: Object): void;
		readUCS2String(length: number): string;
		readUCS2String(length: number, endianness: boolean): string;
		writeUCS2String(str: string): void;
		writeUCS2String(str: string, endianness: boolean): void;
		writeUCS2String(str: string, endianness: boolean, lengthOverride: number): void;
		readString(length: number): string;
		readString(length: number, encoding: string): string;
		writeString(s: string): void;
		writeString(s: string, encoding: string): void;
		writeString(s: string, encoding: string, length: number): void;
		readCString(): string;
		readCString(length: number): string;
		writeCString(s: string): void;
		writeCString(s: string, length: number): void;
		readType(t: Object): Object;
		readType(t: Object, struct: Object): Object;
		writeType(t: Object, v: Object, struct: Object): void
	}

	
}