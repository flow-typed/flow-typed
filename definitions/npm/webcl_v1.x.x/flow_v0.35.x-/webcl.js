/**
 * Flowtype definitions for webcl
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Window {
    webcl: WEBCL$WebCL
}
declare
var WebCLEvent: {
    new(): WEBCL$WebCLEvent
};
declare type WEBCL$WebCLBuffer = {
    createSubBuffer(memFlags: MemFlagsBits, origin: number, sizeInBytes: number): WEBCL$WebCLBuffer
} & WEBCL$WebCLMemoryObject


declare interface WEBCL$WebCLCallback {
    (event: WEBCL$WebCLEvent): void
}

declare interface WEBCL$WebCLCommandQueue {
    enqueueCopyBuffer(
            srcBuffer: WEBCL$WebCLBuffer,
            dstBuffer: WEBCL$WebCLBuffer,
            srcOffset: number,
            dstOffset: number,
            numBytes: number,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueCopyBufferRect(
            srcBuffer: WEBCL$WebCLBuffer,
            dstBuffer: WEBCL$WebCLBuffer,
            srcOrigin: number[],
            dstOrigin: number[],
            region: number[],
            srcRowPitch: number,
            srcSlicePitch: number,
            dstRowPitch: number,
            dstSlicePitch: number,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueCopyImage(
            srcImage: WEBCL$WebCLImage,
            dstImage: WEBCL$WebCLImage,
            srcOrigin: number[],
            dstOrigin: number[],
            region: number[],
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueCopyImageToBuffer(
            srcImage: WEBCL$WebCLImage,
            dstBuffer: WEBCL$WebCLBuffer,
            srcOrigin: number[],
            srcRegion: number[],
            dstOffset: number,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueCopyBufferToImage(
            srcBuffer: WEBCL$WebCLBuffer,
            dstImage: WEBCL$WebCLImage,
            srcOffset: number,
            dstOrigin: number[],
            dstRegion: number[],
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueReadBuffer(
            buffer: WEBCL$WebCLBuffer,
            blockingRead: boolean,
            bufferOffset: number,
            numBytes: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueReadBufferRect(
            buffer: WEBCL$WebCLBuffer,
            blockingRead: boolean,
            bufferOrigin: number[],
            hostOrigin: number[],
            region: number[],
            bufferRowPitch: number,
            bufferSlicePitch: number,
            hostRowPitch: number,
            hostSlicePitch: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueReadImage(
            image: WEBCL$WebCLImage,
            blockingRead: boolean,
            origin: number[],
            region: number[],
            hostRowPitch: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueWriteBuffer(
            buffer: WEBCL$WebCLBuffer,
            blockingWrite: boolean,
            bufferOffset: number,
            numBytes: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueWriteBufferRect(
            buffer: WEBCL$WebCLBuffer,
            blockingWrite: boolean,
            bufferOrigin: number[],
            hostOrigin: number[],
            region: number[],
            bufferRowPitch: number,
            bufferSlicePitch: number,
            hostRowPitch: number,
            hostSlicePitch: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueWriteImage(
            image: WEBCL$WebCLImage,
            blockingWrite: boolean,
            origin: number[],
            region: number[],
            hostRowPitch: number,
            hostPtr: ArrayBufferView,
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueNDRangeKernel(
            kernel: WEBCL$WebCLKernel,
            workDim: number,
            globalWorkOffset: number[],
            globalWorkSize: number[],
            localWorkSize?: number[],
            eventWaitList?: WEBCL$WebCLEvent[],
            event?: WEBCL$WebCLEvent): void,
        enqueueMarker(event: WEBCL$WebCLEvent): void,
        enqueueBarrier(): void,
        enqueueWaitForEvents(eventWaitList: WEBCL$WebCLEvent[]): void,
        finish(whenFinished?: WEBCL$WebCLCallback): void,
        flush(): void,
        getInfo(name: ContextProperties): any,
        release(): void
}

declare interface WEBCL$WebCLContext {
    createBuffer(
            memFlags: MemFlagsBits,
            sizeInBytes: number,
            hostPtr?: ArrayBufferView): WEBCL$WebCLBuffer,
        createCommandQueue(
            device: WEBCL$WebCLDevice,
            properties?: CommandQueueProperties): WEBCL$WebCLCommandQueue,
        createImage(
            memFlags: MemFlagsBits,
            descriptor: WEBCL$WebCLImageDescriptor,
            hostPtr?: ArrayBufferView): WEBCL$WebCLImage,
        createProgram(source: string): WEBCL$WebCLProgram,
        createSampler(
            normalizedCoords: number,
            addressingMode: AddressingMode,
            filterMode: FilterMode): WEBCL$WebCLSampler,
        createUserEvent(): WEBCL$WebCLUserEvent,
        getInfo(name: ContextInfo): any,
        getSupportedImageFormats(memFlags?: MemFlagsBits): WEBCL$WebCLImageDescriptor[],
        release(): void,
        releaseAll(): void
}

declare interface WEBCL$WebCLDevice {
    getInfo(name: DeviceInfo): any,
        getSupportedExtensions(): string[],
        enableExtension(extensionName: string): boolean
}

declare interface WEBCL$WebCLEvent {
    getInfo(name: EventInfo): any,
        getProfilingInfo(name: ProfilingInfo): number,
        setCallback(
            commandExecCallbackType: CommandExecutionStatus,
            notify: WEBCL$WebCLCallback): void,
        release(): void
}

declare type WEBCL$WebCLException = {
    name: string,
    message: string
} & DOMException


declare type WEBCL$WebCLImage = {
    getInfo(): WEBCL$WebCLImageDescriptor
} & WEBCL$WebCLMemoryObject


declare interface WEBCL$WebCLImageDescriptor {
    channelOrder: ChannelOrder,
        channelType: ChannelType,
        width: number,
        height: number,
        rowPitch: number
}

declare interface WEBCL$WebCLKernel {
    getInfo(name: KernelInfo): any,
        getWorkGroupInfo(device: WEBCL$WebCLDevice, name: KernelWorkGroupInfo): any,
        getArgInfo(index: number): WEBCL$WebCLKernelArgInfo,
        setArg(index: number, buffer: WEBCL$WebCLBuffer): void,
        setArg(index: number, image: WEBCL$WebCLImage): void,
        setArg(index: number, value: WEBCL$WebCLSampler): void,
        setArg(index: number, value: ArrayBufferView): void,
        release(): void
}

declare interface WEBCL$WebCLKernelArgInfo {
    name: string,
        typeName: string,
        addressQualifier: string,
        accessQualifier: string
}

declare interface WEBCL$WebCLMemoryObject {
    getInfo(name: MemInfo): any,
        release(): void
}

declare interface WEBCL$WebCLPlatform {
    getInfo(name: PlatformInfo): any,
        getDevices(deviceType?: DeviceTypeBits): WEBCL$WebCLDevice[],
        getSupportedExtensions(): string[],
        enableExtension(extensionName: string): boolean
}

declare interface WEBCL$WebCLProgram {
    getInfo(name: ProgramInfo): any,
        getBuildInfo(device: WEBCL$WebCLDevice, name: ProgramBuildInfo): any,
        build(
            devices?: WEBCL$WebCLDevice[],
            options?: string,
            whenFinished?: WEBCL$WebCLCallback): void,
        createKernel(kernelName: string): WEBCL$WebCLKernel,
        createKernelsInProgram(): WEBCL$WebCLKernel[],
        release(): void
}

declare interface WEBCL$WebCLSampler {
    getInfo(name: SamplerInfo): any,
        release(): void
}

declare type WEBCL$WebCLUserEvent = {
    setStatus(executionStatus: CommandExecutionStatus): void
} & WEBCL$WebCLEvent


declare interface WEBCL$WebCL {
    getPlatforms(): WEBCL$WebCLPlatform[],
        createContext(deviceType?: DeviceTypeBits): WEBCL$WebCLContext,
        createContext(platform: WEBCL$WebCLPlatform, deviceType?: DeviceTypeBits): WEBCL$WebCLContext,
        createContext(device: WEBCL$WebCLDevice): WEBCL$WebCLContext,
        createContext(devices: WEBCL$WebCLDevice[]): WEBCL$WebCLContext,
        getSupportedExtensions(): string[],
        enableExtension(extensionName: string): boolean,
        waitForEvents(eventWaitList: WEBCL$WebCLEvent[], whenFinished?: WEBCL$WebCLCallback): void,
        releaseAll(): void
}