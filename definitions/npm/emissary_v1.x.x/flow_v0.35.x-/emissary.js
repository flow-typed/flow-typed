/**
 * Flowtype definitions for emissary
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type Emissary$IEmitterStatic = {
    new(): Emissary$IEmitter
}

declare interface Emissary$IEmitter {
    on(eventNames: string, handler: Function): any,
        once(eventName: string, handler: Function): any,
        signal(eventName: string): void,
        behavior(eventName: string, initialValue: any): void,
        emit(eventName: string, ...args: any[]): void,
        off(eventNames: string, handler: Function): void,
        pauseEvents(eventNames: string): void,
        resumeEvents(eventNames: string): void,
        incrementSubscriptionCount(eventName: string): number,
        decrementSubscriptionCount(eventName: string): number,
        getSubscriptionCount(eventName: string): number,
        hasSubscriptions(eventName: string): boolean
}

declare type Emissary$ISubscriberStatic = {
    new(): Emissary$ISubscriber
}

declare interface Emissary$ISubscriber {
    subscribeWith(eventEmitter: any, methodName: string, args: any): Emissary$ISubscription,
        addSubscription(subscription: any): Emissary$ISubscription,
        subscribe(eventEmitterOrSubscription: any, ...args: any[]): Emissary$ISubscription,
        subscribeToCommand(eventEmitter: any, ...args: any[]): Emissary$ISubscription,
        unsubscribe(object?: any): any
}

declare interface Emissary$ISubscriptionStatic {
    new(emitter: any, eventNames: string, handler: Function): Emissary$ISubscription
}

declare type Emissary$ISubscription = {
    cancelled: boolean,
    off(): any
} & Emissary$IEmitter
declare module 'emissary' {
    declare var Emitter: Emissary$IEmitterStatic;
    declare var Subscriber: Emissary$ISubscriberStatic;
    declare var Signal: Function;
    declare var Behavior: Function;
    declare var combine: Function;
}