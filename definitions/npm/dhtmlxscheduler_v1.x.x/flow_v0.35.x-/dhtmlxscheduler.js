

declare module 'dhtmlxscheduler' {
	declare type SchedulerEventName = "onAfterEventDisplay" | "onAfterFolderToggle" | "onAfterLightbox" | "onAfterSchedulerResize" | "onBeforeCollapse" | "onBeforeDrag" | "onBeforeEventChanged" | "onBeforeEventCreated" | "onBeforeEventDelete" | "onBeforeEventDisplay" | "onBeforeEventDragIn" | "onBeforeEventDragOut" | "onBeforeExpand" | "onBeforeExternalDragIn" | "onBeforeFolderToggle" | "onBeforeLightbox" | "onBeforeSectionRender" | "onBeforeTodayDisplayed" | "onBeforeTooltip" | "onBeforeViewChange" | "onCellClick" | "onCellDblClick" | "onClearAll" | "onClick" | "onCollapse" | "onConfirmedBeforeEventDelete" | "onContextMenu" | "onDblClick" | "onDragEnd" | "onEmptyClick" | "onEventAdded" | "onEventCancel" | "onEventChanged" | "onEventCollision" | "onEventCopied" | "onEventCreated" | "onEventCut" | "onEventDeleted" | "onEventDrag" | "onEventDragIn" | "onEventDragOut" | "onEventDropOut" | "onEventIdChange" | "onEventLoading" | "onEventPasted" | "onEventSave" | "onExpand" | "onExternalDragIn" | "onLightbox" | "onLightboxButton" | "onLimitViolation" | "onLoadError" | "onLocationError" | "onMouseDown" | "onMouseMove" | "onOptionsLoad" | "onOptionsLoadFinal" | "onOptionsLoadStart" | "onSaveError" | "onScaleAdd" | "onScaleDblClick" | "onSchedulerReady" | "onSchedulerResize" | "onTemplatesReady" | "onTimelineCreated" | "onViewChange" | "onViewMoreClick" | "onXLE" | "onXLS" | "onXScaleClick" | "onXScaleDblClick" | "onYScaleClick" | "onYScaleDblClick";

	declare interface SchedulerCallback {
		(...args: any[]): any
	}

	declare interface SchedulerFilterCallback {
		(id: string | number, event: any): boolean
	}

	declare interface SchedulerTemplates {
		agenda_date(start: Date, end: Date): string,
		agenda_text(start: Date, end: Date, event: any): string,
		agenda_time(start: Date, end: Date, event: any): string,
		api_date(date: Date): string,
		calendar_date(date: Date): string,
		calendar_month(date: Date): string,
		calendar_scale_date(date: Date): string,
		calendar_time(date: Date): string,
		day_date(date: Date): string,
		day_scale_date(date: Date): string,
		drag_marker_class(start: Date, end: Date, ev: any): void,
		drag_marker_content(start: Date, end: Date, ev: any): void,
		event_bar_date(start: Date, end: Date, event: any): string,
		event_bar_text(start: Date, end: Date, event: any): string,
		event_class(start: Date, end: Date, ev: any): string,
		event_date(date: Date): string,
		event_header(start: Date, end: Date, event: any): string,
		event_text(start: Date, end: Date, event: any): string,
		hour_scale(date: Date): string,
		load_format(date: Date): string,
		map_date(start: Date, end: Date): string,
		map_text(start: Date, end: Date, event: any): string,
		map_time(start: Date, end: Date, event: any): string,
		marker_date(start: Date, end: Date, event: any): string,
		marker_text(start: Date, end: Date, event: any): string,
		month_date(date: Date): string,
		month_date_class(date: Date): string,
		month_day(date: Date): string,
		month_events_link(date: Date, count: number): string,
		month_scale_date(date: Date): string,
		quick_info_content(start: Date, end: Date, event: any): string,
		quick_info_date(start: Date, end: Date, event: any): string,
		quick_info_title(start: Date, end: Date, event: any): string,
		time_picker(): string,
		tooltip_date_format(date: Date): string,
		tooltip_text(start: Date, end: Date, event: any): string,
		week_agenda_event_text(start: Date, end: Date, event: any, cellDate: Date, pos: string): string,
		week_agenda_scale_date(date: Date): string,
		week_date(start: Date, end: Date): string,
		week_date_class(start: Date, end: Date, event: any): string,
		week_scale_date(date: Date): string,
		xml_date(date: Date): Date,
		xml_format(date: Date): string,
		year_date(date: Date): string,
		year_month(date: Date): string,
		year_scale_date(date: Date): string,
		year_tooltip(start: Date, end: Date, event: any): string,
		lightbox_header(start: Date, end: Date, event: any): string,
		grid_date(start: Date, end: Date): string,
		grid_full_date(start: Date, end: Date, ev: any): string,
		grid_single_date(date: Date): string,
		grid_field(field_name: string, event: any): string,
		timeline_cell_value(evs: any[], date: Date): string,
		timeline_cell_class(evs: any[], date: Date, section: any): string,
		timeline_scalex_class(date: Date): string,
		timeline_second_scalex_class(date: Date): string,
		timeline_scaley_class(key: string, label: string, section: any): string,
		timeline_scale_label(key: string, label: string, section: any): string,
		timeline_tooltip(start: Date, end: Date, event: any): string,
		timeline_date(date1: Date, date2: Date): string,
		timeline_scale_date(date: Date): string,
		timeline_second_scale_date(date: Date): string,
		units_date(date: Date): string,
		units_scale_text(key: string, label: string, unit: any): string
	}

	declare interface SchedulerConfigOptions {
		active_link_view: string,
		agenda_end: Date,
		agenda_start: Date,
		ajax_error: string | boolean,
		all_timed: boolean | string,
		api_date: string,
		auto_end_date: boolean,
		buttons_left: any[],
		buttons_right: any[],
		cascade_event_count: number,
		cascade_event_display: boolean,
		cascade_event_margin: number,
		check_limits: boolean,
		collision_limit: number,
		container_autoresize: boolean,
		day_date: string,
		dblclick_create: boolean,
		default_date: string,
		delay_render: number,
		details_on_create: boolean,
		details_on_dblclick: boolean,
		display_marked_timespans: boolean,
		displayed_event_color: string,
		displayed_event_text_color: string,
		drag_create: boolean,
		drag_highlight: boolean,
		drag_in: boolean,
		drag_lightbox: boolean,
		drag_move: boolean,
		drag_out: boolean,
		drag_resize: boolean,
		edit_on_create: boolean,
		event_duration: number,
		first_hour: number,
		fix_tab_position: boolean,
		full_day: boolean,
		highlight_displayed_event: boolean,
		hour_date: string,
		hour_size_px: number,
		icons_edit: any[],
		icons_select: any[],
		include_end_by: boolean,
		key_nav: boolean,
		last_hour: number,
		left_border: boolean,
		lightbox: any,
		lightbox_recurring: string,
		limit_drag_out: boolean,
		limit_end: Date,
		limit_start: Date,
		limit_time_select: boolean,
		limit_view: boolean,
		load_date: string,
		map_end: Date,
		map_error_position: any,
		map_infowindow_max_width: number,
		map_initial_position: any,
		map_initial_zoom: number,
		map_resolve_event_location: boolean,
		map_resolve_user_location: boolean,
		map_start: Date,
		map_type: any,
		map_zoom_after_resolve: number,
		mark_now: boolean,
		max_month_events: number,
		minicalendar: any,
		month_date: string,
		month_day: string,
		month_day_min_height: number,
		multi_day: boolean,
		multi_day_height_limit: number | boolean,
		multisection: boolean,
		multisection_shift_all: boolean,
		now_date: Date,
		occurrence_timestamp_in_utc: boolean,
		positive_closing: boolean,
		preserve_length: boolean,
		preserve_scroll: boolean,
		prevent_cache: boolean,
		quick_info_detached: boolean,
		readonly: boolean,
		readonly_form: boolean,
		recurring_workdays: any[],
		repeat_date: string,
		repeat_precise: boolean,
		resize_month_events: boolean,
		resize_month_timed: boolean,
		scroll_hour: number,
		section_delemiter: string,
		select: boolean,
		separate_short_events: boolean,
		server_utc: boolean,
		show_loading: boolean,
		show_quick_info: boolean,
		start_on_monday: boolean,
		time_step: number,
		touch: boolean | string,
		touch_drag: number | boolean,
		touch_tip: boolean,
		touch_tooltip: boolean,
		update_render: boolean,
		use_select_menu_space: boolean,
		week_date: string,
		wide_form: boolean,
		xml_date: string,
		year_x: number,
		year_y: number
	}

	declare interface SchedulerDateHelpers {
		add(origin: Date, count: number, unit: string): Date,
		copy(origin: Date): Date,
		date_part(origin: Date): Date,
		time_part(origin: Date): Date,
		day_start(origin: Date): Date,
		month_start(origin: Date): Date,
		week_start(origin: Date): Date,
		year_start(origin: Date): Date,
		getISOWeek(origin: Date): number,
		getUTCISOWeek(origin: Date): number,
		date_to_str(format: string): any,
		str_to_date(format: string): any,
		convert_to_utc(origin: Date): Date,
		to_fixed(value: number): string
	}

	declare interface SchedulerHotkeys {
		edit_save: number,
		edit_cancel: number
	}

	declare interface SchedulerLocaleDate {
		month_full: string[],
		month_short: string[],
		day_full: string[],
		day_short: string[]
	}

	declare interface SchedulerLocaleLabels {
		dhx_cal_today_button: string,
		day_tab: string,
		week_tab: string,
		month_tab: string,
		new_event: string,
		icon_save: string,
		icon_cancel: string,
		icon_details: string,
		icon_edit: string,
		icon_delete: string,
		confirm_closing: string,
		confirm_deleting: string,
		section_description: string,
		section_time: string
	}

	declare interface SchedulerLocale {
		date: SchedulerLocaleDate,
		labels: SchedulerLocaleLabels
	}

	declare interface SchedulerSizes {
		bar_height: number,
		editor_width: number,
		lightbox_additional_height: number,
		map_date_width: number,
		map_description_width: number,
		margin_left: number,
		margin_top: number,
		menu_width: number,
		min_event_height: number,
		month_scale_height: number,
		nav_height: number,
		scale_height: number,
		scale_width: number,
		scroll_width: number
	}

	declare interface SchedulerEnterprise {
		getSchedulerInstance(): SchedulerStatic
	}

	declare interface SchedulerStatic {
		templates: SchedulerTemplates,
		config: SchedulerConfigOptions,
		date: SchedulerDateHelpers,
		keys: SchedulerHotkeys,
		skin: String,
		version: String,
		xy: SchedulerSizes,
		locale: SchedulerLocale,
		filter_day: SchedulerFilterCallback,
		filter_week: SchedulerFilterCallback,
		filter_month: SchedulerFilterCallback,
		filter_year: SchedulerFilterCallback,
		filter_agenda: SchedulerFilterCallback,
		filter_timeline: SchedulerFilterCallback,
		filter_units: SchedulerFilterCallback,
		filter_grid: SchedulerFilterCallback,
		deleteMarkedTimespan(),
		deleteMarkedTimespan(config: any),
		addEvent(event: any): string,
		addEventNow(event: any): string,
		addMarkedTimespan(config: any): number,
		addSection(section: any, parent_id: string): boolean,
		attachEvent(name: SchedulerEventName, handler: SchedulerCallback): string,
		backbone(events: any): void,
		blockTime(date: Date | number, time_points: any[], items?: any): void,
		callEvent(name: string, params: any[]): boolean,
		changeEventId(id: string, new_id: string): void,
		checkCollision(event: any): boolean,
		checkEvent(name: SchedulerEventName): boolean,
		checkInMarkedTimespan(event: any, timespan: string): boolean,
		checkLimitViolation(event: any): boolean,
		clearAll(): void,
		closeAllSections(): void,
		closeSection(section_id: string): void,
		collapse(): void,
		createGridView(config: any): void,
		createTimelineView(config: any): void,
		createUnitsView(config: any): void,
		deleteAllSections(): void,
		deleteEvent(id: string | number): void,
		deleteMarkedTimespan(id: string): void,
		deleteSection(section_id: string): boolean,
		destroyCalendar(name?: any): void,
		detachEvent(id: string): void,
		edit(id: string): void,
		editStop(id: string): void,
		endLightbox(mode: boolean, box?: HTMLElement): void,
		expand(): void,
		formSection(name: string): any,
		getActionData(e: Event): any,
		getEvent(event_id: string | number): any,
		getEventEndDate(id: string | number): Date,
		getEventStartDate(id: string | number): Date,
		getEventText(id: string | number): string,
		getEvents(from?: Date, to?: Date): any,
		getLabel(property: string, key: string | number): any,
		getLightbox(): HTMLElement,
		getRecDates(id: string, number: number): any,
		getRenderedEvent(id: string): HTMLElement,
		getSection(section_id: string): any,
		getState(): any,
		getUserData(id: string, name: string): any,
		hideCover(box?: HTMLElement): void,
		hideQuickInfo(): void,
		highlightEventPosition(event: any): void,
		init(container: string | HTMLElement, date?: Date, view?: string): void,
		invertZones(zones: any[]): void,
		isCalendarVisible(): boolean | HTMLElement,
		isOneDayEvent(event: any): boolean,
		isViewExists(name: string): boolean,
		linkCalendar(calendar: any, shift: SchedulerCallback): void,
		load(url: string, type?: string, callback?: SchedulerCallback): void,
		markCalendar(calendar: any, date: Date, css: string): void,
		markTimespan(config: any): void,
		openAllSections(): void,
		openSection(section_id: string): void,
		parse(data: any, type?: string): void,
		renderCalendar(config: any): void,
		renderEvent(container: HTMLElement, event: any): boolean,
		resetLightbox(): void,
		scrollUnit(step: number): void,
		select(id: string): void,
		serverList(list_name: string, options?: any[]): void,
		setCurrentView(date?: Date, view?: string): void,
		setEvent(id: string | number, event: any): void,
		setEventEndDate(id: string, date: Date): void,
		setEventStartDate(id: string, date: Date): void,
		setEventText(id: string, text: string): void,
		setLightboxSize(): void,
		setLoadMode(mode: string): void,
		setUserData(id: string, name: string, value: any): void,
		showCover(box?: HTMLElement): void,
		showEvent(id: string, view?: string): void,
		showLightbox(id: string): void,
		showQuickInfo(id: string): void,
		startLightbox(id: string, box: HTMLElement): void,
		toICal(header?: string): string,
		toJSON(): string,
		toPDF(url: string, mode?: string): void,
		toPDFRange(from: Date, to: Date, view: string, path: string, color: string): void,
		toXML(): string,
		uid(): void,
		unblockTime(days: any, zones?: any[], sections?: any): void,
		unmarkCalendar(calendar: any, date: Date, css: string): void,
		unmarkTimespan(divs: HTMLElement | any[]): void,
		unselect(id?: string): void,
		updateCalendar(calendar: any, new_date: Date): void,
		updateCollection(collection: string, options: any[]): boolean,
		updateEvent(id: string): void,
		updateView(date: Date, view: string): void
	}

			
}