/**
 * Flowtype definitions for hystrixjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface HystrixJS$HystrixProperties {
    hystrix.force.circuit.open?: boolean,
        hystrix.force.circuit.closed?: boolean,
        hystrix.circuit.sleepWindowInMilliseconds?: number,
        hystrix.circuit.errorThresholdPercentage?: number,
        hystrix.circuit.volumeThreshold?: number,
        hystrix.circuit.volumeThreshold.forceOverride?: boolean,
        hystrix.circuit.volumeThreshold.override?: number,
        hystrix.execution.timeoutInMilliseconds?: number,
        hystrix.metrics.statistical.window.timeInMilliseconds?: number,
        hystrix.metrics.statistical.window.bucketsNumber?: number,
        hystrix.metrics.percentile.window.timeInMilliseconds?: number,
        hystrix.metrics.percentile.window.bucketsNumber?: number,
        hystrix.request.volume.rejectionThreshold?: number
}

declare interface HystrixJS$HystrixConfig {
    metricsPercentileWindowBuckets(): number,
        circuitBreakerForceClosed(): boolean,
        circuitBreakerForceOpened(): boolean,
        circuitBreakerSleepWindowInMilliseconds(): number,
        circuitBreakerErrorThresholdPercentage(): number,
        circuitBreakerRequestVolumeThreshold(): number,
        circuitBreakerRequestVolumeThresholdForceOverride(): boolean,
        circuitBreakerRequestVolumeThresholdOverride(): number,
        executionTimeoutInMilliseconds(): number,
        metricsStatisticalWindowBuckets(): number,
        metricsStatisticalWindowInMilliseconds(): number,
        metricsPercentileWindowInMilliseconds(): number,
        metricsPercentileWindowBuckets(): number,
        requestVolumeRejectionThreshold(): number,
        resetProperties(): void,
        init(properties: HystrixJS$HystrixProperties): void
}

declare interface HystrixJS$Command {
    execute(...args: any[]): Q.Promise<any >
}

declare interface HystrixJS$CommandBuilder {
    circuitBreakerSleepWindowInMilliseconds(value: number): HystrixJS$CommandBuilder,
        errorHandler(value: (error: any) => boolean): HystrixJS$CommandBuilder,
        timeout(value: number): HystrixJS$CommandBuilder,
        circuitBreakerRequestVolumeThreshold(value: number): HystrixJS$CommandBuilder,
        requestVolumeRejectionThreshold(value: number): HystrixJS$CommandBuilder,
        circuitBreakerForceOpened(value: boolean): HystrixJS$CommandBuilder,
        circuitBreakerForceClosed(value: boolean): HystrixJS$CommandBuilder,
        statisticalWindowNumberOfBuckets(value: number): HystrixJS$CommandBuilder,
        statisticalWindowLength(value: number): HystrixJS$CommandBuilder,
        percentileWindowNumberOfBuckets(value: number): HystrixJS$CommandBuilder,
        percentileWindowLength(value: number): HystrixJS$CommandBuilder,
        circuitBreakerErrorThresholdPercentage(value: number): HystrixJS$CommandBuilder,
        run(value: (args: any) => Q.Promise<any>): HystrixJS$CommandBuilder,
        fallbackTo(value: (...args: any[]) => Q.Promise<any>): HystrixJS$CommandBuilder,
        context(value: any): HystrixJS$CommandBuilder,
        build(): HystrixJS$Command
}

declare interface HystrixJS$CommandFactory {
    getOrCreate(commandKey: string, commandGroup?: string): HystrixJS$CommandBuilder,
        resetCache(): void
}

declare interface HystrixJS$HealthCounts {
    totalCount: number,
        errorCount: number,
        errorPercentage: number
}

declare interface HystrixJS$CommandMetrics {
    markSuccess(): void,
        markRejected(): void,
        markFailure(): void,
        markTimeout(): void,
        markShortCircuited(): void,
        incrementExecutionCount(): void,
        decrementExecutionCount(): void,
        getCurrentExecutionCount(): number,
        addExecutionTime(value: number): void,
        getRollingCount(type: any): number,
        getExecutionTime(percentile: any): number,
        getHealthCounts(): HystrixJS$HealthCounts,
        reset(): void
}

declare interface HystrixJS$MetricsProperties {
    commandKey: string,
        commandGroup: string,
        statisticalWindowTimeInMilliSeconds?: number,
        statisticalWindowNumberOfBuckets?: number,
        percentileWindowTimeInMilliSeconds?: number,
        percentileWindowNumberOfBuckets?: number
}

declare interface HystrixJS$MetricsFactory {
    getOrCreate(config: HystrixJS$MetricsProperties): HystrixJS$CommandMetrics,
        resetCache(): void,
        getAllMetrics(): Array<HystrixJS$CommandMetrics >
}

declare interface HystrixJS$CirctuiBreakerConfig {
    circuitBreakerSleepWindowInMilliseconds: number,
        commandKey: string,
        circuitBreakerErrorThresholdPercentage: number,
        circuitBreakerRequestVolumeThreshold: number,
        commandGroup: string,
        circuitBreakerForceClosed: boolean,
        circuitBreakerForceOpened: boolean
}

declare interface HystrixJS$CircuitBreaker {
    allowRequest(): boolean,
        allowSingleTest(): boolean,
        isOpen(): boolean,
        markSuccess(): void
}

declare interface HystrixJS$CircuitFactory {
    getOrCreate(config: HystrixJS$CirctuiBreakerConfig): HystrixJS$CircuitBreaker,
        getCache(): Array<HystrixJS$CircuitBreaker>,
        resetCache(): void
}

declare interface HystrixJS$HystrixSSEStream {
    toObservable(): Rx.Observable<any >
}
declare
var hystrixjs: {
    commandFactory: HystrixJS$CommandFactory,
    metricsFactory: HystrixJS$MetricsFactory,
    circuitFactory: HystrixJS$CircuitFactory,
    hystrixSSEStream: HystrixJS$HystrixSSEStream,
    hystrixConfig: HystrixJS$HystrixConfig
};
declare module 'hystrixjs' {
    declare module.exports: typeof hystrixjs
}