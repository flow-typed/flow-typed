/**
 * Flowtype definitions for dojox.math
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math.html
 * 
Deprecated.  Should require dojox/math modules directly rather than trying to access them through
this module.
*/
declare interface dojox$math {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/BigInteger.html
 * @param a 
 * @param b 
 * @param c 
 */
declare interface math$BigInteger {
    (a: any, b: any, c: any): void
}


/**
 * 
 * @param i 
 * @param x 
 * @param w 
 * @param j 
 * @param c 
 * @param n 
 */
declare interface BigInteger$am {
    (i: any, x: any, w: any, j: any, c: any, n: any): number
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/BigInteger-ext.html
 * @param a 
 * @param b 
 * @param c 
 */
declare interface math$BigInteger_ext {
    (a: any, b: any, c: any): void
}


/**
 * 
 * @param i 
 * @param x 
 * @param w 
 * @param j 
 * @param c 
 * @param n 
 */
declare interface BigInteger_ext$am {
    (i: any, x: any, w: any, j: any, c: any, n: any): number
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/round.html
 * @param v 
 * @param p 
 * @param m 
 */
declare interface math$round {
    (v: any, p: any, m: any): void
}

declare module '_base' {

}







/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/random/prng4.html
 */
declare interface random$prng4 {
    (): void
}

declare
var size: number;


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/random/Secure.html
 * 
Super simple implementation of a random number generator,
which relies on Math.random().
 * @param prng function that returns an instance of PRNG (pseudo random number generator)with two methods: init(array) and next(). It should have a property "size"to indicate the required pool size.
 * @param noEvents Optionalif false or absent, onclick and onkeypress event will be used to add"randomness", otherwise events will not be used.
*/
declare class Secure {
    constructor(prng: Function, noEvents?: boolean): this;

    /**
     * Disconnects events, if any, preparing the object for GC.
     */
    destroy(): void;

    /**
     * Fills in an array of bytes with random numbers
     * @param byteArray array to be filled in with random numbers, only existingelements will be filled.
     */
    nextBytes(byteArray: any[]): void;

    /**
     * Mix in the current time (w/milliseconds) into the pool
     */
    seedTime(): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/math/random/Simple.html
 * 
Super simple implementation of a random number generator,
which relies on Math.random().
*/
declare class Simple {
    constructor(): this;

    /**
     * Prepares the object for GC. (empty in this case)
     */
    destroy(): void;

    /**
     * Fills in an array of bytes with random numbers
     * @param byteArray array to be filled in with random numbers, only existingelements will be filled.
     */
    nextBytes(byteArray: any[]): void
}

declare module 'dojox/math' {
    declare var exp: dojox$math;
    declare module.exports: typeof exp
}
declare module 'dojox/math/BigInteger' {
    declare var exp: undefined.BigInteger;
    declare module.exports: typeof exp
}
declare module 'dojox/math/BigInteger-ext' {
    declare var exp: undefined.BigInteger_ext;
    declare module.exports: typeof exp
}
declare module 'dojox/math/round' {
    declare var exp: undefined.round;
    declare module.exports: typeof exp
}
declare module 'dojox/math/random/prng4' {
    declare var exp: undefined.prng4;
    declare module.exports: typeof exp
}
declare module 'dojox/math/random/Simple' {
    declare var exp: undefined.Simple;
    declare module.exports: typeof exp
}
declare module 'dojox/math/random/Secure' {
    declare var exp: undefined.Secure;
    declare module.exports: typeof exp
}