// @flow
/**
 * Flowtype definitions for yayson
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'yayson' {
    declare class Store {
        sync(obj: {}): any;
        find(type: string, id: string): any;
        findAll(type: string): any[];
        remove(type: string, id?: string): void;
        reset(): void;
        records: y$Record[];
        relations: {
            [key: string]: any
        }
    }
    declare interface Adapter {
        get(model: {}, key?: string): any,
            id(model: {}): string
    }
    declare class Presenter {
        adapter: string;
        render<T>(
            instanceOrCollection: PromiseLike<T>,
            options?: y$JsonOptions): PromiseLike<T>;
        render(instanceOrCollection: {}, options?: y$JsonOptions): any;
        toJSON(instanceOrCollection: {}, options?: y$JsonOptions): any;
        render<T>(
            instanceOrCollection: PromiseLike<T>,
            options?: y$JsonOptions): PromiseLike<T>;
        render(instanceOrCollection: {}, options?: y$JsonOptions): any;
        toJSON(instanceOrCollection: {}, options?: y$JsonOptions): any;
        id(instance: {}): string;
        type: string
    }
    declare interface Yayson {
        Store: typeof Store,
            Presenter: typeof Presenter,
            Adapter: Adapter
    }
    declare interface YaysonOptions {
        adapter?: "default" | "sequelize"
    }
    declare module.exports: typeof y
    declare interface y$JsonOptions {
        [key: string]: any,
        meta?: {}
    }

    declare interface y$Record {
        id: any,
            type: string,
            attributes: any,
            relationships: any
    }
}