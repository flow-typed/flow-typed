// @flow
/**
 * Flowtype definitions for applicationinsights-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'AI' {
    declare class StackFrame {
        level: number;
        method: string;
        assembly: string;
        fileName: string;
        line: number;
        constructor(): this
    }
    declare class ExceptionDetails {
        id: number;
        outerId: number;
        typeName: string;
        message: string;
        hasFullStack: boolean;
        stack: string;
        parsedStack: StackFrame[];
        constructor(): this
    }
    declare class DataPoint {
        name: string;
        kind: AI.DataPointType;
        value: number;
        count: number;
        min: number;
        max: number;
        stdDev: number;
        constructor(): this
    }
    declare class EventData mixins undefined.Domain {
        ver: number;
        name: string;
        properties: any;
        measurements: any;
        constructor(): this
    }
    declare class PageViewData mixins AI.EventData {
        ver: number;
        url: string;
        name: string;
        duration: string;
        referrer: string;
        referrerData: string;
        properties: any;
        measurements: any;
        constructor(): this
    }
    declare class PageViewPerfData mixins AI.PageViewData {
        ver: number;
        url: string;
        perfTotal: string;
        name: string;
        duration: string;
        networkConnect: string;
        referrer: string;
        sentRequest: string;
        referrerData: string;
        receivedResponse: string;
        domProcessing: string;
        properties: any;
        measurements: any;
        constructor(): this
    }
    declare class RemoteDependencyData mixins undefined.Domain {
        ver: number;
        name: string;
        id: string;
        resultCode: string;
        kind: AI.DataPointType;
        value: number;
        count: number;
        min: number;
        max: number;
        stdDev: number;
        dependencyKind: AI.DependencyKind;
        success: boolean;
        async: boolean;
        dependencySource: AI.DependencySourceType;
        commandName: string;
        dependencyTypeName: string;
        properties: any;
        constructor(): this
    }
    declare class MessageData mixins undefined.Domain {
        ver: number;
        message: string;
        severityLevel: AI.SeverityLevel;
        properties: any;
        constructor(): this
    }
}
declare module 'Microsoft' {
    declare module 'ApplicationInsights' {
        declare module 'Context' {
            declare interface IApplication {

                /**
                 * The application version.
                 */
                ver: string,

                    /**
                     * The application build version.
                     */
                    build: string
            }
            declare interface IDevice {

                /**
                 * The type for the current device.
                 */
                type: string,

                    /**
                     * A device unique ID.
                     */
                    id: string,

                    /**
                     * The device OEM for the current device.
                     */
                    oemName: string,

                    /**
                     * The device model for the current device.
                     */
                    model: string,

                    /**
                     * The IANA interface type for the internet connected network adapter.
                     */
                    network: number,

                    /**
                     * The application screen resolution.
                     */
                    resolution: string,

                    /**
                     * The current display language of the operating system.
                     */
                    locale: string,

                    /**
                     * The IP address.
                     */
                    ip: string,

                    /**
                     * The device language.
                     */
                    language: string,

                    /**
                     * The OS name.
                     */
                    os: string,

                    /**
                     * The OS version.
                     */
                    osversion: string
            }
            declare interface ILocation {

                /**
                 * Client IP address for reverse lookup
                 */
                ip: string
            }
            declare interface IInternal {

                /**
                 * The SDK version used to create this telemetry item.
                 */
                sdkVersion: string,

                    /**
                     * The SDK agent version.
                     */
                    agentVersion: string
            }
            declare interface ISample {

                /**
                 * Sample rate
                 */
                sampleRate: number
            }
            declare interface ISession {

                /**
                 * The session ID.
                 */
                id: string,

                    /**
                     * The true if this is the first session
                     */
                    isFirst: boolean,

                    /**
                     * The date at which this guid was genereated.
                     * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.
                     */
                    acquisitionDate: number,

                    /**
                     * The date at which this session ID was last reported.
                     * This value should be updated whenever telemetry is sent using this ID.
                    Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.
                    */
                    renewalDate: number
            }
            declare interface IOperation {

                /**
                 * Operation id
                 */
                id: string,

                    /**
                     * Operation name
                     */
                    name: string,

                    /**
                     * Parent operation id
                     */
                    parentId: string,

                    /**
                     * Root operation id
                     */
                    rootId: string,

                    /**
                     * Synthetic source of the operation
                     */
                    syntheticSource: string
            }
            declare interface IUser {

                /**
                 * The telemetry configuration.
                 */
                config: any,

                    /**
                     * The user ID.
                     */
                    id: string,

                    /**
                     * Authenticated user id
                     */
                    authenticatedId: string,

                    /**
                     * The account ID.
                     */
                    accountId: string,

                    /**
                     * The account acquisition date.
                     */
                    accountAcquisitionDate: string,

                    /**
                     * The user agent string.
                     */
                    agent: string,

                    /**
                     * The store region.
                     */
                    storeRegion: string
            }
        }

        declare module 'Telemetry' {
            declare class Domain {
                constructor(): this
            }
            declare class Base {
                baseType: string;
                constructor(): this
            }
            declare class Data<TDomain>mixins undefined.Base {
                baseType: string;
                baseData: TDomain;
                constructor(): this
            }
            declare class Event mixins undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                ver: number;
                name: string;
                properties: any;
                measurements: any;
                aiDataContract: {
                    ver: undefined.FieldType,
                    name: undefined.FieldType,
                    properties: undefined.FieldType,
                    measurements: undefined.FieldType
                };

                /**
                 * Constructs a new instance of the EventTelemetry object
                 */
                constructor(name: string, properties?: Object, measurements?: Object): this
            }
            declare class Exception mixins undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                ver: number;
                handledAt: string;
                exceptions: AI.ExceptionDetails[];
                severityLevel: AI.SeverityLevel;
                problemId: string;
                crashThreadId: number;
                properties: any;
                measurements: any;
                aiDataContract: {
                    ver: undefined.FieldType,
                    handledAt: undefined.FieldType,
                    exceptions: undefined.FieldType,
                    severityLevel: undefined.FieldType,
                    properties: undefined.FieldType,
                    measurements: undefined.FieldType
                };

                /**
                 * Constructs a new isntance of the ExceptionTelemetry object
                 */
                constructor(exception: Error, handledAt?: string, properties?: Object, measurements?: Object, severityLevel?: AI.SeverityLevel): this;

                /**
                 * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.
                 */
                CreateSimpleException(
                    message: string,
                    typeName: string,
                    assembly: string,
                    fileName: string,
                    details: string,
                    line: number,
                    handledAt?: string): Telemetry.Exception
            }
            declare class Metric mixins undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                ver: number;
                metrics: AI.DataPoint[];
                properties: any;
                aiDataContract: {
                    ver: undefined.FieldType,
                    metrics: undefined.FieldType,
                    properties: undefined.FieldType
                };

                /**
                 * Constructs a new instance of the MetricTelemetry object
                 */
                constructor(name: string, value: number, count?: number, min?: number, max?: number, properties?: Object): this
            }
            declare class PageView mixins AI.PageViewData, undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                aiDataContract: {
                    ver: undefined.FieldType,
                    name: undefined.FieldType,
                    url: undefined.FieldType,
                    duration: undefined.FieldType,
                    properties: undefined.FieldType,
                    measurements: undefined.FieldType
                };

                /**
                 * Constructs a new instance of the PageEventTelemetry object
                 */
                constructor(name?: string, url?: string, durationMs?: number, properties?: any, measurements?: any): this
            }
            declare class PageViewPerformance mixins AI.PageViewPerfData, undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                aiDataContract: {
                    ver: undefined.FieldType,
                    name: undefined.FieldType,
                    url: undefined.FieldType,
                    duration: undefined.FieldType,
                    perfTotal: undefined.FieldType,
                    networkConnect: undefined.FieldType,
                    sentRequest: undefined.FieldType,
                    receivedResponse: undefined.FieldType,
                    domProcessing: undefined.FieldType,
                    properties: undefined.FieldType,
                    measurements: undefined.FieldType
                };

                /**
                 * Indicates whether this instance of PageViewPerformance is valid and should be sent
                 */
                getIsValid(): boolean;

                /**
                 * Gets the total duration (PLT) in milliseconds. Check getIsValid() before using this method.
                 */
                getDurationMs(): number;

                /**
                 * Constructs a new instance of the PageEventTelemetry object
                 */
                constructor(name: string, url: string, unused: number, properties?: any, measurements?: any): this;
                getPerformanceTiming(): PerformanceTiming;

                /**
                 * Returns true is window performance timing API is supported, false otherwise.
                 */
                isPerformanceTimingSupported(): PerformanceTiming;

                /**
                 * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
                 * Returns true if ready, false otherwise.
                 */
                isPerformanceTimingDataReady(): boolean;
                getDuration(start: any, end: any): number
            }
            declare class RemoteDependencyData mixins AI.RemoteDependencyData, undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                aiDataContract: {
                    id: undefined.FieldType,
                    ver: undefined.FieldType,
                    name: undefined.FieldType,
                    kind: undefined.FieldType,
                    value: undefined.FieldType,
                    count: undefined.FieldType,
                    min: undefined.FieldType,
                    max: undefined.FieldType,
                    stdDev: undefined.FieldType,
                    dependencyKind: undefined.FieldType,
                    success: undefined.FieldType,
                    async: undefined.FieldType,
                    dependencySource: undefined.FieldType,
                    commandName: undefined.FieldType,
                    dependencyTypeName: undefined.FieldType,
                    properties: undefined.FieldType,
                    resultCode: undefined.FieldType
                };

                /**
                 * Constructs a new instance of the RemoteDependencyData object
                 */
                constructor(id: string, absoluteUrl: string, commandName: string, value: number, success: boolean, resultCode: number, method?: string): this
            }
            declare class Trace mixins AI.MessageData, undefined.ISerializable {
                envelopeType: string;
                dataType: string;
                aiDataContract: {
                    ver: undefined.FieldType,
                    message: undefined.FieldType,
                    severityLevel: undefined.FieldType,
                    measurements: undefined.FieldType,
                    properties: undefined.FieldType
                };

                /**
                 * Constructs a new instance of the MetricTelemetry object
                 */
                constructor(message: string, properties?: Object): this
            }
            declare module 'Common' {
                declare class Base mixins undefined.Base, undefined.ISerializable {

                    /**
                     * The data contract for serializing this object.
                     */
                    aiDataContract: {}
                }
                declare class Data<TDomain>mixins undefined.Data<TDomain>, undefined.ISerializable {

                    /**
                     * The data contract for serializing this object.
                     */
                    aiDataContract: {
                        baseType: FieldType,
                        baseData: FieldType
                    };

                    /**
                     * Constructs a new instance of telemetry data.
                     */
                    constructor(type: string, data: TDomain): this
                }
                declare class Envelope mixins IEnvelope {
                    ver: number;
                    name: string;
                    time: string;
                    sampleRate: number;
                    seq: string;
                    iKey: string;
                    flags: number;
                    deviceId: string;
                    os: string;
                    osVer: string;
                    appId: string;
                    appVer: string;
                    userId: string;
                    tags: any;
                    data: Base;

                    /**
                     * The data contract for serializing this object.
                     */
                    aiDataContract: any;

                    /**
                     * Constructs a new instance of telemetry data.
                     */
                    constructor(data: undefined.Base, name: string): this
                }
                declare class DataSanitizer {
                    sanitizeKeyAndAddUniqueness(key: any, map: any): any;
                    sanitizeKey(name: any): any;
                    sanitizeString(value: any): any;
                    sanitizeUrl(url: any): any;
                    sanitizeMessage(message: any): any;
                    sanitizeException(exception: any): any;
                    sanitizeProperties(properties: any): any;
                    sanitizeMeasurements(measurements: any): any;
                    padNumber(num: any): string
                }
            }

        }

        declare interface IConfig {
            instrumentationKey?: string,
                endpointUrl?: string,
                emitLineDelimitedJson?: boolean,
                accountId?: string,
                sessionRenewalMs?: number,
                sessionExpirationMs?: number,
                maxBatchSizeInBytes?: number,
                maxBatchInterval?: number,
                enableDebug?: boolean,
                disableExceptionTracking?: boolean,
                disableTelemetry?: boolean,
                verboseLogging?: boolean,
                diagnosticLogInterval?: number,
                samplingPercentage?: number,
                autoTrackPageVisitTime?: boolean,
                disableAjaxTracking?: boolean,
                overridePageViewDuration?: boolean,
                maxAjaxCallsPerView?: number,
                disableDataLossAnalysis?: boolean,
                disableCorrelationHeaders?: boolean,
                disableFlushOnBeforeUnload?: boolean,
                enableSessionStorageBuffer?: boolean,
                cookieDomain?: string,
                url?: string
        }
        declare interface ISerializable {

            /**
             * The set of fields for a serializeable object.
             * This defines the serialization order and a value of true/false
            for each field defines whether the field is required or not.
            */
            aiDataContract: any
        }
        declare type IEnvelope = {
            ver: number,
            name: string,
            time: string,
            sampleRate: number,
            seq: string,
            iKey: string,
            flags: number,
            deviceId: string,
            os: string,
            osVer: string,
            appId: string,
            appVer: string,
            userId: string,
            tags: {
                [name: string]: any
            }
        } & ISerializable

        declare interface ITelemetryContext {

            /**
             * The object describing a component tracked by this object.
             */
            application: Context.IApplication,

                /**
                 * The object describing a device tracked by this object.
                 */
                device: Context.IDevice,

                /**
                 * The object describing internal settings.
                 */
                internal: Context.IInternal,

                /**
                 * The object describing a location tracked by this object.
                 */
                location: Context.ILocation,

                /**
                 * The object describing a operation tracked by this object.
                 */
                operation: Context.IOperation,

                /**
                 * The object describing sampling settings.
                 */
                sample: Context.ISample,

                /**
                 * The object describing a user tracked by this object.
                 */
                user: Context.IUser,

                /**
                 * The object describing a session tracked by this object.
                 */
                session: Context.ISession,

                /**
                 * Adds telemetry initializer to the collection. Telemetry initializers will be called one by one
                 * before telemetry item is pushed for sending and in the order they were added.
                 */
                addTelemetryInitializer(telemetryInitializer: (envelope: undefined.IEnvelope) => boolean): any,

                /**
                 * Tracks telemetry object.
                 */
                track(envelope: undefined.IEnvelope): any
        }
        declare interface IAppInsights {
            config: IConfig,
                context: ITelemetryContext,
                queue: (() => void)[],

                /**
                 * Starts timing how long the user views a page or other item. Call this when the page opens.
                 * This method doesn't send any telemetry. Call {@link stopTrackTelemetry} to log the page when it closes.
                 * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
                 */
                startTrackPage(name?: string): any,

                /**
                 * Logs how long a page or other item was visible, after {@link startTrackPage}. Call this when the page closes.
                 * @param name The string you used as the name in startTrackPage. Defaults to the document title.
                 * @param url String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
                 * @param properties map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
                 * @param measurements map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
                 */
                stopTrackPage(
                    name?: string,
                    url?: string,
                    properties?: {
                        [name: string]: string
                    },
                    measurements?: {
                        [name: string]: number
                    }): any,

                /**
                 * Logs that a page or other item was viewed.
                 * @param name The string you used as the name in startTrackPage. Defaults to the document title.
                 * @param url String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
                 * @param properties map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
                 * @param measurements map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
                 * @param duration number - the number of milliseconds it took to load the page. Defaults to undefined. If set to default value, page load time is calculated internally.
                 */
                trackPageView(
                    name?: string,
                    url?: string,
                    properties?: {
                        [name: string]: string
                    },
                    measurements?: {
                        [name: string]: number
                    },
                    duration?: number): any,

                /**
                 * Start timing an extended event. Call {@link stopTrackEvent} to log the event when it ends.
                 * @param name A string that identifies this event uniquely within the document.
                 */
                startTrackEvent(name: string): any,

                /**
                 * Log an extended event that you started timing with {@link startTrackEvent}.
                 * @param name The string you used to identify this event in startTrackEvent.
                 * @param properties map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
                 * @param measurements map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
                 */
                stopTrackEvent(
                    name: string,
                    properties?: {
                        [name: string]: string
                    },
                    measurements?: {
                        [name: string]: number
                    }): any,

                /**
                 * Log a user action or other occurrence.
                 * @param name A string to identify this event in the portal.
                 * @param properties map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
                 * @param measurements map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
                 */
                trackEvent(
                    name: string,
                    properties?: {
                        [name: string]: string
                    },
                    measurements?: {
                        [name: string]: number
                    }): any,

                /**
                 * Log an AJAX request
                 * @param id Event id
                 * @param absoluteUrl Full url
                 * @param pathName Leave this parameter blank
                 * @param totalTime Total time it took for AJAX request to complete
                 * @param success Whether AJAX request succeeded or failed
                 * @param resultCode Result code returned from AJAX call
                 * @param method HTTP verb that was used (GET, POST)
                 */
                trackAjax(
                    id: string,
                    absoluteUrl: string,
                    pathName: string,
                    totalTime: number,
                    success: boolean,
                    resultCode: number,
                    method?: string): any,

                /**
                 * Log an exception you have caught.
                 * @param exception An Error from a catch clause, or the string error message.
                 * @param properties map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
                 * @param measurements map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
                 * @param severityLevel AI.SeverityLevel - severity level
                 */
                trackException(
                    exception: Error,
                    handledAt?: string,
                    properties?: {
                        [name: string]: string
                    },
                    measurements?: {
                        [name: string]: number
                    },
                    severityLevel?: AI.SeverityLevel): any,

                /**
                 * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.
                 * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the
                telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.
                 * @param name A string that identifies the metric.
                 * @param average Number representing either a single measurement, or the average of several measurements.
                 * @param sampleCount The number of measurements represented by the average. Defaults to 1.
                 * @param min The smallest measurement in the sample. Defaults to the average.
                 * @param max The largest measurement in the sample. Defaults to the average.
                */
                trackMetric(
                    name: string,
                    average: number,
                    sampleCount?: number,
                    min?: number,
                    max?: number,
                    properties?: {
                        [name: string]: string
                    }): any,

                /**
                 * Log a diagnostic message.
                 * @param message A message string
                 * @param properties map[string, string] - additional data used to filter traces in the portal. Defaults to empty.
                 */
                trackTrace(message: string, properties?: {
                    [name: string]: string
                }): any,

                /**
                 * Immediately send all queued telemetry.
                 */
                flush(): any,

                /**
                 * Sets the autheticated user id and the account id in this session.
                 * User auth id and account id should be of type string. They should not contain commas, semi-colons, equal signs, spaces, or vertical-bars.
                 * @param authenticatedUserId - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.
                 * @param accountId - An optional string to represent the account associated with the authenticated user.
                 */
                setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string): any,

                /**
                 * Clears the authenticated user id and the account id from the user context.
                 */
                clearAuthenticatedUserContext(): any,
                downloadAndSetup(config: undefined.IConfig): void,

                /**
                 * The custom error handler for Application Insights
                 * @param  - The error message
                 * @param  - The url where the error was raised
                 * @param  - The line number where the error was raised
                 * @param  - The column number for the line where the error was raised
                 * @param  - The Error object
                 */
                _onerror(
                    message: string,
                    url: string,
                    lineNumber: number,
                    columnNumber: number,
                    error: Error): any
        }
    }

    declare module 'Telemetry' {
        declare class Domain {
            constructor(): this
        }
        declare class Base {
            baseType: string;
            constructor(): this
        }
        declare class Data<TDomain>mixins undefined.Base {
            baseType: string;
            baseData: TDomain;
            constructor(): this
        }
        declare class Event mixins undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            ver: number;
            name: string;
            properties: any;
            measurements: any;
            aiDataContract: {
                ver: undefined.FieldType,
                name: undefined.FieldType,
                properties: undefined.FieldType,
                measurements: undefined.FieldType
            };

            /**
             * Constructs a new instance of the EventTelemetry object
             */
            constructor(name: string, properties?: Object, measurements?: Object): this
        }
        declare class Exception mixins undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            ver: number;
            handledAt: string;
            exceptions: AI.ExceptionDetails[];
            severityLevel: AI.SeverityLevel;
            problemId: string;
            crashThreadId: number;
            properties: any;
            measurements: any;
            aiDataContract: {
                ver: undefined.FieldType,
                handledAt: undefined.FieldType,
                exceptions: undefined.FieldType,
                severityLevel: undefined.FieldType,
                properties: undefined.FieldType,
                measurements: undefined.FieldType
            };

            /**
             * Constructs a new isntance of the ExceptionTelemetry object
             */
            constructor(exception: Error, handledAt?: string, properties?: Object, measurements?: Object, severityLevel?: AI.SeverityLevel): this;

            /**
             * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.
             */
            CreateSimpleException(
                message: string,
                typeName: string,
                assembly: string,
                fileName: string,
                details: string,
                line: number,
                handledAt?: string): Telemetry.Exception
        }
        declare class Metric mixins undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            ver: number;
            metrics: AI.DataPoint[];
            properties: any;
            aiDataContract: {
                ver: undefined.FieldType,
                metrics: undefined.FieldType,
                properties: undefined.FieldType
            };

            /**
             * Constructs a new instance of the MetricTelemetry object
             */
            constructor(name: string, value: number, count?: number, min?: number, max?: number, properties?: Object): this
        }
        declare class PageView mixins AI.PageViewData, undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            aiDataContract: {
                ver: undefined.FieldType,
                name: undefined.FieldType,
                url: undefined.FieldType,
                duration: undefined.FieldType,
                properties: undefined.FieldType,
                measurements: undefined.FieldType
            };

            /**
             * Constructs a new instance of the PageEventTelemetry object
             */
            constructor(name?: string, url?: string, durationMs?: number, properties?: any, measurements?: any): this
        }
        declare class PageViewPerformance mixins AI.PageViewPerfData, undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            aiDataContract: {
                ver: undefined.FieldType,
                name: undefined.FieldType,
                url: undefined.FieldType,
                duration: undefined.FieldType,
                perfTotal: undefined.FieldType,
                networkConnect: undefined.FieldType,
                sentRequest: undefined.FieldType,
                receivedResponse: undefined.FieldType,
                domProcessing: undefined.FieldType,
                properties: undefined.FieldType,
                measurements: undefined.FieldType
            };

            /**
             * Indicates whether this instance of PageViewPerformance is valid and should be sent
             */
            getIsValid(): boolean;

            /**
             * Gets the total duration (PLT) in milliseconds. Check getIsValid() before using this method.
             */
            getDurationMs(): number;

            /**
             * Constructs a new instance of the PageEventTelemetry object
             */
            constructor(name: string, url: string, unused: number, properties?: any, measurements?: any): this;
            getPerformanceTiming(): PerformanceTiming;

            /**
             * Returns true is window performance timing API is supported, false otherwise.
             */
            isPerformanceTimingSupported(): PerformanceTiming;

            /**
             * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
             * Returns true if ready, false otherwise.
             */
            isPerformanceTimingDataReady(): boolean;
            getDuration(start: any, end: any): number
        }
        declare class RemoteDependencyData mixins AI.RemoteDependencyData, undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            aiDataContract: {
                id: undefined.FieldType,
                ver: undefined.FieldType,
                name: undefined.FieldType,
                kind: undefined.FieldType,
                value: undefined.FieldType,
                count: undefined.FieldType,
                min: undefined.FieldType,
                max: undefined.FieldType,
                stdDev: undefined.FieldType,
                dependencyKind: undefined.FieldType,
                success: undefined.FieldType,
                async: undefined.FieldType,
                dependencySource: undefined.FieldType,
                commandName: undefined.FieldType,
                dependencyTypeName: undefined.FieldType,
                properties: undefined.FieldType,
                resultCode: undefined.FieldType
            };

            /**
             * Constructs a new instance of the RemoteDependencyData object
             */
            constructor(id: string, absoluteUrl: string, commandName: string, value: number, success: boolean, resultCode: number, method?: string): this
        }
        declare class Trace mixins AI.MessageData, undefined.ISerializable {
            envelopeType: string;
            dataType: string;
            aiDataContract: {
                ver: undefined.FieldType,
                message: undefined.FieldType,
                severityLevel: undefined.FieldType,
                measurements: undefined.FieldType,
                properties: undefined.FieldType
            };

            /**
             * Constructs a new instance of the MetricTelemetry object
             */
            constructor(message: string, properties?: Object): this
        }
        declare module 'Common' {
            declare class Base mixins undefined.Base, undefined.ISerializable {

                /**
                 * The data contract for serializing this object.
                 */
                aiDataContract: {}
            }
            declare class Data<TDomain>mixins undefined.Data<TDomain>, undefined.ISerializable {

                /**
                 * The data contract for serializing this object.
                 */
                aiDataContract: {
                    baseType: FieldType,
                    baseData: FieldType
                };

                /**
                 * Constructs a new instance of telemetry data.
                 */
                constructor(type: string, data: TDomain): this
            }
            declare class Envelope mixins IEnvelope {
                ver: number;
                name: string;
                time: string;
                sampleRate: number;
                seq: string;
                iKey: string;
                flags: number;
                deviceId: string;
                os: string;
                osVer: string;
                appId: string;
                appVer: string;
                userId: string;
                tags: any;
                data: Base;

                /**
                 * The data contract for serializing this object.
                 */
                aiDataContract: any;

                /**
                 * Constructs a new instance of telemetry data.
                 */
                constructor(data: undefined.Base, name: string): this
            }
            declare class DataSanitizer {
                sanitizeKeyAndAddUniqueness(key: any, map: any): any;
                sanitizeKey(name: any): any;
                sanitizeString(value: any): any;
                sanitizeUrl(url: any): any;
                sanitizeMessage(message: any): any;
                sanitizeException(exception: any): any;
                sanitizeProperties(properties: any): any;
                sanitizeMeasurements(measurements: any): any;
                padNumber(num: any): string
            }
        }

    }

}
declare module 'applicationinsights-js' {
    declare     export var AppInsights: undefined.IAppInsights;
}
declare var appInsights: undefined.IAppInsights;