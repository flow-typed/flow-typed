// @flow
/**
 * Flowtype definitions for twit
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'twit' {

    declare     export type Twit$StreamEndpoint = "statuses/filter" |
        "statuses/sample" |
        "statuses/firehose" |
        "user" |
        "site";

    declare     export type Twitter$ResultType = "mixed" | "popular" | "recent";


    /**
     * 
     * @see  https://dev.twitter.com/overview/api/tweets#obj-contributors
     */
    declare     export interface Twitter$Contributors {
        id: number,
            id_str: number,
            screen_name: string
    }


    /**
     * 
     * @see  https://dev.twitter.com/overview/api/entities
     */
    declare     export interface Twitter$HashtagEntity {
        indices: number[],
            text: string
    }

    declare     export interface Twitter$Size {
        h: number,
            w: number,
            resize: "crop" | "fit"
    }

    declare     export interface Twitter$Sizes {
        thumb: Twitter$Size,
            large: Twitter$Size,
            medium: Twitter$Size,
            small: Twitter$Size
    }

    declare     export interface Twitter$MediaEntity {
        id: number,
            id_str: string,
            indices: number[],
            url: string,
            display_url: string,
            expanded_url: string,
            media_url: string,
            media_url_https: string,
            sizes: Twitter$Sizes,
            source_status_id: number,
            source_status_id_str: string,
            type: string
    }

    declare     export interface Twitter$UrlEntity {
        url: string,
            display_url: string,
            expanded_url: string,
            indices: number[]
    }

    declare     export interface Twitter$UserMentionEntity {
        id: number,
            id_str: string,
            indices: number[],
            name: string,
            screen_name: string
    }

    declare     export interface Twitter$Entities {
        hashtags: Twitter$HashtagEntity[],
            media: Twitter$MediaEntity[],
            urls: Twitter$UrlEntity[],
            user_mentions: Twitter$UserMentionEntity[]
    }


    /**
     * 
     * @see  https://dev.twitter.com/overview/api/users
     */
    declare     export interface Twitter$User {
        contributors_enabled: boolean,
            created_at: string,
            default_profile: string,
            default_profile_image: string,
            description: string,
            entities: Twitter$Entities,
            favourites_count: number,
            follow_request_sent?: boolean,
            following?: boolean,
            followers_count: number,
            friends_count: number,
            geo_enabled?: boolean,
            id: number,
            id_str: string,
            is_translator?: boolean,
            lang: string,
            listed_count: number,
            location: string,
            name: string,
            notifications?: boolean,
            profile_background_color: string,
            profile_background_image_url: string,
            profile_background_image_url_https: string,
            profile_background_tile: boolean,
            profile_banner_url: string,
            profile_image_url: string,
            profile_image_url_https: string,
            profile_link_color: string,
            profile_sidebar_border_color: string,
            profile_sidebar_fill_color: string,
            profile_text_color: string,
            profile_use_background_image: boolean,
            protected: boolean,
            screen_name: string,
            show_all_inline_media: boolean,
            status?: Twitter$Status,
            statuses_count: number,
            time_zone?: string,
            url: string,
            utc_offset?: number,
            verified: boolean,
            withheld_in_countries: string,
            withheld_scope: string
    }


    /**
     * 
     * @see  https://dev.twitter.com/overview/api/places
     */
    declare     export interface Twitter$PlaceAttribute {
        street_address: string,
            locality: string,
            region: string,
            iso3: string,
            postal_code: string,
            phone: string,
            twitter: string,
            url: string,
            app: id: string
    }

    declare     export interface Twitter$Place {
        geometry: GeoJSON.Point,
            attributes: Twitter$PlaceAttribute,
            bounding_box: GeoJSON.Polygon,
            contained_within: Twitter$Place[],
            country: string,
            country_code: string,
            full_name: string,
            id: string,
            name: string,
            place_type: string,
            url: string
    }


    /**
     * 
     * @see  https://dev.twitter.com/overview/api/tweets
     */
    declare     export interface Twitter$Status {
        id: number,
            id_str: string,
            annotations?: Object,
            contributors?: Twitter$Contributors[],
            coordinates?: GeoJSON.Point,
            created_at: string,
            current_user_retweet?: {
                id: number,
                id_str: number
            },
            entities: Twitter$Entities,
            favorite_count?: number,
            favorited?: boolean,
            filter_level: "none" | "low" | "medium",
            geo?: Object,
            in_reply_to_screen_name?: string,
            in_reply_to_status_id?: number,
            in_reply_to_status_id_str?: string,
            in_reply_to_user_id?: number,
            in_reply_to_user_id_str?: string,
            lang?: string,
            place?: Twitter$Place,
            possibly_sensitive?: boolean,
            quoted_status_id?: number,
            quoted_status_id_str?: string,
            quoted_status?: Twitter$Status,
            scopes?: Object,
            retweet_count: number,
            retweeted: boolean,
            retweeted_status?: Twitter$Status,
            source?: string,
            text: string,
            truncated: boolean,
            user: Twitter$User,
            withheld_copyright?: boolean,
            withheld_in_countries?: string[],
            withheld_scope?: string
    }

    declare     export interface Twitter$Metadata {
        max_id?: number,
            since_id?: number,
            refresh_url?: string,
            next_results?: string,
            count?: number,
            completed_in?: number,
            since_id_str?: string,
            query?: string,
            max_id_str?: string
    }

    declare     export interface Twit$Response {
        statuses: Twitter$Status[],
            search_metadata: Twitter$Metadata
    }

    declare interface Twit$MediaParam {
        file_path: string
    }

    declare interface Twit$Params {
        q?: string,
            geocode?: string,
            lang?: string,
            locale?: string,
            result_type?: Twitter$ResultType,
            count?: number,
            results_per_page?: number,
            until?: string,
            since_id?: string,
            max_id?: string,
            include_entities?: boolean,
            media_id?: string,
            media_ids?: string[],
            alt_text?: {
                text?: string
            },
            media_data?: Buffer | string,
            screen_name?: string,
            id?: string,
            slug?: string,
            status?: string
    }

    declare     export interface Twit$PromiseResponse {
        data: Twit$Response,
            responde: IncomingMessage
    }

    declare     export interface Twit$Callback {
        (err: Error, result: Twit$Response, response: IncomingMessage): void
    }

    declare     export interface Twit$ConfigKeys {
        consumer_key: string,
            consumer_secret: string,
            access_token?: string,
            access_token_secret?: string
    }

    declare     export type Twit$Options = {
        app_only_auth?: boolean,
        timeout_ms?: number,
        trusted_cert_fingerprints?: string[]
    } & Twit$ConfigKeys

    declare module.exports: typeof Twit
}