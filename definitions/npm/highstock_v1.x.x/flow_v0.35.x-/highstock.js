// @flow
/**
 * Flowtype definitions for highstock
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type ___Highstock$ChartObject = {
    options: ___Highstock$Options
}

declare interface ___Highstock$NavigatorOptions {
    adaptToUpdatedData?: boolean,
        baseSeries?: string | number,
        enabled?: boolean,
        handles?: {
            backgroundColor?: string,
            borderColor?: string
        },
        height?: number,
        margin?: number,
        maskFill?: string,
        maskInside?: boolean,
        outlineColor?: string,
        outlineWidth?: number,
        series?: ___Highcharts.IndividualSeriesOptions,
        xAxis?: ___Highcharts.AxisOptions,
        yAxis?: ___Highcharts.AxisOptions
}

declare interface ___Highstock$RangeSelectorButton {
    type: string,
        count?: number,
        text: string,
        dataGrouping?: any
}

declare interface ___Highstock$RangeSelectorOptions {
    allButtonsEnabled?: boolean,
        buttonSpacing?: number,
        buttonTheme?: any,
        buttons?: ___Highstock$RangeSelectorButton[],
        enabled?: boolean,
        inputBoxBorderColor?: string,
        inputBoxHeight?: number,
        inputBoxWidth?: number,
        inputDateFormat?: string,
        inputDateParser?: (date: string) => number,
        inputEditDateFormat?: string,
        inputEnabled?: boolean,
        inputPosition?: {
            align?: string,
            verticalAlign?: string,
            x?: number,
            y?: number
        },
        inputStyle?: ___Highcharts.CSSObject,
        labelStyle?: ___Highcharts.CSSObject,
        selected?: number
}

declare interface ___Highstock$ScrollbarOptions {
    barBackgroundColor?: string,
        barBorderColor?: string,
        barBorderRadius?: number,
        barBorderWidth?: number,
        buttonArrowColor?: string,
        buttonBackgroundColor?: string,
        buttonBorderColor?: string,
        buttonBorderRadius?: number,
        buttonBorderWidth?: number,
        enabled?: boolean,
        height?: number,
        liveRedraw?: boolean,
        minWidth?: number,
        rifleColor?: string,
        trackBackgroundColor?: string,
        trackBorderColor?: string,
        trackBorderRadius?: number,
        trackBorderWidth?: number
}

declare type ___Highstock$Options = {
    navigator?: ___Highstock$NavigatorOptions,
    rangeSelector?: ___Highstock$RangeSelectorOptions,
    scrollbar?: ___Highstock$ScrollbarOptions
}

declare interface ___Highstock$Chart {
    new(options: ___Highstock$Options): ___Highstock$ChartObject,
    new(
        options: ___Highstock$Options,
        callback: (chart: ___Highstock$ChartObject) => void): ___Highstock$ChartObject
}

declare type ___Highstock$Static = {
    StockChart: ___Highstock$Chart
}
declare interface JQuery {
    highcharts(type: "StockChart"): ___Highstock$ChartObject,

        /**
         * Creates a new Highcharts.Chart for the current JQuery selector; usually
         * a div selected by $('#container')
         * @param  Options for this chart
         * @return  current {JQuery} selector the current JQuery selector
         */
        highcharts(type: "StockChart", options: ___Highstock$Options): JQuery,

        /**
         * Creates a new Highcharts.Chart for the current JQuery selector; usually
         * a div selected by $('#container')
         * @param  Options for this chart
         * @param callback Callback function used to manipulate the constructed chart instance
         * @return  current {JQuery} selector the current JQuery selector
         */
        highcharts(
            type: "StockChart",
            options: ___Highstock$Options,
            callback: (chart: ___Highstock$ChartObject) => void): JQuery,
        highcharts(type: string): ___Highcharts.ChartObject,
        highcharts(type: string, options: ___Highcharts.Options): JQuery,
        highcharts(
            type: string,
            options: ___Highcharts.Options,
            callback: (chart: ___Highcharts.ChartObject) => void): JQuery
}