/**
 * Flowtype definitions for rx.virtualtime
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export type Rx$VirtualTimeScheduler<TAbsolute, TRelative>= {
    advanceBy(time: TRelative): void,
    advanceTo(time: TAbsolute): void,
    scheduleAbsolute(dueTime: TAbsolute, action: () => void): IDisposable,
    scheduleAbsoluteWithState<TState>(
        state: TState,
        dueTime: TAbsolute,
        action: (scheduler: IScheduler, state: TState) => IDisposable): IDisposable,
    scheduleRelative(dueTime: TRelative, action: () => void): IDisposable,
    scheduleRelativeWithState<TState>(
        state: TState,
        dueTime: TRelative,
        action: (scheduler: IScheduler, state: TState) => IDisposable): IDisposable,
    sleep(time: TRelative): void,
    start(): IDisposable,
    stop(): void,
    isEnabled: boolean,
    add(from: TAbsolute, by: TRelative): TAbsolute,
    toDateTimeOffset(duetime: TAbsolute): number,
    toRelative(duetime: number): TRelative,
    getNext(): internals.ScheduledItem<TAbsolute >
} & Scheduler


declare export type Rx$HistoricalScheduler = {} & Rx$VirtualTimeScheduler


declare export var HistoricalScheduler: {
    new(
        initialClock: number,
        comparer: (first: number, second: number) => number): Rx$HistoricalScheduler
};
declare module 'rx.virtualtime' {
    declare module.exports: typeof Rx
}