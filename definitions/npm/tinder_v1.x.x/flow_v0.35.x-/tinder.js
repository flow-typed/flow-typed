// @flow
/**
 * Flowtype definitions for tinder
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'tinder' {
    declare class TinderClient {
        constructor(): this;

        /**
         * Authorize this tinder client
         * @param  the Facebook token. This will be obtained when authenticating the user
         * @param  the Facebook user id.
         * @param  the callback to invoke when the request completes
         */
        authorize(fbToken: string, fbId: string, callback: Callback<any>): void;

        /**
         * Returns whether this client is authorized
         * @return  whether or not this client is authorized
         */
        isAuthorized(): Boolean;

        /**
         * Returns the xAuthToken
         * @return  xAuthToken
         */
        getAuthToken(): string;

        /**
         * Set auth token if you have it saved, no need to do fb login every time
         */
        setAuthToken(xAuthToken: string): void;

        /**
         * Returns client information and globals
         * Globals are used for interacting with tinder api limits
         */
        getDefaults(): any;

        /**
         * The current account's user id
         */
        userId: string;

        /**
         * Gets a list of nearby users
         * @param  the maximum number of profiles to fetch
         * @param  the callback to invoke when the request completes
         */
        getRecommendations(limit: number, callback: Callback<TinderRecommendationsResult>): void;

        /**
         * Sends a message to a user
         * @param  the id of the match
         * @param  the message to send
         * @param  the callback to invoke when the request completes
         */
        sendMessage(matchId: string, message: string, callback: Callback<any>): void;

        /**
         * Likes (swipes right) on a user
         * @param  the id of the user
         * @param  the callback to invoke when the request completes
         */
        like(userId: string, callback: Callback<any>): void;

        /**
         * Superlikes a user
         * @param  the id of the user
         * @param  the callback to invoke when the request completes
         */
        superLike(userId: string, callback: Callback<any>): void;

        /**
         * Passes (swipes left) on a user
         * @param  the id of the user
         * @param  the callback to invoke when the request completes
         */
        pass(userId: string, callback: Callback<any>): void;

        /**
         * Unmatch with a user
         * @param  the id of the match
         * @param  the callback to invoke when the request completes
         */
        unmatch(matchId: string, callback: Callback<any>): void;

        /**
         * Gets a list of new updates. This will be things like new messages, users who liked you, etc. 
         * @param  the callback to invoke when the request completes
         */
        getUpdates(callback: Callback<TinderUpdates>): void;

        /**
         * Gets the entire history for the current account (all matches, messages, blocks, etc.)
         * 
        NOTE: Old messages seem to not be returned after a certain threshold. Not yet
        sure what exactly that timeout is. The official client seems to get this update
        once when the app is installed then cache the results and only rely on the
        incremental updates
         * @param  the callback to invoke when the request completes
        */
        getHistory(callback: Callback<TinderHistory>): void;

        /**
         * Updates the geographical position for the current account 
         * @param  the longitude
         * @param  the latitutde
         * @param  the callback to invoke when the request completes
         */
        updatePosition(longitude: Number, latitude: Number, callback: Callback<any>): void;

        /**
         * Gets the current account info
         * @param  the callback to invoke when the request completes
         */
        getAccount(callback: Callback<any>): void;

        /**
         * Updates the preferences for the current account
         * @param  whether or not to show user's card
         * @param  the minimum age to show recommendations
         * @param  the maximum age to show recommendations
         * @param  the gender to show recommentations (0 = Male, 1 = Female, -1 = Both)
         * @param  the distance in miles to show recommendations
         * @param  the callback to invoke when the request completes
         */
        updatePreferences(
            discovery: Boolean,
            ageMin: number,
            ageMax: number,
            gender: number,
            distance: number,
            callback: Callback<any>): void;

        /**
         * Upload a new picture to the current account
         * @param  the picture that you want to upload
         * @param  the callback to invoke when the request completes
         */
        uploadPicture(file: fs.ReadStream, callback: Callback<any>): void;

        /**
         * Post a new picture to the current account from Facebook
         * @param  is the facebook id of the picture
         * @param  is the zoom percentage in x 0 full Zoom 1 no Zoom
         * @param  is the zoom percentage in x 0 full Zoom 1 no Zoom
         * @param  is the offset from the left corner in percentage
         * @param  is the offset from the top corner in percentage
         * @param  the callback to invoke when the request completes
         */
        uploadFBPicture(
            pictureId: string,
            xdistance_percent: number,
            ydistance_percent: number,
            xoffset_percent: number,
            yoffset_percent: number,
            callback: Callback<any>): void;

        /**
         * Delete a picture from the current account
         * @param  the id of the picture
         * @param  the callback to invoke when the request completes
         */
        deletePicture(pictureId: string, callback: Callback<any>): void;

        /**
         * 
         * @deprecated  * Get authenticated user info
         * @param  the callback to invoke when the request completes
         */
        getProfile(callback: Callback<any>): void;

        /**
         * Update your gender
         * @param  is your gender (0 = Male, 1 = Female)
         * @param  the callback to invoke when the request completes
         */
        updateGender(gender: number, callback: Callback<any>): void;

        /**
         * Update your bio
         * @param  is you bio (500 characters max.)
         * @param  the callback to invoke when the request completes
         */
        updateBio(bio: string, callback: Callback<any>): void;

        /**
         * Update your job
         * @param  is the facebook id of the job
         * @param  the callback to invoke when the request completes
         */
        updateJob(id: String, callback: Callback<any>): void;

        /**
         * Delete your current job
         * @param  the callback to invoke when the request completes
         */
        deleteJob(callback: Callback<any>): void;

        /**
         * Update your school
         * @param  is the facebook id of the school
         * @param  the callback to invoke when the request completes
         */
        updateSchool(id: String, callback: Callback<any>): void;

        /**
         * Delete your current school
         * @param  the callback to invoke when the request completes
         */
        deleteSchool(callback: Callback<any>): void;

        /**
         * Delete the current account
         * @param  the callback to invoke when the request completes
         */
        deleteAccount(callback: Callback<any>): void;

        /**
         * Gets a user by id
         * @param  the id of the user
         * @param  the callback to invoke when the request completes
         */
        getUser(userId: string, callback: Callback<any>): void;

        /**
         * Get a share URL for a user
         * @param  the id of the user
         * @param  the callback to invoke when the request completes
         */
        getShareLink(userId: string, callback: Callback<any>): void;

        /**
         * Report a user
         * @param  the id of the user
         * @param  one of 4 (inappropriate photos), 1 (spam), or 0 (other)
         * @param  optional reason for report when causeId is 0 (other)
         * @param  the callback to invoke when the request completes
         */
        report(
            userId: string,
            causeId: Number,
            causeText: string,
            callback: Callback<any>): void;

        /**
         * Create a web username for the current account
         * @param  the username to request be created
         * @param  the callback to invoke when the request completes
         */
        createUsername(username: string, callback: Callback<any>): void;

        /**
         * Change a web username for the current account if it's already been set
         * @param  the username to request be created
         * @param  the callback to invoke when the request completes
         */
        changeUsername(username: string, callback: Callback<any>): void;

        /**
         * Deletes the existing web username for the current account
         * @param  the callback to invoke when the request completes
         */
        deleteUsername(username: string, callback: Callback<any>): void;

        /**
         * Update the passport location 
         * @param  the longitude
         * @param  the latitutde
         * @param  the callback to invoke when the request completes
         */
        updatePassport(latitude: string, longitude: string, callback: Callback<any>): void;

        /**
         * Reset the passport location 
         * @param  the callback to invoke when the request completes
         */
        resetPassport(callback: Callback<any>): void
    }
    declare interface Callback<T>{
        (error: any, data: T): any
    }
    declare interface TinderUpdates {
        matches: any[],
            blocks: any[],
            matchmaker: any[],
            lists: any[],
            deleted_lists: any[],
            liked_messages: TinderMessage[],
            squads: any[],
            last_activity_date: string
    }

    /**
     * When out of recommendations it is set to "out of recs", a possible value is also "recs timeout",
     * otherwise does not seem to be used
     */
    declare interface TinderRecommendationsResult {
        message?: string,
            status: Number,
            results: TinderRecommendation[]
    }
    declare interface TinderRecommendation {
        distance_mi: Number,
            common_connections: any[],
            common_likes: any[],
            common_interests: any[],
            uncommon_interests: any[],
            common_friends: any[],
            _id: string,
            badges: any[],
            bio: string,
            birth_date: string,
            gender: number,
            name: string,
            ping_time: string,
            photos: TinderPhoto[],
            jobs: any[],
            schools: any[],
            teaser: {
                string: string
            },
            birth_date_info: string
    }
    declare interface TinderHistory {
        matches: TinderMatch[],
            blocks: string[],
            lists: any[],
            deleted_lists: any[],
            liked_messages: TinderLikedMessage[],
            squads: any[],
            last_activity_date: string
    }
    declare interface TinderLikedMessage {
        message_id: string,
            updated_at: string,
            liker_id: string,
            match_id: string,
            is_liked: Boolean
    }
    declare interface TinderMatch {
        _id: string,
            closed: Boolean,
            common_friend_count: number,
            common_like_count: number,
            created_date: string,
            dead: Boolean,
            last_activity_date: string,
            message_count: number,
            messages: TinderMessage[],
            muted: Boolean,
            participants: string[],
            pending: Boolean,
            is_super_like: Boolean,
            following: Boolean,
            following_moments: Boolean,
            id: string,
            person: TinderPerson
    }
    declare interface TinderPerson {
        _id: string,
            bio: string,
            birth_date: string,
            gender: number,
            name: string,
            ping_time: string,
            user_number: number,
            photos: TinderPhoto[],
            badges: any[]
    }
    declare interface TinderPhoto {
        url: string,
            processedFiles: TinderPhotoProcessedFile[],
            extension: string,
            fileName: string,
            xoffset_percent: number,
            ydistance_percent: number,
            main: Boolean,
            xdistance_percent: number,
            id: string,
            yoffset_percent: number
    }
    declare interface TinderPhotoProcessedFile {
        url: string,
            height: number,
            width: number
    }
    declare interface TinderMessage {
        _id: string,
            match_id: string,
            to: string,
            from: string,
            message: string,
            sent_date: string,
            created_date: string,
            timestamp: number
    }
}