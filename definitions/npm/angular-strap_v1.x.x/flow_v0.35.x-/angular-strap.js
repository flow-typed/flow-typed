/**
 * Flowtype definitions for angular-strap
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ngStrap' {
    declare interface modal$IModalService {
        (config?: modal$IModalOptions): modal$IModal
    }

    declare interface modal$IModalProvider {
        defaults: modal$IModalOptions
    }

    declare interface modal$IModal {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface modal$IModalOptions {
        animation?: string,
            backdropAnimation?: string,
            placement?: string,
            title?: string,
            content?: string,
            html?: boolean,
            backdrop?: boolean | string,
            keyboard?: boolean,
            show?: boolean,
            container?: string | boolean,
            template?: string,
            contentTemplate?: string,
            prefixEvent?: string,
            id?: string,
            scope?: ng.IScope
    }

    declare type modal$IModalScope = {
        $show: () => void,
        $hide: () => void,
        $toggle: () => void
    }
    declare interface aside$IAsideService {
        (config?: aside$IAsideOptions): aside$IAside
    }

    declare interface aside$IAsideProvider {
        defaults: aside$IAsideOptions
    }

    declare interface aside$IAside {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface aside$IAsideOptions {
        animation?: string,
            placement?: string,
            title?: string,
            content?: string,
            html?: boolean,
            backdrop?: boolean | string,
            keyboard?: boolean,
            show?: boolean,
            container?: string | boolean,
            template?: string,
            contentTemplate?: string,
            scope?: ng.IScope
    }

    declare type aside$IAsideScope = {
        $show: () => void,
        $hide: () => void,
        $toggle: () => void
    }
    declare interface alert$IAlertService {
        (config?: alert$IAlertOptions): alert$IAlert
    }

    declare interface alert$IAlertProvider {
        defaults: alert$IAlertOptions
    }

    declare interface alert$IAlert {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface alert$IAlertOptions {
        animation?: string,
            placement?: string,
            title?: string,
            content?: string,
            type?: string,
            keyboard?: boolean,
            show?: boolean,
            container?: string | boolean,
            template?: string,
            duration?: number | boolean,
            dismissable?: boolean
    }

    declare type alert$IAlertScope = {
        $show: () => void,
        $hide: () => void,
        $toggle: () => void
    }
    declare interface tooltip$ITooltipService {
        (element: ng.IAugmentedJQuery, config?: tooltip$ITooltipOptions): tooltip$ITooltip
    }

    declare interface tooltip$ITooltipProvider {
        defaults: tooltip$ITooltipOptions
    }

    declare interface tooltip$ITooltip {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface tooltip$ITooltipOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            title?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            target?: string | ng.IAugmentedJQuery | boolean,
            template?: string,
            contentTemplate?: string,
            prefixEvent?: string,
            id?: string,
            viewport?: string | {
                selector: string,
                padding: string | number
            }
    }

    declare type tooltip$ITooltipScope = {
        $show: () => void,
        $hide: () => void,
        $toggle: () => void,
        $setEnabled: (isEnabled: boolean) => void
    }
    declare interface popover$IPopoverService {
        (element: ng.IAugmentedJQuery, config?: popover$IPopoverOptions): popover$IPopover
    }

    declare interface popover$IPopoverProvider {
        defaults: popover$IPopoverOptions
    }

    declare interface popover$IPopover {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface popover$IPopoverOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            title?: string,
            content?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            target?: string | ng.IAugmentedJQuery | boolean,
            template?: string,
            contentTemplate?: string,
            autoClose?: boolean,
            id?: string,
            viewport?: string | {
                selector: string,
                padding: string | number
            }
    }

    declare type popover$IPopoverScope = {
        $show: () => void,
        $hide: () => void,
        $toggle: () => void
    }
    declare interface typeahead$ITypeaheadService {
        (element: ng.IAugmentedJQuery, controller: any, config?: typeahead$ITypeaheadOptions): typeahead$ITypeahead
    }

    declare interface typeahead$ITypeaheadProvider {
        defaults: typeahead$ITypeaheadOptions
    }

    declare interface typeahead$ITypeahead {
        $promise: ng.IPromise<void>,
            show: () => void,
            hide: () => void,
            toggle: () => void
    }

    declare interface typeahead$ITypeaheadOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            template?: string,
            limit?: number,
            minLength?: number,
            autoSelect?: boolean,
            comparator?: string,
            id?: string,
            watchOptions?: boolean
    }
    declare interface datepicker$IDatepickerService {
        (element: ng.IAugmentedJQuery, controller: any, config?: datepicker$IDatepickerOptions): datepicker$IDatepicker
    }

    declare interface datepicker$IDatepickerProvider {
        defaults: datepicker$IDatepickerOptions
    }

    declare interface datepicker$IDatepicker {
        update: (date: Date) => void,
            updateDisabledDates: (dateRanges: datepicker$IDatepickerDateRange[]) => void,
            select: (dateConstructorArg: string | number | number[], keep: boolean) => void,
            setMode: (mode: any) => void,
            int: () => void,
            destroy: () => void,
            show: () => void,
            hide: () => void
    }

    declare interface datepicker$IDatepickerDateRange {
        start: Date,
            end: Date
    }

    declare interface datepicker$IDatepickerOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            template?: string,
            dateFormat?: string,
            modelDateFormat?: string,
            dateType?: string,
            timezone?: string,
            autoclose?: boolean,
            useNative?: boolean,
            minDate?: Date,
            maxDate?: Date,
            startView?: number,
            minView?: number,
            startWeek?: number,
            startDate?: Date,
            iconLeft?: string,
            iconRight?: string,
            daysOfWeekDisabled?: string,
            disabledDates?: datepicker$IDatepickerDateRange[]
    }
    declare interface timepicker$ITimepickerService {
        (element: ng.IAugmentedJQuery, controller: any, config?: timepicker$ITimepickerOptions): timepicker$ITimepicker
    }

    declare interface timepicker$ITimepickerProvider {
        defaults: timepicker$ITimepickerOptions
    }

    declare interface timepicker$ITimepicker {}

    declare interface timepicker$ITimepickerOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            template?: string,
            timeFormat?: string,
            modelTimeFormat?: string,
            timeType?: string,
            autoclose?: boolean,
            useNative?: boolean,
            minTime?: Date,
            maxTime?: Date,
            length?: number,
            hourStep?: number,
            minuteStep?: number,
            secondStep?: number,
            roundDisplay?: boolean,
            iconUp?: string,
            iconDown?: string,
            arrowBehaviour?: string
    }
    declare interface select$ISelectService {
        (element: ng.IAugmentedJQuery, controller: any, config: select$ISelectOptions): select$ISelect
    }

    declare interface select$ISelectProvider {
        defaults: select$ISelectOptions
    }

    declare interface select$ISelect {
        update: (matches: any) => void,
            active: (index: number) => number,
            select: (index: number) => void,
            show: () => void,
            hide: () => void
    }

    declare interface select$ISelectOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            template?: string,
            multiple?: boolean,
            allNoneButtons?: boolean,
            allText?: string,
            noneText?: string,
            maxLength?: number,
            maxLengthHtml?: string,
            sort?: boolean,
            placeholder?: string,
            iconCheckmark?: string,
            id?: string
    }
    declare interface tab$ITabProvider {
        defaults: tab$ITabOptions
    }

    declare interface tab$ITabService {
        defaults: tab$ITabOptions,
            controller: any
    }

    declare interface tab$ITabOptions {
        animation?: string,
            template?: string,
            navClass?: string,
            activeClass?: string
    }
    declare interface collapse$ICollapseProvider {
        defaults: collapse$ICollapseOptions
    }

    declare interface collapse$ICollapseOptions {
        animation?: string,
            activeClass?: string,
            disallowToggle?: boolean,
            startCollapsed?: boolean,
            allowMultiple?: boolean
    }
    declare interface dropdown$IDropdownProvider {
        defaults: dropdown$IDropdownOptions
    }

    declare interface dropdown$IDropdownService {
        (element: ng.IAugmentedJQuery, config: dropdown$IDropdownOptions): dropdown$IDropdown
    }

    declare interface dropdown$IDropdown {
        show: () => void,
            hide: () => void,
            destroy: () => void
    }

    declare interface dropdown$IDropdownOptions {
        animation?: string,
            placement?: string,
            trigger?: string,
            html?: boolean,
            delay?: number | {
                show: number,
                hide: number
            },
            container?: string | boolean,
            template?: string
    }
    declare interface navbar$INavbarProvider {
        defaults: navbar$INavbarOptions
    }

    declare interface navbar$INavbarOptions {
        activeClass?: string,
            routeAttr?: string
    }

    declare interface navbar$INavbarService {
        defaults: navbar$INavbarOptions
    }
    declare interface scrollspy$IScrollspyProvider {
        defaults: scrollspy$IScrollspyOptions
    }

    declare interface scrollspy$IScrollspyService {
        (element: ng.IAugmentedJQuery, options: scrollspy$IScrollspyOptions): scrollspy$IScrollspy
    }

    declare interface scrollspy$IScrollspy {
        checkOffsets: () => void,
            trackElement: (target: any, source: any) => void,
            untrackElement: (target: any, source: any) => void,
            activate: (index: number) => void
    }

    declare interface scrollspy$IScrollspyOptions {
        target?: string,
            offset?: number
    }
    declare interface affix$IAffixProvider {
        defaults: affix$IAffixOptions
    }

    declare interface affix$IAffixService {
        (element: ng.IAugmentedJQuery, options: affix$IAffixOptions): affix$IAffix
    }

    declare interface affix$IAffix {
        init: () => void,
            destroy: () => void,
            checkPositionWithEventLoop: () => void,
            checkPosition: () => void
    }

    declare interface affix$IAffixOptions {
        offsetTop?: number,
            offsetBottom?: number,
            offsetParent?: number,
            offsetUnpin?: number
    }
}