/**
 * Flowtype definitions for draft-js-0.2.2
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'draft-js' {

    declare var npm$namespace$Draft: {
        convertFromRaw: typeof Draft$convertFromRaw,
        convertToRaw: typeof Draft$convertToRaw,
        genKey: typeof Draft$genKey,
    }
    declare interface Draft$IEditor {
        new(): Draft$Editor
    }

    declare interface Draft$EditorState {
        getCurrentContent(): Draft$ContentState,
            getSelection(): Draft$SelectionState,
            getCurrentInlineStyle(): any,
            getBlockTree(): any,
            createEmpty(decorator?: any): Draft$EditorState,
            createWithContent(contentState: Draft$ContentState, decorator?: any): Draft$EditorState,
            create(config: any): Draft$EditorState,
            push(
                editorState: Draft$EditorState,
                contentState: Draft$ContentState,
                actionType: string): Draft$EditorState,
            undo(editorState: Draft$EditorState): Draft$EditorState,
            redo(editorState: Draft$EditorState): Draft$EditorState,
            acceptSelection(
                editorState: Draft$EditorState,
                selectionState: Draft$SelectionState): Draft$EditorState,
            forceSelection(
                editorState: Draft$EditorState,
                selectionState: Draft$SelectionState): Draft$EditorState,
            moveFocusToEnd(editorState: Draft$EditorState): Draft$EditorState
    }

    declare interface Draft$CompositeDecorator {
        getDecorations(): Array<any>,
            getComponentForKey(): any,
            getPropsForKey(): any
    }

    declare interface Draft$Entity {
        create(type: string, mutability: string, data?: Object): Draft$EntityInstance,
            add(instance: Draft$EntityInstance): string,
            get(key: string): Draft$EntityInstance,
            mergeData(key: string, toMerge: any): Draft$EntityInstance,
            replaceData(key: string, newData: any): Draft$EntityInstance
    }

    declare interface Draft$EntityInstance {
        getData(): any,
            getKey(): string,
            getMutability(): string
    }

    declare interface Draft$BlockMapBuilder {
        createFromArray(blocks: Array<Draft$ContentBlock>): Draft$BlockMap
    }

    declare interface Draft$CharacterMetadata {
        create(config?: any): Draft$CharacterMetadata,
            applyStyle(record: Draft$CharacterMetadata, style: string): Draft$CharacterMetadata,
            removeStyle(record: Draft$CharacterMetadata, style: string): Draft$CharacterMetadata,
            applyEntity(record: Draft$CharacterMetadata, entityKey?: string): Draft$CharacterMetadata,
            getStyle(): any,
            hasStyle(style: string): boolean,
            getEntity(): string
    }

    declare interface Draft$IContentBlock {
        new(draftContentBlock: any): Draft$ContentBlock
    }

    declare interface Draft$ContentBlock {
        key: string,
            type: string,
            text: string,
            characterList: any,
            depth: number,
            getKey(): string,
            getType(): string,
            getText(): string,
            getCharacterList(): any,
            getLength(): number,
            getDepth(): number,
            getInlineStyleAt(offset: number): any,
            getEntityAt(offset: number): string,
            findStyleRanges(filterFn: Function, callback: Function): void,
            findEntityRanges(filterFn: Function, callback: Function): void
    }

    declare interface Draft$ContentState {
        createFromText(text: string): Draft$ContentState,
            createFromBlockArray(blocks: Array<Draft$ContentBlock>): Draft$ContentState,
            getBlockMap(): Draft$BlockMap,
            getSelectionBefore(): Draft$SelectionState,
            getSelectionAfter(): Draft$SelectionState,
            getBlockForKey(key: string): Draft$ContentBlock,
            getKeyBefore(key: string): string,
            getKeyAfter(key: string): string,
            getBlockBefore(key: string): Draft$ContentBlock,
            getBlockAfter(key: string): Draft$ContentBlock,
            getBlocksAsArray(): Array<Draft$ContentBlock>,
            getPlainText(): string,
            hasText(): boolean,
            set(key: string, value: any): Draft$ContentState,
            toJS(): any
    }

    declare interface Draft$ISelectionState {
        new(draftSelectionState: any): Draft$SelectionState,
        createEmpty(blockKey: string): Draft$SelectionState
    }

    declare interface Draft$SelectionState {
        getStartKey(): string,
            getStartOffset(): number,
            getEndKey(): string,
            getEndOffset(): number,
            getAnchorKey(): string,
            getAnchorOffset(): number,
            getFocusKey(): string,
            getFocusOffset(): number,
            getIsBackward(): boolean,
            getHasFocus(): boolean,
            isCollapsed(): boolean,
            hasEdgeWithin(blockKey: string, start: number, end: number): boolean,
            serialize(): string,
            get(key: string): any,
            set(key: string, value: any): Draft$SelectionState
    }

    declare interface Draft$BlockMap {
        get(key: string): Draft$ContentBlock,
            set(key: string, value: any): Draft$BlockMap,
            delete(key: string): Draft$BlockMap,
            find(cb: any): Draft$ContentBlock
    }

    declare interface Draft$Modifier {
        replaceText(
                contentState: Draft$ContentState,
                rangeToReplace: Draft$SelectionState,
                text: string,
                inlineStyle?: any,
                entityKey?: string): Draft$ContentState,
            insertText(
                contentState: Draft$ContentState,
                targetRange: Draft$SelectionState,
                text: string,
                inlineStyle?: any,
                entityKey?: string): Draft$ContentState,
            moveText(
                contentState: Draft$ContentState,
                removalRange: Draft$SelectionState,
                targetRange: Draft$SelectionState): Draft$ContentState,
            replaceWithFragment(
                contentState: Draft$ContentState,
                targetRange: Draft$SelectionState,
                fragment: Draft$BlockMap): Draft$ContentState,
            removeRange(
                contentState: Draft$ContentState,
                rangeToRemove: Draft$SelectionState,
                removalDirection: string): Draft$ContentState,
            splitBlock(
                contentState: Draft$ContentState,
                selectionState: Draft$SelectionState): Draft$ContentState,
            applyInlineStyle(
                contentState: Draft$ContentState,
                selectionState: Draft$SelectionState,
                inlineStyle: string): Draft$ContentState,
            removeInlineStyle(
                contentState: Draft$ContentState,
                selectionState: Draft$SelectionState,
                inlineStyle: string): Draft$ContentState,
            setBlockType(
                contentState: Draft$ContentState,
                selectionState: Draft$SelectionState,
                blockType: string): Draft$ContentState,
            applyEntity(
                contentState: Draft$ContentState,
                selectionState: Draft$SelectionState,
                entityKey: string): Draft$ContentState
    }

    declare interface Draft$RichUtils {
        currentBlockContainsLink(editorState: Draft$EditorState): boolean,
            getCurrentBlockType(editor: Draft$EditorState): string,
            handleKeyCommand(editorState: Draft$EditorState, command: string): any,
            insertSoftNewline(editorState: Draft$EditorState): Draft$EditorState,
            onBackspace(editorState: Draft$EditorState): Draft$EditorState,
            onDelete(editorState: Draft$EditorState): Draft$EditorState,
            onTab(
                event: Event,
                editorState: Draft$EditorState,
                maxDepth: number): Draft$EditorState,
            toggleBlockType(editorState: Draft$EditorState, blockType: string): Draft$EditorState,
            toggleCode(editorState: Draft$EditorState): Draft$EditorState,
            toggleLink(
                editorState: Draft$EditorState,
                targetSelection: Draft$SelectionState,
                entityKey: string): Draft$EditorState,
            tryToRemoveBlockStyle(editorState: Draft$EditorState): Draft$EditorState
    }

    declare interface Draft$EditorProps {
        editorState: Draft$EditorState,
            onChange(editorState: Draft$EditorState): void,
            placeholder?: string,
            textAlignment?: any,
            blockRendererFn?: (ContentBlock: Draft$ContentBlock) => any,
            blockStyleFn?: (ContentBlock: Draft$ContentBlock) => string,
            customStyleMap?: any,
            readOnly?: boolean,
            spellCheck?: boolean,
            stripPastedStyles?: boolean,
            handleReturn?: (e: any) => boolean,
            handleKeyCommand?: (command: string) => boolean,
            handleBeforeInput?: (chars: string) => boolean,
            handlePastedFiles?: (files: Array<Blob>) => boolean,
            handleDroppedFiles?: (selection: Draft$SelectionState, files: Array<Blob>) => boolean,
            handleDrop?: (selection: Draft$SelectionState, dataTransfer: any, isInternal: any) => boolean,
            onEscape?: (e: any) => void,
            onTab?: (e: any) => void,
            onUpArrow?: (e: any) => void,
            onDownArrow?: (e: any) => void,
            suppressContentEditableWarning?: any,
            onBlur?: (e: any) => void,
            onFocus?: (e: any) => void
    }

    declare interface Draft$Editor {
        props: Draft$EditorProps,
            state: any,
            refs: any,
            context: any,
            setState(): any,
            render(): any,
            forceUpdate(): any
    }

    declare var Editor: Draft$IEditor;

    declare var EditorState: Draft$EditorState;

    declare var CompositeDecorator: Draft$CompositeDecorator;

    declare var Entity: Draft$Entity;

    declare var EntityInstance: Draft$EntityInstance;

    declare var BlockMapBuilder: Draft$BlockMapBuilder;

    declare var CharacterMetadata: Draft$CharacterMetadata;

    declare var ContentBlock: Draft$IContentBlock;

    declare var ContentState: Draft$ContentState;

    declare var SelectionState: Draft$ISelectionState;

    declare var Modifier: Draft$Modifier;

    declare var RichUtils: Draft$RichUtils;

    declare function Draft$convertFromRaw(rawState: any): Array<Draft$ContentBlock >

        declare function Draft$convertToRaw(contentState: Draft$ContentState): any

    declare function Draft$genKey(): string
    declare module.exports: typeof Draft
}