// @flow
/**
 * Flowtype definitions for chrome-cast
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'cast' {

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.AutoJoinPolicy
     */
    declare interface AutoJoinPolicy {
        TAB_AND_ORIGIN_SCOPED: string,
            ORIGIN_SCOPED: string,
            PAGE_SCOPED: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.DefaultActionPolicy
     */
    declare interface DefaultActionPolicy {
        CREATE_SESSION: string,
            CAST_THIS_TAB: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Capability
     */
    declare interface Capability {
        VIDEO_OUT: string,
            AUDIO_OUT: string,
            VIDEO_IN: string,
            AUDIO_IN: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ErrorCode
     */
    declare interface ErrorCode {
        CANCEL: string,
            TIMEOUT: string,
            API_NOT_INITIALIZED: string,
            INVALID_PARAMETER: string,
            EXTENSION_NOT_COMPATIBLE: string,
            EXTENSION_MISSING: string,
            RECEIVER_UNAVAILABLE: string,
            SESSION_ERROR: string,
            CHANNEL_ERROR: string,
            LOAD_MEDIA_FAILED: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ReceiverAvailability
     */
    declare interface ReceiverAvailability {
        AVAILABLE: string,
            UNAVAILABLE: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.SenderPlatform
     */
    declare interface SenderPlatform {
        CHROME: string,
            IOS: string,
            ANDROID: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ReceiverType
     */
    declare interface ReceiverType {
        CAST: string,
            HANGOUT: string,
            CUSTOM: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ReceiverAction
     */
    declare interface ReceiverAction {
        CAST: string,
            STOP: string
    }

    /**
     * 
     * @enum  {string}
     * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.SessionStatus
     */
    declare interface SessionStatus {
        CONNECTED: string,
            DISCONNECTED: string,
            STOPPED: string
    }
    declare     var VERSION: Array<number>;
    declare     var isAvailable: boolean;

    /**
     * 
     * @param  
     * @param  
     * @param  
     */
    declare     export function initialize(
        apiConfig: undefined.ApiConfig,
        successCallback: Function,
        errorCallback: (error: undefined.Error) => void): void

    /**
     * 
     * @param  
     * @param  
     * @param  
     * @param  
     */
    declare     export function requestSession(
        successCallback: (session: undefined.Session) => void,
        errorCallback: (error: undefined.Error) => void,
        sessionRequest?: undefined.SessionRequest,
        label?: string): void

    /**
     * 
     * @param  The id of the session to join.
     */
    declare     export function requestSessionById(sessionId: string): void

    /**
     * 
     * @param  
     */
    declare     export function addReceiverActionListener(
        listener: (receiver: undefined.Receiver, receiverAction: undefined.ReceiverAction) => void): void

    /**
     * 
     * @param  
     */
    declare     export function removeReceiverActionListener(
        listener: (receiver: undefined.Receiver, receiverAction: undefined.ReceiverAction) => void): void

    /**
     * 
     * @param  The message to log.
     */
    declare     export function logMessage(message: string): void

    /**
     * 
     * @param  
     * @param  
     * @param  
     */
    declare     export function setCustomReceivers(
        receivers: Array<undefined.Receiver>,
        successCallback: Function,
        errorCallback: (error: undefined.Error) => void): void

    /**
     * 
     * @param  
     * @param  
     * @param  
     */
    declare     export function setReceiverDisplayStatus(
        receiver: undefined.Receiver,
        successCallback: Function,
        errorCallback: (error: undefined.Error) => void): void
    declare interface ApiConfig {

        /**
         * receiverListener
         * @param  
         * @param  
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ApiConfig
         */
        new(
            sessionRequest: undefined.SessionRequest,
            sessionListener: (session: undefined.Session) => void,
            receiverListener: (receiverAvailability: undefined.ReceiverAvailability) => void,
            autoJoinPolicy?: undefined.AutoJoinPolicy,
            defaultActionPolicy?: undefined.DefaultActionPolicy): ApiConfig,
        sessionRequest: undefined.SessionRequest,
            sessionListener: (session: undefined.Session) => void,
            receiverListener: (receiverAvailability: undefined.ReceiverAvailability) => void,
            autoJoinPolicy?: undefined.AutoJoinPolicy,
            defaultActionPolicy: undefined.DefaultActionPolicy
    }
    declare interface Error {

        /**
         * 
         * @param  
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Error
         */
        new(code: undefined.ErrorCode, description?: string, details?: Object): Error,
        code: undefined.ErrorCode,
            description?: string,
            details?: string
    }
    declare interface Image {

        /**
         * 
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Image
         */
        new(url: string): Image,
        url: string,
            height?: number,
            width?: number
    }
    declare interface SenderApplication {

        /**
         * 
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.SenderApplication
         */
        new(platform: undefined.SenderPlatform): SenderApplication,
        platform: undefined.SenderPlatform,
            url?: string,
            packageId?: string
    }
    declare interface SessionRequest {

        /**
         * 
         * @param  
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.SessionRequest
         */
        new(
            appId: string,
            capabilities?: Array<undefined.Capability>,
            timeout?: number): SessionRequest,
        appId: string,
            capabilities: Array<undefined.Capability>,
            requestSessionTimeout: number,
            language?: string
    }
    declare interface Session {

        /**
         * 
         * @param  
         * @param  
         * @param  
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Session
         */
        new(
            sessionId: string,
            appId: string,
            displayName: string,
            appImages: Array<undefined.Image>,
            receiver: undefined.Receiver): Session,
        sessionId: string,
            appId: string,
            displayName: string,
            appImages: Array<undefined.Image>,
            receiver: undefined.Receiver,
            senderApps: Array<undefined.SenderApplication>,
            namespaces: Array<{
                name: string
            }>,
            media: Array<undefined.Media>,
            status: undefined.SessionStatus,

            /**
             * 
             * @param  
             * @param  
             * @param  
             */
            setReceiverVolumeLevel(
                newLevel: number,
                successCallback: Function,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             * @param  
             * @param  
             */
            setReceiverMuted(
                muted: boolean,
                successCallback: Function,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             * @param  
             */
            leave(
                successCallback: Function,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             * @param  
             */
            stop(
                successCallback: Function,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             * @param  
             * @param  
             * @param  
             */
            sendMessage(
                namespace: string,
                message: string,
                successCallback: Function,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             */
            addUpdateListener(listener: (isAlive: boolean) => void): void,

            /**
             * 
             * @param  
             */
            removeUpdateListener(listener: (isAlive: boolean) => void): void,

            /**
             * 
             * @param  
             * @param  
             */
            addMessageListener(
                namespace: string,
                listener: (namespace: string, message: string) => void): void,

            /**
             * 
             * @param  
             * @param  
             */
            removeMessageListener(
                namespace: string,
                listener: (namespace: string, message: string) => void): void,

            /**
             * 
             * @param  
             */
            addMediaListener(listener: (media: undefined.Media) => void): void,

            /**
             * 
             * @param  
             */
            removeMediaListener(listener: (media: undefined.Media) => void): void,

            /**
             * 
             * @param  
             * @param  
             * @param  
             */
            loadMedia(
                loadRequest: undefined.LoadRequest,
                successCallback: (media: undefined.Media) => void,
                errorCallback: (error: undefined.Error) => void): void,

            /**
             * 
             * @param  
             * @param  
             * @param  
             */
            queueLoad(
                queueLoadRequest: undefined.QueueLoadRequest,
                successCallback: (media: undefined.Media) => void,
                errorCallback: (error: undefined.Error) => void): void
    }
    declare interface Receiver {

        /**
         * 
         * @param  
         * @param  
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Receiver
         */
        new(
            label: string,
            friendlyName: string,
            capabilities?: Array<undefined.Capability>,
            volume?: undefined.Volume): Receiver,
        label: string,
            friendlyName: string,
            capabilities: Array<undefined.Capability>,
            volume: undefined.Volume,
            receiverType: undefined.ReceiverType,
            displayStatus: undefined.ReceiverDisplayStatus
    }
    declare interface ReceiverDisplayStatus {

        /**
         * 
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.ReceiverDisplayStatus
         */
        new(statusText: string, appImages: Array<undefined.Image>): ReceiverDisplayStatus,
        statusText: string,
            appImages: Array<undefined.Image >
    }
    declare interface Volume {

        /**
         * 
         * @param  
         * @param  
         * @constructor  * 
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Volume
         */
        new(level?: number, muted?: boolean): Volume,
        level?: number,
            muted?: boolean
    }
    declare module 'media' {
        declare         var DEFAULT_MEDIA_RECEIVER_APP_ID: string;

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.MediaCommand
         */
        declare interface MediaCommand {
            PAUSE: string,
                SEEK: string,
                STREAM_VOLUME: string,
                STREAM_MUTE: string
        }

        /**
         * 
         * @enum  {number}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.MetadataType
         */
        declare interface MetadataType {
            GENERIC: number,
                TV_SHOW: number,
                MOVIE: number,
                MUSIC_TRACK: number,
                PHOTO: number
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.PlayerState
         */
        declare interface PlayerState {
            IDLE: string,
                PLAYING: string,
                PAUSED: string,
                BUFFERING: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.ResumeState
         */
        declare interface ResumeState {
            PLAYBACK_START: string,
                PLAYBACK_PAUSE: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.StreamType
         */
        declare interface StreamType {
            BUFFERED: string,
                LIVE: string,
                OTHER: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.IdleReason
         */
        declare interface IdleReason {
            CANCELLED: string,
                INTERRUPTED: string,
                FINISHED: string,
                ERROR: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media#.RepeatMode
         */
        declare interface RepeatMode {
            OFF: string,
                ALL: string,
                SINGLE: string,
                ALL_AND_SHUFFLE: string
        }
        declare interface QueueItem {

            /**
             * 
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueItem
             */
            new(mediaInfo: undefined.MediaInfo): QueueItem,
            activeTrackIds: Array<Number>,
                autoplay: boolean,
                customData: Object,
                itemId: number,
                media: undefined.MediaInfo,
                preloadTime: number,
                startTime: number
        }
        declare interface QueueLoadRequest {

            /**
             * 
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueLoadRequest
             */
            new(items: Array<undefined.QueueItem>): QueueLoadRequest,
            customData: Object,
                items: Array<undefined.QueueItem>,
                repeatMode: undefined.RepeatMode,
                startIndex: number
        }
        declare interface QueueInsertItemsRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueInsertItemsRequest
             */
            new(itemsToInsert: Array<undefined.QueueItem>): QueueInsertItemsRequest,
            customData: Object,
                insertBefore: number,
                items: Array<undefined.QueueItem >
        }
        declare interface QueueRemoveItemsRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueRemoveItemsRequest
             */
            new(itemIdsToRemove: Array<number>): QueueRemoveItemsRequest,
            customData: Object,
                itemIds: Array<number >
        }
        declare interface QueueReorderItemsRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueReorderItemsRequest
             */
            new(itemIdsToReorder: Array<number>): QueueReorderItemsRequest,
            customData: Object,
                insertBefore: number,
                itemIds: Array<number >
        }
        declare interface QueueUpdateItemsRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.QueueUpdateItemsRequest
             */
            new(itemsToUpdate: Array<undefined.QueueItem>): QueueUpdateItemsRequest,
            customData: Object,
                item: Array<undefined.QueueItem >
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TrackType
         */
        declare interface TrackType {
            TEXT: string,
                AUDIO: string,
                VIDEO: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackType
         */
        declare interface TextTrackType {
            SUBTITLES: string,
                CAPTIONS: string,
                DESCRIPTIONS: string,
                CHAPTERS: string,
                METADATA: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackEdgeType
         */
        declare interface TextTrackEdgeType {
            NONE: string,
                OUTLINE: string,
                DROP_SHADOW: string,
                RAISED: string,
                DEPRESSED: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackWindowType
         */
        declare interface TextTrackWindowType {
            NONE: string,
                NORMAL: string,
                ROUNDED_CORNERS: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackFontGenericFamily
         */
        declare interface TextTrackFontGenericFamily {
            SANS_SERIF: string,
                MONOSPACED_SANS_SERIF: string,
                SERIF: string,
                MONOSPACED_SERIF: string,
                CASUAL: string,
                CURSIVE: string,
                SMALL_CAPITALS: string
        }

        /**
         * 
         * @enum  {string}
         * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackFontStyle
         */
        declare interface TextTrackFontStyle {
            NORMAL: string,
                BOLD: string,
                BOLD_ITALIC: string,
                ITALIC: string
        }
        declare interface GetStatusRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.GetStatusRequest
             */
            new(): GetStatusRequest,
            customData: Object
        }
        declare interface PauseRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.PauseRequest
             */
            new(): PauseRequest,
            customData: Object
        }
        declare interface PlayRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.PlayRequest
             */
            new(): PlayRequest,
            customData: Object
        }
        declare interface SeekRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.SeekRequest
             */
            new(): SeekRequest,
            currentTime: number,
                resumeState: undefined.ResumeState,
                customData: Object
        }
        declare interface StopRequest {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.StopRequest
             */
            new(): StopRequest,
            customData: Object
        }
        declare interface VolumeRequest {

            /**
             * 
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.VolumeRequest
             */
            new(volume: undefined.Volume): VolumeRequest,
            volume: undefined.Volume,
                customData: Object
        }
        declare interface LoadRequest {

            /**
             * 
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest
             */
            new(mediaInfo: undefined.MediaInfo): LoadRequest,
            activeTrackIds: Array<number>,
                autoplay: boolean,
                currentTime: number,
                customData: Object,
                media: undefined.MediaInfo
        }
        declare interface EditTracksInfoRequest {

            /**
             * 
             * @param  
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.EditTracksInfoRequest
             */
            new(
                activeTrackIds?: Array<number>,
                textTrackStyle?: undefined.TextTrackStyle): EditTracksInfoRequest,
            activeTrackIds: Array<number>,
                textTrackStyle: undefined.TextTrackStyle
        }
        declare interface GenericMediaMetadata {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.GenericMediaMetadata
             */
            new(): GenericMediaMetadata,
            images: Array<undefined.Image>,
                metadataType: undefined.MetadataType,
                releaseDate: string,

                /**
                 * 
                 * @deprecated  . Use releaseDate instead. 
                 */
                releaseYear: number,
                subtitle: string,
                title: string,

                /**
                 * 
                 * @deprecated  . Use metadataType instead. 
                 */
                type: undefined.MetadataType
        }
        declare interface MovieMediaMetadata {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.MovieMediaMetadata
             */
            new(): MovieMediaMetadata,
            images: Array<undefined.Image>,
                metadataType: undefined.MetadataType,
                releaseDate: string,

                /**
                 * 
                 * @deprecated  . Use releaseDate instead. 
                 */
                releaseYear: number,
                subtitle: string,
                title: string,
                studio: string,

                /**
                 * 
                 * @deprecated  . Use metadataType instead. 
                 */
                type: undefined.MetadataType
        }
        declare interface TvShowMediaMetadata {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TvShowMediaMetadata
             */
            new(): TvShowMediaMetadata,
            metadataType: undefined.MetadataType,
                seriesTitle: string,
                title: string,
                season: number,
                episode: number,
                images: Array<undefined.Image>,
                originalAirdate: string,

                /**
                 * 
                 * @deprecated  . Use metadataType instead. 
                 */
                type: undefined.MetadataType,

                /**
                 * 
                 * @deprecated  . Use title instead. 
                 */
                episodeTitle: string,

                /**
                 * 
                 * @deprecated  . Use season instead. 
                 */
                seasonNumber: number,

                /**
                 * 
                 * @deprecated  . Use episode instead. 
                 */
                episodeNumber: number,

                /**
                 * 
                 * @deprecated  . Use originalAirdate instead. 
                 */
                releaseYear: number
        }
        declare interface MusicTrackMediaMetadata {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.MusicTrackMediaMetadata
             */
            new(): MusicTrackMediaMetadata,
            metadataType: undefined.MetadataType,
                albumName: string,
                title: string,
                albumArtist: string,
                artist: string,
                composer: string,
                songName: string,
                trackNumber: number,
                discNumber: number,
                images: Array<undefined.Image>,
                releaseDate: string,

                /**
                 * 
                 * @deprecated  . Use metadataType instead. 
                 */
                type: undefined.MetadataType,

                /**
                 * 
                 * @deprecated  . Use artist instead. 
                 */
                artistName: string,

                /**
                 * 
                 * @deprecated  . Use releaseDate instead. 
                 */
                releaseYear: number
        }
        declare interface PhotoMediaMetadata {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.PhotoMediaMetadata
             */
            new(): PhotoMediaMetadata,
            metadataType: undefined.MetadataType,
                title: string,
                artist: string,
                location: string,
                images: Array<undefined.Image>,
                latitude: number,
                longitude: number,
                width: number,
                height: number,
                creationDateTime: string,

                /**
                 * 
                 * @deprecated  . Use metadataType instead. 
                 */
                type: undefined.MetadataType
        }
        declare interface MediaInfo {

            /**
             * 
             * @param  
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.MediaInfo
             */
            new(contentId: string, contentType: string): MediaInfo,
            contentId: string,
                streamType: undefined.StreamType,
                contentType: string,
                metadata: Object,
                duration: number,
                tracks: Array<undefined.Track>,
                textTrackStyle: undefined.TextTrackStyle,
                customData: Object
        }
        declare interface Media {

            /**
             * 
             * @param  
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Media
             */
            new(sessionId: string, mediaSessionId: number): Media,
            activeTrackIds: Array<number>,
                currentItemId: number,
                customData: Object,
                idleReason: undefined.IdleReason,
                items: Array<undefined.QueueItem>,
                loadingItemId: number,
                media: undefined.MediaInfo,
                mediaSessionId: number,
                playbackRate: number,
                playerState: undefined.PlayerState,
                preloadedItemId: number,
                repeatMode: undefined.RepeatMode,
                sessionId: string,
                supportedMediaCommands: Array<undefined.MediaCommand>,
                volume: undefined.Volume,

                /**
                 * 
                 * @deprecated  . Use getEstimatedTime instead 
                 */
                currentTime: number,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                getStatus(
                    getStatusRequest: undefined.GetStatusRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                play(
                    playRequest: undefined.PlayRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                pause(
                    pauseRequest: undefined.PauseRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                seek(
                    seekRequest: undefined.SeekRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                stop(
                    stopRequest: undefined.StopRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                setVolume(
                    volumeRequest: undefined.VolumeRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                editTracksInfo(
                    editTracksInfoRequest: undefined.EditTracksInfoRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @return  
                 */
                supportsCommand(command: undefined.MediaCommand): boolean,

                /**
                 * 
                 * @param  
                 */
                addUpdateListener(listener: (isAlive: boolean) => void): void,

                /**
                 * 
                 * @param  
                 */
                removeUpdateListener(listener: (isAlive: boolean) => void): void,

                /**
                 * 
                 * @return  * 
                 * @suppress  {deprecated} Uses currentTime member to compute estimated time.
                 */
                getEstimatedTime(): number,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueAppendItem(
                    item: undefined.QueueItem,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueInsertItems(
                    queueInsertItemsRequest: undefined.QueueInsertItemsRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueJumpToItem(
                    itemId: number,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 * @param  
                 */
                queueMoveItemToNewIndex(
                    itemId: number,
                    newIndex: number,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 */
                queueNext(
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 */
                queuePrev(
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueRemoveItem(
                    itemId: number,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueReorderItems(
                    queueReorderItemsRequest: undefined.QueueReorderItemsRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueSetRepeatMode(
                    repeatMode: undefined.RepeatMode,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void,

                /**
                 * 
                 * @param  
                 * @param  
                 * @param  
                 */
                queueUpdateItems(
                    queueUpdateItemsRequest: undefined.QueueUpdateItemsRequest,
                    successCallback: Function,
                    errorCallback: (error: undefined.Error) => void): void
        }
        declare interface Track {

            /**
             * 
             * @param  
             * @param  
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Track
             */
            new(trackId: number, trackType: undefined.TrackType): Track,
            trackId: number,
                trackContentId: string,
                trackContentType: string,
                type: undefined.TrackType,
                name: string,
                language: string,
                subtype: undefined.TextTrackType,
                customData: Object
        }
        declare interface TextTrackStyle {

            /**
             * 
             * @constructor  * 
             * @see  https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.TextTrackStyle
             */
            new(): TextTrackStyle,
            foregroundColor: string,
                backgroundColor: string,
                edgeType: undefined.TextTrackEdgeType,
                edgeColor: string,
                windowType: undefined.TextTrackWindowType,
                windowColor: string,
                windowRoundedCornerRadius: number,
                fontScale: number,
                fontFamily: string,
                fontGenericFamily: undefined.TextTrackFontGenericFamily,
                fontStyle: undefined.TextTrackFontStyle,
                customData: Object
        }
        declare module 'timeout' {
            declare             var load: number;
            declare             var getStatus: number;
            declare             var play: number;
            declare             var pause: number;
            declare             var seek: number;
            declare             var stop: number;
            declare             var setVolume: number;
            declare             var editTracksInfo: number;
            declare             var queueInsert: number;
            declare             var queueLoad: number;
            declare             var queueRemove: number;
            declare             var queueReorder: number;
            declare             var queueUpdate: number;
        }

    }

}