/**
 * Flowtype definitions for leaflet-label
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface L$IconOptions {
    labelAnchor?: Point
}

declare export interface L$PathOptions {
    labelAnchor?: Point
}

declare export interface L$CircleMarkerOptions {
    labelAnchor?: Point
}

declare export interface L$Marker {
    showLabel(): L$Marker,
        hideLabel(): L$Marker,
        setLabelNoHide(noHide: boolean): void,
        bindLabel(content: string, options?: L$LabelOptions): L$Marker,
        unbindLabel(): L$Marker,
        updateLabelContent(content: string): void,
        getLabel(): L$Label,
        setOpacity(opacity: number, labelHasSemiTransparency: boolean): void
}

declare export interface L$CircleMarker {
    showLabel(): L$CircleMarker,
        hideLabel(): L$CircleMarker,
        setLabelNoHide(noHide: boolean): void,
        bindLabel(content: string, options?: L$LabelOptions): L$CircleMarker,
        unbindLabel(): L$CircleMarker,
        updateLabelContent(content: string): void,
        getLabel(): L$Label
}

declare export interface L$FeatureGroup<T>{
    clearLayers(): L$FeatureGroup<T>,
    bindLabel(content: string, options?: L$LabelOptions): L$FeatureGroup<T>,
    unbindLabel(): L$FeatureGroup<T>,
    updateLabelContent(content: string): L$FeatureGroup<T >
}

declare export interface L$Path {
    bindLabel(content: string, options?: L$LabelOptions): L$Path,
        unbindLabel(): L$Path,
        updateLabelContent(content: string): void
}

declare export interface L$LabelOptions {
    className?: string,
        clickable?: boolean,
        direction?: string,
        pane?: string,
        noHide?: boolean,
        offset?: Point,
        opacity?: number,
        zoomAnimation?: boolean
}

declare export type L$LabelStatic = {
    new(options?: L$LabelOptions): L$Label
} & ClassStatic


declare export var Label: L$LabelStatic;

declare export type L$Label = {
    onAdd(map: Map): void,
    onRemove(map: Map): void,
    setLatLng(latlng: LatLng): L$Label,
    setContent(content: string): L$Label,
    close(): void,
    updateZIndex(zIndex: number): void,
    setOpacity(opacity: number): void
} & IEventPowered