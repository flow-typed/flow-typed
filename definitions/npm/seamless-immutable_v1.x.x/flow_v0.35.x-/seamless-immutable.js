/**
 * Flowtype definitions for seamless-immutable
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$SeamlessImmutable: {
    from: typeof SeamlessImmutable$from,
    isImmutable: typeof SeamlessImmutable$isImmutable,
    ImmutableError: typeof SeamlessImmutable$ImmutableError,
}
declare interface SeamlessImmutable$MergeConfig {
    deep?: boolean,
        merger?: Function
}

declare interface SeamlessImmutable$Options {
    prototype?: any
}

declare interface SeamlessImmutable$AsMutableOptions {
    deep: boolean
}

declare export interface SeamlessImmutable$ImmutableObject<T>{
    set(property: string, value: any): SeamlessImmutable$ImmutableObject<any>,
    setIn(
        propertyPath: Array<string>,
        value: any): SeamlessImmutable$ImmutableObject<any>,
    asMutable(): T,
    asMutable(opts: SeamlessImmutable$AsMutableOptions): T,
    merge(
        part: any,
        config?: SeamlessImmutable$MergeConfig): SeamlessImmutable$ImmutableObject<T>,
    update(
        property: string,
        updaterFunction: (value: any, ...additionalParamters: any[]) => any,
        ...additionalArguments: any[]): SeamlessImmutable$ImmutableObject<T>,
    updateIn(
        propertyPath: Array<string>,
        updaterFunction: (value: any, ...additionalParamters: any[]) => any,
        ...additionalArguments: any[]): SeamlessImmutable$ImmutableObject<T>,
    without(property: string): SeamlessImmutable$ImmutableObject<any>,
    without(...properties: string[]): SeamlessImmutable$ImmutableObject<any>,
    without(
        filter: (value: any, key: string) => boolean): SeamlessImmutable$ImmutableObject<any >
}

declare export interface SeamlessImmutable$ImmutableArray<T>{
    asMutable(): Array<T>,
    asMutable(opts: SeamlessImmutable$AsMutableOptions): Array<T>,
    asObject(toKeyValue: (item: T) => Array<any>): SeamlessImmutable$ImmutableObject<T>,
    flatMap(mapFunction: (item: T) => Array<any>): SeamlessImmutable$ImmutableArray<any >
}

declare export type SeamlessImmutable$Immutable<T>= T & (SeamlessImmutable$ImmutableObject<T>| SeamlessImmutable$ImmutableArray<T>);

declare export function SeamlessImmutable$from<T>(
        obj: Array<T>,
        options?: SeamlessImmutable$Options): Array<T>& SeamlessImmutable$ImmutableArray<T >

    declare export function SeamlessImmutable$isImmutable(target: any): boolean

declare export function SeamlessImmutable$ImmutableError(message: string): Errordeclare module 'seamless-immutable' {
    declare module.exports: typeof SeamlessImmutable
}