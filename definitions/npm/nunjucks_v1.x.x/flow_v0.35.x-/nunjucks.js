/**
 * Flowtype definitions for nunjucks
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$nunjucks: {
    render: typeof nunjucks$render,
    renderString: typeof nunjucks$renderString,
    compile: typeof nunjucks$compile,
    precompile: typeof nunjucks$precompile,
    precompileString: typeof nunjucks$precompileString,
    configure: typeof nunjucks$configure,
    installJinjaCompat: typeof nunjucks$installJinjaCompat,
}
declare
export function nunjucks$render(name: string, context?: Object): string

declare
export function nunjucks$renderString(src: string, context: Object): string

declare
export function nunjucks$compile(src: string, env?: nunjucks$Environment): nunjucks$Template

declare
export function nunjucks$precompile(path: string, opts?: nunjucks$PrecompileOptions): string

declare
export function nunjucks$precompileString(src: string, opts?: nunjucks$PrecompileOptions): string

declare
export interface nunjucks$PrecompileOptions {
    name?: string,
        asFunction?: boolean,
        force?: boolean,
        env?: nunjucks$Environment,
        include?: string[],
        exclude?: string[],
        wrapper(
            templates: {
                name: string,
                template: string
            },
            opts: nunjucks$PrecompileOptions): string
}

declare
export class Template {
    constructor(src: string, env?: nunjucks$Environment, eagerCompile?: boolean): this;
    render(context?: Object): string;
    render(context?: Object, callback?: (err: any, res: string) => any): void
}

declare
export function nunjucks$configure(options: nunjucks$ConfigureOptions): nunjucks$Environment

declare
export interface nunjucks$ConfigureOptions {
    autoescape?: boolean,
        throwOnUndefined?: boolean,
        trimBlocks?: boolean,
        lstripBlocks?: boolean,
        watch?: boolean,
        noCache?: boolean,
        web?: {
            useCache?: boolean,
            async?: boolean
        },
        express?: Object,
        tags?: {
            blockStart?: string,
            blockEnd?: string,
            variableStart?: string,
            variableEnd?: string,
            commentStart?: string,
            commentEnd?: string
        }
}

declare
export class Environment {
    options: {
        autoescape: boolean
    };
    constructor(): this;
    constructor(loader: nunjucks$ILoader, opts?: nunjucks$ConfigureOptions): this;
    constructor(loaders: nunjucks$ILoader[], opts?: nunjucks$ConfigureOptions): this;
    render(name: string, context?: Object): string;
    render(
        name: string,
        context?: Object,
        callback?: (err: any, res: string) => any): void;
    renderString(name: string, context: Object): string;
    renderString(name: string, context: Object, callback?: (err: any, res: string) => any): void;
    addFilter(name: string, func: (...args: any[]) => any, async?: boolean): void;
    getFilter(name: string): void;
    addExtension(name: string, ext: nunjucks$Extension): void;
    removeExtension(name: string): void;
    getExtension(name: string): nunjucks$Extension;
    hasExtension(name: string): void;
    addGlobal(name: string, value: any): void;
    getTemplate(name: string, eagerCompile?: boolean): nunjucks$Template;
    getTemplate(
        name: string,
        eagerCompile?: boolean,
        callback?: (err: any, templ: nunjucks$Template) => nunjucks$Template): void;
    express(app: Object): void
}

declare
export interface nunjucks$Extension {
    tags: string[],
        parse(parser: any, nodes: any, lexer: any): any
}

declare
export function nunjucks$installJinjaCompat(): void

declare
export interface nunjucks$ILoader {
    async?: boolean,
    getSource(name: string): nunjucks$LoaderSource,
        extend(extender: nunjucks$ILoader): nunjucks$ILoader
}

declare
export class Loader {
    on(name: string, func: (...args: any[]) => any): void;
    emit(name: string, ...args: any[]): void;
    resolve(from: string, to: string): string;
    isRelative(filename: string): boolean;
    extend(toExtend: nunjucks$ILoader): nunjucks$ILoader
}

declare
export interface nunjucks$LoaderSource {
    src: string,
        path: string,
        noCache: boolean
}

declare
export class FileSystemLoader mixins Loader, ILoader {
    init(searchPaths: string[], opts: any): void;
    getSource(name: string): nunjucks$LoaderSource
}

declare
export class WebLoader mixins ILoader {
    constructor(baseUrl: string, opts?: any): this;
    getSource(name: string): nunjucks$LoaderSource
}

declare
export class PrecompiledLoader mixins Loader, ILoader {
    init(searchPaths: string[], opts: any): void;
    getSource(name: string): nunjucks$LoaderSource
}
declare module 'nunjucks' {
    declare module.exports: typeof nunjucks
}