// @flow
/**
 * Flowtype definitions for crypto-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type CryptoJS$Hash = (message: string, key?: string, ...options: any[]) => string;

declare interface CryptoJS$Cipher {
    encrypt(
            message: string,
            secretPassphrase: string,
            option?: CryptoJS$CipherOption): CryptoJS$WordArray,
        decrypt(
            encryptedMessage: string | CryptoJS$WordArray,
            secretPassphrase: string,
            option?: CryptoJS$CipherOption): CryptoJS$DecryptedMessage
}

declare interface CryptoJS$CipherAlgorythm {
    createEncryptor(secretPassphrase: string, option?: CryptoJS$CipherOption): CryptoJS$Encriptor,
        createDecryptor(secretPassphrase: string, option?: CryptoJS$CipherOption): CryptoJS$Decryptor
}

declare interface CryptoJS$Encriptor {
    process(messagePart: string): string,
        finalize(): string
}

declare interface CryptoJS$Decryptor {
    process(messagePart: string): string,
        finalize(): string
}

declare export interface CryptoJS$WordArray {
    iv: string,
        salt: string,
        ciphertext: string,
        key?: string
}

declare export type CryptoJS$DecryptedMessage = {
    toString(encoder?: CryptoJS$Encoder): string
};

declare interface CryptoJS$CipherOption {
    iv?: string,
        mode?: CryptoJS$Mode,
        padding?: CryptoJS$Padding, [option: string]: any
}

declare interface CryptoJS$Encoder {
    parse(encodedMessage: string): any,
        stringify(words: any): string
}

declare interface CryptoJS$Mode {}

declare interface CryptoJS$Padding {}

declare export interface CryptoJS$Hashes {
    MD5: CryptoJS$Hash,
        SHA1: CryptoJS$Hash,
        SHA256: CryptoJS$Hash,
        SHA224: CryptoJS$Hash,
        SHA512: CryptoJS$Hash,
        SHA384: CryptoJS$Hash,
        SHA3: CryptoJS$Hash,
        RIPEMD160: CryptoJS$Hash,
        HmacMD5: CryptoJS$Hash,
        HmacSHA1: CryptoJS$Hash,
        HmacSHA256: CryptoJS$Hash,
        HmacSHA224: CryptoJS$Hash,
        HmacSHA512: CryptoJS$Hash,
        HmacSHA384: CryptoJS$Hash,
        HmacSHA3: CryptoJS$Hash,
        HmacRIPEMD160: CryptoJS$Hash,
        PBKDF2: CryptoJS$Hash,
        AES: CryptoJS$Cipher,
        DES: CryptoJS$Cipher,
        TripleDES: CryptoJS$Cipher,
        RC4: CryptoJS$Cipher,
        RC4Drop: CryptoJS$Cipher,
        Rabbit: CryptoJS$Cipher,
        RabbitLegacy: CryptoJS$Cipher,
        EvpKDF: CryptoJS$Cipher,
        algo: {
            AES: CryptoJS$CipherAlgorythm,
            DES: CryptoJS$CipherAlgorythm,
            TrippleDES: CryptoJS$CipherAlgorythm,
            RC4: CryptoJS$CipherAlgorythm,
            RC4Drop: CryptoJS$CipherAlgorythm,
            Rabbit: CryptoJS$CipherAlgorythm,
            RabbitLegacy: CryptoJS$CipherAlgorythm,
            EvpKDF: CryptoJS$CipherAlgorythm
        },
        format: {
            OpenSSL: any,
            Hex: any
        },
        enc: {
            Latin1: CryptoJS$Encoder,
            Utf8: CryptoJS$Encoder,
            Hex: CryptoJS$Encoder,
            Utf16: CryptoJS$Encoder,
            Utf16LE: CryptoJS$Encoder,
            Base64: CryptoJS$Encoder
        },
        mode: {
            CBC: CryptoJS$Mode,
            CFB: CryptoJS$Mode,
            CTR: CryptoJS$Mode,
            CTRGladman: CryptoJS$Mode,
            OFB: CryptoJS$Mode,
            ECB: CryptoJS$Mode
        },
        pad: {
            Pkcs7: CryptoJS$Padding,
            AnsiX923: CryptoJS$Padding,
            Iso10126: CryptoJS$Padding,
            Iso97971: CryptoJS$Padding,
            ZeroPadding: CryptoJS$Padding,
            NoPadding: CryptoJS$Padding
        }
}

declare export var hashes: CryptoJS$Hashes;
declare module 'crypto-js' {
    declare module.exports: typeof hashes
}