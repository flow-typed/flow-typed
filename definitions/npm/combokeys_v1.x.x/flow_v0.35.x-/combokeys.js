/**
 * Flowtype definitions for combokeys
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Combokeys$CombokeysStatic {
    new(element: Element): Combokeys$Combokeys,

    /**
     * all instances of Combokeys
     */
    instances: Combokeys$Combokeys[],

        /**
         * reset all instances
         */
        reset(): void
}

declare interface Combokeys$Combokeys {
    element: Element,

        /**
         * binds an event to Combokeys
         * 
        can be a single key, a combination of keys separated with +,
        an array of keys, or a sequence of keys separated by spaces

        be sure to list the modifier keys first to make sure that the
        correct key ends up getting bound (the last key in the pattern)
         * @param  combination or combinations
         * @param  function
         * @param  - one of "keypress", "keydown", or "keyup"
         * @returns  void
        */
        bind(keys: string | string[], callback: () => void, action?: string): void,

        /**
         * binds multiple combinations to the same callback
         * @param  combinations
         * @param  function
         * @param  - one of "keypress", "keydown", or "keyup"
         * @returns  void
         */
        bindMultiple(keys: string[], callback: () => void, action?: string): void,

        /**
         * unbinds an event to Combokeys
         * 
        the unbinding sets the callback function of the specified key combo
        to an empty function and deletes the corresponding key in the
        directMap dict.

        the keycombo+action has to be exactly the same as
        it was defined in the bind method
         * @param  combination or combinations
         * @param  - one of "keypress", "keydown", or "keyup"
         * @returns  void
        */
        unbind(keys: string | string[], action?: string): void,

        /**
         * triggers an event that has already been bound
         * @param  combination
         * @param  - one of "keypress", "keydown", or "keyup"
         * @returns  void
         */
        trigger(keys: string, action?: string): void,

        /**
         * resets the library back to its initial state. This is useful
         * if you want to clear out the current keyboard shortcuts and bind
        new ones - for example if you switch to another page
         * @returns  void
        */
        reset(): void,

        /**
         * should we stop this event before firing off callbacks
         * @param  
         * @param  element
         * @return  
         */
        stopCallback(e: Event, element: Element): boolean,

        /**
         * detach all listners from the bound element
         * @return  
         */
        detach(): void
}
declare var combokeys: Combokeys$CombokeysStatic;
declare module 'combokeys' {
    declare module.exports: typeof combokeys
}