/**
 * Flowtype definitions for shelljs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'shelljs' {

    /**
     * Changes to directory dir for the duration of the script
     * @param  Directory to change in.
     */
    declare export function cd(dir: string): void

    /**
     * Returns the current directory.
     * @return  The current directory.
     */
    declare export function pwd(): string

    /**
     * Returns array of files in the given path, or in current directory if no path provided....paths Paths to search.
     * @return  An array of files in the given path(s).
     */
    declare export function ls(...paths: string[]): string[]

    /**
     * Returns array of all files (however deep) in the given paths....path   The path(s) to search.
     * @return  An array of all files (however deep) in the given path(s).
     */
    declare export function find(...path: string[]): string[]

    /**
     * Copies files. The wildcard  is accepted.
     * @param  The source.
     * @param  The destination.
     */
    declare export function cp(source: string, dest: string): void

    /**
     * Removes files. The wildcard  is accepted....files Files to remove.
     */
    declare export function rm(...files: string[]): void

    /**
     * Moves files. The wildcard  is accepted.
     * @param  The source.
     * @param  The destination.
     */
    declare export function mv(source: string, dest: string): void

    /**
     * Creates directories....dir Directories to create.
     */
    declare export function mkdir(...dir: string[]): void

    /**
     * Evaluates expression using the available primaries and returns corresponding value.
     * @param  '-b': true if path is a block device; '-c': true if path is a character device; '-d': true if path is a directory; '-e': true if path exists; '-f': true if path is a regular file; '-L': true if path is a symboilc link; '-p': true if path is a pipe (FIFO); '-S': true if path is a socket
     * @param  The path.
     * @return  See option parameter.
     */
    declare export function test(option: string, path: string): boolean

    /**
     * Returns a string containing the given file, or a concatenated string containing the files if more than one file is given (a new line character is introduced between each file). Wildcard  accepted....files Files to use.
     * @return  A string containing the given file, or a concatenated string containing the files if more than one file is given (a new line character is introduced between each file).
     */
    declare export function cat(...files: string[]): string
    declare export interface String {

        /**
         * Analogous to the redirection operator>in Unix, but works with JavaScript strings (such as those returned by cat, grep, etc). Like Unix redirections, to() will overwrite any existing file!
         * @param  The file to use.
         */
        to(file: string): void,

            /**
             * Analogous to the redirect-and-append operator >> in Unix, but works with JavaScript strings (such as those returned by cat, grep, etc).
             * @param  The file to append to.
             */
            toEnd(file: string): void
    }

    /**
     * Reads an input string from file and performs a JavaScript replace() on the input using the given search regex and replacement string or function. Returns the new string after replacement.
     * @param  The regular expression to use for search.
     * @param  The replacement.
     * @param  The file to process.
     * @return  The new string after replacement.
     */
    declare export function sed(searchRegex: RegExp, replacement: string, file: string): string

    /**
     * Reads input string from given files and returns a string containing all lines of the file that match the given regex_filter. Wildcard  accepted....files     The files to process.
     * @param  The regular expression to use.
     * @return  Returns a string containing all lines of the file that match the given regex_filter.
     */
    declare export function grep(regex_filter: RegExp, ...files: string[]): string

    /**
     * Searches for command in the system's PATH. On Windows looks for .exe, .cmd, and .bat extensions.
     * @param  The command to search for.
     * @return  Returns string containing the absolute path to the command.
     */
    declare export function which(command: string): string

    /**
     * Prints string to stdout, and returns string with additional utility methods like .to()....text The text to print.
     * @return  Returns the string that was passed as argument.
     */
    declare export function echo(...text: string[]): string

    /**
     * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
     * @param  Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.
     * @return  Returns an array of paths in the stack.
     */
    declare export function pushd(dir: "+N"): string[]

    /**
     * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
     * @param  Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.
     * @return  Returns an array of paths in the stack.
     */
    declare export function popd(dir: "+N"): string[]

    /**
     * Clears the directory stack by deleting all of the elements.
     * @param  Clears the directory stack by deleting all of the elements.
     * @return  Returns an array of paths in the stack, or a single path if +N or -N was specified.
     */
    declare export function dirs(options: "-c"): string[]

    /**
     * Links source to dest. Use -f to force the link, should dest already exist.
     * @param  The source.
     * @param  The destination.
     */
    declare export function ln(source: string, dest: string): void

    /**
     * Exits the current process with the given exit code.
     * @param  The exit code.
     */
    declare export function exit(code: number): void
    declare export var env: {
        [key: string]: string
    };

    /**
     * Executes the given command synchronously.
     * @param  The command to execute.
     * @return  Returns an object containing the return code and output as string.
     */
    declare export function exec(command: string): ExecOutputReturnValue
    declare export interface ExecCallback {
        (code: number, output: string, error?: string): any
    }
    declare export interface ExecOptions {
        silent?: boolean,
            async?: boolean
    }
    declare export interface ExecOutputReturnValue {
        code: number,
            output: string
    }

    /**
     * Alters the permissions of a file or directory by either specifying the absolute permissions in octal form or expressing the changes in symbols. This command tries to mimic the POSIX behavior as much as possible. Notable exceptions:
     * - In symbolic modes, 'a-r' and '-r' are identical. No consideration is given to the umask.
    - There is no "quiet" option since default behavior is to run silent.
     * @param  The access mode. Octal.
     * @param  The file to use.
    */
    declare export function chmod(octalMode: number, file: string): void

    /**
     * Searches and returns string containing a writeable, platform-dependent temporary directory. Follows Python's tempfile algorithm.
     * @return  The temp file path.
     */
    declare export function tempdir(): string

    /**
     * Tests if error occurred in the last command.
     * @return  Returns null if no error occurred, otherwise returns string explaining the error
     */
    declare export function error(): string
    declare export function touch(...files: string[]): void
    declare type TouchOptionsLiteral = "-a" |
        "-c" |
        "-m" |
        "-d" |
        "-r";

    /**
     * Update the access and modification times of each FILE to the current time. A FILE argument that does not exist is created empty, unless -c is supplied
     */
    declare type touchOptionsArray = {-d?: string,
        -r?: string
    };
    declare interface ShellConfig {

        /**
         * Suppresses all command output if true, except for echo() calls. Default is false.
         * @type  
         */
        silent: boolean,

            /**
             * If true the script will die on errors. Default is false.
             * @type  
             */
            fatal: boolean
    }
    declare export var config: ShellConfig;
}