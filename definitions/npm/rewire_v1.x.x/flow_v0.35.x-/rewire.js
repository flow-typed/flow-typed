/**
 * Flowtype definitions for rewire
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface RewireInterfaces$Rewire {

    /**
     * Returns a rewired version of the module found at filename. Use rewire() exactly like require().
     */
    (filename: string): RewireInterfaces$RewiredModule
}

declare interface RewireInterfaces$RewiredModule {

    /**
     * Takes all enumerable keys of obj as variable names and sets the values respectively. Returns a function which can be called to revert the change.
     */
    ___set__(obj: Object): Function,

        /**
         * Sets the internal variable name to the given value. Returns a function which can be called to revert the change.
         */
        ___set__(name: string, value: any): Function,

        /**
         * Returns the private variable with the given name.
         */
        ___get__(name: string): any,

        /**
         * Returns a function which - when being called - sets obj, executes the given callback and reverts obj. If callback returns a promise, obj is only reverted after
         * the promise has been resolved or rejected. For your convenience the returned function passes the received promise through.
         */
        ___with__(obj: Object): (callback: Function) => any
}
declare var rewire: RewireInterfaces$Rewire;
declare module 'rewire' {
    declare module.exports: typeof rewire
}