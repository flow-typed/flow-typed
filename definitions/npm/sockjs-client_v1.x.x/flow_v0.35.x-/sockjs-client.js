/**
 * Flowtype definitions for sockjs-client
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type ___SockJSClient$BaseEvent = {
    type: string
} & Event


declare type ___SockJSClient$OpenEvent = {} & ___SockJSClient$BaseEvent


declare type ___SockJSClient$CloseEvent = {
    code: number,
    reason: string,
    wasClean: boolean
} & ___SockJSClient$BaseEvent


declare type ___SockJSClient$MessageEvent = {
    data: string
} & ___SockJSClient$BaseEvent


declare interface ___SockJSClient$SessionGenerator {
    (): string
}

declare interface ___SockJSClient$Options {
    server?: string,
        sessionId?: number | ___SockJSClient$SessionGenerator,
        transports?: string | string[]
}

declare type ___SockJSClient$SockJSClass = {
    readyState: State,
    protocol: string,
    url: string,
    onopen: (e: ___SockJSClient$OpenEvent) => any,
    onclose: (e: ___SockJSClient$CloseEvent) => any,
    onmessage: (e: ___SockJSClient$MessageEvent) => any,
    send(data: any): void,
    close(code?: number, reason?: string): void
} & EventTarget
declare module 'sockjs-client' {
    declare var SockJS: {
        new(
            url: string,
            _reserved?: any,
            options?: ___SockJSClient$Options): ___SockJSClient$SockJSClass,
        (url: string, _reserved?: any, options?: ___SockJSClient$Options): ___SockJSClient$SockJSClass,
        prototype: ___SockJSClient$SockJSClass,
        CONNECTING: State,
        OPEN: State,
        CLOSING: State,
        CLOSED: State
    };
    declare module.exports: typeof SockJS
}