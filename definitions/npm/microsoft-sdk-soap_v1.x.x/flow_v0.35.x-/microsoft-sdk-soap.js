/**
 * Flowtype definitions for microsoft-sdk-soap
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'Mdq' {

    /**
     * Defines a complex query to retrieve entity metadata.
     * @param criteria The filter criteria for the metadata query.
     * @param properties The properties to be returned by the query.
     * @param attributeQuery A query expression for the entity attribute metadata to return.
     * @param relationshipQuery A query expression for the entity relationship metadata to return.
     * @param labelQuery A query expression for the labels to return.
     */
    declare export class EntityQueryExpression {
        constructor(criteria: undefined.MetadataFilterExpression, properties: undefined.MetadataPropertiesExpression, attributeQuery?: undefined.AttributeQueryExpression, relationshipQuery?: undefined.RelationshipQueryExpression, labelQuery?: undefined.LabelQueryExpression): this
    }

    /**
     * Specifies complex condition and logical filter expressions used for filtering the results of a metadata query.
     * @param filterOperator The logical AND/OR filter operator.
     */
    declare export class MetadataFilterExpression {
        constructor(filterOperator: undefined.LogicalOperator): this;

        /**
         * Adds a condition. This method accepts either the properties to create a new Sdk.Mdq.MetadataConditionExpression or a Sdk.Mdq.MetadataConditionExpression as the first argument.
         * @param propertyName The metadata property to evaluate.
         * @param conditionOperator The condition operator.
         * @param value The metadata value to evaluate.
         */
        addCondition(
            propertyName: SearchableEntityMetadataProperties | SearchableAttributeMetadataProperties | SearchableRelationshipMetadataProperties,
            conditionOperator: MetadataConditionOperator,
            value: Object): void;
        addCondition(
            propertyName: SearchableAttributeMetadataProperties,
            conditionOperator: MetadataConditionOperator,
            value: any): void;
        addCondition(
            propertyName: SearchableEntityMetadataProperties | SearchableAttributeMetadataProperties | SearchableRelationshipMetadataProperties,
            conditionOperator: MetadataConditionOperator,
            value: Object): void;
        addCondition(
            propertyName: SearchableAttributeMetadataProperties,
            conditionOperator: MetadataConditionOperator): void;
        addCondition(
            propertyName: SearchableEntityMetadataProperties | SearchableAttributeMetadataProperties | SearchableRelationshipMetadataProperties,
            conditionOperator: MetadataConditionOperator,
            value: Object): void
    }

    /**
     * Defines a complex query to retrieve attribute metadata for entities retrieved using an Sdk.Mdq.EntityQueryExpression.
     * @param criteria The filter criteria for the metadata query.
     * @param properties The properties to be returned by the query.
     */
    declare export class AttributeQueryExpression {
        constructor(criteria: MetadataFilterExpression, properties: undefined.MetadataPropertiesExpression): this
    }

    /**
     * Defines a complex query to retrieve entity relationship metadata for entities retrieved using an EntityQueryExpression.
     * @param criteria The filter criteria for the metadata query.
     * @param properties The properties to be returned by the query.
     */
    declare export class RelationshipQueryExpression {
        constructor(criteria: MetadataFilterExpression, properties: Mdq.MetadataPropertiesExpression): this
    }

    /**
     * Defines the languages for the labels to be retrieved for metadata items that have labels.
     * @param languages An array of LCID number values.
     */
    declare export class LabelQueryExpression {
        constructor(languages: Array<number>): this
    }

    /**
     * Specifies the properties for which non-null values are returned from a query.
     * @param allProperties Whether to retrieve all the properties of a metadata object.
     * @param propertyNames : >An array of strings representing the metadata properties to retrieve.
     */
    declare export class MetadataPropertiesExpression {
        constructor(allProperties: boolean, propertyNames?: Array<EntityMetadataProperties | AttributeMetadataProperties | RelationshipMetadataProperties | any>): this
    }
    declare export interface IEntityMetadata {
        ActivityTypeMask: number,
            Attributes: IAttributeMetadata[],
            AutoCreateAccessTeams: any,
            AutoRouteToOwnerQueue: boolean,
            CanBeInManyToMany: ManagedProperty<boolean>,
            CanBePrimaryEntityInRelationship: ManagedProperty<boolean>,
            CanBeRelatedEntityInRelationship: ManagedProperty<boolean>,
            CanCreateAttributes: ManagedProperty<boolean>,
            CanCreateCharts: ManagedProperty<boolean>,
            CanCreateForms: ManagedProperty<boolean>,
            CanCreateViews: ManagedProperty<boolean>,
            CanModifyAdditionalSettings: ManagedProperty<boolean>,
            CanTriggerWorkflow: boolean,
            Description: Label,
            DisplayCollectionName: Label,
            DisplayName: Label,
            IconLargeName: string,
            IconMediumName: string,
            IconSmallName: string,
            IntroducedVersion: any,
            IsActivity: boolean,
            IsActivityParty: boolean,
            IsAIRUpdated: boolean,
            IsAuditEnabled: ManagedProperty<boolean>,
            IsAvailableOffline: boolean,
            IsBusinessProcessEnabled: boolean,
            IsChildEntity: boolean,
            IsConnectionsEnabled: ManagedProperty<boolean>,
            IsCustomEntity: boolean,
            IsCustomizable: ManagedProperty<boolean>,
            IsDocumentManagementEnabled: boolean,
            IsDuplicateDetectionEnabled: ManagedProperty<boolean>,
            IsEnabledForCharts: boolean,
            IsImportable: boolean,
            IsIntersect: boolean,
            IsMailMergeEnabled: ManagedProperty<boolean>,
            IsManaged: boolean,
            IsMappable: ManagedProperty<boolean>,
            IsQuickCreateEnabled: boolean,
            IsReadingPaneEnabled: boolean,
            IsRenameable: boolean,
            IsValidForAdvancedFind: boolean,
            IsValidForQueue: ManagedProperty<boolean>,
            IsVisibleInMobile: ManagedProperty<boolean>,
            IsVisibleInMobileClient: boolean,
            LogicalName: string,
            ManyToManyRelationships: ManyToManyRelationshipMetadata,
            ManyToOneRelationships: OneToManyRelationshipMetadata,
            MetadataId: string,
            ObjectTypeCode: number,
            OneToManyRelationships: OneToManyRelationshipMetadata,
            OwnershipType: "BusinessOwned" | "BusinessParented" | "None	OrganizationOwned" | "TeamOwned	UserOwned",
            PrimaryIdAttribute: string,
            PrimaryImageAttribute: string,
            PrimaryNameAttribute: string,
            Privileges: SecurityPrivilegeMetadata[],
            RecurrenceBaseEntityLogicalName: string,
            ReportViewName: string,
            SchemaName: string
    }
    declare export interface SecurityPrivilegeMetadata {
        CanBeBasic: boolean,
            CanBeDeep: boolean,
            CanBeEntityReference: boolean,
            CanBeGlobal: boolean,
            CanBeLocal: boolean,
            CanBeParentEntityReference: boolean,
            ExtensionData: boolean,
            Name: string,
            PrivilegeId: string,
            PrivilegeType: "Append" |
            "AppendTo" |
            "Assign" |
            "Create" |
            "Delete" |
            "None" |
            "Read" |
            "Share" |
            "Write"
    }
    declare export interface OneToManyRelationshipMetadata {
        AssociatedMenuConfiguration: AssociatedMenuConfiguration,
            CascadeConfiguration: CascadeConfiguration,
            HasChanged: any,
            IntroducedVersion: any,
            IsCustomizable: ManagedProperty<boolean>,
            IsCustomRelationship: boolean,
            IsHierarchical: any,
            IsManaged: boolean,
            IsValidForAdvancedFind: boolean,
            MetadataId: string,
            ReferencedAttribute: string,
            ReferencedEntity: string,
            ReferencingAttribute: string,
            ReferencingEntity: string,
            RelationshipType: string,
            SchemaName: string,
            SecurityTypes: any
    }
    declare export interface CascadeConfiguration {
        Assign: CascadeType,
            Delete: CascadeType,
            ExtensionData: CascadeType,
            Merge: CascadeType,
            Reparent: CascadeType,
            Share: CascadeType,
            Unshare: CascadeType
    }
    declare export type CascadeType = "Active" | "Cascade" | "NoCascade" | "UserOwned";
    declare export interface ManyToManyRelationshipMetadata {
        Entity1AssociatedMenuConfiguration: AssociatedMenuConfiguration,
            Entity1IntersectAttribute: string,
            Entity1LogicalName: string,
            Entity2AssociatedMenuConfiguration: AssociatedMenuConfiguration,
            Entity2IntersectAttribute: string,
            Entity2LogicalName: string,
            HasChanged: boolean,
            IntersectEntityName: string,
            IntroducedVersion: any,
            IsCustomizable: ManagedProperty<boolean>,
            IsCustomRelationship: boolean,
            IsManaged: boolean,
            IsValidForAdvancedFind: boolean,
            MetadataId: string,
            RelationshipType: RelationshipType,
            SchemaName: string,
            SecurityTypes: SecurityType
    }
    declare export interface AssociatedMenuConfiguration {
        Behavior: AssociatedMenuBehavior,
            Group: AssociatedMenuGroup,
            Label: Label,
            Order: number
    }
    declare export type AssociatedMenuBehavior = "DoNotDisplay" | "UseCollectionName" | "UseLabel";
    declare export type AssociatedMenuGroup = "Details" | "Marketing" | "Sales" | "Service";
    declare export type RelationshipType = "Default" | "ManyToManyRelationship" | "OneToManyRelationship";
    declare export type SecurityType = "Append" |
        "Inheritance" |
        "None" |
        "ParentChild" |
        "Pointer";
    declare export interface IAttributeMetadata {
        AttributeOf: string,
            AttributeType: "Customer" |
            "DateTime" |
            "Decimal" |
            "Double" |
            "EntityName" |
            "Integer" |
            "Lookup" |
            "ManagedProperty" |
            "Memo" |
            "Money" |
            "Owner" |
            "PartyList" |
            "Picklist" |
            "State" |
            "Status" |
            "Uniqueidentifier" |
            "Virtual",
            AttributeTypeName: "BigIntType" |
            "BooleanType" |
            "CalendarRulesType" |
            "CustomerType" |
            "DateTimeType" |
            "DecimalType" |
            "DoubleType" |
            "EntityNameType" |
            "ImageType" |
            "IntegerType" |
            "LookupType" |
            "ManagedPropertyType" |
            "MemoType" |
            "MoneyType" |
            "OwnerType" |
            "PartyListType" |
            "PicklistType" |
            "StateType	StatusType" |
            "StringType" |
            "UniqueidentifierType" |
            "VirtualType",
            CalculationOf: any,
            CanBeSecuredForCreate: boolean,
            CanBeSecuredForRead: boolean,
            CanBeSecuredForUpdate: boolean,
            CanModifyAdditionalSettings: ManagedProperty<boolean>,
            ColumnNumber: number,
            DefaultFormValue: any,
            DefaultValue: any,
            DeprecatedVersion: any,
            Description: Label,
            DisplayName: Label,
            EntityLogicalName: string,
            Format: any,
            FormatName: string,
            ImeMode: any,
            IntroducedVersion: any,
            IsAuditEnabled: boolean,
            IsCustomAttribute: boolean,
            IsCustomizable: ManagedProperty<boolean>,
            IsManaged: boolean,
            IsPrimaryId: boolean,
            IsPrimaryName: boolean,
            IsRenameable: ManagedProperty<boolean>,
            IsSecured: boolean,
            IsValidForAdvancedFind: ManagedProperty<boolean>,
            IsValidForCreate: boolean,
            IsValidForRead: boolean,
            IsValidForUpdate: boolean,
            LinkedAttributeId: string,
            LogicalName: string,
            MaxLength: number,
            MaxValue: any,
            MetadataId: string,
            MinValue: number,
            OptionSet: any,
            Precision: any,
            PrecisionSource: any,
            RequiredLevel: ManagedProperty<string>,
            SchemaName: string,
            Targets: string[],
            YomiOf: any
    }
    declare export interface ManagedProperty<T>{
        CanBeChanged: boolean,
        ManagedPropertyLogicalName: string,
        Value: T
    }
    declare export interface Label {
        LocalizedLabels: LocalizedLabel[],
            UserLocalizedLabel: LocalizedLabel
    }
    declare export interface LocalizedLabel {
        Label: string,
            LangaugeCode: number,
            MetadataId: string,
            HasChanged: boolean,
            IsManaged: boolean
    }

    declare module 'ValueEnums' {

    }

}