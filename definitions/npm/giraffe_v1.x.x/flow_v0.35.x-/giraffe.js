/**
 * Flowtype definitions for giraffe
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$Giraffe: {
    bindAppEvents: typeof Giraffe$bindAppEvents,
    bindDataEvents: typeof Giraffe$bindDataEvents,
    bindEvent: typeof Giraffe$bindEvent,
    unbindEvent: typeof Giraffe$unbindEvent,
    bindEventMap: typeof Giraffe$bindEventMap,
    unbindEventMap: typeof Giraffe$unbindEventMap,
    configure: typeof Giraffe$configure,
    dispose: typeof Giraffe$dispose,
    disposeThis: typeof Giraffe$disposeThis,
    wrapFn: typeof Giraffe$wrapFn,
}
declare interface Giraffe$GiraffeObject {
    app: Giraffe$App,
        appEvents?: Giraffe$StringMap,
        dataEvents?: Giraffe$StringMap,
        defaultOptions?: Giraffe$DefaultOptions,
        initialize(): void,
        beforeInitialize(): void,
        afterInitialize(): void,
        dispose(): void,
        beforeDispose(): void,
        afterDispose(): void
}

declare interface Giraffe$AttachmentOptions {
    method?: string,
        forceRender?: boolean,
        suppressRender?: boolean
}

declare interface Giraffe$DefaultOptions {
    disposeOnDetach?: boolean,
        alwaysRender?: boolean,
        saveScrollPosition?: boolean,
        documentTitle?: string
}

declare interface Giraffe$AppMap {
    [cid: string]: Giraffe$App
}

declare interface Giraffe$ViewMap<TModel>{
    [cid: string]: Giraffe$View<TModel >
}

declare interface Giraffe$StringMap {
    [def: string]: string
}

declare
var app: Giraffe$App;

declare
var apps: Giraffe$AppMap;

declare
var defaultOptions: Giraffe$DefaultOptions;

declare
var version: string;

declare
var views: Giraffe$ViewMap<Giraffe$Model>;

declare
function Giraffe$bindAppEvents(instance: Giraffe$GiraffeObject): Giraffe$GiraffeObject

declare
function Giraffe$bindDataEvents(instance: Giraffe$GiraffeObject): Giraffe$GiraffeObject

declare
function Giraffe$bindEvent(
    context: Backbone.Events,
    target: Backbone.Events,
    event: any,
    callback: Function): void

declare
function Giraffe$unbindEvent(
    context: Backbone.Events,
    target: Backbone.Events,
    event: any,
    callback: Function): void

declare
function Giraffe$bindEventMap(context: Backbone.Events, target: Backbone.Events, eventMap: any): void

declare
function Giraffe$unbindEventMap(context: Backbone.Events, target: Backbone.Events, eventMap: any): void

declare
function Giraffe$configure(instance: any, options?: any): void

declare
function Giraffe$dispose(instance: Giraffe$GiraffeObject, ...args: any[]): Giraffe$GiraffeObject

declare
function Giraffe$disposeThis(...args: any[]): Giraffe$GiraffeObject

declare
function Giraffe$wrapFn(obj: any, name: string, before: Function, after: Function): void

declare class Collection<TModel>mixins Backbone.Collection<TModel>, GiraffeObject {
    app: Giraffe$App;
    model: {
        new(): TModel
    }
}

declare class Model mixins Backbone.Model, GiraffeObject {
    app: Giraffe$App
}

declare class Router mixins Backbone.Router, GiraffeObject {
    app: Giraffe$App;
    namespace: string;
    triggers: Giraffe$StringMap;
    cause(appEvent: string, ...args: any[]): void;
    isCaused(appEvent: string, ...args: any[]): boolean;
    getRoute(appEvent: string, ...args: any[]): string;
    reload(url: string): void
}

declare class View<TModel>mixins Backbone.View<TModel>, GiraffeObject {
    app: Giraffe$App;
    appEvents: Giraffe$StringMap;
    children: Giraffe$View<TModel>[];
    dataEvents: Giraffe$StringMap;
    defaultOptions: Giraffe$DefaultOptions;
    documentTitle: string;
    parent: Giraffe$View<TModel>;
    template: any;
    ui: Giraffe$StringMap;
    attachTo(el: any, options?: Giraffe$AttachmentOptions): Giraffe$View<TModel>;
    attach(
        view: Giraffe$View<TModel>,
        options?: Giraffe$AttachmentOptions): Giraffe$View<TModel>;
    isAttached(el: any): boolean;
    render(options?: any): Giraffe$View<TModel>;
    beforeRender(): void;
    afterRender(): void;
    templateStrategy(): string;
    serialize(): any;
    setParent(parent: Giraffe$View<TModel>): Giraffe$View<TModel>;
    addChild(child: Giraffe$View<TModel>): Giraffe$View<TModel>;
    addChildren(children: Giraffe$View<TModel>[]): Giraffe$View<TModel>;
    removeChild(child: Giraffe$View<TModel>, preserve?: boolean): Giraffe$View<TModel>;
    removeChildren(preserve?: boolean): Giraffe$View<TModel>;
    detach(preserve?: boolean): Giraffe$View<TModel>;
    detachChildren(preserve?: boolean): Giraffe$View<TModel>;
    invoke(method: string, ...args: any[]): void;
    dispose(): Giraffe$View<TModel>;
    beforeDispose(): Giraffe$View<TModel>;
    afterDispose(): Giraffe$View<TModel>;
    detachByElement(el: any, preserve?: boolean): Giraffe$View<Giraffe$Model>;
    getClosestView<TModel>(el: any): Giraffe$View<Giraffe$Model>;
    getByCid(cid: string): Giraffe$View<Giraffe$Model>;
    to$El(el: any, parent?: any, allowParentMatch?: boolean): JQuery;
    setDocumentEvents(events: string[], prefix?: string): string[];
    removeDocumentEvents(prefix?: string): void;
    setDocumentEventPrefix(prefix?: string): void;
    setTemplateStrategy(strategy: any, instance?: any): void
}

declare class App mixins View<Giraffe$Model>{
    routes: Giraffe$StringMap;
    addInitializer(initializer: (options?: any, callback?: () => void) => void): Giraffe$App;
    start(options?: any): Giraffe$App
}

declare class Controller mixins Backbone.Events, GiraffeObject {
    app: Giraffe$App
}

declare class CollectionView<TModel>mixins View<TModel>{
    collection: Giraffe$Collection<TModel>;
    modelView: Giraffe$View<TModel>;
    modelViewArgs: any[];
    modelViewEl: any;
    renderOnChange: boolean;
    findByModel(model: Giraffe$Model): Giraffe$View<TModel>;
    addOne(model: Giraffe$Model): Giraffe$View<TModel>;
    removeOne(model: Giraffe$Model): Giraffe$View<TModel>;
    getDefaults(ctx: any): any
}

declare class FastCollectionView<TModel>mixins View<TModel>{
    collection: Giraffe$Collection<TModel>;
    modelTemplate: any;
    modelTemplateStrategy: string;
    modelEl: any;
    renderOnChange: boolean;
    modelSerialize(): any;
    addAll(): Giraffe$View<TModel>;
    addOne(model: Giraffe$Model): Giraffe$View<TModel>;
    removeOne(model: Giraffe$Model): Giraffe$View<TModel>;
    removeByIndex(index: number): Giraffe$View<TModel>;
    findElByModel(model: Giraffe$Model): JQuery;
    findElByIndex(index: number): JQuery;
    findModelByEl(el: any): Giraffe$Model;
    getDefaults(ctx: any): any
}