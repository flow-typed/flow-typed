/**
 * Flowtype definitions for chai-http
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Chai$ChaiStatic {
    request: Chai$ChaiHttpRequest
}

declare interface Chai$ChaiHttpRequest {
    (server: any): ChaiHttp$Agent,
    agent(server: any): ChaiHttp$Agent,
        addPromises(promiseConstructor: any): void
}

declare interface Chai$Assertion {
    status(code: number): Chai$Assertion,
        header(key: string, value?: string): Chai$Assertion,
        header(key: string, value?: RegExp): Chai$Assertion,
        headers: Chai$Assertion,
        json: Chai$Assertion,
        text: Chai$Assertion,
        html: Chai$Assertion,
        redirect: Chai$Assertion,
        redirectTo(location: string): Chai$Assertion,
        param(key: string, value?: string): Chai$Assertion,
        cookie(key: string, value?: string): Chai$Assertion
}

declare interface Chai$TypeComparison {
    ip: Chai$Assertion
}
declare interface ChaiHttp$Promise<T>{
    then<U>(
        onFulfilled: (value: T) => U,
        onRejected?: (reason: any) => U): ChaiHttp$Promise<U >
}

declare interface ChaiHttp$Response {
    body: any,
        type: string,
        status: number
}

declare type ChaiHttp$Request = {
    attach(field: string, file: string | Buffer, filename: string): ChaiHttp$Request,
    set(field: string, val: string): ChaiHttp$Request,
    query(params: Object): ChaiHttp$Request,
    send(data: Object): ChaiHttp$Request,
    auth(user: string, name: string): ChaiHttp$Request,
    field(name: string, val: string): ChaiHttp$Request,
    end(
        callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$FinishedRequest
} & ChaiHttp$FinishedRequest


declare interface ChaiHttp$FinishedRequest {
    then(
            success?: (res: ChaiHttp$Response) => void,
            failure?: (err: any) => void): ChaiHttp$FinishedRequest,
        catch (failure?: (err: any) => void): ChaiHttp$FinishedRequest
}

declare interface ChaiHttp$Agent {
    get(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        post(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        put(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        head(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        del(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        options(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request,
        patch(
            url: string,
            callback?: (err: any, res: ChaiHttp$Response) => void): ChaiHttp$Request
}

declare interface ChaiHttp$TypeComparison {
    ip: Chai$Assertion
}
declare module 'chai-http' {
    declare module.exports: typeof chaiHttp
}