/**
 * Flowtype definitions for color
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Color$RGBColor {
    r: number,
        g: number,
        b: number,
        a?: number
}

declare interface Color$FullRGBColor {
    red: number,
        green: number,
        blue: number,
        alpha?: number
}

declare interface Color$HSLColor {
    h: number,
        s: number,
        l: number,
        a?: number
}

declare interface Color$FullHSLColor {
    hue: number,
        saturation: number,
        lightness: number,
        alpha?: number
}

declare interface Color$HSVColor {
    h: number,
        s: number,
        v: number
}

declare interface Color$FullHSVColor {
    hue: number,
        saturation: number,
        value: number
}

declare interface Color$HBWColor {
    h: number,
        b: number,
        w: number
}

declare interface Color$FullHBWColor {
    hue: number,
        whiteness: number,
        blackness: number
}

declare interface Color$CMYKColor {
    c: number,
        m: number,
        y: number,
        k: number
}

declare interface Color$FullCMYKColor {
    cyan: number,
        magenta: number,
        yellow: number,
        black: number
}

declare type Color$ColorParam = string |
    Color$RGBColor |
    Color$FullRGBColor |
    Color$HSLColor |
    Color$FullHSLColor |
    Color$HSVColor |
    Color$FullHSVColor |
    Color$HBWColor |
    Color$FullHBWColor |
    Color$CMYKColor |
    Color$FullCMYKColor;

declare interface Color$Color {
    (color: Color$ColorParam | Color$Color): Color$Color,
    rgb(values: Array<number>): Color$Color,
        rgb(r: number, g: number, b: number, a?: number): Color$Color,
        rgb(values: Color$RGBColor): Color$Color,
        rgb(values: Color$FullRGBColor): Color$Color,
        rgb(): Color$RGBColor,
        rgbArray(): Array<number>,
        rgbString(): string,
        rgbaString(): string,
        rgbNumber(): number,
        hsl(values: Array<number>): Color$Color,
        hsl(): Color$HSLColor,
        hslArray(): Array<number>,
        hslString(): string,
        hslaString(): string,
        hsv(values: Array<number>): Color$Color,
        hsv(): Color$HSVColor,
        hsvArray(): Array<number>,
        hsvString(): string,
        hbw(values: Array<number>): Color$Color,
        hbw(): Color$HBWColor,
        hbwArray(): Array<number>,
        hbwString(): string,
        cmyk(values: Array<number>): Color$Color,
        cmyk(): Color$CMYKColor,
        cmykArray(): Array<number>,
        cmykString(): string,
        hexString(): string,
        percentString(): string,
        keyword(): string | void,
        alpha(alpha: number): Color$Color,
        alpha(): number,
        red(red: number): Color$Color,
        red(): number,
        green(green: number): Color$Color,
        green(): number,
        blue(blue: number): Color$Color,
        blue(): number,
        hue(hue: number): Color$Color,
        hue(): number,
        saturation(saturation: number): Color$Color,
        saturation(): number,
        lightness(lightness: number): Color$Color,
        lightness(): number,
        saturationv(saturationv: number): Color$Color,
        saturationv(): number,
        value(value: number): Color$Color,
        value(): number,
        whiteness(whiteness: number): Color$Color,
        whiteness(): number,
        blackness(blackness: number): Color$Color,
        blackness(): number,
        cyan(cyan: number): Color$Color,
        cyan(): number,
        magenta(magenta: number): Color$Color,
        magenta(): number,
        yellow(yellow: number): Color$Color,
        yellow(): number,
        black(black: number): Color$Color,
        black(): number,
        luminosity(): number,
        contrast(color: Color$Color): number,
        dark(): boolean,
        light(): boolean,
        negate(): Color$Color,
        lighten(value: number): Color$Color,
        darken(value: number): Color$Color,
        saturate(value: number): Color$Color,
        desaturate(value: number): Color$Color,
        greyscale(): Color$Color,
        whiten(value: number): Color$Color,
        blacken(value: number): Color$Color,
        clearer(value: number): Color$Color,
        opaquer(value: number): Color$Color,
        rotate(value: number): Color$Color,
        mix(color: Color$Color, value?: number): Color$Color,
        level(color: Color$Color): string,
        clone(): Color$Color
}
declare module 'color' {
    declare var Color: Color$Color;
    declare module.exports: typeof Color
}