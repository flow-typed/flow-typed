// @flow
/**
 * Flowtype definitions for react-relay
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'react-relay' {


    /**
     * Fragments are a hash of functions 
     */
    declare interface Fragments {
        [query: string]: ((variables?: RelayVariables) => string)
    }
    declare interface CreateContainerOpts {
        initialVariables?: Object,
            fragments: Fragments,
            prepareVariables(prevVariables: RelayVariables): RelayVariables
    }
    declare interface RelayVariables {
        [name: string]: any
    }

    /**
     * add static getFragment method to the component constructor 
     */
    declare type RelayContainerClass<T>= {
        getFragment: ((q: string) => string)
    }
    declare interface RelayQueryRequestResolve {
        response: any
    }
    declare interface RelayMutationRequest {
        getQueryString(): string,
            getVariables(): RelayVariables,
            resolve(result: RelayQueryRequestResolve): any,
            reject(errors: any): any
    }
    declare interface RelayQueryRequest {
        resolve(result: RelayQueryRequestResolve): any,
            reject(errors: any): any,
            getQueryString(): string,
            getVariables(): RelayVariables,
            getID(): string,
            getDebugName(): string
    }
    declare interface RelayNetworkLayer {
        supports(...options: string[]): boolean
    }
    declare class DefaultNetworkLayer mixins RelayNetworkLayer {
        constructor(host: string, options: any): this;
        supports(...options: string[]): boolean
    }
    declare     function createContainer<T>(
            component: React.ComponentClass<T>,
            params?: CreateContainerOpts): RelayContainerClass<any >
        declare     function injectNetworkLayer(networkLayer: RelayNetworkLayer): any
    declare     function isContainer(component: React.ComponentClass<any>): boolean
    declare     function QL(...args: any[]): string
    declare class Route {
        constructor(params?: RelayVariables): this
    }

    /**
     * Relay Mutation class, where T are the props it takes and S is the returned payload from Relay.Store.update.
     * S is typically dynamic as it depends on the data the app is currently using, but it's possible to always
    return some data in the payload using REQUIRED_CHILDREN which is where specifying S is the most useful.
    */
    declare class Mutation<T, S>{
        props: T;
        constructor(props: T): this;
        getFragment(q: string): string
    }
    declare interface Transaction {
        getError(): Error,
            Status(): number
    }
    declare interface StoreUpdateCallbacks<T>{
        onFailure(transaction: Transaction): any,
        onSuccess(response: T): any
    }
    declare interface Store {
        commitUpdate(mutation: Mutation<any, any>, callbacks?: StoreUpdateCallbacks<any>): any
    }
    declare     var Store: Store;
    declare class RootContainer mixins React.Component<RootContainerProps, any>{}
    declare type RootContainerProps = {
        Component: RelayContainerClass<any>,
        route: Route,
        renderLoading(): JSX.Element,
        renderFetched(data: any): JSX.Element,
        renderFailure(error: Error, retry: Function): JSX.Element
    }
    declare interface RelayProp {
        variables: any,
            setVariables(variables: Object): void
    }
}