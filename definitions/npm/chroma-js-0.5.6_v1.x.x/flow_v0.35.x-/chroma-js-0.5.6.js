/**
 * Flowtype definitions for chroma-js-0.5.6
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface Chroma$ChromaStatic {

    /**
     * Creates a color from a string representation (as supported in CSS).
     * @param color The string to convert to a color.
     * @return  the color object.
     */
    (color: string): Chroma$Color,

    /**
     * Create a color in the specified color space using a, b and c as values.
     * @param a 
     * @param b 
     * @param c 
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     * @return  the color object.
     */
    (a: number, b: number, c: number, colorSpace?: string): Chroma$Color,

    /**
     * Create a color in the specified color space using values.
     * @param values An array of values (e.g. [r, g, b, a?]).
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     * @return  the color object.
     */
    (values: number[], colorSpace?: string): Chroma$Color,

    /**
     * Create a color in the specified color space using a, b and c as values.
     * @param a 
     * @param b 
     * @param c 
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     * @return  the color object.
     */
    color(a: number, b: number, c: number, colorSpace?: string): Chroma$Color,

        /**
         * Calculate the contrast ratio of two colors.
         * @param color1 The first color.
         * @param color2 The second color.
         * @return  the contrast ratio.
         */
        contrast(color1: Chroma$Color, color2: Chroma$Color): number,

        /**
         * Calculate the contrast ratio of two colors.
         * @param color1 The first color.
         * @param color2 The second color.
         * @return  the contrast ratio.
         */
        contrast(color1: Chroma$Color, color2: string): number,

        /**
         * Calculate the contrast ratio of two colors.
         * @param color1 The first color.
         * @param color2 The second color.
         * @return  the contrast ratio.
         */
        contrast(color1: string, color2: Chroma$Color): number,

        /**
         * Calculate the contrast ratio of two colors.
         * @param color1 The first color.
         * @param color2 The second color.
         * @return  the contrast ratio.
         */
        contrast(color1: string, color2: string): number,

        /**
         * Create a color from a hex or string representation (as supported in CSS).
         * 
        This is an alias of chroma.hex().
         * @param color The string to convert to a color.
         * @return  the color object.
        */
        css(color: string): Chroma$Color,

        /**
         * Create a color from a hex or string representation (as supported in CSS).
         * 
        This is an alias of chroma.css().
         * @param color The string to convert to a color.
         * @return  the color object.
        */
        hex(color: string): Chroma$Color,
        rgb(red: number, green: number, blue: number, alpha?: number): Chroma$Color,
        hsl(
            hue: number,
            saturation: number,
            lightness: number,
            alpha?: number): Chroma$Color,
        hsv(hue: number, saturation: number, value: number, alpha?: number): Chroma$Color,
        lab(lightness: number, a: number, b: number, alpha?: number): Chroma$Color,
        lch(lightness: number, chroma: number, hue: number, alpha?: number): Chroma$Color,
        gl(red: number, green: number, blue: number, alpha?: number): Chroma$Color,
        interpolate: Chroma$InterpolateFunction,
        mix: Chroma$InterpolateFunction,
        luminance(color: Chroma$Color): number,
        luminance(color: string): number,

        /**
         * Creates a color scale using a pre-defined color scale.
         * @param name The name of the color scale.
         * @return  the resulting color scale.
         */
        scale(name: string): Chroma$Scale,

        /**
         * Creates a color scale function from the given set of colors.
         * @param colors An Array of at least two color names or hex values.
         * @return  the resulting color scale.
         */
        scale(colors?: string[]): Chroma$Scale,
        scales: Chroma$PredefinedScales
}

declare interface Chroma$InterpolateFunction {
    (color1: Chroma$Color, color2: Chroma$Color, f: number, mode?: string): Chroma$Color,
    (color1: Chroma$Color, color2: string, f: number, mode?: string): Chroma$Color,
    (color1: string, color2: Chroma$Color, f: number, mode?: string): Chroma$Color,
    (color1: string, color2: string, f: number, mode?: string): Chroma$Color,
    bezier(colors: any[]): (t: number) => Chroma$Color
}

declare interface Chroma$PredefinedScales {
    [key: string]: Chroma$Scale,
    cool: Chroma$Scale,
        hot: Chroma$Scale
}

declare export interface Chroma$Color {

    /**
     * Creates a color from a string representation (as supported in CSS).
     * @param color The string to convert to a color.
     */
    new(color: string): Chroma$Color,

    /**
     * Create a color in the specified color space using a, b and c as values.
     * @param a 
     * @param b 
     * @param c 
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     */
    new(a: number, b: number, c: number, colorSpace?: string): Chroma$Color,

    /**
     * Create a color in the specified color space using a, b and c as color values and alpha as the alpha value.
     * @param a 
     * @param b 
     * @param c 
     * @param alpha The alpha value of the color.
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     */
    new(
        a: number,
        b: number,
        c: number,
        alpha: number,
        colorSpace?: string): Chroma$Color,

    /**
     * Create a color in the specified color space using values.
     * @param values An array of values (e.g. [r, g, b, a?]).
     * @param colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
     */
    new(values: number[], colorSpace: string): Chroma$Color,

    /**
     * Convert this color to CSS hex representation.
     * @return  this color's hex representation.
     */
    hex(): string,

        /**
         * 
         * @return  the relative luminance of the color, which is a value between 0 (black) and 1 (white).
         */
        luminance(): number,

        /**
         * 
         * @return  the X11 name of this color or its hex value if it does not have a name.
         */
        name(): string,

        /**
         * 
         * @return  the alpha value of the color.
         */
        alpha(): number,

        /**
         * Set the alpha value.
         * @param alpha The alpha value.
         * @return  this
         */
        alpha(alpha: number): Chroma$Color,
        css(mode?: string): string,
        interpolate(color: Chroma$Color, f: number, mode?: string): Chroma$Color,
        interpolate(color: string, f: number, mode?: string): Chroma$Color,
        premultiply(): Chroma$Color,
        rgb(): number[],
        rgba(): number[],
        hsl(): number[],
        hsv(): number[],
        lab(): number[],
        lch(): number[],
        hsi(): number[],
        gl(): number[],
        darken(amount?: number): Chroma$Color,
        darker(amount: number): Chroma$Color,
        brighten(amount?: number): Chroma$Color,
        brighter(amount: number): Chroma$Color,
        saturate(amount?: number): Chroma$Color,
        desaturate(amount?: number): Chroma$Color,
        toString(): string
}

declare export interface Chroma$Scale {

    /**
     * Interpolate a color using the currently set range and domain.
     * @param value The value to use for interpolation.
     * @return  the interpolated hex color OR a Color object (depending on the mode set on this Scale).
     */
    (value: number): any,

    /**
     * Retreive all possible colors generated by this scale if it has distinct classes.
     * @param mode The output mode to use. Must be one of Color's getters. Defaults to "hex".
     * @return  an array of colors in the type specified by mode.
     */
    colors(mode?: string): any[],
        correctLightness(): boolean,

        /**
         * Enable or disable automatic lightness correction of this scale.
         * @param Whether to enable or disable automatic lightness correction.
         * @return  this
         */
        correctLightness(enable: boolean): Chroma$Scale,

        /**
         * Get the current domain.
         * @return  The current domain.
         */
        domain(): number[],

        /**
         * Set the domain.
         * @param domain An Array of at least two numbers (min and max).
         * @param classes The number of fixed classes to create between min and max.
         * @param mode The scale to use. Examples: log, quantiles, k-means.
         * @return  this
         */
        domain(domain: number[], classes?: number, mode?: string): Chroma$Scale,

        /**
         * Specify in which color space the colors should be interpolated. Defaults to "rgb".
         * You can use any of the following spaces: rgb, hsv, hsl, lab, lch
         * @param colorSpace The color space to use for interpolation.
         * @return  this
         */
        mode(colorSpace: string): Chroma$Scale,

        /**
         * Set the output mode of this Scale.
         * @param mode The output mode to use. Must be one of Color's getters.
         * @return  this
         */
        out(mode: string): Chroma$Scale,

        /**
         * Set the color range after initialization.
         * @param colors An Array of at least two color names or hex values.
         * @return  this
         */
        range(colors: string[]): Chroma$Scale
}
declare var chroma: Chroma$ChromaStatic;