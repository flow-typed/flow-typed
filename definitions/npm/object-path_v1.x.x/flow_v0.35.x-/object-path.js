/**
 * Flowtype definitions for object-path
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare var objectPath: ObjectPathGlobal$IObjectPathStatic;
declare type ObjectPathGlobal$IPath = Array<number | string>| number | string;

declare type ObjectPathGlobal$IMultiArray = Array<ObjectPathGlobal$IPath>;

declare interface ObjectPathGlobal$IObjectPathStatic {

    /**
     * Binds an object
     */
    (object: T): ObjectPathGlobal$IObjectPathBound<T>,

        /**
         * Deletes a member from object or array
         * @param  
         * @param  
         * @return  object
         */
        del<T>(object: T, path: ObjectPathGlobal$IPath): T,

        /**
         * 
         * @see  objectPath.del
         */
        del<T>(object: T): T,

        /**
         * 
         * @see  objectPath.del
         */
        del(): void,

        /**
         * Tests path existence
         * @param  
         * @param  
         * @return  object
         */
        has<T>(object: T, path: ObjectPathGlobal$IPath): boolean,

        /**
         * 
         * @see  objectPath.has
         */
        has<T>(object: T): boolean,

        /**
         * 
         * @see  objectPath.has
         */
        has(): boolean,

        /**
         * Get a path from an object
         * @param  
         * @param  
         * @param  
         */
        get<T, TResult>(
            object: T,
            path: ObjectPathGlobal$IPath,
            defaultValue?: TResult): TResult,

        /**
         * 
         * @see  objectPath.get
         */
        get<T>(object: T): T,

        /**
         * 
         * @see  objectPath.get
         */
        get(): void,

        /**
         * Set a path to a value
         * @param  
         * @param  
         * @param  
         * @param  * 
         * @return  Any existing value on the path if any
         */
        set<T, TExisting>(
            object: T,
            path: ObjectPathGlobal$IPath,
            value: any,
            doNotReplace?: boolean): TExisting,

        /**
         * 
         * @see  objectPath.set
         */
        set<T>(object: T): T,

        /**
         * 
         * @see  objectPath.set
         */
        set(): void,

        /**
         * Create (if path isn't an array) and push the value to it. Can push unlimited number of values
         * @param  
         */
        push<T>(object: T, path: ObjectPathGlobal$IPath, ...args: any[]): void,

        /**
         * 
         * @see  objectPath.push
         */
        push(): void,

        /**
         * Get the first non undefined property
         * @param  
         * @param  
         * @param  
         * @return  
         */
        coalesce<T, TResult>(
            object: T,
            paths: ObjectPathGlobal$IMultiArray,
            defaultValue?: TResult): TResult,

        /**
         * Empty a path. Arrays are set to length 0, objects have all elements deleted, strings
         * are set to empty, numbers to 0, everything else is set to null
         * @param  
         * @param  
         */
        empty<T, TResult>(object: T, path: ObjectPathGlobal$IPath): TResult,

        /**
         * 
         * @see  objectPath.empty
         */
        empty<T>(object: T): T,

        /**
         * 
         * @see  objectPath.empty
         */
        empty(): void,

        /**
         * Set a value if it doesn't exist, do nothing if it does
         * @param  
         * @param  
         */
        ensureExists<T, TExisting>(object: T, path: ObjectPathGlobal$IPath, value: any): TExisting,

        /**
         * 
         * @see  objectPath.ensureExists
         */
        ensureExists<T>(object: T): T,

        /**
         * 
         * @see  objectPath.ensureExists
         */
        ensureExists(): void,

        /**
         * Insert an item in an array path
         * @param  
         * @param  
         * @param  
         * @param  
         */
        insert<T>(object: T, path: ObjectPathGlobal$IPath, value: any, at?: number): void
}

declare interface ObjectPathGlobal$IObjectPathBound<T>{

    /**
     * 
     * @see  objectPath.ensureExists
     */
    del(path: ObjectPathGlobal$IPath): T,

    /**
     * 
     * @see  objectPath.del
     */
    del(): T,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    has(path: ObjectPathGlobal$IPath): boolean,

    /**
     * 
     * @see  objectPath.has
     */
    has(): boolean,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    get<TResult>(path: ObjectPathGlobal$IPath, defaultValue?: TResult): TResult,

    /**
     * 
     * @see  objectPath.get
     */
    get(): T,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    set<TExisting>(
        path: ObjectPathGlobal$IPath,
        value: any,
        doNotReplace?: boolean): TExisting,

    /**
     * 
     * @see  objectPath.set
     */
    set(): T,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    push(path: ObjectPathGlobal$IPath, ...args: any[]): void,

    /**
     * 
     * @see  objectPath.push
     */
    push(): void,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    coalesce<TResult>(paths: ObjectPathGlobal$IMultiArray, defaultValue?: TResult): TResult,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    empty(path: ObjectPathGlobal$IPath): T,

    /**
     * 
     * @see  objectPath.empty
     */
    empty(): T,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    ensureExists<TExisting>(path: ObjectPathGlobal$IPath, value: any): TExisting,

    /**
     * 
     * @see  objectPath.ensureExists
     */
    ensureExists(): T,

    /**
     * 
     * @see  objectPath.insert
     */
    insert(path: ObjectPathGlobal$IPath, value: any, at?: number): void
}
declare module 'objectPath' {
    declare module.exports: typeof objectPath
}
declare module 'object-path' {
    declare module.exports: typeof objectPath
}