/**
 * Flowtype definitions for webix
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$webix: {
    ajax: typeof webix$ajax,
    $$: typeof webix$$$,
    alert: typeof webix$alert,
    animate: typeof webix$animate,
    attachEvent: typeof webix$attachEvent,
    bind: typeof webix$bind,
    blockEvent: typeof webix$blockEvent,
    callEvent: typeof webix$callEvent,
    clone: typeof webix$clone,
    confirm: typeof webix$confirm,
    copy: typeof webix$copy,
    delay: typeof webix$delay,
    detachEvent: typeof webix$detachEvent,
    dp: typeof webix$dp,
    editStop: typeof webix$editStop,
    event: typeof webix$event,
    eventRemove: typeof webix$eventRemove,
    exec: typeof webix$exec,
    extend: typeof webix$extend,
    hasEvent: typeof webix$hasEvent,
    isArray: typeof webix$isArray,
    isDate: typeof webix$isDate,
    isUndefined: typeof webix$isUndefined,
    jsonp: typeof webix$jsonp,
    mapEvent: typeof webix$mapEvent,
    message: typeof webix$message,
    modalbox: typeof webix$modalbox,
    once: typeof webix$once,
    proto: typeof webix$proto,
    protoUI: typeof webix$protoUI,
    proxy: typeof webix$proxy,
    ready: typeof webix$ready,
    remote: typeof webix$remote,
    require: typeof webix$require,
    send: typeof webix$send,
    single: typeof webix$single,
    template: typeof webix$template,
    toArray: typeof webix$toArray,
    toExcel: typeof webix$toExcel,
    toFunctor: typeof webix$toFunctor,
    toNode: typeof webix$toNode,
    toPDF: typeof webix$toPDF,
    toPNG: typeof webix$toPNG,
    type: typeof webix$type,
    ui: typeof webix$ui,
    uid: typeof webix$uid,
    unblockEvent: typeof webix$unblockEvent,
    wrap: typeof webix$wrap,
}
declare type webix$WebixTemplate = (...args: any[]) => string;

declare type webix$WebixCallback = (...args: any[]) => any;

declare interface webix$PromisedData {
    then(handler: (data: any) => any): webix$PromisedData,
        fail(handler: (error: any) => any): webix$PromisedData
}

declare function webix$ajax(): webix$_ajax

declare function webix$$$(id: string | Event | HTMLElement): undefined.baseview

declare interface webix$_ajax {
    bind(master: any): webix$_ajax,
        del(url: string, params?: any, callback?: webix$WebixCallback): webix$PromisedData,
        get(url: string, params?: any, callback?: webix$WebixCallback): webix$PromisedData,
        getXHR(): any,
        headers(values: any): webix$_ajax,
        post(url: string, params?: any, callback?: webix$WebixCallback): webix$PromisedData,
        put(url: string, params?: any, callback?: webix$WebixCallback): webix$PromisedData,
        response(type: string): void,
        stringify(data: any): string,
        sync(): webix$_ajax,
        master: any
}

declare interface webix$clipbuffer {
    destructor(): void,
        focus(): void,
        init(): void,
        set(text: string): void
}

declare interface webix$color {
    hexToDec(hex: string): number,
        hsvToRgb(h: number, s: number, v: number): any[],
        rgbToHsv(r: number, g: number, b: number): any[],
        toHex(number: number, length?: number): string,
        toRgb(rgb: string): any[]
}

declare interface webix$csv {
    parse(text: string, delimiter?: any): any[],
        stringify(data: any[], delimiter?: any): string,
        delimiter: any,
        escape: boolean
}

declare interface webix$editors {
    $popup: any,
        checkbox: string,
        color: string,
        combo: string,
        date: string,
        inline - checkbox: string,
        inline - text: string,
        multiselect: string,
        password: string,
        popup: string,
        richselect: string,
        select: string,
        text: string
}

declare interface webix$env {
    cssPrefix: string,
        isFF: boolean,
        isIE: boolean,
        isSafari: boolean,
        isWebKit: boolean,
        jsPrefix: string,
        mouse: any,
        strict: boolean,
        svg: boolean,
        transform: boolean,
        transition: boolean,
        transitionDuration: string,
        transitionEnd: string,
        translate: string
}

declare interface webix$history {
    push(view: string, url: string, value: any): void,
        track(view: string, url: string): void
}

declare interface webix$html {
    addCss(node: HTMLElement, name: string): void,
        addMeta(name: string, value: string): void,
        addStyle(css: string): void,
        allowSelect(): void,
        create(name: string, attrs: any, html?: string): HTMLElement,
        createCss(data: any): string,
        denySelect(): void,
        getValue(node: HTMLElement): string,
        index(node: HTMLElement): number,
        insertBefore(node: HTMLElement, before: HTMLElement, rescue?: HTMLElement): void,
        locate(ev: Event | HTMLElement, name: string): string,
        offset(node: HTMLElement): any,
        pos(ev: Event): any,
        posRelative(ev: Event): any,
        preventEvent(ev: Event): boolean,
        remove(node: HTMLElement | HTMLElement[]): void,
        removeCss(node: HTMLElement, name: string): void,
        stopEvent(ev: Event): boolean
}

declare interface webix$i18n {
    dateFormatDate(date: string): any,
        dateFormatStr(date: any): string,
        fullDateFormatDate(date: string): any,
        fullDateFormatStr(date: webix$Date): string,
        intFormat(num: number): string,
        longDateFormatDate(date: string): any,
        longDateFormatStr(date: any): string,
        numberFormat(number: number): string,
        parseFormatDate(date: string): any,
        parseFormatStr(date: any): string,
        parseTimeFormatDate(date: string): any,
        parseTimeFormatStr(date: any): string,
        priceFormat(number: number): string,
        setLocale(name: string): void,
        timeFormatDate(time: string): any,
        timeFormatStr(date: any): string,
        calendar: any,
        controls: any,
        dateFormat: string,
        decimalDelimiter: string,
        decimalSize: number,
        fileSize: any[],
        fullDateFormat: string,
        groupDelimiter: string,
        groupSize: number,
        locales: any,
        longDateFormat: string,
        parseFormat: string,
        parseTimeFormat: string,
        price: string,
        priceSettings: any,
        timeFormat: string
}

declare interface webix$locale {
    pager: any
}

declare interface webix$markup {
    init(node: string, target: string): undefined.baseview,
        parse(data: any, datatype: string): void,
        attribute: any,
        dataTag: any,
        namespace: any
}

declare interface webix$promise {
    all(promise: webix$PromisedData, morepromises?: webix$PromisedData): void,
        defer(): webix$PromisedData,
        fcall(): webix$PromisedData,
        nfcall(): webix$PromisedData
}

declare interface webix$rules {
    isChecked(): boolean,
        isEmail(): boolean,
        isNotEmpty(): boolean,
        isNumber(): boolean
}

declare interface webix$cookie {
    clear(): void,
        get(name: string): any,
        put(name: string, value: any): void,
        remove(name: string): void
}

declare interface webix$local {
    clear(): void,
        get(name: string): any,
        put(name: string, value: any): void,
        remove(name: string): void
}

declare interface webix$session {
    clear(): void,
        get(name: string): any,
        put(name: string, value: any): void,
        remove(name: string): void
}

declare interface webix$storage {
    cookie: webix$cookie,
        local: webix$local,
        session: webix$session
}

declare function webix$alert(text: string, callback: webix$WebixCallback): HTMLElement

declare function webix$animate(html_element: HTMLElement, animation: any): void

declare function webix$attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number

declare function webix$bind(code: webix$WebixCallback, master: any): webix$WebixCallback

declare function webix$blockEvent(): void

declare function webix$callEvent(name: string, params: any[]): boolean

declare function webix$clone(source: any): any

declare function webix$confirm(text: string, callback: webix$WebixCallback): HTMLElement

declare function webix$copy(source: any): any

declare function webix$delay(code: webix$WebixCallback, owner?: any, params?: any[], delay?: number): number

declare function webix$detachEvent(id: string): void

declare function webix$dp(name: string): any

declare function webix$editStop(): void

declare function webix$event(
    node: HTMLElement | string,
    event: string,
    handler: webix$WebixCallback,
    context?: any): string | number

declare function webix$eventRemove(id: string | number): void

declare function webix$exec(code: string): void

declare function webix$extend(target: any, source: any, overwrite: boolean): any

declare function webix$hasEvent(name: string): boolean

declare function webix$isArray(check: any): boolean

declare function webix$isDate(check: any): boolean

declare function webix$isUndefined(check: any): boolean

declare function webix$jsonp(url: string, params?: any, callback?: webix$WebixCallback, master?: any): void

declare function webix$mapEvent(map: any): void

declare function webix$message(text: string): void

declare function webix$modalbox(text: string, callback: webix$WebixCallback): HTMLElement

declare function webix$once(code: webix$WebixCallback): void

declare function webix$proto(target: any, mixin1?: any, mixinN?: any): any

declare function webix$protoUI(target: any, view: any, mixin1: any, mixinN: any): any

declare function webix$proxy(type: string, source: string): any

declare function webix$ready(code: webix$WebixCallback): void

declare function webix$remote(): void

declare function webix$require(url: string): void

declare function webix$send(url: string, values: any, method: string, target: string): void

declare function webix$single(source: webix$WebixCallback): webix$WebixCallback

declare function webix$template(template: string): webix$WebixCallback

declare function webix$toArray(array: any[]): any[]

declare function webix$toExcel(id: any, options: any): void

declare function webix$toFunctor(name: string): webix$WebixCallback

declare function webix$toNode(id: string): HTMLElement

declare function webix$toPDF(id: string, name: string): void

declare function webix$toPNG(id: string, name: string): void

declare function webix$type(config: any): void

declare function webix$ui(config: any, parent?: any, replacement?: any): undefined.baseview

declare function webix$uid(): number

declare function webix$unblockEvent(): void

declare function webix$wrap(target: webix$WebixCallback, source: webix$WebixCallback): webix$WebixCallback

declare var codebase: string;

declare var name: string;

declare var version: string;

declare var clipbuffer: webix$clipbuffer;

declare var color: webix$color;

declare var csv: webix$csv;

declare var editors: webix$editors;

declare var env: webix$env;

declare var history: webix$history;

declare var html: webix$html;

declare var i18n: webix$i18n;

declare var locale: webix$locale;

declare var markup: webix$markup;

declare var promise: webix$promise;

declare var rules: webix$rules;

declare var storage: webix$storage;

declare interface webix$ActiveContent {}

declare var ActiveContent: webix$ActiveContent;

declare interface webix$AtomDataLoader {
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
        parse(data: any, type: string): void
}

declare var AtomDataLoader: webix$AtomDataLoader;

declare interface webix$AtomRender {
    render(id: string | number, data: any, type: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void
}

declare var AtomRender: webix$AtomRender;

declare interface webix$AutoTooltip {}

declare var AutoTooltip: webix$AutoTooltip;

declare interface webix$BaseBind {
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        unbind(): void
}

declare var BaseBind: webix$BaseBind;

declare interface webix$BindSource {
    addBind(source: any, rule: string, format: string): void,
        getBindData(key: string | number, update: boolean): void,
        removeBind(source: any): void,
        saveBatch(func: webix$WebixCallback): void,
        setBindData(data: any, key: string | number): void
}

declare var BindSource: webix$BindSource;

declare interface webix$Canvas {
    clearCanvas(): void,
        getCanvas(context: string): any,
        hideCanvas(): void,
        renderText(x: number, y: number, text: string, css: string, w: number): void,
        renderTextAt(
            valign: string,
            align: string,
            x: number,
            y: number,
            t: string,
            c: string,
            w: number): void,
        showCanvas(): void,
        toggleCanvas(): void
}

declare var Canvas: webix$Canvas;

declare interface webix$CodeParser {
    collapseNames(obj: any): {
            [key: string]: any
        },
        expandNames(obj: {
            [key: string]: any
        }): any
}

declare var CodeParser: webix$CodeParser;

declare interface webix$CollectionBind {
    getCursor(): number,
        refreshCursor(): void,
        setCursor(cursor: string | number): void
}

declare var CollectionBind: webix$CollectionBind;

declare interface webix$ContextHelper {
    attachTo(view: any): void,
        getContext(): any,
        setContext(context: any): void
}

declare var ContextHelper: webix$ContextHelper;

declare interface webix$CopyPaste {}

declare var CopyPaste: webix$CopyPaste;

declare interface webix$CustomScroll {
    enable(html_node: HTMLElement | undefined.baseview): void,
        init(): void,
        resize(): void,
        scrollStep: number
}

declare var CustomScroll: webix$CustomScroll;

declare interface webix$DataCollection {
    add(obj: any, index?: number): string | number,
        addBind(source: any, rule: string, format: string): void,
        attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        clearAll(): void,
        clearValidation(): void,
        copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
        count(): number,
        define(property: string, value: any): void,
        destructor(): void,
        detachEvent(id: string): void,
        exists(id: string | number): boolean,
        filter(
            text: string | webix$WebixTemplate | webix$WebixCallback,
            value: string,
            preserve: boolean): void,
        find(criterion: webix$WebixCallback, first?: boolean): any,
        getBindData(key: string | number, update: boolean): void,
        getCursor(): number,
        getFirstId(): string | number,
        getIdByIndex(index: number): string | number,
        getIndexById(id: string | number): number,
        getItem(id: string | number): any,
        getLastId(): string | number,
        getNextId(id: string | number, step: number): string | number,
        getPrevId(id: string | number, step: number): string | number,
        hasEvent(name: string): boolean,
        isVisible(): boolean,
        load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
        loadNext(
            count: number,
            start: number,
            callback: webix$WebixCallback,
            url: string,
            now: boolean): void,
        mapEvent(map: any): void,
        move(sid: string, tindex: number, tobj?: any, details?: any): string,
        moveBottom(id: string | number): void,
        moveDown(id: string | number, step: number): void,
        moveTop(id: string | number): void,
        moveUp(id: string | number, step: number): void,
        parse(data: any, type: string): void,
        refresh(id?: string | number): void,
        refreshCursor(): void,
        remove(id: string | number): void,
        removeBind(source: any): void,
        saveBatch(func: webix$WebixCallback): void,
        serialize(): any,
        setBindData(data: any, key: string | number): void,
        setCursor(cursor: string | number): void,
        sort(by: string, dir?: string, as?: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
        unbind(): void,
        unblockEvent(): void,
        updateItem(id: string | number, data: any): void,
        validate(id?: string): boolean,
        config: {
            [key: string]: any
        },
        name: string
}

declare interface webix$DataDriver {
    csv: any,
        excel: string,
        html: any,
        htmltable: any,
        jsarray: any,
        json: any,
        xml: any
}

declare var DataDriver: webix$DataDriver;

declare interface webix$DataLoader {
    add(obj: any, index?: number): string | number,
        clearAll(): void,
        count(): number,
        exists(id: string | number): boolean,
        filter(
            text: string | webix$WebixTemplate | webix$WebixCallback,
            value: string,
            preserve: boolean): void,
        find(criterion: webix$WebixCallback, first?: boolean): any,
        getFirstId(): string | number,
        getIdByIndex(index: number): string | number,
        getIndexById(id: string | number): number,
        getItem(id: string | number): any,
        getLastId(): string | number,
        getNextId(id: string | number, step: number): string | number,
        getPrevId(id: string | number, step: number): string | number,
        load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
        loadNext(
            count: number,
            start: number,
            callback: webix$WebixCallback,
            url: string,
            now: boolean): void,
        parse(data: any, type: string): void,
        refresh(id?: string | number): void,
        remove(id: string | number): void,
        serialize(): any,
        sort(by: string, dir?: string, as?: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
        updateItem(id: string | number, data: any): void
}

declare var DataLoader: webix$DataLoader;

declare interface webix$DataMarks {
    addCss(id: string | number, css: string, silent?: boolean): void,
        clearCss(css: string, silent?: boolean): void,
        hasCss(id: string | number, css: string): boolean,
        removeCss(id: string | number, css: string, silent?: boolean): void
}

declare var DataMarks: webix$DataMarks;

declare interface webix$DataMove {
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
        move(sid: string, tindex: number, tobj?: any, details?: any): string,
        moveBottom(id: string | number): void,
        moveDown(id: string | number, step: number): void,
        moveTop(id: string | number): void,
        moveUp(id: string | number, step: number): void
}

declare var DataMove: webix$DataMove;

declare interface webix$DataProcessor {
    attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        attachProgress(
            start: webix$WebixCallback,
            end: webix$WebixCallback,
            error: webix$WebixCallback): void,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        clearValidation(): void,
        define(property: string, value: any): void,
        detachEvent(id: string): void,
        escape(value: string): string,
        getItemState(itemId: string | number): any,
        getState(): string | boolean,
        hasEvent(name: string): boolean,
        ignore(code: webix$WebixCallback, master: any): void,
        mapEvent(map: any): void,
        off(): void,
        on(): void,
        processResult(data: any): void,
        reset(): void,
        save(id: string | number, operation: string): void,
        send(): void,
        setItemState(itemId: string | number, state: boolean): void,
        unblockEvent(): void,
        validate(mode?: any): boolean,
        config: {
            [key: string]: any
        },
        name: string
}

declare var DataProcessor: webix$DataProcessor;

declare interface webix$DataRecord {
    attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        define(property: string, value: any): void,
        detachEvent(id: string): void,
        getValues(): any,
        hasEvent(name: string): boolean,
        isVisible(): boolean,
        load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
        mapEvent(map: any): void,
        parse(data: any, type: string): void,
        refresh(id?: string | number): void,
        setValues(values: any, update?: boolean): void,
        unbind(): void,
        unblockEvent(): void,
        config: {
            [key: string]: any
        },
        name: string
}

declare var DataRecord: webix$DataRecord;

declare interface webix$DataState {
    getState(): any,
        setState(state: any): void
}

declare var DataState: webix$DataState;

declare interface webix$DataStore {
    add(obj: any, index?: number): string | number,
        addMark(id: string, name: string, css?: boolean, value?: any): any,
        attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        changeId(old: string | number, newid: string | number): void,
        clearAll(): void,
        clearMark(name: string): void,
        count(): number,
        destructor(): void,
        detachEvent(id: string): void,
        each(method: webix$WebixCallback, master?: any, all?: boolean): void,
        exists(id: string | number): boolean,
        filter(
            text: string | webix$WebixTemplate | webix$WebixCallback,
            value: string,
            preserve: boolean): void,
        find(criterion: webix$WebixCallback, first?: boolean): any,
        getFirstId(): string | number,
        getIdByIndex(index: number): string | number,
        getIndexById(id: string | number): number,
        getIndexRange(from: string | number, to: string | number): any[],
        getItem(id: string | number): any,
        getLastId(): string | number,
        getMark(id: string, mark_name: string): any,
        getNextId(id: string | number, step: number): string | number,
        getPrevId(id: string | number, step: number): string | number,
        getRange(from: string | number, to: string | number): any[],
        hasEvent(name: string): boolean,
        id(item: any): string | number,
        importData(source: undefined.baseview): void,
        mapEvent(map: any): void,
        move(sid: string, tindex: number, tobj?: any, details?: any): string,
        provideApi(target: any, eventable: boolean): void,
        refresh(id?: string | number): void,
        remove(id: string | number): void,
        removeMark(id: string, name: string, css: boolean): void,
        scheme(config: any): void,
        serialize(): any,
        setDriver(type: string): void,
        silent(code: webix$WebixCallback): void,
        sort(by: string, dir?: string, as?: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
        unblockEvent(): void,
        unsync(): void,
        updateItem(id: string | number, data: any): void,
        driver: any,
        name: string,
        order: any[],
        pull: any
}

declare var DataStore: webix$DataStore;

declare interface webix$DataValue {
    attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        detachEvent(id: string): void,
        getValue(): string,
        hasEvent(name: string): boolean,
        isVisible(): boolean,
        mapEvent(map: any): void,
        refresh(): void,
        setValue(value: string): void,
        unbind(): void,
        unblockEvent(): void,
        name: string
}

declare var DataValue: webix$DataValue;

declare interface webix$Date {
    add(date: any, inc: number, mode: string): any,
        copy(date: any): any,
        datePart(date: any): any,
        dateToStr(format: string, utc: boolean): webix$WebixCallback,
        dayStart(date: any): any,
        equal(datea: any, dateb: any): boolean,
        getISOWeek(date: any): number,
        getUTCISOWeek(data: any): number,
        isHoliday(date: any): boolean,
        monthStart(date: any): any,
        strToDate(format: string, utc: boolean): webix$WebixCallback,
        timePart(date: any): number,
        toFixed(num: number): number,
        weekStart(date: any): any,
        yearStart(date: any): any,
        startOnMonday: boolean
}

declare var Date: webix$Date;

declare interface webix$Destruction {
    destructor(): void
}

declare var Destruction: webix$Destruction;

declare interface webix$DragControl {
    addDrag(node: string | number | HTMLElement, ctrl: any): void,
        addDrop(node: string | number | HTMLElement, ctrl: any, master_mode: boolean): void,
        createDrag(event: Event): void,
        destroyDrag(): void,
        getContext(): any,
        getMaster(target: any): any,
        getNode(): HTMLElement,
        sendSignal(signal: string): void,
        $drag(s: any, e: Event): HTMLElement,
        $dragIn(s: any, t: any, e: Event): void,
        $dragOut(s: any, t: any, n: any, e: Event): void,
        $dragPos: webix$WebixCallback,
        $drop(s: any, t: any, d: any, e: Event): void,
        left: number,
        top: number
}

declare var DragControl: webix$DragControl;

declare interface webix$DragItem {
    $drag(source: HTMLElement, ev: Event): string,
        $dragHTML: webix$WebixCallback,
        $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
        $dragMark(context: any, ev: Event): boolean,
        $dragOut(
            source: HTMLElement,
            old_target: HTMLElement,
            new_target: HTMLElement,
            ev: Event): void,
        $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
        $dropAllow: webix$WebixCallback
}

declare var DragItem: webix$DragItem;

declare interface webix$DragOrder {
    $drag(source: HTMLElement, ev: Event): string,
        $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
        $dragPos: webix$WebixCallback,
        $drop(source: HTMLElement, target: HTMLElement, ev: Event): void
}

declare var DragOrder: webix$DragOrder;

declare interface webix$EditAbility {
    edit(id: any): void,
        editCancel(): void,
        editNext(): boolean,
        editStop(): void,
        focusEditor(): void,
        getEditState(): any,
        getEditor(id?: string): any,
        getEditorValue(): string,
        validateEditor(id?: string | number): boolean
}

declare var EditAbility: webix$EditAbility;

declare interface webix$EventSystem {
    attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        detachEvent(id: string): void,
        hasEvent(name: string): boolean,
        mapEvent(map: any): void,
        unblockEvent(): void
}

declare var EventSystem: webix$EventSystem;

declare interface webix$Group {
    group(config: any, mode: boolean): void,
        ungroup(mode: boolean): void
}

declare var Group: webix$Group;

declare interface webix$GroupMethods {
    any(property: string, data: any): void,
        count(property: string, data: any): void,
        max(property: string, data: any): void,
        min(property: string, data: any): void,
        string(property: string, data: any): void,
        sum(property: string, data: any): void
}

declare var GroupMethods: webix$GroupMethods;

declare interface webix$GroupStore {
    group(stats: any): void,
        ungroup(): void
}

declare var GroupStore: webix$GroupStore;

declare interface webix$HtmlMap {
    addPoly(id: string | number, points: any[]): void,
        addRect(id: string | number, points: any[], userdata?: string): void,
        addSector(
            id: string | number,
            aplha0: number,
            aplha1: number,
            x: number,
            y: number,
            R: number,
            ky: number): void,
        render(html: HTMLElement): void
}

declare var HtmlMap: webix$HtmlMap;

declare interface webix$IdSpace {
    innerId(id: string | number): string | number,
        ui(view: any): undefined.baseview,
        $$: any
}

declare var IdSpace: webix$IdSpace;

declare interface webix$KeysNavigation {
    moveSelection(direction: string): void
}

declare var KeysNavigation: webix$KeysNavigation;

declare interface webix$MapCollection {}

declare var MapCollection: webix$MapCollection;

declare interface webix$Modality {}

declare var Modality: webix$Modality;

declare interface webix$MouseEvents {
    on_click: webix$WebixCallback,
        on_context: {
            [key: string]: any
        },
        on_dblclick: webix$WebixCallback,
        on_mouse_move: webix$WebixCallback
}

declare var MouseEvents: webix$MouseEvents;

declare interface webix$Movable {}

declare var Movable: webix$Movable;

declare interface webix$NavigationButtons {}

declare var NavigationButtons: webix$NavigationButtons;

declare interface webix$Number {
    format(value: number, config: any): string,
        numToStr(config: any): webix$WebixCallback
}

declare var Number: webix$Number;

declare interface webix$OverlayBox {
    hideOverlay(): void,
        showOverlay(): void
}

declare var OverlayBox: webix$OverlayBox;

declare interface webix$PagingAbility {
    getPage(): number,
        getPager(): any,
        setPage(page: number): void
}

declare var PagingAbility: webix$PagingAbility;

declare interface webix$PowerArray {
    each(functor: webix$WebixCallback, master: any): void,
        filter(functor: webix$WebixCallback, master: any): any[],
        find(data: any): number,
        insertAt(data: any, pos: number): void,
        map(functor: webix$WebixCallback, master: any): any[],
        remove(value: any): void,
        removeAt(pos: number, len: number): void
}

declare var PowerArray: webix$PowerArray;

declare interface webix$ProgressBar {
    hideProgress(): void,
        showProgress(config?: any): void
}

declare var ProgressBar: webix$ProgressBar;

declare interface webix$RecordBind {}

declare var RecordBind: webix$RecordBind;

declare interface webix$RenderStack {
    customize(obj: any): void,
        getItemNode(id: string | number): void,
        locate(e: Event): string | number,
        render(id: string | number, data: any, type: string): void,
        showItem(id: string | number): void,
        type: {
            [key: string]: any
        },
        types: {
            [key: string]: any
        }
}

declare var RenderStack: webix$RenderStack;

declare interface webix$Scrollable {
    getScrollState(): any,
        scrollTo(x: number, y: number): void
}

declare var Scrollable: webix$Scrollable;

declare interface webix$SelectionModel {
    getSelectedId(as_array: boolean): string | any[],
        getSelectedItem(as_array: boolean): any,
        isSelected(id: string | number): boolean,
        select(id: string | any[], preserve: boolean): void,
        selectAll(from?: string, to?: string): void,
        unselect(id?: string): void,
        unselectAll(): void
}

declare var SelectionModel: webix$SelectionModel;

declare interface webix$Settings {
    define(property: string, value: any): void,
        config: {
            [key: string]: any
        },
        name: string
}

declare var Settings: webix$Settings;

declare interface webix$SingleRender {
    customize(obj: any): void,
        render(id: string | number, data: any, type: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
        type: {
            [key: string]: any
        }
}

declare var SingleRender: webix$SingleRender;

declare interface webix$Sparklines {
    template(item: any, common: string, data: any[], column: any, index: number): string,
        paddingX: number,
        paddingY: number,
        radius: number
}

declare var Sparklines: webix$Sparklines;

declare interface webix$TablePaste {}

declare var TablePaste: webix$TablePaste;

declare interface webix$Touch {
    disable(): void,
        enable(): void,
        limit(mode: boolean): void,
        scrollTo(node: HTMLElement, x: number, y: number, speed: string): void,
        config: any
}

declare var Touch: webix$Touch;

declare interface webix$TreeAPI {
    close(id: string | number): void,
        closeAll(): void,
        getOpenItems(): any[],
        getState(): any,
        isBranchOpen(id: string | number): boolean,
        open(id: string | number, show?: boolean): void,
        openAll(): void,
        setState(state: any): void
}

declare var TreeAPI: webix$TreeAPI;

declare interface webix$TreeClick {
    webix_tree_checkbox(obj: any, common: {
            [key: string]: any
        }): string,
        webix_tree_close(obj: any, common: {
            [key: string]: any
        }): string,
        webix_tree_open(obj: any, common: {
            [key: string]: any
        }): string
}

declare var TreeClick: webix$TreeClick;

declare interface webix$TreeCollection {
    add(obj: any, index?: number, parentId?: string): string,
        addBind(source: any, rule: string, format: string): void,
        attachEvent(type: string, functor: webix$WebixCallback, id?: string): string | number,
        bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        blockEvent(): void,
        callEvent(name: string, params: any[]): boolean,
        clearAll(): void,
        clearValidation(): void,
        copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
        count(): number,
        define(property: string, value: any): void,
        destructor(): void,
        detachEvent(id: string): void,
        exists(id: string | number): boolean,
        filter(
            text: string | webix$WebixTemplate | webix$WebixCallback,
            value: string,
            preserve: boolean): void,
        find(criterion: webix$WebixCallback, first?: boolean): any,
        getBindData(key: string | number, update: boolean): void,
        getBranchIndex(id: string | number, parent?: string | number): number,
        getCursor(): number,
        getFirstChildId(id: string | number): string,
        getFirstId(): string | number,
        getIdByIndex(index: number): string | number,
        getIndexById(id: string | number): number,
        getItem(id: string | number): any,
        getLastId(): string | number,
        getNextId(id: string | number, step: number): string | number,
        getNextSiblingId(id: string | number): string | number,
        getParentId(id: string | number): string | number,
        getPrevId(id: string | number, step: number): string | number,
        getPrevSiblingId(id: string | number): string | number,
        hasEvent(name: string): boolean,
        isBranch(id: string | number): boolean,
        isVisible(): boolean,
        load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
        loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void,
        loadNext(
            count: number,
            start: number,
            callback: webix$WebixCallback,
            url: string,
            now: boolean): void,
        mapEvent(map: any): void,
        move(sid: string, tindex: number, tobj?: any, details?: any): string,
        moveBottom(id: string | number): void,
        moveDown(id: string | number, step: number): void,
        moveTop(id: string | number): void,
        moveUp(id: string | number, step: number): void,
        parse(data: any, type: string): void,
        refresh(id?: string | number): void,
        refreshCursor(): void,
        remove(id: string | number): void,
        removeBind(source: any): void,
        saveBatch(func: webix$WebixCallback): void,
        serialize(): any,
        setBindData(data: any, key: string | number): void,
        setCursor(cursor: string | number): void,
        sort(by: string, dir?: string, as?: string): void,
        sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
        unbind(): void,
        unblockEvent(): void,
        updateItem(id: string | number, data: any): void,
        validate(id?: string): boolean,
        config: {
            [key: string]: any
        },
        name: string
}

declare var TreeCollection: webix$TreeCollection;

declare interface webix$TreeDataLoader {
    loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void
}

declare var TreeDataLoader: webix$TreeDataLoader;

declare interface webix$TreeDataMove {
    copy(
            sid: string | number,
            tindex: number,
            tobj?: undefined.baseview,
            details?: any): string | number,
        move(
            sid: string | number,
            tindex: number,
            tobj?: undefined.baseview,
            details?: any): string | number,
        $dropAllow: webix$WebixCallback
}

declare var TreeDataMove: webix$TreeDataMove;

declare interface webix$TreeRenderStack {
    getItemNode(id: string | number): void,
        render(id: string | number, data: any, type: string): void
}

declare var TreeRenderStack: webix$TreeRenderStack;

declare interface webix$TreeStateCheckbox {
    checkAll(id?: string | number): void,
        checkItem(id: string): void,
        getChecked(): any[],
        isChecked(id: string | number): boolean,
        uncheckAll(id?: string | number): void,
        uncheckItem(id: string): void
}

declare var TreeStateCheckbox: webix$TreeStateCheckbox;

declare interface webix$TreeStore {
    add(obj: any, index?: number, parentId?: string): string,
        changeId(old: string | number, newid: string | number): void,
        clearAll(): void,
        count(): number,
        each(code: webix$WebixCallback, master: any, all: boolean, pid: string): void,
        eachChild(pid: string, code: webix$WebixCallback, master?: any, all?: boolean): void,
        eachLeaf(pid: string, code: webix$WebixCallback): void,
        eachOpen(code: webix$WebixCallback, master?: any, pid?: string): void,
        eachSubItem(pid: string, code: webix$WebixCallback): void,
        getBranch(id: string): any[],
        getBranchIndex(id: string | number, parent?: string | number): number,
        getFirstChildId(id: string | number): string,
        getNextSiblingId(id: string | number): string | number,
        getParentId(id: string | number): string | number,
        getPrevSiblingId(id: string | number): string | number,
        getTopRange(): any[],
        isBranch(id: string | number): boolean,
        provideApi(target: any, eventable: boolean): void,
        remove(id: string | number): void,
        serialize(): any,
        name: string
}

declare var TreeStore: webix$TreeStore;

declare interface webix$TreeTableClick {}

declare var TreeTableClick: webix$TreeTableClick;

declare interface webix$TreeTablePaste {
    insert(data: any[]): void
}

declare var TreeTablePaste: webix$TreeTablePaste;

declare interface webix$TreeType {
    checkbox(obj: any, common: any): string,
        folder(obj: any, common: any): string,
        icon(obj: any, common: any): string,
        space(obj: any, common: any): string
}

declare var TreeType: webix$TreeType;

declare interface webix$UIExtension {}

declare var UIExtension: webix$UIExtension;

declare interface webix$UIManager {
    addHotKey(key: string, handler: webix$WebixCallback, obj?: any): void,
        applyChanges(): void,
        canFocus(id: string | number): boolean,
        destructor(): void,
        getFocus(): undefined.baseview,
        getNext(view: any): any,
        getPrev(view: any): any,
        getState(id: string, childs: boolean): any,
        getTop(id: string | number): any,
        hasFocus(id: string | number): boolean,
        removeHotKey(key: string, handler?: webix$WebixCallback, obj?: any): void,
        setFocus(id: string | number): void,
        setState(state: any): void
}

declare var UIManager: webix$UIManager;

declare interface webix$Undo {
    ignoreUndo(functor: webix$WebixCallback): void,
        removeUndo(id: string): void,
        undo(id: string): void
}

declare var Undo: webix$Undo;

declare interface webix$UploadDriver {
    flash: any,
        html5: any
}

declare var UploadDriver: webix$UploadDriver;

declare interface webix$ValidateCollection {
    clearValidation(): void,
        validate(id?: string): boolean
}

declare var ValidateCollection: webix$ValidateCollection;

declare interface webix$ValidateData {
    clearValidation(): void,
        validate(mode?: any): boolean
}

declare var ValidateData: webix$ValidateData;

declare interface webix$ValueBind {}

declare var ValueBind: webix$ValueBind;

declare interface webix$Values {
    clear(): void,
        focus(item: string): void,
        getCleanValues(): any,
        getDirtyValues(): any,
        getValues(details?: any): {
            [key: string]: any
        },
        isDirty(): boolean,
        markInvalid(name: string, state?: boolean | string): void,
        setDirty(mark?: boolean): void,
        setValues(values: any, update?: boolean): void
}

declare var Values: webix$Values;

declare interface webix$VirtualRenderStack {
    getItemNode(id: string | number): void,
        render(id: string | number, data: any, type: string): void,
        showItem(id: string | number): void
}

declare var VirtualRenderStack: webix$VirtualRenderStack;

declare interface webix$DataCollectionFactory {
    new(): webix$DataCollection
}

declare var DataCollection: webix$DataCollectionFactory;


declare var npm$namespace$ui: {
    delay: typeof ui$delay,
    fullScreen: typeof ui$fullScreen,
    hasMethod: typeof ui$hasMethod,
    resize: typeof ui$resize,
    zIndex: typeof ui$zIndex,
    proto: typeof ui$proto,
    template: typeof ui$template,
}
declare function ui$delay(code: webix$WebixCallback, owner?: any, params?: any[], delay?: number): number

declare function ui$fullScreen(): void

declare function ui$hasMethod(name: string, method_name: string): boolean

declare function ui$resize(): void

declare function ui$zIndex(): number

declare var scrollSize: number;

declare var zIndexBase: number;

declare interface ui$baselayoutConfig {
    animate?: any,
        borderless?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        responsive?: string,
        rows?: any[],
        visibleBatch?: string,
        width?: number
}

declare type ui$baselayoutEventName = "onBindRequest" | "onDestruct";

declare type ui$baselayout = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$baselayoutEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$baselayoutConfig,
    name: string
}

declare interface ui$baseviewConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        width?: number
}

declare type ui$baseviewEventName = "onBindRequest" | "onDestruct";

declare interface ui$baseview {
    adjust(): void,
        bind(target: any, rule?: webix$WebixCallback, format?: string): void,
        define(property: string, value: any): void,
        destructor(): void,
        disable(): void,
        enable(): void,
        getChildViews(): any[],
        getFormView(): undefined.baseview,
        getNode(): any,
        getParentView(): any,
        getTopParentView(): undefined.baseview,
        hide(): void,
        isEnabled(): boolean,
        isVisible(): boolean,
        resize(): void,
        show(force?: boolean, animation?: boolean): void,
        unbind(): void,
        $getSize: any[],
        $height: number,
        $setSize(x: number, y: number): boolean,
        $skin: any,
        $view: HTMLElement,
        $width: number,
        config: ui$baseviewConfig,
        name: string
}

declare interface ui$checksuggestConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        button?: boolean,
        buttonText?: string,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        filter?: webix$WebixCallback,
        fitMaster?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        input?: HTMLElement | string,
        keyPressTimeout?: number,
        left?: number,
        master?: undefined.baseview,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        separator?: string,
        template?: string | webix$WebixTemplate,
        textValue?: string,
        toFront?: boolean,
        top?: number,
        type?: string,
        value?: string | number,
        width?: number,
        zIndex?: number
}

declare type ui$checksuggestEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValueSuggest" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$checksuggest = {
    adjust(): void,
    attachEvent(
        type: ui$checksuggestEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getButton(): undefined.baseview,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getItemText(id: string | number): string,
    getList(): undefined.baseview,
    getMasterValue(): any,
    getNode(): any,
    getParentView(): any,
    getSuggestion(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    linkInput(input: HTMLElement): void,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setMasterValue(value: any): void,
    setPosition(x: number, y: number): void,
    setValue(value: string | number): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$checksuggestConfig,
    name: string
}

declare interface ui$protoConfig {
    animate?: any,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        template?: string | webix$WebixCallback,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number
}

declare type ui$protoEventName = "onAfterAdd" |
    "onAfterDelete" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeDelete" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onFocus" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare function ui$proto(target: any, mixin1?: any, mixinN?: any): any

declare interface ui$resizeareaConfig {
    border?: boolean,
        container?: string | HTMLElement,
        cursor?: string,
        dir?: string,
        eventPos?: number,
        height?: number,
        id?: string | number,
        on?: any,
        start?: number,
        width?: number
}

declare type ui$resizeareaEventName = "onResize" | "onResizeEnd";

declare type ui$resizearea = {
    attachEvent(
        type: ui$resizeareaEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    detachEvent(id: string): void,
    hasEvent(name: string): boolean,
    mapEvent(map: any): void,
    unblockEvent(): void,
    config: ui$resizeareaConfig,
    name: string
}

declare interface ui$viewConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        width?: number
}

declare type ui$viewEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$view = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$viewConfig,
    name: string
}

declare interface ui$vscrollConfig {
    container?: string | HTMLElement,
        id?: string | number,
        on?: any,
        scroll?: string,
        scrollHeight?: number,
        scrollPos?: number,
        scrollSize?: number,
        scrollStep?: number,
        scrollVisible?: boolean,
        scrollWidth?: number,
        zoom?: number
}

declare type ui$vscrollEventName = "onScroll";

declare type ui$vscroll = {
    activeArea(node: HTMLElement): void,
    attachEvent(
        type: ui$vscrollEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    detachEvent(id: string): void,
    getScroll(): number,
    getSize(): number,
    hasEvent(name: string): boolean,
    mapEvent(map: any): void,
    scrollTo(pos: number): void,
    sizeTo(size: number): void,
    unblockEvent(): void,
    config: ui$vscrollConfig,
    name: string
}

declare interface ui$accordionConfig {
    animate?: any,
        borderless?: boolean,
        collapsed?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        multi?: boolean | string,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        panelClass?: string,
        responsive?: string,
        rows?: any[],
        type?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$accordionEventName = "onAfterCollapse" | "onAfterExpand" | "onBindRequest" | "onDestruct";

declare type ui$accordion = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$accordionEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$accordionConfig,
    name: string
}

declare interface ui$accordionitemConfig {
    animate?: any,
        body?: any,
        borderless?: boolean,
        collapsed?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        header?: boolean | string | webix$WebixCallback,
        headerAlt?: string | webix$WebixCallback,
        headerAltHeight?: number,
        headerHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        width?: number
}

declare type ui$accordionitemEventName = "onAfterContextMenu" |
    "onAfterScroll" |
    "onBeforeContextMenu" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$accordionitem = {
    adjust(): void,
    attachEvent(
        type: ui$accordionitemEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    collapse(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    expand(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$accordionitemConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback
}

declare interface ui$barcodeConfig {
    animate?: any,
        borderless?: boolean,
        color?: string,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        paddingX?: number,
        paddingY?: number,
        textHeight?: number,
        type?: string,
        value?: string,
        width?: number
}

declare type ui$barcodeEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$barcode = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    render(): void,
    resize(): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$barcodeConfig,
    name: string,
    types: any[]
}

declare interface ui$buttonConfig {
    align?: string,
        animate?: any,
        autowidth?: boolean,
        borderless?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputWidth?: number,
        label?: string,
        labelPosition?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        tabFocus?: boolean,
        tooltip?: string,
        type?: string,
        value?: string | number,
        width?: number
}

declare type ui$buttonEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$button = {
    adjust(): void,
    attachEvent(
        type: ui$buttonEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $renderInput(config: any): HTMLElement,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$buttonConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$calendarConfig {
    animate?: any,
        blockDates?: webix$WebixCallback,
        borderless?: boolean,
        calendarHeader?: string,
        calendarTime?: string,
        calendarWeekHeader?: string,
        cellHeight?: number | string,
        container?: string | HTMLElement,
        css?: string,
        date?: webix$Date | string,
        dayTemplate?: webix$WebixCallback,
        disabled?: boolean,
        events?: webix$WebixCallback,
        gravity?: number,
        headerHeight?: number,
        height?: number,
        hidden?: boolean,
        icons?: any,
        id?: string | number,
        maxDate?: webix$Date | string,
        maxHeight?: number,
        maxTime?: string,
        maxWidth?: number,
        minDate?: webix$Date | string,
        minHeight?: number,
        minTime?: string,
        minWidth?: number,
        minuteStep?: number,
        monthSelect?: boolean,
        mouseEventDelay?: number,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        select?: boolean,
        skipEmptyWeeks?: boolean,
        timepicker?: boolean,
        timepickerHeight?: number,
        type?: string,
        weekHeader?: boolean,
        weekNumber?: boolean,
        width?: number
}

declare type ui$calendarEventName = "onAfterContextMenu" |
    "onAfterDateSelect" |
    "onAfterMonthChange" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterZoom" |
    "onBeforeContextMenu" |
    "onBeforeDateSelect" |
    "onBeforeMonthChange" |
    "onBeforeRender" |
    "onBeforeZoom" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDateClear" |
    "onDateSelect" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTodaySet" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$calendar = {
    adjust(): void,
    attachEvent(
        type: ui$calendarEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getSelectedDate(): any,
    getTopParentView(): undefined.baseview,
    getValue(): any,
    getVisibleDate(): any,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    selectDate(date: any, mode: boolean): void,
    setValue(date: any): void,
    show(force?: boolean, animation?: boolean): void,
    showCalendar(date: any): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$calendarConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback
}

declare interface ui$carouselConfig {
    animate?: any,
        borderless?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        navigation?: any,
        on?: any,
        rows?: any[],
        scrollSpeed?: string,
        type?: string,
        width?: number
}

declare type ui$carouselEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$carousel = {
    adjust(): void,
    adjustScroll(): void,
    attachEvent(
        type: ui$carouselEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getActiveId(): string,
    getActiveIndex(): number,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getLayout(): any,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    setActive(id: string): void,
    setActiveIndex(index: number): void,
    show(force?: boolean, animation?: boolean): void,
    showNext(): void,
    showPrev(): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$carouselConfig,
    name: string
}

declare interface ui$chartConfig {
    alpha?: number,
        animate?: any,
        barWidth?: number,
        border?: boolean,
        borderColor?: string,
        borderless?: boolean,
        cant?: number,
        color?: string | webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datathrottle?: number,
        datatype?: string,
        disableLines?: boolean,
        disabled?: boolean,
        eventRadius?: number,
        fill?: string,
        fixOverflow?: boolean,
        gradient?: boolean | string | webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        item?: any,
        label?: string | webix$WebixCallback,
        labelOffset?: number,
        legend?: any,
        line?: any,
        lineColor?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        offset?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        origin?: number,
        padding?: any,
        pieHeight?: number,
        pieInnerText?: string | webix$WebixCallback,
        preset?: string,
        radius?: number,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        save?: string,
        scale?: string,
        scheme?: any,
        series?: any,
        shadow?: boolean,
        tooltip?: any,
        type?: string,
        url?: string,
        value?: string | webix$WebixTemplate,
        width?: number,
        x?: number,
        xAxis?: any,
        xValue?: string,
        y?: number,
        yAxis?: any,
        yValue?: string
}

declare type ui$chartEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$chart = {
    add(obj: any, index?: number): string | number,
    addSeries(obj: any): void,
    adjust(): void,
    attachEvent(
        type: ui$chartEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCanvas(): void,
    count(): number,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getTopParentView(): undefined.baseview,
    group(config: any, mode: boolean): void,
    hasEvent(name: string): boolean,
    hide(): void,
    hideSeries(series: string): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeAllSeries(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    serialize(): any,
    show(force?: boolean, animation?: boolean): void,
    showSeries(series: string): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    updateItem(id: string | number, data: any): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    colormap: {
        [key: string]: any
    },
    config: ui$chartConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    presets: {
        [key: string]: any
    }
}

declare interface ui$checkboxConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        checkValue?: string,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        customCheckbox?: boolean,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelRight?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        popup?: string,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        uncheckValue?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$checkboxEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$checkbox = {
    adjust(): void,
    attachEvent(
        type: ui$checkboxEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    toggle(): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$checkboxConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$colorboardConfig {
    animate?: any,
        borderless?: boolean,
        cols?: number,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxLightness?: number,
        maxWidth?: number,
        minHeight?: number,
        minLightness?: number,
        minWidth?: number,
        on?: any,
        palette?: any[],
        rows?: number,
        template?: webix$WebixCallback,
        value?: string,
        width?: number
}

declare type ui$colorboardEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$colorboard = {
    adjust(): void,
    attachEvent(
        type: ui$colorboardEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setValue(value: string): string,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$colorboardConfig,
    name: string
}

declare interface ui$colorpickerConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        editable?: boolean,
        format?: string,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icons?: boolean,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        stringResult?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        timeIcon?: string,
        timepicker?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$colorpickerEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$colorpicker = {
    adjust(): void,
    attachEvent(
        type: ui$colorpickerEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$colorpickerConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$comboConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        options?: any,
        placeholder?: string,
        popup?: string,
        popupWidth?: number,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        text?: string,
        tooltip?: string,
        type?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$comboEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$combo = {
    adjust(): void,
    attachEvent(
        type: ui$comboEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getList(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$comboConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$contextConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        left?: number,
        master?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        toFront?: boolean,
        top?: number,
        width?: number,
        zIndex?: number
}

declare type ui$contextEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$context = {
    adjust(): void,
    attachEvent(
        type: ui$contextEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    attachTo(view: any): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getContext(): any,
    getFormView(): undefined.baseview,
    getHead(): any,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setContext(context: any): void,
    setPosition(x: number, y: number): void,
    show(node?: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$contextConfig,
    name: string
}

declare interface ui$contextmenuConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        autoheight?: boolean,
        autowidth?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        left?: number,
        master?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        mouseEventDelay?: number,
        move?: boolean,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        openAction?: string,
        padding?: any,
        pager?: any,
        position?: string | webix$WebixCallback,
        ready?: webix$WebixCallback,
        relative?: string,
        removeMissed?: boolean,
        resize?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        subMenuPos?: string,
        submenuConfig?: any,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        toFront?: boolean,
        tooltip?: any,
        top?: number,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number,
        zIndex?: number
}

declare type ui$contextmenuEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeShow" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onHide" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMenuItemClick" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$contextmenu = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$contextmenuEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    attachTo(view: any): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    close(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    disableItem(id: string | number): void,
    enable(): void,
    enableItem(id: string | number): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getBody(): any,
    getChildViews(): any[],
    getContext(): any,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getHead(): any,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getMenu(id: string | number): any,
    getMenuItem(id: string | number): any,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getSubMenu(id: string | number): any,
    getTopMenu(): any,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    hideItem(id: string | number): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    resizeChildren(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setContext(context: any): void,
    setPage(page: number): void,
    setPosition(x: number, y: number): void,
    show(node?: HTMLElement, position?: any, point?: string): void,
    showItem(id: string | number): void,
    sizeToContent(): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    show(force: boolean, animation: boolean): void,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$contextmenuConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$counterConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        max?: number,
        maxHeight?: number,
        maxWidth?: number,
        min?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        popup?: string,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        step?: number,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$counterEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$counter = {
    adjust(): void,
    attachEvent(
        type: ui$counterEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    next(step?: number): void,
    prev(step?: number): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: number): void,
    shift(value?: number): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$counterConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$datasuggestConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        filter?: webix$WebixCallback,
        fitMaster?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        input?: HTMLElement | string,
        keyPressTimeout?: number,
        left?: number,
        master?: undefined.baseview,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        template?: string | webix$WebixTemplate,
        textValue?: string,
        toFront?: boolean,
        top?: number,
        type?: string,
        width?: number,
        zIndex?: number
}

declare type ui$datasuggestEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValueSuggest" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$datasuggest = {
    adjust(): void,
    attachEvent(
        type: ui$datasuggestEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getItemText(id: string | number): string,
    getList(): undefined.baseview,
    getMasterValue(): any,
    getNode(): any,
    getParentView(): any,
    getSuggestion(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    linkInput(input: HTMLElement): void,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setMasterValue(value: any): void,
    setPosition(x: number, y: number): void,
    setValue(value: string | number): void,
    show(node: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$datasuggestConfig,
    name: string
}

declare interface ui$datatableConfig {
    animate?: any,
        areaselect?: boolean,
        autoConfig?: boolean,
        autoheight?: boolean,
        autowidth?: boolean,
        blockselect?: boolean | string,
        borderless?: boolean,
        checkboxRefresh?: boolean,
        clipboard?: boolean | string,
        columnWidth?: number,
        columns?: any[],
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datafetch?: number,
        datathrottle?: number,
        datatype?: string,
        delimiter?: any,
        disabled?: boolean,
        drag?: boolean | string,
        dragColumn?: boolean | string,
        dragscroll?: boolean | string,
        editMath?: boolean,
        editValue?: string,
        editable?: boolean,
        editaction?: string,
        externalData?: webix$WebixCallback,
        filterMode?: any,
        fixedRowHeight?: boolean,
        footer?: boolean,
        form?: string,
        gravity?: number,
        header?: boolean,
        headerRowHeight?: number,
        headermenu?: any,
        height?: number,
        hidden?: boolean,
        hover?: string,
        id?: string | number,
        leftSplit?: number,
        liveValidation?: boolean,
        loadahead?: number,
        map?: any,
        math?: boolean,
        maxHeight?: number,
        maxWidth?: number,
        minColumnHeight?: number,
        minColumnWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        prerender?: boolean,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        resizeColumn?: boolean,
        resizeRow?: boolean,
        rightSplit?: number,
        rowHeight?: number,
        rowLineHeight?: number,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollAlignY?: boolean,
        scrollX?: boolean,
        scrollY?: boolean,
        select?: boolean | string,
        spans?: any[],
        subRowHeight?: string,
        subrow?: string,
        subview?: undefined.baseview,
        tooltip?: boolean,
        type?: any,
        url?: string,
        width?: number,
        yCount?: number
}

declare type ui$datatableEventName = "onAfterAdd" |
    "onAfterAreaAdd" |
    "onAfterAreaRemove" |
    "onAfterBlockSelect" |
    "onAfterColumnDrop" |
    "onAfterColumnDropOrder" |
    "onAfterColumnHide" |
    "onAfterColumnShow" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterEditStart" |
    "onAfterEditStop" |
    "onAfterFilter" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onAfterUnSelect" |
    "onAreaDrag" |
    "onBeforeAdd" |
    "onBeforeAreaAdd" |
    "onBeforeAreaRemove" |
    "onBeforeBlockSelect" |
    "onBeforeColumnDrag" |
    "onBeforeColumnDrop" |
    "onBeforeColumnDropOrder" |
    "onBeforeColumnHide" |
    "onBeforeColumnShow" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeEditStart" |
    "onBeforeEditStop" |
    "onBeforeFilter" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBeforeUnSelect" |
    "onBindRequest" |
    "onBlur" |
    "onCheck" |
    "onCollectValues" |
    "onColumnResize" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onHeaderClick" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLiveEdit" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onResize" |
    "onRowResize" |
    "onScrollX" |
    "onScrollY" |
    "onSelectChange" |
    "onStructureLoad" |
    "onStructureUpdate" |
    "onSubViewClose" |
    "onSubViewCreate" |
    "onSubViewOpen" |
    "onSubViewRender" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$datatable = {
    add(obj: any, index?: number): string | number,
    addCellCss(id: string, name: string, css: string): void,
    addCss(id: string | number, css: string, silent?: boolean): void,
    addRowCss(id: string, css: string): void,
    addSelectArea(
        start: any,
        end: any,
        preserve: boolean,
        area_name?: string,
        css?: string,
        handle?: boolean): void,
    addSpan(
        id: any,
        column: string,
        width: number,
        height: number,
        value?: string,
        css?: string): void,
    adjust(): void,
    adjustColumn(id: string | number, header?: string): void,
    adjustRowHeight(columnId: string, silent: boolean): void,
    attachEvent(
        type: ui$datatableEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearSelection(): void,
    clearValidation(): void,
    closeSub(id: string | number): void,
    collectValues(id: string | number): any[],
    columnId(index: number): string | number,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    eachColumn(handler: webix$WebixCallback, all?: boolean): void,
    eachRow(handler: webix$WebixCallback, all?: boolean): void,
    edit(id: any): void,
    editCancel(): void,
    editCell(row: string, col: string, preserve?: boolean, show?: boolean): void,
    editColumn(id: string): void,
    editNext(): boolean,
    editRow(id: string): void,
    editStop(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    filterByAll(): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    focusEditor(): void,
    getAllSelectAreas(): any,
    getChildViews(): any[],
    getColumnConfig(id: string): any,
    getColumnIndex(id: string | number): number,
    getEditState(): any,
    getEditor(row?: any, column?: string | number): any,
    getEditorValue(): string,
    getFilter(columnID: string | number): any,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getHeaderContent(id: string | number): {
        [key: string]: any
    },
    getHeaderNode(columnId: string, rowIndex?: number): HTMLElement,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectArea(area_name: string): any,
    getSelectedId(asArray: boolean, asString: boolean): any,
    getSelectedItem(as_array?: boolean): any,
    getSpan(): any[],
    getState(): any,
    getSubView(id: string | number): any,
    getText(rowid: string | number, colid: string | number): string,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    hideColumn(id: string | number): void,
    hideOverlay(): void,
    isColumnVisible(id: string | number): boolean,
    isEnabled(): boolean,
    isSelected(id: string | number): void,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(node: HTMLElement | Event): any,
    mapCells(
        startrow: number,
        startcol: string,
        numrows: number,
        numcols: number,
        callback: webix$WebixCallback): void,
    mapEvent(map: any): void,
    mapSelection(callback: webix$WebixCallback): void,
    markSorting(column_id: string, direction: string): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveColumn(id: string, index: number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    openSub(id: string | number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    refreshColumns(config?: any[], reset?: boolean): void,
    refreshFilter(id: string | number): void,
    refreshHeaderContent(): void,
    registerFilter(node: HTMLElement, config: any, obj: any): void,
    remove(id: string | number): void,
    removeCellCss(id: string, name: string, css_name: string): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    removeRowCss(id: string, css_name: string): void,
    removeSelectArea(area_name: string): void,
    removeSpan(id: string | number, column: string): void,
    render(id: string | number, data: any, operation: string): void,
    resize(): void,
    resizeSubView(id: string | number): void,
    scrollTo(x: number, y: number): void,
    select(row_id: string | number, preserve: boolean): void,
    selectAll(): void,
    selectRange(row_id: string | number, end_row_id: string | number, preserve?: boolean): void,
    serialize(): any,
    setColumnWidth(id: string | number, width: number): void,
    setPage(page: number): void,
    setRowHeight(id: string | number, height: number): void,
    setState(state: any): void,
    show(force?: boolean, animation?: boolean): void,
    showCell(row: string, column: string): void,
    showColumn(id: string | number): void,
    showColumnBatch(batch: string | number, preserve: boolean): void,
    showItem(id: string | number): void,
    showItemByIndex(index: number): void,
    showOverlay(message: string): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    unselect(row_id: string | number): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    validateEditor(id?: string | number): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$datatableConfig,
    headerContent: any,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    waitData: webix$promise
}

declare interface ui$dataviewConfig {
    animate?: any,
        autoheight?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datafetch?: number,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        loadahead?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        template?: string | webix$WebixCallback,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number
}

declare type ui$dataviewEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$dataview = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$dataviewEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getTopParentView(): undefined.baseview,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$dataviewConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    },
    waitData: webix$promise
}

declare interface ui$datepickerConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        editable?: boolean,
        format?: string,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        icons?: boolean,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        stringResult?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        text?: string,
        timeIcon?: string,
        timepicker?: boolean,
        tooltip?: string,
        type?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: webix$Date | string,
        width?: number
}

declare type ui$datepickerEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$datepicker = {
    adjust(): void,
    attachEvent(
        type: ui$datepickerEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$datepickerConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$fieldsetConfig {
    animate?: any,
        body?: undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        label?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        width?: number
}

declare type ui$fieldsetEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$fieldset = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$fieldsetConfig,
    name: string
}

declare interface ui$formConfig {
    animate?: any,
        autoheight?: boolean,
        borderless?: boolean,
        cols?: any[],
        complexData?: boolean,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datatype?: string,
        disabled?: boolean,
        elements?: any[],
        elementsConfig?: {
            [key: string]: any
        },
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        responsive?: string,
        rows?: any[],
        rules?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        type?: string,
        url?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$formEventName = "onAfterLoad" |
    "onAfterScroll" |
    "onAfterValidation" |
    "onBeforeLoad" |
    "onBeforeValidate" |
    "onBindRequest" |
    "onChange" |
    "onDestruct" |
    "onLoadError" |
    "onSubmit" |
    "onValidationError" |
    "onValidationSuccess" |
    "onValues";

declare type ui$form = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$formEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clear(): void,
    clearValidation(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(item: string): void,
    getChildViews(): any[],
    getCleanValues(): any,
    getDirtyValues(): any,
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getScrollState(): any,
    getTopParentView(): undefined.baseview,
    getValues(details?: any): {
        [key: string]: any
    },
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isDirty(): boolean,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    mapEvent(map: any): void,
    markInvalid(name: string, state?: boolean | string): void,
    parse(data: any, type: string): void,
    reconstruct(): void,
    refresh(): void,
    removeView(id: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    resizeChildren(): void,
    scrollTo(x: number, y: number): void,
    setDirty(mark?: boolean): void,
    setValues(values: any, update?: boolean): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    validate(mode?: any): boolean,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$formConfig,
    name: string
}

declare interface ui$gridsuggestConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        filter?: webix$WebixCallback,
        fitMaster?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        input?: HTMLElement | string,
        keyPressTimeout?: number,
        left?: number,
        master?: undefined.baseview,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        template?: string | webix$WebixTemplate,
        textValue?: string,
        toFront?: boolean,
        top?: number,
        type?: string,
        width?: number,
        zIndex?: number
}

declare type ui$gridsuggestEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValueSuggest" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$gridsuggest = {
    adjust(): void,
    attachEvent(
        type: ui$gridsuggestEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getItemText(id: string | number): string,
    getList(): undefined.baseview,
    getMasterValue(): any,
    getNode(): any,
    getParentView(): any,
    getSuggestion(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    linkInput(input: HTMLElement): void,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setMasterValue(value: any): void,
    setPosition(x: number, y: number): void,
    setValue(value: string | number): void,
    show(node: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$gridsuggestConfig,
    name: string
}

declare interface ui$grouplistConfig {
    animate?: any,
        autoheight?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        template?: string | webix$WebixCallback,
        templateBack?: string | string | webix$WebixTemplate,
        templateCopy?: webix$WebixCallback,
        templateGroup?: string | webix$WebixCallback,
        templateItem?: string | webix$WebixCallback,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number
}

declare type ui$grouplistEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$grouplist = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$grouplistEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getOpenState(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$grouplistConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$headerlayoutConfig {
    animate?: any,
        borderless?: boolean,
        collapsed?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        multi?: boolean | string,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        panelClass?: string,
        responsive?: string,
        rows?: any[],
        type?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$headerlayoutEventName = "onAfterCollapse" | "onAfterExpand" | "onBindRequest" | "onDestruct";

declare type ui$headerlayout = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$headerlayoutEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$headerlayoutConfig,
    name: string
}

declare interface ui$htmlformConfig {
    animate?: any,
        autoheight?: boolean,
        borderless?: boolean,
        complexData?: boolean,
        container?: string | HTMLElement,
        content?: string | number | HTMLElement,
        css?: string,
        data?: string | any[],
        datatype?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        scroll?: boolean | string,
        scrollSpeed?: string,
        src?: string,
        template?: string | webix$WebixCallback,
        url?: string,
        width?: number
}

declare type ui$htmlformEventName = "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValues" |
    "onViewResize";

declare type ui$htmlform = {
    adjust(): void,
    attachEvent(
        type: ui$htmlformEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    clear(all?: boolean): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(item: string): void,
    getChildViews(): any[],
    getCleanValues(): any,
    getDirtyValues(): any,
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getScrollState(): any,
    getTopParentView(): undefined.baseview,
    getValues(details?: any): {
        [key: string]: any
    },
    hasEvent(name: string): boolean,
    hide(): void,
    isDirty(): boolean,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    mapEvent(map: any): void,
    markInvalid(name: string, state?: boolean | string): void,
    parse(data: any, type: string): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    setContent(node: any): void,
    setDirty(mark?: boolean): void,
    setHTML(html: string): void,
    setValues(values: any, update?: boolean): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$htmlformConfig,
    name: string
}

declare interface ui$iconConfig {
    align?: string,
        animate?: any,
        autowidth?: boolean,
        borderless?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        popup?: string,
        tabFocus?: boolean,
        tooltip?: string,
        value?: string | number,
        width?: number
}

declare type ui$iconEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$icon = {
    adjust(): void,
    attachEvent(
        type: ui$iconEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $renderInput(config: any): HTMLElement,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$iconConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$iframeConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        src?: string,
        width?: number
}

declare type ui$iframeEventName = "onAfterLoad" |
    "onAfterScroll" |
    "onBeforeLoad" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$iframe = {
    adjust(): void,
    attachEvent(
        type: ui$iframeEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getIframe(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getWindow(): HTMLElement,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(value: string): void,
    mapEvent(map: any): void,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$iframeConfig,
    name: string
}

declare interface ui$labelConfig {
    align?: string,
        animate?: any,
        autowidth?: boolean,
        borderless?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputWidth?: number,
        label?: string,
        labelPosition?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        popup?: string,
        tabFocus?: boolean,
        tooltip?: string,
        value?: string | number,
        width?: number
}

declare type ui$labelEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$label = {
    adjust(): void,
    attachEvent(
        type: ui$labelEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setHTML(html: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $renderInput(config: any): HTMLElement,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$labelConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$layoutConfig {
    animate?: any,
        borderless?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        responsive?: string,
        rows?: any[],
        type?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$layoutEventName = "onBindRequest" | "onDestruct";

declare type ui$layout = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$layoutEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$layoutConfig,
    name: string
}

declare interface ui$listConfig {
    animate?: any,
        autoheight?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number
}

declare type ui$listEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$list = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$listEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$listConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$menuConfig {
    animate?: any,
        autoheight?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        openAction?: string,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        subMenuPos?: string,
        submenuConfig?: any,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number
}

declare type ui$menuEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMenuItemClick" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$menu = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$menuEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    disableItem(id: string | number): void,
    enable(): void,
    enableItem(id: string | number): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getMenu(id: string | number): any,
    getMenuItem(id: string | number): any,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getSubMenu(id: string | number): any,
    getTopMenu(): any,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    hideItem(id: string | number): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sizeToContent(): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$menuConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$multicomboConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        button?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        keepText?: boolean,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        newValues?: boolean,
        on?: any,
        optionWidth?: number,
        options?: any,
        placeholder?: string,
        popup?: string,
        popupWidth?: number,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        separator?: string,
        suggest?: any,
        tabFocus?: boolean,
        tagMode?: boolean,
        tagTemplate?: webix$WebixCallback,
        text?: string,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$multicomboEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$multicombo = {
    adjust(): void,
    attachEvent(
        type: ui$multicomboEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getList(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $cssName: string,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$multicomboConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$multiselectConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        optionWidth?: number,
        options?: any,
        placeholder?: string,
        popup?: string,
        popupWidth?: number,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        separator?: string,
        suggest?: any,
        tabFocus?: boolean,
        text?: string,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$multiselectEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$multiselect = {
    adjust(): void,
    attachEvent(
        type: ui$multiselectEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getList(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $cssName: string,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$multiselectConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$multisuggestConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        button?: boolean,
        buttonText?: string,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        filter?: webix$WebixCallback,
        fitMaster?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        input?: HTMLElement | string,
        keyPressTimeout?: number,
        left?: number,
        master?: undefined.baseview,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        separator?: string,
        template?: string | webix$WebixTemplate,
        textValue?: string,
        toFront?: boolean,
        top?: number,
        type?: string,
        value?: string | number,
        width?: number,
        zIndex?: number
}

declare type ui$multisuggestEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValueSuggest" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$multisuggest = {
    adjust(): void,
    attachEvent(
        type: ui$multisuggestEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getButton(): undefined.baseview,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getItemText(id: string | number): string,
    getList(): undefined.baseview,
    getMasterValue(): any,
    getNode(): any,
    getParentView(): any,
    getSuggestion(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    linkInput(input: HTMLElement): void,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setMasterValue(value: any): void,
    setPosition(x: number, y: number): void,
    setValue(value: string | number): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$multisuggestConfig,
    name: string
}

declare interface ui$multitextConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        iconWidth?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        separator?: string,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$multitextEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$multitext = {
    addSection(): string | number,
    adjust(): void,
    attachEvent(
        type: ui$multitextEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    getValueHere(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    removeSection(id?: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    setValueHere(value: string | number): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $cssName: string,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$multitextConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$multiviewConfig {
    animate?: any,
        borderless?: boolean,
        cells?: any,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        fitBiggest?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        keepViews?: boolean,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        responsive?: string,
        rows?: any[],
        visibleBatch?: string,
        width?: number
}

declare type ui$multiviewEventName = "onBeforeBack" | "onBindRequest" | "onDestruct" | "onViewChange";

declare type ui$multiview = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$multiviewEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    back(step: number): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getActiveId(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    setValue(toshow: string | number): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$multiviewConfig,
    name: string
}

declare interface ui$organogramConfig {
    animate?: any,
        autoheight?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        filterMode?: any,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        template?: string | webix$WebixCallback,
        threeState?: boolean,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number
}

declare type ui$organogramEventName = "onAfterAdd" |
    "onAfterClose" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterLoad" |
    "onAfterOpen" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeClose" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeLoad" |
    "onBeforeOpen" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onFocus" |
    "onItemCheck" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$organogram = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$organogramEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    close(id: string | number): void,
    closeAll(): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getBranchIndex(id: string | number, parent?: string | number): number,
    getChildViews(): any[],
    getFirstChildId(id: string | number): string,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNextSiblingId(id: string | number): string | number,
    getNode(): any,
    getOpenItems(): any[],
    getParentId(id: string | number): string | number,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getPrevSiblingId(id: string | number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getState(): any,
    getTopParentView(): undefined.baseview,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isBranch(id: string | number): boolean,
    isBranchOpen(id: string | number): boolean,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    open(id: string | number, show?: boolean): void,
    openAll(): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setState(state: any): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$organogramConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$pagerConfig {
    animate?: any,
        apiOnly?: boolean,
        borderless?: boolean,
        container?: string | HTMLElement,
        count?: number,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        group?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        limit?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        page?: number,
        size?: number,
        template?: string | webix$WebixCallback,
        width?: number
}

declare type ui$pagerEventName = "onAfterContextMenu" |
    "onAfterRender" |
    "onAfterScroll" |
    "onBeforeContextMenu" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$pager = {
    adjust(): void,
    attachEvent(
        type: ui$pagerEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clone(config: any): any,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(id?: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    select(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$pagerConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    }
}

declare interface ui$popupConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        left?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        toFront?: boolean,
        top?: number,
        width?: number,
        zIndex?: number
}

declare type ui$popupEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$popup = {
    adjust(): void,
    attachEvent(
        type: ui$popupEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setPosition(x: number, y: number): void,
    show(node?: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$popupConfig,
    name: string
}

declare interface ui$portletConfig {
    animate?: any,
        body?: string | undefined.baseview,
        borderless?: boolean,
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        layoutType?: string,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        responsive?: string,
        rows?: any[],
        type?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$portletEventName = "onBindRequest" | "onDestruct";

declare type ui$portlet = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$portletEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    markDropArea(target: string, mode: string): void,
    movePortlet(target: string, mode: string): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $drag(source: HTMLElement, ev: Event): string,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$portletConfig,
    name: string
}

declare interface ui$propertyConfig {
    animate?: any,
        autoheight?: boolean,
        borderless?: boolean,
        complexData?: boolean,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datatype?: string,
        disabled?: boolean,
        editValue?: string,
        editable?: boolean,
        editaction?: string,
        elements?: any,
        form?: string,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        map?: any,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        nameWidth?: number,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        scroll?: boolean | string,
        scrollSpeed?: string,
        template?: string | webix$WebixCallback,
        tooltip?: any,
        url?: string,
        width?: number
}

declare type ui$propertyEventName = "onAfterContextMenu" |
    "onAfterEditStart" |
    "onAfterEditStop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onBeforeContextMenu" |
    "onBeforeEditStart" |
    "onBeforeEditStop" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLiveEdit" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$property = {
    adjust(): void,
    attachEvent(
        type: ui$propertyEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    edit(id: any): void,
    editCancel(): void,
    editNext(): boolean,
    editStop(): void,
    enable(): void,
    focusEditor(): void,
    getChildViews(): any[],
    getEditState(): any,
    getEditor(id?: string): any,
    getEditorValue(): string,
    getFormView(): undefined.baseview,
    getItem(id: string): any,
    getItemNode(id: string | number): void,
    getNode(): any,
    getParentView(): any,
    getScrollState(): any,
    getTopParentView(): undefined.baseview,
    getValues(): {
        [key: string]: any
    },
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    registerType(name: string, data: any): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    setValues(values: any, update?: boolean): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    updateItem(): void,
    validateEditor(id?: string | number): boolean,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$propertyConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_edit: {
        [key: string]: any
    },
    on_mouse_move: webix$WebixCallback,
    on_render: {
        [key: string]: any
    },
    type: {
        [key: string]: any
    }
}

declare interface ui$radioConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        customRadio?: boolean,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        optionHeight?: number,
        options?: any[],
        popup?: string,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        vertical?: boolean,
        width?: number
}

declare type ui$radioEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$radio = {
    adjust(): void,
    attachEvent(
        type: ui$radioEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$radioConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$rangechartConfig {
    alpha?: number,
        animate?: any,
        barWidth?: number,
        border?: boolean,
        borderColor?: string,
        borderless?: boolean,
        cant?: number,
        color?: string | webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datathrottle?: number,
        datatype?: string,
        disableLines?: boolean,
        disabled?: boolean,
        eventRadius?: number,
        fill?: string,
        fixOverflow?: boolean,
        frameId?: string,
        gradient?: boolean | string | webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        item?: any,
        label?: string | webix$WebixCallback,
        labelOffset?: number,
        legend?: any,
        line?: any,
        lineColor?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        offset?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        origin?: number,
        padding?: any,
        pieHeight?: number,
        pieInnerText?: string | webix$WebixCallback,
        preset?: string,
        radius?: number,
        range?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        save?: string,
        scale?: string,
        scheme?: any,
        series?: any,
        shadow?: boolean,
        tooltip?: any,
        type?: string,
        url?: string,
        value?: string | webix$WebixTemplate,
        width?: number,
        x?: number,
        xAxis?: any,
        xValue?: string,
        y?: number,
        yAxis?: any,
        yValue?: string
}

declare type ui$rangechartEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterLoad" |
    "onAfterRangeChange" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$rangechart = {
    add(obj: any, index?: number): string | number,
    addSeries(obj: any): void,
    adjust(): void,
    attachEvent(
        type: ui$rangechartEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCanvas(): void,
    count(): number,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getFrameData(): any[],
    getFrameRange(): any,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getTopParentView(): undefined.baseview,
    group(config: any, mode: boolean): void,
    hasEvent(name: string): boolean,
    hide(): void,
    hideSeries(series: string): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeAllSeries(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    serialize(): any,
    setFrameRange(range: any): void,
    show(force?: boolean, animation?: boolean): void,
    showSeries(series: string): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    updateItem(id: string | number, data: any): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    colormap: {
        [key: string]: any
    },
    config: ui$rangechartConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    presets: {
        [key: string]: any
    }
}

declare interface ui$rangesliderConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        max?: number,
        maxHeight?: number,
        maxWidth?: number,
        min?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        popup?: string,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        separator?: string,
        step?: number,
        stringResult?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        title?: string | webix$WebixCallback,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$rangesliderEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSliderDrag" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$rangeslider = {
    adjust(): void,
    attachEvent(
        type: ui$rangesliderEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $cssName: string,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $touchCapture: boolean,
    $view: HTMLElement,
    $width: number,
    config: ui$rangesliderConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$resizerConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        width?: number
}

declare type ui$resizerEventName = "onAfterContextMenu" |
    "onAfterScroll" |
    "onBeforeContextMenu" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$resizer = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$resizerConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback
}

declare interface ui$richselectConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        options?: any,
        placeholder?: string,
        popup?: string,
        popupWidth?: number,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        text?: string,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$richselectEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$richselect = {
    adjust(): void,
    attachEvent(
        type: ui$richselectEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,

    /**
     * returns list view of the control
     */
    getList(): undefined.list,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getText(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$richselectConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$scrollviewConfig {
    animate?: any,
        body?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        width?: number
}

declare type ui$scrollviewEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$scrollview = {
    adjust(): void,
    attachEvent(
        type: ui$scrollviewEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getScrollState(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    scrollTo(x: number, y: number): void,
    show(force?: boolean, animation?: boolean): void,
    showView(id: string | number): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$scrollviewConfig,
    name: string
}

declare interface ui$searchConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        type?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$searchEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSearchIconClick" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$search = {
    adjust(): void,
    attachEvent(
        type: ui$searchEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$searchConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$segmentedConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        multiview?: boolean,
        name?: string,
        on?: any,
        optionWidth?: number,
        options?: any,
        popup?: string,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$segmentedEventName = "onAfterRender" |
    "onAfterScroll" |
    "onAfterTabClick" |
    "onBeforeRender" |
    "onBeforeTabClick" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onOptionRemove" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$segmented = {
    addOption(id: string | number, value: any, show?: boolean, index?: number): void,
    adjust(): void,
    attachEvent(
        type: ui$segmentedEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    optionIndex(ID: string | number): number,
    refresh(): void,
    removeOption(id: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$segmentedConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$selectConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        options?: any[] | string,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$selectEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$select = {
    adjust(): void,
    attachEvent(
        type: ui$selectEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$selectConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$sidemenuConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        left?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        state?: webix$WebixCallback,
        toFront?: boolean,
        top?: number,
        width?: number,
        zIndex?: number
}

declare type ui$sidemenuEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$sidemenu = {
    adjust(): void,
    attachEvent(
        type: ui$sidemenuEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setPosition(x: number, y: number): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$sidemenuConfig,
    name: string
}

declare interface ui$sliderConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        max?: number,
        maxHeight?: number,
        maxWidth?: number,
        min?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        step?: number,
        suggest?: any,
        tabFocus?: boolean,
        title?: string | webix$WebixCallback,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$sliderEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSliderDrag" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$slider = {
    adjust(): void,
    attachEvent(
        type: ui$sliderEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $touchCapture: boolean,
    $view: HTMLElement,
    $width: number,
    config: ui$sliderConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$spacerConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        width?: number
}

declare type ui$spacerEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$spacer = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$spacerConfig,
    name: string
}

declare interface ui$spreadsheetConfig {
    animate?: any,
        borderless?: boolean,
        buttons?: any,
        cols?: any[],
        columnCount?: number,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datatype?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        liveEditor?: boolean,
        margin?: number,
        math?: boolean,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        readonly?: boolean,
        resizeCell?: boolean,
        responsive?: string,
        rowCount?: number,
        rows?: any[],
        subbar?: any,
        type?: string,
        url?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$spreadsheetEventName = "onAfterLoad" |
    "onAfterSelect" |
    "onBeforeLoad" |
    "onBeforeSpan" |
    "onBeforeSplit" |
    "onBindRequest" |
    "onCellChange" |
    "onComponentInit" |
    "onDataParse" |
    "onDataSerialize" |
    "onDestruct" |
    "onLoadError" |
    "onReset";

declare type ui$spreadsheet = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$spreadsheetEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    combineCells(range: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    eachSelectedCell(handler: webix$WebixCallback): void,
    enable(): void,
    getCellValue(row: number, column: number): string,
    getChildViews(): any[],
    getColumn(id: string): any,
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getRow(id: string): any,
    getSelectedId(): any[],
    getStyle(row: number, column: number): string,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    innerId(id: string | number): string | number,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    mapEvent(map: any): void,
    parse(data: any, type: string): void,
    reconstruct(): void,
    redo(): void,
    refresh(): void,
    removeView(id: string | number): void,
    reset(): void,
    resize(): void,
    resizeChildren(): void,
    saveCell(row: number, column: number): void,
    serialize(): any,
    setCellValue(row: number, column: any, value: string): void,
    setStyle(row: number, column: number, style: string): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    splitCell(row: number, column: number): void,
    ui(view: any): undefined.baseview,
    unbind(): void,
    unblockEvent(): void,
    undo(id: string): void,
    $$: any,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$spreadsheetConfig,
    name: string
}

declare interface ui$submenuConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        autoheight?: boolean,
        autowidth?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        left?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        mouseEventDelay?: number,
        move?: boolean,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        openAction?: string,
        padding?: any,
        pager?: any,
        position?: string | webix$WebixCallback,
        ready?: webix$WebixCallback,
        relative?: string,
        removeMissed?: boolean,
        resize?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        subMenuPos?: string,
        submenuConfig?: any,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        toFront?: boolean,
        tooltip?: any,
        top?: number,
        type?: any,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number,
        zIndex?: number
}

declare type ui$submenuEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeShow" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onHide" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMenuItemClick" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$submenu = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$submenuEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    close(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    disableItem(id: string | number): void,
    enable(): void,
    enableItem(id: string | number): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getBody(): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getHead(): any,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getMenu(id: string | number): any,
    getMenuItem(id: string | number): any,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getSubMenu(id: string | number): any,
    getTopMenu(): any,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    hideItem(id: string | number): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    resizeChildren(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    setPosition(x: number, y: number): void,
    show(node?: HTMLElement, position?: any, point?: string): void,
    showItem(id: string | number): void,
    sizeToContent(): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    show(force: boolean, animation: boolean): void,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$submenuConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$suggestConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        filter?: webix$WebixCallback,
        fitMaster?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        input?: HTMLElement | string,
        keyPressTimeout?: number,
        left?: number,
        master?: undefined.baseview,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        template?: string | webix$WebixTemplate,
        textValue?: string,
        toFront?: boolean,
        top?: number,
        type?: string,
        width?: number,
        zIndex?: number
}

declare type ui$suggestEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValueSuggest" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$suggest = {
    adjust(): void,
    attachEvent(
        type: ui$suggestEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getItemText(id: string | number): string,
    getList(): undefined.baseview,
    getMasterValue(): any,
    getNode(): any,
    getParentView(): any,
    getSuggestion(): string,
    getTopParentView(): undefined.baseview,
    getValue(): string | number,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    linkInput(input: HTMLElement): void,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setMasterValue(value: any): void,
    setPosition(x: number, y: number): void,
    setValue(value: string | number): void,
    show(node: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$suggestConfig,
    name: string
}

declare interface ui$tabbarConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomOffset?: number,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        moreTemplate?: webix$WebixCallback,
        multiview?: boolean,
        name?: string,
        on?: any,
        optionWidth?: number,
        options?: any,
        placeholder?: string,
        popup?: string,
        popupTemplate?: webix$WebixCallback,
        popupWidth?: number,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tabMargin?: number,
        tabMinWidth?: number,
        tabMoreWidth?: number,
        tabOffset?: number,
        tabbarPopup?: undefined.baseview,
        tooltip?: string,
        topOffset?: number,
        type?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number,
        yCount?: number
}

declare type ui$tabbarEventName = "onAfterRender" |
    "onAfterScroll" |
    "onAfterTabClick" |
    "onBeforeRender" |
    "onBeforeTabClick" |
    "onBeforeTabClose" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onOptionRemove" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$tabbar = {
    addOption(id: string | number, value: any, show?: boolean, index?: number): void,
    adjust(): void,
    attachEvent(
        type: ui$tabbarEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getPopup(): undefined.baseview,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    optionIndex(ID: string | number): number,
    refresh(): void,
    removeOption(id: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$tabbarConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$tabviewConfig {
    animate?: any,
        borderless?: boolean,
        cells?: any[],
        cols?: any[],
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        multiview?: any,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        responsive?: string,
        rows?: any[],
        tabbar?: any,
        type?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$tabviewEventName = "onBindRequest" | "onDestruct";

declare type ui$tabview = {
    addView(view: any): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$tabviewEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getMultiview(): any,
    getNode(): any,
    getParentView(): any,
    getTabbar(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    reconstruct(): void,
    removeView(id: string | number): void,
    resize(): void,
    resizeChildren(): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$tabviewConfig,
    name: string
}

declare interface ui$templateConfig {
    animate?: any,
        autoheight?: boolean,
        borderless?: boolean,
        container?: string | HTMLElement,
        content?: string | number | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datatype?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        scroll?: boolean | string,
        scrollSpeed?: string,
        src?: string,
        template?: string | webix$WebixCallback,
        type?: string,
        url?: string,
        width?: number
}

declare type ui$templateEventName = "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare function ui$template(template: string): webix$WebixCallback

declare interface ui$textConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        type?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$textEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$text = {
    adjust(): void,
    attachEvent(
        type: ui$textEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(config: any): HTMLElement,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$textConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$textareaConfig {
    align?: string,
        animate?: any,
        attributes?: any,
        autowidth?: boolean,
        borderless?: boolean,
        bottomLabel?: string,
        bottomPadding?: number,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputPadding?: number,
        inputWidth?: number,
        invalidMessage?: string,
        label?: string,
        labelPosition?: string,
        labelWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        on?: any,
        placeholder?: string,
        popup?: string,
        readonly?: boolean,
        relatedAction?: string,
        relatedView?: string,
        required?: boolean,
        suggest?: any,
        tabFocus?: boolean,
        tooltip?: string,
        validate?: webix$WebixCallback,
        validateEvent?: string,
        value?: string | number,
        width?: number
}

declare type ui$textareaEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$textarea = {
    adjust(): void,
    attachEvent(
        type: ui$textareaEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setBottomText(text: string): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    validate(): boolean,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $render: webix$WebixCallback,
    $renderIcon: webix$WebixCallback,
    $renderInput(obj: any, html: string, id: string | number): string,
    $renderLabel(config: any, id: string | number): string,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$textareaConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$toggleConfig {
    align?: string,
        animate?: any,
        autowidth?: boolean,
        borderless?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        icon?: string,
        id?: string | number,
        inputHeight?: number,
        inputWidth?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        name?: string,
        offIcon?: string,
        offLabel?: string,
        on?: any,
        onIcon?: string,
        onLabel?: string,
        popup?: string,
        tabFocus?: boolean,
        tooltip?: string,
        type?: string,
        value?: string | number,
        width?: number
}

declare type ui$toggleEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onChange" |
    "onDestruct" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$toggle = {
    adjust(): void,
    attachEvent(
        type: ui$toggleEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    toggle(): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $renderInput(config: any): HTMLElement,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$toggleConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$toolbarConfig {
    animate?: any,
        borderless?: boolean,
        cols?: any[],
        complexData?: boolean,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datatype?: string,
        disabled?: boolean,
        elements?: any[],
        elementsConfig?: {
            [key: string]: any
        },
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        isolate?: boolean,
        margin?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        padding?: number,
        paddingX?: number,
        paddingY?: number,
        responsive?: string,
        rows?: any[],
        rules?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        type?: string,
        url?: string,
        visibleBatch?: string,
        width?: number
}

declare type ui$toolbarEventName = "onAfterLoad" |
    "onAfterScroll" |
    "onAfterValidation" |
    "onBeforeLoad" |
    "onBeforeValidate" |
    "onBindRequest" |
    "onChange" |
    "onDestruct" |
    "onLoadError" |
    "onValidationError" |
    "onValidationSuccess" |
    "onValues";

declare type ui$toolbar = {
    addView(view: any, index?: number): undefined.baseview,
    adjust(): void,
    attachEvent(
        type: ui$toolbarEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clear(): void,
    clearValidation(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    focus(item: string): void,
    getChildViews(): any[],
    getCleanValues(): any,
    getDirtyValues(): any,
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getScrollState(): any,
    getTopParentView(): undefined.baseview,
    getValues(details?: any): {
        [key: string]: any
    },
    hasEvent(name: string): boolean,
    hide(): void,
    index(obj: any): number,
    isDirty(): boolean,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    mapEvent(map: any): void,
    markInvalid(name: string, state?: boolean | string): void,
    parse(data: any, type: string): void,
    reconstruct(): void,
    refresh(): void,
    removeView(id: string | number): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    resizeChildren(): void,
    scrollTo(x: number, y: number): void,
    setDirty(mark?: boolean): void,
    setValues(values: any, update?: boolean): void,
    show(force?: boolean, animation?: boolean): void,
    showBatch(name: string): void,
    unbind(): void,
    unblockEvent(): void,
    validate(mode?: any): boolean,
    $getSize: any[],
    $height: number,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$toolbarConfig,
    name: string
}

declare interface ui$tooltipConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        dx?: number,
        dy?: number,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        on?: any,
        template?: string | webix$WebixCallback,
        width?: number
}

declare type ui$tooltipEventName = "onAfterRender" |
    "onAfterScroll" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$tooltip = {
    adjust(): void,
    attachEvent(
        type: ui$tooltipEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$tooltipConfig,
    name: string,
    type: {
        [key: string]: any
    }
}

declare interface ui$treeConfig {
    animate?: any,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean,
        dragscroll?: boolean | string,
        filterMode?: any,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean | string,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        threeState?: boolean,
        tooltip?: any,
        type?: any,
        url?: string,
        width?: number
}

declare type ui$treeEventName = "onAfterAdd" |
    "onAfterClose" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterOpen" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeClose" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeOpen" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemCheck" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPartialRender" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$tree = {
    add(obj: any, index?: number, parentId?: string): string,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$treeEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    checkAll(id?: string | number): void,
    checkItem(id: string): void,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    close(id: string | number): void,
    closeAll(): void,
    copy(
        sid: string | number,
        tindex: number,
        tobj?: undefined.baseview,
        details?: any): string | number,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getBranchIndex(id: string | number, parent?: string | number): number,
    getChecked(): any[],
    getChildViews(): any[],
    getFirstChildId(id: string | number): string,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNextSiblingId(id: string | number): string | number,
    getNode(): any,
    getOpenItems(): any[],
    getParentId(id: string | number): string | number,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getPrevSiblingId(id: string | number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getState(): any,
    getTopParentView(): undefined.baseview,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isBranch(id: string | number): boolean,
    isBranchOpen(id: string | number): boolean,
    isChecked(id: string | number): boolean,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveSelection(direction: string): void,
    open(id: string | number, show?: boolean): void,
    openAll(): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setState(state: any): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    uncheckAll(id?: string | number): void,
    uncheckItem(id: string): void,
    ungroup(mode: boolean): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$treeConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$treemapConfig {
    activeItem?: boolean,
        animate?: any,
        borderless?: boolean,
        branch?: string,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        filterMode?: any,
        gravity?: number,
        header?: boolean,
        headerHeight?: number,
        headerTemplate?: string,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        subRender?: boolean,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        threeState?: boolean,
        tooltip?: any,
        type?: any,
        url?: string,
        value?: string | webix$WebixCallback,
        width?: number
}

declare type ui$treemapEventName = "onAfterAdd" |
    "onAfterClose" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterLoad" |
    "onAfterOpen" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeClose" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeLoad" |
    "onBeforeOpen" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onFocus" |
    "onItemCheck" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPartialRender" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$treemap = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$treemapEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    close(id: string | number): void,
    closeAll(): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getBranchIndex(id: string | number, parent?: string | number): number,
    getChildViews(): any[],
    getFirstChildId(id: string | number): string,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNextSiblingId(id: string | number): string | number,
    getNode(): any,
    getOpenItems(): any[],
    getPage(): number,
    getPager(): any,
    getParentId(id: string | number): string | number,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getPrevSiblingId(id: string | number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getState(): any,
    getTopParentView(): undefined.baseview,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isBranch(id: string | number): boolean,
    isBranchOpen(id: string | number): boolean,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    moveSelection(direction: string): void,
    open(id: string | number, show?: boolean): void,
    openAll(): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    setState(state: any): void,
    show(force?: boolean, animation?: boolean): void,
    showBranch(branchId: string | number): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    ungroup(mode: boolean): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$treemapConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$treetableConfig {
    animate?: any,
        areaselect?: boolean,
        autoConfig?: boolean,
        autoheight?: boolean,
        autowidth?: boolean,
        blockselect?: boolean | string,
        borderless?: boolean,
        checkboxRefresh?: boolean,
        clipboard?: boolean | string,
        columnWidth?: number,
        columns?: any[],
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        datafetch?: number,
        datathrottle?: number,
        datatype?: string,
        delimiter?: any,
        disabled?: boolean,
        drag?: boolean | string,
        dragColumn?: boolean | string,
        dragscroll?: boolean | string,
        editMath?: boolean,
        editValue?: string,
        editable?: boolean,
        editaction?: string,
        externalData?: webix$WebixCallback,
        filterMode?: any,
        fixedRowHeight?: boolean,
        footer?: boolean,
        form?: string,
        gravity?: number,
        header?: boolean,
        headerRowHeight?: number,
        headermenu?: any,
        height?: number,
        hidden?: boolean,
        hover?: string,
        id?: string | number,
        leftSplit?: number,
        liveValidation?: boolean,
        loadahead?: number,
        map?: any,
        math?: boolean,
        maxHeight?: number,
        maxWidth?: number,
        minColumnHeight?: number,
        minColumnWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        prerender?: boolean,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        resizeColumn?: boolean,
        resizeRow?: boolean,
        rightSplit?: number,
        rowHeight?: number,
        rowLineHeight?: number,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollAlignY?: boolean,
        scrollX?: boolean,
        scrollY?: boolean,
        select?: boolean | string,
        spans?: any[],
        subRowHeight?: string,
        subrow?: string,
        subview?: undefined.baseview,
        threeState?: boolean,
        tooltip?: boolean,
        type?: any,
        url?: string,
        width?: number,
        yCount?: number
}

declare type ui$treetableEventName = "onAfterAdd" |
    "onAfterAreaAdd" |
    "onAfterAreaRemove" |
    "onAfterBlockSelect" |
    "onAfterClose" |
    "onAfterColumnDrop" |
    "onAfterColumnDropOrder" |
    "onAfterColumnHide" |
    "onAfterColumnShow" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterEditStart" |
    "onAfterEditStop" |
    "onAfterFilter" |
    "onAfterLoad" |
    "onAfterOpen" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onAfterUnSelect" |
    "onAreaDrag" |
    "onBeforeAdd" |
    "onBeforeAreaAdd" |
    "onBeforeAreaRemove" |
    "onBeforeBlockSelect" |
    "onBeforeClose" |
    "onBeforeColumnDrag" |
    "onBeforeColumnDrop" |
    "onBeforeColumnDropOrder" |
    "onBeforeColumnHide" |
    "onBeforeColumnShow" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeEditStart" |
    "onBeforeEditStop" |
    "onBeforeFilter" |
    "onBeforeLoad" |
    "onBeforeOpen" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBeforeUnSelect" |
    "onBindRequest" |
    "onBlur" |
    "onCheck" |
    "onCollectValues" |
    "onColumnResize" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onHeaderClick" |
    "onItemCheck" |
    "onItemClick" |
    "onItemDblClick" |
    "onKeyPress" |
    "onLiveEdit" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onResize" |
    "onRowResize" |
    "onScrollX" |
    "onScrollY" |
    "onSelectChange" |
    "onStructureLoad" |
    "onStructureUpdate" |
    "onSubViewClose" |
    "onSubViewCreate" |
    "onSubViewOpen" |
    "onSubViewRender" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$treetable = {
    add(obj: any, index?: number, parentId?: string): string,
    addCellCss(id: string, name: string, css: string): void,
    addCss(id: string | number, css: string, silent?: boolean): void,
    addRowCss(id: string, css: string): void,
    adjust(): void,
    adjustColumn(id: string | number, header?: string): void,
    adjustRowHeight(columnId: string, silent: boolean): void,
    attachEvent(
        type: ui$treetableEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    checkAll(id?: string | number): void,
    checkItem(id: string): void,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    close(id: string | number): void,
    closeAll(): void,
    collectValues(id: string | number): any[],
    columnId(index: number): string | number,
    copy(
        sid: string | number,
        tindex: number,
        tobj?: undefined.baseview,
        details?: any): string | number,
    count(): number,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    eachColumn(handler: webix$WebixCallback, all?: boolean): void,
    eachRow(handler: webix$WebixCallback, all?: boolean): void,
    edit(id: any): void,
    editCancel(): void,
    editCell(row: string, col: string, preserve?: boolean, show?: boolean): void,
    editColumn(id: string): void,
    editNext(): boolean,
    editRow(id: string): void,
    editStop(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    filterByAll(): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    focusEditor(): void,
    getBranchIndex(id: string | number, parent?: string | number): number,
    getChecked(): any[],
    getChildViews(): any[],
    getColumnConfig(id: string): any,
    getColumnIndex(id: string | number): number,
    getEditState(): any,
    getEditor(row?: any, column?: string | number): any,
    getEditorValue(): string,
    getFilter(columnID: string | number): any,
    getFirstChildId(id: string | number): string,
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getHeaderContent(id: string | number): {
        [key: string]: any
    },
    getHeaderNode(columnId: string, rowIndex?: number): HTMLElement,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNextSiblingId(id: string | number): string | number,
    getNode(): any,
    getOpenItems(): any[],
    getPage(): number,
    getPager(): any,
    getParentId(id: string | number): string | number,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getPrevSiblingId(id: string | number): string | number,
    getScrollState(): any,
    getSelectedId(asArray: boolean, asString: boolean): any,
    getSelectedItem(as_array?: boolean): any,
    getState(): any,
    getText(rowid: string | number, colid: string | number): string,
    getTopParentView(): undefined.baseview,
    getVisibleCount(): number,
    group(config: any, mode: boolean): void,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    hideColumn(id: string | number): void,
    hideOverlay(): void,
    isBranch(id: string | number): boolean,
    isBranchOpen(id: string | number): boolean,
    isChecked(id: string | number): boolean,
    isColumnVisible(id: string | number): boolean,
    isEnabled(): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadBranch(id: string | number, callback: webix$WebixCallback, url: string): void,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(node: HTMLElement | Event): any,
    mapCells(
        startrow: number,
        startcol: string,
        numrows: number,
        numcols: number,
        callback: webix$WebixCallback): void,
    mapEvent(map: any): void,
    markSorting(column_id: string, direction: string): void,
    move(
        sid: string | number,
        tindex: number,
        tobj?: undefined.baseview,
        details?: any): string | number,
    moveBottom(id: string | number): void,
    moveColumn(id: string, index: number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    open(id: string | number, show?: boolean): void,
    openAll(): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    refreshColumns(config?: any[], reset?: boolean): void,
    refreshFilter(id: string | number): void,
    refreshHeaderContent(): void,
    registerFilter(node: HTMLElement, config: any, obj: any): void,
    remove(id: string | number): void,
    removeCellCss(id: string, name: string, css_name: string): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    removeRowCss(id: string, css_name: string): void,
    render(id: string | number, data: any, operation: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    serialize(): any,
    setColumnWidth(id: string | number, width: number): void,
    setPage(page: number): void,
    setRowHeight(id: string | number, height: number): void,
    setState(state: any): void,
    show(force?: boolean, animation?: boolean): void,
    showCell(row: string, column: string): void,
    showColumn(id: string | number): void,
    showColumnBatch(batch: string | number, preserve: boolean): void,
    showItem(id: string | number): void,
    showItemByIndex(index: number): void,
    showOverlay(message: string): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    uncheckAll(id?: string | number): void,
    uncheckItem(id: string): void,
    ungroup(mode: boolean): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    validateEditor(id?: string | number): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$treetableConfig,
    headerContent: any,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    waitData: webix$promise
}

declare interface ui$unitlistConfig {
    animate?: any,
        autoheight?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: string | webix$WebixCallback,
        clipboard?: boolean | string,
        container?: string | HTMLElement,
        css?: string,
        data?: string | any[],
        dataFeed?: string | webix$WebixCallback,
        datathrottle?: number,
        datatype?: string,
        disabled?: boolean,
        drag?: boolean | string,
        dragscroll?: boolean | string,
        externalData?: webix$WebixCallback,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        layout?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        mouseEventDelay?: number,
        multiselect?: boolean,
        navigation?: boolean,
        on?: any,
        onClick?: {
            [key: string]: any
        },
        onContext?: {
            [key: string]: any
        },
        onDblClick?: webix$WebixCallback,
        onMouseMove?: webix$WebixCallback,
        pager?: any,
        ready?: webix$WebixCallback,
        removeMissed?: boolean,
        rules?: any,
        save?: string,
        scheme?: any,
        scroll?: boolean | string,
        scrollSpeed?: string,
        select?: boolean | string,
        sort?: webix$WebixCallback,
        template?: string | webix$WebixCallback,
        templateCopy?: webix$WebixCallback,
        tooltip?: any,
        type?: any,
        uniteBy?: webix$WebixCallback,
        url?: string,
        width?: number,
        xCount?: number,
        yCount?: number
}

declare type ui$unitlistEventName = "onAfterAdd" |
    "onAfterContextMenu" |
    "onAfterDelete" |
    "onAfterDrop" |
    "onAfterLoad" |
    "onAfterRender" |
    "onAfterScroll" |
    "onAfterSelect" |
    "onAfterSort" |
    "onBeforeAdd" |
    "onBeforeContextMenu" |
    "onBeforeDelete" |
    "onBeforeDrag" |
    "onBeforeDragIn" |
    "onBeforeDrop" |
    "onBeforeDropOut" |
    "onBeforeLoad" |
    "onBeforeRender" |
    "onBeforeSelect" |
    "onBeforeSort" |
    "onBindRequest" |
    "onBlur" |
    "onDataRequest" |
    "onDataUpdate" |
    "onDestruct" |
    "onDragOut" |
    "onFocus" |
    "onItemClick" |
    "onItemDblClick" |
    "onItemRender" |
    "onKeyPress" |
    "onLoadError" |
    "onLongTouch" |
    "onMouseMove" |
    "onMouseMoving" |
    "onMouseOut" |
    "onPaste" |
    "onSelectChange" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onValidationError" |
    "onValidationSuccess" |
    "onViewResize";

declare type ui$unitlist = {
    add(obj: any, index?: number): string | number,
    addCss(id: string | number, css: string, silent?: boolean): void,
    adjust(): void,
    attachEvent(
        type: ui$unitlistEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    clearAll(): void,
    clearCss(css: string, silent?: boolean): void,
    clearValidation(): void,
    copy(sid: string | number, tindex: number, tobj?: any, details?: any): void,
    count(): number,
    customize(obj: any): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    exists(id: string | number): boolean,
    filter(
        text: string | webix$WebixTemplate | webix$WebixCallback,
        value: string,
        preserve: boolean): void,
    find(criterion: webix$WebixCallback, first?: boolean): any,
    getChildViews(): any[],
    getFirstId(): string | number,
    getFormView(): undefined.baseview,
    getIdByIndex(index: number): string | number,
    getIndexById(id: string | number): number,
    getItem(id: string | number): any,
    getItemNode(id: string | number): void,
    getLastId(): string | number,
    getNextId(id: string | number, step: number): string | number,
    getNode(): any,
    getPage(): number,
    getPager(): any,
    getParentView(): any,
    getPrevId(id: string | number, step: number): string | number,
    getScrollState(): any,
    getSelectedId(as_array: boolean): string | any[],
    getSelectedItem(as_array: boolean): any,
    getTopParentView(): undefined.baseview,
    getUnitList(name: string): any[],
    getUnits(): any[],
    getVisibleCount(): number,
    hasCss(id: string | number, css: string): boolean,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isSelected(id: string | number): boolean,
    isVisible(): boolean,
    load(url: string, type?: string, callback?: webix$WebixCallback): webix$promise,
    loadNext(
        count: number,
        start: number,
        callback: webix$WebixCallback,
        url: string,
        now: boolean): void,
    locate(e: Event): string | number,
    mapEvent(map: any): void,
    move(sid: string, tindex: number, tobj?: any, details?: any): string,
    moveBottom(id: string | number): void,
    moveDown(id: string | number, step: number): void,
    moveSelection(direction: string): void,
    moveTop(id: string | number): void,
    moveUp(id: string | number, step: number): void,
    parse(data: any, type: string): void,
    refresh(id?: string | number): void,
    remove(id: string | number): void,
    removeCss(id: string | number, css: string, silent?: boolean): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    scrollTo(x: number, y: number): void,
    select(id: string | any[], preserve: boolean): void,
    selectAll(from?: string, to?: string): void,
    serialize(): any,
    setPage(page: number): void,
    show(force?: boolean, animation?: boolean): void,
    showItem(id: string | number): void,
    sort(by: string, dir?: string, as?: string): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    unselect(id?: string): void,
    unselectAll(): void,
    updateItem(id: string | number, data: any): void,
    validate(id?: string): boolean,
    $drag(source: HTMLElement, ev: Event): string,
    $dragHTML: webix$WebixCallback,
    $dragIn(source: HTMLElement, target: HTMLElement, ev: Event): HTMLElement,
    $dragMark(context: any, ev: Event): boolean,
    $dragOut(
        source: HTMLElement,
        old_target: HTMLElement,
        new_target: HTMLElement,
        ev: Event): void,
    $drop(source: HTMLElement, target: HTMLElement, ev: Event): void,
    $dropAllow: webix$WebixCallback,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$unitlistConfig,
    name: string,
    on_click: webix$WebixCallback,
    on_context: {
        [key: string]: any
    },
    on_dblclick: webix$WebixCallback,
    on_mouse_move: webix$WebixCallback,
    type: {
        [key: string]: any
    },
    types: {
        [key: string]: any
    }
}

declare interface ui$uploaderConfig {
    align?: string,
        animate?: any,
        apiOnly?: boolean,
        autosend?: boolean,
        autowidth?: boolean,
        borderless?: boolean,
        click?: webix$WebixCallback,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        formData?: {
            [key: string]: any
        },
        gravity?: number,
        height?: number,
        hidden?: boolean,
        hotkey?: string,
        id?: string | number,
        inputHeight?: number,
        inputName?: string,
        inputWidth?: number,
        label?: string,
        link?: string,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        multiple?: boolean,
        name?: string,
        on?: any,
        popup?: string,
        tabFocus?: boolean,
        tooltip?: string,
        type?: string,
        value?: string | number,
        width?: number
}

declare type ui$uploaderEventName = "onAfterFileAdd" |
    "onAfterRender" |
    "onAfterScroll" |
    "onBeforeFileAdd" |
    "onBeforeRender" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFileUpload" |
    "onFileUploadError" |
    "onFocus" |
    "onItemClick" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onUploadComplete" |
    "onViewResize";

declare type ui$uploader = {
    addDropZone(element: HTMLElement): void,
    addFile(name: string, size: number, type?: string): void,
    adjust(): void,
    attachEvent(
        type: ui$uploaderEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    blur(): void,
    callEvent(name: string, params: any[]): boolean,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    fileDialog(content?: any): void,
    focus(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getInputNode(): HTMLElement,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getValue(): string,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isUploaded(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    refresh(): void,
    render(id: string | number, data: any, type: string): void,
    resize(): void,
    send(id: number | string | webix$WebixCallback, details: any): void,
    setValue(value: string): void,
    show(force?: boolean, animation?: boolean): void,
    stopUpload(id: string | number): void,
    sync(source: any, filter: webix$WebixCallback, silent: boolean): void,
    unbind(): void,
    unblockEvent(): void,
    $cssName: string,
    $getSize: any[],
    $getValue: string,
    $height: number,
    $onUploadComplete: webix$WebixCallback,
    $renderInput(config: any): HTMLElement,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $setValue(value: string): void,
    $skin: any,
    $updateProgress: webix$WebixCallback,
    $view: HTMLElement,
    $width: number,
    config: ui$uploaderConfig,
    name: string,
    on_click: webix$WebixCallback,
    touchable: boolean
}

declare interface ui$videoConfig {
    animate?: any,
        borderless?: boolean,
        container?: string | HTMLElement,
        controls?: boolean,
        css?: string,
        disabled?: boolean,
        gravity?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        src?: string,
        width?: number
}

declare type ui$videoEventName = "onAfterScroll" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onKeyPress" |
    "onLongTouch" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewResize";

declare type ui$video = {
    adjust(): void,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    define(property: string, value: any): void,
    destructor(): void,
    disable(): void,
    enable(): void,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    getVideo(): void,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    resize(): void,
    show(force?: boolean, animation?: boolean): void,
    unbind(): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$videoConfig,
    name: string
}

declare interface ui$windowConfig {
    animate?: any,
        autofit?: boolean,
        autofocus?: boolean,
        body?: string | undefined.baseview,
        borderless?: boolean,
        container?: string | HTMLElement,
        css?: string,
        disabled?: boolean,
        fullscreen?: boolean,
        gravity?: number,
        head?: any,
        headHeight?: number,
        height?: number,
        hidden?: boolean,
        id?: string | number,
        left?: number,
        maxHeight?: number,
        maxWidth?: number,
        minHeight?: number,
        minWidth?: number,
        modal?: boolean,
        move?: boolean,
        on?: any,
        padding?: any,
        position?: string | webix$WebixCallback,
        relative?: string,
        resize?: boolean,
        toFront?: boolean,
        top?: number,
        width?: number,
        zIndex?: number
}

declare type ui$windowEventName = "onAfterScroll" |
    "onBeforeShow" |
    "onBindRequest" |
    "onBlur" |
    "onDestruct" |
    "onFocus" |
    "onHide" |
    "onKeyPress" |
    "onLongTouch" |
    "onShow" |
    "onSwipeX" |
    "onSwipeY" |
    "onTimedKeyPress" |
    "onTouchEnd" |
    "onTouchMove" |
    "onTouchStart" |
    "onViewMove" |
    "onViewMoveEnd" |
    "onViewResize";

declare type ui$window = {
    adjust(): void,
    attachEvent(
        type: ui$windowEventName,
        functor: webix$WebixCallback,
        id?: string): string | number,
    bind(target: any, rule?: webix$WebixCallback, format?: string): void,
    blockEvent(): void,
    callEvent(name: string, params: any[]): boolean,
    close(): void,
    define(property: string, value: any): void,
    destructor(): void,
    detachEvent(id: string): void,
    disable(): void,
    enable(): void,
    getBody(): any,
    getChildViews(): any[],
    getFormView(): undefined.baseview,
    getHead(): any,
    getNode(): any,
    getParentView(): any,
    getTopParentView(): undefined.baseview,
    hasEvent(name: string): boolean,
    hide(): void,
    isEnabled(): boolean,
    isVisible(): boolean,
    mapEvent(map: any): void,
    resize(): void,
    resizeChildren(): void,
    setPosition(x: number, y: number): void,
    show(node?: HTMLElement, position?: any, point?: string): void,
    unbind(): void,
    unblockEvent(): void,
    show(force: boolean, animation: boolean): void,
    $getSize: any[],
    $height: number,
    $scope: any,
    $setSize(x: number, y: number): boolean,
    $skin: any,
    $view: HTMLElement,
    $width: number,
    config: ui$windowConfig,
    name: string
}
declare function $$(id: string | Event | HTMLElement): undefined.baseview