/**
 * Flowtype definitions for interact
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Interact$Interactable {
    accept(): any,
        accept(newValue: Element): Interact$Interactable,
        accept(newValue: string): Interact$Interactable,
        actionChecker(): Function,
        actionChecker(checker: Function): Interact$Interactable,
        autoScroll(): any,
        autoScroll(options: boolean): Interact$Interactable,
        autoScroll(options: {
            [key: string]: any
        }): Interact$Interactable,
        context(): Node,
        defaultActionChecker(event: any): string,
        deltaSource(): string,
        deltaSource(newValue: String): Interact$Interactable,
        draggable(): boolean,
        draggable(options: boolean): Interact$Interactable,
        draggable(options: {
            [key: string]: any
        }): Interact$Interactable,
        dropCheck(event: MouseEvent): boolean,
        dropCheck(event: Interact$TouchEvent): boolean,
        dropChecker(): Function,
        dropChecker(checker: Function): Interact$Interactable,
        dropzone(): any,
        dropzone(options: boolean): Interact$Interactable,
        dropzone(options: {
            [key: string]: any
        }): Interact$Interactable,
        element(): Element,
        fire(iEvent: Interact$InteractEvent): Interact$Interactable,
        gesturable(): any,
        gesturable(options: boolean): Interact$Interactable,
        gesturable(options: {
            [key: string]: any
        }): Interact$Interactable,
        getRect(): ClientRect,
        ignoreFrom(): any,
        ignoreFrom(newValue: string): Interact$Interactable,
        ignoreFrom(newValue: Element): Interact$Interactable,
        inertia(): any,
        inertia(options: boolean): Interact$Interactable,
        inertia(options: {
            [key: string]: any
        }): Interact$Interactable,
        off(
            eventType: string,
            listener: Function,
            useCapture?: boolean): Interact$Interactable,
        on(
            eventType: string,
            listener: Function,
            useCapture?: boolean): Interact$Interactable,
        origin(): Interact$Point,
        origin(newValue: HTMLElement): Interact$Interactable,
        origin(newValue: SVGElement): Interact$Interactable,
        origin(newValue: Interact$Point): Interact$Interactable,
        preventDefault(newValue: boolean | string): Interact$Interactable,
        rectChecker(): Function,
        rectChecker(newValue: Function): Interact$Interactable,
        resizable(): Interact$Interactable,
        resizable(options: boolean): Interact$Interactable,
        resizable(options: {
            [key: string]: any
        }): Interact$Interactable,
        restrict(): Interact$Restrict,
        restrict(newValue: Interact$Restrict): Interact$Interactable,
        set(options: {
            [key: string]: any
        }): Interact$Interactable,
        snap(): any,
        snap(options: boolean): Interact$Interactable,
        snap(options: {
            [key: string]: any
        }): Interact$Interactable,
        squareResize(): boolean,
        squareResize(newValue: boolean): Interact$Interactable,
        styleCursor(): boolean,
        styleCursor(newValue: boolean): Interact$Interactable,
        unset(): Interact$InteractStatic,
        validateSetting(context: string, option: string, value: any): any
}

declare interface Interact$Coordinates {
    clientX: number,
        clientY: number,
        pageX: number,
        pageY: number,
        timeStamp: number
}

declare interface Interact$Debug {
    target: any,
        dragging: any,
        resizing: any,
        gesturing: any,
        prepared: any,
        prevCoords: Interact$Coordinates,
        downCoords: Interact$Coordinates,
        pointerIds: any[],
        pointerMoves: any[],
        addPointer: any,
        removePointer: any,
        recordPointers: any,
        inertia: Interact$InertiaStatus,
        downTime: any,
        downEvent: any,
        prevEvent: any,
        Interactable: any,
        IOptions: any,
        interactables: any,
        dropzones: any,
        pointerIsDown: any,
        defaultOptions: any,
        defaultActionChecker: any,
        actions: any,
        dragMove: any,
        resizeMove: any,
        gestureMove: any,
        pointerUp: any,
        pointerDown: any,
        pointerMove: any,
        pointerHover: any,
        events: any,
        globalEvents: any,
        delegatedEvents: any
}

declare interface Interact$InertiaStatus {
    active: boolean,
        target: any,
        targetElement: any,
        startEvent: any,
        pointerUp: any,
        xe: number,
        ye: number,
        duration: number,
        t0: number,
        vx0: number,
        vys: number,
        lambda_v0: number,
        one_ve_v0: number,
        i: any
}

declare interface Interact$Point {
    x: number,
        y: number
}

declare interface Interact$Restrict {
    drag?: any,
        gesture?: any,
        resize?: any,
        elementRect?: {
            [direction: string]: number
        }
}

declare interface Interact$InteractEvent {
    altKey: boolean,
        axes: string,
        button: number,
        clientX0: number,
        clientX: number,
        clientY0: number,
        clientY: number,
        ctrlKey: boolean,
        dt: number,
        duration: number,
        dx: number,
        dy: number,
        metaKey: boolean,
        pageX: number,
        pageY: number,
        shiftKey: boolean,
        speed: number,
        t0: number,
        target: any,
        timeStamp: number,
        type: string,
        velocityX: number,
        velocityY: number,
        x0: number,
        y0: number
}

declare interface Interact$TouchEvent {
    pageX: number,
        pageY: number,
        type: string
}

declare interface Interact$InteractStatic {
    (element: HTMLElement): Interact$Interactable,
    (element: SVGElement): Interact$Interactable,
    (element: string): Interact$Interactable,
    (element: string, {
        Element
    }: << UNKNOWN PARAM FORMAT >> ): Interact$Interactable,
    autoScroll(): any,
        autoScroll(options: boolean): Interact$InteractStatic,
        autoScroll(options: {
            [key: string]: any
        }): Interact$InteractStatic,
        currentAction(): string,
        debug(): Interact$Debug,
        deltaSource(): string,
        deltaSource(newValue: string): Interact$InteractStatic,
        dynamicDrop(): boolean,
        dynamicDrop(newValue: boolean): Interact$InteractStatic,
        enableDragging(): boolean,
        enableDragging(newValue: boolean): Interact$InteractStatic,
        enableGesturing(): boolean,
        enableGesturing(newValue: boolean): Interact$InteractStatic,
        enableResizing(): boolean,
        enableResizing(newValue: boolean): Interact$InteractStatic,
        inertia(): any,
        inertia(options: boolean): Interact$InteractStatic,
        inertia(options: {
            [key: string]: any
        }): Interact$InteractStatic,
        isSet(element: Element): boolean,
        margin(): number,
        margin(newvalue: number): Interact$InteractStatic,
        off(
            type: string,
            listener: Function,
            useCapture?: boolean): Interact$InteractStatic,
        on(
            type: string,
            listener: Function,
            useCapture?: boolean): Interact$InteractStatic,
        restrict(): Interact$Restrict,
        restrict(newValue: Interact$Restrict): Interact$InteractStatic,
        simulate(action: string, element: Element, pointerEvent?: any): Interact$InteractStatic,
        snap(): any,
        snap(options: boolean): Interact$InteractStatic,
        snap(options: {
            [key: string]: any
        }): Interact$InteractStatic,
        stop(event: Event): Interact$InteractStatic,
        styleCursor(): boolean,
        styleCursor(newValue: boolean): Interact$InteractStatic,
        supportsTouch(): boolean
}
declare var interact: Interact$InteractStatic;
declare module 'interact.js' {
    declare module.exports: typeof interact
}