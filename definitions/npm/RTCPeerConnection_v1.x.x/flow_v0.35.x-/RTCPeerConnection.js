/**
 * Flowtype definitions for RTCPeerConnection
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type RTCIceTransportPolicy = "public" | "relay" | "all";
declare type RTCBundlePolicy = "balanced" | "max-compat" | "max-bundle";
declare type RTCRtcpMuxPolicy = "negotiate" | "require";
declare interface RTCCertificate {
    expires: number
}
declare interface RTCConfiguration {
    iceServers?: RTCIceServer[],
        iceTransportPolicy?: RTCIceTransportPolicy,
        bundlePolicy?: RTCBundlePolicy,
        rtcpMuxPolicy?: RTCRtcpMuxPolicy,
        peerIdentity?: string,
        certificates?: RTCCertificate[],
        iceCandidatePoolSize?: number
}
declare
var RTCConfiguration: {
    prototype: RTCConfiguration,
    new(): RTCConfiguration
};
declare type RTCIceCredentialType = "password" | "token";
declare interface RTCIceServer {
    urls: string | string[],
        username?: string,
        credential?: string,
        credentialType?: RTCIceCredentialType
}
declare
var RTCIceServer: {
    prototype: RTCIceServer,
    new(): RTCIceServer
};
declare type mozRTCPeerConnection = {} & RTCPeerConnection
declare
var mozRTCPeerConnection: {
    prototype: mozRTCPeerConnection,
    new(
        settings?: RTCConfiguration,
        constraints?: RTCMediaConstraints): mozRTCPeerConnection
};
declare type webkitRTCPeerConnection = {} & RTCPeerConnection
declare
var webkitRTCPeerConnection: {
    prototype: webkitRTCPeerConnection,
    new(
        settings?: RTCConfiguration,
        constraints?: RTCMediaConstraints): webkitRTCPeerConnection
};
declare interface RTCOptionalMediaConstraint {
    DtlsSrtpKeyAgreement?: boolean,
        RtpDataChannels?: boolean
}
declare interface RTCMediaConstraints {
    mandatory?: RTCMediaOfferConstraints,
        optional?: RTCOptionalMediaConstraint[]
}
declare interface RTCMediaOfferConstraints {
    offerToReceiveAudio: boolean,
        offerToReceiveVideo: boolean
}
declare interface RTCSessionDescriptionInit {
    type: string,
        sdp: string
}
declare interface RTCSessionDescription {
    type?: string,
        sdp?: string
}
declare
var RTCSessionDescription: {
    prototype: RTCSessionDescription,
    new(descriptionInitDict?: RTCSessionDescriptionInit): RTCSessionDescription
};
declare type webkitRTCSessionDescription = {
    type?: string,
    sdp?: string
} & RTCSessionDescription
declare
var webkitRTCSessionDescription: {
    prototype: webkitRTCSessionDescription,
    new(descriptionInitDict?: RTCSessionDescriptionInit): webkitRTCSessionDescription
};
declare type mozRTCSessionDescription = {
    type?: string,
    sdp?: string
} & RTCSessionDescription
declare
var mozRTCSessionDescription: {
    prototype: mozRTCSessionDescription,
    new(descriptionInitDict?: RTCSessionDescriptionInit): mozRTCSessionDescription
};
declare interface RTCDataChannelInit {
    ordered?: boolean,
        maxPacketLifeTime?: number,
        maxRetransmits?: number,
        protocol?: string,
        negotiated?: boolean,
        id?: number
}
declare interface RTCMessageEvent {
    data: any
}
declare type RTCDataChannel = {
    label: string,
    reliable: boolean,
    readyState: string,
    bufferedAmount: number,
    binaryType: string,
    onopen: (event: Event) => void,
    onerror: (event: Event) => void,
    onclose: (event: Event) => void,
    onmessage: (event: RTCMessageEvent) => void,
    close(): void,
    send(data: string): void,
    send(data: ArrayBuffer): void,
    send(data: ArrayBufferView): void,
    send(data: Blob): void
} & EventTarget
declare
var RTCDataChannel: {
    prototype: RTCDataChannel,
    new(): RTCDataChannel
};
declare type RTCDataChannelEvent = {
    channel: RTCDataChannel
} & Event
declare
var RTCDataChannelEvent: {
    prototype: RTCDataChannelEvent,
    new(eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent
};
declare type RTCIceCandidateEvent = {
    candidate: RTCIceCandidate
} & Event
declare type RTCMediaStreamEvent = {
    stream: MediaStream
} & Event
declare interface EventInit {}
declare type RTCDataChannelEventInit = {
    channel: RTCDataChannel
} & EventInit
declare interface RTCVoidCallback {
    (): void
}
declare interface RTCSessionDescriptionCallback {
    (sdp: RTCSessionDescription): void
}
declare interface RTCPeerConnectionErrorCallback {
    (errorInformation: DOMError): void
}
declare interface RTCStatsReport {
    stat(id: string): string
}
declare interface RTCStatsCallback {
    (report: RTCStatsReport): void
}
declare interface RTCOfferAnswerOptions {
    voiceActivityDetection?: boolean
}
declare type RTCOfferOptions = {
    iceRestart?: boolean
} & RTCOfferAnswerOptions
declare type RTCAnswerOptions = {} & RTCOfferAnswerOptions
declare interface RTCPeerConnection {
    createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescription>,
        createOffer(
            successCallback: RTCSessionDescriptionCallback,
            failureCallback?: RTCPeerConnectionErrorCallback,
            constraints?: RTCMediaConstraints): void,
        createAnswer(options?: RTCAnswerOptions): Promise<RTCSessionDescription>,
        createAnswer(
            successCallback: RTCSessionDescriptionCallback,
            failureCallback?: RTCPeerConnectionErrorCallback,
            constraints?: RTCMediaConstraints): void,
        setLocalDescription(description: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void>,
        setLocalDescription(
            description: RTCSessionDescription,
            successCallback?: RTCVoidCallback,
            failureCallback?: RTCPeerConnectionErrorCallback): void,
        setRemoteDescription(description: RTCSessionDescription | RTCSessionDescriptionInit): Promise<void>,
        setRemoteDescription(
            description: RTCSessionDescription,
            successCallback?: RTCVoidCallback,
            failureCallback?: RTCPeerConnectionErrorCallback): void,
        localDescription: RTCSessionDescription,
        remoteDescription: RTCSessionDescription,
        signalingState: string,
        updateIce(configuration?: RTCConfiguration, constraints?: RTCMediaConstraints): void,
        addIceCandidate(candidate: RTCIceCandidate): Promise<void>,
        addIceCandidate(
            candidate: RTCIceCandidate,
            successCallback: () => void,
            failureCallback: RTCPeerConnectionErrorCallback): void,
        iceGatheringState: string,
        iceConnectionState: string,
        getLocalStreams(): MediaStream[],
        getRemoteStreams(): MediaStream[],
        createDataChannel(label?: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel,
        ondatachannel: (event: RTCDataChannelEvent) => void,
        addStream(stream: MediaStream, constraints?: RTCMediaConstraints): void,
        removeStream(stream: MediaStream): void,
        close(): void,
        onnegotiationneeded: (event: Event) => void,
        onconnecting: (event: Event) => void,
        onopen: (event: Event) => void,
        onaddstream: (event: RTCMediaStreamEvent) => void,
        onremovestream: (event: RTCMediaStreamEvent) => void,
        onstatechange: (event: Event) => void,
        oniceconnectionstatechange: (event: Event) => void,
        onicecandidate: (event: RTCIceCandidateEvent) => void,
        onidentityresult: (event: Event) => void,
        onsignalingstatechange: (event: Event) => void,
        getStats(selector: MediaStreamTrack): Promise<RTCStatsReport>,
        getStats(
            selector: MediaStreamTrack,
            successCallback: RTCStatsCallback,
            failureCallback: RTCPeerConnectionErrorCallback): void
}
declare
var RTCPeerConnection: {
    prototype: RTCPeerConnection,
    new(
        configuration: RTCConfiguration,
        constraints?: RTCMediaConstraints): RTCPeerConnection
};
declare interface RTCIceCandidate {
    candidate: string,
        sdpMid?: string,
        sdpMLineIndex?: number
}
declare
var RTCIceCandidate: {
    prototype: RTCIceCandidate,
    new(candidateInitDict?: RTCIceCandidate): RTCIceCandidate
};
declare type webkitRTCIceCandidate = {
    candidate: string,
    sdpMid?: string,
    sdpMLineIndex?: number
} & RTCIceCandidate
declare
var webkitRTCIceCandidate: {
    prototype: webkitRTCIceCandidate,
    new(candidateInitDict?: webkitRTCIceCandidate): webkitRTCIceCandidate
};
declare type mozRTCIceCandidate = {
    candidate: string,
    sdpMid?: string,
    sdpMLineIndex?: number
} & RTCIceCandidate
declare
var mozRTCIceCandidate: {
    prototype: mozRTCIceCandidate,
    new(candidateInitDict?: mozRTCIceCandidate): mozRTCIceCandidate
};
declare interface RTCIceCandidateInit {
    candidate: string,
        sdpMid?: string,
        sdpMLineIndex?: number
}
declare
var RTCIceCandidateInit: {
    prototype: RTCIceCandidateInit,
    new(): RTCIceCandidateInit
};
declare interface PeerConnectionIceEvent {
    peer: RTCPeerConnection,
        candidate: RTCIceCandidate
}
declare
var PeerConnectionIceEvent: {
    prototype: PeerConnectionIceEvent,
    new(): PeerConnectionIceEvent
};
declare interface RTCPeerConnectionConfig {
    iceServers: RTCIceServer[]
}
declare
var RTCPeerConnectionConfig: {
    prototype: RTCPeerConnectionConfig,
    new(): RTCPeerConnectionConfig
};
declare interface Window {
    RTCPeerConnection: RTCPeerConnection,
        webkitRTCPeerConnection: webkitRTCPeerConnection,
        mozRTCPeerConnection: mozRTCPeerConnection,
        RTCSessionDescription: RTCSessionDescription,
        webkitRTCSessionDescription: webkitRTCSessionDescription,
        mozRTCSessionDescription: mozRTCSessionDescription,
        RTCIceCandidate: RTCIceCandidate,
        webkitRTCIceCandidate: webkitRTCIceCandidate,
        mozRTCIceCandidate: mozRTCIceCandidate
}