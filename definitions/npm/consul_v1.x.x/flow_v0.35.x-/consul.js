/**
 * Flowtype definitions for consul
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'consul' {

    declare interface Consul$Thenable<T>{
        then<U>(
            onFulfilled?: (value: T) => U | Consul$Thenable<U>,
            onRejected?: (error: any) => U | Consul$Thenable<U>): Consul$Thenable<U>,
        then<U>(
            onFulfilled?: (value: T) => U | Consul$Thenable<U>,
            onRejected?: (error: any) => void): Consul$Thenable<U>,
        catch<U>(onRejected?: (error: any) => U | Consul$Thenable<U>): Consul$Thenable<U >
    }

    declare interface Consul$CommonOptions {
        consistent?: boolean,
            dc?: string,
            stale?: boolean,
            token?: string,
            wait?: string,
            wan?: boolean,
            ctx?: NodeJS.EventEmitter,
            timeout?: number
    }

    declare type Consul$Response = {
        body?: Object | string | Buffer
    } & HttpIncomingMessage


    declare interface Consul$Callback<TData>{
        (err?: Error, data?: TData, res?: Consul$Response): any
    }

    declare type Acl$CreateOptions = {
        name?: string,
        type?: string,
        rules?: string
    } & Consul$CommonOptions


    declare type Acl$UpdateOptions = {
        id: string,
        name?: string,
        type?: string,
        rules?: string
    } & Consul$CommonOptions


    declare type Acl$DestroyOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Acl$InfoOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Acl$GetOptions = {} & Acl$InfoOptions


    declare type Acl$CloneOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Acl$ListOptions = {} & Consul$CommonOptions


    declare interface Consul$Acl {
        consul: Consul$Consul,

            /**
             * Creates a new token with policy
             */
            create: {
                (opts: Acl$CreateOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Acl$CreateOptions): Consul$Thenable<TData >
            },

            /**
             * Update the policy of a token
             */
            update: {
                (opts: Acl$UpdateOptions, callback: Consul$Callback<TData>): void,
                (opts: Acl$UpdateOptions): Consul$Thenable<TData >
            },

            /**
             * Destroys a given token
             */
            destroy: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Acl$DestroyOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Acl$DestroyOptions): Consul$Thenable<TData >
            },

            /**
             * Queries the policy of a given token
             */
            info: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Acl$InfoOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Acl$InfoOptions): Consul$Thenable<TData >
            },
            get: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Acl$GetOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Acl$GetOptions): Consul$Thenable<TData >
            },

            /**
             * Creates a new token by cloning an existing token
             */
            clone: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Acl$CloneOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Acl$CloneOptions): Consul$Thenable<TData >
            },

            /**
             * Lists all the active tokens
             */
            list: {
                (opts: Acl$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Acl$ListOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$AclStatic {
        new(consul: Consul$Consul): Consul$Acl
    }

    declare type Check$ListOptions = {} & Consul$CommonOptions


    declare type Check$RegisterOptions = {
        name: string,
        id?: string,
        serviceid?: string,
        http?: string,
        script?: string,
        interval?: string,
        ttl?: string,
        notes?: string,
        status?: string
    } & Consul$CommonOptions


    declare type Check$DeregisterOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Check$PassOptions = {
        id: string,
        note?: string
    } & Consul$CommonOptions


    declare type Check$WarnOptions = {
        id: string,
        note?: string
    } & Consul$CommonOptions


    declare type Check$FailOptions = {
        id: string,
        note?: string
    } & Consul$CommonOptions


    declare interface Agent$Check {
        consul: Consul$Consul,

            /**
             * Returns the checks the local agent is managing
             */
            list: {
                (opts: Check$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Check$ListOptions): Consul$Thenable<TData >
            },

            /**
             * Registers a new local check
             */
            register: {
                (opts: Check$RegisterOptions, callback: Consul$Callback<TData>): void,
                (opts: Check$RegisterOptions): Consul$Thenable<TData >
            },

            /**
             * Deregister a local check
             */
            deregister: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Check$DeregisterOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Check$DeregisterOptions): Consul$Thenable<TData >
            },

            /**
             * Mark a local test as passing
             */
            pass: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Check$PassOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Check$PassOptions): Consul$Thenable<TData >
            },

            /**
             * Mark a local test as warning
             */
            warn: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Check$WarnOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Check$WarnOptions): Consul$Thenable<TData >
            },

            /**
             * Mark a local test as critical
             */
            fail: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Check$FailOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Check$FailOptions): Consul$Thenable<TData >
            }
    }

    declare interface Agent$CheckStatic {
        new(consul: Consul$Consul): Agent$Check
    }

    declare interface Service$RegisterCheck {
        http?: string,
            script?: string,
            interval?: string,
            ttl?: string,
            notes?: string,
            status?: string
    }

    declare type Service$ListOptions = {} & Consul$CommonOptions


    declare type Service$RegisterOptions = {
        name: string,
        id?: string,
        serviceid?: string,
        http?: string,
        script?: string,
        interval?: string,
        ttl?: string,
        notes?: string,
        status?: string
    } & Consul$CommonOptions


    declare type Service$DeregisterOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Service$MaintenanceOptions = {
        id: string,
        enable: boolean,
        reason?: string
    } & Consul$CommonOptions


    declare interface Agent$Service {
        consul: Consul$Consul,

            /**
             * Returns the services local agent is managing
             */
            list: {
                (opts: Service$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Service$ListOptions): Consul$Thenable<TData >
            },

            /**
             * Registers a new local service
             */
            register: {
                (name: string, callback: Consul$Callback<TData>): void,
                (opts: Service$RegisterOptions, callback: Consul$Callback<TData>): void,
                (name: string): Consul$Thenable<TData>,
                (opts: Service$RegisterOptions): Consul$Thenable<TData >
            },

            /**
             * Deregister a local service
             */
            deregister: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Service$DeregisterOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Service$DeregisterOptions): Consul$Thenable<TData >
            },

            /**
             * Manages node maintenance mode
             */
            maintenance: {
                (opts: Service$MaintenanceOptions, callback: Consul$Callback<TData>): void,
                (opts: Service$MaintenanceOptions): Consul$Thenable<TData >
            }
    }

    declare interface Agent$ServiceStatic {
        new(consul: Consul$Consul): Agent$Service
    }

    declare type Agent$ChecksOptions = {}

    declare type Agent$ServicesOptions = {}

    declare type Agent$MembersOptions = {
        wan?: boolean
    } & Consul$CommonOptions


    declare type Agent$SelfOptions = {} & Consul$CommonOptions


    declare type Agent$MaintenanceOptions = {
        id: string,
        enable: boolean,
        reason?: string
    } & Consul$CommonOptions


    declare type Agent$JoinOptions = {
        address: string,
        wan?: boolean
    } & Consul$CommonOptions


    declare type Agent$ForceLeaveOptions = {
        node: string
    } & Consul$CommonOptions


    declare interface Consul$Agent {
        consul: Consul$Consul,
            check: Agent$Check,
            service: Agent$Service,

            /**
             * Returns the checks the local agent is managing
             */
            checks: {
                (opts: Agent$ChecksOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Agent$ChecksOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the services local agent is managing
             */
            services: {
                (opts: Agent$ServicesOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Agent$ServicesOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the members as seen by the local consul agent
             */
            members: {
                (opts: Agent$MembersOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Agent$MembersOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the local node configuration
             */
            self: {
                (opts: Agent$SelfOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Agent$SelfOptions): Consul$Thenable<TData >
            },

            /**
             * Manages node maintenance mode
             */
            maintenance: {
                (enable: boolean, callback: Consul$Callback<TData>): void,
                (opts: Agent$MaintenanceOptions, callback: Consul$Callback<TData>): void,
                (enable: boolean): Consul$Thenable<TData>,
                (opts: Agent$MaintenanceOptions): Consul$Thenable<TData >
            },

            /**
             * Trigger local agent to join a node
             */
            join: {
                (address: string, callback: Consul$Callback<TData>): void,
                (opts: Agent$JoinOptions, callback: Consul$Callback<TData>): void,
                (address: string): Consul$Thenable<TData>,
                (opts: Agent$JoinOptions): Consul$Thenable<TData >
            },

            /**
             * Force remove node
             */
            forceLeave: {
                (node: string, callback: Consul$Callback<TData>): void,
                (opts: Agent$ForceLeaveOptions, callback: Consul$Callback<TData>): void,
                (node: string): Consul$Thenable<TData>,
                (opts: Agent$ForceLeaveOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$AgentStatic {
        new(consul: Consul$Consul): Consul$Agent,
        Check: Agent$CheckStatic,
            Service: Agent$ServiceStatic
    }

    declare type Node$ListOptions = {} & Consul$CommonOptions


    declare type Node$ServicesOptions = {}

    declare interface Catalog$Node {
        consul: Consul$Consul,

            /**
             * Lists nodes in a given DC
             */
            list: {
                (dc: string, callback: Consul$Callback<TData>): void,
                (opts: Node$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (dc?: string): Consul$Thenable<TData>,
                (opts?: Node$ListOptions): Consul$Thenable<TData >
            },

            /**
             * Lists the services provided by a node
             */
            services: {
                (node: string, callback: Consul$Callback<TData>): void,
                (opts: Node$ServicesOptions, callback: Consul$Callback<TData>): void,
                (node: string): Consul$Thenable<TData>,
                (opts: Node$ServicesOptions): Consul$Thenable<TData >
            }
    }

    declare interface Catalog$NodeStatic {
        new(consul: Consul$Consul): Catalog$Node
    }

    declare type Service$ListOptions = {} & Consul$CommonOptions


    declare type Service$NodesOptions = {
        service: string,
        dc?: string,
        tag?: string
    } & Consul$CommonOptions


    declare interface Catalog$Service {
        consul: Consul$Consul,

            /**
             * Returns the services local agent is managing
             */
            list: {
                (opts: Service$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Service$ListOptions): Consul$Thenable<TData >
            },

            /**
             * Registers a new local service
             */
            register: {
                (name: string, callback: Consul$Callback<TData>): void,
                (opts: Service$RegisterOptions, callback: Consul$Callback<TData>): void,
                (name: string): Consul$Thenable<TData>,
                (opts: Service$RegisterOptions): Consul$Thenable<TData >
            },

            /**
             * Deregister a local service
             */
            deregister: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Service$DeregisterOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Service$DeregisterOptions): Consul$Thenable<TData >
            },

            /**
             * Manages node maintenance mode
             */
            maintenance: {
                (opts: Service$MaintenanceOptions, callback: Consul$Callback<TData>): void,
                (opts: Service$MaintenanceOptions): Consul$Thenable<TData >
            }
    }

    declare interface Catalog$ServiceStatic {
        new(consul: Consul$Consul): Catalog$Service
    }

    declare type Catalog$DatacentersOptions = {} & Consul$CommonOptions


    declare type Catalog$NodesOptions = {
        service: string,
        dc?: string,
        tag?: string
    } & Consul$CommonOptions


    declare type Catalog$ServicesOptions = {}

    declare interface Consul$Catalog {
        consul: Consul$Consul,
            node: Catalog$Node,
            service: Catalog$Service,

            /**
             * Lists known datacenters
             */
            datacenters: {
                (opts: Catalog$DatacentersOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Catalog$DatacentersOptions): Consul$Thenable<TData >
            },

            /**
             * Lists nodes in a given DC
             */
            nodes: {
                (dc: string, callback: Consul$Callback<TData>): void,
                (opts: Catalog$NodesOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (dc?: string): Consul$Thenable<TData>,
                (opts?: Catalog$NodesOptions): Consul$Thenable<TData >
            },

            /**
             * Lists services in a given DC
             */
            services: {
                (dc: string, callback: Consul$Callback<TData>): void,
                (opts: Catalog$ServicesOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (dc?: string): Consul$Thenable<TData>,
                (opts?: Catalog$ServicesOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$CatalogStatic {
        new(consul: Consul$Consul): Consul$Catalog,
        Node: Catalog$NodeStatic,
            Service: Catalog$ServiceStatic
    }

    declare type Event$FireOptions = {
        name: string,
        payload: string | Buffer,
        node?: string,
        service?: string,
        tag?: string
    } & Consul$CommonOptions


    declare type Event$ListOptions = {} & Consul$CommonOptions


    declare interface Consul$Event {
        consul: Consul$Consul,

            /**
             * Fires a new user event
             */
            fire: {
                (name: string, payload: string | Buffer, callback: Consul$Callback<TData>): void,
                (name: string, callback: Consul$Callback<TData>): void,
                (opts: Event$FireOptions, callback: Consul$Callback<TData>): void,
                (name: string, payload: string | Buffer): Consul$Thenable<TData>,
                (name: string): Consul$Thenable<TData>,
                (opts: Event$FireOptions): Consul$Thenable<TData >
            },

            /**
             * Lists the most recent events an agent has seen
             */
            list: {
                (name: string, callback: Consul$Callback<TData>): void,
                (opts: Event$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (name?: string): Consul$Thenable<TData>,
                (opts?: Event$ListOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$EventStatic {
        new(consul: Consul$Consul): Consul$Event
    }

    declare type Health$NodeOptions = {
        node: string,
        dc?: string
    } & Consul$CommonOptions


    declare type Health$ChecksOptions = {}

    declare type Health$ServiceOptions = {
        service: string,
        dc?: string,
        tag?: string,
        passing?: boolean
    } & Consul$CommonOptions


    declare type Health$StateOptions = {
        state: string,
        dc?: string
    } & Consul$CommonOptions


    declare interface Consul$Health {
        consul: Consul$Consul,

            /**
             * Returns the health info of a node
             */
            node: {
                (node: string, callback: Consul$Callback<TData>): void,
                (opts: Health$NodeOptions, callback: Consul$Callback<TData>): void,
                (node: string): Consul$Thenable<TData>,
                (opts: Health$NodeOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the checks of a service
             */
            checks: {
                (service: string, callback: Consul$Callback<TData>): void,
                (opts: Health$ChecksOptions, callback: Consul$Callback<TData>): void,
                (service: string): Consul$Thenable<TData>,
                (opts: Health$ChecksOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the nodes and health info of a service
             */
            service: {
                (service: string, callback: Consul$Callback<TData>): void,
                (opts: Health$ServiceOptions, callback: Consul$Callback<TData>): void,
                (service: string): Consul$Thenable<TData>,
                (opts: Health$ServiceOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the checks in a given state
             */
            state: {
                (state: string, callback: Consul$Callback<TData>): void,
                (opts: Health$StateOptions, callback: Consul$Callback<TData>): void,
                (state: string): Consul$Thenable<TData>,
                (opts: Health$StateOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$HealthStatic {
        new(consul: Consul$Consul): Consul$Health
    }

    declare type Kv$GetOptions = {} & Acl$InfoOptions


    declare type Kv$KeysOptions = {
        key: string,
        dc?: string,
        separator?: string
    } & Consul$CommonOptions


    declare type Kv$SetOptions = {
        key: string,
        value: string | Buffer,
        dc?: string,
        flags?: number,
        cas?: string,
        acquire?: string,
        release?: string
    } & Consul$CommonOptions


    declare type Kv$DelOptions = {
        key: string,
        dc?: string,
        recurse?: boolean,
        cas?: string
    } & Consul$CommonOptions


    declare type Kv$DeleteOptions = {} & Kv$DelOptions


    declare interface Consul$Kv {
        consul: Consul$Consul,

            /**
             * Get
             */
            get: {
                (key: string, callback: Consul$Callback<TData>): void,
                (opts: Kv$GetOptions, callback: Consul$Callback<TData>): void,
                (key: string): Consul$Thenable<TData>,
                (opts: Kv$GetOptions): Consul$Thenable<TData >
            },

            /**
             * Keys
             */
            keys: {
                (key: string, callback: Consul$Callback<TData>): void,
                (opts: Kv$KeysOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (key?: string): Consul$Thenable<TData>,
                (opts?: Kv$KeysOptions): Consul$Thenable<TData >
            },

            /**
             * Set
             */
            set: {
                (key: string, value: string | Buffer, opts: Kv$SetOptions, callback: Consul$Callback<TData>): void,
                (key: string, value: string | Buffer, callback: Consul$Callback<TData>): void,
                (opts: Kv$SetOptions, callback: Consul$Callback<TData>): void,
                (key: string, value: string | Buffer, opts: Kv$SetOptions): Consul$Thenable<TData>,
                (key: string, value: string | Buffer): Consul$Thenable<TData>,
                (opts: Kv$SetOptions): Consul$Thenable<TData >
            },

            /**
             * Delete
             */
            del: {
                (key: string, callback: Consul$Callback<TData>): void,
                (opts: Kv$DelOptions, callback: Consul$Callback<TData>): void,
                (key: string): Consul$Thenable<TData>,
                (opts: Kv$DelOptions): Consul$Thenable<TData >
            },
            delete: {
                (key: string, callback: Consul$Callback<TData>): void,
                (opts: Kv$DeleteOptions, callback: Consul$Callback<TData>): void,
                (key: string): Consul$Thenable<TData>,
                (opts: Kv$DeleteOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$KvStatic {
        new(consul: Consul$Consul): Consul$Kv
    }

    declare interface Lock$Options {
        key: string,
            session?: Object | string,
            value?: string | Buffer,
            lockwaittime?: string,
            lockretrytime?: string
    }

    declare type Consul$Lock = {
        consul: Consul$Consul,

        /**
         * Acquire lock
         */
        acquire(): void,

        /**
         * Release lock
         */
        release(): void
    }

    declare interface Consul$LockStatic {
        new(consul: Consul$Consul, opts: Lock$Options): Consul$Lock
    }

    declare type Session$CreateOptions = {
        name?: string,
        type?: string,
        rules?: string
    } & Consul$CommonOptions


    declare type Session$DestroyOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Session$InfoOptions = {
        id: string
    } & Consul$CommonOptions


    declare type Session$GetOptions = {} & Session$InfoOptions


    declare type Session$NodeOptions = {
        node: string,
        dc?: string
    } & Consul$CommonOptions


    declare type Session$ListOptions = {} & Consul$CommonOptions


    declare type Session$RenewOptions = {
        id: string,
        dc?: string
    } & Consul$CommonOptions


    declare interface Consul$Session {
        consul: Consul$Consul,

            /**
             * Creates a new session
             */
            create: {
                (opts: Session$CreateOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Session$CreateOptions): Consul$Thenable<TData >
            },

            /**
             * Destroys a given session
             */
            destroy: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Session$DestroyOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Session$DestroyOptions): Consul$Thenable<TData >
            },

            /**
             * Queries a given session
             */
            info: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Session$InfoOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Session$InfoOptions): Consul$Thenable<TData >
            },
            get: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Session$GetOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Session$GetOptions): Consul$Thenable<TData >
            },

            /**
             * Lists sessions belonging to a node
             */
            node: {
                (node: string, callback: Consul$Callback<TData>): void,
                (opts: Session$NodeOptions, callback: Consul$Callback<TData>): void,
                (node: string): Consul$Thenable<TData>,
                (opts: Session$NodeOptions): Consul$Thenable<TData >
            },

            /**
             * Lists all the active sessions
             */
            list: {
                (opts: Session$ListOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Session$ListOptions): Consul$Thenable<TData >
            },

            /**
             * Renews a TTL-based session
             */
            renew: {
                (id: string, callback: Consul$Callback<TData>): void,
                (opts: Session$RenewOptions, callback: Consul$Callback<TData>): void,
                (id: string): Consul$Thenable<TData>,
                (opts: Session$RenewOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$SessionStatic {
        new(consul: Consul$Consul): Consul$Session
    }

    declare type Status$LeaderOptions = {} & Consul$CommonOptions


    declare type Status$PeersOptions = {} & Consul$CommonOptions


    declare interface Consul$Status {
        consul: Consul$Consul,

            /**
             * Returns the current Raft leader.
             */
            leader: {
                (opts: Status$LeaderOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Status$LeaderOptions): Consul$Thenable<TData >
            },

            /**
             * Returns the current Raft peer set
             */
            peers: {
                (opts: Status$PeersOptions, callback: Consul$Callback<TData>): void,
                (callback: Consul$Callback<TData>): void,
                (opts?: Status$PeersOptions): Consul$Thenable<TData >
            }
    }

    declare interface Consul$StatusStatic {
        new(consul: Consul$Consul): Consul$Status
    }

    declare interface Watch$Options {
        key: string,
            session?: Object | string,
            value?: string | Buffer,
            lockwaittime?: string,
            lockretrytime?: string
    }

    declare type Consul$Watch = {
        consul: Consul$Consul,

        /**
         * Is running
         */
        isRunning(): boolean,

        /**
         * Update time
         */
        updateTime(): number,

        /**
         * End watch
         */
        end(): void
    }

    declare interface Consul$WatchStatic {
        new(consul: Consul$Consul, opts: Watch$Options): Consul$Watch
    }

    declare interface Consul$ConsulOptions {
        host?: string,
            port?: string,
            secure?: boolean,
            ca?: string[],
            defaults?: Consul$CommonOptions,
            promisify?: boolean | Function
    }

    declare interface Consul$Consul {
        acl: Consul$Acl,
            agent: Consul$Agent,
            catalog: Consul$Catalog,
            event: Consul$Event,
            health: Consul$Health,
            kv: Consul$Kv,
            session: Consul$Session,
            status: Consul$Status,

            /**
             * Lock helper.
             */
            lock(opts: Lock$Options): Consul$Lock,

            /**
             * Watch helper.
             */
            watch(opts: Watch$Options): Consul$Watch
    }

    declare interface Consul$ConsulStatic {
        (opts?: Consul$ConsulOptions): Consul$Consul,
        new(opts?: Consul$ConsulOptions): Consul$Consul,
        Acl: Consul$AclStatic,
            Agent: Consul$AgentStatic,
            Catalog: Consul$CatalogStatic,
            Event: Consul$EventStatic,
            Health: Consul$HealthStatic,
            Kv: Consul$KvStatic,
            Lock: Consul$LockStatic,
            Session: Consul$SessionStatic,
            Status: Consul$StatusStatic,
            Watch: Consul$WatchStatic
    }
    declare var Consul: Consul$ConsulStatic;
    declare module.exports: typeof Consul
}