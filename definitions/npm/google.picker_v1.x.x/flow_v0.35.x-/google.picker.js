/**
 * Flowtype definitions for google.picker
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export class PickerBuilder {
    constructor(): this;
    addView(viewOrId: any): picker$PickerBuilder;
    addViewGroup(viewGroup: any): picker$PickerBuilder;
    disableFeature(feature: string): picker$PickerBuilder;
    enableFeature(feature: string): picker$PickerBuilder;
    getRelayUrl(): string;
    getTitle(): string;
    hideTitleBar(): picker$PickerBuilder;
    isFeatureEnabled(feature: string): boolean;
    setAppId(appId: string): picker$PickerBuilder;
    setCallback(method: Function): picker$PickerBuilder;
    setDeveloperKey(key: string): picker$PickerBuilder;
    setDocument(document: string): picker$PickerBuilder;
    setLocale(locale: string): picker$PickerBuilder;
    setOAuthToken(token: string): picker$PickerBuilder;
    setOrigin(origin: string): picker$PickerBuilder;
    setRelayUrl(url: string): picker$PickerBuilder;
    setSelectableMimeTypes(type: string): picker$PickerBuilder;
    setSize(): picker$PickerBuilder;
    setTitle(title: string): picker$PickerBuilder;
    setUploadToAlbumId(albumId: string): picker$PickerBuilder;
    toUri(): string;
    build(): picker$Picker
}


/**
 * Picker is the top level object representing the UI action with the user. These objects are not created directly, but instead use the PickerBuilder object.
 */
declare export interface picker$Picker {
    isVisible(): boolean,
        setCallback(): picker$Picker,
        setRelayUrl(url: string): picker$Picker,
        setVisible(visible: boolean): picker$Picker
}


/**
 * Use DocsUploadView to upload documents to Google Drive.
 */
declare export class DocsUploadView {
    constructor(): this;
    setIncludeFolders(included: boolean): picker$DocsUploadView;
    setParent(parentId: string): picker$DocsUploadView
}


/**
 * DocsView is a subclass of View that can be used for Google Drive views.
 */
declare export class DocsView {
    constructor(viewId?: string): this;
    setIncludeFolders(included: boolean): picker$DocsView;
    setSelectFolderEnabled(enabled: boolean): picker$DocsView;
    setMode(mode: string): picker$DocsView;
    setOwnedByMe(me?: boolean): picker$DocsView;
    setParent(parentId: string): picker$DocsView;
    setStarred(starred: boolean): picker$DocsView
}

declare export var DocsViewMode: {
    GRID: string,
    LIST: string
};

declare export var Feature: {
    MINE_ONLY: string,
    MULTISELECT_ENABLED: string,
    NAV_HIDDEN: string,
    SIMPLE_UPLOAD_ENABLED: string
};

declare export var ViewId: {
    DOCS: string,
    DOCS_IMAGES: string,
    DOCS_IMAGES_AND_VIDEOS: string,
    DOCS_VIDEOS: string,
    DOCUMENTS: string,
    DRAWINGS: string,
    FOLDERS: string,
    FORMS: string,
    IMAGE_SEARCH: string,
    MAPS: string,
    PDFS: string,
    PHOTOS: string,
    PHOTO_ALBUMS: string,
    PHOTO_UPLOAD: string,
    PRESENTATIONS: string,
    RECENTLY_PICKED: string,
    SPREADSHEETS: string,
    VIDEO_SEARCH: string,
    WEBCAM: string,
    YOUTUBE: string
};

declare export var Action: {
    CANCEL: string,
    PICKED: string
};

declare export var Document: {
    ADDRESS_LINES: string,
    AUDIENCE: string,
    DESCRIPTION: string,
    DURATION: string,
    EMBEDDABLE_URL: string,
    ICON_URL: string,
    ID: string,
    IS_NEW: string,
    LAST_EDITED_UTC: string,
    LATITUDE: string,
    LONGITUDE: string,
    MIME_TYPE: string,
    NAME: string,
    NUM_CHILDREN: string,
    PARENT_ID: string,
    PHONE_NUMBERS: string,
    SERVICE_ID: string,
    THUMBNAILS: string,
    TYPE: string,
    URL: string
};

declare export var Response: {
    ACTION: string,
    DOCUMENTS: string,
    PARENTS: string,
    VIEW: string
};

declare export var Type: {
    ALBUM: string,
    DOCUMENT: string,
    LOCATION: string,
    PHOTO: string,
    URL: string,
    VIDEO: string
};