// @flow
/**
 * Flowtype definitions for babylon
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare class ProceduralTexture mixins Texture {
    isCube: boolean;
    _generateMipMaps: boolean;
    isEnabled: boolean;
    onGenerated: () => void;
    _textures: BABYLON$Texture[];
    constructor(name: string, size: any, fragment: any, scene: BABYLON$Scene, fallbackTexture?: BABYLON$Texture, generateMipMaps?: boolean, isCube?: boolean): this;
    reset(): void;
    isReady(): boolean;
    resetRefreshCounter(): void;
    setFragment(fragment: any): void;
    refreshRate: number;
    _shouldRender(): boolean;
    getRenderSize(): number;
    resize(size: any, generateMipMaps: any): void;
    setTexture(name: string, texture: BABYLON$Texture): BABYLON$ProceduralTexture;
    setFloat(name: string, value: number): BABYLON$ProceduralTexture;
    setFloats(name: string, value: number[]): BABYLON$ProceduralTexture;
    setColor3(name: string, value: BABYLON$Color3): BABYLON$ProceduralTexture;
    setColor4(name: string, value: BABYLON$Color4): BABYLON$ProceduralTexture;
    setVector2(name: string, value: BABYLON$Vector2): BABYLON$ProceduralTexture;
    setVector3(name: string, value: BABYLON$Vector3): BABYLON$ProceduralTexture;
    setMatrix(name: string, value: BABYLON$Matrix): BABYLON$ProceduralTexture;
    render(useCameraPostProcess?: boolean): void;
    clone(): BABYLON$ProceduralTexture;
    dispose(): void
}
declare interface Window {
    mozIndexedDB(func: any): any,
        webkitIndexedDB(func: any): any,
        IDBTransaction(func: any): any,
        webkitIDBTransaction(func: any): any,
        msIDBTransaction(func: any): any,
        IDBKeyRange(func: any): any,
        webkitIDBKeyRange(func: any): any,
        msIDBKeyRange(func: any): any,
        webkitURL: HTMLURL,
        webkitRequestAnimationFrame(func: any): any,
        mozRequestAnimationFrame(func: any): any,
        oRequestAnimationFrame(func: any): any,
        WebGLRenderingContext: WebGLRenderingContext,
        MSGesture: MSGesture,
        CANNON: any,
        SIMD: any,
        AudioContext: AudioContext,
        webkitAudioContext: AudioContext,
        PointerEvent: any
}
declare interface HTMLURL {
    createObjectURL(param1: any, param2?: any): any
}
declare interface Document {
    exitFullscreen(): void,
        webkitCancelFullScreen(): void,
        mozCancelFullScreen(): void,
        msCancelFullScreen(): void,
        mozFullScreen: boolean,
        msIsFullScreen: boolean,
        fullscreen: boolean,
        mozPointerLockElement: HTMLElement,
        msPointerLockElement: HTMLElement,
        webkitPointerLockElement: HTMLElement
}
declare interface HTMLCanvasElement {
    requestPointerLock(): void,
        msRequestPointerLock(): void,
        mozRequestPointerLock(): void,
        webkitRequestPointerLock(): void
}
declare interface CanvasRenderingContext2D {
    imageSmoothingEnabled: boolean,
        mozImageSmoothingEnabled: boolean,
        oImageSmoothingEnabled: boolean,
        webkitImageSmoothingEnabled: boolean
}
declare interface WebGLTexture {
    isReady: boolean,
        isCube: boolean,
        url: string,
        noMipmap: boolean,
        samplingMode: number,
        references: number,
        generateMipMaps: boolean,
        _size: number,
        _baseWidth: number,
        _baseHeight: number,
        _width: number,
        _height: number,
        _workingCanvas: HTMLCanvasElement,
        _workingContext: CanvasRenderingContext2D,
        _framebuffer: WebGLFramebuffer,
        _depthBuffer: WebGLRenderbuffer,
        _cachedCoordinatesMode: number,
        _cachedWrapU: number,
        _cachedWrapV: number,
        _isDisabled: boolean
}
declare interface WebGLBuffer {
    references: number,
        capacity: number,
        is32Bits: boolean
}
declare interface MouseEvent {
    mozMovementX: number,
        mozMovementY: number,
        webkitMovementX: number,
        webkitMovementY: number,
        msMovementX: number,
        msMovementY: number
}
declare interface MSStyleCSSProperties {
    webkitTransform: string,
        webkitTransition: string
}
declare interface Navigator {
    getVRDevices: () => any,
        mozGetVRDevices: (any: any) => any,
        isCocoonJS: boolean
}
declare interface Screen {
    orientation: string,
        mozOrientation: string
}
declare interface HTMLMediaElement {
    crossOrigin: string
}
declare var HMDVRDevice: any;
declare var PositionSensorVRDevice: any;