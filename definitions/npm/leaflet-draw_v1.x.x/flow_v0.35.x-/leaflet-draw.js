/**
 * Flowtype definitions for leaflet-draw
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
export interface L$MapOptions {
    drawControl?: boolean
}

declare
export interface L$ControlStatic {
    Draw: Control$DrawStatic
}

declare
export interface Control$DrawStatic {
    new(options?: Control$IDrawConstructorOptions): Control$Draw
}

declare
export interface Control$IDrawConstructorOptions {

    /**
     * The initial position of the control (one of the map corners).
     * 
    Default value: 'topleft'
    */
    position?: string,

        /**
         * The options used to configure the draw toolbar.
         * 
        Default value: {}
        */
        draw?: L$DrawOptions,

        /**
         * The options used to configure the edit toolbar.
         * 
        Default value: false
        */
        edit: Control$EditOptions
}

declare
export interface Control$DrawOptions {

    /**
     * Polyline draw handler options. Set to false to disable handler.
     * 
      Default value: {}
    */
    polyline?: DrawOptions$PolylineOptions,

        /**
         * Polygon draw handler options. Set to false to disable handler.
         * 
          Default value: {}
        */
        polygon?: DrawOptions$PolygonOptions,

        /**
         * Rectangle draw handler options. Set to false to disable handler.
         * 
          Default value: {}
        */
        rectangle?: DrawOptions$RectangleOptions,

        /**
         * Circle draw handler options. Set to false to disable handler.
         * 
          Default value: {}
        */
        circle?: DrawOptions$CircleOptions,

        /**
         * Marker draw handler options. Set to false to disable handler.
         * 
          Default value: {}
        */
        marker?: DrawOptions$MarkerOptions
}

declare
export interface Control$EditOptions {

    /**
     * This is the FeatureGroup that stores all editable shapes.
     * THIS IS REQUIRED FOR THE EDIT TOOLBAR TO WORK

    Default value: null
    */
    featureGroup: FeatureGroup<ILayer>,

        /**
         * Edit handler options. Set to false to disable handler.
         * 
        Default value: null
        */
        edit?: DrawOptions$EditHandlerOptions,

        /**
         * Delete handler options. Set to false to disable handler.
         * 
        Default value: null
        */
        remove?: DrawOptions$DeleteHandlerOptions
}

declare
export type Control$Draw = {} & IControl


declare
export interface DrawOptions$PolylineOptions {

    /**
     * Determines if line segments can cross.
     * 
    Default value: true
    */
    allowIntersection?: boolean,

        /**
         * Configuration options for the error that displays if an intersection is detected.
         * 
        Default value: See code
        */
        drawError?: any,

        /**
         * Distance in pixels between each guide dash.
         * 
        Default value: 20
        */
        guidelineDistance?: number,

        /**
         * The options used when drawing the polyline/polygon on the map.
         * 
        Default value: See code
        */
        shapeOptions?: L$PolylineOptions,

        /**
         * Determines which measurement system (metric or imperial) is used.
         * 
        Default value: true
        */
        metric?: boolean,

        /**
         * This should be a high number to ensure that you can draw over all other layers on the map.
         * 
        Default value: 2000
        */
        zIndexOffset?: number,

        /**
         * Determines if the draw tool remains enabled after drawing a shape.
         * 
        Default value: false
        */
        repeatMode?: boolean
}

declare
export type DrawOptions$PolygonOptions = {

    /**
     * Show the area of the drawn polygon in m², ha or km².
     * The area is only approximate and become less accurate the larger the polygon is.

    Default value: false
    */
    showArea?: boolean
} & DrawOptions$PolylineOptions


declare
export interface DrawOptions$RectangleOptions {

    /**
     * The options used when drawing the rectangle on the map.
     * 
    Default value: See code
    */
    shapeOptions?: L$PathOptions,

        /**
         * Determines if the draw tool remains enabled after drawing a shape.
         * 
        Default value: false
        */
        repeatMode?: boolean
}

declare
export interface DrawOptions$CircleOptions {

    /**
     * The options used when drawing the circle on the map.
     * 
    Default value: See code
    */
    shapeOptions?: L$PathOptions,

        /**
         * Determines if the draw tool remains enabled after drawing a shape.
         * 
        Default value: false
        */
        repeatMode?: boolean
}

declare
export interface DrawOptions$MarkerOptions {

    /**
     * TThe icon displayed when drawing a marker.
     * 
    Default value: L.Icon.Default()
    */
    icon?: L$Icon,

        /**
         * This should be a high number to ensure that you can draw over all other layers on the map.
         * 
        Default value: 2000
        */
        zIndexOffset?: number,

        /**
         * Determines if the draw tool remains enabled after drawing a shape.
         * 
        Default value: false
        */
        repeatMode?: boolean
}

declare
export interface DrawOptions$EditHandlerOptions {

    /**
     * The path options for how the layers will look while in edit mode.
     * If this is set to null the editable path options will not be set.

    Default value: See code
    */
    selectedPathOptions?: L$PathOptions
}

declare
export interface DrawOptions$DeleteHandlerOptions {}

declare
export interface DrawEvents$Created {

    /**
     * Layer that was just created.
     */
    layer: ILayer,

        /**
         * The type of layer this is. One of: polyline, polygon, rectangle, circle, marker.
         */
        layerType: string
}

declare
export interface DrawEvents$Edited {

    /**
     * List of all layers just edited on the map.
     */
    layers: LayerGroup<ILayer >
}


/**
 * Triggered when layers have been removed (and saved) from the FeatureGroup.
 */
declare
export interface DrawEvents$Deleted {

    /**
     * List of all layers just removed from the map.
     */
    layers: LayerGroup<ILayer >
}

declare
export interface DrawEvents$DrawStart {

    /**
     * The type of layer this is. One of: polyline, polygon, rectangle, circle, marker
     */
    layerType: string
}

declare
export interface DrawEvents$DrawStop {

    /**
     * The type of layer this is. One of: polyline, polygon, rectangle, circle, marker
     */
    layerType: string
}

declare
export interface DrawEvents$EditStart {

    /**
     * The type of edit this is. One of: edit
     */
    handler: string
}

declare
export interface DrawEvents$EditStop {

    /**
     * The type of edit this is. One of: edit
     */
    handler: string
}

declare
export interface DrawEvents$DeleteStart {

    /**
     * The type of edit this is. One of: remove
     */
    handler: string
}

declare
export interface DrawEvents$DeleteStop {

    /**
     * The type of edit this is. One of: remove
     */
    handler: string
}