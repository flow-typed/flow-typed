// flow-typed signature: 3d0d03c289ebd868807f951156dc5ae3
// flow-typed version: <<STUB>>/squel_v^5.4.3/flow_v0.34.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'squel'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

type squel$ParameterisedQuery = {
    text: string,
    values: Array<mixed>
}

type squel$FormatterFunction<T> = (value: T) => string;

declare class squel$Select {
    function(): this;
    distinct(...fields?: Array<string>): this;
    field(name: string, alias?: string, options?: {}): this;
    fields(fields: {} | [], options?: {}): this;
    from(name: string, alias?: string): this;
    join(name: string, alias?: string, condition?: string): this;
    left_join(name: string, alias?: string, condition?: string): this;
    right_join(name: string, alias?: string, condition?: string): this;
    outer_join(name: string, alias?: string, condition?: string): this;
    cross_join(name: string, alias?: string, condition?: string): this;
    where(condition: string, ...args: Array<mixed>): this;
    order(field: string, direction?: boolean, ...args: Array<mixed>): this;
    group(field: string): this;
    having(condition: string, ...args: Array<mixed>): this;
    limit(limit: number): this;
    offset(offset: number): this;
    top(num: number): this;
    union(query: any): this;
    union_all(query: any): this;
    with(alias: string, table: any): this;
    updateOptions(options: {}): void;
    registerValueHandler<T>(type: Class<T> | string, handler: squel$FormatterFunction<T>): this;
    clone(): squel$Select;
    toString(): string;
    toParam(): squel$ParameterisedQuery;
}

declare class squel$Update {
    table(name: string, alias?: string): this;
    set(name: string, value?: mixed, options?: {}): this;
    setFields(fields: {}, options?: {}): this;
    from(name: string, alias?: string): this;
    where(condition: string, ...args: Array<mixed>): this;
    limit(limit: number): this;
    offset(offset: number): this;
    output(name: string, alias?: string): this;
    outputs(fields: {}): this;
    returning(str: string): this;
    with(alias: string, table: any): this;
    updateOptions(options: {}): void;
    registerValueHandler<T>(type: Class<T>, handler: squel$FormatterFunction<T>): this;
    clone(): squel$Select;
    toString(): string;
    toParam(): squel$ParameterisedQuery;
}

declare class squel$Delete {
    target(name: string): this;
    from(name: string, alias?: string): this;
    join(name: string, alias?: string, condition?: string): this;
    left_join(name: string, alias?: string, condition?: string): this;
    right_join(name: string, alias?: string, condition?: string): this;
    outer_join(name: string, alias?: string, condition?: string): this;
    where(condition: string, ...args: Array<mixed>): this;
    limit(limit: number): this;
    offset(offset: number): this;
    output(name: string, alias?: string): this;
    outputs(fields: {}): this;
    with(alias: string, table: any): this;
    updateOptions(options: {}): void;
    registerValueHandler<T>(type: Class<T> | string, handler: squel$FormatterFunction<T>): this;
    clone(): squel$Select;
    toString(): string;
    toParam(): squel$ParameterisedQuery;
}

declare class squel$Insert {
    into(name: string): this;
    set(name: string, value: mixed, options?: {}): this;
    setFields(fields: {}, options?: {}): this;
    setFieldsRows(fields: Array<{}>, options?: {}): this;
    fromQuery(columns: Array<string>, selectQry: squel$Select): this;
    onDupUpdate(name: string, value: mixed, options: {}): this;
    onConflict(field: string, fieldsToSet?: {}): this;
    output(name: string | Array<string>): this;
    returning(str: string): this;
    with(alias: string, table: any): this;
    updateOptions(options: {}): void;
    registerValueHandler<T>(type: Class<T> | string, handler: squel$FormatterFunction<T>): this;
    clone(): squel$Select;
    toString(): string;
    toParam(): squel$ParameterisedQuery;
}

declare class squel$Squel {
    static select(): squel$Select;
    select(): squel$Select;
    static update(): squel$Update;
    update(): squel$Update;
    static delete(): squel$Delete;
    delete(): squel$Delete;
    static insert(): squel$Insert;
    insert(): squel$Insert;
    static useFlavour(flavour: string): this;
    registerValueHandler<T>(type: Class<T> | string, handler: squel$FormatterFunction<T>): this;
    static registerValueHandler<T>(type: Class<T> | string, handler: squel$FormatterFunction<T>): this;
}

declare module 'squel' {
  declare module.exports: Class<squel$Squel>;
}
