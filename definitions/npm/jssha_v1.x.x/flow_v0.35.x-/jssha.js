// @flow
/**
 * Flowtype definitions for jssha
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface jsSHA$EncodingOptions {
    encoding?: string
}

declare export type jsSHA$Options = {
    numRounds?: number
} & jsSHA$EncodingOptions


declare export interface jsSHA$OutputFormatOptions {
    outputUpper?: boolean,
        b64Pad?: string
}

declare export interface jsSHA$jsSHA {

    /**
     * jsSHA is the workhorse of the library.  Instantiate it with the string to
     * be hashed as the parameteroptions Optional values
     * @param  The desired SHA variant (SHA-1, SHA-224, SHA-256,
    SHA-384, or SHA-512)
     * @param  The format of srcString: HEX, TEXT, B64, or BYTES
    */
    new(variant: string, inputFormat: string, options?: jsSHA$Options): jsSHA$jsSHA,

    /**
     * Sets the HMAC key for an eventual getHMAC call.  Must be called
     * immediately after jsSHA object instantiation
     * @param  The key used to calculate the HMAC
     * @param  The format of key, HEX, TEXT, B64, or BYTES
     * @param  Associative array
    of input format options
    */
    setHMACKey(key: string, inputFormat: string, encodingOpts?: jsSHA$EncodingOptions): void,

        /**
         * Takes strString and hashes as many blocks as possible.  Stores the
         * rest for either a future update or getHash call.
         * @param  The string to be hashed
         */
        update(srcString: string): void,

        /**
         * Returns the desired SHA hash of the string specified at instantiation
         * using the specified parametersoutputFormatOpts Hash list of output formatting options
         * @param  The desired output formatting (B64, HEX, or BYTES)
         * @return  The string representation of the hash in the format
        specified
        */
        getHash(format: string, outputFormatOpts?: jsSHA$OutputFormatOptions): string,

        /**
         * Returns the the HMAC in the specified format using the key given by
         * a previous setHMACKey call.outputFormatOpts associative array of output formatting options
         * @param  The desired output formatting
        (B64, HEX, or BYTES)
         * @return  The string representation of the hash in the format
        specified
        */
        getHMAC(format: string, outputFormatOpts?: jsSHA$OutputFormatOptions): string
}
declare var jsSHA: jsSHA$jsSHA;
declare module 'jssha' {
    declare module.exports: typeof jsSHA
}