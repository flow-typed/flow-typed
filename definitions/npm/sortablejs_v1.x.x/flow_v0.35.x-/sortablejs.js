/**
 * Flowtype definitions for sortablejs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Sortablejs$SortableOptions {
    group?: any,
        sort?: boolean,
        delay?: number,
        disabled?: boolean,
        store?: {
            get: (sortable: Sortablejs$Sortable) => any[],
            set: (sortable: Sortablejs$Sortable) => any
        },
        animation?: number,
        handle?: string,
        filter?: any,
        draggable?: string,
        ghostClass?: string,
        chosenClass?: string,
        dataIdAttr?: string,
        forceFallback?: boolean,
        fallbackClass?: string,
        fallbackOnBody?: boolean,
        scroll?: boolean,
        scrollSensitivity?: number,
        scrollSpeed?: number,
        setData?: (dataTransfer: any, draggedElement: any) => any,
        onStart?: (event: any) => any,
        onEnd?: (event: any) => any,
        onAdd?: (event: any) => any,
        onUpdate?: (event: any) => any,
        onSort?: (event: any) => any,
        onRemove?: (event: any) => any,
        onFilter?: (event: any) => any,
        onMove?: (event: any) => boolean
}

declare interface Sortablejs$SortableUtils {

    /**
     * Attach an event handler function
     * @param  an HTMLElement.
     * @param  an Event context.
     * @param  
     */
    on(element: any, event: string, fn: (event: any) => any): void,

        /**
         * Remove an event handler function
         * @param  an HTMLElement.
         * @param  an Event context.
         * @param  a callback.
         */
        off(element: any, event: string, fn: (event: any) => any): void,

        /**
         * Get the values of all the CSS properties.
         * @param  an HTMLElement.
         * @returns  
         */
        css(element: any): any,

        /**
         * Get the value of style properties.
         * @param  an HTMLElement.
         * @param  a property key.
         * @returns  
         */
        css(element: any, prop: string): any,

        /**
         * Set one CSS property.
         * @param  an HTMLElement.
         * @param  a property key.
         * @param  a property value.
         */
        css(element: any, prop: string, value: string): void,

        /**
         * Set CSS properties.
         * @param  an HTMLElement.
         * @param  a properties object.
         */
        css(element: any, props: any): void,

        /**
         * Get elements by tag name.
         * @param  an HTMLElement.
         * @param  A tag name.
         * @param  An iterator.
         * @returns  
         */
        find(context: any, tagName: string, iterator?: (value: any) => any): any[],

        /**
         * Takes a function and returns a new one that will always have a particular context.
         * @param  an HTMLElement.
         * @param  a function.
         * @returns  
         */
        bind(context: any, fn: () => any): () => any,

        /**
         * Check the current matched set of elements against a selector.
         * @param  an HTMLElement.
         * @param  an element selector.
         * @returns  
         */
        is(element: any, selector: string): boolean,

        /**
         * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
         * @param  an HTMLElement.
         * @param  an element seletor.
         * @param  a specific element's context.
         * @returns  
         */
        closest(element: any, selector: string, context?: any): any,

        /**
         * Add or remove one classes from each element
         * @param  an HTMLElement.
         * @param  a class name.
         * @param  a class's state.
         */
        toggleClass(element: any, name: string, state: boolean): void
}

declare class DOMRect {
    bottom: number;
    height: number;
    left: number;
    right: number;
    top: number;
    width: number;
    x: number;
    y: number
}

declare class Sortable {
    options: Sortablejs$SortableOptions;
    el: any;

    /**
     * Sortable's main constructor.
     * @param  Any variety of HTMLElement.
     * @param  Sortable options object.
     */
    constructor(element: any, options: Sortablejs$SortableOptions): this;
    active: Sortablejs$Sortable;
    utils: Sortablejs$SortableUtils;

    /**
     * Creation of new instances.
     * @param  Any variety of HTMLElement.
     * @param  Sortable options object.
     * @returns  
     */
    create(element: any, options: Sortablejs$SortableOptions): Sortablejs$Sortable;

    /**
     * Options getter/setter
     * @param  a SortableOptions property.
     * @param  a Value.
     * @returns  
     */
    option(name: string, value: any): any;
    option(name: string): any;

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param  an HTMLElement or selector string.
     * @returns  
     */
    closest(element: any): any;

    /**
     * Sorts the elements according to the array.
     * @param  an array of strings to sort.
     */
    sort(order: string[]): void;

    /**
     * Saving and restoring of the sort.
     */
    save(): void;

    /**
     * Removes the sortable functionality completely.
     */
    destroy(): void;

    /**
     * Serializes the sortable's item data-id's (dataIdAttr option) into an array of string.
     * @returns  
     */
    toArray(): string[]
}
declare module 'sortablejs' {
    declare module.exports: typeof Sortable
}