/**
 * Flowtype definitions for request-promise
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'request-promise' {
    declare type requestPromise$RequestPromise = {
        then<TResult>(
            onfulfilled?: (value: any) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>,
        then<TResult>(
            onfulfilled?: (value: any) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => void): Promise<TResult>,
        catch (onrejected?: (reason: any) => any | PromiseLike<any>): Promise<any>,
        catch (onrejected?: (reason: any) => void): Promise<any>,
        catch (
            type: errors.RequestErrorConstructor,
            onrejected?: (reason: errors.RequestError) => void): Promise<any>,
        catch (
            type: errors.StatusCodeErrorConstructor,
            onrejected?: (reason: errors.StatusCodeError) => void): Promise<any>,
        catch (
            type: errors.TransformErrorConstructor,
            onrejected?: (reason: errors.TransformError) => void): Promise<any>,
        finally<TResult>(handler: () => PromiseLike<TResult>): Promise<any>,
        finally<TResult>(handler: () => TResult): Promise<any>,
        promise(): Promise<any>,
        cancel(): void
    }

    declare type requestPromise$RequestPromiseOptions = {
        simple?: boolean,
        transform?: (
            body: any,
            response: http.IncomingMessage,
            resolveWithFullResponse?: boolean) => any,
        transform2xxOnly?: boolean,
        resolveWithFullResponse?: boolean
    }

    declare export type requestPromise$OptionsWithUri = request.UriOptions & requestPromise$RequestPromiseOptions;

    declare export type requestPromise$OptionsWithUrl = request.UrlOptions & requestPromise$RequestPromiseOptions;

    declare export type requestPromise$Options = requestPromise$OptionsWithUri | requestPromise$OptionsWithUrl;
    declare var requestPromise: request.RequestAPI<requestPromise$RequestPromise, requestPromise$RequestPromiseOptions, request.RequiredUriUrl>;
    declare module.exports: typeof requestPromise
}
declare module 'request-promise/errors' {
    declare export type RequestError = {
        cause: any,
        error: any,
        options: rp.Options,
        response: http.IncomingMessage
    } & Error

    declare export interface RequestErrorConstructor {
        new(cause: any, options: rp.Options, response: http.IncomingMessage): RequestError,
        (cause: any, options: rp.Options, response: http.IncomingMessage): RequestError,
        prototype: RequestError
    }
    declare export var RequestError: RequestErrorConstructor;
    declare export type StatusCodeError = {
        statusCode: number,
        error: any,
        options: rp.Options,
        response: http.IncomingMessage
    } & Error

    declare export type StatusCodeErrorConstructor = {
        new(
            statusCode: number,
            body: any,
            options: rp.Options,
            response: http.IncomingMessage): StatusCodeError,
        (statusCode: number, body: any, options: rp.Options, response: http.IncomingMessage): StatusCodeError,
        prototype: StatusCodeError
    } & Error

    declare export var StatusCodeError: StatusCodeErrorConstructor;
    declare export type TransformError = {
        cause: any,
        error: any,
        options: rp.Options,
        response: http.IncomingMessage
    } & Error

    declare export type TransformErrorConstructor = {
        new(
            cause: any,
            options: rp.Options,
            response: http.IncomingMessage): TransformError,
        (cause: any, options: rp.Options, response: http.IncomingMessage): TransformError,
        prototype: TransformError
    } & Error

    declare export var TransformError: TransformErrorConstructor;
}