/**
 * Flowtype definitions for sinon
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Event {}
declare interface Document {}
declare interface Sinon$SinonSpyCallApi {
    thisValue: any,
        args: any[],
        exception: any,
        returnValue: any,
        calledOn(obj: any): boolean,
        calledWith(...args: any[]): boolean,
        calledWithExactly(...args: any[]): boolean,
        calledWithMatch(...args: any[]): boolean,
        notCalledWith(...args: any[]): boolean,
        notCalledWithMatch(...args: any[]): boolean,
        returned(value: any): boolean,
        threw(): boolean,
        threw(type: string): boolean,
        threw(obj: any): boolean,
        callArg(pos: number): void,
        callArgOn(pos: number, obj: any, ...args: any[]): void,
        callArgWith(pos: number, ...args: any[]): void,
        callArgOnWith(pos: number, obj: any, ...args: any[]): void,
        yield(...args: any[]): void,
        yieldOn(obj: any, ...args: any[]): void,
        yieldTo(property: string, ...args: any[]): void,
        yieldToOn(property: string, obj: any, ...args: any[]): void
}

declare type Sinon$SinonSpyCall = {
    calledBefore(call: Sinon$SinonSpyCall): boolean,
    calledAfter(call: Sinon$SinonSpyCall): boolean,
    calledWithNew(call: Sinon$SinonSpyCall): boolean
} & Sinon$SinonSpyCallApi


declare type Sinon$SinonSpy = {
    callCount: number,
    called: boolean,
    notCalled: boolean,
    calledOnce: boolean,
    calledTwice: boolean,
    calledThrice: boolean,
    firstCall: Sinon$SinonSpyCall,
    secondCall: Sinon$SinonSpyCall,
    thirdCall: Sinon$SinonSpyCall,
    lastCall: Sinon$SinonSpyCall,
    thisValues: any[],
    args: any[][],
    exceptions: any[],
    returnValues: any[],
    (...args: any[]): any,
    calledBefore(anotherSpy: Sinon$SinonSpy): boolean,
    calledAfter(anotherSpy: Sinon$SinonSpy): boolean,
    calledWithNew(): boolean,
    withArgs(...args: any[]): Sinon$SinonSpy,
    alwaysCalledOn(obj: any): boolean,
    alwaysCalledWith(...args: any[]): boolean,
    alwaysCalledWithExactly(...args: any[]): boolean,
    alwaysCalledWithMatch(...args: any[]): boolean,
    neverCalledWith(...args: any[]): boolean,
    neverCalledWithMatch(...args: any[]): boolean,
    alwaysThrew(): boolean,
    alwaysThrew(type: string): boolean,
    alwaysThrew(obj: any): boolean,
    alwaysReturned(): boolean,
    invokeCallback(...args: any[]): void,
    getCall(n: number): Sinon$SinonSpyCall,
    reset(): void,
    printf(format: string, ...args: any[]): string,
    restore(): void
} & Sinon$SinonSpyCallApi


declare interface Sinon$SinonSpyStatic {
    (): Sinon$SinonSpy,
    (func: any): Sinon$SinonSpy,
    (obj: any, method: string): Sinon$SinonSpy
}

declare interface Sinon$SinonStatic {
    spy: Sinon$SinonSpyStatic
}

declare type Sinon$SinonStub = {
    resetBehavior(): void,
    returns(obj: any): Sinon$SinonStub,
    returnsArg(index: number): Sinon$SinonStub,
    returnsThis(): Sinon$SinonStub,
    throws(type?: string): Sinon$SinonStub,
    throws(obj: any): Sinon$SinonStub,
    callsArg(index: number): Sinon$SinonStub,
    callsArgOn(index: number, context: any): Sinon$SinonStub,
    callsArgWith(index: number, ...args: any[]): Sinon$SinonStub,
    callsArgOnWith(index: number, context: any, ...args: any[]): Sinon$SinonStub,
    callsArgAsync(index: number): Sinon$SinonStub,
    callsArgOnAsync(index: number, context: any): Sinon$SinonStub,
    callsArgWithAsync(index: number, ...args: any[]): Sinon$SinonStub,
    callsArgOnWithAsync(index: number, context: any, ...args: any[]): Sinon$SinonStub,
    onCall(n: number): Sinon$SinonStub,
    onFirstCall(): Sinon$SinonStub,
    onSecondCall(): Sinon$SinonStub,
    onThirdCall(): Sinon$SinonStub,
    yields(...args: any[]): Sinon$SinonStub,
    yieldsOn(context: any, ...args: any[]): Sinon$SinonStub,
    yieldsTo(property: string, ...args: any[]): Sinon$SinonStub,
    yieldsToOn(property: string, context: any, ...args: any[]): Sinon$SinonStub,
    yieldsAsync(...args: any[]): Sinon$SinonStub,
    yieldsOnAsync(context: any, ...args: any[]): Sinon$SinonStub,
    yieldsToAsync(property: string, ...args: any[]): Sinon$SinonStub,
    yieldsToOnAsync(property: string, context: any, ...args: any[]): Sinon$SinonStub,
    withArgs(...args: any[]): Sinon$SinonStub
} & Sinon$SinonSpy


declare interface Sinon$SinonStubStatic {
    (): Sinon$SinonStub,
    (obj: any): Sinon$SinonStub,
    (obj: any, method: string): Sinon$SinonStub,
    (obj: any, method: string, func: any): Sinon$SinonStub
}

declare type Sinon$SinonExpectation = {
    atLeast(n: number): Sinon$SinonExpectation,
    atMost(n: number): Sinon$SinonExpectation,
    never(): Sinon$SinonExpectation,
    once(): Sinon$SinonExpectation,
    twice(): Sinon$SinonExpectation,
    thrice(): Sinon$SinonExpectation,
    exactly(n: number): Sinon$SinonExpectation,
    withArgs(...args: any[]): Sinon$SinonExpectation,
    withExactArgs(...args: any[]): Sinon$SinonExpectation,
    on(obj: any): Sinon$SinonExpectation,
    verify(): Sinon$SinonExpectation,
    restore(): void
} & Sinon$SinonStub


declare interface Sinon$SinonExpectationStatic {
    create(methodName?: string): Sinon$SinonExpectation
}

declare interface Sinon$SinonMock {
    expects(method: string): Sinon$SinonExpectation,
        restore(): void,
        verify(): void
}

declare interface Sinon$SinonMockStatic {
    (): Sinon$SinonExpectation,
    (obj: any): Sinon$SinonMock
}

declare interface Sinon$SinonFakeTimers {
    now: number,
        create(now: number): Sinon$SinonFakeTimers,
        setTimeout(callback: (...args: any[]) => void, timeout: number, ...args: any[]): number,
        clearTimeout(id: number): void,
        setInterval(callback: (...args: any[]) => void, timeout: number, ...args: any[]): number,
        clearInterval(id: number): void,
        tick(ms: number): number,
        reset(): void,
        Date(): Date,
        Date(year: number): Date,
        Date(year: number, month: number): Date,
        Date(year: number, month: number, day: number): Date,
        Date(year: number, month: number, day: number, hour: number): Date,
        Date(year: number, month: number, day: number, hour: number, minute: number): Date,
        Date(
            year: number,
            month: number,
            day: number,
            hour: number,
            minute: number,
            second: number): Date,
        Date(
            year: number,
            month: number,
            day: number,
            hour: number,
            minute: number,
            second: number,
            ms: number): Date,
        restore(): void,

        /**
         * Simulate the user changing the system clock while your program is running. It changes the 'now' timestamp
         * without affecting timers, intervals or immediates.
         * @param now The new 'now' in unix milliseconds
         */
        setSystemTime(now: number): void,

        /**
         * Simulate the user changing the system clock while your program is running. It changes the 'now' timestamp
         * without affecting timers, intervals or immediates.
         * @param now The new 'now' as a JavaScript Date
         */
        setSystemTime(date: Date): void
}

declare interface Sinon$SinonFakeTimersStatic {
    (): Sinon$SinonFakeTimers,
    (...timers: string[]): Sinon$SinonFakeTimers,
    (now: number, ...timers: string[]): Sinon$SinonFakeTimers
}

declare interface Sinon$SinonFakeUploadProgress {
    eventListeners: {
            progress: any[],
            load: any[],
            abort: any[],
            error: any[]
        },
        addEventListener(event: string, listener: (e: Event) => any): void,
        removeEventListener(event: string, listener: (e: Event) => any): void,
        dispatchEvent(event: Event): void
}

declare interface Sinon$SinonFakeXMLHttpRequest {
    onCreate: (xhr: Sinon$SinonFakeXMLHttpRequest) => void,
        url: string,
        method: string,
        requestHeaders: any,
        requestBody: string,
        status: number,
        statusText: string,
        async: boolean,
        username: string,
        password: string,
        withCredentials: boolean,
        upload: Sinon$SinonFakeUploadProgress,
        responseXML: Document,
        getResponseHeader(header: string): string,
        getAllResponseHeaders(): any,
        restore(): void,
        useFilters: boolean,
        addFilter(
            filter: (
                method: string,
                url: string,
                async: boolean,
                username: string,
                password: string) => boolean): void,
        setResponseHeaders(headers: any): void,
        setResponseBody(body: string): void,
        respond(status: number, headers: any, body: string): void,
        autoRespond(ms: number): void
}

declare interface Sinon$SinonFakeXMLHttpRequestStatic {
    (): Sinon$SinonFakeXMLHttpRequest
}

declare interface Sinon$SinonFakeServer {
    autoRespond: boolean,
        autoRespondAfter: number,
        fakeHTTPMethods: boolean,
        getHTTPMethod: (request: Sinon$SinonFakeXMLHttpRequest) => string,
        requests: Sinon$SinonFakeXMLHttpRequest[],
        respondImmediately: boolean,
        respondWith(body: string): void,
        respondWith(response: any[]): void,
        respondWith(fn: (xhr: Sinon$SinonFakeXMLHttpRequest) => void): void,
        respondWith(url: string, body: string): void,
        respondWith(url: string, response: any[]): void,
        respondWith(url: string, fn: (xhr: Sinon$SinonFakeXMLHttpRequest) => void): void,
        respondWith(method: string, url: string, body: string): void,
        respondWith(method: string, url: string, response: any[]): void,
        respondWith(
            method: string,
            url: string,
            fn: (xhr: Sinon$SinonFakeXMLHttpRequest) => void): void,
        respondWith(url: RegExp, body: string): void,
        respondWith(url: RegExp, response: any[]): void,
        respondWith(url: RegExp, fn: (xhr: Sinon$SinonFakeXMLHttpRequest) => void): void,
        respondWith(method: string, url: RegExp, body: string): void,
        respondWith(method: string, url: RegExp, response: any[]): void,
        respondWith(
            method: string,
            url: RegExp,
            fn: (xhr: Sinon$SinonFakeXMLHttpRequest) => void): void,
        respond(): void,
        restore(): void
}

declare interface Sinon$SinonFakeServerStatic {
    create(): Sinon$SinonFakeServer
}

declare interface Sinon$SinonExposeOptions {
    prefix?: string,
        includeFail?: boolean
}

declare interface Sinon$SinonAssert {
    failException: string,
        fail: (message?: string) => void,
        pass: (assertion: any) => void,
        notCalled(spy: Sinon$SinonSpy): void,
        called(spy: Sinon$SinonSpy): void,
        calledOnce(spy: Sinon$SinonSpy): void,
        calledTwice(spy: Sinon$SinonSpy): void,
        calledThrice(spy: Sinon$SinonSpy): void,
        callCount(spy: Sinon$SinonSpy, count: number): void,
        callOrder(...spies: Sinon$SinonSpy[]): void,
        calledOn(spy: Sinon$SinonSpy, obj: any): void,
        alwaysCalledOn(spy: Sinon$SinonSpy, obj: any): void,
        calledWith(spy: Sinon$SinonSpy, ...args: any[]): void,
        alwaysCalledWith(spy: Sinon$SinonSpy, ...args: any[]): void,
        neverCalledWith(spy: Sinon$SinonSpy, ...args: any[]): void,
        calledWithExactly(spy: Sinon$SinonSpy, ...args: any[]): void,
        alwaysCalledWithExactly(spy: Sinon$SinonSpy, ...args: any[]): void,
        calledWithMatch(spy: Sinon$SinonSpy, ...args: any[]): void,
        alwaysCalledWithMatch(spy: Sinon$SinonSpy, ...args: any[]): void,
        neverCalledWithMatch(spy: Sinon$SinonSpy, ...args: any[]): void,
        threw(spy: Sinon$SinonSpy): void,
        threw(spy: Sinon$SinonSpy, exception: string): void,
        threw(spy: Sinon$SinonSpy, exception: any): void,
        alwaysThrew(spy: Sinon$SinonSpy): void,
        alwaysThrew(spy: Sinon$SinonSpy, exception: string): void,
        alwaysThrew(spy: Sinon$SinonSpy, exception: any): void,
        expose(obj: any, options?: Sinon$SinonExposeOptions): void
}

declare interface Sinon$SinonMatcher {
    and(expr: Sinon$SinonMatcher): Sinon$SinonMatcher,
        or(expr: Sinon$SinonMatcher): Sinon$SinonMatcher
}

declare interface Sinon$SinonMatch {
    (value: number): Sinon$SinonMatcher,
    (value: string): Sinon$SinonMatcher,
    (expr: RegExp): Sinon$SinonMatcher,
    (obj: any): Sinon$SinonMatcher,
    (callback: (value: any) => boolean): Sinon$SinonMatcher,
    any: Sinon$SinonMatcher,
        defined: Sinon$SinonMatcher,
        truthy: Sinon$SinonMatcher,
        falsy: Sinon$SinonMatcher,
        bool: Sinon$SinonMatcher,
        number: Sinon$SinonMatcher,
        string: Sinon$SinonMatcher,
        object: Sinon$SinonMatcher,
        func: Sinon$SinonMatcher,
        array: Sinon$SinonMatcher,
        regexp: Sinon$SinonMatcher,
        date: Sinon$SinonMatcher,
        same(obj: any): Sinon$SinonMatcher,
        typeOf(type: string): Sinon$SinonMatcher,
        instanceOf(type: any): Sinon$SinonMatcher,
        has(property: string, expect?: any): Sinon$SinonMatcher,
        hasOwn(property: string, expect?: any): Sinon$SinonMatcher
}

declare interface Sinon$SinonSandboxConfig {
    injectInto?: any,
        properties?: string[],
        useFakeTimers?: any,
        useFakeServer?: any
}

declare interface Sinon$SinonSandbox {
    clock: Sinon$SinonFakeTimers,
        requests: Sinon$SinonFakeXMLHttpRequest,
        server: Sinon$SinonFakeServer,
        spy: Sinon$SinonSpyStatic,
        stub: Sinon$SinonStubStatic,
        mock: Sinon$SinonMockStatic,
        useFakeTimers: Sinon$SinonFakeTimersStatic,
        useFakeXMLHttpRequest: Sinon$SinonFakeXMLHttpRequestStatic,
        useFakeServer(): Sinon$SinonFakeServer,
        restore(): void
}

declare interface Sinon$SinonSandboxStatic {
    create(): Sinon$SinonSandbox,
        create(config: Sinon$SinonSandboxConfig): Sinon$SinonSandbox
}

declare interface Sinon$SinonTestConfig {
    injectIntoThis?: boolean,
        injectInto?: any,
        properties?: string[],
        useFakeTimers?: boolean,
        useFakeServer?: boolean
}

declare type Sinon$SinonTestWrapper = {
    (...args: any[]): any
} & Sinon$SinonSandbox
declare var sinon: Sinon$SinonStatic;
declare module 'sinon' {
    declare module.exports: typeof sinon
}