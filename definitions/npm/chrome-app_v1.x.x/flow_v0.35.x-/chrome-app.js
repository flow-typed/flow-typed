// @flow
/**
 * Flowtype definitions for chrome-app
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'usb' {
    declare type Direction = "in" | "out";
    declare interface Device {
        device: number,
            vendorId: number,
            productId: number,
            productName: string,
            manufacturerName: string,
            serialNumber: string
    }
    declare interface ConnectionHandle {
        handle: number,
            vendorId: number,
            productId: number
    }
    declare interface EndpointDescriptor {
        address: number,
            type: "control" | "interrupt" | "isochronous" | "bulk",
            direction: Direction,
            maximumPacketSize: number,
            synchronization?: "asynchronous" | "adaptive" | "synchronous",
            usage?: "data" | "feedback" | "explicitFeedback",
            pollingInterval?: number,
            extra_data: ArrayBuffer
    }
    declare interface InterfaceDescriptor {
        interfaceNumber: number,
            alternateSetting: number,
            interfaceClass: number,
            interfaceSubclass: number,
            interfaceProtocol: number,
            description?: string,
            endpoints: EndpointDescriptor[],
            extra_data: ArrayBuffer
    }
    declare interface ConfigDescriptor {
        active: boolean,
            configurationValue: number,
            description?: string,
            selfPowered: boolean,
            remoteWakeup: boolean,
            maxPower: number,
            interfaces: InterfaceDescriptor[],
            extra_data: ArrayBuffer
    }
    declare interface GenericTransferInfo {
        direction: Direction,
            endpoint: number,
            length?: number,
            data?: ArrayBuffer,
            timeout?: number
    }
    declare interface TransferResultInfo {
        resultCode: number,
            data?: ArrayBuffer
    }
    declare interface DeviceFilter {
        vendorId?: number,
            productId?: number,
            interfaceClass?: number,
            interfaceSubclass?: number,
            interfaceProtocol?: number
    }
    declare interface TransferInfo {
        direction: Direction,
            recipient: "device" | "interface" | "endpoint" | "other",
            requestType: "standard" | "class" | "vendor" | "reserved",
            request: number,
            value: number,
            index: number,
            length?: number,
            data?: ArrayBuffer,
            timeout?: number
    }
    declare type DeviceEvent = {}
    declare     export var onDeviceAdded: DeviceEvent;
    declare     export var onDeviceRemoved: DeviceEvent;
    declare     export function getDevices(
        options: {
            vendorId?: number,
            productId?: number,
            filters?: DeviceFilter[]
        },
        callback: (devices: Device[]) => void): void
    declare     export function getUserSelectedDevices(
        options: {
            multiple?: boolean,
            filters?: DeviceFilter[]
        },
        callback: (devices: Device[]) => void): void
    declare     export function getConfigurations(device: Device, callback: (configs: ConfigDescriptor[]) => void): void
    declare     export function requestAccess(
        device: Device,
        interfaceId: number,
        callback: (success: boolean) => void): void
    declare     export function openDevice(device: Device, callback: (handle: ConnectionHandle) => void): void
    declare     export function findDevices(
        options: {
            vendorId: number,
            productId: number,
            interfaceId?: number
        },
        callback: (handles: ConnectionHandle[]) => void): void
    declare     export function closeDevice(handle: ConnectionHandle, callback?: () => void): void
    declare     export function setConfiguration(
        handle: ConnectionHandle,
        configurationValue: number,
        callback: () => void): void
    declare     export function getConfiguration(handle: ConnectionHandle, callback: (config: ConfigDescriptor) => void): void
    declare     export function listInterfaces(
        handle: ConnectionHandle,
        callback: (descriptors: InterfaceDescriptor[]) => void): void
    declare     export function claimInterface(handle: ConnectionHandle, interfaceNumber: number, callback: () => void): void
    declare     export function releaseInterface(handle: ConnectionHandle, interfaceNumber: number, callback: () => void): void
    declare     export function setInterfaceAlternateSetting(
        handle: ConnectionHandle,
        interfaceNumber: number,
        alternateSetting: number,
        callback: () => void): void
    declare     export function controlTransfer(
        handle: ConnectionHandle,
        transferInfo: TransferInfo,
        callback: (info: TransferResultInfo) => void): void
    declare     export function bulkTransfer(
        handle: ConnectionHandle,
        transferInfo: GenericTransferInfo,
        callback: (info: TransferResultInfo) => void): void
    declare     export function interruptTransfer(
        handle: ConnectionHandle,
        transferInfo: GenericTransferInfo,
        callback: (info: TransferResultInfo) => void): void
    declare     export function isochronousTransfer(
        handle: ConnectionHandle,
        transferInfo: {
            transferInfo: GenericTransferInfo,
            packets: number,
            packetLength: number
        },
        callback: (info: TransferResultInfo) => void): void
    declare     export function resetDevice(handle: ConnectionHandle, callback: (success: boolean) => void): void
}