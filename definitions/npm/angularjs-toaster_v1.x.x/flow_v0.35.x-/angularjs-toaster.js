// @flow
/**
 * Flowtype definitions for angularjs-toaster
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface ngtoaster$IToasterService {
    pop(params: ngtoaster$IPopParams): void,

        /**
         * 
         * @param  Type of toaster  -- 'error', 'info', 'wait', 'success', and 'warning'
         */
        pop(
            type?: string,
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number,
            showCloseButton?: boolean): void,
        error(params: ngtoaster$IPopParams): void,
        error(
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number): void,
        info(params: ngtoaster$IPopParams): void,
        info(
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number): void,
        wait(params: ngtoaster$IPopParams): void,
        wait(
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number): void,
        success(params: ngtoaster$IPopParams): void,
        success(
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number): void,
        warning(params: ngtoaster$IPopParams): void,
        warning(
            title?: string,
            body?: string,
            timeout?: number,
            bodyOutputType?: string,
            clickHandler?: EventListener,
            toasterId?: number): void,
        clear(): void,
        toast: ngtoaster$IToast
}

declare interface ngtoaster$IToasterEventRegistry {
    setup(): void,
        subscribeToNewToastEvent(onNewToast: ngtoaster$IToastEventListener): void,
        subscribeToClearToastsEvent(onClearToasts: ngtoaster$IToastEventListener): void,
        unsubscribeToNewToastEvent(onNewToast: ngtoaster$IToastEventListener): void,
        unsubscribeToClearToastsEvent(onClearToasts: ngtoaster$IToastEventListener): void
}

declare type ngtoaster$IPopParams = {
    toasterId?: number
} & ngtoaster$IToast


declare interface ngtoaster$IToastEventListener {
    (event: Event, toasterId: number): void
}

declare interface ngtoaster$IToast {

    /**
     * Acceptable types are:
     * 'error', 'info', 'wait', 'success', and 'warning'
     */
    type?: string,
        title?: string,
        body?: string,
        timeout?: number,
        bodyOutputType?: string,
        clickHandler?: EventListener,
        showCloseButton?: boolean
}

declare interface ngtoaster$IToasterConfig {

    /**
     * limits max number of toasts
     */
    limit?: number,
        tap - to - dismiss?: boolean,
        close - button?: boolean,
        newest - on - top?: boolean,
        time - out?: number,
        icon - classes?: ngtoaster$IIconClasses,

        /**
         * Options include:
         * '', 'trustedHtml', 'template', 'templateWithData'
         */
        body - output - type?: string,
        body - template?: string,
        icon - class?: string,

        /**
         * Options include:
         * 'toast-top-full-width', 'toast-bottom-full-width', 'toast-center',
        'toast-top-left', 'toast-top-center', 'toast-top-rigt',
        'toast-bottom-left', 'toast-bottom-center', 'toast-bottom-rigt',
        */
        position - class?: string,
        title - class?: string,
        message - class?: string,
        prevent - duplicates?: boolean,

        /**
         * stop timeout on mouseover and restart timer on mouseout
         */
        mouseover - timer - stop?: boolean
}

declare interface ngtoaster$IIconClasses {
    error: string,
        info: string,
        wait: string,
        success: string,
        warning: string
}
declare module 'ngtoaster' {
    declare module.exports: typeof ngtoaster
}