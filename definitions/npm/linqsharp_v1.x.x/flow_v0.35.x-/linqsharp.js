// @flow
/**
 * Flowtype definitions for linqsharp
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'linqsharp' {

    declare     var npm$namespace$LinqSharp: {
            GetHashCode: typeof LinqSharp$GetHashCode,
            StringifyNonCircular: typeof LinqSharp$StringifyNonCircular,
        }
        /**
         * Defines methods to support the comparison of objects for equality.
         * 
        {T} The type of objects to compare.
        */
    declare     export interface LinqSharp$IEqualityComparer<T>{
        Equals(x: T, y: T): boolean,
        GetHashCode(obj: T): number
    }


    /**
     * Represents a collection of objects that have a common key.
     * 
    {TKey} The type of the key.
    {T} The type of the values.
    */
    declare     export interface LinqSharp$IGrouping<TKey, T>{
        Key: TKey,
        Elements: T[]
    }


    /**
     * Gets the HashCode of the object.
     * @param e Object to compute hash.
     * @returns  A computed HashCode for the object.
     */
    declare     export function LinqSharp$GetHashCode(e: any): any


    /**
     * Transforms a object into a string replacing circular
     * references by reference tokens.
     * @param obj Object to convert to string.
     * @returns  String representation of the object.
     */
    declare     export function LinqSharp$StringifyNonCircular(obj: any): string
    declare module.exports: typeof Linq
}