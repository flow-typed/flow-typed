// @flow
/**
 * Flowtype definitions for bluebird
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'bluebird' {
    declare module.exports: typeof Bluebird

    declare     var npm$namespace$Bluebird: {
        getNewLibraryCopy: typeof Bluebird$getNewLibraryCopy,
        noConflict: typeof Bluebird$noConflict,
        setScheduler: typeof Bluebird$setScheduler,
    }
    declare     export interface Bluebird$ConcurrencyOption {
        concurrency: number
    }

    declare     export interface Bluebird$SpreadOption {
        spread: boolean
    }

    declare     export interface Bluebird$FromNodeOptions {
        multiArgs?: boolean
    }

    declare     export interface Bluebird$PromisifyOptions {
        context?: any,
            multiArgs?: boolean
    }

    declare     export type Bluebird$PromisifyAllOptions = {
        suffix?: string,
        filter?: (
            name: string,
            func: Function,
            target?: any,
            passesDefaultFilter?: boolean) => boolean,
        promisifier?: (originalMethod: Function) => () => Bluebird$Thenable<any >
    } & Bluebird$PromisifyOptions



    /**
     * Represents an error is an explicit promise rejection as opposed to a thrown error.
     *   For example, if an error is errbacked by a callback API promisified through undefined or undefined
      and is not a typed error, it will be converted to a `OperationalError` which has the original error in
      the `.cause` property.

    `OperationalError`s are caught in `.error` handlers.
    */
    declare     export class OperationalError mixins Error {}


    /**
     * Signals that an operation has timed out. Used as a custom cancellation reason in `.timeout`.
     */
    declare     export class TimeoutError mixins Error {}


    /**
     * Signals that an operation has been aborted or cancelled. The default reason used by `.cancel`.
     */
    declare     export class CancellationError mixins Error {}


    /**
     * A collection of errors. `AggregateError` is an array-like object, with numeric indices and a `.length` property.
     *   It supports all generic array methods such as `.forEach` directly.

    `AggregateError`s are caught in `.error` handlers, even if the contained errors are not operational.

    `Promise.some` and `Promise.any` use `AggregateError` as rejection reason when they fail.
    */
    declare     export class AggregateError mixins Error {}


    /**
     * returned by `Bluebird.disposer()`.
     */
    declare     export class Disposer<R>{}

    declare     export interface Bluebird$Thenable<R>{
        then<U>(
            onFulfilled: (value: R) => U | Bluebird$Thenable<U>,
            onRejected?: (error: any) => U | Bluebird$Thenable<U>): Bluebird$Thenable<U>,
        then<U>(
            onFulfilled: (value: R) => U | Bluebird$Thenable<U>,
            onRejected?: (error: any) => void | Bluebird$Thenable<void>): Bluebird$Thenable<U >
    }

    declare     export interface Bluebird$Resolver<R>{

        /**
         * Returns a reference to the controlled promise that can be passed to clients.
         */
        promise: Bluebird<R>,

        /**
         * Resolve the underlying promise with `value` as the resolution value. If `value` is a thenable or a promise, the underlying promise will assume its state.
         */
        resolve(value: R): void,
        resolve(): void,

        /**
         * Reject the underlying promise with `reason` as the rejection reason.
         */
        reject(reason: any): void,

        /**
         * Gives you a callback representation of the `PromiseResolver`. Note that this is not a method but a property. The callback accepts error object in first argument and success values on the 2nd parameter and the rest, I.E. node js conventions.
         * 
        If the the callback is called with multiple success values, the resolver fullfills its promise with an array of the values.
        */
        callback: (err: any, value: R, ...values: R[]) => void
    }

    declare     export interface Bluebird$Inspection<R>{

        /**
         * See if the underlying promise was fulfilled at the creation time of this inspection object.
         */
        isFulfilled(): boolean,

        /**
         * See if the underlying promise was rejected at the creation time of this inspection object.
         */
        isRejected(): boolean,

        /**
         * See if the underlying promise was cancelled at the creation time of this inspection object.
         */
        isCancelled(): boolean,

        /**
         * See if the underlying promise was defer at the creation time of this inspection object.
         */
        isPending(): boolean,

        /**
         * Get the fulfillment value of the underlying promise. Throws if the promise wasn't fulfilled at the creation time of this inspection object.
         * 
        throws `TypeError`
        */
        value(): R,

        /**
         * Get the rejection reason for the underlying promise. Throws if the promise wasn't rejected at the creation time of this inspection object.
         * 
        throws `TypeError`
        */
        reason(): any
    }


    /**
     * Returns a new independent copy of the Bluebird library.
     * 
    This method should be used before you use any of the methods which would otherwise alter the global Bluebird object - to avoid polluting global state.
    */
    declare     export function Bluebird$getNewLibraryCopy(): typeof Bluebird


    /**
     * This is relevant to browser environments with no module loader.
     * 
    Release control of the Promise namespace to whatever it was before this library was loaded. Returns a reference to the library namespace so you can attach it to something else.
    */
    declare     export function Bluebird$noConflict(): typeof Bluebird


    /**
     * Changes how bluebird schedules calls a-synchronously.
     * @param scheduler Should be a function that asynchronously schedules
    the calling of the passed in function
    */
    declare     export function Bluebird$setScheduler(scheduler: (callback: (...args: any[]) => void) => void): void
}