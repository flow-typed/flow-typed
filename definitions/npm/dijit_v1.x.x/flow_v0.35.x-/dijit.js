

declare module 'dijit' {
		declare interface _BidiSupport {
		(): void
	}

	declare interface BackgroundIframe {
		(node: HTMLElement): void
	}

	declare interface hccss {
		(): void
	}

	declare interface _base {
		
	}

	declare interface _BidiMixin {
		textDir: string,
		applyTextDir(element: HTMLElement, text: String): void,
		enforceTextDirWithUcc(option: any, text: any): String,
		getTextDir(text: String): any,
		restoreOriginalText(origObj: any): any
	}

	declare interface _Calendar {
		
	}

	declare interface a11yclick {
		click(node: any, listener: any): void,
		move(node: any, listener: any): void,
		press(node: any, listener: any): void,
		release(node: any, listener: any): void
	}

	declare interface a11y {
		effectiveTabIndex(elem: HTMLElement): any,
		getFirstInTabbingOrder(root: String, doc: HTMLDocument): any,
		getFirstInTabbingOrder(root: HTMLElement, doc: HTMLDocument): any,
		getLastInTabbingOrder(root: String, doc: HTMLDocument): any,
		getLastInTabbingOrder(root: HTMLElement, doc: HTMLDocument): any,
		hasDefaultTabStop(elem: HTMLElement): any,
		isFocusable(elem: HTMLElement): boolean,
		isTabNavigable(elem: HTMLElement): boolean
	}

	declare interface dijit {
		
	}

	declare interface dijit_all {
		
	}

	declare interface main {
		defaultDuration: number,
		place: Object,
		popup: Object,
		registry: Object,
		typematic: Object,
		BackgroundIframe(node: HTMLElement): void,
		effectiveTabIndex(elem: HTMLElement): any,
		focus(node: any): void,
		getBookmark(): any,
		getDocumentWindow(doc: any): void,
		getFirstInTabbingOrder(root: String, doc: HTMLDocument): any,
		getFirstInTabbingOrder(root: HTMLElement, doc: HTMLDocument): any,
		getFocus(menu: dijit._WidgetBase, openedForWindow: Window): any,
		getLastInTabbingOrder(root: String, doc: HTMLDocument): any,
		getLastInTabbingOrder(root: HTMLElement, doc: HTMLDocument): any,
		getPopupAroundAlignment(position: String[], leftToRight: boolean): void,
		getViewport(): void,
		getWaiRole(elem: HTMLElement): any,
		getWaiState(elem: HTMLElement, state: String): any,
		hasDefaultTabStop(elem: HTMLElement): any,
		hasWaiRole(elem: HTMLElement, role: String): any,
		hasWaiState(elem: HTMLElement, state: String): any,
		hideTooltip(aroundNode: any): any,
		isCollapsed(): any,
		isFocusable(elem: HTMLElement): boolean,
		isTabNavigable(elem: HTMLElement): boolean,
		moveToBookmark(bookmark: Object): any,
		placeOnScreen(
		node: HTMLElement, pos: dijit.place.___Position, corners: String[], padding: dijit.place.___Position, layoutNode: any
	): any,
		placeOnScreenAroundElement(node: any, aroundNode: any, aroundCorners: any, layoutNode: any): void,
		placeOnScreenAroundNode(node: any, aroundNode: any, aroundCorners: any, layoutNode: any): void,
		placeOnScreenAroundRectangle(node: any, aroundRect: any, aroundCorners: any, layoutNode: any): void,
		registerIframe(iframe: HTMLElement): any,
		registerWin(targetWindow: Window, effectiveNode: HTMLElement): any,
		removeWaiRole(elem: HTMLElement, role: String): void,
		removeWaiState(elem: HTMLElement, state: String): void,
		scrollIntoView(node: HTMLElement, pos: Object): void,
		selectInputText(element: HTMLElement, start: number, stop: number): void,
		setWaiRole(elem: HTMLElement, role: String): void,
		setWaiState(elem: HTMLElement, state: String, value: String): void,
		showTooltip(
		innerHTML: String, aroundNode: Object, position: String[], rtl: boolean, textDir: String
	): any,
		unregisterIframe(handle: Object): void,
		unregisterWin(handle: Object): void
	}

	declare interface place {
		around(
		node: HTMLElement, anchor: HTMLElement, positions: String[], leftToRight: boolean, layoutNode: Function
	): any,
		around(
		node: HTMLElement, anchor: dijit.place.___Rectangle, positions: String[], leftToRight: boolean, layoutNode: Function
	): any,
		at(
		node: HTMLElement, pos: dijit.place.___Position, corners: String[], padding: dijit.place.___Position, layoutNode: any
	): any
	}

	declare interface registry {
		length: number,
		add(widget: dijit._WidgetBase): void,
		byId(id: String): dijit._WidgetBase,
		byId(id: dijit._WidgetBase): dijit._WidgetBase,
		byNode(node: HTMLElement): any,
		findWidgets(root: HTMLElement, skipNode: HTMLElement): any[],
		getEnclosingWidget(node: HTMLElement): any,
		getUniqueId(widgetType: String): String,
		remove(id: String): void,
		toArray(): any[]
	}

	declare interface typematic {
		addKeyListener(
		node: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		addListener(
		mouseNode: HTMLElement, keyNode: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		addMouseListener(
		node: HTMLElement, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		stop(): void,
		trigger(
		evt: Event, _this: Object, node: HTMLElement, callback: Function, obj: Object, subsequentDelay: number, initialDelay: number, minDelay: number
	): void
	}

	declare interface Viewport {
		
	}

		declare class _AttachMixin  {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		searchContainerNode: boolean;
		buildRendering(): void;
		destroyRendering(): void
	}

	declare class _Container  {
		constructor(): this;
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		buildRendering(): void;
		getIndexOfChild(child: dijit._WidgetBase): any;
		hasChildren(): boolean;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void
	}

	declare class _Contained  {
		constructor(): this;
		getIndexInParent(): any;
		getNextSibling(): any;
		getPreviousSibling(): any
	}

	declare class _DialogMixin  {
		constructor(): this;
		execute(formContents: Object): void;
		onCancel(): void;
		onExecute(): void
	}

	declare class _CssStateMixin  {
		constructor(): this;
		active: boolean;
		cssStateNodes: Object;
		hovering: boolean
	}

	declare class _FocusMixin  {
		constructor(): this
	}

	declare class _HasDropDown extends dijit$_FocusMixin {
		constructor(): this;
		autoWidth: boolean;
		dropDown: Object;
		dropDownPosition: Object;
		forceWidth: boolean;
		maxHeight: number;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		destroy(): void;
		isLoaded(): boolean;
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		openDropDown(): any;
		postCreate(): void;
		toggleDropDown(): void
	}

	declare class _KeyNavMixin extends dijit$_FocusMixin {
		constructor(): this;
		childSelector: any;
		focusedChild: Object;
		multiCharSearchDuration: number;
		tabIndex: string;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		postCreate(): void;
		onKeyboardSearch(
		item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number
	): void
	}

	declare class _KeyNavContainer extends dijit$_FocusMixin, dijit$_KeyNavMixin {
		constructor(): this;
		focusedChild: Object;
		multiCharSearchDuration: number;
		tabIndex: string;
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		getIndexOfChild(child: dijit._WidgetBase): any;
		hasChildren(): boolean;
		postCreate(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		startup(): void;
		startupKeyNavChildren(): void;
		onKeyboardSearch(
		item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number
	): void
	}

	declare class _OnDijitClickMixin  {
		constructor(): this;
		a11yclick: Object;
		connect(obj: any, event: any, method: any): any
	}

	declare class _PaletteMixin extends dijit$_CssStateMixin {
		constructor(): this;
		active: boolean;
		cellClass: string;
		cssStateNodes: Object;
		defaultTimeout: number;
		dyeClass: Object;
		hovering: boolean;
		tabIndex: string;
		timeoutChangeRate: number;
		value: string;
		focus(): void;
		postCreate(): void;
		onChange(value: String): void
	}

	declare class _TemplatedMixin extends dijit$_AttachMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		searchContainerNode: boolean;
		templatePath: string;
		templateString: string;
		buildRendering(): void;
		destroyRendering(): void;
		getCachedTemplate(templateString: String, alwaysUseString: boolean, doc?: HTMLDocument): any
	}

	declare class _Templated extends dijit$_TemplatedMixin, dijit$_WidgetsInTemplateMixin {
		constructor(): this;
		attachScope: Object;
		contextRequire: Function;
		searchContainerNode: boolean;
		templatePath: string;
		templateString: string;
		widgetsInTemplate: boolean;
		buildRendering(): void;
		destroyRendering(): void;
		startup(): void;
		getCachedTemplate(): any
	}

	declare class _MenuBase extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		activated: boolean;
		set(property: "activated", value: boolean): void;
		get(property: "activated"): boolean;
		watch(
		property: "activated", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoFocus: boolean;
		set(property: "autoFocus", value: boolean): void;
		get(property: "autoFocus"): boolean;
		watch(
		property: "autoFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parentMenu: Object;
		set(property: "parentMenu", value: Object): void;
		get(property: "parentMenu"): Object;
		watch(
		property: "parentMenu", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		passivePopupDelay: number;
		set(property: "passivePopupDelay", value: number): void;
		get(property: "passivePopupDelay"): number;
		watch(
		property: "passivePopupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		popupDelay: number;
		set(property: "popupDelay", value: number): void;
		get(property: "popupDelay"): number;
		watch(
		property: "popupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: Object;
		set(property: "selected", value: Object): void;
		get(property: "selected"): Object;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(...args: any[]): any[];
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(closeAll: boolean): void;
		onClick(event: any): void;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onItemHover(item: dijit.MenuItem): void;
		onItemUnhover(item: dijit.MenuItem): void;
		onKeyboardSearch(
		item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _WidgetsInTemplateMixin  {
		constructor(): this;
		contextRequire: Function;
		widgetsInTemplate: boolean;
		startup(): void
	}

	declare class _WidgetBase extends dojo$Stateful, dijit$Destroyable {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: Object;
		set(property: "style", value: Object): void;
		get(property: "style"): Object;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: any;
		on(type: String, func: Function): {
		remove: {
		(): void
	}
	};
		on(type: Function, func: Function): {
		remove: {
		(): void
	}
	};
		own(handle: any): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onFocus(): void
	}

	declare class _Widget extends dijit$_WidgetBase, dijit$_OnDijitClickMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		a11yclick: Object;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dndType: string;
		set(property: "dndType", value: string): void;
		get(property: "dndType"): string;
		watch(
		property: "dndType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		observer: string;
		set(property: "observer", value: string): void;
		get(property: "observer"): string;
		watch(
		property: "observer", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		slideFrom: string;
		set(property: "slideFrom", value: string): void;
		get(property: "slideFrom"): string;
		watch(
		property: "slideFrom", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: Object;
		set(property: "style", value: Object): void;
		get(property: "style"): Object;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _TimePicker extends dijit$_WidgetBase, undefined$_ListMouseMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		clickableIncrement: string;
		set(property: "clickableIncrement", value: string): void;
		get(property: "clickableIncrement"): string;
		watch(
		property: "clickableIncrement", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		filterString: string;
		set(property: "filterString", value: string): void;
		get(property: "filterString"): string;
		watch(
		property: "filterString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		selected: HTMLElement;
		set(property: "selected", value: HTMLElement): void;
		get(property: "selected"): HTMLElement;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		visibleIncrement: string;
		set(property: "visibleIncrement", value: string): void;
		get(property: "visibleIncrement"): string;
		watch(
		property: "visibleIncrement", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getParent(): any;
		handleKey(e: Event): any;
		isDisabledDate(dateObject: Date, locale?: String): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		selectFirstNode(): void;
		selectLastNode(): void;
		selectNextNode(): void;
		selectPreviousNode(): void;
		serialize(dateObject: Date, options?: Object): any;
		set(name: any, value: any): any;
		setValue(value: Date): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onChange(time: Date): void;
		onClick(node: HTMLElement): void;
		onDeselect(node: HTMLElement): void;
		onFocus(): void;
		onHover(node: HTMLElement): void;
		onOpen(): void;
		onSelect(node: HTMLElement): void;
		onUnhover(node: HTMLElement): void
	}

	declare class Destroyable  {
		constructor(): this;
		destroy(preserveDom?: boolean): void;
		own(handle: any): any
	}

	declare class CalendarLite extends dijit$_WidgetBase, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		currentFocus: Date;
		set(property: "currentFocus", value: Date): void;
		get(property: "currentFocus"): Date;
		watch(
		property: "currentFocus", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dateTemplateString: string;
		set(property: "dateTemplateString", value: string): void;
		get(property: "dateTemplateString"): string;
		watch(
		property: "dateTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dayWidth: string;
		set(property: "dayWidth", value: string): void;
		get(property: "dayWidth"): string;
		watch(
		property: "dayWidth", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dowTemplateString: string;
		set(property: "dowTemplateString", value: string): void;
		get(property: "dowTemplateString"): string;
		watch(
		property: "dowTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		weekTemplateString: string;
		set(property: "weekTemplateString", value: string): void;
		get(property: "weekTemplateString"): string;
		watch(
		property: "weekTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getClassForDate(dateObject: Date, locale?: String): String;
		getParent(): any;
		goToToday(): void;
		isDisabledDate(dateObject: Date, locale?: String): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onChange(date: Date): void
	}

	declare class Declaration extends dijit$_Widget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		defaults: Object;
		set(property: "defaults", value: Object): void;
		get(property: "defaults"): Object;
		watch(
		property: "defaults", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		mixins: Object;
		set(property: "mixins", value: Object): void;
		get(property: "mixins"): Object;
		watch(
		property: "mixins", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		widgetClass: string;
		set(property: "widgetClass", value: string): void;
		get(property: "widgetClass"): string;
		watch(
		property: "widgetClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Calendar extends dijit$CalendarLite, dijit$_Widget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		a11yclick: Object;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		currentFocus: Date;
		set(property: "currentFocus", value: Date): void;
		get(property: "currentFocus"): Date;
		watch(
		property: "currentFocus", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dateTemplateString: string;
		set(property: "dateTemplateString", value: string): void;
		get(property: "dateTemplateString"): string;
		watch(
		property: "dateTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dayWidth: string;
		set(property: "dayWidth", value: string): void;
		get(property: "dayWidth"): string;
		watch(
		property: "dayWidth", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dowTemplateString: string;
		set(property: "dowTemplateString", value: string): void;
		get(property: "dowTemplateString"): string;
		watch(
		property: "dowTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dndType: string;
		set(property: "dndType", value: string): void;
		get(property: "dndType"): string;
		watch(
		property: "dndType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		observer: string;
		set(property: "observer", value: string): void;
		get(property: "observer"): string;
		watch(
		property: "observer", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		slideFrom: string;
		set(property: "slideFrom", value: string): void;
		get(property: "slideFrom"): string;
		watch(
		property: "slideFrom", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		weekTemplateString: string;
		set(property: "weekTemplateString", value: string): void;
		get(property: "weekTemplateString"): string;
		watch(
		property: "weekTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getClassForDate(dateObject: Date, locale: String): String;
		getDescendants(): any[];
		getParent(): any;
		goToToday(): void;
		handleKey(evt: Event): any;
		isDisabledDate(dateObject: Date, locale?: String): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setValue(value: Date): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(value: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onValueSelected(date: Date): void
	}

	declare class CheckedMenuItem extends dijit$MenuItem {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		checkedChar: string;
		set(property: "checkedChar", value: string): void;
		get(property: "checkedChar"): string;
		watch(
		property: "checkedChar", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		role: string;
		set(property: "role", value: string): void;
		get(property: "role"): string;
		watch(
		property: "role", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(checked: boolean): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class DialogUnderlay extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dialogId: string;
		set(property: "dialogId", value: string): void;
		get(property: "dialogId"): string;
		watch(
		property: "dialogId", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		hide(): void;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		show(): void;
		show(attrs: Object, zIndex: number): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _ConfirmDialogMixin extends dijit$_WidgetsInTemplateMixin {
		constructor(): this;
		actionBarTemplate: Object;
		buttonCancel: string;
		buttonOk: string;
		contextRequire: Function;
		widgetsInTemplate: boolean;
		startup(): void
	}

	declare class ConfirmDialog extends dijit$Dialog, dijit$_ConfirmDialogMixin {
		constructor(params: Object, srcNodeRef?: HTMLElement): this;
		okButton: dijit.form.Button;
		cancelButon: dijit.form.Button;
		actionBarTemplate: string;
		set(property: "actionBarTemplate", value: string): void;
		get(property: "actionBarTemplate"): string;
		watch(
		property: "actionBarTemplate", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autofocus: boolean;
		set(property: "autofocus", value: boolean): void;
		get(property: "autofocus"): boolean;
		watch(
		property: "autofocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonCancel: string;
		set(property: "buttonCancel", value: string): void;
		get(property: "buttonCancel"): string;
		watch(
		property: "buttonCancel", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonOk: string;
		set(property: "buttonOk", value: string): void;
		get(property: "buttonOk"): string;
		watch(
		property: "buttonOk", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		closable: boolean;
		set(property: "closable", value: boolean): void;
		get(property: "closable"): boolean;
		watch(
		property: "closable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		contextRequire: Function;
		set(property: "contextRequire", value: Function): void;
		get(property: "contextRequire"): Function;
		watch(
		property: "contextRequire", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		draggable: boolean;
		set(property: "draggable", value: boolean): void;
		get(property: "draggable"): boolean;
		watch(
		property: "draggable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maxRatio: number;
		set(property: "maxRatio", value: number): void;
		get(property: "maxRatio"): number;
		watch(
		property: "maxRatio", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		open: boolean;
		set(property: "open", value: boolean): void;
		get(property: "open"): boolean;
		watch(
		property: "open", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refocus: boolean;
		set(property: "refocus", value: boolean): void;
		get(property: "refocus"): boolean;
		watch(
		property: "refocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectChildren(inStartup: boolean): void;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom: boolean): void;
		destroyRecursive(preserveDom: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		disconnectChildren(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execute(formContents: Object): void;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValues(): any;
		hasChildren(): boolean;
		hide(): any;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: {
		(): boolean
	};
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		reset(): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		setValues(val: any): any;
		show(): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void;
		onValidStateChange(isValid: boolean): void
	}

	declare class Dialog extends undefined$ContentPane, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autofocus: boolean;
		set(property: "autofocus", value: boolean): void;
		get(property: "autofocus"): boolean;
		watch(
		property: "autofocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		closable: boolean;
		set(property: "closable", value: boolean): void;
		get(property: "closable"): boolean;
		watch(
		property: "closable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		draggable: boolean;
		set(property: "draggable", value: boolean): void;
		get(property: "draggable"): boolean;
		watch(
		property: "draggable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maxRatio: number;
		set(property: "maxRatio", value: number): void;
		get(property: "maxRatio"): number;
		watch(
		property: "maxRatio", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		open: boolean;
		set(property: "open", value: boolean): void;
		get(property: "open"): boolean;
		watch(
		property: "open", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refocus: boolean;
		set(property: "refocus", value: boolean): void;
		get(property: "refocus"): boolean;
		watch(
		property: "refocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectChildren(inStartup: boolean): void;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		disconnectChildren(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execute(formContents: Object): void;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValues(): any;
		hasChildren(): boolean;
		hide(): any;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: {
		(): boolean
	};
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		reset(): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		setValues(val: any): any;
		show(): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void;
		onValidStateChange(isValid: boolean): void
	}

	declare class ColorPalette extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cellClass: string;
		set(property: "cellClass", value: string): void;
		get(property: "cellClass"): string;
		watch(
		property: "cellClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		defaultTimeout: number;
		set(property: "defaultTimeout", value: number): void;
		get(property: "defaultTimeout"): number;
		watch(
		property: "defaultTimeout", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dyeClass: Function;
		set(property: "dyeClass", value: Function): void;
		get(property: "dyeClass"): Function;
		watch(
		property: "dyeClass", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		palette: string;
		set(property: "palette", value: string): void;
		get(property: "palette"): string;
		watch(
		property: "palette", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		timeoutChangeRate: number;
		set(property: "timeoutChangeRate", value: number): void;
		get(property: "timeoutChangeRate"): number;
		watch(
		property: "timeoutChangeRate", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(value: String): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Fieldset extends dijit$TitlePane {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		open: boolean;
		set(property: "open", value: boolean): void;
		get(property: "open"): boolean;
		watch(
		property: "open", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		toggleable: boolean;
		set(property: "toggleable", value: boolean): void;
		get(property: "toggleable"): boolean;
		watch(
		property: "toggleable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		setTitle(title: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void
	}

	declare class DropDownMenu extends dijit$_MenuBase, dijit$_OnDijitClickMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		activated: boolean;
		set(property: "activated", value: boolean): void;
		get(property: "activated"): boolean;
		watch(
		property: "activated", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoFocus: boolean;
		set(property: "autoFocus", value: boolean): void;
		get(property: "autoFocus"): boolean;
		watch(
		property: "autoFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parentMenu: Object;
		set(property: "parentMenu", value: Object): void;
		get(property: "parentMenu"): Object;
		watch(
		property: "parentMenu", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		passivePopupDelay: number;
		set(property: "passivePopupDelay", value: number): void;
		get(property: "passivePopupDelay"): number;
		watch(
		property: "passivePopupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		popupDelay: number;
		set(property: "popupDelay", value: number): void;
		get(property: "popupDelay"): number;
		watch(
		property: "popupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: Object;
		set(property: "selected", value: Object): void;
		get(property: "selected"): Object;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(closeAll: boolean): void;
		onClick(event: any): void;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onItemHover(item: dijit.MenuItem): void;
		onItemUnhover(item: dijit.MenuItem): void;
		onKeyboardSearch(
		item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Editor extends undefined$RichText {
		constructor(params: Object, srcNodeRef: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		captureEvents: Object;
		set(property: "captureEvents", value: Object): void;
		get(property: "captureEvents"): Object;
		watch(
		property: "captureEvents", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		customUndo: boolean;
		set(property: "customUndo", value: boolean): void;
		get(property: "customUndo"): boolean;
		watch(
		property: "customUndo", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		disableSpellCheck: boolean;
		set(property: "disableSpellCheck", value: boolean): void;
		get(property: "disableSpellCheck"): boolean;
		watch(
		property: "disableSpellCheck", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		editActionInterval: number;
		set(property: "editActionInterval", value: number): void;
		get(property: "editActionInterval"): number;
		watch(
		property: "editActionInterval", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		extraPlugins: Object;
		set(property: "extraPlugins", value: Object): void;
		get(property: "extraPlugins"): Object;
		watch(
		property: "extraPlugins", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusOnLoad: boolean;
		set(property: "focusOnLoad", value: boolean): void;
		get(property: "focusOnLoad"): boolean;
		watch(
		property: "focusOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		height: string;
		set(property: "height", value: string): void;
		get(property: "height"): string;
		watch(
		property: "height", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		inheritWidth: boolean;
		set(property: "inheritWidth", value: boolean): void;
		get(property: "inheritWidth"): boolean;
		watch(
		property: "inheritWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isClosed: boolean;
		set(property: "isClosed", value: boolean): void;
		get(property: "isClosed"): boolean;
		watch(
		property: "isClosed", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isTabIndent: boolean;
		set(property: "isTabIndent", value: boolean): void;
		get(property: "isTabIndent"): boolean;
		watch(
		property: "isTabIndent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		minHeight: string;
		set(property: "minHeight", value: string): void;
		get(property: "minHeight"): string;
		watch(
		property: "minHeight", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: Object;
		set(property: "name", value: Object): void;
		get(property: "name"): Object;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		plugins: Object;
		set(property: "plugins", value: Object): void;
		get(property: "plugins"): Object;
		watch(
		property: "plugins", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		styleSheets: string;
		set(property: "styleSheets", value: string): void;
		get(property: "styleSheets"): string;
		watch(
		property: "styleSheets", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		updateInterval: number;
		set(property: "updateInterval", value: number): void;
		get(property: "updateInterval"): number;
		watch(
		property: "updateInterval", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		addKeyHandler(key: String, ctrl: boolean, shift: boolean, handler: Function): void;
		addKeyHandler(key: number, ctrl: boolean, shift: boolean, handler: Function): void;
		addPlugin(plugin: String, index?: number): void;
		addPlugin(plugin: Object, index?: number): void;
		addPlugin(plugin: Function, index?: number): void;
		addStyleSheet(uri: dojo._base.url): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		blur(): void;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execCommand(cmd: any): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getFooterHeight(): any;
		getHeaderHeight(): any;
		getNodeChildrenHtml(dom: HTMLElement): any;
		getNodeHtml(node: HTMLElement): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		queryCommandEnabled(cmd: any): any;
		queryCommandState(command: any): any;
		queryCommandValue(command: any): any;
		removeStyleSheet(uri: dojo._base.url): void;
		replaceValue(html: String): void;
		resize(size: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setupDefaultShortcuts(): void;
		setValue(html: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBeforeActivate(): void;
		onBlur(): void;
		onChange(newContent: any): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyPress(event: any): void;
		onKeyUp(e: any): void;
		onLoad(html: String): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class InlineEditBox extends dijit$_Widget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoSave: boolean;
		set(property: "autoSave", value: boolean): void;
		get(property: "autoSave"): boolean;
		watch(
		property: "autoSave", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonCancel: string;
		set(property: "buttonCancel", value: string): void;
		get(property: "buttonCancel"): string;
		watch(
		property: "buttonCancel", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonSave: string;
		set(property: "buttonSave", value: string): void;
		get(property: "buttonSave"): string;
		watch(
		property: "buttonSave", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		editing: boolean;
		set(property: "editing", value: boolean): void;
		get(property: "editing"): boolean;
		watch(
		property: "editing", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		editorParams: Object;
		set(property: "editorParams", value: Object): void;
		get(property: "editorParams"): Object;
		watch(
		property: "editorParams", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		noValueIndicator: string;
		set(property: "noValueIndicator", value: string): void;
		get(property: "noValueIndicator"): string;
		watch(
		property: "noValueIndicator", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		renderAsHtml: boolean;
		set(property: "renderAsHtml", value: boolean): void;
		get(property: "renderAsHtml"): boolean;
		watch(
		property: "renderAsHtml", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		width: string;
		set(property: "width", value: string): void;
		get(property: "width"): string;
		watch(
		property: "width", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		editor(): void;
		editorWrapper(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(val: String): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onCancel(): void;
		onChange(value: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class MenuSeparator extends dijit$_WidgetBase, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): boolean;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onFocus(): void
	}

	declare class MenuBar extends dijit$_MenuBase {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		activated: boolean;
		set(property: "activated", value: boolean): void;
		get(property: "activated"): boolean;
		watch(
		property: "activated", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoFocus: boolean;
		set(property: "autoFocus", value: boolean): void;
		get(property: "autoFocus"): boolean;
		watch(
		property: "autoFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parentMenu: Object;
		set(property: "parentMenu", value: Object): void;
		get(property: "parentMenu"): Object;
		watch(
		property: "parentMenu", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		passivePopupDelay: number;
		set(property: "passivePopupDelay", value: number): void;
		get(property: "passivePopupDelay"): number;
		watch(
		property: "passivePopupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		popupDelay: number;
		set(property: "popupDelay", value: number): void;
		get(property: "popupDelay"): number;
		watch(
		property: "popupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: Object;
		set(property: "selected", value: Object): void;
		get(property: "selected"): Object;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(item: any): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(closeAll: boolean): void;
		onClick(event: any): void;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onItemHover(item: dijit.MenuItem): void;
		onItemUnhover(item: dijit.MenuItem): void;
		onKeyboardSearch(
		item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Menu extends dijit$DropDownMenu {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		activated: boolean;
		set(property: "activated", value: boolean): void;
		get(property: "activated"): boolean;
		watch(
		property: "activated", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoFocus: boolean;
		set(property: "autoFocus", value: boolean): void;
		get(property: "autoFocus"): boolean;
		watch(
		property: "autoFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		contextMenuForWindow: boolean;
		set(property: "contextMenuForWindow", value: boolean): void;
		get(property: "contextMenuForWindow"): boolean;
		watch(
		property: "contextMenuForWindow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		currentTarget: HTMLElement;
		set(property: "currentTarget", value: HTMLElement): void;
		get(property: "currentTarget"): HTMLElement;
		watch(
		property: "currentTarget", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		leftClickToOpen: boolean;
		set(property: "leftClickToOpen", value: boolean): void;
		get(property: "leftClickToOpen"): boolean;
		watch(
		property: "leftClickToOpen", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parentMenu: Object;
		set(property: "parentMenu", value: Object): void;
		get(property: "parentMenu"): Object;
		watch(
		property: "parentMenu", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		passivePopupDelay: number;
		set(property: "passivePopupDelay", value: number): void;
		get(property: "passivePopupDelay"): number;
		watch(
		property: "passivePopupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		popupDelay: number;
		set(property: "popupDelay", value: number): void;
		get(property: "popupDelay"): number;
		watch(
		property: "popupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		refocus: boolean;
		set(property: "refocus", value: boolean): void;
		get(property: "refocus"): boolean;
		watch(
		property: "refocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: Object;
		set(property: "selected", value: Object): void;
		get(property: "selected"): Object;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		selector: Object;
		set(property: "selector", value: Object): void;
		get(property: "selector"): Object;
		watch(
		property: "selector", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		targetNodeIds: Object;
		set(property: "targetNodeIds", value: Object): void;
		get(property: "targetNodeIds"): Object;
		watch(
		property: "targetNodeIds", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		bindDomNode(node: String): void;
		bindDomNode(node: HTMLElement): void;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getPlaceholders(label: String): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		unBindDomNode(nodeName: String): void;
		unBindDomNode(nodeName: HTMLElement): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(closeAll: boolean): void;
		onClick(event: any): void;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onItemHover(item: dijit.MenuItem): void;
		onItemUnhover(item: dijit.MenuItem): void;
		onKeyboardSearch(
		item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class MenuItem extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class MenuBarItem extends dijit$MenuItem {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class PopupMenuBarItem extends dijit$PopupMenuItem {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class PopupMenuItem extends dijit$MenuItem {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ProgressBar extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		indeterminate: boolean;
		set(property: "indeterminate", value: boolean): void;
		get(property: "indeterminate"): boolean;
		watch(
		property: "indeterminate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: Object;
		set(property: "label", value: Object): void;
		get(property: "label"): Object;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maximum: number;
		set(property: "maximum", value: number): void;
		get(property: "maximum"): number;
		watch(
		property: "maximum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		places: number;
		set(property: "places", value: number): void;
		get(property: "places"): number;
		watch(
		property: "places", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		progress: string;
		set(property: "progress", value: string): void;
		get(property: "progress"): string;
		watch(
		property: "progress", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		report(percent: number): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class RadioMenuItem extends dijit$CheckedMenuItem {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accelKey: string;
		set(property: "accelKey", value: string): void;
		get(property: "accelKey"): string;
		watch(
		property: "accelKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		checkedChar: string;
		set(property: "checkedChar", value: string): void;
		get(property: "checkedChar"): string;
		watch(
		property: "checkedChar", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		group: string;
		set(property: "group", value: string): void;
		get(property: "group"): string;
		watch(
		property: "group", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		role: string;
		set(property: "role", value: string): void;
		get(property: "role"): string;
		watch(
		property: "role", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		shortcutKey: string;
		set(property: "shortcutKey", value: string): void;
		get(property: "shortcutKey"): string;
		watch(
		property: "shortcutKey", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(checked: boolean): void;
		onClick(): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Toolbar extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyboardSearch(
		item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Tooltip extends dijit$_Widget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		connectId: string;
		set(property: "connectId", value: string): void;
		get(property: "connectId"): string;
		watch(
		property: "connectId", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		defaultPosition: Object;
		set(property: "defaultPosition", value: Object): void;
		get(property: "defaultPosition"): Object;
		watch(
		property: "defaultPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		position: Object;
		set(property: "position", value: Object): void;
		get(property: "position"): Object;
		watch(
		property: "position", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		selector: Object;
		set(property: "selector", value: Object): void;
		get(property: "selector"): Object;
		watch(
		property: "selector", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		showDelay: number;
		set(property: "showDelay", value: number): void;
		get(property: "showDelay"): number;
		watch(
		property: "showDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addTarget(node: HTMLElement): void;
		addTarget(node: String): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getContent(node: HTMLElement): any;
		getDescendants(): any[];
		getParent(): any;
		hide(aroundNode: any): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeTarget(node: HTMLElement): void;
		removeTarget(node: String): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		show(
		innerHTML: String, aroundNode: Object, position: String[], rtl: boolean, textDir: String
	): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(target?: any, position?: any): void
	}

	declare class ToolbarSeparator extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): boolean;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class TitlePane extends undefined$ContentPane, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		open: boolean;
		set(property: "open", value: boolean): void;
		get(property: "open"): boolean;
		watch(
		property: "open", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		toggleable: boolean;
		set(property: "toggleable", value: boolean): void;
		get(property: "toggleable"): boolean;
		watch(
		property: "toggleable", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		setTitle(title: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void
	}

	declare class TooltipDialog extends undefined$ContentPane, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autofocus: boolean;
		set(property: "autofocus", value: boolean): void;
		get(property: "autofocus"): boolean;
		watch(
		property: "autofocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectChildren(inStartup: boolean): void;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		disconnectChildren(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execute(formContents: Object): void;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValues(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: {
		(): boolean
	};
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		orient(node: HTMLElement, aroundCorner: String, tooltipCorner: String): void;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		reset(): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		setValues(val: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onOpen(pos: Object): void;
		onShow(): void;
		onUnload(): void;
		onValidStateChange(isValid: boolean): void
	}

	declare class WidgetSet  {
		constructor(): this;
		add(widget: dijit._WidgetBase): void;
		byClass(cls: String): any;
		byId(id: String): dijit._WidgetBase;
		every(func: Function, thisObj: Object): boolean;
		filter(filter: Function, thisObj: Object): any;
		forEach(func: Function, thisObj: Object): any;
		map(func: Function, thisObj: Object): any;
		remove(id: String): void;
		some(func: Function, thisObj: Object): boolean;
		toArray(): any[]
	}

	declare class Tree extends dijit$_Widget, dijit$_KeyNavMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoExpand: boolean;
		set(property: "autoExpand", value: boolean): void;
		get(property: "autoExpand"): boolean;
		watch(
		property: "autoExpand", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		betweenThreshold: number;
		set(property: "betweenThreshold", value: number): void;
		get(property: "betweenThreshold"): number;
		watch(
		property: "betweenThreshold", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		checkAcceptance: Object;
		set(property: "checkAcceptance", value: Object): void;
		get(property: "checkAcceptance"): Object;
		watch(
		property: "checkAcceptance", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		checkItemAcceptance: Object;
		set(property: "checkItemAcceptance", value: Object): void;
		get(property: "checkItemAcceptance"): Object;
		watch(
		property: "checkItemAcceptance", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		childrenAttr: Object;
		set(property: "childrenAttr", value: Object): void;
		get(property: "childrenAttr"): Object;
		watch(
		property: "childrenAttr", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		childSelector: string;
		set(property: "childSelector", value: string): void;
		get(property: "childSelector"): string;
		watch(
		property: "childSelector", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dndParams: any[];
		set(property: "dndParams", value: any[]): void;
		get(property: "dndParams"): any[];
		watch(
		property: "dndParams", callback: {
		(property?: string, oldValue?: any[], newValue?: any[]): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dragThreshold: number;
		set(property: "dragThreshold", value: number): void;
		get(property: "dragThreshold"): number;
		watch(
		property: "dragThreshold", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		model: Object;
		set(property: "model", value: Object): void;
		get(property: "model"): Object;
		watch(
		property: "model", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		onDndCancel: Function;
		set(property: "onDndCancel", value: Function): void;
		get(property: "onDndCancel"): Function;
		watch(
		property: "onDndCancel", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		onDndDrop: Function;
		set(property: "onDndDrop", value: Function): void;
		get(property: "onDndDrop"): Function;
		watch(
		property: "onDndDrop", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		openOnClick: boolean;
		set(property: "openOnClick", value: boolean): void;
		get(property: "openOnClick"): boolean;
		watch(
		property: "openOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		openOnDblClick: boolean;
		set(property: "openOnDblClick", value: boolean): void;
		get(property: "openOnDblClick"): boolean;
		watch(
		property: "openOnDblClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		path: any[];
		set(property: "path", value: any[]): void;
		get(property: "path"): any[];
		watch(
		property: "path", callback: {
		(property?: string, oldValue?: any[], newValue?: any[]): void
	}
	): {
		unwatch(): void
	};
		PathError: Object;
		set(property: "PathError", value: Object): void;
		get(property: "PathError"): Object;
		watch(
		property: "PathError", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		paths: any[];
		set(property: "paths", value: any[]): void;
		get(property: "paths"): any[];
		watch(
		property: "paths", callback: {
		(property?: string, oldValue?: any[], newValue?: any[]): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		query: Object;
		set(property: "query", value: Object): void;
		get(property: "query"): Object;
		watch(
		property: "query", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectedItem: Object;
		set(property: "selectedItem", value: Object): void;
		get(property: "selectedItem"): Object;
		watch(
		property: "selectedItem", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		selectedItems: Object;
		set(property: "selectedItems", value: Object): void;
		get(property: "selectedItems"): Object;
		watch(
		property: "selectedItems", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		showRoot: boolean;
		set(property: "showRoot", value: boolean): void;
		get(property: "showRoot"): boolean;
		watch(
		property: "showRoot", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		store: string;
		set(property: "store", value: string): void;
		get(property: "store"): string;
		watch(
		property: "store", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		collapseAll(): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		dndController(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		expandAll(): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNode(node: dijit.Tree._TreeNode): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIconClass(item: dojo.data.api.Item, opened: boolean): String;
		getIconStyle(item: dojo.data.api.Item, opened: boolean): Object;
		getItemChildren(parentItem: any, onComplete: any): void;
		getLabel(item: dojo.data.api.Item): any;
		getLabelClass(item: dojo.data.api.Item, opened: boolean): String;
		getLabelStyle(item: dojo.data.api.Item, opened: boolean): any;
		getNodesByItem(item: any): any;
		getNodesByItem(item: number): any;
		getParent(): any;
		getRowClass(item: dojo.data.api.Item, opened: boolean): String;
		getRowStyle(item: dojo.data.api.Item, opened: boolean): any;
		getTooltip(item: dojo.data.api.Item): String;
		isExpandoNode(node: any, widget: any): any;
		isFocusable(): any;
		isLeftToRight(): any;
		itemCreator(nodes: HTMLElement[], target: HTMLElement, source: dojo.dnd.Source): any;
		mayHaveChildren(item: dojo.data.api.Item): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		resize(changeSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(item: any, node?: Object, evt?: Event): void;
		onClose(item?: Object, node?: Object): boolean;
		onDblClick(item: any, node?: Object, evt?: Event): void;
		onFocus(): void;
		onHide(): void;
		onKeyboardSearch(
		item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onOpen(item: dojo.data.api.Item, node: Object): void;
		onShow(): void
	}

	
}

declare module 'BackgroundIframe' {
		declare interface destroy {
		(): void
	}

	declare interface resize {
		(node: any): void
	}

			
}

declare module '_OnDijitClickMixin' {
		declare interface a11yclick {
		click(node: any, listener: any): void,
		move(node: any, listener: any): void,
		press(node: any, listener: any): void,
		release(node: any, listener: any): void
	}

			
}

declare module '_PaletteMixin' {
				declare class ___Dye  {
		constructor(alias: String, row: any, col: any): this;
		fillCell(cell: HTMLElement, blankGif: String): void;
		getValue(): void
	}

	
}

declare module '_TemplatedMixin' {
		declare interface _templateCache {
		
	}

			
}

declare module '_TimePicker' {
				declare class ___Constraints  {
		constructor(): this;
		am: string;
		clickableIncrement: string;
		datePattern: string;
		formatLength: string;
		fullYear: boolean;
		locale: string;
		pm: string;
		selector: string;
		strict: boolean;
		timePattern: string
	}

	
}

declare module 'CalendarLite' {
				declare class _MonthWidget extends dijit$_WidgetBase {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	}
	}

	
}

declare module 'Calendar' {
				declare class _MonthDropDown extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		months: Object;
		set(property: "months", value: Object): void;
		get(property: "months"): Object;
		watch(
		property: "months", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(month: number): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _MonthDropDownButton extends undefined$DropDownButton {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValue(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		loadAndOpenDropDown(): any;
		loadDropDown(callback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMonthSelect(): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'Dialog' {
		declare interface _DialogLevelManager {
		hide(dialog: dijit._WidgetBase): void,
		isTop(dialog: dijit._WidgetBase): boolean,
		show(dialog: dijit._WidgetBase, underlayAttrs: Object): void
	}

		declare class _DialogBase extends dijit$_TemplatedMixin, undefined$_FormMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		attachScope: Object;
		autofocus: boolean;
		baseClass: string;
		closable: boolean;
		cssStateNodes: Object;
		doLayout: boolean;
		draggable: boolean;
		duration: number;
		hovering: boolean;
		maxRatio: number;
		open: boolean;
		refocus: boolean;
		searchContainerNode: boolean;
		state: string;
		templatePath: string;
		templateString: string;
		buildRendering(): void;
		connectChildren(inStartup: boolean): void;
		destroy(): void;
		destroyRendering(): void;
		disconnectChildren(): void;
		execute(formContents: Object): void;
		focus(): void;
		getValues(): any;
		hide(): any;
		isValid: {
		(): boolean
	};
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		setValues(val: any): any;
		show(): any;
		startup(): void;
		validate(): any;
		getCachedTemplate(): any;
		onCancel(): void;
		onExecute(): void;
		onLoad(): void;
		onValidStateChange(isValid: boolean): void
	}

	
}

declare module 'ColorPalette' {
				declare class _Color extends undefined$Color {
		constructor(alias: String, row: number, col: any, title: String): this;
		a: number;
		b: number;
		g: number;
		hcTemplate: string;
		r: number;
		template: string;
		fillCell(cell: HTMLElement, blankGif: String): void;
		getValue(): any;
		sanitize(): void;
		setColor(color: any[]): Function;
		setColor(color: String): Function;
		setColor(color: Object): Function;
		toCss(includeAlpha: boolean): String;
		toHex(): String;
		toRgb(): any[];
		toRgba(): any[];
		toString(): any
	}

	
}

declare module 'InlineEditBox' {
				declare class _InlineEditor extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: Object;
		set(property: "style", value: Object): void;
		get(property: "style"): Object;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		contextRequire(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		enableSave(): boolean;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'MenuBarItem' {
				declare class _MenuBarItemMixin  {
		constructor(): this;
		templateString: string
	}

	
}

declare module 'Tooltip' {
				declare class _MasterTooltip extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		hide(aroundNode: any): void;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		orient(
		node: HTMLElement, aroundCorner: String, tooltipCorner: String, spaceAvailable: Object, aroundNodeCoords: Object
	): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		show(
		innerHTML: String, aroundNode: HTMLElement, position: String[], rtl: boolean, textDir: String
	): void;
		show(
		innerHTML: String, aroundNode: dijit.place.___Rectangle, position: String[], rtl: boolean, textDir: String
	): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'Tree' {
				declare class _TreeNode extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		indent: number;
		set(property: "indent", value: number): void;
		get(property: "indent"): number;
		watch(
		property: "indent", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		isExpanded: boolean;
		set(property: "isExpanded", value: boolean): void;
		get(property: "isExpanded"): boolean;
		watch(
		property: "isExpanded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isTreeNode: boolean;
		set(property: "isTreeNode", value: boolean): void;
		get(property: "isTreeNode"): boolean;
		watch(
		property: "isTreeNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		item: Object;
		set(property: "item", value: Object): void;
		get(property: "item"): Object;
		watch(
		property: "item", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		labelType: string;
		set(property: "labelType", value: string): void;
		get(property: "labelType"): string;
		watch(
		property: "labelType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		collapse(): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		expand(): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIdentity(): any;
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		getTreePath(): any[];
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		makeExpandable(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(node: dijit.Tree._TreeNode): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChildItems(items: Object[]): any;
		setSelected(selected: boolean): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module '_editor' {
		declare interface html {
		escapeXml(str: String, noSingleQuotes: boolean): any,
		getChildrenHtml(node: HTMLElement): any,
		getChildrenHtmlHelper(dom: HTMLElement, output: String[]): void,
		getNodeHtml(node: HTMLElement): any,
		getNodeHtmlHelper(node: HTMLElement, output: String[]): String
	}

	declare interface range {
		BlockTagNames: RegExp,
		ie: Object,
		adjacentNoneTextNode(startnode: any, next: any): any[],
		atBeginningOfContainer(container: HTMLElement, node: HTMLElement, offset: number): boolean,
		atEndOfContainer(container: HTMLElement, node: HTMLElement, offset: number): boolean,
		create(win: Window): any,
		getAncestor(node: HTMLElement, regex: RegExp, root: HTMLElement): HTMLElement,
		getBlockAncestor(node: HTMLElement, regex: RegExp, root: HTMLElement): Object,
		getCommonAncestor(n1: any, n2: any, root: any): any,
		getIndex(node: HTMLElement, parent: HTMLElement): Object,
		getNode(index: any[], parent: HTMLElement): HTMLElement,
		getSelection(window: Window, ignoreUpdate: boolean): any,
		W3CRange(): void
	}

	declare interface selection {
		collapse(beginning: boolean): void,
		getAncestorElement(tagName: String): any,
		getParentElement(): any,
		getParentOfType(node: HTMLElement, tags: String[]): HTMLElement,
		getSelectedElement(): any,
		getSelectedHtml(): String,
		getSelectedText(): String,
		getType(): String,
		hasAncestorElement(tagName: String): boolean,
		inSelection(node: any): boolean,
		isTag(node: HTMLElement, tags: String[]): any,
		remove(): any,
		selectElement(element: HTMLElement, nochangefocus: boolean): void,
		selectElementChildren(element: HTMLElement, nochangefocus: boolean): void
	}

		declare class _Plugin extends dijit$Destroyable {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		registry: Object;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class RichText extends dijit$_Widget, dijit$_CssStateMixin {
		constructor(params: Object, srcNodeRef: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		captureEvents: Object;
		set(property: "captureEvents", value: Object): void;
		get(property: "captureEvents"): Object;
		watch(
		property: "captureEvents", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		disableSpellCheck: boolean;
		set(property: "disableSpellCheck", value: boolean): void;
		get(property: "disableSpellCheck"): boolean;
		watch(
		property: "disableSpellCheck", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusOnLoad: boolean;
		set(property: "focusOnLoad", value: boolean): void;
		get(property: "focusOnLoad"): boolean;
		watch(
		property: "focusOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		height: string;
		set(property: "height", value: string): void;
		get(property: "height"): string;
		watch(
		property: "height", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		inheritWidth: boolean;
		set(property: "inheritWidth", value: boolean): void;
		get(property: "inheritWidth"): boolean;
		watch(
		property: "inheritWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isClosed: boolean;
		set(property: "isClosed", value: boolean): void;
		get(property: "isClosed"): boolean;
		watch(
		property: "isClosed", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isTabIndent: boolean;
		set(property: "isTabIndent", value: boolean): void;
		get(property: "isTabIndent"): boolean;
		watch(
		property: "isTabIndent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		minHeight: string;
		set(property: "minHeight", value: string): void;
		get(property: "minHeight"): string;
		watch(
		property: "minHeight", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: Object;
		set(property: "name", value: Object): void;
		get(property: "name"): Object;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		styleSheets: string;
		set(property: "styleSheets", value: string): void;
		get(property: "styleSheets"): string;
		watch(
		property: "styleSheets", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		updateInterval: number;
		set(property: "updateInterval", value: number): void;
		get(property: "updateInterval"): number;
		watch(
		property: "updateInterval", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		addKeyHandler(key: String, ctrl: boolean, shift: boolean, handler: Function): void;
		addKeyHandler(key: number, ctrl: boolean, shift: boolean, handler: Function): void;
		addStyleSheet(uri: dojo._base.url): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		blur(): void;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execCommand(command: String, argument: any): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getFooterHeight(): any;
		getHeaderHeight(): any;
		getNodeChildrenHtml(dom: HTMLElement): any;
		getNodeHtml(node: HTMLElement): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		queryCommandEnabled(command: String): any;
		queryCommandState(command: any): any;
		queryCommandValue(command: any): any;
		removeStyleSheet(uri: dojo._base.url): void;
		replaceValue(html: String): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setupDefaultShortcuts(): void;
		setValue(html: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onChange(newContent: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(e: Event): boolean;
		onKeyPress(event: any): void;
		onKeyUp(e: any): void;
		onLoad(html: String): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module '_Plugin' {
		declare interface registry {
		bold(args: any): any,
		colorTableCell(args: any): void,
		copy(args: any): any,
		createLink(): void,
		cut(args: any): any,
		delete(args: any): any,
		deleteTableColumn(args: any): any,
		deleteTableRow(args: any): any,
		foreColor(): void,
		fullScreen(args: any): void,
		fullscreen(args: any): void,
		hiliteColor(): void,
		indent(args: any): any,
		insertHorizontalRule(args: any): any,
		insertImage(): void,
		insertOrderedList(args: any): any,
		insertTable(args: any): void,
		insertTableColumnAfter(args: any): any,
		insertTableColumnBefore(args: any): any,
		insertTableRowAfter(args: any): any,
		insertTableRowBefore(args: any): any,
		insertUnorderedList(args: any): any,
		italic(args: any): any,
		justifyCenter(args: any): any,
		justifyFull(args: any): any,
		justifyLeft(args: any): any,
		justifyRight(args: any): any,
		LocalImage(args: any): any,
		localImage(args: any): any,
		localimage(args: any): any,
		modifyTable(args: any): void,
		newPage(args: any): void,
		newpage(args: any): void,
		outdent(args: any): any,
		paste(args: any): any,
		print(): void,
		redo(args: any): any,
		removeFormat(args: any): any,
		selectAll(args: any): any,
		strikethrough(args: any): any,
		subscript(args: any): any,
		superscript(args: any): any,
		tabIndent(): void,
		tableContextMenu(args: any): void,
		toggleDir(): void,
		underline(args: any): any,
		undo(args: any): any,
		unlink(args: any): any,
		viewSource(args: any): void,
		viewsource(args: any): void
	}

			
}

declare module 'plugins' {
				declare class AlwaysShowToolbar extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(e: any): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class FontChoice extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class FullScreen extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		isFullscreen: boolean;
		useDefaultCommand: boolean;
		zIndex: number;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		toggle(): void;
		updateState(): void
	}

	declare class EnterKeyHandling extends undefined$_Plugin {
		constructor(args: any): this;
		blockNodeForEnter: string;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: any): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class LinkDialog extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		emailRegExp: string;
		htmlTemplate: string;
		iconClassPrefix: string;
		linkDialogTemplate: string;
		tag: string;
		urlRegExp: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		ImgLinkDialog(): void;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class TextColor extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class NewPage extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		content: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class Print extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class TabIndent extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class ToggleDir extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	declare class ViewSource extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		iconClassPrefix: string;
		readOnly: boolean;
		stripComments: boolean;
		stripIFrames: boolean;
		stripScripts: boolean;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setSourceAreaCaret(): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		toggle(): void;
		updateState(): void
	}

	
}

declare module 'FontChoice' {
				declare class _FontDropDown extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		plainText: boolean;
		set(property: "plainText", value: boolean): void;
		get(property: "plainText"): boolean;
		watch(
		property: "plainText", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		contextRequire(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _FontNameDropDown extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		comboClass: string;
		set(property: "comboClass", value: string): void;
		get(property: "comboClass"): string;
		watch(
		property: "comboClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		command: string;
		set(property: "command", value: string): void;
		get(property: "command"): string;
		watch(
		property: "command", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		generic: boolean;
		set(property: "generic", value: boolean): void;
		get(property: "generic"): boolean;
		watch(
		property: "generic", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		plainText: boolean;
		set(property: "plainText", value: boolean): void;
		get(property: "plainText"): boolean;
		watch(
		property: "plainText", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		contextRequire(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getLabel(value: String, name: String): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _FontSizeDropDown extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		comboClass: string;
		set(property: "comboClass", value: string): void;
		get(property: "comboClass"): string;
		watch(
		property: "comboClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		command: string;
		set(property: "command", value: string): void;
		get(property: "command"): string;
		watch(
		property: "command", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		plainText: boolean;
		set(property: "plainText", value: boolean): void;
		get(property: "plainText"): boolean;
		watch(
		property: "plainText", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		values: Object;
		set(property: "values", value: Object): void;
		get(property: "values"): Object;
		watch(
		property: "values", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		contextRequire(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getLabel(value: String, name: String): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _FormatBlockDropDown extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		comboClass: string;
		set(property: "comboClass", value: string): void;
		get(property: "comboClass"): string;
		watch(
		property: "comboClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		command: string;
		set(property: "command", value: string): void;
		get(property: "command"): string;
		watch(
		property: "command", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		plainText: boolean;
		set(property: "plainText", value: boolean): void;
		get(property: "plainText"): boolean;
		watch(
		property: "plainText", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		values: any[];
		set(property: "values", value: any[]): void;
		get(property: "values"): any[];
		watch(
		property: "values", callback: {
		(property?: string, oldValue?: any[], newValue?: any[]): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		contextRequire(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getLabel(value: String, name: String): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'LinkDialog' {
				declare class ImgLinkDialog extends undefined$_Plugin {
		constructor(args?: Object): this;
		button: Object;
		command: string;
		disabled: boolean;
		editor: Object;
		emailRegExp: string;
		htmlTemplate: string;
		iconClassPrefix: string;
		linkDialogTemplate: string;
		tag: string;
		urlRegExp: string;
		useDefaultCommand: boolean;
		buttonClass(): void;
		connect(o: any, f: any, tf: any): void;
		destroy(): void;
		get(name: any): any;
		own(): any;
		set(name: Attr, value: any): any;
		setEditor(editor: dijit.Editor): void;
		setToolbar(toolbar: dijit.Toolbar): void;
		updateState(): void
	}

	
}

declare module 'range' {
		declare interface ie {
		cachedSelection: Object,
		decomposeControlRange(range: any): any[],
		decomposeTextRange(range: any): any[],
		getEndPoint(range: any, end: any): any[],
		selection(window: any): void,
		setEndPoint(range: any, container: any, offset: any): any,
		setRange(
		range: any, startContainer: any, startOffset: any, endContainer: any, endOffset: any, collapsed: any
	): any
	}

		declare class W3CRange  {
		constructor(): this;
		cloneRange(): any;
		deleteContents(): void;
		detach(): void;
		getBookmark(): any;
		setEnd(node: any, offset: any): void;
		setEndAfter(node: any, offset: any): void;
		setEndBefore(node: any, offset: any): void;
		setStart(node: any, offset: any): void;
		setStartAfter(node: any, offset: any): void;
		setStartBefore(node: any, offset: any): void
	}

	
}

declare module '_tree' {
		declare interface dndSource {
		
	}

			
}

declare module 'form' {
		declare interface Slider {
		
	}

		declare class _ButtonMixin  {
		constructor(): this;
		label: string;
		type: string;
		postCreate(): void;
		onClick(e: Event): boolean
	}

	declare class _CheckBoxMixin  {
		constructor(): this;
		readOnly: boolean;
		value: string;
		reset(): void
	}

	declare class _AutoCompleterMixin extends undefined$_SearchMixin {
		constructor(): this;
		autoComplete: boolean;
		fetchProperties: Object;
		highlightMatch: string;
		ignoreCase: boolean;
		item: Object;
		labelAttr: Object;
		labelType: string;
		maxHeight: number;
		pageSize: number;
		query: Object;
		queryExpr: string;
		searchAttr: string;
		searchDelay: number;
		store: Object;
		closeDropDown(): void;
		doHighlight(label: String, find: String): any;
		isLoaded(): boolean;
		loadDropDown(callback: Function): void;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		onSearch(results: Object, query: Object, options: Object): void
	}

	declare class _ExpandingTextAreaMixin  {
		constructor(): this;
		postCreate(): void;
		resize(): void;
		startup(): void
	}

	declare class _ComboBoxMenuMixin  {
		constructor(): this;
		buildRendering(): void;
		clearResultList(): void;
		createOptions(results: any, options: any, labelFunc: any): void;
		getHighlightedOption(): any;
		highlightFirstOption(): void;
		highlightLastOption(): void;
		postMixInProperties(): void;
		selectFirstNode(): void;
		selectLastNode(): void;
		onChange(direction: number): void;
		onClick(node: HTMLElement): void;
		onPage(direction: number): void
	}

	declare class _FormMixin  {
		constructor(): this;
		state: string;
		connectChildren(inStartup: boolean): void;
		destroy(): void;
		disconnectChildren(): void;
		getValues(): any;
		isValid: {
		(): boolean
	};
		reset(): void;
		setValues(val: any): any;
		startup(): void;
		validate(): any;
		onValidStateChange(isValid: boolean): void
	}

	declare class _FormValueMixin extends undefined$_FormWidgetMixin {
		constructor(): this;
		alt: string;
		aria-label: string;
		disabled: boolean;
		intermediateChanges: boolean;
		name: string;
		readOnly: boolean;
		scrollOnFocus: boolean;
		tabIndex: string;
		type: string;
		value: Object;
		compare(val1: any, val2: any): number;
		create(): void;
		destroy(): void;
		focus(): void;
		isFocusable(): any;
		postCreate(): void;
		reset(): void;
		undo(): void;
		onChange(newValue: any): void
	}

	declare class _ComboBoxMenu extends dijit$_WidgetBase, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: HTMLElement;
		set(property: "selected", value: HTMLElement): void;
		get(property: "selected"): HTMLElement;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buildRendering(): void;
		clearResultList(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		createOptions(results: any, options: any, labelFunc: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getHighlightedOption(): any;
		getParent(): any;
		handleKey(evt: any): boolean;
		highlightFirstOption(): void;
		highlightLastOption(): void;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		selectFirstNode(): void;
		selectLastNode(): void;
		selectNextNode(): void;
		selectPreviousNode(): void;
		set(name: any, value: any): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(direction: number): void;
		onClick(node: HTMLElement): void;
		onDeselect(node: HTMLElement): void;
		onFocus(): void;
		onHover(node: HTMLElement): void;
		onPage(direction: number): void;
		onSelect(node: HTMLElement): void;
		onUnhover(node: HTMLElement): void
	}

	declare class _FormWidgetMixin  {
		constructor(): this;
		alt: string;
		aria-label: string;
		disabled: boolean;
		intermediateChanges: boolean;
		name: string;
		scrollOnFocus: boolean;
		tabIndex: string;
		type: string;
		value: Object;
		compare(val1: any, val2: any): number;
		create(): void;
		destroy(): void;
		focus(): void;
		isFocusable(): any;
		onChange(newValue: any): void
	}

	declare class _DateTimeTextBox extends undefined$RangeBoundTextBox, dijit$_HasDropDown {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownDefaultValue: Date;
		set(property: "dropDownDefaultValue", value: Date): void;
		get(property: "dropDownDefaultValue"): Date;
		watch(
		property: "dropDownDefaultValue", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hasDownArrow: boolean;
		set(property: "hasDownArrow", value: boolean): void;
		get(property: "hasDownArrow"): boolean;
		watch(
		property: "hasDownArrow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		popupClass: any;
		set(property: "popupClass", value: any): void;
		get(property: "popupClass"): any;
		watch(
		property: "popupClass", callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: Date, val2: Date): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: Date, constraints: Object): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		isValid: {
		(isFocused: boolean): any
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(callback?: Function): void;
		own(): any;
		parse(value: String, constraints: Object): any;
		pattern: {
		(options: Object): any
	};
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _FormSelectWidget extends undefined$_FormValueWidget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		labelAttr: Object;
		set(property: "labelAttr", value: Object): void;
		get(property: "labelAttr"): Object;
		watch(
		property: "labelAttr", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadChildrenOnOpen: boolean;
		set(property: "loadChildrenOnOpen", value: boolean): void;
		get(property: "loadChildrenOnOpen"): boolean;
		watch(
		property: "loadChildrenOnOpen", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		multiple: boolean;
		set(property: "multiple", value: boolean): void;
		get(property: "multiple"): boolean;
		watch(
		property: "multiple", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onFetch: Function;
		set(property: "onFetch", value: Function): void;
		get(property: "onFetch"): Function;
		watch(
		property: "onFetch", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		options: Object;
		set(property: "options", value: Object): void;
		get(property: "options"): Object;
		watch(
		property: "options", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		query: Object;
		set(property: "query", value: Object): void;
		get(property: "query"): Object;
		watch(
		property: "query", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		queryOptions: Object;
		set(property: "queryOptions", value: Object): void;
		get(property: "queryOptions"): Object;
		watch(
		property: "queryOptions", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		sortByLabel: boolean;
		set(property: "sortByLabel", value: boolean): void;
		get(property: "sortByLabel"): boolean;
		watch(
		property: "sortByLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		store: Object;
		set(property: "store", value: Object): void;
		get(property: "store"): Object;
		watch(
		property: "store", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addOption(option: dijit.form._FormSelectWidget.___SelectOption): void;
		addOption(option: dijit.form._FormSelectWidget.___SelectOption[]): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getOptions(valueOrIdx: any): any;
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeOption(valueOrIdx: String): void;
		removeOption(valueOrIdx: dijit.form._FormSelectWidget.___SelectOption): void;
		removeOption(valueOrIdx: number): void;
		removeOption(valueOrIdx: any[]): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setStore(store: dojo.store.api.Store, selectedValue: any, fetchArgs: Object): any;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		updateOption(newOption: dijit.form._FormSelectWidget.___SelectOption): void;
		updateOption(newOption: dijit.form._FormSelectWidget.___SelectOption[]): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onSetStore(): void;
		onShow(): void
	}

	declare class _FormValueWidget extends undefined$_FormWidget, undefined$_FormValueMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: any;
		set(property: "value", value: any): void;
		get(property: "value"): any;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _FormWidget extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: Object;
		set(property: "value", value: Object): void;
		get(property: "value"): Object;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _ListBase  {
		constructor(): this;
		selected: HTMLElement;
		selectFirstNode(): void;
		selectLastNode(): void;
		selectNextNode(): void;
		selectPreviousNode(): void
	}

	declare class _RadioButtonMixin  {
		constructor(): this
	}

	declare class _ListMouseMixin extends undefined$_ListBase {
		constructor(): this;
		selected: HTMLElement;
		postCreate(): void;
		selectFirstNode(): void;
		selectLastNode(): void;
		selectNextNode(): void;
		selectPreviousNode(): void
	}

	declare class _ToggleButtonMixin  {
		constructor(): this;
		checked: boolean;
		postCreate(): void;
		reset(): void
	}

	declare class _SearchMixin  {
		constructor(): this;
		fetchProperties: Object;
		ignoreCase: boolean;
		pageSize: number;
		query: Object;
		queryExpr: string;
		searchAttr: string;
		searchDelay: number;
		store: Object;
		postMixInProperties(): void;
		onSearch(results: Object, query: Object, options: Object): void
	}

	declare class _TextBoxMixin  {
		constructor(): this;
		displayedValue: string;
		lowercase: boolean;
		maxLength: string;
		placeHolder: string;
		propercase: boolean;
		selectOnClick: boolean;
		trim: boolean;
		uppercase: boolean;
		filter(val: any): any;
		format(value: String, constraints: Object): String;
		parse(value: String, constraints: Object): String;
		postCreate(): void;
		reset(): void;
		selectInputText(element: HTMLElement, start: number, stop: number): void;
		onInput(event: any): void
	}

	declare class ComboBoxMixin extends dijit$_HasDropDown, undefined$_AutoCompleterMixin {
		constructor(): this;
		autoComplete: boolean;
		autoWidth: boolean;
		baseClass: string;
		cssStateNodes: Object;
		dropDown: Object;
		dropDownPosition: Object;
		fetchProperties: Object;
		forceWidth: boolean;
		hasDownArrow: boolean;
		highlightMatch: string;
		ignoreCase: boolean;
		item: Object;
		labelAttr: Object;
		labelType: string;
		maxHeight: number;
		pageSize: number;
		query: Object;
		queryExpr: string;
		searchAttr: string;
		searchDelay: number;
		store: Object;
		templateString: string;
		buildRendering(): void;
		closeDropDown(focus?: boolean): void;
		destroy(): void;
		doHighlight(label: String, find: String): any;
		dropDownClass(): void;
		isLoaded(): boolean;
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		openDropDown(): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		toggleDropDown(): void;
		onSearch(results: Object, query: Object, options: Object): void
	}

	declare class Button extends undefined$_FormWidget, undefined$_ButtonMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class DataList extends undefined$Memory {
		constructor(params: Object, srcNodeRef: HTMLElement): this;
		data: any[];
		idProperty: string;
		index: Object;
		add(object: Object, options: dojo.store.api.Store.PutDirectives): any;
		destroy(): void;
		fetchSelectedItem(): any;
		get(id: number): any;
		getChildren(
		parent: Object, options: dojo.store.api.Store.QueryOptions
	): dojo.store.api.Store.QueryResults;
		getIdentity(object: Object): any;
		getMetadata(object: Object): Object;
		put(object: Object, options: dojo.store.api.Store.PutDirectives): any;
		query(query: Object, options: dojo.store.api.Store.QueryOptions): any;
		queryEngine(query: Object, options: dojo.store.api.Store.QueryOptions): any;
		remove(id: number): any;
		setData(data: Object[]): void;
		transaction(): dojo.store.api.Store.Transaction
	}

	declare class _Spinner extends undefined$RangeBoundTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		defaultTimeout: number;
		set(property: "defaultTimeout", value: number): void;
		get(property: "defaultTimeout"): number;
		watch(
		property: "defaultTimeout", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		largeDelta: number;
		set(property: "largeDelta", value: number): void;
		get(property: "largeDelta"): number;
		watch(
		property: "largeDelta", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		minimumTimeout: number;
		set(property: "minimumTimeout", value: number): void;
		get(property: "minimumTimeout"): number;
		watch(
		property: "minimumTimeout", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		smallDelta: number;
		set(property: "smallDelta", value: number): void;
		get(property: "smallDelta"): number;
		watch(
		property: "smallDelta", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		timeoutChangeRate: number;
		set(property: "timeoutChangeRate", value: number): void;
		get(property: "timeoutChangeRate"): number;
		watch(
		property: "timeoutChangeRate", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		adjust(val: Object, delta: number): Object;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isValid: {
		(isFocused: boolean): any
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class CheckBox extends undefined$ToggleButton, undefined$_CheckBoxMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChecked(checked: boolean): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ComboButton extends undefined$DropDownButton {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		optionsTitle: string;
		set(property: "optionsTitle", value: string): void;
		get(property: "optionsTitle"): string;
		watch(
		property: "optionsTitle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(position?: String): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValue(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		loadAndOpenDropDown(): any;
		loadDropDown(callback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ComboBox extends undefined$ValidationTextBox, undefined$ComboBoxMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoComplete: boolean;
		set(property: "autoComplete", value: boolean): void;
		get(property: "autoComplete"): boolean;
		watch(
		property: "autoComplete", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		fetchProperties: Object;
		set(property: "fetchProperties", value: Object): void;
		get(property: "fetchProperties"): Object;
		watch(
		property: "fetchProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hasDownArrow: boolean;
		set(property: "hasDownArrow", value: boolean): void;
		get(property: "hasDownArrow"): boolean;
		watch(
		property: "hasDownArrow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		highlightMatch: string;
		set(property: "highlightMatch", value: string): void;
		get(property: "highlightMatch"): string;
		watch(
		property: "highlightMatch", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ignoreCase: boolean;
		set(property: "ignoreCase", value: boolean): void;
		get(property: "ignoreCase"): boolean;
		watch(
		property: "ignoreCase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		item: Object;
		set(property: "item", value: Object): void;
		get(property: "item"): Object;
		watch(
		property: "item", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelAttr: Object;
		set(property: "labelAttr", value: Object): void;
		get(property: "labelAttr"): Object;
		watch(
		property: "labelAttr", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelType: string;
		set(property: "labelType", value: string): void;
		get(property: "labelType"): string;
		watch(
		property: "labelType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pageSize: number;
		set(property: "pageSize", value: number): void;
		get(property: "pageSize"): number;
		watch(
		property: "pageSize", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		query: Object;
		set(property: "query", value: Object): void;
		get(property: "query"): Object;
		watch(
		property: "query", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		queryExpr: string;
		set(property: "queryExpr", value: string): void;
		get(property: "queryExpr"): string;
		watch(
		property: "queryExpr", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchAttr: string;
		set(property: "searchAttr", value: string): void;
		get(property: "searchAttr"): string;
		watch(
		property: "searchAttr", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchDelay: number;
		set(property: "searchDelay", value: number): void;
		get(property: "searchDelay"): number;
		watch(
		property: "searchDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		store: Object;
		set(property: "store", value: Object): void;
		get(property: "store"): Object;
		watch(
		property: "store", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		doHighlight(label: String, find: String): any;
		dropDownClass(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		isValid: {
		(isFocused: boolean): boolean
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		regExpGen(constraints: Object): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(isFocused: boolean): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onSearch(results: Object, query: Object, options: Object): void;
		onShow(): void
	}

	declare class CurrencyTextBox extends undefined$NumberTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		currency: string;
		set(property: "currency", value: string): void;
		get(property: "currency"): string;
		watch(
		property: "currency", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		editOptions: Object;
		set(property: "editOptions", value: Object): void;
		get(property: "editOptions"): Object;
		watch(
		property: "editOptions", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isValid: {
		(isFocused: boolean): boolean
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Form extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		accept: Object;
		set(property: "accept", value: Object): void;
		get(property: "accept"): Object;
		watch(
		property: "accept", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		accept-charset: string;
		set(property: "accept-charset", value: string): void;
		get(property: "accept-charset"): string;
		watch(
		property: "accept-charset", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		action: Object;
		set(property: "action", value: Object): void;
		get(property: "action"): Object;
		watch(
		property: "action", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		encType: Object;
		set(property: "encType", value: Object): void;
		get(property: "encType"): Object;
		watch(
		property: "encType", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		method: Object;
		set(property: "method", value: Object): void;
		get(property: "method"): Object;
		watch(
		property: "method", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		name: Object;
		set(property: "name", value: Object): void;
		get(property: "name"): Object;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		target: Object;
		set(property: "target", value: Object): void;
		get(property: "target"): Object;
		watch(
		property: "target", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectChildren(inStartup: boolean): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		disconnectChildren(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		execute(formContents: Object): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValues(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: {
		(): boolean
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(e?: Event): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setValues(val: any): any;
		startup(): void;
		submit(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onReset(e: Event): boolean;
		onShow(): void;
		onSubmit(e: Event): any;
		onValidStateChange(isValid: boolean): void
	}

	declare class DropDownButton extends undefined$Button, dijit$_Container {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValue(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		loadAndOpenDropDown(): any;
		loadDropDown(callback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class DateTextBox extends undefined$_DateTimeTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownDefaultValue: Date;
		set(property: "dropDownDefaultValue", value: Date): void;
		get(property: "dropDownDefaultValue"): Date;
		watch(
		property: "dropDownDefaultValue", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hasDownArrow: boolean;
		set(property: "hasDownArrow", value: boolean): void;
		get(property: "hasDownArrow"): boolean;
		watch(
		property: "hasDownArrow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: Date, val2: Date): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: Date, constraints: Object): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		isValid: {
		(isFocused: boolean): any
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(callback: Function): void;
		own(): any;
		parse(value: String, constraints: Object): any;
		pattern: {
		(options: Object): any
	};
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class HorizontalRule extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		container: string;
		set(property: "container", value: string): void;
		get(property: "container"): string;
		watch(
		property: "container", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		count: number;
		set(property: "count", value: number): void;
		get(property: "count"): number;
		watch(
		property: "count", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ruleStyle: string;
		set(property: "ruleStyle", value: string): void;
		get(property: "ruleStyle"): string;
		watch(
		property: "ruleStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class FilteringSelect extends undefined$MappedTextBox, undefined$ComboBoxMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoComplete: boolean;
		set(property: "autoComplete", value: boolean): void;
		get(property: "autoComplete"): boolean;
		watch(
		property: "autoComplete", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		fetchProperties: Object;
		set(property: "fetchProperties", value: Object): void;
		get(property: "fetchProperties"): Object;
		watch(
		property: "fetchProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hasDownArrow: boolean;
		set(property: "hasDownArrow", value: boolean): void;
		get(property: "hasDownArrow"): boolean;
		watch(
		property: "hasDownArrow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		highlightMatch: string;
		set(property: "highlightMatch", value: string): void;
		get(property: "highlightMatch"): string;
		watch(
		property: "highlightMatch", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ignoreCase: boolean;
		set(property: "ignoreCase", value: boolean): void;
		get(property: "ignoreCase"): boolean;
		watch(
		property: "ignoreCase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		item: Object;
		set(property: "item", value: Object): void;
		get(property: "item"): Object;
		watch(
		property: "item", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelAttr: Object;
		set(property: "labelAttr", value: Object): void;
		get(property: "labelAttr"): Object;
		watch(
		property: "labelAttr", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelType: string;
		set(property: "labelType", value: string): void;
		get(property: "labelType"): string;
		watch(
		property: "labelType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pageSize: number;
		set(property: "pageSize", value: number): void;
		get(property: "pageSize"): number;
		watch(
		property: "pageSize", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		query: Object;
		set(property: "query", value: Object): void;
		get(property: "query"): Object;
		watch(
		property: "query", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		queryExpr: string;
		set(property: "queryExpr", value: string): void;
		get(property: "queryExpr"): string;
		watch(
		property: "queryExpr", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchAttr: string;
		set(property: "searchAttr", value: string): void;
		get(property: "searchAttr"): string;
		watch(
		property: "searchAttr", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchDelay: number;
		set(property: "searchDelay", value: number): void;
		get(property: "searchDelay"): number;
		watch(
		property: "searchDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		store: Object;
		set(property: "store", value: Object): void;
		get(property: "store"): Object;
		watch(
		property: "store", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		doHighlight(label: String, find: String): any;
		dropDownClass(): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		isValid: {
		(): boolean
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onSearch(results: Object, query: Object, options: Object): void;
		onShow(): void
	}

	declare class HorizontalRuleLabels extends undefined$HorizontalRule {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		container: string;
		set(property: "container", value: string): void;
		get(property: "container"): string;
		watch(
		property: "container", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		count: number;
		set(property: "count", value: number): void;
		get(property: "count"): number;
		watch(
		property: "count", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		labels: Object;
		set(property: "labels", value: Object): void;
		get(property: "labels"): Object;
		watch(
		property: "labels", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelStyle: string;
		set(property: "labelStyle", value: string): void;
		get(property: "labelStyle"): string;
		watch(
		property: "labelStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maximum: number;
		set(property: "maximum", value: number): void;
		get(property: "maximum"): number;
		watch(
		property: "maximum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		minimum: number;
		set(property: "minimum", value: number): void;
		get(property: "minimum"): number;
		watch(
		property: "minimum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		numericMargin: number;
		set(property: "numericMargin", value: number): void;
		get(property: "numericMargin"): number;
		watch(
		property: "numericMargin", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ruleStyle: string;
		set(property: "ruleStyle", value: string): void;
		get(property: "ruleStyle"): string;
		watch(
		property: "ruleStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getLabels(): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class MappedTextBox extends undefined$ValidationTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Object;
		set(property: "value", value: Object): void;
		get(property: "value"): Object;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isValid: {
		(isFocused: boolean): any
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints?: Object): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class MultiSelect extends undefined$_FormValueWidget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiple: boolean;
		set(property: "multiple", value: boolean): void;
		get(property: "multiple"): boolean;
		watch(
		property: "multiple", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		size: number;
		set(property: "size", value: number): void;
		get(property: "size"): number;
		watch(
		property: "size", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addSelected(select: dijit.form.MultiSelect): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getSelected(): any;
		getValue(): any;
		invertSelection(onChange: boolean): void;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		resize(size: Object): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class HorizontalSlider extends undefined$_FormValueWidget, dijit$_Container {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		clickSelect: boolean;
		set(property: "clickSelect", value: boolean): void;
		get(property: "clickSelect"): boolean;
		watch(
		property: "clickSelect", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		discreteValues: number;
		set(property: "discreteValues", value: number): void;
		get(property: "discreteValues"): number;
		watch(
		property: "discreteValues", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maximum: number;
		set(property: "maximum", value: number): void;
		get(property: "maximum"): number;
		watch(
		property: "maximum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		minimum: number;
		set(property: "minimum", value: number): void;
		get(property: "minimum"): number;
		watch(
		property: "minimum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pageIncrement: number;
		set(property: "pageIncrement", value: number): void;
		get(property: "pageIncrement"): number;
		watch(
		property: "pageIncrement", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showButtons: boolean;
		set(property: "showButtons", value: boolean): void;
		get(property: "showButtons"): boolean;
		watch(
		property: "showButtons", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		slideDuration: number;
		set(property: "slideDuration", value: number): void;
		get(property: "slideDuration"): number;
		watch(
		property: "slideDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: number;
		set(property: "value", value: number): void;
		get(property: "value"): number;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValue(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class NumberTextBox extends undefined$RangeBoundTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		editOptions: Object;
		set(property: "editOptions", value: Object): void;
		get(property: "editOptions"): Object;
		watch(
		property: "editOptions", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isValid: any;
		set(property: "isValid", value: any): void;
		get(property: "isValid"): any;
		watch(
		property: "isValid", callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		Mixin(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class NumberSpinner extends undefined$_Spinner {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		defaultTimeout: number;
		set(property: "defaultTimeout", value: number): void;
		get(property: "defaultTimeout"): number;
		watch(
		property: "defaultTimeout", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		editOptions: Object;
		set(property: "editOptions", value: Object): void;
		get(property: "editOptions"): Object;
		watch(
		property: "editOptions", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		largeDelta: number;
		set(property: "largeDelta", value: number): void;
		get(property: "largeDelta"): number;
		watch(
		property: "largeDelta", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		minimumTimeout: number;
		set(property: "minimumTimeout", value: number): void;
		get(property: "minimumTimeout"): number;
		watch(
		property: "minimumTimeout", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		smallDelta: number;
		set(property: "smallDelta", value: number): void;
		get(property: "smallDelta"): number;
		watch(
		property: "smallDelta", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		timeoutChangeRate: number;
		set(property: "timeoutChangeRate", value: number): void;
		get(property: "timeoutChangeRate"): number;
		watch(
		property: "timeoutChangeRate", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		adjust(val: Object, delta: number): any;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isValid: {
		(isFocused: boolean): any
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class RadioButton extends undefined$CheckBox, undefined$_RadioButtonMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChecked(checked: boolean): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class SimpleTextarea extends undefined$TextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cols: string;
		set(property: "cols", value: string): void;
		get(property: "cols"): string;
		watch(
		property: "cols", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rows: number;
		set(property: "rows", value: number): void;
		get(property: "rows"): number;
		watch(
		property: "rows", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(value: String): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class RangeBoundTextBox extends undefined$MappedTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: any;
		set(property: "pattern", value: any): void;
		get(property: "pattern"): any;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Object;
		set(property: "value", value: Object): void;
		get(property: "value"): Object;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: Object, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isValid: {
		(isFocused: boolean): any
	};
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): String;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Textarea extends undefined$SimpleTextarea, undefined$_ExpandingTextAreaMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		cols: string;
		set(property: "cols", value: string): void;
		get(property: "cols"): string;
		watch(
		property: "cols", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rows: number;
		set(property: "rows", value: number): void;
		get(property: "rows"): number;
		watch(
		property: "rows", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(value: String): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		resize(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class Select extends undefined$_FormSelectWidget, dijit$_HasDropDown {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		emptyLabel: string;
		set(property: "emptyLabel", value: string): void;
		get(property: "emptyLabel"): string;
		watch(
		property: "emptyLabel", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		labelAttr: Object;
		set(property: "labelAttr", value: Object): void;
		get(property: "labelAttr"): Object;
		watch(
		property: "labelAttr", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadChildrenOnOpen: boolean;
		set(property: "loadChildrenOnOpen", value: boolean): void;
		get(property: "loadChildrenOnOpen"): boolean;
		watch(
		property: "loadChildrenOnOpen", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		multiple: boolean;
		set(property: "multiple", value: boolean): void;
		get(property: "multiple"): boolean;
		watch(
		property: "multiple", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onFetch: Function;
		set(property: "onFetch", value: Function): void;
		get(property: "onFetch"): Function;
		watch(
		property: "onFetch", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		options: Object;
		set(property: "options", value: Object): void;
		get(property: "options"): Object;
		watch(
		property: "options", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		query: Object;
		set(property: "query", value: Object): void;
		get(property: "query"): Object;
		watch(
		property: "query", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		queryOptions: Object;
		set(property: "queryOptions", value: Object): void;
		get(property: "queryOptions"): Object;
		watch(
		property: "queryOptions", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		sortByLabel: boolean;
		set(property: "sortByLabel", value: boolean): void;
		get(property: "sortByLabel"): boolean;
		watch(
		property: "sortByLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		store: Object;
		set(property: "store", value: Object): void;
		get(property: "store"): Object;
		watch(
		property: "store", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addOption(option: dijit.form._FormSelectWidget.___SelectOption): void;
		addOption(option: dijit.form._FormSelectWidget.___SelectOption[]): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		closeDropDown(focus: boolean): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getOptions(valueOrIdx: any): any;
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		isLoaded(): any;
		isValid: {
		(isFocused: boolean): boolean
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeOption(valueOrIdx: String): void;
		removeOption(valueOrIdx: dijit.form._FormSelectWidget.___SelectOption): void;
		removeOption(valueOrIdx: number): void;
		removeOption(valueOrIdx: any[]): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setStore(store: dojo.store.api.Store, selectedValue: any, fetchArgs: Object): any;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		updateOption(newOption: dijit.form._FormSelectWidget.___SelectOption): void;
		updateOption(newOption: dijit.form._FormSelectWidget.___SelectOption[]): void;
		validate(isFocused: boolean): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyboardSearch(
		item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onSetStore(): void;
		onShow(): void
	}

	declare class TextBox extends undefined$_FormValueWidget, undefined$_TextBoxMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Object;
		set(property: "value", value: Object): void;
		get(property: "value"): Object;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		selectInputText(element: HTMLElement, start: number, stop: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class TimeTextBox extends undefined$_DateTimeTextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoWidth: boolean;
		set(property: "autoWidth", value: boolean): void;
		get(property: "autoWidth"): boolean;
		watch(
		property: "autoWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dropDown: Object;
		set(property: "dropDown", value: Object): void;
		get(property: "dropDown"): Object;
		watch(
		property: "dropDown", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dropDownDefaultValue: Date;
		set(property: "dropDownDefaultValue", value: Date): void;
		get(property: "dropDownDefaultValue"): Date;
		watch(
		property: "dropDownDefaultValue", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		dropDownPosition: Object;
		set(property: "dropDownPosition", value: Object): void;
		get(property: "dropDownPosition"): Object;
		watch(
		property: "dropDownPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		forceWidth: boolean;
		set(property: "forceWidth", value: boolean): void;
		get(property: "forceWidth"): boolean;
		watch(
		property: "forceWidth", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hasDownArrow: boolean;
		set(property: "hasDownArrow", value: boolean): void;
		get(property: "hasDownArrow"): boolean;
		watch(
		property: "hasDownArrow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxHeight: number;
		set(property: "maxHeight", value: number): void;
		get(property: "maxHeight"): number;
		watch(
		property: "maxHeight", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		rangeMessage: string;
		set(property: "rangeMessage", value: string): void;
		get(property: "rangeMessage"): string;
		watch(
		property: "rangeMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		closeDropDown(focus: boolean): void;
		compare(val1: Date, val2: Date): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: Date, constraints: Object): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isInRange(isFocused: boolean): any;
		isLeftToRight(): any;
		isLoaded(): boolean;
		isValid: {
		(isFocused: boolean): any
	};
		loadAndOpenDropDown(): any;
		loadDropDown(loadCallback: Function): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		openDropDown(callback: Function): void;
		own(): any;
		parse(value: String, constraints: Object): any;
		pattern: {
		(options: Object): any
	};
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		popupClass: {
		(): void
	};
		postCreate(): void;
		postMixInProperties(): void;
		rangeCheck(
		primitive: number, constraints: dijit.form.RangeBoundTextBox.___Constraints
	): boolean;
		regExpGen(constraints: Object): void;
		reset(): void;
		serialize(val: any, options: Object): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toggleDropDown(): void;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ToggleButton extends undefined$Button, undefined$_ToggleButtonMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChecked(checked: boolean): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class VerticalRule extends undefined$HorizontalRule {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		container: string;
		set(property: "container", value: string): void;
		get(property: "container"): string;
		watch(
		property: "container", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		count: number;
		set(property: "count", value: number): void;
		get(property: "count"): number;
		watch(
		property: "count", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ruleStyle: string;
		set(property: "ruleStyle", value: string): void;
		get(property: "ruleStyle"): string;
		watch(
		property: "ruleStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class VerticalRuleLabels extends undefined$HorizontalRuleLabels {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		container: string;
		set(property: "container", value: string): void;
		get(property: "container"): string;
		watch(
		property: "container", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		count: number;
		set(property: "count", value: number): void;
		get(property: "count"): number;
		watch(
		property: "count", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		labels: Object;
		set(property: "labels", value: Object): void;
		get(property: "labels"): Object;
		watch(
		property: "labels", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		labelStyle: string;
		set(property: "labelStyle", value: string): void;
		get(property: "labelStyle"): string;
		watch(
		property: "labelStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maximum: number;
		set(property: "maximum", value: number): void;
		get(property: "maximum"): number;
		watch(
		property: "maximum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		minimum: number;
		set(property: "minimum", value: number): void;
		get(property: "minimum"): number;
		watch(
		property: "minimum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		numericMargin: number;
		set(property: "numericMargin", value: number): void;
		get(property: "numericMargin"): number;
		watch(
		property: "numericMargin", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ruleStyle: string;
		set(property: "ruleStyle", value: string): void;
		get(property: "ruleStyle"): string;
		watch(
		property: "ruleStyle", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getLabels(): any;
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ValidationTextBox extends undefined$TextBox {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		constraints: Object;
		set(property: "constraints", value: Object): void;
		get(property: "constraints"): Object;
		watch(
		property: "constraints", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		displayedValue: string;
		set(property: "displayedValue", value: string): void;
		get(property: "displayedValue"): string;
		watch(
		property: "displayedValue", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		invalidMessage: string;
		set(property: "invalidMessage", value: string): void;
		get(property: "invalidMessage"): string;
		watch(
		property: "invalidMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isValid: any;
		set(property: "isValid", value: any): void;
		get(property: "isValid"): any;
		watch(
		property: "isValid", callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lowercase: boolean;
		set(property: "lowercase", value: boolean): void;
		get(property: "lowercase"): boolean;
		watch(
		property: "lowercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		maxLength: string;
		set(property: "maxLength", value: string): void;
		get(property: "maxLength"): string;
		watch(
		property: "maxLength", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		message: string;
		set(property: "message", value: string): void;
		get(property: "message"): string;
		watch(
		property: "message", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		missingMessage: string;
		set(property: "missingMessage", value: string): void;
		get(property: "missingMessage"): string;
		watch(
		property: "missingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pattern: string;
		set(property: "pattern", value: string): void;
		get(property: "pattern"): string;
		watch(
		property: "pattern", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		placeHolder: string;
		set(property: "placeHolder", value: string): void;
		get(property: "placeHolder"): string;
		watch(
		property: "placeHolder", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		promptMessage: string;
		set(property: "promptMessage", value: string): void;
		get(property: "promptMessage"): string;
		watch(
		property: "promptMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		propercase: boolean;
		set(property: "propercase", value: boolean): void;
		get(property: "propercase"): boolean;
		watch(
		property: "propercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		regExp: string;
		set(property: "regExp", value: string): void;
		get(property: "regExp"): string;
		watch(
		property: "regExp", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		required: boolean;
		set(property: "required", value: boolean): void;
		get(property: "required"): boolean;
		watch(
		property: "required", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectOnClick: boolean;
		set(property: "selectOnClick", value: boolean): void;
		get(property: "selectOnClick"): boolean;
		watch(
		property: "selectOnClick", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		state: string;
		set(property: "state", value: string): void;
		get(property: "state"): string;
		watch(
		property: "state", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltipPosition: Object;
		set(property: "tooltipPosition", value: Object): void;
		get(property: "tooltipPosition"): Object;
		watch(
		property: "tooltipPosition", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		trim: boolean;
		set(property: "trim", value: boolean): void;
		get(property: "trim"): boolean;
		watch(
		property: "trim", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		uppercase: boolean;
		set(property: "uppercase", value: boolean): void;
		get(property: "uppercase"): boolean;
		watch(
		property: "uppercase", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		value: Object;
		set(property: "value", value: Object): void;
		get(property: "value"): Object;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		displayMessage(message: String): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		filter(val: any): any;
		focus(): void;
		format(value: String, constraints: Object): String;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getDisplayedValue(): any;
		getErrorMessage(isFocused: boolean): any;
		getParent(): any;
		getPromptMessage(isFocused: boolean): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		parse(value: String, constraints: Object): String;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		regExpGen(constraints: Object): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setDisplayedValue(value: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		validate(isFocused: boolean): any;
		validator(value: any, constraints: Object): any;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onInput(event: any): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class VerticalSlider extends undefined$HorizontalSlider {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		clickSelect: boolean;
		set(property: "clickSelect", value: boolean): void;
		get(property: "clickSelect"): boolean;
		watch(
		property: "clickSelect", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		discreteValues: number;
		set(property: "discreteValues", value: number): void;
		get(property: "discreteValues"): number;
		watch(
		property: "discreteValues", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		maximum: number;
		set(property: "maximum", value: number): void;
		get(property: "maximum"): number;
		watch(
		property: "maximum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		minimum: number;
		set(property: "minimum", value: number): void;
		get(property: "minimum"): number;
		watch(
		property: "minimum", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		pageIncrement: number;
		set(property: "pageIncrement", value: number): void;
		get(property: "pageIncrement"): number;
		watch(
		property: "pageIncrement", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		readOnly: boolean;
		set(property: "readOnly", value: boolean): void;
		get(property: "readOnly"): boolean;
		watch(
		property: "readOnly", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showButtons: boolean;
		set(property: "showButtons", value: boolean): void;
		get(property: "showButtons"): boolean;
		watch(
		property: "showButtons", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		slideDuration: number;
		set(property: "slideDuration", value: number): void;
		get(property: "slideDuration"): number;
		watch(
		property: "slideDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: number;
		set(property: "value", value: number): void;
		get(property: "value"): number;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		getValue(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setDisabled(disabled: boolean): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		undo(): void;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module '_DateTimeTextBox' {
				declare class ___Constraints  {
		constructor(): this;
		am: string;
		datePattern: string;
		formatLength: string;
		fullYear: boolean;
		locale: string;
		max: number;
		min: number;
		pm: string;
		selector: string;
		strict: boolean;
		timePattern: string
	}

	
}

declare module '_FormSelectWidget' {
		declare interface ___SelectOption {
		disabled?: boolean,
		label: string,
		selected?: boolean,
		value: string
	}

			
}

declare module 'HorizontalSlider' {
				declare class _Mover extends undefined$Mover {
		constructor(node: HTMLElement, e: Event, host?: Object): this;
		destroy(e?: any): void;
		emit(type: any, event: any): any;
		on(type: any, listener: any): any;
		onFirstMove(e: any): void;
		onMouseMove(e: any): void;
		onMouseUp(e: any): void
	}

	
}

declare module 'NumberTextBox' {
				declare class ___Constraints  {
		constructor(): this;
		fractional: boolean;
		locale: string;
		max: number;
		min: number;
		pattern: string;
		places: number;
		round: number;
		strict: boolean;
		type: string
	}

	declare class Mixin  {
		constructor(): this;
		constraints: Object;
		editOptions: Object;
		value: number;
		filter(value: number): number;
		format(value: number, constraints: Object): any;
		isValid: {
		(isFocused: boolean): any
	};
		parse(value: String, constraints: Object): any;
		pattern(constraints: any): String;
		postMixInProperties(): void;
		serialize(value: number, options: Object): String
	}

	
}

declare module 'RangeBoundTextBox' {
				declare class ___Constraints  {
		constructor(): this;
		max: number;
		min: number
	}

	
}

declare module 'Select' {
				declare class _Menu extends dijit$DropDownMenu {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		activated: boolean;
		set(property: "activated", value: boolean): void;
		get(property: "activated"): boolean;
		watch(
		property: "activated", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		autoFocus: boolean;
		set(property: "autoFocus", value: boolean): void;
		get(property: "autoFocus"): boolean;
		watch(
		property: "autoFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focusedChild: Object;
		set(property: "focusedChild", value: Object): void;
		get(property: "focusedChild"): Object;
		watch(
		property: "focusedChild", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		multiCharSearchDuration: number;
		set(property: "multiCharSearchDuration", value: number): void;
		get(property: "multiCharSearchDuration"): number;
		watch(
		property: "multiCharSearchDuration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parentMenu: Object;
		set(property: "parentMenu", value: Object): void;
		get(property: "parentMenu"): Object;
		watch(
		property: "parentMenu", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		passivePopupDelay: number;
		set(property: "passivePopupDelay", value: number): void;
		get(property: "passivePopupDelay"): number;
		watch(
		property: "passivePopupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		popupDelay: number;
		set(property: "popupDelay", value: number): void;
		get(property: "popupDelay"): number;
		watch(
		property: "popupDelay", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selected: Object;
		set(property: "selected", value: Object): void;
		get(property: "selected"): Object;
		watch(
		property: "selected", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		childSelector(node: HTMLElement): any;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		connectKeyNavHandlers(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		focusChild(widget: dijit._WidgetBase, last: boolean): void;
		focusFirstChild(): void;
		focusLastChild(): void;
		focusNext(): void;
		focusPrev(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		startupKeyNavChildren(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onCancel(closeAll: boolean): void;
		onClick(event: any): void;
		onDblClick(event: any): void;
		onExecute(): void;
		onFocus(): void;
		onHide(): void;
		onItemHover(item: dijit.MenuItem): void;
		onItemUnhover(item: dijit.MenuItem): void;
		onKeyboardSearch(
		item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number
	): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'layout' {
		declare interface utils {
		layoutChildren(
		container: HTMLElement, dim: Object, children: dijit._WidgetBase[], changedRegionId: String, changedRegionSize: number
	): void,
		marginBox2contentBox(node: HTMLElement, mb: Object): Object
	}

		declare class _ContentPaneResizeMixin  {
		constructor(): this;
		doLayout: boolean;
		isLayoutContainer: boolean;
		resize(changeSize: any, resultSize: any): void;
		startup(): void
	}

	declare class _LayoutWidget extends dijit$_Widget, dijit$_Container {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: Object, resultSize: Object): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class AccordionContainer extends undefined$StackContainer {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		duration: number;
		set(property: "duration", value: number): void;
		get(property: "duration"): number;
		watch(
		property: "duration", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectedChildWidget: Object;
		set(property: "selectedChildWidget", value: Object): void;
		get(property: "selectedChildWidget"): Object;
		watch(
		property: "selectedChildWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		back(): any;
		buildRendering(): void;
		buttonWidget(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		forward(): any;
		get(name: any): any;
		getChildren(): any;
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(child: any): void;
		resize(): void;
		selectChild(page: dijit._WidgetBase, animate: boolean): any;
		selectChild(page: String, animate: boolean): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _TabContainerBase extends undefined$StackContainer, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		nested: boolean;
		set(property: "nested", value: boolean): void;
		get(property: "nested"): boolean;
		watch(
		property: "nested", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectedChildWidget: Object;
		set(property: "selectedChildWidget", value: Object): void;
		get(property: "selectedChildWidget"): Object;
		watch(
		property: "selectedChildWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabPosition: string;
		set(property: "tabPosition", value: string): void;
		get(property: "tabPosition"): string;
		watch(
		property: "tabPosition", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabStrip: boolean;
		set(property: "tabStrip", value: boolean): void;
		get(property: "tabStrip"): boolean;
		watch(
		property: "tabStrip", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		back(): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		forward(): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(): void;
		selectChild(page: dijit._WidgetBase, animate: boolean): any;
		selectChild(page: String, animate: boolean): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class BorderContainer extends undefined$LayoutContainer {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ChildWidgetProperties: Object;
		set(property: "ChildWidgetProperties", value: Object): void;
		get(property: "ChildWidgetProperties"): Object;
		watch(
		property: "ChildWidgetProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		design: string;
		set(property: "design", value: string): void;
		get(property: "design"): string;
		watch(
		property: "design", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		gutters: boolean;
		set(property: "gutters", value: boolean): void;
		get(property: "gutters"): boolean;
		watch(
		property: "gutters", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		liveSplitters: boolean;
		set(property: "liveSplitters", value: boolean): void;
		get(property: "liveSplitters"): boolean;
		watch(
		property: "liveSplitters", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any;
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		getSplitter(region: String): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(newSize: any, currentSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class AccordionPane extends undefined$ContentPane {
		constructor(): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onSelected(): void;
		onShow(): void;
		onUnload(): void
	}

	declare class LayoutContainer extends undefined$_LayoutWidget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ChildWidgetProperties: Object;
		set(property: "ChildWidgetProperties", value: Object): void;
		get(property: "ChildWidgetProperties"): Object;
		watch(
		property: "ChildWidgetProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		design: string;
		set(property: "design", value: string): void;
		get(property: "design"): string;
		watch(
		property: "design", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: Object, resultSize: Object): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class ContentPane extends dijit$_Widget, dijit$_Container {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void
	}

	declare class LinkPane extends undefined$ContentPane, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		content: string;
		set(property: "content", value: string): void;
		get(property: "content"): string;
		watch(
		property: "content", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		errorMessage: string;
		set(property: "errorMessage", value: string): void;
		get(property: "errorMessage"): string;
		watch(
		property: "errorMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		extractContent: boolean;
		set(property: "extractContent", value: boolean): void;
		get(property: "extractContent"): boolean;
		watch(
		property: "extractContent", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		href: string;
		set(property: "href", value: string): void;
		get(property: "href"): string;
		watch(
		property: "href", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ioArgs: Object;
		set(property: "ioArgs", value: Object): void;
		get(property: "ioArgs"): Object;
		watch(
		property: "ioArgs", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		isLoaded: boolean;
		set(property: "isLoaded", value: boolean): void;
		get(property: "isLoaded"): boolean;
		watch(
		property: "isLoaded", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		loadingMessage: string;
		set(property: "loadingMessage", value: string): void;
		get(property: "loadingMessage"): string;
		watch(
		property: "loadingMessage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		onLoadDeferred: Object;
		set(property: "onLoadDeferred", value: Object): void;
		get(property: "onLoadDeferred"): Object;
		watch(
		property: "onLoadDeferred", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		parseOnLoad: boolean;
		set(property: "parseOnLoad", value: boolean): void;
		get(property: "parseOnLoad"): boolean;
		watch(
		property: "parseOnLoad", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		parserScope: string;
		set(property: "parserScope", value: string): void;
		get(property: "parserScope"): string;
		watch(
		property: "parserScope", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		preload: boolean;
		set(property: "preload", value: boolean): void;
		get(property: "preload"): boolean;
		watch(
		property: "preload", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		preventCache: boolean;
		set(property: "preventCache", value: boolean): void;
		get(property: "preventCache"): boolean;
		watch(
		property: "preventCache", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		refreshOnShow: boolean;
		set(property: "refreshOnShow", value: boolean): void;
		get(property: "refreshOnShow"): boolean;
		watch(
		property: "refreshOnShow", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		stopParser: boolean;
		set(property: "stopParser", value: boolean): void;
		get(property: "stopParser"): boolean;
		watch(
		property: "stopParser", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		cancel(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		create(params: any, srcNodeRef: any): void;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		ioMethod(args: Object): any;
		isFocusable(): any;
		isLeftToRight(): any;
		markupFactory(params: any, node: any, ctor: any): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		refresh(): any;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(changeSize: any, resultSize: any): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setContent(data: String): void;
		setContent(data: HTMLElement): void;
		setContent(data: NodeList): void;
		setHref(href: String): any;
		setHref(href: URL): any;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onContentError(error: Error): void;
		onDblClick(event: any): void;
		onDownloadEnd(): void;
		onDownloadError(error: Error): any;
		onDownloadStart(): any;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onLoad(data: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onUnload(): void
	}

	declare class ScrollingTabController extends undefined$TabController, dijit$_WidgetsInTemplateMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonWidgetCloseClass: string;
		set(property: "buttonWidgetCloseClass", value: string): void;
		get(property: "buttonWidgetCloseClass"): string;
		watch(
		property: "buttonWidgetCloseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerId: string;
		set(property: "containerId", value: string): void;
		get(property: "containerId"): string;
		watch(
		property: "containerId", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		contextRequire: Function;
		set(property: "contextRequire", value: Function): void;
		get(property: "contextRequire"): Function;
		watch(
		property: "contextRequire", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabPosition: string;
		set(property: "tabPosition", value: string): void;
		get(property: "tabPosition"): string;
		watch(
		property: "tabPosition", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabStripClass: string;
		set(property: "tabStripClass", value: string): void;
		get(property: "tabStripClass"): string;
		watch(
		property: "tabStripClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		useMenu: boolean;
		set(property: "useMenu", value: boolean): void;
		get(property: "useMenu"): boolean;
		watch(
		property: "useMenu", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		useSlider: boolean;
		set(property: "useSlider", value: boolean): void;
		get(property: "useSlider"): boolean;
		watch(
		property: "useSlider", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		widgetsInTemplate: boolean;
		set(property: "widgetsInTemplate", value: boolean): void;
		get(property: "widgetsInTemplate"): boolean;
		watch(
		property: "widgetsInTemplate", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		buttonWidget(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		createSmoothScroll(x: number): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		doSlide(direction: number, node: HTMLElement): void;
		doSlideLeft(e: Event): void;
		doSlideRight(e: Event): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		pane2button(id: String): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(dim: any): Object;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onAddChild(page: any, insertIndex: any): void;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onRemoveChild(page: any, insertIndex: any): void;
		onSelectChild(page: dijit._WidgetBase): void;
		onShow(): void;
		onStartup(): void
	}

	declare class SplitContainer extends undefined$_LayoutWidget {
		constructor(): this;
		activeSizing: boolean;
		set(property: "activeSizing", value: boolean): void;
		get(property: "activeSizing"): boolean;
		watch(
		property: "activeSizing", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ChildWidgetProperties: Object;
		set(property: "ChildWidgetProperties", value: Object): void;
		get(property: "ChildWidgetProperties"): Object;
		watch(
		property: "ChildWidgetProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		orientation: string;
		set(property: "orientation", value: string): void;
		get(property: "orientation"): string;
		watch(
		property: "orientation", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		sizerWidth: number;
		set(property: "sizerWidth", value: number): void;
		get(property: "sizerWidth"): number;
		watch(
		property: "sizerWidth", callback: {
		(property?: string, oldValue?: number, newValue?: number): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		beginSizing(e: any, i: any): void;
		buildRendering(): void;
		changeSizing(e: any): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		endSizing(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: any): void;
		resize(changeSize: Object, resultSize: Object): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class StackContainer extends undefined$_LayoutWidget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ChildWidgetProperties: Object;
		set(property: "ChildWidgetProperties", value: Object): void;
		get(property: "ChildWidgetProperties"): Object;
		watch(
		property: "ChildWidgetProperties", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectedChildWidget: Object;
		set(property: "selectedChildWidget", value: Object): void;
		get(property: "selectedChildWidget"): Object;
		watch(
		property: "selectedChildWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		back(): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		forward(): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(): void;
		selectChild(page: dijit._WidgetBase, animate: boolean): any;
		selectChild(page: String, animate: boolean): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class StackController extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonWidgetCloseClass: string;
		set(property: "buttonWidgetCloseClass", value: string): void;
		get(property: "buttonWidgetCloseClass"): string;
		watch(
		property: "buttonWidgetCloseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerId: string;
		set(property: "containerId", value: string): void;
		get(property: "containerId"): string;
		watch(
		property: "containerId", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		buttonWidget(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		pane2button(id: String): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		StackButton(): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class TabContainer extends undefined$_TabContainerBase {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		controllerWidget: Object;
		set(property: "controllerWidget", value: Object): void;
		get(property: "controllerWidget"): Object;
		watch(
		property: "controllerWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		doLayout: boolean;
		set(property: "doLayout", value: boolean): void;
		get(property: "doLayout"): boolean;
		watch(
		property: "doLayout", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		nested: boolean;
		set(property: "nested", value: boolean): void;
		get(property: "nested"): boolean;
		watch(
		property: "nested", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		persist: boolean;
		set(property: "persist", value: boolean): void;
		get(property: "persist"): boolean;
		watch(
		property: "persist", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		selectedChildWidget: Object;
		set(property: "selectedChildWidget", value: Object): void;
		get(property: "selectedChildWidget"): Object;
		watch(
		property: "selectedChildWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabPosition: string;
		set(property: "tabPosition", value: string): void;
		get(property: "tabPosition"): string;
		watch(
		property: "tabPosition", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabStrip: boolean;
		set(property: "tabStrip", value: boolean): void;
		get(property: "tabStrip"): boolean;
		watch(
		property: "tabStrip", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		useMenu: boolean;
		set(property: "useMenu", value: boolean): void;
		get(property: "useMenu"): boolean;
		watch(
		property: "useMenu", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		useSlider: boolean;
		set(property: "useSlider", value: boolean): void;
		get(property: "useSlider"): boolean;
		watch(
		property: "useSlider", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		addChild(child: dijit._WidgetBase, insertIndex: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		back(): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		forward(): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexInParent(): any;
		getIndexOfChild(child: dijit._WidgetBase): any;
		getNextSibling(): any;
		getParent(): any;
		getPreviousSibling(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		layout(): void;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		resize(): void;
		selectChild(page: dijit._WidgetBase, animate: boolean): any;
		selectChild(page: String, animate: boolean): any;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class TabController extends undefined$StackController {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonWidgetCloseClass: string;
		set(property: "buttonWidgetCloseClass", value: string): void;
		get(property: "buttonWidgetCloseClass"): string;
		watch(
		property: "buttonWidgetCloseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerId: string;
		set(property: "containerId", value: string): void;
		get(property: "containerId"): string;
		watch(
		property: "containerId", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabPosition: string;
		set(property: "tabPosition", value: string): void;
		get(property: "tabPosition"): string;
		watch(
		property: "tabPosition", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		addChild(widget: dijit._WidgetBase, insertIndex?: number): void;
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		buttonWidget(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: any): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getIndexOfChild(child: dijit._WidgetBase): any;
		getParent(): any;
		hasChildren(): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		pane2button(id: String): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		removeChild(widget: dijit._WidgetBase): void;
		removeChild(widget: number): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		TabButton(): void;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'AccordionContainer' {
				declare class _InnerContainer extends dijit$_Widget, dijit$_CssStateMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		buttonWidget: Function;
		set(property: "buttonWidget", value: Function): void;
		get(property: "buttonWidget"): Function;
		watch(
		property: "buttonWidget", callback: {
		(property?: string, oldValue?: Function, newValue?: Function): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		contentWidget: Object;
		set(property: "contentWidget", value: Object): void;
		get(property: "contentWidget"): Object;
		watch(
		property: "contentWidget", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		isLayoutContainer: boolean;
		set(property: "isLayoutContainer", value: boolean): void;
		get(property: "isLayoutContainer"): boolean;
		watch(
		property: "isLayoutContainer", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _Button extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClassAttr: string;
		set(property: "iconClassAttr", value: string): void;
		get(property: "iconClassAttr"): string;
		watch(
		property: "iconClassAttr", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getTitleHeight(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'BorderContainer' {
		declare interface ChildWidgetProperties {
		layoutAlign: string,
		layoutPriority: number,
		maxSize: number,
		minSize: number,
		region: string,
		splitter: boolean
	}

		declare class _Gutter extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	declare class _Splitter extends dijit$_Widget, dijit$_TemplatedMixin {
		constructor(): this;
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		child: Object;
		set(property: "child", value: Object): void;
		get(property: "child"): Object;
		watch(
		property: "child", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		container: Object;
		set(property: "container", value: Object): void;
		get(property: "container"): Object;
		watch(
		property: "container", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		live: boolean;
		set(property: "live", value: boolean): void;
		get(property: "live"): boolean;
		watch(
		property: "live", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		region: string;
		set(property: "region", value: string): void;
		get(property: "region"): string;
		watch(
		property: "region", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'LayoutContainer' {
		declare interface ChildWidgetProperties {
		layoutAlign: string,
		layoutPriority: number,
		region: string
	}

			
}

declare module 'SplitContainer' {
		declare interface ChildWidgetProperties {
		sizeMin: number,
		sizeShare: number
	}

			
}

declare module 'StackContainer' {
		declare interface ChildWidgetProperties {
		closable: boolean,
		disabled: boolean,
		iconClass: string,
		selected: boolean,
		showTitle: boolean
	}

			
}

declare module 'StackController' {
				declare class StackButton extends undefined$ToggleButton {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		closeButton: boolean;
		set(property: "closeButton", value: boolean): void;
		get(property: "closeButton"): boolean;
		watch(
		property: "closeButton", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(evt?: Event): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChecked(checked: boolean): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'TabController' {
				declare class TabButton extends undefined$ToggleButton {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		alt: string;
		set(property: "alt", value: string): void;
		get(property: "alt"): string;
		watch(
		property: "alt", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		aria-label: string;
		set(property: "aria-label", value: string): void;
		get(property: "aria-label"): string;
		watch(
		property: "aria-label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		checked: boolean;
		set(property: "checked", value: boolean): void;
		get(property: "checked"): boolean;
		watch(
		property: "checked", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		closeButton: boolean;
		set(property: "closeButton", value: boolean): void;
		get(property: "closeButton"): boolean;
		watch(
		property: "closeButton", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		disabled: boolean;
		set(property: "disabled", value: boolean): void;
		get(property: "disabled"): boolean;
		watch(
		property: "disabled", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		iconClass: string;
		set(property: "iconClass", value: string): void;
		get(property: "iconClass"): string;
		watch(
		property: "iconClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		intermediateChanges: boolean;
		set(property: "intermediateChanges", value: boolean): void;
		get(property: "intermediateChanges"): boolean;
		watch(
		property: "intermediateChanges", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		label: string;
		set(property: "label", value: string): void;
		get(property: "label"): string;
		watch(
		property: "label", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		name: string;
		set(property: "name", value: string): void;
		get(property: "name"): string;
		watch(
		property: "name", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		scrollOnFocus: boolean;
		set(property: "scrollOnFocus", value: boolean): void;
		get(property: "scrollOnFocus"): boolean;
		watch(
		property: "scrollOnFocus", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		showLabel: boolean;
		set(property: "showLabel", value: boolean): void;
		get(property: "showLabel"): boolean;
		watch(
		property: "showLabel", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		type: string;
		set(property: "type", value: string): void;
		get(property: "type"): string;
		watch(
		property: "type", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: string;
		set(property: "value", value: string): void;
		get(property: "value"): string;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		compare(val1: any, val2: any): number;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getDescendants(): any[];
		getParent(): any;
		getValue(): any;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		reset(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setChecked(checked: boolean): void;
		setDisabled(disabled: boolean): void;
		setLabel(content: String): void;
		setValue(value: String): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(newValue: any): void;
		onClick(event: Event): boolean;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void
	}

	
}

declare module 'tree' {
				declare class _dndContainer  {
		constructor(tree: HTMLElement, params: Object): this;
		current: Object;
		destroy(): void;
		onMouseOut(widget: dijit.Tree._TreeNode, evt: Event): void;
		onMouseOver(widget: dijit.Tree._TreeNode, evt: Event): void;
		onOutEvent(): void;
		onOverEvent(): void
	}

	declare class _dndSelector extends undefined$_dndContainer {
		constructor(): this;
		current: Object;
		selection: Object;
		singular: boolean;
		addTreeNode(node: HTMLElement, isAnchor: boolean): HTMLElement;
		destroy(): void;
		forInSelectedItems(f: Function, o: Object): void;
		getItem(key: String): Object;
		getSelectedTreeNodes(): any[];
		isTreeNodeSelected(node: HTMLElement): any;
		removeTreeNode(node: HTMLElement): HTMLElement;
		setSelection(newSelection: HTMLElement[]): void;
		userSelect(node: any, multi: boolean, range: boolean): void;
		onClickPress(e: Event): void;
		onClickRelease(e: Event): void;
		onMouseDown(): void;
		onMouseMove(e: Event): void;
		onMouseOut(widget: dijit.Tree._TreeNode, evt: Event): void;
		onMouseOver(widget: dijit.Tree._TreeNode, evt: Event): void;
		onMouseUp(): void;
		onOutEvent(): void;
		onOverEvent(): void
	}

	declare class dndSource extends undefined$_dndSelector {
		constructor(tree: dijit.Tree, params: dijit.tree.dndSource): this;
		accept: Object;
		betweenThreshold: number;
		current: Object;
		dragThreshold: number;
		generateText: boolean;
		isSource: boolean;
		selection: Object;
		singular: boolean;
		addTreeNode(node: HTMLElement, isAnchor: boolean): HTMLElement;
		checkAcceptance(source: dijit.tree.dndSource, nodes: HTMLElement[]): boolean;
		checkItemAcceptance(target: HTMLElement, source: dijit.tree.dndSource, position: String): boolean;
		copyState(keyPressed: boolean): any;
		destroy(): void;
		forInSelectedItems(f: Function, o: Object): void;
		getItem(key: String): Object;
		getSelectedTreeNodes(): any[];
		isTreeNodeSelected(node: HTMLElement): any;
		itemCreator(nodes: HTMLElement[], target: HTMLElement, source: dojo.dnd.Source): any;
		removeTreeNode(node: HTMLElement): HTMLElement;
		setSelection(newSelection: HTMLElement[]): void;
		userSelect(node: any, multi: boolean, range: boolean): void;
		onClickPress(e: Event): void;
		onClickRelease(e: Event): void;
		onDndDrop(source: Object, nodes: HTMLElement[], copy: boolean): void;
		onMouseOver(widget: dijit.Tree._TreeNode, evt: Event): void
	}

	declare class model  {
		constructor(): this;
		destroy(): void;
		getChildren(parentItem: dojo.data.api.Item, onComplete: any): void;
		getIdentity(item: any): void;
		getLabel(item: any): void;
		getRoot(onItem: any): void;
		isItem(something: any): void;
		mayHaveChildren(item: dojo.data.api.Item): void;
		newItem(
		args: dijit.tree.dndSource.___Item, parent: any, insertIndex: number, before: any
	): void;
		pasteItem(
		childItem: any, oldParentItem: any, newParentItem: any, bCopy: boolean, insertIndex: number, before: any
	): void;
		onChange(item: dojo.data.api.Item): void;
		onChildrenChange(parent: dojo.data.api.Item, newChildrenList: dojo.data.api.Item[]): void
	}

	declare class ForestStoreModel extends undefined$TreeStoreModel {
		constructor(params: any): this;
		childrenAttrs: Object;
		deferItemLoadingUntilExpand: boolean;
		labelAttr: string;
		newItemIdAttr: string;
		query: string;
		root: Object;
		rootId: string;
		rootLabel: string;
		store: Object;
		destroy(): void;
		fetchItemByIdentity(keywordArgs: Object): void;
		getChildren(
		parentItem: dojo.data.api.Item, callback: {
		(items: any[]): any
	}, onError: Function
	): void;
		getIdentity(item: any): any;
		getLabel(item: any): any;
		getRoot(onItem: any, onError: any): void;
		isItem(something: any): boolean;
		mayHaveChildren(item: dojo.data.api.Item): boolean;
		newItem(args: dijit.tree.dndSource.___Item, parent: any, insertIndex: number): any;
		pasteItem(
		childItem: any, oldParentItem: any, newParentItem: any, bCopy: boolean, insertIndex: number
	): void;
		onAddToRoot(item: any): void;
		onChange(item: dojo.data.api.Item): void;
		onChildrenChange(parent: dojo.data.api.Item, newChildrenList: dojo.data.api.Item[]): void;
		onDelete(item: dojo.data.api.Item): void;
		onDeleteItem(item: Object): void;
		onLeaveRoot(item: any): void;
		onNewItem(item: dojo.data.api.Item, parentInfo: Object): void;
		onNewRootItem(args: dijit.tree.dndSource.___Item): void;
		onSetItem(item: any, attribute: String, oldValue: Object, newValue: Object): void;
		onSetItem(item: any, attribute: String, oldValue: any[], newValue: Object): void;
		onSetItem(item: any, attribute: String, oldValue: Object, newValue: any[]): void;
		onSetItem(item: any, attribute: String, oldValue: any[], newValue: any[]): void
	}

	declare class ObjectStoreModel  {
		constructor(args: Object): this;
		labelAttr: string;
		labelType: string;
		query: Object;
		root: Object;
		store: Object;
		destroy(): void;
		getChildren(
		parentItem: Object, onComplete: {
		(items: any[]): any
	}, onError: Function
	): void;
		getIdentity(item: any): any;
		getLabel(item: dojo.data.api.Item): any;
		getRoot(onItem: any, onError: any): void;
		isItem(something: any): boolean;
		mayHaveChildren(item: Object): boolean;
		newItem(
		args: dijit.tree.dndSource.___Item, parent: any, insertIndex: number, before: any
	): any;
		pasteItem(
		childItem: any, oldParentItem: any, newParentItem: any, bCopy: boolean, insertIndex: number, before: any
	): any;
		onChange(item: dojo.data.api.Item): void;
		onChildrenChange(parent: dojo.data.api.Item, newChildrenList: Object[]): void;
		onDelete(item: dojo.data.api.Item): void
	}

	declare class TreeStoreModel  {
		constructor(args: Object): this;
		childrenAttrs: Object;
		deferItemLoadingUntilExpand: boolean;
		labelAttr: string;
		newItemIdAttr: string;
		query: Object;
		root: Object;
		store: Object;
		destroy(): void;
		fetchItemByIdentity(keywordArgs: Object): void;
		getChildren(
		parentItem: dojo.data.api.Item, onComplete: {
		(items: any[]): any
	}, onError: Function
	): void;
		getIdentity(item: any): any;
		getLabel(item: dojo.data.api.Item): any;
		getRoot(onItem: any, onError: any): void;
		isItem(something: any): any;
		mayHaveChildren(item: dojo.data.api.Item): any;
		newItem(
		args: dijit.tree.dndSource.___Item, parent: dojo.data.api.Item, insertIndex: number
	): void;
		pasteItem(
		childItem: any, oldParentItem: any, newParentItem: any, bCopy: boolean, insertIndex: number
	): void;
		onChange(item: dojo.data.api.Item): void;
		onChildrenChange(parent: dojo.data.api.Item, newChildrenList: dojo.data.api.Item[]): void;
		onDelete(item: dojo.data.api.Item): void;
		onDeleteItem(item: Object): void;
		onNewItem(item: dojo.data.api.Item, parentInfo: Object): void;
		onSetItem(item: any, attribute: any, oldValue: Object, newValue: Object): void;
		onSetItem(item: any, attribute: any, oldValue: any[], newValue: Object): void;
		onSetItem(item: any, attribute: any, oldValue: Object, newValue: any[]): void;
		onSetItem(item: any, attribute: any, oldValue: any[], newValue: any[]): void
	}

	
}

declare module 'dndSource' {
		declare interface ___Item {
		id: Object,
		name: string
	}

			
}

declare module '_base' {
		declare interface focus {
		getBookmark(): any,
		getFocus(menu: dijit._WidgetBase, openedForWindow: Window): any,
		isCollapsed(): any,
		moveToBookmark(bookmark: Object): any,
		registerIframe(iframe: HTMLElement): any,
		registerWin(targetWindow: Window, effectiveNode: HTMLElement): any,
		unregisterIframe(handle: Object): void,
		unregisterWin(handle: Object): void
	}

	declare interface manager {
		defaultDuration: number
	}

	declare interface popup {
		
	}

	declare interface place {
		getPopupAroundAlignment(position: String[], leftToRight: boolean): void,
		getViewport(): void,
		placeOnScreen(
		node: HTMLElement, pos: dijit.place.___Position, corners: String[], padding: dijit.place.___Position, layoutNode: any
	): any,
		placeOnScreenAroundElement(node: any, aroundNode: any, aroundCorners: any, layoutNode: any): void,
		placeOnScreenAroundNode(node: any, aroundNode: any, aroundCorners: any, layoutNode: any): void,
		placeOnScreenAroundRectangle(node: any, aroundRect: any, aroundCorners: any, layoutNode: any): void
	}

	declare interface scroll {
		
	}

	declare interface wai {
		getWaiRole(elem: HTMLElement): any,
		getWaiState(elem: HTMLElement, state: String): any,
		hasWaiRole(elem: HTMLElement, role: String): any,
		hasWaiState(elem: HTMLElement, state: String): any,
		removeWaiRole(elem: HTMLElement, role: String): void,
		removeWaiState(elem: HTMLElement, state: String): void,
		setWaiRole(elem: HTMLElement, role: String): void,
		setWaiState(elem: HTMLElement, state: String, value: String): void
	}

	declare interface typematic {
		
	}

	declare interface window {
		
	}

	declare interface sniff {
		
	}

			
}

declare module 'main' {
		declare interface place {
		around(
		node: HTMLElement, anchor: HTMLElement, positions: String[], leftToRight: boolean, layoutNode: Function
	): any,
		around(
		node: HTMLElement, anchor: dijit.place.___Rectangle, positions: String[], leftToRight: boolean, layoutNode: Function
	): any,
		at(
		node: HTMLElement, pos: dijit.place.___Position, corners: String[], padding: dijit.place.___Position, layoutNode: any
	): any
	}

	declare interface registry {
		length: number,
		add(widget: dijit._WidgetBase): void,
		byId(id: String): dijit._WidgetBase,
		byId(id: dijit._WidgetBase): dijit._WidgetBase,
		byNode(node: HTMLElement): any,
		findWidgets(root: HTMLElement, skipNode: HTMLElement): any[],
		getEnclosingWidget(node: HTMLElement): any,
		getUniqueId(widgetType: String): String,
		remove(id: String): void,
		toArray(): any[]
	}

	declare interface typematic {
		addKeyListener(
		node: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		addListener(
		mouseNode: HTMLElement, keyNode: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		addMouseListener(
		node: HTMLElement, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number
	): any,
		stop(): void,
		trigger(
		evt: Event, _this: Object, node: HTMLElement, callback: Function, obj: Object, subsequentDelay: number, initialDelay: number, minDelay: number
	): void
	}

		declare class _Calendar extends dijit$CalendarLite, dijit$_Widget {
		constructor(params?: Object, srcNodeRef?: HTMLElement): this;
		a11yclick: Object;
		active: boolean;
		set(property: "active", value: boolean): void;
		get(property: "active"): boolean;
		watch(
		property: "active", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		attachScope: Object;
		set(property: "attachScope", value: Object): void;
		get(property: "attachScope"): Object;
		watch(
		property: "attachScope", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		attributeMap: Object;
		set(property: "attributeMap", value: Object): void;
		get(property: "attributeMap"): Object;
		watch(
		property: "attributeMap", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		baseClass: string;
		set(property: "baseClass", value: string): void;
		get(property: "baseClass"): string;
		watch(
		property: "baseClass", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		class: string;
		set(property: "class", value: string): void;
		get(property: "class"): string;
		watch(
		property: "class", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		containerNode: HTMLElement;
		set(property: "containerNode", value: HTMLElement): void;
		get(property: "containerNode"): HTMLElement;
		watch(
		property: "containerNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		cssStateNodes: Object;
		set(property: "cssStateNodes", value: Object): void;
		get(property: "cssStateNodes"): Object;
		watch(
		property: "cssStateNodes", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		currentFocus: Date;
		set(property: "currentFocus", value: Date): void;
		get(property: "currentFocus"): Date;
		watch(
		property: "currentFocus", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		datePackage: string;
		set(property: "datePackage", value: string): void;
		get(property: "datePackage"): string;
		watch(
		property: "datePackage", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dateTemplateString: string;
		set(property: "dateTemplateString", value: string): void;
		get(property: "dateTemplateString"): string;
		watch(
		property: "dateTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dayWidth: string;
		set(property: "dayWidth", value: string): void;
		get(property: "dayWidth"): string;
		watch(
		property: "dayWidth", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dir: string;
		set(property: "dir", value: string): void;
		get(property: "dir"): string;
		watch(
		property: "dir", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		dndType: string;
		set(property: "dndType", value: string): void;
		get(property: "dndType"): string;
		watch(
		property: "dndType", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		domNode: HTMLElement;
		set(property: "domNode", value: HTMLElement): void;
		get(property: "domNode"): HTMLElement;
		watch(
		property: "domNode", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		dowTemplateString: string;
		set(property: "dowTemplateString", value: string): void;
		get(property: "dowTemplateString"): string;
		watch(
		property: "dowTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		focused: boolean;
		set(property: "focused", value: boolean): void;
		get(property: "focused"): boolean;
		watch(
		property: "focused", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		hovering: boolean;
		set(property: "hovering", value: boolean): void;
		get(property: "hovering"): boolean;
		watch(
		property: "hovering", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		id: string;
		set(property: "id", value: string): void;
		get(property: "id"): string;
		watch(
		property: "id", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		lang: string;
		set(property: "lang", value: string): void;
		get(property: "lang"): string;
		watch(
		property: "lang", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		observer: string;
		set(property: "observer", value: string): void;
		get(property: "observer"): string;
		watch(
		property: "observer", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		ownerDocument: Object;
		set(property: "ownerDocument", value: Object): void;
		get(property: "ownerDocument"): Object;
		watch(
		property: "ownerDocument", callback: {
		(property?: string, oldValue?: Object, newValue?: Object): void
	}
	): {
		unwatch(): void
	};
		searchContainerNode: boolean;
		set(property: "searchContainerNode", value: boolean): void;
		get(property: "searchContainerNode"): boolean;
		watch(
		property: "searchContainerNode", callback: {
		(property?: string, oldValue?: boolean, newValue?: boolean): void
	}
	): {
		unwatch(): void
	};
		slideFrom: string;
		set(property: "slideFrom", value: string): void;
		get(property: "slideFrom"): string;
		watch(
		property: "slideFrom", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		srcNodeRef: HTMLElement;
		set(property: "srcNodeRef", value: HTMLElement): void;
		get(property: "srcNodeRef"): HTMLElement;
		watch(
		property: "srcNodeRef", callback: {
		(property?: string, oldValue?: HTMLElement, newValue?: HTMLElement): void
	}
	): {
		unwatch(): void
	};
		style: string;
		set(property: "style", value: string): void;
		get(property: "style"): string;
		watch(
		property: "style", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tabIndex: string;
		set(property: "tabIndex", value: string): void;
		get(property: "tabIndex"): string;
		watch(
		property: "tabIndex", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templatePath: string;
		set(property: "templatePath", value: string): void;
		get(property: "templatePath"): string;
		watch(
		property: "templatePath", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		templateString: string;
		set(property: "templateString", value: string): void;
		get(property: "templateString"): string;
		watch(
		property: "templateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		title: string;
		set(property: "title", value: string): void;
		get(property: "title"): string;
		watch(
		property: "title", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		tooltip: string;
		set(property: "tooltip", value: string): void;
		get(property: "tooltip"): string;
		watch(
		property: "tooltip", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		value: Date;
		set(property: "value", value: Date): void;
		get(property: "value"): Date;
		watch(
		property: "value", callback: {
		(property?: string, oldValue?: Date, newValue?: Date): void
	}
	): {
		unwatch(): void
	};
		weekTemplateString: string;
		set(property: "weekTemplateString", value: string): void;
		get(property: "weekTemplateString"): string;
		watch(
		property: "weekTemplateString", callback: {
		(property?: string, oldValue?: string, newValue?: string): void
	}
	): {
		unwatch(): void
	};
		attr(name: String, value?: Object): any;
		attr(name: Object, value?: Object): any;
		buildRendering(): void;
		connect(obj: Object, event: String, method: String): any;
		connect(obj: any, event: String, method: String): any;
		connect(obj: Object, event: Function, method: String): any;
		connect(obj: any, event: Function, method: String): any;
		connect(obj: Object, event: String, method: Function): any;
		connect(obj: any, event: String, method: Function): any;
		connect(obj: Object, event: Function, method: Function): any;
		connect(obj: any, event: Function, method: Function): any;
		defer(fcn: Function, delay?: number): Object;
		destroy(preserveDom?: boolean): void;
		destroyDescendants(preserveDom?: boolean): void;
		destroyRecursive(preserveDom?: boolean): void;
		destroyRendering(preserveDom?: boolean): void;
		disconnect(handle: any): void;
		emit(type: String, eventObj?: Object, callbackArgs?: any[]): any;
		focus(): void;
		get(name: any): any;
		getChildren(): any[];
		getClassForDate(dateObject: Date, locale: String): String;
		getDescendants(): any[];
		getParent(): any;
		goToToday(): void;
		handleKey(evt: Event): any;
		isDisabledDate(dateObject: Date, locale: String): boolean;
		isFocusable(): any;
		isLeftToRight(): any;
		on(type: String, func: Function): any;
		on(type: Function, func: Function): any;
		own(): any;
		placeAt(reference: String, position?: String): any;
		placeAt(reference: HTMLElement, position?: String): any;
		placeAt(reference: dijit._WidgetBase, position?: String): any;
		placeAt(reference: String, position?: number): any;
		placeAt(reference: HTMLElement, position?: number): any;
		placeAt(reference: dijit._WidgetBase, position?: number): any;
		postCreate(): void;
		postMixInProperties(): void;
		set(name: any, value: any): any;
		setAttribute(attr: String, value: any): void;
		setValue(value: Date): void;
		startup(): void;
		subscribe(t: String, method: Function): any;
		toString(): string;
		uninitialize(): boolean;
		unsubscribe(handle: Object): void;
		watch(
		property: string, callback: {
		(property?: string, oldValue?: any, newValue?: any): void
	}
	): {
		unwatch(): void
	};
		getCachedTemplate(): any;
		onBlur(): void;
		onChange(value: any): void;
		onClick(event: any): void;
		onClose(): boolean;
		onDblClick(event: any): void;
		onFocus(): void;
		onHide(): void;
		onKeyDown(event: any): void;
		onKeyPress(event: any): void;
		onKeyUp(event: any): void;
		onMouseDown(event: any): void;
		onMouseEnter(event: any): void;
		onMouseLeave(event: any): void;
		onMouseMove(event: any): void;
		onMouseOut(event: any): void;
		onMouseOver(event: any): void;
		onMouseUp(event: any): void;
		onShow(): void;
		onValueSelected(date: Date): void
	}

	
}

declare module 'place' {
		declare interface ___Position {
		x: number,
		y: number
	}

	declare interface ___Rectangle {
		h: number,
		w: number,
		x: number,
		y: number
	}

			
}

declare module 'registry' {
		declare interface _hash {
		
	}

			
}

declare module 'dijit/_BidiSupport' {
					declare module.exports: _BidiSupport


}

declare module 'dijit/BackgroundIframe' {
					declare module.exports: BackgroundIframe


}

declare module 'dijit/hccss' {
					declare module.exports: hccss


}

declare module 'dijit/_base' {
					declare module.exports: _base


}

declare module 'dijit/_base/popup' {
					declare module.exports: popup


}

declare module 'dijit/_base/manager' {
					declare module.exports: manager


}

declare module 'dijit/_base/place' {
					declare module.exports: place


}

declare module 'dijit/_base/focus' {
					declare module.exports: focus


}

declare module 'dijit/_base/scroll' {
					declare module.exports: scroll


}

declare module 'dijit/_base/sniff' {
					declare module.exports: sniff


}

declare module 'dijit/_base/typematic' {
					declare module.exports: typematic


}

declare module 'dijit/_base/window' {
					declare module.exports: window


}

declare module 'dijit/_base/wai' {
					declare module.exports: wai


}

declare module 'dijit/_BidiMixin' {
					declare module.exports: _BidiMixin


}

declare module 'dijit/_Calendar' {
					declare module.exports: _Calendar


}

declare module 'dijit/a11y' {
					declare module.exports: a11y


}

declare module 'dijit/a11yclick' {
					declare module.exports: a11yclick


}

declare module 'dijit/dijit' {
					declare module.exports: dijit


}

declare module 'dijit/dijit-all' {
					declare module.exports: dijit_all


}

declare module 'dijit/main' {
					declare module.exports: main


}

declare module 'dijit/main._Calendar' {
					declare module.exports: _Calendar


}

declare module 'dijit/main.place' {
					declare module.exports: place


}

declare module 'dijit/main.typematic' {
					declare module.exports: typematic


}

declare module 'dijit/main.registry' {
					declare module.exports: registry


}

declare module 'dijit/place' {
					declare module.exports: place


}

declare module 'dijit/place.__Rectangle' {
					declare module.exports: ___Rectangle


}

declare module 'dijit/place.__Position' {
					declare module.exports: ___Position


}

declare module 'dijit/registry' {
					declare module.exports: registry


}

declare module 'dijit/registry._hash' {
					declare module.exports: _hash


}

declare module 'dijit/typematic' {
					declare module.exports: typematic


}

declare module 'dijit/Viewport' {
					declare module.exports: Viewport


}

declare module 'dijit/_AttachMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_Contained' {
					declare module.exports: undefined


}

declare module 'dijit/_Container' {
					declare module.exports: undefined


}

declare module 'dijit/_DialogMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_CssStateMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_FocusMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_HasDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/_KeyNavMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_KeyNavContainer' {
					declare module.exports: undefined


}

declare module 'dijit/_OnDijitClickMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_OnDijitClickMixin.a11yclick' {
					declare module.exports: a11yclick


}

declare module 'dijit/_Templated' {
					declare module.exports: undefined


}

declare module 'dijit/_TemplatedMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_TemplatedMixin._templateCache' {
					declare module.exports: _templateCache


}

declare module 'dijit/_PaletteMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_PaletteMixin.__Dye' {
					declare module.exports: undefined


}

declare module 'dijit/_MenuBase' {
					declare module.exports: undefined


}

declare module 'dijit/_TimePicker' {
					declare module.exports: undefined


}

declare module 'dijit/_TimePicker.__Constraints' {
					declare module.exports: undefined


}

declare module 'dijit/_WidgetsInTemplateMixin' {
					declare module.exports: undefined


}

declare module 'dijit/_WidgetBase' {
					declare module.exports: undefined


}

declare module 'dijit/_Widget' {
					declare module.exports: undefined


}

declare module 'dijit/Destroyable' {
					declare module.exports: undefined


}

declare module 'dijit/Calendar' {
					declare module.exports: undefined


}

declare module 'dijit/Calendar._MonthDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/Calendar._MonthDropDownButton' {
					declare module.exports: undefined


}

declare module 'dijit/CalendarLite' {
					declare module.exports: undefined


}

declare module 'dijit/CalendarLite._MonthWidget' {
					declare module.exports: undefined


}

declare module 'dijit/CheckedMenuItem' {
					declare module.exports: undefined


}

declare module 'dijit/ColorPalette' {
					declare module.exports: undefined


}

declare module 'dijit/ColorPalette._Color' {
					declare module.exports: undefined


}

declare module 'dijit/Declaration' {
					declare module.exports: undefined


}

declare module 'dijit/DialogUnderlay' {
					declare module.exports: undefined


}

declare module 'dijit/DropDownMenu' {
					declare module.exports: undefined


}

declare module 'dijit/Dialog' {
					declare module.exports: undefined


}

declare module 'dijit/Dialog._DialogBase' {
					declare module.exports: undefined


}

declare module 'dijit/Dialog._DialogLevelManager' {
					declare module.exports: _DialogLevelManager


}

declare module 'dijit/Editor' {
					declare module.exports: undefined


}

declare module 'dijit/Fieldset' {
					declare module.exports: undefined


}

declare module 'dijit/InlineEditBox' {
					declare module.exports: undefined


}

declare module 'dijit/InlineEditBox._InlineEditor' {
					declare module.exports: undefined


}

declare module 'dijit/Menu' {
					declare module.exports: undefined


}

declare module 'dijit/MenuBarItem' {
					declare module.exports: undefined


}

declare module 'dijit/MenuBarItem._MenuBarItemMixin' {
					declare module.exports: undefined


}

declare module 'dijit/MenuSeparator' {
					declare module.exports: undefined


}

declare module 'dijit/MenuItem' {
					declare module.exports: undefined


}

declare module 'dijit/MenuBar' {
					declare module.exports: undefined


}

declare module 'dijit/PopupMenuBarItem' {
					declare module.exports: undefined


}

declare module 'dijit/ProgressBar' {
					declare module.exports: undefined


}

declare module 'dijit/RadioMenuItem' {
					declare module.exports: undefined


}

declare module 'dijit/PopupMenuItem' {
					declare module.exports: undefined


}

declare module 'dijit/TitlePane' {
					declare module.exports: undefined


}

declare module 'dijit/Toolbar' {
					declare module.exports: undefined


}

declare module 'dijit/Tooltip' {
					declare module.exports: undefined


}

declare module 'dijit/Tooltip._MasterTooltip' {
					declare module.exports: undefined


}

declare module 'dijit/ToolbarSeparator' {
					declare module.exports: undefined


}

declare module 'dijit/WidgetSet' {
					declare module.exports: undefined


}

declare module 'dijit/TooltipDialog' {
					declare module.exports: undefined


}

declare module 'dijit/Tree' {
					declare module.exports: undefined


}

declare module 'dijit/Tree._TreeNode' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/html' {
					declare module.exports: html


}

declare module 'dijit/_editor/range' {
					declare module.exports: range


}

declare module 'dijit/_editor/range.W3CRange' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/range.ie' {
					declare module.exports: ie


}

declare module 'dijit/_editor/selection' {
					declare module.exports: selection


}

declare module 'dijit/_editor/_Plugin' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/_Plugin.registry' {
					declare module.exports: registry


}

declare module 'dijit/_editor/RichText' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/AlwaysShowToolbar' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FontChoice' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FontChoice._FontDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FontChoice._FontSizeDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FontChoice._FontNameDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FontChoice._FormatBlockDropDown' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/EnterKeyHandling' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/LinkDialog' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/LinkDialog.ImgLinkDialog' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/FullScreen' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/NewPage' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/Print' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/TabIndent' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/TextColor' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/ToggleDir' {
					declare module.exports: undefined


}

declare module 'dijit/_editor/plugins/ViewSource' {
					declare module.exports: undefined


}

declare module 'dijit/_tree/dndSource' {
					declare module.exports: dndSource


}

declare module 'dijit/form/Slider' {
					declare module.exports: Slider


}

declare module 'dijit/form/_ButtonMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_AutoCompleterMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_CheckBoxMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ComboBoxMenuMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ExpandingTextAreaMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormValueMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormWidgetMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ListBase' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ComboBoxMenu' {
					declare module.exports: undefined


}

declare module 'dijit/form/_RadioButtonMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_SearchMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ListMouseMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormSelectWidget' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormSelectWidget.__SelectOption' {
					declare module.exports: ___SelectOption


}

declare module 'dijit/form/_TextBoxMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormWidget' {
					declare module.exports: undefined


}

declare module 'dijit/form/_ToggleButtonMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_FormValueWidget' {
					declare module.exports: undefined


}

declare module 'dijit/form/_DateTimeTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/_DateTimeTextBox.__Constraints' {
					declare module.exports: undefined


}

declare module 'dijit/form/ComboBoxMixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/_Spinner' {
					declare module.exports: undefined


}

declare module 'dijit/form/DataList' {
					declare module.exports: undefined


}

declare module 'dijit/form/Button' {
					declare module.exports: undefined


}

declare module 'dijit/form/CheckBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/ComboButton' {
					declare module.exports: undefined


}

declare module 'dijit/form/ComboBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/CurrencyTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/DropDownButton' {
					declare module.exports: undefined


}

declare module 'dijit/form/Form' {
					declare module.exports: undefined


}

declare module 'dijit/form/DateTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/HorizontalRule' {
					declare module.exports: undefined


}

declare module 'dijit/form/FilteringSelect' {
					declare module.exports: undefined


}

declare module 'dijit/form/HorizontalRuleLabels' {
					declare module.exports: undefined


}

declare module 'dijit/form/HorizontalSlider' {
					declare module.exports: undefined


}

declare module 'dijit/form/HorizontalSlider._Mover' {
					declare module.exports: undefined


}

declare module 'dijit/form/MultiSelect' {
					declare module.exports: undefined


}

declare module 'dijit/form/MappedTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/NumberSpinner' {
					declare module.exports: undefined


}

declare module 'dijit/form/RangeBoundTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/RangeBoundTextBox.__Constraints' {
					declare module.exports: undefined


}

declare module 'dijit/form/RadioButton' {
					declare module.exports: undefined


}

declare module 'dijit/form/NumberTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/NumberTextBox.__Constraints' {
					declare module.exports: undefined


}

declare module 'dijit/form/NumberTextBox.Mixin' {
					declare module.exports: undefined


}

declare module 'dijit/form/SimpleTextarea' {
					declare module.exports: undefined


}

declare module 'dijit/form/Textarea' {
					declare module.exports: undefined


}

declare module 'dijit/form/Select' {
					declare module.exports: undefined


}

declare module 'dijit/form/Select._Menu' {
					declare module.exports: undefined


}

declare module 'dijit/form/TextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/VerticalRule' {
					declare module.exports: undefined


}

declare module 'dijit/form/ToggleButton' {
					declare module.exports: undefined


}

declare module 'dijit/form/TimeTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/ValidationTextBox' {
					declare module.exports: undefined


}

declare module 'dijit/form/VerticalRuleLabels' {
					declare module.exports: undefined


}

declare module 'dijit/form/VerticalSlider' {
					declare module.exports: undefined


}

declare module 'dijit/layout/utils' {
					declare module.exports: utils


}

declare module 'dijit/layout/_ContentPaneResizeMixin' {
					declare module.exports: undefined


}

declare module 'dijit/layout/_LayoutWidget' {
					declare module.exports: undefined


}

declare module 'dijit/layout/AccordionContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/AccordionContainer._Button' {
					declare module.exports: undefined


}

declare module 'dijit/layout/AccordionContainer._InnerContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/_TabContainerBase' {
					declare module.exports: undefined


}

declare module 'dijit/layout/AccordionPane' {
					declare module.exports: undefined


}

declare module 'dijit/layout/BorderContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/BorderContainer._Gutter' {
					declare module.exports: undefined


}

declare module 'dijit/layout/BorderContainer._Splitter' {
					declare module.exports: undefined


}

declare module 'dijit/layout/BorderContainer.ChildWidgetProperties' {
					declare module.exports: ChildWidgetProperties


}

declare module 'dijit/layout/LayoutContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/LayoutContainer.ChildWidgetProperties' {
					declare module.exports: ChildWidgetProperties


}

declare module 'dijit/layout/ContentPane' {
					declare module.exports: undefined


}

declare module 'dijit/layout/LinkPane' {
					declare module.exports: undefined


}

declare module 'dijit/layout/SplitContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/SplitContainer.ChildWidgetProperties' {
					declare module.exports: ChildWidgetProperties


}

declare module 'dijit/layout/ScrollingTabController' {
					declare module.exports: undefined


}

declare module 'dijit/layout/StackController' {
					declare module.exports: undefined


}

declare module 'dijit/layout/StackController.StackButton' {
					declare module.exports: undefined


}

declare module 'dijit/layout/StackContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/StackContainer.ChildWidgetProperties' {
					declare module.exports: ChildWidgetProperties


}

declare module 'dijit/layout/TabContainer' {
					declare module.exports: undefined


}

declare module 'dijit/layout/TabController' {
					declare module.exports: undefined


}

declare module 'dijit/layout/TabController.TabButton' {
					declare module.exports: undefined


}

declare module 'dijit/tree/_dndContainer' {
					declare module.exports: _dndContainer


}

declare module 'dijit/tree/ForestStoreModel' {
					declare module.exports: undefined


}

declare module 'dijit/tree/dndSource' {
					declare module.exports: dndSource


}

declare module 'dijit/tree/dndSource.__Item' {
					declare module.exports: ___Item


}

declare module 'dijit/tree/model' {
					declare module.exports: model


}

declare module 'dijit/tree/_dndSelector' {
					declare module.exports: _dndSelector


}

declare module 'dijit/tree/ObjectStoreModel' {
					declare module.exports: undefined


}

declare module 'dijit/tree/TreeStoreModel' {
					declare module.exports: undefined


}

declare module 'dijit/ConfirmDialog' {
					declare module.exports: undefined


}

declare module 'dijit/_ConfirmDialogMixin' {
					declare module.exports: undefined


}