/**
 * Flowtype definitions for dojox.css3
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/transit.html
 * 
Performs a transition to hide a node and show another node.
This module defines the transit method which is used
to transit the specific region of an application from
one view/page to another view/page. This module relies
on utilities provided by dojox/css3/transition for the
transition effects.
 * @param from 
 * @param to 
 * @param options OptionalThe argument to specify the transit effect and direction.The effect can be specified in options.transition. Thevalid values are 'slide', 'flip', 'fade', 'none'.The direction can be specified in options.reverse. If itis true, the transit effects will be conducted in thereverse direction to the default direction. Finally the durationof the transition can be overridden by setting the duration property.
*/
declare interface css3$transit {
    (from: HTMLElement, to: HTMLElement, options?: Object): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/transition.html
 * 
This module defines the transition utilities which can be used
to perform transition effects based on the CSS Transition standard.
 * @param args OptionalThe arguments which will be mixed into this transition object.
*/
declare interface css3$transition {
    (args?: Object): void
}

declare var autoClear: boolean;

declare var deferred: Object;

declare var direction: number;

declare var duration: number;

declare var endState: Object;

declare var in_: boolean;

declare var node: Object;

declare var playing: Object;

declare var startState: Object;


/**
 * The callback which will be called right after the end
 * of the transition effect and before the final state is
cleared.
*/
declare interface transition$beforeClear {
    (): void
}


/**
 * The callback which will be called right before the start
 * of the transition effect.
 */
declare interface transition$beforeStart {
    (): void
}


/**
 * The method which plays multiple transitions one by one.
 * @param args The array of transition objects which will be played in a chain.
 */
declare interface transition$chainedPlay {
    (args: any[]): void
}


/**
 * Method to clear the state after a transition.
 */
declare interface transition$clear {
    (): void
}


/**
 * Method which is used to create the transition object of fade effect.
 * @param node The node that the fade transition effect will be applied on.
 * @param config The cofig arguments which will be mixed into this transition object.
 */
declare interface transition$fade {
    (node: any, config: any): void
}


/**
 * Method which is used to create the transition object of flip effect.
 * @param node The node that the flip transition effect will be applied on.
 * @param config The cofig arguments which will be mixed into this transition object.
 */
declare interface transition$flip {
    (node: any, config: any): void
}


/**
 * 
 * @param nodes 
 */
declare interface transition$getWaitingList {
    (nodes: any[]): any
}


/**
 * The method which groups multiple transitions and plays
 * them together.
 * @param args The array of transition objects which will be played together.
 */
declare interface transition$groupedPlay {
    (args: any[]): any
}


/**
 * Method to initialize the state for a transition.
 */
declare interface transition$initState {
    (): void
}


/**
 * Plays the transition effect defined by this transition object.
 */
declare interface transition$play {
    (): void
}


/**
 * Method which is used to create the transition object of a slide effect.
 * @param node The node that the slide transition effect will be applied on.
 * @param config The cofig arguments which will be mixed into this transition object.
 */
declare interface transition$slide {
    (node: any, config: any): void
}


/**
 * Method to start the transition.
 */
declare interface transition$start {
    (): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/transition.endState.html
 */
declare interface transition$endState {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/transition.startState.html
 */
declare interface transition$startState {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/transition.playing.html
 */
declare interface transition$playing {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/css3/fx.html
 * 
Utilities for animation effects.
*/
declare interface css3$fx {

    /**
     * Returns an animation that does a "bounce" effect on args.node.
     * Vertical bounce animation. The scaleX, scaleY deformation and the
    jump height (args.jumpHeight) can be specified.
     * @param args 
    */
    bounce(args: Object): any,

        /**
         * Returns an animation that expands args.node.
         * Scales an element to args.endScale.
         * @param args 
         */
        expand(args: Object): any,

        /**
         * Returns an animation that flips an element around his y axis.
         * Flips an element around his y axis. The default is a 360deg flip
        but it is possible to run a partial flip using args.whichAnims.
         * @param args 
        */
        flip(args: Object): any,

        /**
         * Returns an animation that will do a "puff" effect on the given node.
         * Fades out an element and scales it to args.endScale.
         * @param args 
         */
        puff(args: Object): any,

        /**
         * Returns an animation that rotates an element.
         * Rotates an element from args.startAngle to args.endAngle.
         * @param args 
         */
        rotate(args: Object): any,

        /**
         * Returns an animation that shrinks args.node.
         * Shrinks an element, same as expand({ node: node, endScale: .01 });
         * @param args 
         */
        shrink(args: Object): any
}
declare module 'dojox/css3/transit' {
    declare var exp: undefined.transit;
    declare module.exports: typeof exp
}
declare module 'dojox/css3/transition' {
    declare var exp: undefined.transition;
    declare module.exports: typeof exp
}
declare module 'dojox/css3/transition.endState' {
    declare var exp: undefined.endState;
    declare module.exports: typeof exp
}
declare module 'dojox/css3/transition.playing' {
    declare var exp: undefined.playing;
    declare module.exports: typeof exp
}
declare module 'dojox/css3/transition.startState' {
    declare var exp: undefined.startState;
    declare module.exports: typeof exp
}
declare module 'dojox/css3/fx' {
    declare var exp: undefined.fx;
    declare module.exports: typeof exp
}