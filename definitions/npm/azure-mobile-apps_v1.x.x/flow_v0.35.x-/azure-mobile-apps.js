/**
 * Flowtype definitions for azure-mobile-apps
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'azure-mobile-apps' {
    declare interface AzureMobileApps {
        (configuration?: undefined.Configuration): undefined.MobileApp,
            table(): undefined.Table,
            api(definition?: undefined.ApiDefinition): undefined.ApiDefinition,
            logger: undefined.Logger,
            query: undefined.Query
    }
    declare var out: AzureMobileApps;
    declare module.exports: typeof out
}
declare module 'azure-mobile-apps/src/logger' {
    declare var logger: undefined.Logger;
    declare module.exports: typeof logger
}
declare module 'azure-mobile-apps/src/query' {
    declare var query: undefined.Query;
    declare module.exports: typeof query
}
declare module 'MobileApps' {
    declare module 'Platforms' {
        declare module 'Express' {
            declare type MobileApp = {
                configuration: Configuration,
                tables: Tables,
                table(): Table,
                api: Api,
                use(...middleware: Middleware[]): MobileApp,
                use(middleware: Middleware[]): MobileApp
            } & Middleware

            declare interface Api {
                add(name: string, definition: ApiDefinition): void,
                    import (fileOrFolder: string): void
            }
            declare type Table = {
                use(...middleware: Middleware[]): Table,
                use(middleware: Middleware[]): Table,
                read: TableOperation,
                update: TableOperation,
                insert: TableOperation,
                delete: TableOperation,
                undelete: TableOperation
            } & TableDefinition

            declare interface TableOperation {
                (operationHandler: (context: Context) => void): Table,
                use(...middleware: Middleware[]): Table,
                    use(middleware: Middleware[]): Table,
                    access?: AccessType
            }
            declare interface Tables {
                configuration: Configuration,
                    add(name: string, definition?: Table | TableDefinition): void,
                    import (fileOrFolder: string): void,
                    initialize(): Thenable<any >
            }
        }

    }

    declare module 'Data' {
        declare type Table = {
            use(...middleware: Middleware[]): Table,
            use(middleware: Middleware[]): Table,
            read: TableOperation,
            update: TableOperation,
            insert: TableOperation,
            delete: TableOperation,
            undelete: TableOperation
        } & TableDefinition

        declare interface Column {
            name: string,
                type: string
        }
    }

    declare interface User {
        id: string,
            claims: any[],
            token: string,
            getIdentity(provider: string): Thenable<any >
    }
    declare interface Auth {
        validate(token: string): Thenable<User>,
            decode(token: string): User,
            sign(payload: any): string
    }
    declare module 'Configuration' {
        declare interface Data {
            provider: string,
                user?: string,
                password?: string,
                server?: string,
                port?: number,
                database?: string,
                connectionTimeout?: string,
                options?: {
                    encrypt: boolean
                },
                schema?: string,
                dynamicSchema?: boolean,
                filename?: string
        }
        declare interface Auth {
            validate(token: string): Thenable<User>,
                decode(token: string): User,
                sign(payload: any): string
        }
        declare interface Logging {
            level?: string,
                transports?: LoggingTransport[]
        }
        declare interface LoggingTransport {}
        declare interface Cors {
            exposeHeaders: string,
                maxAge?: number,
                hostnames: string[]
        }
        declare interface Notifications {
            hubName: string,
                connectionString?: string,
                endpoint?: string,
                sharedAccessKeyName?: string,
                sharedAccessKeyValue?: string
        }
    }

    declare interface Query {
        create(tableName: string): QueryJs,
            fromRequest(req: Express$Request): QueryJs,
            toOData(query: QueryJs): OData
    }
    declare interface QueryJs {
        includeTotalCount(): QueryJs,
            includeDeleted(): QueryJs,
            orderBy(properties: string): QueryJs,
            orderByDescending(properties: string): QueryJs,
            select(properties: string): QueryJs,
            skip(count: number): QueryJs,
            take(count: number): QueryJs,
            where(filter: any): QueryJs,
            id?: string | number,
            single?: boolean
    }
    declare interface OData {
        table: string,
            filters?: string,
            ordering?: string,
            orderClauses?: string,
            skip?: number,
            take?: number,
            selections?: string,
            includeTotalCount?: boolean
    }
    declare var nh: undefined.NotificationHubService;
    declare interface Context {
        query: QueryJs,
            id: string | number,
            item: any,
            req: Express$Request,
            res: Express$Response,
            data: ContextData,
            tables: (tableName: string) => Data.Table,
            user: User,
            push: typeof nh,
            logger: Logger,
            execute(): Thenable<any>,
            next(error: string | Error): any
    }
    declare interface ContextData {
        (table: TableDefinition): Data.Table,
            execute(q: SqlQueryDefinition): Thenable<any >
    }
    declare interface SqlQueryDefinition {
        sql: string,
            parameters?: SqlParameterDefinition[]
    }
    declare interface SqlParameterDefinition {
        name: string,
            value: any
    }
    declare interface TableDefinition {
        access?: AccessType,
            authorize?: boolean,
            autoIncrement?: boolean,
            columns?: any,
            databaseTableName?: string,
            dynamicSchema?: boolean,
            maxTop?: number,
            name?: string,
            pageSize?: number,
            schema?: string,
            softDelete?: boolean,
            userIdColumn?: string,
            filters?: [(query: QueryJs, context: Context) => void | QueryJs],
            transforms?: [(item: any, context: Context) => void | any],
            hooks?: [(results: any, context: Context) => void],
            perUser?: boolean,
            recordsExpire?: Duration,
            webhook?: Webhook | boolean
    }
    declare type AccessType = "anonymous" | "authenticated" | "disabled";
    declare interface Duration {
        milliseconds?: number,
            seconds?: number,
            minutes?: number,
            hours?: number,
            days?: number,
            weeks?: number,
            months?: number,
            years?: number
    }
    declare interface Webhook {
        url: string
    }
    declare interface ApiDefinition {
        authorize?: boolean,
            get?: Middleware | Middleware[],
            post?: Middleware | Middleware[],
            patch?: Middleware | Middleware[],
            put?: Middleware | Middleware[],
            delete?: Middleware | Middleware[]
    }
    declare interface Thenable<R>{
        then<U>(
            onFulfilled?: (value: R) => U | Thenable<U>,
            onRejected?: (error: any) => U | Thenable<U>): Thenable<U>,
        then<U>(
            onFulfilled?: (value: R) => U | Thenable<U>,
            onRejected?: (error: any) => void): Thenable<U>,
        catch<U>(onRejected?: (error: any) => U | Thenable<U>): Thenable<U>,
        catch<U>(onRejected?: (error: any) => void): Thenable<U >
    }
    declare interface Logger {
        log(level: string, ...message: any[]): void,
            silly(...message: any[]): void,
            debug(...message: any[]): void,
            verbose(...message: any[]): void,
            info(...message: any[]): void,
            warn(...message: any[]): void,
            error(...message: any[]): void
    }
    declare interface Middleware {
        (req: Express$Request, res: Express$Response, next: NextMiddleware): void
    }
    declare interface NextMiddleware {
        (error?: any): void
    }
}
declare interface Express$Request {
    azureMobile: undefined.Context
}

declare interface Express$Response {
    results?: any
}