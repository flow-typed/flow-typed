/**
 * Flowtype definitions for rebass
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'rebass' {
    declare export type BaseProps<C>= {
        tagName?: string,
        className?: string,
        baseStyle?: Object,
        style?: Object,
        m?: number,
        mt?: number,
        mr?: number,
        mb?: number,
        ml?: number,
        mx?: number,
        my?: number,
        p?: number,
        pt?: number,
        pr?: number,
        pb?: number,
        pl?: number,
        px?: number,
        py?: number,
        color?: string,
        backgroundColor?: string,
        inverted?: boolean,
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left",
        circle?: boolean,
        pill?: boolean
    }
    declare export type ArrowProps = {
        direction?: "up" | "down"
    } & BaseProps

    declare type ArrowClass = React.StatelessComponent<ArrowProps>;
    declare export var Arrow: ArrowClass;
    declare export type AvatarProps = {
        size?: number,
        src?: string
    } & BaseProps

    declare type AvatarClass = React.StatelessComponent<AvatarProps>;
    declare export var Avatar: AvatarClass;
    declare export type BadgeProps = {
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error",
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left",
        pill?: boolean,
        circle?: boolean
    } & BaseProps

    declare type BadgeClass = React.StatelessComponent<BadgeProps>;
    declare export var Badge: BadgeClass;
    declare export type BannerProps = {
        align?: "left" | "center" | "right",
        backgroundImage: string
    } & BaseProps

    declare type BannerClass = React.StatelessComponent<BannerProps>;
    declare export var Banner: BannerClass;
    declare export type BlockProps = {
        m?: number,
        mt?: number,
        mr?: number,
        mb?: number,
        ml?: number,
        mx?: number,
        my?: number,
        p?: number,
        pt?: number,
        pr?: number,
        pb?: number,
        pl?: number,
        px?: number,
        py?: number,
        color?: string,
        backgroundColor?: string,
        borderColor?: string,
        border?: boolean,
        borderTop?: boolean,
        borderRight?: boolean,
        borderBottom?: boolean,
        borderLeft?: boolean,
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left"
    } & BaseProps

    declare type BlockClass = React.StatelessComponent<BlockProps>;
    declare export var Block: BlockClass;
    declare export type BlockquoteProps = {
        source: string,
        href: string
    } & BaseProps

    declare type BlockquoteClass = React.StatelessComponent<BlockquoteProps>;
    declare export var Blockquote: BlockquoteClass;
    declare export type BreadcrumbsProps = {
        links: {
            children: any,
            href: string
        }[]
    } & BaseProps

    declare type BreadcrumbsClass = React.StatelessComponent<BreadcrumbsProps>;
    declare export var Breadcrumbs: BreadcrumbsClass;
    declare export type ButtonProps = {
        href?: string,
        color?: string,
        backgroundColor?: string,
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left",
        pill?: boolean,
        big?: boolean,
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type ButtonClass = React.StatelessComponent<ButtonProps>;
    declare export var Button: ButtonClass;
    declare export type ButtonCircleProps = {
        title?: string,
        href?: string,
        color?: string,
        backgroundColor?: string,
        size?: number
    } & BaseProps

    declare type ButtonCircleClass = React.StatelessComponent<ButtonCircleProps>;
    declare export var ButtonCircle: ButtonCircleClass;
    declare export type ButtonOutlineProps = {
        href?: string,
        color?: string,
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left",
        pill?: boolean,
        big?: boolean
    } & BaseProps

    declare type ButtonOutlineClass = React.StatelessComponent<ButtonOutlineProps>;
    declare export var ButtonOutline: ButtonOutlineClass;
    declare export type CardProps = {
        width?: number | string
    } & BaseProps

    declare type CardClass = React.StatelessComponent<CardProps>;
    declare export var Card: CardClass;
    declare export type CardImageProps = {
        src?: string
    } & BaseProps

    declare type CardImageClass = React.StatelessComponent<CardImageProps>;
    declare export var CardImage: CardImageClass;
    declare export type CheckboxProps = {
        label?: string,
        checked?: boolean,
        name?: string,
        readOnly?: boolean,
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type CheckboxClass = React.StatelessComponent<CheckboxProps>;
    declare export var Checkbox: CheckboxClass;
    declare export type CloseProps = {} & BaseProps

    declare type CloseClass = React.StatelessComponent<CloseProps>;
    declare export var Close: CloseClass;
    declare export type ContainerProps = {} & BaseProps

    declare type ContainerClass = React.StatelessComponent<ContainerProps>;
    declare export var Container: ContainerClass;
    declare export type DividerProps = {
        width?: number
    } & BaseProps

    declare type DividerClass = React.StatelessComponent<DividerProps>;
    declare export var Divider: DividerClass;
    declare export type DonutProps = {
        value?: number,
        size?: number,
        strokeWidth?: number,
        color?: string
    } & BaseProps

    declare type DonutClass = React.StatelessComponent<DonutProps>;
    declare export var Donut: DonutClass;
    declare export type DotIndicatorProps = {
        length?: number,
        active?: number,
        onClick?: Function
    } & BaseProps

    declare type DotIndicatorClass = React.StatelessComponent<DotIndicatorProps>;
    declare export var DotIndicator: DotIndicatorClass;
    declare export type DrawerProps = {
        size?: number,
        open?: boolean,
        position?: "top" | "right" | "bottom" | "left",
        onDismiss?: Function
    } & BaseProps

    declare type DrawerClass = React.StatelessComponent<DrawerProps>;
    declare export var Drawer: DrawerClass;
    declare export type DropdownProps = {} & BaseProps

    declare type DropdownClass = React.StatelessComponent<DropdownProps>;
    declare export var Dropdown: DropdownClass;
    declare export type DropdownMenuProps = {
        open?: boolean,
        right?: boolean,
        top?: boolean,
        onDismiss?: Function
    } & BaseProps

    declare type DropdownMenuClass = React.StatelessComponent<DropdownMenuProps>;
    declare export var DropdownMenu: DropdownMenuClass;
    declare export type EmbedProps = {
        ratio?: number
    } & BaseProps

    declare type EmbedClass = React.StatelessComponent<EmbedProps>;
    declare export var Embed: EmbedClass;
    declare export type FixedProps = {
        top?: boolean,
        right?: boolean,
        bottom?: boolean,
        left?: boolean,
        zIndex?: number
    } & BaseProps

    declare type FixedClass = React.StatelessComponent<FixedProps>;
    declare export var Fixed: FixedClass;
    declare export type FooterProps = {} & BaseProps

    declare type FooterClass = React.StatelessComponent<FooterProps>;
    declare export var Footer: FooterClass;
    declare export type HeadingProps = {
        big?: boolean,
        level?: number,
        size?: number,
        alt?: boolean
    } & BaseProps

    declare type HeadingClass = React.StatelessComponent<HeadingProps>;
    declare export var Heading: HeadingClass;
    declare export type HeadingLinkProps = {
        level?: number,
        size?: number,
        href?: string
    } & BaseProps

    declare type HeadingLinkClass = React.StatelessComponent<HeadingLinkProps>;
    declare export var HeadingLink: HeadingLinkClass;
    declare export type InlineFormProps = {
        label?: string,
        name?: string,
        value?: number | string,
        placeholder?: string,
        onChange?: Function,
        buttonLabel?: string,
        onClick?: Function
    } & BaseProps

    declare type InlineFormClass = React.StatelessComponent<InlineFormProps>;
    declare export var InlineForm: InlineFormClass;
    declare export type InputProps = {
        label?: string,
        name?: string,
        type?: string,
        message?: string,
        hideLabel?: boolean,
        rounded?: boolean |
            "top" |
            "right" |
            "bottom" |
            "left",
        placeholder?: string
    } & BaseProps

    declare type InputClass = React.StatelessComponent<InputProps>;
    declare export var Input: InputClass;
    declare export type LabelProps = {
        hide?: boolean
    } & BaseProps

    declare type LabelClass = React.StatelessComponent<LabelProps>;
    declare export var Label: LabelClass;
    declare export type LinkBlockProps = {
        is?: string | Object | Function,
        href?: string
    } & BaseProps

    declare type LinkBlockClass = React.StatelessComponent<LinkBlockProps>;
    declare export var LinkBlock: LinkBlockClass;
    declare export type MediaProps = {
        img?: string,
        right?: boolean,
        align?: "top" | "center" | "bottom"
    } & BaseProps

    declare type MediaClass = React.StatelessComponent<MediaProps>;
    declare export var Media: MediaClass;
    declare export type MenuProps = {} & BaseProps

    declare type MenuClass = React.StatelessComponent<MenuProps>;
    declare export var Menu: MenuClass;
    declare export type MessageProps = {
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type MessageClass = React.StatelessComponent<MessageProps>;
    declare export var Message: MessageClass;
    declare export type NavItemProps = {
        small?: boolean,
        is?: string | Object | Function
    } & BaseProps

    declare type NavItemClass = React.StatelessComponent<NavItemProps>;
    declare export var NavItem: NavItemClass;
    declare export type OverlayProps = {
        open?: boolean,
        dark?: boolean,
        box?: boolean,
        fullWidth?: boolean,
        onDismiss?: Function
    } & BaseProps

    declare type OverlayClass = React.StatelessComponent<OverlayProps>;
    declare export var Overlay: OverlayClass;
    declare export type PageHeaderProps = {
        heading?: string,
        description?: string
    } & BaseProps

    declare type PageHeaderClass = React.StatelessComponent<PageHeaderProps>;
    declare export var PageHeader: PageHeaderClass;
    declare export type PanelProps = {
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type PanelClass = React.StatelessComponent<PanelProps>;
    declare export var Panel: PanelClass;
    declare export type PanelFooterProps = {
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type PanelFooterClass = React.StatelessComponent<PanelFooterProps>;
    declare export var PanelFooter: PanelFooterClass;
    declare export type PanelHeaderProps = {
        theme?: "primary" |
            "secondary" |
            "default" |
            "info" |
            "success" |
            "warning" |
            "error"
    } & BaseProps

    declare type PanelHeaderClass = React.StatelessComponent<PanelHeaderProps>;
    declare export var PanelHeader: PanelHeaderClass;
    declare export type PreProps = {} & BaseProps

    declare type PreClass = React.StatelessComponent<PreProps>;
    declare export var Pre: PreClass;
    declare export type ProgressProps = {
        value?: number,
        color?: string
    } & BaseProps

    declare type ProgressClass = React.StatelessComponent<ProgressProps>;
    declare export var Progress: ProgressClass;
    declare export type RadioProps = {
        checked?: boolean,
        group?: string,
        label?: string,
        name?: string,
        readOnly?: boolean
    } & BaseProps

    declare type RadioClass = React.StatelessComponent<RadioProps>;
    declare export var Radio: RadioClass;
    declare export type RatingProps = {
        value?: number,
        onClick?: Function
    } & BaseProps

    declare type RatingClass = React.StatelessComponent<RatingProps>;
    declare export var Rating: RatingClass;
    declare export type SectionProps = {} & BaseProps

    declare type SectionClass = React.StatelessComponent<SectionProps>;
    declare export var Section: SectionClass;
    declare export type SectionHeaderProps = {
        heading?: string,
        href?: string,
        description?: string
    } & BaseProps

    declare type SectionHeaderClass = React.StatelessComponent<SectionHeaderProps>;
    declare export var SectionHeader: SectionHeaderClass;
    declare export type SelectProps = {
        label?: string,
        name?: string,
        options?: {
            children: any,
            value: any
        }[],
        message?: string,
        hideLabel?: boolean
    } & BaseProps

    declare type SelectClass = React.StatelessComponent<SelectProps>;
    declare export var Select: SelectClass;
    declare export type SequenceMapProps = {
        steps?: {
            children: any,
            href: string
        }[],
        active?: number
    } & BaseProps

    declare type SequenceMapClass = React.StatelessComponent<SequenceMapProps>;
    declare export var SequenceMap: SequenceMapClass;
    declare export type SequenceMapStepProps = {
        width?: string,
        first?: boolean,
        active?: boolean
    } & BaseProps

    declare type SequenceMapStepClass = React.StatelessComponent<SequenceMapStepProps>;
    declare export var SequenceMapStep: SequenceMapStepClass;
    declare export type SliderProps = {
        label?: string,
        name?: string,
        fill?: boolean,
        hideLabel?: boolean,
        value?: number,
        defaultValue?: number,
        readOnly?: boolean
    } & BaseProps

    declare type SliderClass = React.StatelessComponent<SliderProps>;
    declare export var Slider: SliderClass;
    declare export type SpaceProps = {
        x?: number,
        auto?: boolean
    } & BaseProps

    declare type SpaceClass = React.StatelessComponent<SpaceProps>;
    declare export var Space: SpaceClass;
    declare export type StatProps = {
        value?: number | string,
        unit?: string,
        label?: string,
        topLabel?: boolean
    } & BaseProps

    declare type StatClass = React.StatelessComponent<StatProps>;
    declare export var Stat: StatClass;
    declare export type SwitchProps = {
        checked?: boolean
    } & BaseProps

    declare type SwitchClass = React.StatelessComponent<SwitchProps>;
    declare export var Switch: SwitchClass;
    declare export type TableProps = {
        headings?: any[],
        data?: any[][]
    } & BaseProps

    declare type TableClass = React.StatelessComponent<TableProps>;
    declare export var Table: TableClass;
    declare export type TextProps = {
        small?: boolean,
        bold?: boolean
    } & BaseProps

    declare type TextClass = React.StatelessComponent<TextProps>;
    declare export var Text: TextClass;
    declare export type TextareaProps = {
        label?: string,
        name?: string,
        message?: string,
        hideLabel?: boolean
    } & BaseProps

    declare type TextareaClass = React.StatelessComponent<TextareaProps>;
    declare export var Textarea: TextareaClass;
    declare export type ToolbarProps = {} & BaseProps

    declare type ToolbarClass = React.StatelessComponent<ToolbarProps>;
    declare export var Toolbar: ToolbarClass;
    declare export type TooltipProps = {
        title?: string
    } & BaseProps

    declare type TooltipClass = React.StatelessComponent<TooltipProps>;
    declare export var Tooltip: TooltipClass;
}