/**
 * Flowtype definitions for whatwg-fetch
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Window {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response >
}
declare
var fetch: typeof undefined;
declare type HeadersInit = Headers | string[][] | {
    [key: string]: string
};
declare class Headers {
    constructor(init?: HeadersInit): this;
    append(name: string, value: string): void;
    delete(name: string): void;
    get(name: string): string;
    has(name: string): boolean;
    set(name: string, value: string): void;
    entries(): IterableIterator<[string, string]>;
    forEach(
        callback: (value: string, index: number, headers: Headers) => void,
        thisArg?: any): void;
    keys(): IterableIterator<string>;
    values(): IterableIterator<string>;
    undefined(): IterableIterator<[string, string] >
}
declare type BodyInit = Blob |
    ArrayBufferView |
    ArrayBuffer |
    FormData |
    string;
declare interface Body {
    bodyUsed: boolean,
        arrayBuffer(): Promise<ArrayBuffer>,
        blob(): Promise<Blob>,
        formData(): Promise<FormData>,
        json(): Promise<any>,
        text(): Promise<string >
}
declare type RequestInfo = Request | string;
declare type Request = {} & Body
declare interface RequestInit {
    method?: string,
        headers?: HeadersInit,
        body?: BodyInit,
        referrer?: string,
        referrerPolicy?: ReferrerPolicy,
        mode?: RequestMode,
        credentials?: RequestCredentials,
        cache?: RequestCache,
        redirect?: RequestRedirect,
        integrity?: string,
        window?: any
}
declare type RequestType = "" |
    "audio" |
    "font" |
    "image" |
    "script" |
    "style" |
    "track" |
    "video";
declare type RequestDestination = "" |
    "document" |
    "embed" |
    "font" |
    "image" |
    "manifest" |
    "media" |
    "object" |
    "report" |
    "script" |
    "serviceworker" |
    "sharedworker" |
    "style" |
    "worker" |
    "xslt";
declare type RequestMode = "navigate" | "same-origin" | "no-cors" | "cors";
declare type RequestCredentials = "omit" | "same-origin" | "include";
declare type RequestCache = "default" |
    "no-store" |
    "reload" |
    "no-cache" |
    "force-cache" |
    "only-if-cached";
declare type RequestRedirect = "follow" | "error" | "manual";
declare type ReferrerPolicy = "" |
    "no-referrer" |
    "no-referrer-when-downgrade" |
    "same-origin" |
    "origin" |
    "strict-origin" |
    "origin-when-cross-origin" |
    "strict-origin-when-cross-origin" |
    "unsafe-url";
declare type Response = {} & Body
declare interface ResponseInit {
    status?: number,
        statusText?: string,
        headers?: HeadersInit
}
declare type ResponseType = "basic" |
    "cors" |
    "default" |
    "error" |
    "opaque" |
    "opaqueredirect";