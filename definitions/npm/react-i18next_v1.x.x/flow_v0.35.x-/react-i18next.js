/**
 * Flowtype definitions for react-i18next
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$ReactI18next: {
    translate: typeof ReactI18next$translate,
    loadNamespaces: typeof ReactI18next$loadNamespaces,
}
declare
export type ReactI18next$TranslationFunction = I18next.TranslationFunction;

declare
export interface ReactI18next$InjectedTranslateProps {
    t?: ReactI18next$TranslationFunction
}

declare interface ReactI18next$I18nextProviderProps {
    i18n: I18next.I18n,
        children?: React.ReactElement<any >
}

declare
export class I18nextProvider mixins React.Component<ReactI18next$I18nextProviderProps, {}>{}

declare type ReactI18next$InterpolateValue = string | JSX.Element;

declare interface ReactI18next$InterpolateProps {
    i18nKey: string,
        parent?: string,
        regexp?: RegExp,
        options?: I18next.TranslationOptions,
        useDangerouslySetInnerHTML?: boolean,
        dangerouslySetInnerHTMLPartElement?: string, [regexKey: string]: ReactI18next$InterpolateValue | RegExp | I18next.TranslationOptions | boolean
}

declare
export class Interpolate mixins React.Component<ReactI18next$InterpolateProps, {}>{}

declare interface ReactI18next$TranslateOptions {
    withRef?: boolean,
        wait?: boolean,
        translateFuncName?: string
}

declare
export function ReactI18next$translate(
    namespaces?: string[] | string,
    options?: ReactI18next$TranslateOptions):<C>(WrappedComponent: C) => C

declare
export function ReactI18next$loadNamespaces({
    components,
    i18n
}: {
    components: ReactRouter.RouteComponent[],
    i18n: I18next.I18n
}): Promise<void>declare module 'react-i18next' {
    declare module.exports: typeof ReactI18next
}