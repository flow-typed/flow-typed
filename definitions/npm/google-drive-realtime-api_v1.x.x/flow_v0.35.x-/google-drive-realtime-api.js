/**
 * Flowtype definitions for google-drive-realtime-api
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'drive' {
    declare module 'realtime' {
        declare type GoogEventHandler = ((evt: ObjectChangedEvent) => void) | ((e: Event) => void) | EventListener;
        declare     export class Collaborator {
            color: string;
            displayName: string;
            isAnonymous: boolean;
            isMe: boolean;
            permissionId: string;
            photoUrl: string;
            sessionId: string;
            userId: string;
            new(
                sessionId: string,
                userId: string,
                displayName: string,
                color: string,
                isMe: boolean,
                isAnonymous: boolean,
                photoUrl: string,
                permissionId: string): Collaborator
        }
        declare     export class CollaborativeObject {
            id: string;
            type: string;
            addEventListener(type: string, listener: GoogEventHandler, opt_capture?: boolean): void;
            removeAllEventListeners(): void;
            removeEventListener(type: string, listener: GoogEventHandler, opt_capture?: boolean): void;
            toString(): string
        }
        declare     export class IndexReference<V>mixins CollaborativeObject {
            DeleteMode: {
                SHIFT_AFTER_DELETE: string,
                SHIFT_BEFORE_DELETE: string,
                SHIFT_TO_INVALID: string
            };
            index: number;
            deleteMode(): string;
            referencedObject(): V
        }
        declare     export class CollaborativeMap<V>mixins CollaborativeObject {
            size: string;
            type: string;
            clear(): void;
            delete(key: string): V;
            get(key: string): V;
            has(key: string): boolean;
            isEmpty(): boolean;
            items(): [string, V][];
            keys(): string[];
            set(key: string, value: V): V;
            values(): V[]
        }
        declare     export class CollaborativeString mixins CollaborativeObject {
            length: number;
            text: string;
            type: string;
            append(text: string): void;
            getText(): string;
            insertString(index: number, text: string): void;
            registerReference(index: number, canBeDeleted: boolean): IndexReference<CollaborativeString>;
            removeRange(startIndex: number, endIndex: number): void;
            setText(text: string): void
        }
        declare     export class CollaborativeList<V>mixins CollaborativeObject {
            length: number;
            type: string;
            asArray(): V[];
            clear(): void;
            get(ind: number): V;
            indexOf(value: V, opt_comparatorFn?: (x1: V, x2: V) => boolean): number;
            insert(index: number, value: V): void;
            insertAll(index: number, values: V[]): void;
            lastIndexOf(value: V, opt_comparatorFn?: (x1: V, x2: V) => boolean): number;
            move(index: number, destinationIndex: number): void;
            moveToList(
                index: number,
                destination: CollaborativeList<V>,
                destinationIndex: number): void;
            push(value: V): number;
            pushAll(values: V[]): void;
            registerReference(index: number, canBeDeleted: boolean): IndexReference<CollaborativeList<V >> ;
            remove(index: number): void;
            removeRange(startIndex: number, endIndex: number): void;
            removeValue(value: V): boolean;
            replaceRange(index: number, values: V[]): void;
            set(index: number, value: V): void
        }
        declare     export class Model {
            getObject: (id: string) => CollaborativeObject;
            bytesUsed: number;
            canRedo: boolean;
            canUndo: boolean;
            createJsObject(typeName: string): any;
            addEventListener(
                type: string,
                listener: () => void | EventListener,
                opt_capture?: boolean): void;
            beginCompoundOperation(opt_name?: string, opt_isUndoable?: boolean): void;
            create(ref: string | Function, ...var_args: any[]): any;
            createList<T>(opt_initialValue?: Array<T>): CollaborativeList<T>;
            createMap<T>(opt_initialValue?: Array<[string, T]>): CollaborativeMap<T>;
            createString(opt_initialValue?: string): CollaborativeString;
            endCompoundOperation(): void;
            getRoot(): CollaborativeMap<any>;
            isReadOnly(): boolean;
            redo(): void;
            removeAllEventListeners(): void;
            removeEventListener(
                type: string,
                listener: () => void | EventListener,
                opt_capture?: boolean): void;
            serverRevision(): number;
            toJson(opt_appId?: string, opt_revision?: number): string;
            undo(): void
        }
        declare interface BaseModelEvent {
            bubbles: boolean,
                compoundOperationNames: string[],
                isLocal: boolean,
                isRedo: boolean,
                isUndo: boolean,
                preventDefault(): void,
                sessionId: string,
                target: CollaborativeObject,
                type: string,
                userId: string,
                stopPropagation(): void,
                new(
                    target: CollaborativeObject,
                    sessionId: string,
                    userId: string,
                    compoundOperationNames: string[],
                    isLocal: boolean,
                    isUndo: boolean,
                    isRedo: boolean): BaseModelEvent
        }
        declare type ObjectChangedEvent = {
            new(
                target: CollaborativeObject,
                sessionId: string,
                userId: string,
                compoundOperationNames: string[],
                isLocal: boolean,
                isUndo: boolean,
                isRedo: boolean,
                events: BaseModelEvent[]): ObjectChangedEvent,
            events: BaseModelEvent[]
        } & BaseModelEvent

        declare     export type ValuesAddedEvent<V>= {
            new(
                target: CollaborativeObject,
                sessionId: string,
                userId: string,
                compoundOperationNames: string[],
                isLocal: boolean,
                isUndo: boolean,
                isRedo: boolean,
                index: number,
                values: V[],
                movedFromList: CollaborativeList<V>,
                movedFromIndex: number): ValuesAddedEvent<V>,
            index: number,
            movedFromIndex: number,
            movedFromList: CollaborativeList<V >
        } & BaseModelEvent

        declare     export type ValuesRemovedEvent<V>= {
            new(
                target: CollaborativeObject,
                sessionId: string,
                userId: string,
                compoundOperationNames: string[],
                isLocal: boolean,
                isUndo: boolean,
                isRedo: boolean,
                index: number,
                values: V[],
                movedToList: CollaborativeList<V>,
                movedToIndex: number): ValuesRemovedEvent<V>,
            index: number,
            movedToIndex: number,
            movedToList: CollaborativeList<V >
        } & BaseModelEvent

        declare     export class Document {
            isClosed: boolean;
            isInGoogleDrive: boolean;
            saveDelay: number;
            addEventListener(type: string, listener: GoogEventHandler, opt_capture?: boolean): void;
            close(): void;
            getCollaborators(): Collaborator[];
            getModel(): Model;
            removeAllEventListeners(): void;
            removeEventListener(type: string, listener: GoogEventHandler, opt_capture?: boolean): void;
            saveAs(fileId: string): void
        }
        declare     export type ErrorType = "concurrent_creation" |
            "invalid_compound_operation" |
            "invalid_json_syntax" |
            "missing_property" |
            "not_found" |
            "forbidden" |
            "server_error" |
            "client_error" |
            "token_refresh_required" |
            "invalid_element_type" |
            "no_write_permission" |
            "fatal_network_error" |
            "unexpected_element";
        declare     export var ErrorType: {
            CONCURRENT_CREATION: ErrorType,
            INVALID_COMPOUND_OPERATION: ErrorType,
            INVALID_JSON_SYNTAX: ErrorType,
            MISSING_PROPERTY: ErrorType,
            NOT_FOUND: ErrorType,
            FORBIDDEN: ErrorType,
            SERVER_ERROR: ErrorType,
            CLIENT_ERROR: ErrorType,
            TOKEN_REFRESH_REQUIRED: ErrorType,
            INVALID_ELEMENT_TYPE: ErrorType,
            NO_WRITE_PERMISSION: ErrorType,
            FATAL_NETWORK_ERROR: ErrorType,
            UNEXPECTED_ELEMENT: ErrorType
        };
        declare     export class Error {
            constructor(type: string, message: string, isFatal: boolean): this;
            type: ErrorType;
            message: string;
            isFatal: boolean;
            toString(): string
        }
        declare     export function debug(): void
        declare     export function newInMemoryDocument(
            opt_onLoaded?: (d: Document) => void,
            opt_initializerFn?: (m: Model) => void,
            opt_errorFn?: (e: undefined.Error) => void): Document
        declare     export function load(
            fileId: string,
            onLoaded?: (d: Document) => void,
            opt_initializerFn?: (m: Model) => void,
            opt_errorFn?: (e: undefined.Error) => void): void
        declare module 'databinding' {
            declare         export interface Binding {
                collaborativeObject: CollaborativeObject,
                    domElement: Element,
                    unbind(): void
            }
            declare         export function bindString(s: CollaborativeString, textinput: HTMLInputElement): Binding
        }

        declare module 'EventType' {
            declare         export var TEXT_INSERTED: string;
            declare         export var TEXT_DELETED: string;
            declare         export var OBJECT_CHANGED: string;
            declare         export var VALUES_ADDED: string;
            declare         export var VALUES_REMOVED: string;
            declare         export var VALUES_SET: string;
        }

    }

}
declare module 'params' {
    declare export var fileIds: string;
}