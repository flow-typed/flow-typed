/**
 * Flowtype definitions for angular-locker
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'angular-locker' {
    declare var _: string;
    declare module.exports: typeof _
}
declare module 'locker' {
    declare interface ILockerServicePutFunction {
        (current: any): any
    }
    declare interface ILockerService {

        /**
         * Add an item to storage if it doesn't already exist
         * @param  The key to add
         * @param  The value to add
         */
        add(key: string, value: any): boolean,

            /**
             * Return all items in storage within the current namespace/driver
             */
            all(): any,

            /**
             * Remove all items set within the current namespace/driver
             */
            clean(): ILockerService,

            /**
             * Get the total number of items within the current namespace
             */
            count(): number,

            /**
             * Retrieve the specified item from storage
             * @param  The key to get
             * @param  The default value if it does not exist
             */
            get(key: string | Array<string>, defaultValue?: any): any,

            /**
             * Determine whether the item exists in storage
             * @param  -  The key to remove
             */
            has(key: string): boolean,

            /**
             * Get the storage keys as an array
             */
            keys(): Array<string>,

            /**
             * Add a new item to storage (even if it already exists)
             * @param  Key value object
             */
            put(keyValuePairs: Object): ILockerService | boolean,

            /**
             * Add a new item to storage (even if it already exists)
             * @param  The default to pass to function if doesn't already exist
             */
            put(putFunction: Function): ILockerService | boolean,

            /**
             * Add a new item to storage (even if it already exists)
             * @param  The key to add
             * @param  The value to add
             */
            put(key: string, value: any): ILockerService | boolean,

            /**
             * Add a new item to storage (even if it already exists)
             * @param  The key to add
             * @param  The default to pass to function if doesn't already exist
             * @param  The value to add
             */
            put(
                key: string,
                putFunction: ILockerServicePutFunction,
                value: any): ILockerService | boolean,

            /**
             * Remove specified item(s) from storage
             * @param  The key to remove
             */
            forget(key: string): ILockerService,

            /**
             * Remove specified item(s) from storage
             * @param  The array of keys to remove
             */
            forget(keys: Array<string>): ILockerService,

            /**
             * Retrieve the specified item from storage and then remove it
             * @param  The key to pull from storage
             * @param  The default value if it does not exist
             */
            pull(key: string | Array<string>, defaultValue?: any): any,

            /**
             * Bind a storage key to a $scope property
             * @param  The angular $scope object
             * @param  The key in storage to bind to
             * @param  The default value to initially bind
             */
            bind(scope: IScope, property: string, defaultPropertyValue?: any): ILockerService,

            /**
             * Set the storage driver on a new instance to enable overriding defaults
             * @param  The driver to switch to
             */
            driver(localStorageType: string): ILockerService,

            /**
             * Empty the current storage driver completely. careful now.
             */
            empty(): ILockerService,

            /**
             * Get the currently set namespace
             */
            getNamespace(): string,

            /**
             * Get a new instance of Locker
             * @param  The config options to instantiate with
             */
            instance(lockerSettings: ILockerSettings): ILockerService,

            /**
             * Set the namespace on a new instance to enable overriding defaults
             * @param  The namespace to switch to
             */
            namespace(name: string): ILockerService,

            /**
             * Check browser support
             * @see  github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47
             * @param  The driver to check support with
             */
            supported(): boolean,

            /**
             * Unbind a storage key from a $scope property
             * @param  The angular $scope object
             * @param  The key to remove from bindings
             */
            unbind(scope: IScope, property: string): ILockerService
    }
    declare interface ILockerSettings {
        driver?: string,
            namespace?: string | boolean,
            separator?: string,
            eventsEnabled?: boolean,
            extend?: Object
    }
    declare type ILockerProvider = {

        /**
         * Allow the defaults to be specified via the `lockerProvider`
         * @param  The defaults to override
         */
        defaults(lockerSettings: ILockerSettings): void
    }
}