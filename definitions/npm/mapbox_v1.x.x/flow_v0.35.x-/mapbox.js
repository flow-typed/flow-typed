/**
 * Flowtype definitions for mapbox
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'mapbox' {
    declare var accessToken: string;

    /**
     * Create and automatically configure a map with layers, markers, and interactivity.
     */
    declare function map(element: string | Element, id: string, options?: MapOptions): undefined.Map
    declare type MapOptions = {
        featureLayer?: FeatureLayerOptions,
        gridLayer?: any,
        tileLayer?: TileLayerOptions,
        infoControl?: ControlOptions,
        legendControl?: ControlOptions,
        shareControl?: ShareControlOptions
    }
    declare interface FilterFunction {
        (feature: any): boolean
    }
    declare type Map = {
        tileLayer: undefined.TileLayer,
        gridLayer: undefined.GridLayer,
        featureLayer: undefined.FeatureLayer,
        gridControl: undefined.GridControl,
        infoControl: undefined.InfoControl,
        legendControl: undefined.LegendControl,
        shareControl: undefined.ShareControl,
        getTileJSON(): any
    }

    /**
     * You can add a tiled layer to your map with L.mapbox.tileLayer(), a simple interface to layers from Mapbox and elsewhere.
     */
    declare function tileLayer(id: string, options?: TileLayerOptions): undefined.TileLayer
    declare type TileLayerOptions = {
        retinaVersion?: string
    }
    declare type TileLayer = {

        /**
         * Returns this layer's TileJSON object which determines its tile source, zoom bounds and other metadata.
         */
        getTileJSON(): any,

        /**
         * Set the image format of tiles in this layer. You can use lower-quality tiles in order to load maps faster
         */
        setFormat(format: string): TileLayer
    }

    /**
     * An L.mapbox.gridLayer loads UTFGrid tiles of interactivity into your map, which you can easily access with L.mapbox.gridControl.
     */
    declare function gridLayer(id: string): undefined.GridLayer
    declare interface GridLayer {
        active(): boolean,
            addTo(map: undefined.Map): any,
            onAdd(map: undefined.Map): any,
            onRemove(): any,

            /**
             * Bind an event handler to a given event on this L.mapbox.gridLayer instance. GridLayers expose a number of useful events that give you access to UTFGrid data as the user interacts with the map.
             */
            on(event: string, handler: Function, context?: any): any,

            /**
             * Returns this layer's TileJSON object which determines its tile source, zoom bounds and other metadata.
             */
            getTileJSON(): any,

            /**
             * Load data for a given latitude, longitude point on the map, and call the callback function with that data, if any.
             */
            getData(latlng: L$LatLng, callback: Function): any
    }

    /**
     * L.mapbox.featureLayer provides an easy way to integrate GeoJSON from Mapbox and elsewhere into your map.
     */
    declare function featureLayer(): undefined.FeatureLayer
    declare interface FeatureLayerOptions {
        filter?: FilterFunction,
            sanitizer?: (template: string) => string
    }
    declare type FeatureLayer = {

        /**
         * Load GeoJSON data for this layer from the URL given by url.
         */
        loadURL(url: string): any,

        /**
         * Load marker GeoJSON data from a map with the given id on Mapbox.
         */
        loadID(id: string): any,

        /**
         * Sets the filter function for this data layer.
         */
        setFilter(filter: FilterFunction): any,

        /**
         * Gets the filter function for this data layer.
         */
        getFilter(): FilterFunction,

        /**
         * Set the contents of a markers layer: run the provided features through
         * the filter function and then through the factory function to create
        elements for the map. If the layer already has features, they are
        replaced with the new features. An empty array will clear the
        layer of all features.
        */
        setGeoJSON(geojson: any): undefined.FeatureLayer,

        /**
         * Get the contents of this layer as GeoJSON data.
         */
        getGeoJSON(): any
    }

    /**
     * A low-level interface to geocoding, useful for more complex uses and reverse-geocoding.
     */
    declare function geocoder(id: string): undefined.Geocoder
    declare interface Geocoder {
        getURL(): string,
            setURL(url: string): any,
            setID(id: string): any,
            setTileJSON(tilejson: any): any,
            queryURL(url: string): string,

            /**
             * Queries the geocoder with a query string, and returns its result, if any.
             */
            query(queryString: string, callback: Function): any,

            /**
             * Queries the geocoder with a location, and returns its result, if any.
             */
            reverseQuery(location: any, callback: Function): any
    }
    declare type ControlOptions = {
        sanitizer?: (template: string) => string
    }

    /**
     * A map control that shows a toggleable info container. If set, attribution is auto-detected from active layers and added to the info container.
     */
    declare function infoControl(options?: ControlOptions): InfoControl
    declare type InfoControl = {
        onAdd(map: undefined.Map): any,
        onRemove(map: undefined.Map): any,

        /**
         * Adds an info string to infoControl.
         */
        addInfo(info: string): any,

        /**
         * Removes an info string from infoControl
         */
        removeInfo(info: string): any
    }

    /**
     * A map control that shows legends added to maps in Mapbox.
     * Legends are auto-detected from active layers.
     */
    declare function legendControl(options?: ControlOptions): LegendControl
    declare type LegendControl = {
        onAdd(map: undefined.Map): any,

        /**
         * Adds a legend to the legendControl.
         */
        addLegend(legend: string): any,

        /**
         * Removes a legend from the legendControl.
         */
        removeLegend(legend: string): any
    }

    /**
     * Interaction is what we call interactive parts of maps that are created with
     * the powerful tooltips & regions system in TileMill. Under the hood, it's powered by the open UTFGrid specification.
     */
    declare function gridControl(layer: string, options?: GridControlOptions): GridControl
    declare type GridControlOptions = {
        template?: string,
        follow?: boolean,
        pinnable?: boolean,
        touchTeaser?: boolean,
        location?: boolean
    } & ControlOptions

    declare type GridControl = {
        onAdd(map: undefined.Map): any,
        onRemove(map: undefined.Map): any,

        /**
         * If a tooltip is currently shown by the gridControl, hide and close it.
         */
        hide(): any,

        /**
         * Change the Mustache template used to transform the UTFGrid data in the map's interactivity into HTML for display.
         */
        setTemplate(template: string): any
    }

    /**
     * Adds geocoder functionality as well as a UI element to a map. This uses the Mapbox Geocoding API.
     */
    declare function geocoderControl(id: string, options?: GeocoderControlOptions): GeocoderControl
    declare type GeocoderControlOptions = {
        keepOpen?: boolean
    }
    declare interface GeocoderControl {
        getURL(): string,
            onAdd(map: undefined.Map): any,

            /**
             * Set the url used for geocoding.
             */
            setURL(url: string): any,

            /**
             * Set the map id used for geocoding.
             */
            setID(id: string): any,

            /**
             * Set the TileJSON used for geocoding.
             */
            setTileJSON(tilejson: any): any,

            /**
             * Bind a listener to an event emitted by the geocoder control. Supported additional events are
             */
            on(event: string, callback: Function): any
    }

    /**
     * Adds a "Share" button to the map, which can be used to share the map to Twitter or Facebook, or generate HTML for a map embed.
     */
    declare function shareControl(id: string, options?: ShareControlOptions): ShareControl
    declare type ShareControlOptions = {
        url?: string
    }
    declare type ShareControl = {
        onAdd(map: undefined.Map): any
    }
    declare module 'marker' {

        /**
         * A core icon generator used in L.mapbox.marker.style
         */
        declare     function icon(feature: any): L$Icon

        /**
         * An icon generator for use in conjunction with pointToLayer to generate markers from the Mapbox Markers API and support the simplestyle-spec for features.
         */
        declare     function style(feature: any, latlng: any): L$Marker
    }

    declare module 'simplestyle' {

        /**
         * An icon generator for use in conjunction with pointToLayer to generate markers from the Mapbox Markers API and support the simplestyle-spec for features.
         */
        declare     function style(feature: any, latlng: any): L$Marker
    }


    /**
     * A HTML sanitization function, with the same effect as the default value of the sanitizer option of L.mapbox.featureLayer, L.mapbox.gridControl, and L.mapbox.legendControl.
     */
    declare function sanitize(text: string): string

    /**
     * A mustache template rendering function, as used by the templating feature provided by L.mapbox.gridControl.
     */
    declare function template(template: string, data?: any): string
    declare export class config {
        FORCE_HTTPS: boolean;
        HTTP_URLS: string[];
        HTTPS_URLS: string[]
    }
}