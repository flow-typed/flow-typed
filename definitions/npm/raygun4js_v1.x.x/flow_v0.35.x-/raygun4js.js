/**
 * Flowtype definitions for raygun4js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface raygun$IStackTrace {
    LineNumber: number,
        ColumnNumber: number,
        ClassName: string,
        FileName: string,
        MethodName: string
}

declare interface raygun$IPayload {
    OccurredOn: Date,
        Details: {
            Error: {
                ClassName: string,
                Message: string,
                StackTrace: raygun$IStackTrace[]
            },
            Environment: {
                UtcOffset: number,
                User - Language: string,
                Document - Mode: number,
                Browser - Width: number,
                Browser - Height: number,
                Screen - Width: number,
                Screen - Height: number,
                Color - Depth: number,
                Browser: string,
                Browser - Name: string,
                Browser - Version: string,
                Platform: string
            },
            Client: {
                Name: string,
                Version: string
            },
            UserCustomData: any,
            Tags: string[],
            Request: {
                Url: string,
                QueryString: string,
                Headers: {
                    User - Agent: string,
                    Referer: string,
                    Host: string
                }
            },
            Version: string
        }
}

declare interface raygun$IRaygunOptions {
    allowInsecureSubmissions?: boolean,
        ignoreAjaxAbort?: boolean,
        ignoreAjaxError?: boolean,
        disableAnonymousUserTracking?: boolean,
        excludedHostnames?: (string | RegExp)[],
        excludedUserAgents?: (string | RegExp)[],
        wrapAsynchronousCallbacks?: boolean,
        debugMode?: boolean,
        ignore3rdPartyErrors?: boolean
}

declare interface raygun$RaygunStatic {
    noConflict(): raygun$RaygunStatic,
        constructNewRaygun(): raygun$RaygunStatic,
        init(
            apiKey: string,
            options?: raygun$IRaygunOptions,
            customdata?: any): raygun$RaygunStatic,
        withCustomData(customdata: any): raygun$RaygunStatic,
        withTags(tags: string[]): raygun$RaygunStatic,
        attach(): raygun$RaygunStatic,
        detach(): raygun$RaygunStatic,
        send(e: Error, customData?: any, tags?: string[]): raygun$RaygunStatic,
        setUser(
            user: string,
            isAnonymous?: boolean,
            email?: string,
            fullName?: string,
            firstName?: string,
            uuid?: string): raygun$RaygunStatic,
        resetAnonymousUser(): void,
        setVersion(version: string): raygun$RaygunStatic,
        saveIfOffline(enableOffline: boolean): raygun$RaygunStatic,
        filterSensitiveData(filteredKeys: string[]): raygun$RaygunStatic,
        setFilterScope(scope: string): raygun$RaygunStatic,
        whitelistCrossOriginDomains(whitelist: string[]): raygun$RaygunStatic,
        onBeforeSend(callback: (payload: raygun$IPayload) => raygun$IPayload): raygun$RaygunStatic
}
declare var Raygun: raygun$RaygunStatic;
declare module 'Raygun' {
    declare module.exports: typeof Raygun
}