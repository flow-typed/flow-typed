/**
 * Flowtype definitions for globalize-compiler
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface GlobalizeCompiler$CompileTemplateOptions {

    /**
     * the source of the compiled formatters and parsers.
     */
    code: string,

        /**
         * a list of globalize runtime modules that the compiled code depends on, e.g. globalize-runtime/number.
         */
        dependencies: string[]
}

declare interface GlobalizeCompiler$CompileOptions {

    /**
     * A function that replaces the default template.
     */
    template?: (options: GlobalizeCompiler$CompileTemplateOptions) => string
}

declare interface GlobalizeCompiler$FormatterOrParserFunction {
    (...arguments: any[]): any
}

declare interface GlobalizeCompiler$ExtractFunction {

    /**
     * 
     * @param  globalize object.
     * @returns  an Array with the formatters and parsers created using the passed Globalize.
     */
    (globalize: GlobalizeStatic): GlobalizeCompiler$FormatterOrParserFunction[]
}

declare type GlobalizeCompiler$CompileExtractsAttributes = {

    /**
     * an Array of extracts obtained by @see{GlobalizeCompilerStatic.extract}
     */
    extracts: GlobalizeCompiler$ExtractFunction,

    /**
     * a locale to be used as Globalize.locale(defaultLocale) when generating the extracted formatters and parsers.
     */
    defaultLocale: string,

    /**
     * an Object with CLDR data (in the JSON format) or a Function taking one argument: locale, a String; returning
     *   an Object with the CLDR data for the passed locale. Defaults to the entire supplemental data plus the entire
      main data for the defaultLocale.
    */
    cldr?: Object | ((locale: string) => Object),

    /**
     * an Object with messages data (in the JSON format) or a Function taking one argument: locale, a String; returning
     *   an Object with the messages data for the passed locale. Defaults to {}.
     */
    messages?: Object | ((locale: string) => Object)
} & GlobalizeCompiler$CompileOptions


declare interface GlobalizeCompiler$GlobalizeCompilerStatic {

    /**
     * Generates a JavaScript bundle containing the specified globalize formatters and parsers.
     * @param  Array or an Object containing formatters and/or parsers.
     * @param  options.
     * @returns  a String with the generated JavaScript bundle (UMD wrapped) including the compiled formatters and
    parsers.
    */
    compile(
            formattersAndParsers: GlobalizeCompiler$FormatterOrParserFunction[] | {
                [key: string]: GlobalizeCompiler$FormatterOrParserFunction
            },
            options?: GlobalizeCompiler$CompileOptions): string,

        /**
         * Creates an extract function from a source file.
         * @param  String with a filename, or a String with the file content, or an AST Object.
         * @returns  an extract. An extract is a Function taking one argument: Globalize, the Globalize Object;
        and returning an Array with the formatters and parsers created using the passed Globalize.
        */
        extract(input: string | ESTree.Program): GlobalizeCompiler$ExtractFunction,

        /**
         * Generates a JavaScript bundle containing the specified globalize formatters and parsers.
         * @param  attributes.
         * @returns  a String with the generated JavaScript bundle (UMD wrapped) including the compiled formatters and
        parsers.
        */
        compileExtracts(attributes: GlobalizeCompiler$CompileExtractsAttributes): string
}
declare module 'globalize-compiler' {
    declare var globalizeCompiler: GlobalizeCompiler$GlobalizeCompilerStatic;
    declare module.exports: typeof globalizeCompiler
}