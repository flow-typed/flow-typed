// @flow
/**
 * Flowtype definitions for rx.coincidence
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Rx$Observable<T>{
    join<TRight,
    TDurationLeft,
    TDurationRight,
    TResult>(
        right: Rx$Observable<TRight>,
        leftDurationSelector: (leftItem: T) => Rx$Observable<TDurationLeft>,
        rightDurationSelector: (rightItem: TRight) => Rx$Observable<TDurationRight>,
        resultSelector: (leftItem: T, rightItem: TRight) => TResult): Rx$Observable<TResult>,
    groupJoin<TRight,
    TDurationLeft,
    TDurationRight,
    TResult>(
        right: Rx$Observable<TRight>,
        leftDurationSelector: (leftItem: T) => Rx$Observable<TDurationLeft>,
        rightDurationSelector: (rightItem: TRight) => Rx$Observable<TDurationRight>,
        resultSelector: (leftItem: T, rightItem: Rx$Observable<TRight>) => TResult): Rx$Observable<TResult>,
    window<TWindowOpening>(
        windowOpenings: Rx$Observable<TWindowOpening>): Rx$Observable<Rx$Observable<T >> ,
    window<TWindowClosing>(
        windowClosingSelector: () => Rx$Observable<TWindowClosing>): Rx$Observable<Rx$Observable<T >> ,
    window<TWindowOpening,
    TWindowClosing>(
        windowOpenings: Rx$Observable<TWindowOpening>,
        windowClosingSelector: () => Rx$Observable<TWindowClosing>): Rx$Observable<Rx$Observable<T >> ,
    buffer<TBufferOpening>(
        bufferOpenings: Rx$Observable<TBufferOpening>): Rx$Observable<T[]>,
    buffer<TBufferClosing>(
        bufferClosingSelector: () => Rx$Observable<TBufferClosing>): Rx$Observable<T[]>,
    buffer<TBufferOpening,
    TBufferClosing>(
        bufferOpenings: Rx$Observable<TBufferOpening>,
        bufferClosingSelector: () => Rx$Observable<TBufferClosing>): Rx$Observable<T[] >
}
declare module 'rx.coincidence' {
    declare module.exports: typeof Rx
}