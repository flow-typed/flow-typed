/**
 * Flowtype definitions for json-pointer
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'json-pointer' {
    declare module.exports: typeof JSON_Pointer

    declare var npm$namespace$JSON_Pointer: {
            get: typeof JSON_Pointer$get,
            set: typeof JSON_Pointer$set,
            remove: typeof JSON_Pointer$remove,
            dict: typeof JSON_Pointer$dict,
            walk: typeof JSON_Pointer$walk,
            has: typeof JSON_Pointer$has,
            escape: typeof JSON_Pointer$escape,
            unescape: typeof JSON_Pointer$unescape,
            parse: typeof JSON_Pointer$parse,
            compile: typeof JSON_Pointer$compile,
        }
        /**
         * Wrap an object with accessorsLooks up a JSON pointer in an object.
         */
    declare function JSON_Pointer$get(object: Object, pointer: string): any


    /**
     * Set a value for a JSON pointer on object.
     */
    declare function JSON_Pointer$set(object: Object, pointer: string, value: any): void


    /**
     * Removes an attribute of object referenced by pointer
     */
    declare function JSON_Pointer$remove(object: Object, pointer: string): void


    /**
     * Creates a dictionary object (pointer -> value).
     */
    declare function JSON_Pointer$dict(object: Object): Object


    /**
     * Just like: each(pointer.dict(obj), iterator);
     */
    declare function JSON_Pointer$walk(object: Object, iterator: (value: any, key: string) => void): void


    /**
     * Tests if an object has a value for a JSON pointer.
     */
    declare function JSON_Pointer$has(object: Object, pointer: string): boolean


    /**
     * Escapes a reference token.
     */
    declare function JSON_Pointer$escape(str: string): string


    /**
     * Unescape a reference token.
     */
    declare function JSON_Pointer$unescape(str: string): string


    /**
     * Converts a JSON pointer into an array of reference tokens.
     */
    declare function JSON_Pointer$parse(str: string): string[]


    /**
     * Builds a json pointer from an array of reference tokens.
     */
    declare function JSON_Pointer$compile(str: string[]): string

    declare interface JSON_Pointer$JSON_PointerWrap {

        /**
         * Looks up a JSON pointer in an object.
         */
        get(pointer: string): any,

            /**
             * Set a value for a JSON pointer on object.
             */
            set(pointer: string, value: any): void,

            /**
             * Removes an attribute of object referenced by pointer
             */
            remove(pointer: string): void,

            /**
             * Creates a dictionary object (pointer -> value).
             */
            dict(): Object,

            /**
             * Just like: each(pointer.dict(obj), iterator);
             */
            walk(iterator: (value: any, key: string) => void): void,

            /**
             * Tests if an object has a value for a JSON pointer.
             */
            has(pointer: string): boolean
    }
}