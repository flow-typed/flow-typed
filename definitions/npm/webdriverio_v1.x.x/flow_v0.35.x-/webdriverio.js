/**
 * Flowtype definitions for webdriverio
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$WebdriverIO: {
    remote: typeof WebdriverIO$remote,
    multiremote: typeof WebdriverIO$multiremote,
}
declare
export interface WebdriverIO$Client<T>{
    addListener(event: string, listener: Function): WebdriverIO$Client<T>,
    on(event: string, listener: Function): WebdriverIO$Client<T>,
    once(event: string, listener: Function): WebdriverIO$Client<T>,
    removeListener(event: string, listener: Function): WebdriverIO$Client<T>,
    removeAllListeners(event?: string): WebdriverIO$Client<T>,
    setMaxListeners(n: number): WebdriverIO$Client<T>,
    listeners(event: string): WebdriverIO$Client<T>,
    emit(event: string, ...args: any[]): WebdriverIO$Client<T >
}

declare
export interface WebdriverIO$Cookie {
    name: string,
        value: string
}

declare
export interface WebdriverIO$CssProperty {
    property: string,
        value: string,
        parsed: WebdriverIO$ParsedCssProperty
}

declare
export interface WebdriverIO$ParsedCssProperty {
    type: string,
        string: string,
        quote: string,
        unit: string,
        value: string | number | string[] | number[]
}

declare
export interface WebdriverIO$Size {
    width: number,
        height: number
}

declare
export interface WebdriverIO$Location {
    x: number,
        y: number
}

declare
export interface WebdriverIO$LogEntry {
    timestamp: number,
        level: string,
        message: string
}

declare
export interface WebdriverIO$StorageItem {
    key: string,
        value: any
}

declare
export interface WebdriverIO$Session {
    id: string,
        capabilities: any
}

declare
export interface WebdriverIO$RawResult<T>{
    value: T
}

declare
export type WebdriverIO$ElementId = string;

declare
export interface WebdriverIO$Element {
    ELEMENT: WebdriverIO$ElementId
}

declare
export interface WebdriverIO$CommandHistoryEntry {
    command: string,
        args: any[]
}

declare
export interface WebdriverIO$Options {
    protocol: string,
        waitforTimeout: number,
        coloredLogs: boolean,
        logLevel: string,
        baseUrl: string,
        desiredCapabilities: WebdriverIO$DesiredCapabilities,
        screenshotPath: string
}

declare
export type WebdriverIO$DesiredCapabilities = any;

declare
export interface WebdriverIO$RemoteOptions {
    protocol?: string,
        waitforTimeout?: number,
        waitforInterval?: number,
        coloredLogs?: boolean,
        logLevel?: string,
        baseUrl?: string,
        desiredCapabilities?: WebdriverIO$DesiredCapabilities
}

declare
export interface WebdriverIO$MultiremoteOptions {
    [key: string]: WebdriverIO$RemoteOptions
}

declare
export function WebdriverIO$remote(options?: WebdriverIO$RemoteOptions | string): WebdriverIO$Client<void >

    declare
export function WebdriverIO$multiremote(options?: WebdriverIO$MultiremoteOptions): WebdriverIO$Client<void>declare
var browser: WebdriverIO$Client<void>;
declare module 'webdriverio' {
    declare module.exports: typeof WebdriverIO
}