/**
 * Flowtype definitions for d3kit
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
export interface d3kit$ChartMargin {
    top?: number,
        right?: number,
        bottom?: number,
        left?: number
}

declare
export interface d3kit$ChartOptions {
    margin?: d3kit$ChartMargin,
        offset?: [number, number],
        initialWidth?: number,
        initialHeight?: number, [name: string]: any
}

declare
export interface d3kit$ChartMixin {
    [name: string]: any
}

declare
export class Skeleton {
    constructor(selector: string | Element, options?: d3kit$ChartOptions, customEvents?: Array<string>): this;
    getCustomEventNames(): Array<string>;
    getDispatcher(): any;
    getInnerWidth(): number;
    getInnerHeight(): number;
    getLayerOrganizer(): d3kit$LayerOrganizer;
    getRootG(): d3.Selection<any>;
    getSvg(): d3.Selection<any>;
    data(): any;
    data(data?: any, doNotDispatch?: boolean): d3kit$Skeleton;
    options(): any;
    options(options: d3kit$ChartOptions, doNotDispatch?: boolean): d3kit$Skeleton;
    margin(): d3kit$ChartMargin;
    margin(margin: d3kit$ChartMargin, doNotDispatch?: boolean): d3kit$Skeleton;
    offset(): [number, number];
    offset(offset: Array<number>, doNotDispatch?: boolean): d3kit$Skeleton;
    width(): number;
    width(value: number | string, doNotDispatch?: boolean): d3kit$Skeleton;
    height(): number;
    height(value: number | string, doNotDispatch?: boolean): d3kit$Skeleton;
    dimension(): [number, number];
    dimension(
        dimension: [number | string, number | string],
        doNotDispatch?: boolean): d3kit$Skeleton;
    autoResize(mode?: string | boolean): string | boolean | void;
    autoResizeDetection(method?: string): string | void;
    autoResizeToAspectRatio(ratio?: number | boolean): number | boolean | void;
    on(eventName: string, listener: (...args: Array<any>) => void): void;
    hasData(): boolean;
    hasNonZeroArea(): boolean;
    mixin(fn: d3kit$ChartMixin): void;
    resizeToFitContainer(mode: string | boolean, doNotDispatch?: boolean): void;
    resizeToAspectRatio(ratio: number, doNotDispatch?: boolean): void
}

declare interface d3kit$ChartletPropertyCallback {
    (datum?: any, datum_index?: number): any
}

declare
export interface d3kit$ChartletEventFunction {
    (sel?: d3.Selection<any>, done?: string): (sel: d3.Selection<any>) => void
}

declare
export class Chartlet {
    constructor(enterFunction?: d3kit$ChartletEventFunction, updateFunction?: d3kit$ChartletEventFunction, exitFunction?: d3kit$ChartletEventFunction, customEventName?: Array<string>): this;
    getDispatcher(): d3.Dispatch;
    getCustomEventNames(): Array<string>;
    getPropertyValue(name: string, datum: any, datum_index: number): any;
    property(name: string): d3kit$ChartletPropertyCallback;
    property(name: string, value: any): d3kit$Chartlet;
    enter(sel?: d3.Selection<any>, done?: string): (sel: d3.Selection<any>) => void;
    update(sel?: d3.Selection<any>, done?: string): (sel: d3.Selection<any>) => void;
    exit(sel?: d3.Selection<any>, done?: string): (sel: d3.Selection<any>) => void;
    inheritPropertyFrom(
        parent_chartlet: d3kit$Chartlet,
        parent_property_name: string,
        child_property_name?: string): void;
    inheritPropertiesFrom(
        parent_chartlet: d3kit$Chartlet,
        parent_property_names: Array<string>,
        child_property_names?: Array<string>): void;
    publishEventsTo(dispatcher: d3.Dispatch): d3kit$Chartlet;
    on(eventName: string, handlerFunction: d3kit$ChartletEventFunction): void
}

declare interface d3kit$LayerConfig {
    name?: string,
        names?: Array<string>,
        sublayers?: d3kit$LayerConfig
}

declare
export class LayerOrganizer {
    constructor(container: d3.Selection<any>, tag?: string): this;
    create(
        config: string | Array<string>| d3kit$LayerConfig | Array<d3kit$LayerConfig>): d3.Selection<any>| Array<d3.Selection<any >> ;
    get(name: string): d3.Selection<any>;
    has(name: string): boolean
}


declare
var npm$namespace$factory: {
    createChart: typeof factory$createChart,
}
declare
export function factory$createChart(
    defaultOptions: d3kit$ChartOptions,
    customEvents: Array<string>,
    constructor: (skeleton: d3kit$Skeleton) => void): (
    selector: string | Element,
    options?: d3kit$ChartOptions,
    customEvents?: Array<string>) => d3kit$Skeleton


declare
var npm$namespace$helper: {
    debounce: typeof helper$debounce,
    extend: typeof helper$extend,
    deepExtend: typeof helper$deepExtend,
    bindMouseEventsToDispatcher: typeof helper$bindMouseEventsToDispatcher,
    removeAllChildren: typeof helper$removeAllChildren,
    on: typeof helper$on,
    off: typeof helper$off,
    trim: typeof helper$trim,
    dasherize: typeof helper$dasherize,
    $: typeof helper$$,
    $$: typeof helper$$$,
    isArray: typeof helper$isArray,
    isNumber: typeof helper$isNumber,
    isObject: typeof helper$isObject,
    isElement: typeof helper$isElement,
    isFunction: typeof helper$isFunction,
}
declare
export function helper$debounce(
    fn: (...args: Array<any>) => void,
    wait: number,
    immediate: boolean): (...args: Array<any>) => void

declare
export function helper$extend(target: Object, ...args: Object[]): Object

declare
export function helper$deepExtend(target: Object, ...args: Object[]): Object

declare
export function helper$bindMouseEventsToDispatcher(selection: d3.Selection<any>, dispatch: d3.Dispatch, prefix: string): void

declare
export function helper$removeAllChildren(selection: d3.Selection<any>, noTransition: boolean): d3.Selection<any >

    declare
export function helper$on(element: Element, type: string, listener: (...args: Array<any>) => void): void

declare
export function helper$off(element: Element, type: string, listener: (...args: Array<any>) => void): void

declare
export function helper$trim(str: string, characters: string): string

declare
export function helper$dasherize(str: string): string

declare
export function helper$$(s: Element | string): Element

declare
export function helper$$$(s: Array<Node>| NodeList): Array<Element >

    declare
export function helper$isArray(value: any): boolean

declare
export function helper$isNumber(value: any): boolean

declare
export function helper$isObject(value: any): boolean

declare
export function helper$isElement(o: any): boolean

declare
export function helper$isFunction(functionToCheck: any): booleandeclare module 'd3kit' {
    declare module.exports: typeof d3kit
}