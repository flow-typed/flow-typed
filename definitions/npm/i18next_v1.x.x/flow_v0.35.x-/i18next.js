/**
 * Flowtype definitions for i18next
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface I18next$ResourceStore {
    [language: string]: I18next$ResourceStoreLanguage
}

declare interface I18next$ResourceStoreLanguage {
    [namespace: string]: I18next$ResourceStoreKey
}

declare interface I18next$ResourceStoreKey {
    [key: string]: any
}

declare interface I18next$InterpolationOptions {
    escapeValue?: boolean,
        prefix?: string,
        suffix?: string,
        prefixEscaped?: string,
        suffixEscaped?: string,
        unescapeSuffix?: string,
        unescapePrefix?: string,
        nestingPrefix?: string,
        nestingSuffix?: string,
        nestingPrefixEscaped?: string,
        nestedSuffixEscaped?: string,
        defaultVariables?: any
}

declare interface I18next$TranslationOptions {
    defaultValue?: string,
        count?: number,
        context?: any,
        replace?: any,
        lng?: string,
        lngs?: string[],
        fallbackLng?: string,
        ns?: string | string[],
        keySeparator?: string,
        nsSeparator?: string,
        returnObjects?: boolean,
        joinArrays?: string,
        postProcess?: string | any[],
        interpolation?: I18next$InterpolationOptions
}

declare interface I18next$Options {
    debug?: boolean,
        resources?: I18next$ResourceStore,
        lng?: string,
        fallbackLng?: string,
        ns?: string | string[],
        defaultNS?: string,
        fallbackNS?: string | string[],
        whitelist?: string[],
        lowerCaseLng?: boolean,
        load?: string,
        preload?: string[],
        keySeparator?: string,
        nsSeparator?: string,
        pluralSeparator?: string,
        contextSeparator?: string,
        saveMissing?: boolean,
        saveMissingTo?: string,
        missingKeyHandler?: (lng: string, ns: string, key: string, fallbackValue: string) => void,
        parseMissingKeyHandler?: (key: string) => void,
        appendNamespaceToMissingKey?: boolean,
        postProcess?: string | any[],
        returnNull?: boolean,
        returnEmptyString?: boolean,
        returnObjects?: boolean,
        returnedObjectHandler?: (key: string, value: string, options: any) => void,
        joinArrays?: string,
        overloadTranslationOptionHandler?: (args: any[]) => I18next$TranslationOptions,
        interpolation?: I18next$InterpolationOptions,
        detection?: any,
        backend?: any,
        cache?: any
}

declare type I18next$TranslationFunction = (key: string, options?: I18next$TranslationOptions) => string;

declare class I18n {
    constructor(options?: I18next$Options, callback?: (err: any, t: I18next$TranslationFunction) => void): this;
    init(
        options?: I18next$Options,
        callback?: (err: any, t: I18next$TranslationFunction) => void): I18next$I18n;
    loadResources(callback?: (err: any) => void): void;
    language: string;
    languages: string[];
    use(module: any): I18next$I18n;
    changeLanguage(
        lng: string,
        callback?: (err: any, t: I18next$TranslationFunction) => void): void;
    getFixedT(lng?: string, ns?: string | string[]): I18next$TranslationFunction;
    t(key: string, options?: I18next$TranslationOptions): string | any | Array<any>;
    exists(): boolean;
    setDefaultNamespace(ns: string): void;
    loadNamespaces(ns: string[], callback?: () => void): void;
    loadLanguages(lngs: string[], callback?: () => void): void;
    dir(lng?: string): string;
    createInstance(
        options?: I18next$Options,
        callback?: (err: any, t: I18next$TranslationFunction) => void): I18next$I18n;
    cloneInstance(
        options?: I18next$Options,
        callback?: (err: any, t: I18next$TranslationFunction) => void): I18next$I18n;
    on(event: string, listener: () => void): void;
    on(initialized: "initialized", listener: (options: I18next$Options) => void): void;
    on(loaded: "loaded", listener: (loaded: any) => void): void;
    on(
        failedLoading: "failedLoading",
        listener: (lng: string, ns: string, msg: string) => void): void;
    on(
        missingKey: "missingKey",
        listener: (lngs: any, namespace: string, key: string, res: any) => void): void;
    on(added: "added", listener: (lng: string, ns: string) => void): void;
    on(removed: "removed", listener: (lng: string, ns: string) => void): void;
    on(languageChanged: "languageChanged", listener: (lng: string) => void): void;
    off(event: string, listener: () => void): void;
    options: I18next$Options
}
declare module 'i18next' {
    declare var i18n: I18next$I18n;
    declare module.exports: typeof i18n
}