/**
 * Flowtype definitions for echarts
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$ECharts: {
    init: typeof ECharts$init,
    connect: typeof ECharts$connect,
    disConnect: typeof ECharts$disConnect,
    dispose: typeof ECharts$dispose,
    getInstanceByDom: typeof ECharts$getInstanceByDom,
    registerMap: typeof ECharts$registerMap,
    registerTheme: typeof ECharts$registerTheme,
}
declare function ECharts$init(
    dom: HTMLDivElement | HTMLCanvasElement,
    theme?: Object | string,
    opts?: {
        devicePixelRatio?: number,
        renderer?: string
    }): ECharts$ECharts

declare function ECharts$connect(group: string | Array<string>): void

declare function ECharts$disConnect(group: string): void

declare function ECharts$dispose(target: ECharts$ECharts | HTMLDivElement | HTMLCanvasElement): void

declare function ECharts$getInstanceByDom(target: HTMLDivElement | HTMLCanvasElement): void

declare function ECharts$registerMap(mapName: string, geoJson: Object, specialAreas?: Object): void

declare function ECharts$registerTheme(themeName: string, theme: Object): void

declare class ECharts {
    group: string;
    setOption(
        option: ECharts$EChartOption,
        notMerge?: boolean,
        notRefreshImmediately?: boolean): void;
    getWidth(): number;
    getHeight(): number;
    getDom(): HTMLCanvasElement | HTMLDivElement;
    getOption(): Object;
    resize(): void;
    dispatchAction(payload: Object): void;
    on(eventName: string, handler: Function, context?: Object): void;
    off(eventName: string, handler?: Function): void;
    showLoading(type?: string, opts?: Object): void;
    hideLoading(): void;
    getDataURL(opts: {
        type?: string,
        pixelRatio?: number,
        backgroundColor?: string
    }): string;
    getConnectedDataURL(opts: {
        type: string,
        pixelRatio: number,
        backgroundColor: string
    }): string;
    clear(): void;
    isDisposed(): boolean;
    dispose(): void
}

declare interface ECharts$EChartOption {
    title?: ECharts$EChartTitleOption,
        legend?: Object,
        grid?: Object,
        xAxis?: Object,
        yAxis?: Object,
        polar?: Object,
        radiusAxis?: Object,
        angleAxis?: Object,
        radar?: Object,
        dataZoom?: Array<Object>,
        visualMap?: Array<Object>,
        tooltip?: Object,
        toolbox?: Object,
        geo?: Object,
        parallel?: Object,
        parallelAxis?: Object,
        timeline?: Object,
        series?: Array<Object>,
        color?: Array<Object>,
        backgroundColor?: string,
        textStyle?: Object,
        animation?: boolean,
        animationDuration?: number,
        animationEasing?: string,
        animationDurationUpdate?: number,
        animationEasingUpdate?: string
}

declare interface ECharts$EChartTitleOption {
    show?: boolean,
        text?: string,
        link?: string,
        target?: string,
        textStyle?: Object,
        subtext?: string,
        sublink?: string,
        subtarget?: string,
        subtextStyle?: Object,
        padding?: number,
        itemGap?: number,
        zlevel?: number,
        z?: number,
        left?: string,
        top?: string,
        right?: string,
        bottom?: string,
        backgroundColor?: string,
        borderColor?: string,
        borderWidth?: number,
        shadowBlur?: number,
        shadowColor?: number,
        shadowOffsetX?: number,
        shadowOffsetY?: number
}
declare module 'echarts' {
    declare module.exports: typeof ECharts
}