// @flow
/**
 * Flowtype definitions for pako
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$pako: {
        deflate: typeof pako$deflate,
        deflateRaw: typeof pako$deflateRaw,
        gzip: typeof pako$gzip,
        inflate: typeof pako$inflate,
        inflateRaw: typeof pako$inflateRaw,
        ungzip: typeof pako$ungzip,
    }
    /**
     * Compress data with deflate algorithm and options.
     */
declare export function pako$deflate(data: Uint8Array | Array<number>| string, options?: any): string


/**
 * The same as deflate, but creates raw data, without wrapper (header and adler32 crc).
 */
declare export function pako$deflateRaw(data: Uint8Array | Array<number>| string, options?: any): string


/**
 * The same as deflate, but create gzip wrapper instead of deflate one.
 */
declare export function pako$gzip(data: Uint8Array | Array<number>| string, options?: any): string


/**
 * Decompress data with inflate/ungzip and options. Autodetect format via wrapper header
 * by default. That's why we don't provide separate ungzip method.
 */
declare export function pako$inflate(data: Uint8Array | Array<number>| string, options?: any): Uint8Array


/**
 * The same as inflate, but creates raw data, without wrapper (header and adler32 crc).
 */
declare export function pako$inflateRaw(data: Uint8Array | Array<number>| string, options?: any): Uint8Array


/**
 * Just shortcut to inflate, because it autodetects format by header.content. Done for convenience.
 */
declare export function pako$ungzip(data: Uint8Array | Array<number>| string, options?: any): Uint8Array

declare export class Deflate {
    constructor(options?: any): this;
    err: number;
    msg: string;
    result: Uint8Array | Array<number>;
    onData(chunk: Uint8Array | Array<number>| string): void;
    onEnd(status: number): void;
    push(
        data: Uint8Array | Array<number>| ArrayBuffer | string,
        mode?: number | boolean): boolean
}

declare export class Inflate {
    constructor(options?: any): this;
    err: number;
    msg: string;
    result: Uint8Array | Array<number>| string;
    onData(chunk: Uint8Array | Array<number>| string): void;
    onEnd(status: number): void;
    push(
        data: Uint8Array | Array<number>| ArrayBuffer | string,
        mode?: number | boolean): boolean
}
declare module 'pako' {
    declare module.exports: typeof pako
}