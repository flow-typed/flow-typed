// @flow
/**
 * Flowtype definitions for sanitize-html
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare function sanitize(dirty: string, options?: sanitize$IOptions): string
declare var npm$namespace$sanitize: {
    simpleTransform: typeof sanitize$simpleTransform,
}
declare type sanitize$Attributes = {
    [attr: string]: string
};

declare type sanitize$Tag = {
    tagName: string,
    attribs: sanitize$Attributes,
    text?: string
};

declare type sanitize$Transformer = (tagName: string, attribs: sanitize$Attributes) => sanitize$Tag;

declare interface sanitize$IDefaults {
    allowedAttributes: {
            [index: string]: string[]
        },
        allowedSchemes: string[],
        allowedSchemesByTag: {
            [index: string]: string[]
        },
        allowedTags: string[],
        selfClosing: string[]
}

declare interface sanitize$IFrame {
    tag: string,
        attribs: {
            [index: string]: string
        },
        text: string,
        tagPosition: number
}

declare interface sanitize$IOptions {
    allowedAttributes?: {
            [index: string]: string[]
        } | boolean,
        allowedClasses?: {
            [index: string]: string[]
        } | boolean,
        allowedSchemes?: string[] | boolean,
        allowedTags?: string[] | boolean,
        exclusiveFilter?: (frame: sanitize$IFrame) => boolean,
        nonTextTags?: string[],
        selfClosing?: string[],
        transformTags?: {
            [tagName: string]: string | sanitize$Transformer
        }
}

declare var defaults: sanitize$IDefaults;

declare function sanitize$simpleTransform(
    tagName: string,
    attribs: sanitize$Attributes,
    merge?: boolean): sanitize$Transformerdeclare module 'sanitize-html' {
    declare module.exports: typeof sanitize
}