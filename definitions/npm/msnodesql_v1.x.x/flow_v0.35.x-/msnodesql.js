/**
 * Flowtype definitions for msnodesql
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'msnodesql' {
    declare export function open(connectionString: string, callback?: OpenCallback): Connection
    declare export function query(connectionString: string, query: string): StreamEvents
    declare export function queryRaw(connectionString: string, query: string): StreamEvents
    declare interface OpenCallback {
        (err?: Error, connection?: Connection): void
    }
    declare interface QueryCallback<T>{
        (err?: Error, results?: T[], more?: boolean): void
    }
    declare interface QueryRawCallback {
        (err?: Error, results?: QueryRawResult, more?: boolean): void
    }
    declare interface QueryRawResult {
        meta: QueryRawColumn[],
            rows: any[][]
    }
    declare interface QueryRawColumn {
        name?: string
    }
    declare interface ErrorCallback {
        (err: Error): void
    }
    declare interface Connection {
        query(query: string): StreamEvents,
            query(query: string, callback: QueryCallback<any>): StreamEvents,
            query(query: string, params: any[]): StreamEvents,
            query(query: string, params: any[], callback: QueryCallback<any>): StreamEvents,
            query<T>(query: string, callback: QueryCallback<T>): StreamEvents,
            query<T>(query: string, params: any[], callback: QueryCallback<T>): StreamEvents,
            queryRaw(query: string): StreamEvents,
            queryRaw(query: string, callback: QueryRawCallback): StreamEvents,
            queryRaw(query: string, params: any[]): StreamEvents,
            queryRaw(query: string, params: any[], callback: QueryRawCallback): StreamEvents,
            beginTransaction(callback?: ErrorCallback): void,
            commit(callback?: ErrorCallback): void,
            rollback(callback?: ErrorCallback): void,
            close(callback?: ErrorCallback): void,
            close(immediately: boolean, callback?: ErrorCallback): void
    }
    declare type StreamEvents = {}
}