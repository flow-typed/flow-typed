/**
 * Flowtype definitions for angular-toastr
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'angular-toastr' {
    declare var _: string;
    declare module.exports: typeof _
}
declare module 'toastr' {
    declare interface IToastBaseConfig {
        allowHtml?: boolean,
            closeButton?: boolean,
            closeHtml?: string,
            extendedTimeOut?: number,
            messageClass?: string,
            onHidden?: Function,
            onShown?: Function,
            onTap?: Function,
            progressBar?: boolean,
            tapToDismiss?: boolean,
            templates?: {
                toast?: string,
                progressbar?: string
            },
            timeOut?: number,
            titleClass?: string,
            toastClass?: string
    }
    declare interface IToastContainerConfig {
        autoDismiss?: boolean,
            containerId?: string,
            maxOpened?: number,
            newestOnTop?: boolean,
            positionClass?: string,
            preventDuplicates?: boolean,
            preventOpenDuplicates?: boolean,
            target?: string
    }
    declare type IToastConfig = {
        iconClasses?: {
            error?: string,
            info?: string,
            success?: string,
            warning?: string
        }
    } & IToastBaseConfig

    declare type IToastrConfig = {} & IToastContainerConfig & IToastConfig

    declare type IToastScope = {
        message: string,
        options: IToastConfig,
        title: string,
        toastId: number,
        toastType: string
    }
    declare interface IToast {
        el: angular$IAugmentedJQuery,
            iconClass: string,
            isOpened: boolean,
            open: angular$IPromise<any>,
            scope: IToastScope,
            toastId: number
    }
    declare type IToastOptions = {
        iconClass?: string,
        target?: string
    } & IToastBaseConfig

    declare interface IToastrService {

        /**
         * Return the number of active toasts in screen.
         */
        active(): number,

            /**
             * Remove toast from screen. If no toast is passed in, all toasts will be closed.
             * @param  Optional toast object to delete
             */
            clear(toast?: IToast): void,

            /**
             * Create error toast notification message.
             * @param  Message to show on toast
             * @param  Title to show on toast
             * @param  Override default toast options
             */
            error(message: string, title?: string, options?: IToastOptions): IToast,

            /**
             * Create info toast notification message.
             * @param  Message to show on toast
             * @param  Title to show on toast
             * @param  Override default toast options
             */
            info(message: string, title?: string, options?: IToastOptions): IToast,

            /**
             * Create success toast notification message.
             * @param  Message to show on toast
             * @param  Title to show on toast
             * @param  Override default toast options
             */
            success(message: string, title?: string, options?: IToastOptions): IToast,

            /**
             * Create warning toast notification message.
             * @param  Message to show on toast
             * @param  Title to show on toast
             * @param  Override default toast options
             */
            warning(message: string, title?: string, options?: IToastOptions): IToast
    }
}