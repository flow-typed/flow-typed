// @flow
/**
 * Flowtype definitions for react-day-picker
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'react-day-picker' {
    declare module.exports: typeof DayPicker
}
declare var DayPicker: typeof undefined;
declare interface ReactDayPicker$LocaleUtils {
    formatMonthTitle: (month: Date, locale: string) => string,
        formatWeekdayShort: (weekday: number, locale: string) => string,
        formatWeekdayLong: (weekday: number, locale: string) => string,
        getFirstDayOfWeek: (locale: string) => number,
        getMonths: (locale: string) => string[]
}

declare interface ReactDayPicker$DayModifiers {
    selected?: boolean,
        disabled?: boolean, [name: string]: boolean
}

declare interface ReactDayPicker$Modifiers {
    [name: string]: (date: Date) => boolean
}

declare type ReactDayPicker$CaptionElementProps = {
    date?: Date,
    localeUtils?: ReactDayPicker$LocaleUtils,
    locale?: string,
    onClick?: React.MouseEventHandler
}

declare type ReactDayPicker$NavbarElementProps = {
    className?: string,
    previousMonth?: Date,
    nextMonth?: Date,
    showPreviousButton?: boolean,
    showNextButton?: boolean,
    onPreviousClick(): void,
    onNextClick(): void,
    dir?: string,
    localeUtils?: ReactDayPicker$LocaleUtils,
    locale?: string
}

declare type ReactDayPicker$WeekdayElementProps = {
    weekday?: number,
    className?: string,
    localeUtils?: ReactDayPicker$LocaleUtils,
    locale?: string
}

declare type ReactDayPicker$Props = {
    modifiers?: ReactDayPicker$Modifiers,
    initialMonth?: Date,
    numberOfMonths?: number,
    renderDay?: (date: Date) => number | string | JSX.Element,
    enableOutsideDays?: boolean,
    canChangeMonth?: boolean,
    disabledDays?: (date: Date) => boolean,
    fixedWeeks?: boolean,
    fromMonth?: Date,
    reverseMonths?: boolean,
    toMonth?: Date,
    localeUtils?: ReactDayPicker$LocaleUtils,
    locale?: string,
    captionElement?: React.ReactElement<ReactDayPicker$CaptionElementProps>,
    navbarElement?: React.ReactElement<ReactDayPicker$NavbarElementProps>,
    weekdayElement?: React.ReactElement<ReactDayPicker$WeekdayElementProps>,
    onDayClick?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onDayKeyDown?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onDayMouseEnter?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onDayMouseLeave?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onDayTouchEnd?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onDayTouchStart?: (
        e: React.SyntheticEvent,
        day: Date,
        modifiers: ReactDayPicker$DayModifiers) => any,
    onMonthChange?: (month: Date) => any,
    onCaptionClick?: (e: React.SyntheticEvent, month: Date) => any,
    className?: string,
    selectedDays?: (date: Date) => boolean,
    style?: React.CSSProperties,
    tabIndex?: number
}

declare class DayPicker mixins React.Component<ReactDayPicker$Props, {}>{
    showMonth(month: Date): void;
    showPreviousMonth(): void;
    showNextMonth(): void
}

declare var LocaleUtils: ReactDayPicker$LocaleUtils;


declare var npm$namespace$DateUtils: {
    addMonths: typeof DateUtils$addMonths,
    clone: typeof DateUtils$clone,
    isSameDay: typeof DateUtils$isSameDay,
    isPastDay: typeof DateUtils$isPastDay,
    isDayBetween: typeof DateUtils$isDayBetween,
    addDayToRange: typeof DateUtils$addDayToRange,
    isDayInRange: typeof DateUtils$isDayInRange,
}
declare function DateUtils$addMonths(d: Date, n: number): Date

declare function DateUtils$clone(d: Date): Date

declare function DateUtils$isSameDay(d1?: Date, d2?: Date): boolean

declare function DateUtils$isPastDay(d: Date): boolean

declare function DateUtils$isDayBetween(day: Date, startDate: Date, endDate: Date): boolean

declare function DateUtils$addDayToRange(day: Date, range: {
    from?: Date,
    to?: Date
}): {
    from?: Date,
    to?: Date
}

declare function DateUtils$isDayInRange(day: Date, range: {
    from?: Date,
    to?: Date
}): boolean