/**
 * Flowtype definitions for adal
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
var AuthenticationContext: adal$AuthenticationContextStatic;
declare
var Logging: adal$Logging;
declare module 'adal' {
    declare module.exports: typeof NO PRINT IMPLEMENTED: ObjectLiteralExpression
}
declare interface adal$Config {
    tenant?: string,
        clientId: string,
        redirectUri?: string,
        cacheLocation?: string,
        displayCall?: (urlNavigate: string) => any,
        correlationId?: string,
        loginResource?: string,
        resource?: string,
        endpoints?: any,
        extraQueryParameter?: string,
        postLogoutRedirectUri?: string
}

declare interface adal$User {
    userName: string,
        profile: any
}

declare interface adal$RequestInfo {
    valid: boolean,
        parameters: any,
        stateMatch: boolean,
        stateResponse: string,
        requestType: string
}

declare interface adal$Logging {
    log: (message: string) => void,
        level: LoggingLevel
}

declare interface adal$AuthenticationContextStatic {
    new(config: adal$Config): adal$AuthenticationContext
}

declare interface adal$AuthenticationContext {
    instance: string,
        config: adal$Config,

        /**
         * Gets initial Idtoken for the app backend
         * Saves the resulting Idtoken in localStorage.
         */
        login(): void,

        /**
         * Indicates whether login is in progress now or not.
         */
        loginInProgress(): boolean,

        /**
         * Gets token for the specified resource from local storage cache
         * @param  A URI that identifies the resource for which the token is valid.
         * @returns  token if exists and not expired or null
         */
        getCachedToken(resource: string): string,

        /**
         * Retrieves and parse idToken from localstorage
         * @returns  user object
         */
        getCachedUser(): adal$User,
        registerCallback(
            expectedState: string,
            resource: string,
            callback: (message: string, token: string) => any): void,

        /**
         * Acquire token from cache if not expired and available. Acquires token from iframe if expired.
         * @param  ResourceUri identifying the target resource
         * @param  
         */
        acquireToken(resource: string, callback: (message: string, token: string) => any): void,

        /**
         * Redirect the Browser to Azure AD Authorization endpoint
         * @param  The authorization request url
         */
        promptUser(urlNavigate: string): void,

        /**
         * Clear cache items.
         */
        clearCache(): void,

        /**
         * Clear cache items for a resource.
         */
        clearCacheForResource(resource: string): void,

        /**
         * Logout user will redirect page to logout endpoint.
         * After logout, it will redirect to post_logout page if provided.
         */
        logOut(): void,

        /**
         * Gets a user profile
         * @param  - The callback that handles the response.
         */
        getUser(callback: (message: string, user?: adal$User) => any): void,

        /**
         * Checks if hash contains access token or id token or error_description
         * @param  -  Hash passed from redirect page
         * @returns  
         */
        isCallback(hash: string): boolean,

        /**
         * Gets login error
         * @returns  error message related to login
         */
        getLoginError(): string,

        /**
         * Gets requestInfo from given hash.
         * @returns  for appropriate hash.
         */
        getRequestInfo(hash: string): adal$RequestInfo,

        /**
         * Saves token from hash that is received from redirect.
         */
        saveTokenFromHash(requestInfo: adal$RequestInfo): void,

        /**
         * Gets resource for given endpoint if mapping is provided with config.
         * @param  -  API endpoint
         * @returns  resource for this API endpoint
         */
        getResourceForEndpoint(endpoint: string): string,

        /**
         * Handles redirection after login operation. 
         * Gets access token from url and saves token to the (local/session) storage
        or saves error in case unsuccessful login.
        */
        handleWindowCallback(): void,
        log(level: number, message: string, error: any): void,
        error(message: string, error: any): void,
        warn(message: string): void,
        info(message: string): void,
        verbose(message: string): void
}