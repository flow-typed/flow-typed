/**
 * Flowtype definitions for wreck
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'wreck' {
    declare interface WreckObject {
        defaults: (options: any) => WreckObject,
            request: (
                method: string,
                uri: string,
                options: any,
                callback?: (err: any, response: http.IncomingMessage) => void) => http.ClientRequest,
            read: (
                response: http.IncomingMessage,
                options: any,
                callback: (err: any, payload: any) => void) => void,
            get: (
                uri: string,
                options: any,
                callback: (err: any, response: http.IncomingMessage, payload: any) => void) => http.ClientRequest,
            post: (
                uri: string,
                options: any,
                callback: (err: any, response: http.IncomingMessage, payload: any) => void) => http.ClientRequest,
            patch: (
                uri: string,
                options: any,
                callback: (err: any, response: http.IncomingMessage, payload: any) => void) => http.ClientRequest,
            put: (
                uri: string,
                options: any,
                callback: (err: any, response: http.IncomingMessage, payload: any) => void) => http.ClientRequest,
            delete: (
                uri: string,
                options: any,
                callback: (err: any, response: http.IncomingMessage, payload: any) => void) => http.ClientRequest,
            toReadableStream: (payload: any, encoding?: string) => stream.Readable,
            parseCacheControl: (field: string) => any,
            agents: {
                http: http.Agent,
                https: http.Agent
            }
    }
    declare var wreck: WreckObject;
    declare module.exports: typeof wreck
}