// @flow
/**
 * Flowtype definitions for minimatch
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'minimatch' {
    declare module.exports: typeof M

    declare     var npm$namespace$M: {
        match: typeof M$match,
        filter: typeof M$filter,
        makeRe: typeof M$makeRe,
    }
    declare     function M$match(list: string[], pattern: string, options?: M$IOptions): string[]

    declare     function M$filter(
        pattern: string,
        options?: M$IOptions): (element: string, indexed: number, array: string[]) => boolean

    declare     function M$makeRe(pattern: string, options?: M$IOptions): RegExp

    declare     var Minimatch: M$IMinimatchStatic;

    declare interface M$IOptions {
        debug?: boolean,
            nobrace?: boolean,
            noglobstar?: boolean,
            dot?: boolean,
            noext?: boolean,
            nocase?: boolean,
            nonull?: boolean,
            matchBase?: boolean,
            nocomment?: boolean,
            nonegate?: boolean,
            flipNegate?: boolean
    }

    declare interface M$IMinimatchStatic {
        new(pattern: string, options?: M$IOptions): M$IMinimatch,
        prototype: M$IMinimatch
    }

    declare interface M$IMinimatch {
        pattern: string,
            options: M$IOptions,

            /**
             * 2-dimensional array of regexp or string expressions. 
             */
            set: any[][],
            regexp: RegExp,
            negate: boolean,
            comment: boolean,
            empty: boolean,
            makeRe(): RegExp,
            match(fname: string): boolean,
            matchOne(files: string[], pattern: string[], partial: boolean): boolean,

            /**
             * Deprecated. For internal use. 
             */
            debug(): void,

            /**
             * Deprecated. For internal use. 
             */
            make(): void,

            /**
             * Deprecated. For internal use. 
             */
            parseNegate(): void,

            /**
             * Deprecated. For internal use. 
             */
            braceExpand(pattern: string, options: M$IOptions): void,

            /**
             * Deprecated. For internal use. 
             */
            parse(pattern: string, isSub?: boolean): void
    }
}