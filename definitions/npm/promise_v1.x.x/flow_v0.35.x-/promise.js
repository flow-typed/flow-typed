/**
 * Flowtype definitions for promise
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'promise' {
    declare module.exports: typeof Promise
}
declare
var Promise: Promise$Ipromise;
declare
export interface Promise$Ipromise {
    new<T>(
            resolver: (resolve: (value: T) => void, reject: (reason: any) => void) => void): Promise$IThenable<T>,
        resolve:<T>(value: T) => Promise$IThenable<T>,
        reject:<T>(value: T) => Promise$IThenable<T>,
        all: (array: Array<Promise$IThenable<any >> ) => Promise$IThenable<Array<any >> ,
        denodeify: (fn: Function) => (...args: any[]) => Promise$IThenable<any>,
        nodeify: (fn: Function) => Function
}

declare
export interface Promise$IThenable<T>{
    then<R>(
        onFulfilled?: (value: T) => Promise$IThenable<R>| R,
        onRejected?: (error: any) => Promise$IThenable<R>| R): Promise$IThenable<R>,
    catch<R>(onRejected?: (error: any) => Promise$IThenable<R>| R): Promise$IThenable<R>,
    done<R>(
        onFulfilled?: (value: T) => Promise$IThenable<R>| R,
        onRejected?: (error: any) => Promise$IThenable<R>| R): Promise$IThenable<R>,
    nodeify<R>(callback: Function): Promise$IThenable<R >
}