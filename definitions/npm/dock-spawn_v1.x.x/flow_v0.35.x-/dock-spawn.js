// @flow
/**
 * Flowtype definitions for dock-spawn
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Dock manager manages all the dock panels in a hierarchy, similar to Visual Studio.
 * It owns an HTMLDivElement inside which all panels are docked.
Initially the document manager takes up the central space and acts as the root node.
*/
declare class DockManager {
    context: dockspawn$DockManagerContext;
    constructor(element: HTMLDivElement): this;
    initialize(): void;
    rebuildLayout(node: dockspawn$DockNode): void;
    invalidate(): void;
    resize(width: number, height: number): void;

    /**
     * Reset the dock model. This happens when state is loaded from JSON.
     */
    setModel(model: dockspawn$DockModel): void;
    setRootNode(node: dockspawn$DockNode): void;

    /**
     * Dock the [dialog] to the left of the [referenceNode] node 
     */
    dockDialogLeft(
        referenceNode: dockspawn$DockNode,
        dialog: dockspawn$Dialog): dockspawn$DockNode;

    /**
     * Dock the [dialog] to the right of the [referenceNode] node 
     */
    dockDialogRight(
        referenceNode: dockspawn$DockNode,
        dialog: dockspawn$Dialog): dockspawn$DockNode;

    /**
     * Dock the [dialog] above the [referenceNode] node 
     */
    dockDialogUp(
        referenceNode: dockspawn$DockNode,
        dialog: dockspawn$Dialog): dockspawn$DockNode;

    /**
     * Dock the [dialog] below the [referenceNode] node 
     */
    dockDialogDown(
        referenceNode: dockspawn$DockNode,
        dialog: dockspawn$Dialog): dockspawn$DockNode;

    /**
     * Dock the [dialog] as a tab inside the [referenceNode] node 
     */
    dockDialogFill(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer): dockspawn$DockNode;

    /**
     * Dock the [container] to the left of the [referenceNode] node 
     */
    dockLeft(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer,
        ratio: number): dockspawn$DockNode;

    /**
     * Dock the [container] to the right of the [referenceNode] node 
     */
    dockRight(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer,
        ratio: number): dockspawn$DockNode;

    /**
     * Dock the [container] above the [referenceNode] node 
     */
    dockUp(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer,
        ratio: number): dockspawn$DockNode;

    /**
     * Dock the [container] below the [referenceNode] node 
     */
    dockDown(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer,
        ratio: number): dockspawn$DockNode;

    /**
     * Dock the [container] as a tab inside the [referenceNode] node 
     */
    dockFill(
        referenceNode: dockspawn$DockNode,
        container: dockspawn$PanelContainer): dockspawn$DockNode;
    suspendLayout(): void;
    resumeLayout(): void;
    saveState(): string;
    loadState(state: string): void
}

declare class DockManagerContext {
    dockManager: dockspawn$DockManager;
    model: dockspawn$DockModel;
    documentManagerView: dockspawn$DocumentManagerContainer;
    constructor(dockManager: dockspawn$DockManager): this
}

declare class DockModel {
    rootNode: dockspawn$DockNode;
    documentManagerNode: dockspawn$DockNode
}

declare class DockNode {
    constructor(container: dockspawn$PanelContainer): this;
    detachFromParent(): void
}


/**
 * Tab Host control contains tabs known as TabPages.
 * The tab strip can be aligned in different orientations
 */
declare class TabHost {
    tabStripDirection: TabStripDirection;
    displayCloseButton: boolean;
    pages: dockspawn$TabPage[];
    hostElement: HTMLDivElement;
    tabListElement: HTMLDivElement;
    separatorElement: HTMLDivElement;
    contentElement: HTMLDivElement;
    constructor(tabStripDirection?: TabStripDirection, displayCloseButton?: boolean): this;
    setActiveTab(container: dockspawn$PanelContainer): void;

    /**
     * Set the selected TabPage. 
     */
    onTabPageSelected(page: dockspawn$TabPage): void;
    resize(width: number, height: number): void
}

declare class TabPage {
    constructor(host: dockspawn$TabHost, container: dockspawn$PanelContainer): this
}

declare class FillDockContainer {
    tabOrientation: TabStripDirection;
    element: HTMLDivElement;
    tabHost: dockspawn$TabHost;
    dockManager: dockspawn$DockManager;
    name: string;
    containerType: string;
    minimumAllowedChildNodes: number;
    constructor(dockManager: dockspawn$DockManager, tabStripDirection?: TabStripDirection): this
}


/**
 * The document manager is then central area of the dock layout hierarchy.
 * This is where more important panels are placed (e.g. the text editor in an IDE,
3D view in a modelling package etc
*/
declare class DocumentManagerContainer mixins FillDockContainer {
    selectedTab: dockspawn$TabPage;
    constructor(dockManager: dockspawn$DockManager): this;
    saveState(state: string): void
}

declare class PanelContainer {
    width: number;
    height: number;
    constructor(element: HTMLElement, dockManager: dockspawn$DockManager, title?: string): this;
    setTitle(title: string): void;
    setTitleIcon(iconName: string): void
}

declare class Dialog {
    fromElement(id: string, dockManager: dockspawn$DockManager): dockspawn$Dialog;
    constructor(panel: dockspawn$PanelContainer, dockManager: dockspawn$DockManager): this;
    setPosition(x: number, y: number): void;
    resize(width: number, height: number): void;
    setTitle(title: string): void;
    setTitleIcon(iconName: string): void;
    bringToFront(): void
}