// @flow
/**
 * Flowtype definitions for consolidate
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'consolidate' {
    declare     var cons: Consolidate;
    declare module.exports: typeof cons
    declare interface Consolidate {

        /**
         * expose the instance of the engine
         */
        requires: Object,

            /**
             * Clear the cache.
             * @api  public
             */
            clearCache(): void,
            atpl: RendererInterface,
            dot: RendererInterface,
            dust: RendererInterface,
            eco: RendererInterface,
            ejs: RendererInterface,
            ect: RendererInterface,
            haml: RendererInterface,
            hamlet: RendererInterface,
            handlebars: RendererInterface,
            hogan: RendererInterface,
            htmling: RendererInterface,
            jade: RendererInterface,
            jazz: RendererInterface,
            jqtpl: RendererInterface,
            just: RendererInterface,
            liquid: RendererInterface,
            liquor: RendererInterface,
            lodash: RendererInterface,
            mote: RendererInterface,
            mustache: RendererInterface,
            nunjucks: RendererInterface,
            qejs: RendererInterface,
            ractive: RendererInterface,
            react: RendererInterface,
            swig: RendererInterface,
            templayed: RendererInterface,
            toffee: RendererInterface,
            underscore: RendererInterface,
            walrus: RendererInterface,
            whiskers: RendererInterface
    }
    declare interface RendererInterface {
        render(path: String, fn: (err: Error, html: String) => any): any,
            render(
                path: String,
                options: {
                    cache?: boolean,
                    [otherOptions: string]: any
                },
                fn: (err: Error, html: String) => any): any,
            render(
                path: String,
                options?: {
                    cache?: boolean,
                    [otherOptions: string]: any
                }): Promise<String>,
            (path: String, fn: (err: Error, html: String) => any): any,
            (path: String, options: {
                cache?: boolean,
                [otherOptions: string]: any
            }, fn: (err: Error, html: String) => any): any,
            (path: String, options?: {
                cache?: boolean,
                [otherOptions: string]: any
            }): Promise<String >
    }
}