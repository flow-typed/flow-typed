// @flow
/**
 * Flowtype definitions for pkcs11js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'pkcs11js' {
    declare type Handle = Buffer;
    declare interface Version {
        major: number,
            minor: number
    }
    declare interface ModuleInfo {
        cryptokiVersion: Version,
            manufacturerID: string,
            flags: number,
            libraryDescription: string,
            libraryVersion: Version
    }
    declare interface SlotInfo {
        slotDescription: string,
            manufacturerID: string,
            flags: number,
            hardwareVersion: Version,
            firmwareVersion: Version
    }
    declare interface TokenInfo {
        label: string,
            manufacturerID: string,
            model: string,
            serialNumber: string,
            flags: number,
            maxSessionCount: number,
            sessionCount: number,
            maxRwSessionCount: number,
            rwSessionCount: number,
            maxPinLen: number,
            minPinLen: number,
            hardwareVersion: Version,
            firmwareVersion: Version,
            utcTime: string,
            totalPublicMemory: number,
            freePublicMemory: number,
            totalPrivateMemory: number,
            freePrivateMemory: number
    }
    declare interface MechanismInfo {
        minKeySize: number,
            maxKeySize: number,
            flags: number
    }
    declare interface SessionInfo {
        slotID: number,
            state: number,
            flags: number,
            deviceError: number
    }
    declare type Template = Attribute[];
    declare interface Attribute {
        type: number,
            value?: number | boolean | string | Buffer
    }
    declare interface Mechanism {
        mechanism: number,
            parameter: Buffer | IParapms
    }
    declare interface IParapms {

        /**
         * Type of crypto param. Uses consts CK_PARAMS_ 
         * @type  
         */
        type: number
    }
    declare type ECDH1 = {
        kdf: number,
        sharedData?: Buffer,
        publicData: Buffer
    } & IParapms

    declare type AesCBC = {
        iv: Buffer,
        data?: Buffer
    } & IParapms

    declare type AesCCM = {
        dataLen: number,
        nonce?: Buffer,
        aad?: Buffer,
        macLen: number
    } & IParapms

    declare type AesGCM = {
        iv?: Buffer,
        aad?: Buffer,
        ivBits: number,
        tagBits: number
    } & IParapms

    declare type RsaOAEP = {
        hashAlg: number,
        mgf: number,
        source: number,
        sourceData?: Buffer
    } & IParapms

    declare type RsaPSS = {
        hashAlg: number,
        mgf: number,
        saltLen: number
    } & IParapms

    declare interface KeyPair {
        privateKey: Handle,
            publicKey: Handle
    }
    declare     export class PKCS11 {

        /**
         * Loads dynamic library with PKCS#11 interface 
         * @param  
         */
        load(path: string): void;

        /**
         * Initializes the Cryptoki library 
         */
        C_Initialize(): void;

        /**
         * Indicates that an application is done with the Cryptoki library 
         */
        C_Finalize(): void;

        /**
         * Returns general information about Cryptoki 
         * @returns  
         */
        C_GetInfo(): ModuleInfo;

        /**
         * obtains a list of slots in the system 
         * @param  Only slots with tokens?
         * @returns  Array of slot IDs
         */
        C_GetSlotList(tokenPresent?: boolean): Handle[];

        /**
         * Obtains information about a particular slot in the system 
         * @param  The ID of the slot
         * @returns  Receives the slot information
         */
        C_GetSlotInfo(slot: Handle): SlotInfo;

        /**
         * Obtains information about a particular token in the system 
         * @param  ID of the token's slot
         * @returns  Receives the token information
         */
        C_GetTokenInfo(slot: Handle): TokenInfo;

        /**
         * Initializes a token 
         * @param  ID of the token's slot
         * @param  The SO's initial PIN
         * @returns  32-byte token label (blank padded)
         */
        C_InitToken(slot: Handle, pin?: string): string;

        /**
         * Initializes the normal user's PIN
         * @param  The session's handle
         * @param  The normal user's PIN
         */
        C_InitPIN(session: Handle, pin?: string): void;

        /**
         * Modifies the PIN of the user who is logged in
         * @param  The session's handle
         * @param  The old PIN
         * @param  The new PIN
         */
        C_SetPIN(session: Handle, oldPin: string, newPin: string): void;

        /**
         * Obtains a list of mechanism types supported by a token 
         * @param  ID of token's slot
         * @returns  Gets mech. array
         */
        C_GetMechanismList(slot: Handle): Handle[];

        /**
         * Obtains information about a particular mechanism possibly supported by a token 
         * @param  ID of the token's slot
         * @param  Type of mechanism
         * @returns  Receives mechanism info
         */
        C_GetMechanismInfo(slot: Handle, mech: Handle): MechanismInfo;

        /**
         * Opens a session between an application and a token
         * @param  The slot's ID
         * @param  From CK_SESSION_INFO
         * @returns  Gets session handle
         */
        C_OpenSession(slot: Handle, flags: number): Handle;

        /**
         * Closes a session between an application and a token 
         * @param  The session's handle
         */
        C_CloseSession(session: Handle): void;

        /**
         * Ð¡loses all sessions with a token 
         * @param  The token's slot
         */
        C_CloseAllSessions(slot: Handle): void;

        /**
         * Obtains information about the session
         * @param  The session's handle
         * @returns  Receives session info
         */
        C_GetSessionInfo(session: Handle): SessionInfo;

        /**
         * Logs a user into a token 
         * @param  The session's handle
         * @param  The user type
         * @param  The user's PIN
         */
        C_Login(session: Handle, userType: number, pin?: string): void;

        /**
         * Logs a user out from a token
         * @param  The session's handle
         */
        C_Logout(session: Handle): void;

        /**
         * Creates a new object
         * @param  The session's handle
         * @param  The object's template
         * @returns  Gets new object's handle
         */
        C_CreateObject(session: Handle, template: Template): Handle;

        /**
         * Copies an object, creating a new object for the copy 
         * @param  The session's handle
         * @param  The object's handle
         * @param  Template for new object
         * @returns  Receives handle of copy
         */
        C_CopyObject(session: Handle, object: Handle, template: Template): Handle;

        /**
         * Destroys an object
         * @param  The session's handle
         * @param  The object's handle
         */
        C_DestroyObject(session: Handle, object: Handle): void;

        /**
         * Gets the size of an object in bytes
         * @param  The session's handle
         * @param  The object's handle
         * @returns  Receives size of object
         */
        C_GetObjectSize(session: Handle, object: Handle): number;

        /**
         * Initializes a search for token and session objects that match a template
         * @param  The session's handle
         * @param  Attribute values to match
         */
        C_FindObjectsInit(session: Handle, template: Template): void;

        /**
         * Continues a search for token and session
         * objects that match a template, obtaining additional object
        handles 
         * @param  Session's handle
         * @returns  gets Object's handle. If Object is not found
        the result is 0
        */
        C_FindObjects(session: Handle): Handle;

        /**
         * Finishes a search for token and session objects
         * @param  The session's handle
         */
        C_FindObjectsFinal(session: Handle): void;

        /**
         * Obtains the value of one or more object attributes 
         * @param  The session's handle
         * @param  The object's handle
         * @param  Specifies attrs; gets vals
         * @returns  Receives attributes with values 
         */
        C_GetAttributeValue(session: Handle, object: Handle, template: Template): Template;

        /**
         * Modifies the value of one or more object attributes
         * @param  The session's handle 
         * @param  The object's handle
         * @param  Specifies attrs and values
         */
        C_SetAttributeValue(session: Handle, object: Handle, template: Template): void;

        /**
         * Initializes an encryption operation
         * @param  The session's handle
         * @param  The encryption mechanism
         * @param  Handle of encryption key
         */
        C_EncryptInit(session: Handle, mechanism: Mechanism, key: Handle): void;

        /**
         * Encrypts single-part data 
         * @param  Session's handle
         * @param  Incoming data
         * @param  Comming data
         * @returns  
         */
        C_Encrypt(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Encrypts single-part data: Error, data: Buffer) => void} cb Async callback with sliced comming data
         * @param  Session's handle
         * @param  Incoming data
         * @param  Comming data
         */
        C_Encrypt(
            session: Handle,
            inData: Buffer,
            outData: Buffer,
            cb: (error: Error, data: Buffer) => void): void;

        /**
         * Continues a multiple-part encryption operation
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_EncryptUpdate(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Finishes a multiple-part encryption operation
         * @param  Session's handle
         * @param  Last coming data
         * @returns  Sliced coming data
         */
        C_EncryptFinal(session: Handle, outData: Buffer): Buffer;

        /**
         * Initializes a decryption operation 
         * @param  The session's handle
         * @param  The decryption mechanism
         * @param  Handle of decryption key
         */
        C_DecryptInit(session: Handle, mechanism: Mechanism, key: Handle): void;

        /**
         * Decrypts encrypted data in a single part
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_Decrypt(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Decrypts encrypted data in a single part: Error, data: Buffer) => void} cb Async callback with sliced coming data
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         */
        C_Decrypt(
            session: Handle,
            inData: Buffer,
            outData: Buffer,
            cb: (error: Error, data: Buffer) => void): void;

        /**
         * continues a multiple-part decryption operation
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_DecryptUpdate(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Finishes a multiple-part decryption operation
         * @param  Session's handle
         * @param  Last part of coming data
         * @returns  Coming data
         */
        C_DecryptFinal(session: Handle, outData: Buffer): Buffer;

        /**
         * Initializes a message-digesting operation
         * @param  Session's handle
         * @param  Digesting mechanism
         */
        C_DigestInit(session: Handle, mechanism: Mechanism): void;

        /**
         * Digests data in a single part
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_Digest(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Digests data in a single part: Error, data: Buffer) => void} cb Async callback with sliced coming data
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         */
        C_Digest(
            session: Handle,
            inData: Buffer,
            outData: Buffer,
            cb: (error: Error, data: Buffer) => void): void;

        /**
         * continues a multiple-part message-digesting operation 
         * operation, by digesting the value of a secret key as part of
        the data already digested 
         * @param  Session's handle
         * @param  Incoming data
        */
        C_DigestUpdate(session: Handle, inData: Buffer): void;

        /**
         * Finishes a multiple-part message-digesting operation
         * @param  Session's handle
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_DigestFinal(session: Handle, outData: Buffer): Buffer;

        /**
         * initializes a signature (private key encryption)
         * operation, where the signature is (will be) an appendix to
        the data, and plaintext cannot be recovered from the
        signature 
         * @param  Session's handle
         * @param  Signature mechanism
         * @param  Handle of signature key
        */
        C_SignInit(session: Handle, mechanism: Mechanism, key: Handle): void;

        /**
         * Signs (encrypts with private key) data in a single
         * part, where the signature is (will be) an appendix to the
        data, and plaintext cannot be recovered from the signature
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
         * @returns  Sliced coming data
        */
        C_Sign(session: Handle, inData: Buffer, outData: Buffer): Buffer;

        /**
         * Signs (encrypts with private key) data in a single
         * part, where the signature is (will be) an appendix to the
        data, and plaintext cannot be recovered from the signature: Error, data: Buffer) => void} cb Async callback with sliced coming data
         * @param  Session's handle
         * @param  Incoming data
         * @param  Coming data
        */
        C_Sign(
            session: Handle,
            inData: Buffer,
            outData: Buffer,
            cb: (error: Error, data: Buffer) => void): void;

        /**
         * continues a multiple-part signature operation,
         * where the signature is (will be) an appendix to the data,
        and plaintext cannot be recovered from the signature
         * @param  Session's handle
         * @param  Incoming data
        */
        C_SignUpdate(session: Handle, inData: Buffer): void;

        /**
         * Finishes a multiple-part signature operation,
         * returning the signature
         * @param  Session's handle
         * @param  Coming data
         * @returns  Sliced coming data
         */
        C_SignFinal(session: Handle, outData: Buffer): Buffer;

        /**
         * initializes a verification operation, where the
         * signature is an appendix to the data, and plaintext cannot
        cannot be recovered from the signature (e.g. DSA) 
         * @param  Session's handle
         * @param  Verification mechanism
         * @param  Verification key
        */
        C_VerifyInit(session: Handle, mechanism: Mechanism, key: Handle): void;

        /**
         * Verifies a signature in a single-part operation,
         * where the signature is an appendix to the data, and plaintext
        cannot be recovered from the signature
         * @param  Session's handle
         * @param  Incoming data
         * @param  Signature to verify
         * @returns  Verification result
        */
        C_Verify(session: Handle, inData: Buffer, signature: Buffer): boolean;

        /**
         * Verifies a signature in a single-part operation,
         * where the signature is an appendix to the data, and plaintext
        cannot be recovered from the signature: Error, verify: boolean) => void} cb Async callback with verification result
         * @param  Session's handle
         * @param  Incoming data
         * @param  Signature to verify
        */
        C_Verify(
            session: Handle,
            inData: Buffer,
            signature: Buffer,
            cb: (error: Error, verify: boolean) => void): void;

        /**
         * Continues a multiple-part verification
         * operation, where the signature is an appendix to the data,
        and plaintext cannot be recovered from the signature
         * @param  Session's handle
         * @param  Incoming data
        */
        C_VerifyUpdate(session: Handle, inData: Buffer): void;

        /**
         * Finishes a multiple-part verification
         * operation, checking the signature
         * @param  Session's handle
         * @param  Signature to verify
         * @returns  
         */
        C_VerifyFinal(session: Handle, signature: Buffer): boolean;

        /**
         * Generates a secret key, creating a new key object
         * @param  Session's handle
         * @param  Key generation mechanism
         * @param  Template for new key
         * @returns  Gets handle of new key
         */
        C_GenerateKey(session: Handle, mechanism: Mechanism, template: Template): Handle;

        /**
         * Generates a secret key, creating a new key object: Error, key: Handle) => void} cb Async callback with handle of ne key
         * @param  Session's handle
         * @param  Key generation mechanism
         * @param  Template for new key
         */
        C_GenerateKey(
            session: Handle,
            mechanism: Mechanism,
            template: Template,
            cb: (error: Error, key: Handle) => void): void;

        /**
         * Generates a public-key/private-key pair,
         * creating new key objects
         * @param  Session's handle 
         * @param  Key generation mechanism
         * @param  Template for public key
         * @param  Template for private key
         * @returns  Get handles for private and public keys
         */
        C_GenerateKeyPair(
            session: Handle,
            mechanism: Mechanism,
            publicTmpl: Template,
            privateTmpl: Template): KeyPair;

        /**
         * Generates a public-key/private-key pair,
         * creating new key objects: Error, keys: KeyPair) => void} cb Async callback with handles for private and public keys
         * @param  Session's handle 
         * @param  Key generation mechanism
         * @param  Template for public key
         * @param  Template for private key
         */
        C_GenerateKeyPair(
            session: Handle,
            mechanism: Mechanism,
            publicTmpl: Template,
            privateTmpl: Template,
            cb: (error: Error, keys: KeyPair) => void): void;

        /**
         * Wraps (i.e., encrypts) a key 
         * @param  Session's handle
         * @param  Wrapping mechanism
         * @param  Wrapping key
         * @param  Key to be wrapped
         * @param  Init buffer for wrapped key
         * @returns  Sliced wrapped key
         */
        C_WrapKey(
            session: Handle,
            mechanism: Mechanism,
            wrappingKey: Handle,
            key: Handle,
            wrappedKey: Buffer): Buffer;

        /**
         * Wraps (i.e., encrypts) a key : Error, wrappedKey: Buffer) => void} cb Async callback with sliced wrapped key
         * @param  Session's handle
         * @param  Wrapping mechanism
         * @param  Wrapping key
         * @param  Key to be wrapped
         * @param  Init buffer for wrapped key
         */
        C_WrapKey(
            session: Handle,
            mechanism: Mechanism,
            wrappingKey: Handle,
            key: Handle,
            wrappedKey: Buffer,
            cb: (error: Error, wrappedKey: Buffer) => void): void;

        /**
         * Unwraps (decrypts) a wrapped key, creating a new key object
         * @param  Session's handle
         * @param  Unwrapping mechanism
         * @param  Unwrapping key
         * @param  Wrapped key
         * @param  New key template
         * @returns  Gets new handle
         */
        C_UnwrapKey(
            session: Handle,
            mechanism: Mechanism,
            unwrappingKey: Handle,
            wrappedKey: Buffer,
            template: Template): Handle;

        /**
         * Unwraps (decrypts) a wrapped key, creating a new key object: Error, key: Handle) => void} cb Async callback with new key handle
         * @param  Session's handle
         * @param  Unwrapping mechanism
         * @param  Unwrapping key
         * @param  Wrapped key
         * @param  New key template
         */
        C_UnwrapKey(
            session: Handle,
            mechanism: Mechanism,
            unwrappingKey: Handle,
            wrappedKey: Buffer,
            template: Template,
            cb: (error: Error, key: Handle) => void): void;

        /**
         * Derives a key from a base key, creating a new key object
         * @param  Session's handle
         * @param  Key derivation mechanism
         * @param  Base key
         * @param  new key template
         * @returns  Get new key handle
         */
        C_DeriveKey(session: Handle, mechanism: Mechanism, key: Handle, template: Template): Handle;

        /**
         * Derives a key from a base key, creating a new key object: Error, hKey: Handle) => void} cb Async callback woth new key handle
         * @param  Session's handle
         * @param  Key derivation mechanism
         * @param  Base key
         * @param  new key template
         */
        C_DeriveKey(
            session: Handle,
            mechanism: Mechanism,
            key: Handle,
            template: Template,
            cb: (error: Error, hKey: Handle) => void): void;

        /**
         * Mixes additional seed material into the token's random number generator 
         * @param  Session's handle
         * @param  The seed material
         * @returns  Seeded data
         */
        C_SeedRandom(session: Handle, buf: Buffer): Buffer;

        /**
         * Generates random data
         * @param  Session's handle
         * @param  Init buffer
         * @returns  Receives the random data
         */
        C_GenerateRandom(session: Handle, buf: Buffer): Buffer
    }
    declare     var CKA_CLASS: number;
    declare     var CKA_TOKEN: number;
    declare     var CKA_PRIVATE: number;
    declare     var CKA_LABEL: number;
    declare     var CKA_APPLICATION: number;
    declare     var CKA_VALUE: number;
    declare     var CKA_OBJECT_ID: number;
    declare     var CKA_CERTIFICATE_TYPE: number;
    declare     var CKA_ISSUER: number;
    declare     var CKA_SERIAL_NUMBER: number;
    declare     var CKA_AC_ISSUER: number;
    declare     var CKA_OWNER: number;
    declare     var CKA_ATTR_TYPES: number;
    declare     var CKA_TRUSTED: number;
    declare     var CKA_CERTIFICATE_CATEGORY: number;
    declare     var CKA_JAVA_MIDP_SECURITY_DOMAIN: number;
    declare     var CKA_URL: number;
    declare     var CKA_HASH_OF_SUBJECT_PUBLIC_KEY: number;
    declare     var CKA_HASH_OF_ISSUER_PUBLIC_KEY: number;
    declare     var CKA_CHECK_VALUE: number;
    declare     var CKA_KEY_TYPE: number;
    declare     var CKA_SUBJECT: number;
    declare     var CKA_ID: number;
    declare     var CKA_SENSITIVE: number;
    declare     var CKA_ENCRYPT: number;
    declare     var CKA_DECRYPT: number;
    declare     var CKA_WRAP: number;
    declare     var CKA_UNWRAP: number;
    declare     var CKA_SIGN: number;
    declare     var CKA_SIGN_RECOVER: number;
    declare     var CKA_VERIFY: number;
    declare     var CKA_VERIFY_RECOVER: number;
    declare     var CKA_DERIVE: number;
    declare     var CKA_START_DATE: number;
    declare     var CKA_END_DATE: number;
    declare     var CKA_MODULUS: number;
    declare     var CKA_MODULUS_BITS: number;
    declare     var CKA_PUBLIC_EXPONENT: number;
    declare     var CKA_PRIVATE_EXPONENT: number;
    declare     var CKA_PRIME_1: number;
    declare     var CKA_PRIME_2: number;
    declare     var CKA_EXPONENT_1: number;
    declare     var CKA_EXPONENT_2: number;
    declare     var CKA_COEFFICIENT: number;
    declare     var CKA_PRIME: number;
    declare     var CKA_SUBPRIME: number;
    declare     var CKA_BASE: number;
    declare     var CKA_PRIME_BITS: number;
    declare     var CKA_SUBPRIME_BITS: number;
    declare     var CKA_SUB_PRIME_BITS: number;
    declare     var CKA_VALUE_BITS: number;
    declare     var CKA_VALUE_LEN: number;
    declare     var CKA_EXTRACTABLE: number;
    declare     var CKA_LOCAL: number;
    declare     var CKA_NEVER_EXTRACTABLE: number;
    declare     var CKA_ALWAYS_SENSITIVE: number;
    declare     var CKA_KEY_GEN_MECHANISM: number;
    declare     var CKA_MODIFIABLE: number;
    declare     var CKA_ECDSA_PARAMS: number;
    declare     var CKA_EC_PARAMS: number;
    declare     var CKA_EC_POINT: number;
    declare     var CKA_SECONDARY_AUTH: number;
    declare     var CKA_AUTH_PIN_FLAGS: number;
    declare     var CKA_ALWAYS_AUTHENTICATE: number;
    declare     var CKA_WRAP_WITH_TRUSTED: number;
    declare     var CKA_WRAP_TEMPLATE: number;
    declare     var CKA_UNWRAP_TEMPLATE: number;
    declare     var CKA_DERIVE_TEMPLATE: number;
    declare     var CKA_OTP_FORMAT: number;
    declare     var CKA_OTP_LENGTH: number;
    declare     var CKA_OTP_TIME_INTERVAL: number;
    declare     var CKA_OTP_USER_FRIENDLY_MODE: number;
    declare     var CKA_OTP_CHALLENGE_REQUIREMENT: number;
    declare     var CKA_OTP_TIME_REQUIREMENT: number;
    declare     var CKA_OTP_COUNTER_REQUIREMENT: number;
    declare     var CKA_OTP_PIN_REQUIREMENT: number;
    declare     var CKA_OTP_COUNTER: number;
    declare     var CKA_OTP_TIME: number;
    declare     var CKA_OTP_USER_IDENTIFIER: number;
    declare     var CKA_OTP_SERVICE_IDENTIFIER: number;
    declare     var CKA_OTP_SERVICE_LOGO: number;
    declare     var CKA_OTP_SERVICE_LOGO_TYPE: number;
    declare     var CKA_GOSTR3410_PARAMS: number;
    declare     var CKA_GOSTR3411_PARAMS: number;
    declare     var CKA_GOST28147_PARAMS: number;
    declare     var CKA_HW_FEATURE_TYPE: number;
    declare     var CKA_RESET_ON_INIT: number;
    declare     var CKA_HAS_RESET: number;
    declare     var CKA_PIXEL_X: number;
    declare     var CKA_PIXEL_Y: number;
    declare     var CKA_RESOLUTION: number;
    declare     var CKA_CHAR_ROWS: number;
    declare     var CKA_CHAR_COLUMNS: number;
    declare     var CKA_COLOR: number;
    declare     var CKA_BITS_PER_PIXEL: number;
    declare     var CKA_CHAR_SETS: number;
    declare     var CKA_ENCODING_METHODS: number;
    declare     var CKA_MIME_TYPES: number;
    declare     var CKA_MECHANISM_TYPE: number;
    declare     var CKA_REQUIRED_CMS_ATTRIBUTES: number;
    declare     var CKA_DEFAULT_CMS_ATTRIBUTES: number;
    declare     var CKA_SUPPORTED_CMS_ATTRIBUTES: number;
    declare     var CKA_ALLOWED_MECHANISMS: number;
    declare     var CKA_VENDOR_DEFINED: number;
    declare     var CKO_DATA: number;
    declare     var CKO_CERTIFICATE: number;
    declare     var CKO_PUBLIC_KEY: number;
    declare     var CKO_PRIVATE_KEY: number;
    declare     var CKO_SECRET_KEY: number;
    declare     var CKO_HW_FEATURE: number;
    declare     var CKO_DOMAIN_PARAMETERS: number;
    declare     var CKO_MECHANISM: number;
    declare     var CKO_OTP_KEY: number;
    declare     var CKO_VENDOR_DEFINED: number;
    declare     var CKK_RSA: number;
    declare     var CKK_DSA: number;
    declare     var CKK_DH: number;
    declare     var CKK_ECDSA: number;
    declare     var CKK_EC: number;
    declare     var CKK_X9_42_DH: number;
    declare     var CKK_KEA: number;
    declare     var CKK_GENERIC_SECRET: number;
    declare     var CKK_RC2: number;
    declare     var CKK_RC4: number;
    declare     var CKK_DES: number;
    declare     var CKK_DES2: number;
    declare     var CKK_DES3: number;
    declare     var CKK_CAST: number;
    declare     var CKK_CAST3: number;
    declare     var CKK_CAST5: number;
    declare     var CKK_CAST128: number;
    declare     var CKK_RC5: number;
    declare     var CKK_IDEA: number;
    declare     var CKK_SKIPJACK: number;
    declare     var CKK_BATON: number;
    declare     var CKK_JUNIPER: number;
    declare     var CKK_CDMF: number;
    declare     var CKK_AES: number;
    declare     var CKK_BLOWFISH: number;
    declare     var CKK_TWOFISH: number;
    declare     var CKK_SECURID: number;
    declare     var CKK_HOTP: number;
    declare     var CKK_ACTI: number;
    declare     var CKK_CAMELLIA: number;
    declare     var CKK_ARIA: number;
    declare     var CKK_MD5_HMAC: number;
    declare     var CKK_SHA_1_HMAC: number;
    declare     var CKK_RIPEMD128_HMAC: number;
    declare     var CKK_RIPEMD160_HMAC: number;
    declare     var CKK_SHA256_HMAC: number;
    declare     var CKK_SHA384_HMAC: number;
    declare     var CKK_SHA512_HMAC: number;
    declare     var CKK_SHA224_HMAC: number;
    declare     var CKK_SEED: number;
    declare     var CKK_GOSTR3410: number;
    declare     var CKK_GOSTR3411: number;
    declare     var CKK_GOST28147: number;
    declare     var CKK_VENDOR_DEFINED: number;
    declare     var CKM_RSA_PKCS_KEY_PAIR_GEN: number;
    declare     var CKM_RSA_PKCS: number;
    declare     var CKM_RSA_9796: number;
    declare     var CKM_RSA_X_509: number;
    declare     var CKM_MD2_RSA_PKCS: number;
    declare     var CKM_MD5_RSA_PKCS: number;
    declare     var CKM_SHA1_RSA_PKCS: number;
    declare     var CKM_RIPEMD128_RSA_PKCS: number;
    declare     var CKM_RIPEMD160_RSA_PKCS: number;
    declare     var CKM_RSA_PKCS_OAEP: number;
    declare     var CKM_RSA_X9_31_KEY_PAIR_GEN: number;
    declare     var CKM_RSA_X9_31: number;
    declare     var CKM_SHA1_RSA_X9_31: number;
    declare     var CKM_RSA_PKCS_PSS: number;
    declare     var CKM_SHA1_RSA_PKCS_PSS: number;
    declare     var CKM_DSA_KEY_PAIR_GEN: number;
    declare     var CKM_DSA: number;
    declare     var CKM_DSA_SHA1: number;
    declare     var CKM_DSA_SHA224: number;
    declare     var CKM_DSA_SHA256: number;
    declare     var CKM_DSA_SHA384: number;
    declare     var CKM_DSA_SHA512: number;
    declare     var CKM_DH_PKCS_KEY_PAIR_GEN: number;
    declare     var CKM_DH_PKCS_DERIVE: number;
    declare     var CKM_X9_42_DH_KEY_PAIR_GEN: number;
    declare     var CKM_X9_42_DH_DERIVE: number;
    declare     var CKM_X9_42_DH_HYBRID_DERIVE: number;
    declare     var CKM_X9_42_MQV_DERIVE: number;
    declare     var CKM_SHA256_RSA_PKCS: number;
    declare     var CKM_SHA384_RSA_PKCS: number;
    declare     var CKM_SHA512_RSA_PKCS: number;
    declare     var CKM_SHA256_RSA_PKCS_PSS: number;
    declare     var CKM_SHA384_RSA_PKCS_PSS: number;
    declare     var CKM_SHA512_RSA_PKCS_PSS: number;
    declare     var CKM_SHA224_RSA_PKCS: number;
    declare     var CKM_SHA224_RSA_PKCS_PSS: number;
    declare     var CKM_RC2_KEY_GEN: number;
    declare     var CKM_RC2_ECB: number;
    declare     var CKM_RC2_CBC: number;
    declare     var CKM_RC2_MAC: number;
    declare     var CKM_RC2_MAC_GENERAL: number;
    declare     var CKM_RC2_CBC_PAD: number;
    declare     var CKM_RC4_KEY_GEN: number;
    declare     var CKM_RC4: number;
    declare     var CKM_DES_KEY_GEN: number;
    declare     var CKM_DES_ECB: number;
    declare     var CKM_DES_CBC: number;
    declare     var CKM_DES_MAC: number;
    declare     var CKM_DES_MAC_GENERAL: number;
    declare     var CKM_DES_CBC_PAD: number;
    declare     var CKM_DES2_KEY_GEN: number;
    declare     var CKM_DES3_KEY_GEN: number;
    declare     var CKM_DES3_ECB: number;
    declare     var CKM_DES3_CBC: number;
    declare     var CKM_DES3_MAC: number;
    declare     var CKM_DES3_MAC_GENERAL: number;
    declare     var CKM_DES3_CBC_PAD: number;
    declare     var CKM_DES3_CMAC_GENERAL: number;
    declare     var CKM_DES3_CMAC: number;
    declare     var CKM_CDMF_KEY_GEN: number;
    declare     var CKM_CDMF_ECB: number;
    declare     var CKM_CDMF_CBC: number;
    declare     var CKM_CDMF_MAC: number;
    declare     var CKM_CDMF_MAC_GENERAL: number;
    declare     var CKM_CDMF_CBC_PAD: number;
    declare     var CKM_DES_OFB64: number;
    declare     var CKM_DES_OFB8: number;
    declare     var CKM_DES_CFB64: number;
    declare     var CKM_DES_CFB8: number;
    declare     var CKM_MD2: number;
    declare     var CKM_MD2_HMAC: number;
    declare     var CKM_MD2_HMAC_GENERAL: number;
    declare     var CKM_MD5: number;
    declare     var CKM_MD5_HMAC: number;
    declare     var CKM_MD5_HMAC_GENERAL: number;
    declare     var CKM_SHA_1: number;
    declare     var CKM_SHA_1_HMAC: number;
    declare     var CKM_SHA_1_HMAC_GENERAL: number;
    declare     var CKM_RIPEMD128: number;
    declare     var CKM_RIPEMD128_HMAC: number;
    declare     var CKM_RIPEMD128_HMAC_GENERAL: number;
    declare     var CKM_RIPEMD160: number;
    declare     var CKM_RIPEMD160_HMAC: number;
    declare     var CKM_RIPEMD160_HMAC_GENERAL: number;
    declare     var CKM_SHA256: number;
    declare     var CKM_SHA256_HMAC: number;
    declare     var CKM_SHA256_HMAC_GENERAL: number;
    declare     var CKM_SHA224: number;
    declare     var CKM_SHA224_HMAC: number;
    declare     var CKM_SHA224_HMAC_GENERAL: number;
    declare     var CKM_SHA384: number;
    declare     var CKM_SHA384_HMAC: number;
    declare     var CKM_SHA384_HMAC_GENERAL: number;
    declare     var CKM_SHA512: number;
    declare     var CKM_SHA512_HMAC: number;
    declare     var CKM_SHA512_HMAC_GENERAL: number;
    declare     var CKM_SECURID_KEY_GEN: number;
    declare     var CKM_SECURID: number;
    declare     var CKM_HOTP_KEY_GEN: number;
    declare     var CKM_HOTP: number;
    declare     var CKM_ACTI: number;
    declare     var CKM_ACTI_KEY_GEN: number;
    declare     var CKM_CAST_KEY_GEN: number;
    declare     var CKM_CAST_ECB: number;
    declare     var CKM_CAST_CBC: number;
    declare     var CKM_CAST_MAC: number;
    declare     var CKM_CAST_MAC_GENERAL: number;
    declare     var CKM_CAST_CBC_PAD: number;
    declare     var CKM_CAST3_KEY_GEN: number;
    declare     var CKM_CAST3_ECB: number;
    declare     var CKM_CAST3_CBC: number;
    declare     var CKM_CAST3_MAC: number;
    declare     var CKM_CAST3_MAC_GENERAL: number;
    declare     var CKM_CAST3_CBC_PAD: number;
    declare     var CKM_CAST5_KEY_GEN: number;
    declare     var CKM_CAST128_KEY_GEN: number;
    declare     var CKM_CAST5_ECB: number;
    declare     var CKM_CAST128_ECB: number;
    declare     var CKM_CAST5_CBC: number;
    declare     var CKM_CAST128_CBC: number;
    declare     var CKM_CAST5_MAC: number;
    declare     var CKM_CAST128_MAC: number;
    declare     var CKM_CAST5_MAC_GENERAL: number;
    declare     var CKM_CAST128_MAC_GENERAL: number;
    declare     var CKM_CAST5_CBC_PAD: number;
    declare     var CKM_CAST128_CBC_PAD: number;
    declare     var CKM_RC5_KEY_GEN: number;
    declare     var CKM_RC5_ECB: number;
    declare     var CKM_RC5_CBC: number;
    declare     var CKM_RC5_MAC: number;
    declare     var CKM_RC5_MAC_GENERAL: number;
    declare     var CKM_RC5_CBC_PAD: number;
    declare     var CKM_IDEA_KEY_GEN: number;
    declare     var CKM_IDEA_ECB: number;
    declare     var CKM_IDEA_CBC: number;
    declare     var CKM_IDEA_MAC: number;
    declare     var CKM_IDEA_MAC_GENERAL: number;
    declare     var CKM_IDEA_CBC_PAD: number;
    declare     var CKM_GENERIC_SECRET_KEY_GEN: number;
    declare     var CKM_CONCATENATE_BASE_AND_KEY: number;
    declare     var CKM_CONCATENATE_BASE_AND_DATA: number;
    declare     var CKM_CONCATENATE_DATA_AND_BASE: number;
    declare     var CKM_XOR_BASE_AND_DATA: number;
    declare     var CKM_EXTRACT_KEY_FROM_KEY: number;
    declare     var CKM_SSL3_PRE_MASTER_KEY_GEN: number;
    declare     var CKM_SSL3_MASTER_KEY_DERIVE: number;
    declare     var CKM_SSL3_KEY_AND_MAC_DERIVE: number;
    declare     var CKM_SSL3_MASTER_KEY_DERIVE_DH: number;
    declare     var CKM_TLS_PRE_MASTER_KEY_GEN: number;
    declare     var CKM_TLS_MASTER_KEY_DERIVE: number;
    declare     var CKM_TLS_KEY_AND_MAC_DERIVE: number;
    declare     var CKM_TLS_MASTER_KEY_DERIVE_DH: number;
    declare     var CKM_TLS_PRF: number;
    declare     var CKM_SSL3_MD5_MAC: number;
    declare     var CKM_SSL3_SHA1_MAC: number;
    declare     var CKM_MD5_KEY_DERIVATION: number;
    declare     var CKM_MD2_KEY_DERIVATION: number;
    declare     var CKM_SHA1_KEY_DERIVATION: number;
    declare     var CKM_SHA256_KEY_DERIVATION: number;
    declare     var CKM_SHA384_KEY_DERIVATION: number;
    declare     var CKM_SHA512_KEY_DERIVATION: number;
    declare     var CKM_SHA224_KEY_DERIVATION: number;
    declare     var CKM_PBE_MD2_DES_CBC: number;
    declare     var CKM_PBE_MD5_DES_CBC: number;
    declare     var CKM_PBE_MD5_CAST_CBC: number;
    declare     var CKM_PBE_MD5_CAST3_CBC: number;
    declare     var CKM_PBE_MD5_CAST5_CBC: number;
    declare     var CKM_PBE_MD5_CAST128_CBC: number;
    declare     var CKM_PBE_SHA1_CAST5_CBC: number;
    declare     var CKM_PBE_SHA1_CAST128_CBC: number;
    declare     var CKM_PBE_SHA1_RC4_128: number;
    declare     var CKM_PBE_SHA1_RC4_40: number;
    declare     var CKM_PBE_SHA1_DES3_EDE_CBC: number;
    declare     var CKM_PBE_SHA1_DES2_EDE_CBC: number;
    declare     var CKM_PBE_SHA1_RC2_128_CBC: number;
    declare     var CKM_PBE_SHA1_RC2_40_CBC: number;
    declare     var CKM_PKCS5_PBKD2: number;
    declare     var CKM_PBA_SHA1_WITH_SHA1_HMAC: number;
    declare     var CKM_WTLS_PRE_MASTER_KEY_GEN: number;
    declare     var CKM_WTLS_MASTER_KEY_DERIVE: number;
    declare     var CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC: number;
    declare     var CKM_WTLS_PRF: number;
    declare     var CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE: number;
    declare     var CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE: number;
    declare     var CKM_KEY_WRAP_LYNKS: number;
    declare     var CKM_KEY_WRAP_SET_OAEP: number;
    declare     var CKM_CAMELLIA_KEY_GEN: number;
    declare     var CKM_CAMELLIA_ECB: number;
    declare     var CKM_CAMELLIA_CBC: number;
    declare     var CKM_CAMELLIA_MAC: number;
    declare     var CKM_CAMELLIA_MAC_GENERAL: number;
    declare     var CKM_CAMELLIA_CBC_PAD: number;
    declare     var CKM_CAMELLIA_ECB_ENCRYPT_DATA: number;
    declare     var CKM_CAMELLIA_CBC_ENCRYPT_DATA: number;
    declare     var CKM_CAMELLIA_CTR: number;
    declare     var CKM_ARIA_KEY_GEN: number;
    declare     var CKM_ARIA_ECB: number;
    declare     var CKM_ARIA_CBC: number;
    declare     var CKM_ARIA_MAC: number;
    declare     var CKM_ARIA_MAC_GENERAL: number;
    declare     var CKM_ARIA_CBC_PAD: number;
    declare     var CKM_ARIA_ECB_ENCRYPT_DATA: number;
    declare     var CKM_ARIA_CBC_ENCRYPT_DATA: number;
    declare     var CKM_SEED_KEY_GEN: number;
    declare     var CKM_SEED_ECB: number;
    declare     var CKM_SEED_CBC: number;
    declare     var CKM_SEED_MAC: number;
    declare     var CKM_SEED_MAC_GENERAL: number;
    declare     var CKM_SEED_CBC_PAD: number;
    declare     var CKM_SEED_ECB_ENCRYPT_DATA: number;
    declare     var CKM_SEED_CBC_ENCRYPT_DATA: number;
    declare     var CKM_SKIPJACK_KEY_GEN: number;
    declare     var CKM_SKIPJACK_ECB64: number;
    declare     var CKM_SKIPJACK_CBC64: number;
    declare     var CKM_SKIPJACK_OFB64: number;
    declare     var CKM_SKIPJACK_CFB64: number;
    declare     var CKM_SKIPJACK_CFB32: number;
    declare     var CKM_SKIPJACK_CFB16: number;
    declare     var CKM_SKIPJACK_CFB8: number;
    declare     var CKM_SKIPJACK_WRAP: number;
    declare     var CKM_SKIPJACK_PRIVATE_WRAP: number;
    declare     var CKM_SKIPJACK_RELAYX: number;
    declare     var CKM_KEA_KEY_PAIR_GEN: number;
    declare     var CKM_KEA_KEY_DERIVE: number;
    declare     var CKM_FORTEZZA_TIMESTAMP: number;
    declare     var CKM_BATON_KEY_GEN: number;
    declare     var CKM_BATON_ECB128: number;
    declare     var CKM_BATON_ECB96: number;
    declare     var CKM_BATON_CBC128: number;
    declare     var CKM_BATON_COUNTER: number;
    declare     var CKM_BATON_SHUFFLE: number;
    declare     var CKM_BATON_WRAP: number;
    declare     var CKM_ECDSA_KEY_PAIR_GEN: number;
    declare     var CKM_EC_KEY_PAIR_GEN: number;
    declare     var CKM_ECDSA: number;
    declare     var CKM_ECDSA_SHA1: number;
    declare     var CKM_ECDSA_SHA224: number;
    declare     var CKM_ECDSA_SHA256: number;
    declare     var CKM_ECDSA_SHA384: number;
    declare     var CKM_ECDSA_SHA512: number;
    declare     var CKM_ECDH1_DERIVE: number;
    declare     var CKM_ECDH1_COFACTOR_DERIVE: number;
    declare     var CKM_ECMQV_DERIVE: number;
    declare     var CKM_JUNIPER_KEY_GEN: number;
    declare     var CKM_JUNIPER_ECB128: number;
    declare     var CKM_JUNIPER_CBC128: number;
    declare     var CKM_JUNIPER_COUNTER: number;
    declare     var CKM_JUNIPER_SHUFFLE: number;
    declare     var CKM_JUNIPER_WRAP: number;
    declare     var CKM_FASTHASH: number;
    declare     var CKM_AES_KEY_GEN: number;
    declare     var CKM_AES_ECB: number;
    declare     var CKM_AES_CBC: number;
    declare     var CKM_AES_MAC: number;
    declare     var CKM_AES_MAC_GENERAL: number;
    declare     var CKM_AES_CBC_PAD: number;
    declare     var CKM_AES_CTR: number;
    declare     var CKM_AES_CTS: number;
    declare     var CKM_AES_CMAC: number;
    declare     var CKM_AES_CMAC_GENERAL: number;
    declare     var CKM_BLOWFISH_KEY_GEN: number;
    declare     var CKM_BLOWFISH_CBC: number;
    declare     var CKM_TWOFISH_KEY_GEN: number;
    declare     var CKM_TWOFISH_CBC: number;
    declare     var CKM_AES_GCM: number;
    declare     var CKM_AES_CCM: number;
    declare     var CKM_AES_KEY_WRAP: number;
    declare     var CKM_AES_KEY_WRAP_PAD: number;
    declare     var CKM_BLOWFISH_CBC_PAD: number;
    declare     var CKM_TWOFISH_CBC_PAD: number;
    declare     var CKM_DES_ECB_ENCRYPT_DATA: number;
    declare     var CKM_DES_CBC_ENCRYPT_DATA: number;
    declare     var CKM_DES3_ECB_ENCRYPT_DATA: number;
    declare     var CKM_DES3_CBC_ENCRYPT_DATA: number;
    declare     var CKM_AES_ECB_ENCRYPT_DATA: number;
    declare     var CKM_AES_CBC_ENCRYPT_DATA: number;
    declare     var CKM_GOSTR3410_KEY_PAIR_GEN: number;
    declare     var CKM_GOSTR3410: number;
    declare     var CKM_GOSTR3410_WITH_GOSTR3411: number;
    declare     var CKM_GOSTR3410_KEY_WRAP: number;
    declare     var CKM_GOSTR3410_DERIVE: number;
    declare     var CKM_GOSTR3411: number;
    declare     var CKM_GOSTR3411_HMAC: number;
    declare     var CKM_GOST28147_KEY_GEN: number;
    declare     var CKM_GOST28147_ECB: number;
    declare     var CKM_GOST28147: number;
    declare     var CKM_GOST28147_MAC: number;
    declare     var CKM_GOST28147_KEY_WRAP: number;
    declare     var CKM_DSA_PARAMETER_GEN: number;
    declare     var CKM_DH_PKCS_PARAMETER_GEN: number;
    declare     var CKM_X9_42_DH_PARAMETER_GEN: number;
    declare     var CKM_AES_OFB: number;
    declare     var CKM_AES_CFB64: number;
    declare     var CKM_AES_CFB8: number;
    declare     var CKM_AES_CFB128: number;
    declare     var CKM_RSA_PKCS_TPM_1_1: number;
    declare     var CKM_RSA_PKCS_OAEP_TPM_1_1: number;
    declare     var CKM_VENDOR_DEFINED: number;
    declare     var CKF_RW_SESSION: number;
    declare     var CKF_SERIAL_SESSION: number;
    declare     var CKF_HW: number;
    declare     var CKF_ENCRYPT: number;
    declare     var CKF_DECRYPT: number;
    declare     var CKF_DIGEST: number;
    declare     var CKF_SIGN: number;
    declare     var CKF_SIGN_RECOVER: number;
    declare     var CKF_VERIFY: number;
    declare     var CKF_VERIFY_RECOVER: number;
    declare     var CKF_GENERATE: number;
    declare     var CKF_GENERATE_KEY_PAIR: number;
    declare     var CKF_WRAP: number;
    declare     var CKF_UNWRAP: number;
    declare     var CKF_DERIVE: number;
    declare     var CKF_CLOCK_ON_TOKEN: number;
    declare     var CKC_X_509: number;
    declare     var CKC_X_509_ATTR_CERT: number;
    declare     var CKC_WTLS: number;
    declare     var CKG_MGF1_SHA1: number;
    declare     var CKG_MGF1_SHA256: number;
    declare     var CKG_MGF1_SHA384: number;
    declare     var CKG_MGF1_SHA512: number;
    declare     var CKG_MGF1_SHA224: number;
    declare     var CKD_NULL: number;
    declare     var CKD_SHA1_KDF: number;
    declare     var CKD_SHA1_KDF_ASN1: number;
    declare     var CKD_SHA1_KDF_CONCATENATE: number;
    declare     var CKD_SHA224_KDF: number;
    declare     var CKD_SHA256_KDF: number;
    declare     var CKD_SHA384_KDF: number;
    declare     var CKD_SHA512_KDF: number;
    declare     var CKD_CPDIVERSIFY_KDF: number;
    declare     var CK_PARAMS_AES_CBC: number;
    declare     var CK_PARAMS_AES_CCM: number;
    declare     var CK_PARAMS_AES_GCM: number;
    declare     var CK_PARAMS_RSA_OAEP: number;
    declare     var CK_PARAMS_RSA_PSS: number;
    declare     var CK_PARAMS_EC_DH: number;
}