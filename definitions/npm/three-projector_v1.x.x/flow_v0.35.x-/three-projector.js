/**
 * Flowtype definitions for three-projector
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
export class RenderableObject {
    constructor(): this;
    id: number;
    object: Object;
    z: number
}

declare
export class RenderableFace {
    constructor(): this;
    id: number;
    v1: THREE$RenderableVertex;
    v2: THREE$RenderableVertex;
    v3: THREE$RenderableVertex;
    normalModel: Vector3;
    vertexNormalsModel: Vector3[];
    vertexNormalsLength: number;
    color: Color;
    material: Material;
    uvs: Vector2[][];
    z: number
}

declare
export class RenderableVertex {
    constructor(): this;
    position: Vector3;
    positionWorld: Vector3;
    positionScreen: Vector4;
    visible: boolean;
    copy(vertex: THREE$RenderableVertex): void
}

declare
export class RenderableLine {
    constructor(): this;
    id: number;
    v1: THREE$RenderableVertex;
    v2: THREE$RenderableVertex;
    vertexColors: Color[];
    material: Material;
    z: number
}

declare
export class RenderableSprite {
    constructor(): this;
    id: number;
    object: Object;
    x: number;
    y: number;
    z: number;
    rotation: number;
    scale: Vector2;
    material: Material
}


/**
 * Projects points between spaces.
 */
declare
export class Projector {
    constructor(): this;
    projectVector(vector: Vector3, camera: Camera): Vector3;
    unprojectVector(vector: Vector3, camera: Camera): Vector3;

    /**
     * Transforms a 3D scene object into 2D render data that can be rendered in a screen with your renderer of choice, projecting and clipping things out according to the used camera.
     * If the scene were a real scene, this method would be the equivalent of taking a picture with the camera (and developing the film would be the next step, using a Renderer).
     * @param scene scene to project.
     * @param camera camera to use in the projection.
     * @param sort select whether to sort elements using the Painter's algorithm.
     */
    projectScene(
        scene: Scene,
        camera: Camera,
        sortObjects: boolean,
        sortElements?: boolean): {
        objects: Object3D[],
        sprites: Object3D[],
        lights: Light[],
        elements: Face3[]
    }
}