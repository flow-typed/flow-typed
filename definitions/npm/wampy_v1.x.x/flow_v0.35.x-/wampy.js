// @flow
/**
 * Flowtype definitions for wampy
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'wampy' {
    declare interface WampyOptions {
        autoReconnect?: boolean,
            reconnectInterval?: number,
            maxRetries?: number,
            transportEncoding?: string,
            realm?: string,
            helloCustomDetails?: any,
            onChallenge?: (auth_method: string, challenge_details: string) => string,
            authid?: string,
            onConnect?: () => void,
            onClose?: () => void,
            onError?: () => void,
            onReconnect?: () => void,
            onReconnectSuccess?: () => void,
            ws?: any,
            msgpackCoder?: any
    }
    declare interface WampyOpStatus {
        code: number,
            description: string,
            reqId?: number
    }
    declare interface SuccessErrorCallbacksHash {
        onSuccess?: (data: any) => void,
            onError?: (err: string) => void
    }
    declare type SubscribeCallbacksHash = {
        onEvent: (data: any) => void
    } & SuccessErrorCallbacksHash

    declare type RegisterCallbacksHash = {
        rpc: (data: any, options: any) => any[]
    } & SuccessErrorCallbacksHash

    declare interface CallSuccessErrorCallbacksHash {
        onSuccess: (data: any) => any,
            onError?: (err: string) => void
    }
    declare interface AdvancedOptions {
        exclude?: number | number[],
            eligible?: number | number[],
            exclude_me?: boolean,
            disclose_me?: boolean
    }
    declare type PublishAdvancedOptions = {
        exclude_authid?: string | string[],
        exclude_authrole?: string | string[],
        eligible_authid?: string | string[],
        eligible_authrole?: string | string[]
    } & AdvancedOptions

    declare interface CallAdvancedOptions {
        disclose_me?: boolean,
            receive_progress?: boolean,
            timeout?: number
    }
    declare interface CancelAdvancedOptions {
        mode?: "skip" | "kill" | "killnowait"
    }
    declare interface Wampy {
        options(opts?: WampyOptions): WampyOptions | Wampy,
            getOpStatus(): WampyOpStatus,
            getSessionId(): number,
            connect(url?: string): Wampy,
            disconnect(): Wampy,
            abort(): Wampy,
            subscribe(
                topicURI: string,
                callbacks: (((data: any) => void) | SubscribeCallbacksHash)): Wampy,
            unsubscribe(
                topicURI: string,
                callbacks?: (((data: any) => void) | SubscribeCallbacksHash)): Wampy,
            publish(
                topicURI: string,
                payload?: any,
                callbacks?: SuccessErrorCallbacksHash,
                advancedOptions?: PublishAdvancedOptions): Wampy,
            call(
                topicURI: string,
                payload?: any,
                callbacks?: (((data: any) => void) | CallSuccessErrorCallbacksHash),
                advancedOptions?: CallAdvancedOptions): Wampy,
            cancel(
                reqId: number,
                callbacks?: ((() => void) | SuccessErrorCallbacksHash),
                advancedOptions?: CancelAdvancedOptions): Wampy,
            register(
                topicURI: string,
                callbacks: (((data: any, options: any) => any[]) | RegisterCallbacksHash)): Wampy,
            unregister(
                topicURI: string,
                callbacks?: ((() => void) | SuccessErrorCallbacksHash)): Wampy
    }
    declare interface WampyInstance {
        new(url?: string, options?: WampyOptions): Wampy
    }
    declare     var wampy: WampyInstance;
    declare module.exports: typeof wampy
}