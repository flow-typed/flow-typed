/**
 * Flowtype definitions for eventemitter3
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 */
declare class EventEmitter {
    constructor(): this;

    /**
     * Return an array listing the events for which the emitter has registered listeners.
     * @returns  
     */
    eventNames(): (string | )[];

    /**
     * Return the listeners registered for a given event.
     * @param  The event name.
     * @returns  
     */
    listeners(event: string | ): Function[];

    /**
     * Check if there listeners for a given event.
     * If `exists` argument is not `true` lists listeners.
     * @param  The event name.
     * @param  Only check if there are listeners.
     * @returns  
     */
    listeners(event: string | , exists: boolean): boolean;

    /**
     * Calls each of the listeners registered for a given event.
     * @param  The event name.
     * @param  Arguments that are passed to registered listeners
     * @returns  `true` if the event had listeners, else `false`.
     */
    emit(event: string | , ...args: any[]): boolean;

    /**
     * Add a listener for a given event.
     * @param  The event name.
     * @param  The listener function.
     * @param  The context to invoke the listener with.
     * @returns  `this`.
     */
    on(event: string | , fn: Function, context?: any): this;

    /**
     * Add a one-time listener for a given event.
     * @param  The event name.
     * @param  The listener function.
     * @param  The context to invoke the listener with.
     * @returns  `this`.
     */
    once(event: string | , fn: Function, context?: any): this;

    /**
     * Remove the listeners of a given event.
     * @param  The event name.
     * @param  Only remove the listeners that match this function.
     * @param  Only remove the listeners that have this context.
     * @param  Only remove one-time listeners.
     * @returns  `this`.
     */
    removeListener(event: string | , fn?: Function, context?: any, once?: boolean): this;

    /**
     * Remove all listeners, or those of the specified event.
     * @param  The event name.
     * @returns  `this`.
     */
    removeAllListeners(event?: string | ): this;

    /**
     * Alias method for `removeListener`
     */
    off(event: string | , fn?: Function, context?: any, once?: boolean): this;

    /**
     * Alias method for `on`
     */
    addListener(event: string | , fn: Function, context?: any): this;

    /**
     * This function doesn't apply anymore.
     * @deprecated  
     */
    setMaxListeners(): this;
    prefixed: string | boolean
}
declare module 'eventemitter3' {
    declare module.exports: typeof EventEmitter3$EventEmitter
}