/**
 * Flowtype definitions for redux-actions
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$ReduxActions: {
    createAction: typeof ReduxActions$createAction,
    handleAction: typeof ReduxActions$handleAction,
    handleActions: typeof ReduxActions$handleActions,
    combineActions: typeof ReduxActions$combineActions,
}
declare interface ReduxActions$BaseAction {
    type: string
}

declare type ReduxActions$Action<Payload>= {
    payload?: Payload,
    error?: boolean,
    meta?: any
} & ReduxActions$BaseAction


declare type ReduxActions$ActionMeta<Payload, Meta>= {
    meta: Meta
} & ReduxActions$Action


declare type ReduxActions$PayloadCreator<Input, Payload>= (...args: Input[]) => Payload;

declare type ReduxActions$MetaCreator<Input, Payload>= (...args: Input[]) => Payload;

declare type ReduxActions$Reducer<State, Payload>= (state: State, action: ReduxActions$Action<Payload>) => State;

declare type ReduxActions$ReducerMeta<State, Payload, Meta>= (state: State, action: ReduxActions$ActionMeta<Payload, Meta>) => State;

declare type ReduxActions$ReducerMap<State, Payload>= {
    [actionType: string]: ReduxActions$Reducer<State,
    Payload >
};

declare
export function ReduxActions$createAction(
    actionType: string,
    payloadCreator?: ReduxActions$PayloadCreator<any, any>,
    metaCreator?: ReduxActions$MetaCreator<any, any>): (...args: any[]) => ReduxActions$Action<any >

    declare
export function ReduxActions$handleAction<StateAndPayload>(
        actionType: {
            toString: () => string
        },
        reducer: ReduxActions$Reducer<StateAndPayload, StateAndPayload>| ReduxActions$ReducerMap<StateAndPayload, StateAndPayload>): ReduxActions$Reducer<StateAndPayload, StateAndPayload >

    declare
export function ReduxActions$handleActions<StateAndPayload>(
        reducerMap: ReduxActions$ReducerMap<StateAndPayload, StateAndPayload>,
        initialState?: StateAndPayload): ReduxActions$Reducer<StateAndPayload, StateAndPayload >

    declare
export function ReduxActions$combineActions(...actionTypes: {
    toString: () => string
}[]): {
    toString: () => string
}
declare module 'redux-actions' {
    declare module.exports: typeof ReduxActions
}