/**
 * Flowtype definitions for pem
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'pem' {

    /**
     * Creates a private key
     * @param  Size of the key, defaults to 2048bit (can also be a function)
     * @param  object of cipher and password {cipher:'aes128',password:'xxx'}, defaults empty object
     * @param  Callback function with an error object and {key}
     */
    declare function createPrivateKey(keyBitsize: Number, options: Object, callback: Function): void

    /**
     * Creates a dhparam key
     * @param  Size of the key, defaults to 512bit
     * @param  Callback function with an error object and {dhparam}
     */
    declare function createDhparam(keyBitsize: Number, callback: Function): void

    /**
     * Creates a Certificate Signing Request
     * 
    If client key is undefined, a new key is created automatically. The used key is included
    in the callback return as clientKey
     * @param  Optional options object
     * @param  .clientKey] Optional client key to use
     * @param  .keyBitsize] If clientKey is undefined, bit size to use for generating a new key (defaults to 2048)
     * @param  .hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)
     * @param  .country] CSR country field
     * @param  .state] CSR state field
     * @param  .locality] CSR locality field
     * @param  .organization] CSR organization field
     * @param  .organizationUnit] CSR organizational unit field
     * @param  .commonName='localhost'] CSR common name field
     * @param  .emailAddress] CSR email address field
     * @param  .csrConfigFile] CSR config file
     * @param  .altNames] is a list of subjectAltNames in the subjectAltName field
     * @param  Callback function with an error object and {csr, clientKey}
    */
    declare function createCSR(options: Object, callback: Function): void

    /**
     * Creates a certificate based on a CSR. If CSR is not defined, a new one
     * will be generated automatically. For CSR generation all the options values
    can be used as with createCSR.
     * @param  Optional options object
     * @param  .serviceKey] Private key for signing the certificate, if not defined a new one is generated
     * @param  .serviceKeyPassword] Password of the service key
     * @param  .selfSigned] If set to true and serviceKey is not defined, use clientKey for signing
     * @param  .hash] Hash function to use (either md5 sha1 or sha256, defaults to sha256)
     * @param  .csr] CSR for the certificate, if not defined a new one is generated
     * @param  .days] Certificate expire time in days
     * @param  .clientKeyPassword] Password of the client key
     * @param  .extFile] extension config file - without '-extensions v3_req'
     * @param  .config] extension config file - with '-extensions v3_req'
     * @param  Callback function with an error object and {certificate, csr, clientKey, serviceKey}
    */
    declare function createCertificate(options: Object, callback: Function): void

    /**
     * Reads subject data from a certificate or a CSR
     * @param  PEM encoded CSR or certificate
     * @param  Callback function with an error object and {country, state, locality, organization, organizationUnit, commonName, emailAddress}
     */
    declare function readCertificateInfo(certificate: string, callback: Function): void

    /**
     * Exports a public key from a private key, CSR or certificate
     * @param  PEM encoded private key, CSR or certificate
     * @param  Callback function with an error object and {publicKey}
     */
    declare function getPublicKey(certificate: string, callback: Function): void

    /**
     * Gets the fingerprint for a certificate
     * @param  PEM encoded certificate
     * @param  Hash function to use (either md5 sha1 or sha256, defaults to sha256)
     * @param  Callback function with an error object and {fingerprint}
     */
    declare function getFingerprint(certificate: string, hash: string, callback: Function): void

    /**
     * Gets the modulus from a certificate, a CSR or a private key
     * @param  PEM encoded, CSR PEM encoded, or private key
     * @param  password for the certificate
     * @param  Callback function with an error object and {modulus}
     */
    declare function getModulus(certificate: string, password: string, callback: Function): void

    /**
     * Gets the size and prime of DH parameters
     * @param  DH parameters PEM encoded
     * @param  Callback function with an error object and {size, prime}
     */
    declare function getDhparamInfo(dh: string, callback: Function): void

    /**
     * Exports private key and certificate to a PKCS12 keystore
     * @param  PEM encoded private key
     * @param  PEM encoded certificate
     * @param  Password of the result PKCS12 file
     * @param  object of cipher and optional client key password {cipher:'aes128', clientKeyPassword: 'xxx'}
     * @param  Callback function with an error object and {pkcs12}
     */
    declare function createPkcs12(
        key: string,
        certificate: string,
        password: string,
        options: Object,
        callback: Function): void

    /**
     * Reads private key and certificate from a PKCS12 keystore
     * @param  
     * @param  object of cipher and optional client key password {cipher:'aes128', clientKeyPassword: 'xxx'}
     * @param  Callback function with an error object and {pkcs12}
     * @returns  the result of the callback
     */
    declare function readPkcs12(bufferOrPath: string, options: Object, callback: Function): any

    /**
     * Verifies the signing chain of the passed certificate
     * @param  PEM encoded certificate
     * @param  List of CA certificates
     * @param  Callback function with an error object and a boolean valid
     */
    declare function verifySigningChain(certificate: string, ca: Array<string>, callback: Function): void

    /**
     * config the pem module
     * @param  
     */
    declare function config(options: Object): void
}