/**
 * Flowtype definitions for first-mate
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type AtomFirstMate$Disposable = AtomEventKit.Disposable;

declare interface AtomFirstMate$IToken {
    value: string,
        scopes: string[]
}


/**
 * Result returned by `Grammar.tokenizeLine`. 
 */
declare interface AtomFirstMate$TokenizeLineResult {

    /**
     * Text that was tokenized. 
     */
    line: string,
        tags: any[],

        /**
         * This is a dynamic property that will only be available if `Grammar.tokenizeLine` was called
         * with `compatibilityMode` set to `true` (the default).
         */
        tokens?: AtomFirstMate$IToken[],

        /**
         * The tokenized state at the end of the line. This should be passed back into `tokenizeLine`
         * when tokenizing the next line in the file/buffer.
         */
        ruleStack: AtomFirstMate$Rule[]
}


/**
 * Instance side of Rule class. 
 */
declare interface AtomFirstMate$Rule {}


/**
 * Static side of Grammar class. 
 */
declare interface AtomFirstMate$GrammarStatic {
    prototype: AtomFirstMate$Grammar,
        new(registry: AtomFirstMate$GrammarRegistry, options?: any): AtomFirstMate$Grammar
}


/**
 * Instance side of Grammar class. 
 */
declare interface AtomFirstMate$Grammar {
    constructor: AtomFirstMate$GrammarStatic,
        onDidUpdate(callback: Function): AtomFirstMate$Disposable,

        /**
         * Tokenizes all lines in a string.
         * @param text A string containing one or more lines.
         * @return  An array of token arrays, one token array per line.
         */
        tokenizeLines(text: string): Array<Array<AtomFirstMate$IToken >> ,

        /**
         * Tokenizes a line of text.
         * @param line Text to be tokenized.
         * @param firstLine Indicates whether `line` is the first line in the file/buffer,
        defaults to `false`.
         * @param compatibilityMode `true` by default.
         * @return  An object containing tokens for the given line.
        */
        tokenizeLine(
            line: string,
            ruleStack?: AtomFirstMate$Rule[],
            firstLine?: boolean,
            compatibilityMode?: boolean): AtomFirstMate$TokenizeLineResult
}

declare
var Grammar: AtomFirstMate$GrammarStatic;


/**
 * Static side of GrammarRegistry class. 
 */
declare interface AtomFirstMate$GrammarRegistryStatic {
    prototype: AtomFirstMate$GrammarRegistry,
        new(options?: {
            maxTokensPerLine: number
        }): AtomFirstMate$GrammarRegistry
}


/**
 * Instance side of GrammarRegistry class. 
 */
declare interface AtomFirstMate$GrammarRegistry {
    constructor: AtomFirstMate$GrammarRegistryStatic,
        onDidAddGrammar(callback: (grammar: AtomFirstMate$Grammar) => void): AtomFirstMate$Disposable,
        onDidUpdateGrammar(callback: (grammar: AtomFirstMate$Grammar) => void): AtomFirstMate$Disposable,
        getGrammars(): AtomFirstMate$Grammar[],
        grammarForScopeName(scopeName: string): AtomFirstMate$Grammar,
        addGrammar(grammar: AtomFirstMate$Grammar): AtomFirstMate$Disposable,
        removeGrammarForScopeName(scopeName: string): AtomFirstMate$Grammar,
        readGrammarSync(grammarPath: string): AtomFirstMate$Grammar,
        readGrammar(
            grammarPath: string,
            callback: (error: Error, grammar: AtomFirstMate$Grammar) => void): void,
        loadGrammarSync(grammarPath: string): AtomFirstMate$Grammar,
        loadGrammar(
            grammarPath: string,
            callback: (error: Error, grammar: AtomFirstMate$Grammar) => void): void,
        grammarOverrideForPath(filePath: string): AtomFirstMate$Grammar,
        setGrammarOverrideForPath(filePath: string, scopeName: string): AtomFirstMate$Grammar,
        clearGrammarOverrides(): void,
        selectGrammar(filePath: string, fileContents: string): AtomFirstMate$Grammar
}

declare
var GrammarRegistry: AtomFirstMate$GrammarRegistryStatic;
declare module 'first-mate' {
    declare module.exports: typeof AtomFirstMate
}