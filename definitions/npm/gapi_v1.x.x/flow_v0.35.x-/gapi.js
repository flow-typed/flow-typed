/**
 * Flowtype definitions for gapi
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * The OAuth 2.0 token object represents the OAuth 2.0 token and any associated data.
 */
declare interface GoogleApiOAuth2TokenObject {

    /**
     * The OAuth 2.0 token. Only present in successful responses
     */
    access_token: string,

        /**
         * Details about the error. Only present in error responses
         */
        error: string,

        /**
         * The duration, in seconds, the token is valid for. Only present in successful responses
         */
        expires_in: string,

        /**
         * The Google API scopes related to this token
         */
        state: string
}
declare module 'client' {

    /**
     * Pragmatically initialize gapi class member.
     */
    declare export function load(object: string, fn: any): any

    /**
     * Creates a HTTP request for making RESTful requests.
     * An object encapsulating the various arguments for this method.
     */
    declare export function request(
        args: {

            /**
             * The URL to handle the request
             */
            path: string,

            /**
             * The HTTP request method to use. Default is GET
             */
            method?: string,

            /**
             * URL params in key-value pair form
             */
            params?: any,

            /**
             * Additional HTTP request headers
             */
            headers?: any,

            /**
             * The HTTP request body (applies to PUT or POST).
             */
            body?: any,

            /**
             * If supplied, the request is executed immediately and no gapi.client.HttpRequest object is returned
             */
            callback?: () => any
        }): HttpRequest<any >

        /**
         * Creates an RPC Request directly. The method name and version identify the method to be executed and the RPC params are provided upon RPC creation.
         * @param method The method to be executed.
         * @param version The version of the API which defines the method to be executed. Defaults to v1
         * @param rpcParams A key-value pair of the params to supply to this RPC
         */
        declare export function rpcRequest(method: string, version?: string, rpcParams?: any): RpcRequest

    /**
     * Sets the API key for the application.
     * @param apiKey The API key to set
     */
    declare export function setApiKey(apiKey: string): void

    /**
     * An object encapsulating an HTTP request. This object is not instantiated directly, rather it is returned by gapi.client.request.
     */
    declare export class HttpRequest<T>{

        /**
         * Executes the request and runs the supplied callback on response.
         * @param callback The callback function which executes when the request succeeds or fails.
         */
        execute(
            callback: (
                jsonResp: T,
                rawResp: {
                    body: string,
                    headers: any[],
                    status: number,
                    statusText: string
                }) => any): void;

        /**
         * HttpRequest supports promises.
         */
        then(
            success: (
                response: {
                    result: T,
                    body: string,
                    headers?: any[],
                    status?: number,
                    statusText?: string
                }) => void,
            failure: (
                response: {
                    result: T,
                    body: string,
                    headers?: any[],
                    status?: number,
                    statusText?: string
                }) => void): void
    }

    /**
     * Represents an HTTP Batch operation. Individual HTTP requests are added with the add method and the batch is executed using execute.
     */
    declare export class HttpBatch {

        /**
         * Adds a gapi.client.HttpRequest to the batch.
         * @param httpRequest The HTTP request to add to this batch.
         * @param opt_params extra parameters for this batch entry.
         */
        add(
            httpRequest: HttpRequest<any>,
            opt_params?: {

                /**
                 * Identifies the response for this request in the map of batch responses. If one is not provided, the system generates a random ID.
                 */
                id: string,
                callback: (individualResponse: any, rawBatchResponse: any) => any
            }): void;

        /**
         * Executes all requests in the batch. The supplied callback is executed on success or failure.
         * @param callback The callback to execute when the batch returns.
         */
        execute(callback: (responseMap: any, rawBatchResponse: string) => any): void
    }

    /**
     * Similar to gapi.client.HttpRequest except this object encapsulates requests generated by registered methods.
     */
    declare export class RpcRequest {

        /**
         * Executes the request and runs the supplied callback with the response.
         * @param callback The callback function which executes when the request succeeds or fails.
         */
        callback(callback: (jsonResp: any, rawResp: string) => void): void
    }
}