// @flow
/**
 * Flowtype definitions for core-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type PropertyKey = string | number | ;
declare interface ObjectConstructor {

    /**
     * Copy the values of all of the enumerable own properties from one or more source objects to a
     * target object. Returns the target object.
     * @param target The target object to copy to.
     * @param source The source object from which to copy properties.
     */
    assign<T, U>(target: T, source: U): T & U,

        /**
         * Copy the values of all of the enumerable own properties from one or more source objects to a
         * target object. Returns the target object.
         * @param target The target object to copy to.
         * @param source1 The first source object from which to copy properties.
         * @param source2 The second source object from which to copy properties.
         */
        assign<T, U, V>(target: T, source1: U, source2: V): T & U & V,

        /**
         * Copy the values of all of the enumerable own properties from one or more source objects to a
         * target object. Returns the target object.
         * @param target The target object to copy to.
         * @param source1 The first source object from which to copy properties.
         * @param source2 The second source object from which to copy properties.
         * @param source3 The third source object from which to copy properties.
         */
        assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W,

        /**
         * Copy the values of all of the enumerable own properties from one or more source objects to a
         * target object. Returns the target object.
         * @param target The target object to copy to.
         * @param sources One or more source objects from which to copy properties
         */
        assign(target: any, ...sources: any[]): any,

        /**
         * Returns true if the values are the same value, false otherwise.
         * @param value1 The first value.
         * @param value2 The second value.
         */
        is(value1: any, value2: any): boolean,

        /**
         * Sets the prototype of a specified object o to  object proto or null. Returns the object o.
         * @param o The object to change its prototype.
         * @param proto The value of the new prototype or null.
         * @remarks  Requires `__proto__` support.
         */
        setPrototypeOf(o: any, proto: any): any
}
declare interface Function {

    /**
     * Returns the name of the function. Function names are read-only and can not be changed.
     */
    name: string,

        /**
         * Determines if a constructor object recognizes an object as one of the
         * constructor’s instances.
         * @param value The object to test.
         */
        undefined(value: any): boolean
}
declare interface Array<T>{

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
    order, until it finds one where predicate returns true. If such an element is found, find
    immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
    predicate. If it is not provided, undefined is used instead.
    */
    find(
        predicate: (value: T, index: number, obj: Array<T>) => boolean,
        thisArg?: any): T,

    /**
     * Returns the index of the first element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate find calls predicate once for each element of the array, in ascending
    order, until it finds one where predicate returns true. If such an element is found, find
    immediately returns that element value. Otherwise, find returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
    predicate. If it is not provided, undefined is used instead.
    */
    findIndex(predicate: (value: T) => boolean, thisArg?: any): number,

    /**
     * Returns the this object after filling the section identified by start and end with value
     * @param value value to fill array section with
     * @param start index to start filling the array at. If start is negative, it is treated as
    length+start where length is the length of the array.
     * @param end index to stop filling the array at. If end is negative, it is treated as
    length+end.
    */
    fill(value: T, start?: number, end?: number): T[],

    /**
     * Returns the this object after copying a section of the array identified by start and end
     * to the same array starting at position target
     * @param target If target is negative, it is treated as length+target where length is the
    length of the array.
     * @param start If start is negative, it is treated as length+start. If end is negative, it
    is treated as length+end.
     * @param end If not specified, length of the this object is used as its default value.
    */
    copyWithin(target: number, start: number, end?: number): T[],
    undefined: any
}
declare interface ArrayConstructor {

    /**
     * Creates an array from an array-like object.
     * @param arrayLike An array-like object to convert to an array.
     * @param mapfn A mapping function to call on every element of the array.
     * @param thisArg Value of 'this' used to invoke the mapfn.
     */
    from<T, U>(
            arrayLike: ArrayLike<T>,
            mapfn: (v: T, k: number) => U,
            thisArg?: any): Array<U>,

        /**
         * Creates an array from an iterable object.
         * @param iterable An iterable object to convert to an array.
         * @param mapfn A mapping function to call on every element of the array.
         * @param thisArg Value of 'this' used to invoke the mapfn.
         */
        from<T, U>(
            iterable: Iterable<T>,
            mapfn: (v: T, k: number) => U,
            thisArg?: any): Array<U>,

        /**
         * Creates an array from an array-like object.
         * @param arrayLike An array-like object to convert to an array.
         */
        from<T>(arrayLike: ArrayLike<T>): Array<T>,

        /**
         * Creates an array from an iterable object.
         * @param iterable An iterable object to convert to an array.
         */
        from<T>(iterable: Iterable<T>): Array<T>,

        /**
         * Returns a new array from a set of elements.
         * @param items A set of elements to include in the new array object.
         */
        of<T>(...items: T[]): Array<T >
}
declare interface String {

    /**
     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
     * value of the UTF-16 encoded code point starting at the string element at position pos in
    the String resulting from converting this object to a String.
    If there is no element at that position, the result is undefined.
    If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
    */
    codePointAt(pos: number): number,

        /**
         * Returns true if searchString appears as a substring of the result of converting this
         * object to a String, at one or more positions that are
        greater than or equal to position; otherwise, returns false.
         * @param searchString search string
         * @param position If position is undefined, 0 is assumed, so as to search all of the String.
        */
        includes(searchString: string, position?: number): boolean,

        /**
         * Returns true if the sequence of elements of searchString converted to a String is the
         * same as the corresponding elements of this object (converted to a String) starting at
        endPosition – length(this). Otherwise returns false.
        */
        endsWith(searchString: string, endPosition?: number): boolean,

        /**
         * Returns a String value that is made from count copies appended together. If count is 0,
         * T is the empty String is returned.
         * @param count number of copies to append
         */
        repeat(count: number): string,

        /**
         * Returns true if the sequence of elements of searchString converted to a String is the
         * same as the corresponding elements of this object (converted to a String) starting at
        position. Otherwise returns false.
        */
        startsWith(searchString: string, position?: number): boolean
}
declare interface StringConstructor {

    /**
     * Return the String value whose elements are, in order, the elements in the List elements.
     * If length is 0, the empty string is returned.
     */
    fromCodePoint(...codePoints: number[]): string,

        /**
         * String.raw is intended for use as a tag function of a Tagged Template String. When called
         * as such the first argument will be a well formed template call site object and the rest
        parameter will contain the substitution values.
         * @param template A well-formed template string call site representation.
         * @param substitutions A set of substitution values.
        */
        raw(template: TemplateStringsArray, ...substitutions: any[]): string
}
declare interface RegExp {

    /**
     * Returns a string indicating the flags of the regular expression in question. This field is read-only.
     * The characters in this string are sequenced and concatenated in the following order:

        - "g" for global
        - "i" for ignoreCase
        - "m" for multiline
        - "u" for unicode
        - "y" for sticky

    If no flags are set, the value is the empty string.
    */
    flags: string
}
declare interface NumberConstructor {

    /**
     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
     * that is representable as a Number value, which is approximately:
    2.2204460492503130808472633361816 x 10‍−‍16.
    */
    EPSILON: number,

        /**
         * Returns true if passed value is finite.
         * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a
        number. Only finite values of the type number, result in true.
         * @param number A numeric value.
        */
        isFinite(number: number): boolean,

        /**
         * Returns true if the value passed is an integer, false otherwise.
         * @param number A numeric value.
         */
        isInteger(number: number): boolean,

        /**
         * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
         * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
        to a number. Only values of the type number, that are also NaN, result in true.
         * @param number A numeric value.
        */
        isNaN(number: number): boolean,

        /**
         * Returns true if the value passed is a safe integer.
         * @param number A numeric value.
         */
        isSafeInteger(number: number): boolean,

        /**
         * The value of the largest integer n such that n and n + 1 are both exactly representable as
         * a Number value.
        The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.
        */
        MAX_SAFE_INTEGER: number,

        /**
         * The value of the smallest integer n such that n and n − 1 are both exactly representable as
         * a Number value.
        The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
        */
        MIN_SAFE_INTEGER: number,

        /**
         * Converts a string to a floating-point number.
         * @param string A string that contains a floating-point number.
         */
        parseFloat(string: string): number,

        /**
         * Converts A string to an integer.
         * @param s A string to convert into a number.
         * @param radix A value between 2 and 36 that specifies the base of the number in numString.
        If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
        All other strings are considered decimal.
        */
        parseInt(string: string, radix?: number): number
}
declare interface Math {

    /**
     * Returns the number of leading zero bits in the 32-bit binary representation of a number.
     * @param x A numeric expression.
     */
    clz32(x: number): number,

        /**
         * Returns the result of 32-bit multiplication of two numbers.
         * @param x First number
         * @param y Second number
         */
        imul(x: number, y: number): number,

        /**
         * Returns the sign of the x, indicating whether x is positive, negative or zero.
         * @param x The numeric expression to test
         */
        sign(x: number): number,

        /**
         * Returns the base 10 logarithm of a number.
         * @param x A numeric expression.
         */
        log10(x: number): number,

        /**
         * Returns the base 2 logarithm of a number.
         * @param x A numeric expression.
         */
        log2(x: number): number,

        /**
         * Returns the natural logarithm of 1 + x.
         * @param x A numeric expression.
         */
        log1p(x: number): number,

        /**
         * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of
         * the natural logarithms).
         * @param x A numeric expression.
         */
        expm1(x: number): number,

        /**
         * Returns the hyperbolic cosine of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        cosh(x: number): number,

        /**
         * Returns the hyperbolic sine of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        sinh(x: number): number,

        /**
         * Returns the hyperbolic tangent of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        tanh(x: number): number,

        /**
         * Returns the inverse hyperbolic cosine of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        acosh(x: number): number,

        /**
         * Returns the inverse hyperbolic sine of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        asinh(x: number): number,

        /**
         * Returns the inverse hyperbolic tangent of a number.
         * @param x A numeric expression that contains an angle measured in radians.
         */
        atanh(x: number): number,

        /**
         * Returns the square root of the sum of squares of its arguments.
         * @param values Values to compute the square root for.
        If no arguments are passed, the result is +0.
        If there is only one argument, the result is the absolute value.
        If any argument is +Infinity or -Infinity, the result is +Infinity.
        If any argument is NaN, the result is NaN.
        If all arguments are either +0 or −0, the result is +0.
        */
        hypot(...values: number[]): number,

        /**
         * Returns the integral part of the a numeric expression, x, removing any fractional digits.
         * If x is already an integer, the result is x.
         * @param x A numeric expression.
         */
        trunc(x: number): number,

        /**
         * Returns the nearest single precision float representation of a number.
         * @param x A numeric expression.
         */
        fround(x: number): number,

        /**
         * Returns an implementation-dependent approximation to the cube root of number.
         * @param x A numeric expression.
         */
        cbrt(x: number): number
}
declare interface Symbol {

    /**
     * Returns a string representation of an object. 
     */
    toString(): string,
        undefined: string
}
declare interface SymbolConstructor {

    /**
     * A reference to the prototype.
     */
    prototype: Symbol,

        /**
         * Returns a new unique Symbol value.
         * @param description Description of the new Symbol object.
         */
        (description?: string | number): ,

        /**
         * Returns a Symbol object from the global symbol registry matching the given key if found.
         * Otherwise, returns a new symbol with this key.
         * @param key key to search for.
         */
        for (key: string): ,

            /**
             * Returns a key from the global symbol registry matching the given Symbol if found.
             * Otherwise, returns a undefined.
             * @param sym Symbol to find the key for.
             */
            keyFor(sym: ): string,

            /**
             * A method that determines if a constructor object recognizes an object as one of the
             * constructor’s instances. Called by the semantics of the instanceof operator.
             */
            hasInstance: ,

            /**
             * A Boolean value that if true indicates that an object should flatten to its array elements
             * by Array.prototype.concat.
             */
            isConcatSpreadable: ,

            /**
             * A method that returns the default iterator for an object. Called by the semantics of the
             * for-of statement.
             */
            iterator: ,

            /**
             * A regular expression method that matches the regular expression against a string. Called
             * by the String.prototype.match method.
             */
            match: ,

            /**
             * A regular expression method that replaces matched substrings of a string. Called by the
             * String.prototype.replace method.
             */
            replace: ,

            /**
             * A regular expression method that returns the index within a string that matches the
             * regular expression. Called by the String.prototype.search method.
             */
            search: ,

            /**
             * A function valued property that is the constructor function that is used to create
             * derived objects.
             */
            species: ,

            /**
             * A regular expression method that splits a string at the indices that match the regular
             * expression. Called by the String.prototype.split method.
             */
            split: ,

            /**
             * A method that converts an object to a corresponding primitive value.Called by the ToPrimitive
             * abstract operation.
             */
            toPrimitive: ,

            /**
             * A String value that is used in the creation of the default string description of an object.
             * Called by the built-in method Object.prototype.toString.
             */
            toStringTag: ,

            /**
             * An Object whose own property names are property names that are excluded from the with
             * environment bindings of the associated objects.
             */
            unscopables: ,

            /**
             * Non-standard. Use simple mode for core-js symbols. See https://github.com/zloirock/core-js/#caveats-when-using-symbol-polyfill
             */
            useSimple(): void,

            /**
             * Non-standard. Use setter mode for core-js symbols. See https://github.com/zloirock/core-js/#caveats-when-using-symbol-polyfill
             */
            userSetter(): void
}
declare var Symbol: SymbolConstructor;
declare interface Object {

    /**
     * Determines whether an object has a property with the specified name.
     * @param v A property name.
     */
    hasOwnProperty(v: PropertyKey): boolean,

        /**
         * Determines whether a specified property is enumerable.
         * @param v A property name.
         */
        propertyIsEnumerable(v: PropertyKey): boolean
}
declare interface JSON {
    undefined: string
}
declare interface Map<K, V>{
    clear(): void,
    delete(key: K): boolean,
    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void,
    get(key: K): V,
    has(key: K): boolean,
    set(key: K, value?: V): Map<K,
    V>,
    size: number
}
declare interface MapConstructor {
    new<K, V>(): Map<K, V>,
        new<K, V>(iterable: Iterable<[K, V]>): Map<K, V>,
        prototype: Map<any, any >
}
declare var Map: MapConstructor;
declare interface Set<T>{
    add(value: T): Set<T>,
    clear(): void,
    delete(value: T): boolean,
    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void,
    has(value: T): boolean,
    size: number
}
declare interface SetConstructor {
    new<T>(): Set<T>,
        new<T>(iterable: Iterable<T>): Set<T>,
        prototype: Set<any >
}
declare var Set: SetConstructor;
declare interface WeakMap<K, V>{
    delete(key: K): boolean,
    get(key: K): V,
    has(key: K): boolean,
    set(key: K, value?: V): WeakMap<K,
    V >
}
declare interface WeakMapConstructor {
    new<K, V>(): WeakMap<K, V>,
        new<K, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>,
        prototype: WeakMap<any, any >
}
declare var WeakMap: WeakMapConstructor;
declare interface WeakSet<T>{
    add(value: T): WeakSet<T>,
    delete(value: T): boolean,
    has(value: T): boolean
}
declare interface WeakSetConstructor {
    new<T>(): WeakSet<T>,
        new<T>(iterable: Iterable<T>): WeakSet<T>,
        prototype: WeakSet<any >
}
declare var WeakSet: WeakSetConstructor;
declare interface IteratorResult<T>{
    done: boolean,
    value?: T
}
declare interface Iterator<T>{
    next(value?: any): IteratorResult<T>,
    return (value?: any): IteratorResult<T>,
    throw (e?: any): IteratorResult<T >
}
declare interface Iterable<T>{
    undefined(): Iterator<T >
}
declare type IterableIterator<T>= {
    undefined(): IterableIterator<T >
} & Iterator
declare interface NodeList {
    undefined(): IterableIterator<Node >
}
declare type $for<T>= { of (callbackfn: (value: T, key: any) => void, thisArg?: any): void,
    array(): T[],
    array<U>(callbackfn: (value: T, key: any) => U, thisArg?: any): U[],
    filter(callbackfn: (value: T, key: any) => boolean, thisArg?: any): core$$for<T>,
    map<U>(callbackfn: (value: T, key: any) => U, thisArg?: any): core$$for<U >
} & IterableIterator
declare interface PromiseLike<T>{

        /**
         * Attaches callbacks for the resolution and/or rejection of the Promise.
         * @param onfulfilled The callback to execute when the Promise is resolved.
         * @param onrejected The callback to execute when the Promise is rejected.
         * @returns  A Promise for the completion of which ever callback is executed.
         */
        then<TResult>(
            onfulfilled?: (value: T) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>,
        then<TResult>(
            onfulfilled?: (value: T) => TResult | PromiseLike<TResult>,
            onrejected?: (reason: any) => void): PromiseLike<TResult >
    }
    /**
     * Represents the completion of an asynchronous operation
     */
declare interface Promise<T>{

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns  A Promise for the completion of which ever callback is executed.
     */
    then<TResult>(
        onfulfilled?: (value: T) => TResult | PromiseLike<TResult>,
        onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>,
    then<TResult>(
        onfulfilled?: (value: T) => TResult | PromiseLike<TResult>,
        onrejected?: (reason: any) => void): Promise<TResult>,

    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns  A Promise for the completion of the callback.
     */
    catch (onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>,
    catch (onrejected?: (reason: any) => void): Promise<T >
}
declare interface PromiseConstructor {

    /**
     * A reference to the prototype.
     */
    prototype: Promise<any>,

        /**
         * Creates a new Promise.
         * @param executor A callback used to initialize the promise. This callback is passed two arguments:
        a resolve callback used resolve the promise with a value or the result of another promise,
        and a reject callback used to reject the promise with a provided reason or error.
        */
        new<T>(
            executor: (
                resolve: (value?: T | PromiseLike<T>) => void,
                reject: (reason?: any) => void) => void): Promise<T>,

        /**
         * Creates a Promise that is resolved with an array of results when all of the provided Promises
         * resolve, or rejected when any Promise is rejected.
         * @param values An array of Promises.
         * @returns  A new Promise.
         */
        all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>,
        all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>,
        all<T1, T2, T3, T4, T5, T6, T7, T8>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>,
        all<T1, T2, T3, T4, T5, T6, T7>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>,
        all<T1, T2, T3, T4, T5, T6>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>,
        all<T1, T2, T3, T4, T5>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>,
        all<T1, T2, T3, T4>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]): Promise<[T1, T2, T3, T4]>,
        all<T1, T2, T3>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>,
        all<T1, T2>(
            values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>,
        all<TAll>(values: Iterable<TAll | PromiseLike<TAll >> ): Promise<TAll[]>,

        /**
         * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
         * or rejected.
         * @param values An array of Promises.
         * @returns  A new Promise.
         */
        race<T>(values: Iterable<T | PromiseLike<T >> ): Promise<T>,

        /**
         * Creates a new rejected promise for the provided reason.
         * @param reason The reason the promise was rejected.
         * @returns  A new rejected Promise.
         */
        reject(reason: any): Promise<void>,

        /**
         * Creates a new rejected promise for the provided reason.
         * @param reason The reason the promise was rejected.
         * @returns  A new rejected Promise.
         */
        reject<T>(reason: any): Promise<T>,

        /**
         * Creates a new resolved promise for the provided value.
         * @param value A promise.
         * @returns  A promise whose internal state matches the provided promise.
         */
        resolve<T>(value: T | PromiseLike<T>): Promise<T>,

        /**
         * Creates a new resolved promise .
         * @returns  A resolved promise.
         */
        resolve(): Promise<void >
}
declare var Promise: PromiseConstructor;
declare var npm$namespace$Reflect: {
    apply: typeof Reflect$apply,
    construct: typeof Reflect$construct,
    defineProperty: typeof Reflect$defineProperty,
    deleteProperty: typeof Reflect$deleteProperty,
    enumerate: typeof Reflect$enumerate,
    get: typeof Reflect$get,
    getOwnPropertyDescriptor: typeof Reflect$getOwnPropertyDescriptor,
    getPrototypeOf: typeof Reflect$getPrototypeOf,
    has: typeof Reflect$has,
    isExtensible: typeof Reflect$isExtensible,
    ownKeys: typeof Reflect$ownKeys,
    preventExtensions: typeof Reflect$preventExtensions,
    set: typeof Reflect$set,
    setPrototypeOf: typeof Reflect$setPrototypeOf,
}
declare function Reflect$apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any

declare function Reflect$construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any

declare function Reflect$defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean

declare function Reflect$deleteProperty(target: any, propertyKey: PropertyKey): boolean

declare function Reflect$enumerate(target: any): IterableIterator<any >

    declare function Reflect$get(target: any, propertyKey: PropertyKey, receiver?: any): any

declare function Reflect$getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor

declare function Reflect$getPrototypeOf(target: any): any

declare function Reflect$has(target: any, propertyKey: PropertyKey): boolean

declare function Reflect$isExtensible(target: any): boolean

declare function Reflect$ownKeys(target: any): Array<PropertyKey >

    declare function Reflect$preventExtensions(target: any): boolean

declare function Reflect$set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean

declare function Reflect$setPrototypeOf(target: any, proto: any): booleandeclare interface RegExpConstructor {
    escape(str: string): string
}
declare type Log = {
    (message?: any, ...optionalParams: any[]): void,
    enable(): void,
    disable(): void
} & Console
declare var log: Log;
declare interface Dict<T>{
    [key: string]: T,
    [key: number]: T
}
declare interface DictConstructor {
    prototype: Dict<any>,
        new<T>(value?: Dict<T>): Dict<T>,
        new(value?: any): Dict<any>,
        (value?: Dict<T>): Dict<T>,
        (value?: any): Dict<any>,
        isDict(value: any): boolean,
        values<T>(object: Dict<T>): IterableIterator<T>,
        keys<T>(object: Dict<T>): IterableIterator<PropertyKey>,
        entries<T>(object: Dict<T>): IterableIterator<[PropertyKey, T]>,
        has<T>(object: Dict<T>, key: PropertyKey): boolean,
        get<T>(object: Dict<T>, key: PropertyKey): T,
        set<T>(object: Dict<T>, key: PropertyKey, value: T): Dict<T>,
        forEach<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => void,
            thisArg?: any): void,
        map<T, U>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => U,
            thisArg?: any): Dict<U>,
        mapPairs<T, U>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => [PropertyKey, U],
            thisArg?: any): Dict<U>,
        filter<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => boolean,
            thisArg?: any): Dict<T>,
        some<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => boolean,
            thisArg?: any): boolean,
        every<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => boolean,
            thisArg?: any): boolean,
        find<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => boolean,
            thisArg?: any): T,
        findKey<T>(
            object: Dict<T>,
            callbackfn: (value: T, key: PropertyKey, dict: Dict<T>) => boolean,
            thisArg?: any): PropertyKey,
        keyOf<T>(object: Dict<T>, value: T): PropertyKey,
        includes<T>(object: Dict<T>, value: T): boolean,
        reduce<T, U>(
            object: Dict<T>,
            callbackfn: (previousValue: U, value: T, key: PropertyKey, dict: Dict<T>) => U,
            initialValue: U): U,
        reduce<T>(
            object: Dict<T>,
            callbackfn: (previousValue: T, value: T, key: PropertyKey, dict: Dict<T>) => T,
            initialValue?: T): T,
        turn<T, U>(
            object: Dict<T>,
            callbackfn: (memo: Dict<U>, value: T, key: PropertyKey, dict: Dict<T>) => void,
            memo: Dict<U>): Dict<U>,
        turn<T>(
            object: Dict<T>,
            callbackfn: (memo: Dict<T>, value: T, key: PropertyKey, dict: Dict<T>) => void,
            memo?: Dict<T>): Dict<T >
}
declare var Dict: DictConstructor;
declare interface Date {

    /**
     * Non-standard.
     */
    format(template: string, locale?: string): string,

        /**
         * Non-standard.
         */
        formatUTC(template: string, locale?: string): string
}
declare interface Number {

    /**
     * Non-standard.
     */
    undefined(): IterableIterator<number >
}
declare function delay(msec: number): Promise<void >
    declare var npm$namespace$core: {
    setTimeout: typeof core$setTimeout,
    setInterval: typeof core$setInterval,
    setImmediate: typeof core$setImmediate,
    clearImmediate: typeof core$clearImmediate,
    isIterable: typeof core$isIterable,
    getIterator: typeof core$getIterator,
    addLocale: typeof core$addLocale,
    locale: typeof core$locale,
    delay: typeof core$delay,
}
declare var version: string;


declare var npm$namespace$Reflect: {
    apply: typeof Reflect$apply,
    construct: typeof Reflect$construct,
    defineProperty: typeof Reflect$defineProperty,
    deleteProperty: typeof Reflect$deleteProperty,
    enumerate: typeof Reflect$enumerate,
    get: typeof Reflect$get,
    getOwnPropertyDescriptor: typeof Reflect$getOwnPropertyDescriptor,
    getPrototypeOf: typeof Reflect$getPrototypeOf,
    has: typeof Reflect$has,
    isExtensible: typeof Reflect$isExtensible,
    ownKeys: typeof Reflect$ownKeys,
    preventExtensions: typeof Reflect$preventExtensions,
    set: typeof Reflect$set,
    setPrototypeOf: typeof Reflect$setPrototypeOf,
}
declare function Reflect$apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any

declare function Reflect$construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any

declare function Reflect$defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean

declare function Reflect$deleteProperty(target: any, propertyKey: PropertyKey): boolean

declare function Reflect$enumerate(target: any): IterableIterator<any >

    declare function Reflect$get(target: any, propertyKey: PropertyKey, receiver?: any): any

declare function Reflect$getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor

declare function Reflect$getPrototypeOf(target: any): any

declare function Reflect$has(target: any, propertyKey: PropertyKey): boolean

declare function Reflect$isExtensible(target: any): boolean

declare function Reflect$ownKeys(target: any): Array<PropertyKey >

    declare function Reflect$preventExtensions(target: any): boolean

declare function Reflect$set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean

declare function Reflect$setPrototypeOf(target: any, proto: any): boolean

declare var Object: {
    getPrototypeOf(o: any): any,
    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor,
    getOwnPropertyNames(o: any): string[],
    create(o: any, properties?: PropertyDescriptorMap): any,
    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any,
    defineProperties(o: any, properties: PropertyDescriptorMap): any,
    seal<T>(o: T): T,
    freeze<T>(o: T): T,
    preventExtensions<T>(o: T): T,
    isSealed(o: any): boolean,
    isFrozen(o: any): boolean,
    isExtensible(o: any): boolean,
    keys(o: any): string[],
    assign(target: any, ...sources: any[]): any,
    is(value1: any, value2: any): boolean,
    setPrototypeOf(o: any, proto: any): any,
    getOwnPropertySymbols(o: any): [],
    getOwnPropertyDescriptor(o: any, propertyKey: PropertyKey): PropertyDescriptor,
    defineProperty(o: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): any,
    values(object: any): any[],
    entries(object: any): any[],
    getOwnPropertyDescriptors(object: any): PropertyDescriptorMap,
    isObject(value: any): boolean,
    classof(value: any): string,
    define<T>(target: T, mixin: any): T,
    make<T>(proto: T, mixin?: any): T
};

declare var Function: {
    bind(target: Function, thisArg: any, ...argArray: any[]): any,
    part(target: Function, ...args: any[]): any
};

declare var Array: {
    from<T,
    U>(
        arrayLike: ArrayLike<T>,
        mapfn: (v: T, k: number) => U,
        thisArg?: any): Array<U>,
    from<T,
    U>(
        iterable: Iterable<T>,
        mapfn: (v: T, k: number) => U,
        thisArg?: any): Array<U>,
    from<T>(arrayLike: ArrayLike<T>): Array<T>,
    from<T>(iterable: Iterable<T>): Array<T>,
    of<T>(...items: T[]): Array<T>,
    push<T>(array: ArrayLike<T>, ...items: T[]): number,
    pop<T>(array: ArrayLike<T>): T,
    concat<T>(array: ArrayLike<T>, ...items: (T[] | T)[]): T[],
    join<T>(array: ArrayLike<T>, separator?: string): string,
    reverse<T>(array: ArrayLike<T>): T[],
    shift<T>(array: ArrayLike<T>): T,
    slice<T>(array: ArrayLike<T>, start?: number, end?: number): T[],
    sort<T>(array: ArrayLike<T>, compareFn?: (a: T, b: T) => number): T[],
    splice<T>(array: ArrayLike<T>, start: number): T[],
    splice<T>(array: ArrayLike<T>, start: number, deleteCount: number, ...items: T[]): T[],
    unshift<T>(array: ArrayLike<T>, ...items: T[]): number,
    indexOf<T>(array: ArrayLike<T>, searchElement: T, fromIndex?: number): number,
    lastIndexOf<T>(array: ArrayLike<T>, earchElement: T, fromIndex?: number): number,
    every<T>(
        array: ArrayLike<T>,
        callbackfn: (value: T, index: number, array: T[]) => boolean,
        thisArg?: any): boolean,
    some<T>(
        array: ArrayLike<T>,
        callbackfn: (value: T, index: number, array: T[]) => boolean,
        thisArg?: any): boolean,
    forEach<T>(
        array: ArrayLike<T>,
        callbackfn: (value: T, index: number, array: T[]) => void,
        thisArg?: any): void,
    map<T,
    U>(
        array: ArrayLike<T>,
        callbackfn: (value: T, index: number, array: T[]) => U,
        thisArg?: any): U[],
    filter<T>(
        array: ArrayLike<T>,
        callbackfn: (value: T, index: number, array: T[]) => boolean,
        thisArg?: any): T[],
    reduce<T>(
        array: ArrayLike<T>,
        callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T,
        initialValue?: T): T,
    reduce<T,
    U>(
        array: ArrayLike<T>,
        callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U,
        initialValue: U): U,
    reduceRight<T>(
        array: ArrayLike<T>,
        callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T,
        initialValue?: T): T,
    reduceRight<T,
    U>(
        array: ArrayLike<T>,
        callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U,
        initialValue: U): U,
    entries<T>(array: ArrayLike<T>): IterableIterator<[number, T]>,
    keys<T>(array: ArrayLike<T>): IterableIterator<number>,
    values<T>(array: ArrayLike<T>): IterableIterator<T>,
    find<T>(
        array: ArrayLike<T>,
        predicate: (value: T, index: number, obj: Array<T>) => boolean,
        thisArg?: any): T,
    findIndex<T>(
        array: ArrayLike<T>,
        predicate: (value: T) => boolean,
        thisArg?: any): number,
    fill<T>(array: ArrayLike<T>, value: T, start?: number, end?: number): T[],
    copyWithin<T>(array: ArrayLike<T>, target: number, start: number, end?: number): T[],
    includes<T>(array: ArrayLike<T>, value: T, fromIndex?: number): boolean,
    turn<T>(
        array: ArrayLike<T>,
        callbackfn: (memo: Array<T>, value: T, index: number, array: Array<T>) => void,
        memo?: Array<T>): Array<T>,
    turn<T,
    U>(
        array: ArrayLike<T>,
        callbackfn: (memo: U, value: T, index: number, array: Array<T>) => void,
        memo?: U): U
};

declare var String: {
    codePointAt(text: string, pos: number): number,
    includes(text: string, searchString: string, position?: number): boolean,
    endsWith(text: string, searchString: string, endPosition?: number): boolean,
    repeat(text: string, count: number): string,
    fromCodePoint(...codePoints: number[]): string,
    raw(template: TemplateStringsArray, ...substitutions: any[]): string,
    startsWith(text: string, searchString: string, position?: number): boolean,
    at(text: string, index: number): string,
    lpad(text: string, length: number, fillStr?: string): string,
    rpad(text: string, length: number, fillStr?: string): string,
    escapeHTML(text: string): string,
    unescapeHTML(text: string): string
};

declare var Date: {
    now(): number,
    toISOString(date: Date): string,
    format(date: Date, template: string, locale?: string): string,
    formatUTC(date: Date, template: string, locale?: string): string
};

declare var Number: {
    EPSILON: number,
    isFinite(number: number): boolean,
    isInteger(number: number): boolean,
    isNaN(number: number): boolean,
    isSafeInteger(number: number): boolean,
    MAX_SAFE_INTEGER: number,
    MIN_SAFE_INTEGER: number,
    parseFloat(string: string): number,
    parseInt(string: string, radix?: number): number,
    clz32(x: number): number,
    imul(x: number, y: number): number,
    sign(x: number): number,
    log10(x: number): number,
    log2(x: number): number,
    log1p(x: number): number,
    expm1(x: number): number,
    cosh(x: number): number,
    sinh(x: number): number,
    tanh(x: number): number,
    acosh(x: number): number,
    asinh(x: number): number,
    atanh(x: number): number,
    hypot(...values: number[]): number,
    trunc(x: number): number,
    fround(x: number): number,
    cbrt(x: number): number,
    random(lim?: number): number
};

declare var Math: {
    clz32(x: number): number,
    imul(x: number, y: number): number,
    sign(x: number): number,
    log10(x: number): number,
    log2(x: number): number,
    log1p(x: number): number,
    expm1(x: number): number,
    cosh(x: number): number,
    sinh(x: number): number,
    tanh(x: number): number,
    acosh(x: number): number,
    asinh(x: number): number,
    atanh(x: number): number,
    hypot(...values: number[]): number,
    trunc(x: number): number,
    fround(x: number): number,
    cbrt(x: number): number
};

declare var RegExp: {
    escape(str: string): string
};

declare var Map: MapConstructor;

declare var Set: SetConstructor;

declare var WeakMap: WeakMapConstructor;

declare var WeakSet: WeakSetConstructor;

declare var Promise: PromiseConstructor;

declare var Symbol: SymbolConstructor;

declare var Dict: DictConstructor;

declare var global: any;

declare var log: Log;

declare var _: boolean;

declare function core$setTimeout(handler: any, timeout?: any, ...args: any[]): number

declare function core$setInterval(handler: any, timeout?: any, ...args: any[]): number

declare function core$setImmediate(expression: any, ...args: any[]): number

declare function core$clearImmediate(handle: number): void

declare type core$$for<T>= { of (callbackfn: (value: T, key: any) => void, thisArg?: any): void,
    array(): T[],
    array<U>(callbackfn: (value: T, key: any) => U, thisArg?: any): U[],
    filter(callbackfn: (value: T, key: any) => boolean, thisArg?: any): core$$for<T>,
    map<U>(callbackfn: (value: T, key: any) => U, thisArg?: any): core$$for<U >
} & IterableIterator


declare function core$isIterable(value: any): boolean

declare function core$getIterator<T>(iterable: Iterable<T>): Iterator<T >

    declare interface core$Locale {
        weekdays: string,
            months: string
    }

declare function core$addLocale(lang: string, locale: core$Locale): typeof core

declare function core$locale(lang?: string): string

declare function core$delay(msec: number): Promise<void>declare module 'core-js' {
    declare module.exports: typeof core
}
declare module 'core-js/shim' {
    declare module.exports: typeof core
}
declare module 'core-js/core' {
    declare module.exports: typeof core
}
declare module 'core-js/core/$for' {
    declare module.exports: typeof $for
}
declare module 'core-js/core/_' {
    declare     var _: typeof undefined;
    declare module.exports: typeof _
}
declare module 'core-js/core/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/core/date' {
    declare     var Date: typeof undefined;
    declare module.exports: typeof Date
}
declare module 'core-js/core/delay' {
    declare     var delay: typeof undefined;
    declare module.exports: typeof delay
}
declare module 'core-js/core/dict' {
    declare     var Dict: typeof undefined;
    declare module.exports: typeof Dict
}
declare module 'core-js/core/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/core/global' {
    declare     var global: typeof undefined;
    declare module.exports: typeof global
}
declare module 'core-js/core/log' {
    declare     var log: typeof undefined;
    declare module.exports: typeof log
}
declare module 'core-js/core/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/core/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/core/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/fn/$for' {
    declare module.exports: typeof $for
}
declare module 'core-js/fn/_' {
    declare     var _: typeof undefined;
    declare module.exports: typeof _
}
declare module 'core-js/fn/clear-immediate' {
    declare     var clearImmediate: typeof undefined;
    declare module.exports: typeof clearImmediate
}
declare module 'core-js/fn/delay' {
    declare     var delay: typeof undefined;
    declare module.exports: typeof delay
}
declare module 'core-js/fn/dict' {
    declare     var Dict: typeof undefined;
    declare module.exports: typeof Dict
}
declare module 'core-js/fn/get-iterator' {
    declare     var getIterator: typeof undefined;
    declare module.exports: typeof getIterator
}
declare module 'core-js/fn/global' {
    declare     var global: typeof undefined;
    declare module.exports: typeof global
}
declare module 'core-js/fn/is-iterable' {
    declare     var isIterable: typeof undefined;
    declare module.exports: typeof isIterable
}
declare module 'core-js/fn/log' {
    declare     var log: typeof undefined;
    declare module.exports: typeof log
}
declare module 'core-js/fn/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/fn/promise' {
    declare     var Promise: typeof undefined;
    declare module.exports: typeof Promise
}
declare module 'core-js/fn/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/fn/set-immediate' {
    declare     var setImmediate: typeof undefined;
    declare module.exports: typeof setImmediate
}
declare module 'core-js/fn/set-interval' {
    declare     var setInterval: typeof undefined;
    declare module.exports: typeof setInterval
}
declare module 'core-js/fn/set-timeout' {
    declare     var setTimeout: typeof undefined;
    declare module.exports: typeof setTimeout
}
declare module 'core-js/fn/weak-map' {
    declare     var WeakMap: typeof undefined;
    declare module.exports: typeof WeakMap
}
declare module 'core-js/fn/weak-set' {
    declare     var WeakSet: typeof undefined;
    declare module.exports: typeof WeakSet
}
declare module 'core-js/fn/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/fn/array/concat' {
    declare     var concat: typeof undefined;
    declare module.exports: typeof concat
}
declare module 'core-js/fn/array/copy-within' {
    declare     var copyWithin: typeof undefined;
    declare module.exports: typeof copyWithin
}
declare module 'core-js/fn/array/entries' {
    declare     var entries: typeof undefined;
    declare module.exports: typeof entries
}
declare module 'core-js/fn/array/every' {
    declare     var every: typeof undefined;
    declare module.exports: typeof every
}
declare module 'core-js/fn/array/fill' {
    declare     var fill: typeof undefined;
    declare module.exports: typeof fill
}
declare module 'core-js/fn/array/filter' {
    declare     var filter: typeof undefined;
    declare module.exports: typeof filter
}
declare module 'core-js/fn/array/find' {
    declare     var find: typeof undefined;
    declare module.exports: typeof find
}
declare module 'core-js/fn/array/find-index' {
    declare     var findIndex: typeof undefined;
    declare module.exports: typeof findIndex
}
declare module 'core-js/fn/array/for-each' {
    declare     var forEach: typeof undefined;
    declare module.exports: typeof forEach
}
declare module 'core-js/fn/array/from' {
    declare     var from: typeof undefined;
    declare module.exports: typeof from
}
declare module 'core-js/fn/array/includes' {
    declare     var includes: typeof undefined;
    declare module.exports: typeof includes
}
declare module 'core-js/fn/array/index-of' {
    declare     var indexOf: typeof undefined;
    declare module.exports: typeof indexOf
}
declare module 'core-js/fn/array/join' {
    declare     var join: typeof undefined;
    declare module.exports: typeof join
}
declare module 'core-js/fn/array/keys' {
    declare     var keys: typeof undefined;
    declare module.exports: typeof keys
}
declare module 'core-js/fn/array/last-index-of' {
    declare     var lastIndexOf: typeof undefined;
    declare module.exports: typeof lastIndexOf
}
declare module 'core-js/fn/array/map' {
    declare     var map: typeof undefined;
    declare module.exports: typeof map
}
declare module 'core-js/fn/array/of' {
    declare     var of: typeof undefined;
    declare module.exports: typeof of
}
declare module 'core-js/fn/array/pop' {
    declare     var pop: typeof undefined;
    declare module.exports: typeof pop
}
declare module 'core-js/fn/array/push' {
    declare     var push: typeof undefined;
    declare module.exports: typeof push
}
declare module 'core-js/fn/array/reduce' {
    declare     var reduce: typeof undefined;
    declare module.exports: typeof reduce
}
declare module 'core-js/fn/array/reduce-right' {
    declare     var reduceRight: typeof undefined;
    declare module.exports: typeof reduceRight
}
declare module 'core-js/fn/array/reverse' {
    declare     var reverse: typeof undefined;
    declare module.exports: typeof reverse
}
declare module 'core-js/fn/array/shift' {
    declare     var shift: typeof undefined;
    declare module.exports: typeof shift
}
declare module 'core-js/fn/array/slice' {
    declare     var slice: typeof undefined;
    declare module.exports: typeof slice
}
declare module 'core-js/fn/array/some' {
    declare     var some: typeof undefined;
    declare module.exports: typeof some
}
declare module 'core-js/fn/array/sort' {
    declare     var sort: typeof undefined;
    declare module.exports: typeof sort
}
declare module 'core-js/fn/array/splice' {
    declare     var splice: typeof undefined;
    declare module.exports: typeof splice
}
declare module 'core-js/fn/array/turn' {
    declare     var turn: typeof undefined;
    declare module.exports: typeof turn
}
declare module 'core-js/fn/array/unshift' {
    declare     var unshift: typeof undefined;
    declare module.exports: typeof unshift
}
declare module 'core-js/fn/array/values' {
    declare     var values: typeof undefined;
    declare module.exports: typeof values
}
declare module 'core-js/fn/date' {
    declare     var Date: typeof undefined;
    declare module.exports: typeof Date
}
declare module 'core-js/fn/date/add-locale' {
    declare     var addLocale: typeof undefined;
    declare module.exports: typeof addLocale
}
declare module 'core-js/fn/date/format' {
    declare     var format: typeof undefined;
    declare module.exports: typeof format
}
declare module 'core-js/fn/date/formatUTC' {
    declare     var formatUTC: typeof undefined;
    declare module.exports: typeof formatUTC
}
declare module 'core-js/fn/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/fn/function/has-instance' {
    declare     var hasInstance: (value: any) => boolean;
    declare module.exports: typeof hasInstance
}
declare module 'core-js/fn/function/name' {

}
declare module 'core-js/fn/function/part' {
    declare     var part: typeof undefined;
    declare module.exports: typeof part
}
declare module 'core-js/fn/math' {
    declare     var Math: typeof undefined;
    declare module.exports: typeof Math
}
declare module 'core-js/fn/math/acosh' {
    declare     var acosh: typeof undefined;
    declare module.exports: typeof acosh
}
declare module 'core-js/fn/math/asinh' {
    declare     var asinh: typeof undefined;
    declare module.exports: typeof asinh
}
declare module 'core-js/fn/math/atanh' {
    declare     var atanh: typeof undefined;
    declare module.exports: typeof atanh
}
declare module 'core-js/fn/math/cbrt' {
    declare     var cbrt: typeof undefined;
    declare module.exports: typeof cbrt
}
declare module 'core-js/fn/math/clz32' {
    declare     var clz32: typeof undefined;
    declare module.exports: typeof clz32
}
declare module 'core-js/fn/math/cosh' {
    declare     var cosh: typeof undefined;
    declare module.exports: typeof cosh
}
declare module 'core-js/fn/math/expm1' {
    declare     var expm1: typeof undefined;
    declare module.exports: typeof expm1
}
declare module 'core-js/fn/math/fround' {
    declare     var fround: typeof undefined;
    declare module.exports: typeof fround
}
declare module 'core-js/fn/math/hypot' {
    declare     var hypot: typeof undefined;
    declare module.exports: typeof hypot
}
declare module 'core-js/fn/math/imul' {
    declare     var imul: typeof undefined;
    declare module.exports: typeof imul
}
declare module 'core-js/fn/math/log10' {
    declare     var log10: typeof undefined;
    declare module.exports: typeof log10
}
declare module 'core-js/fn/math/log1p' {
    declare     var log1p: typeof undefined;
    declare module.exports: typeof log1p
}
declare module 'core-js/fn/math/log2' {
    declare     var log2: typeof undefined;
    declare module.exports: typeof log2
}
declare module 'core-js/fn/math/sign' {
    declare     var sign: typeof undefined;
    declare module.exports: typeof sign
}
declare module 'core-js/fn/math/sinh' {
    declare     var sinh: typeof undefined;
    declare module.exports: typeof sinh
}
declare module 'core-js/fn/math/tanh' {
    declare     var tanh: typeof undefined;
    declare module.exports: typeof tanh
}
declare module 'core-js/fn/math/trunc' {
    declare     var trunc: typeof undefined;
    declare module.exports: typeof trunc
}
declare module 'core-js/fn/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/fn/number/epsilon' {
    declare     var EPSILON: typeof undefined;
    declare module.exports: typeof EPSILON
}
declare module 'core-js/fn/number/is-finite' {
    declare     var isFinite: typeof undefined;
    declare module.exports: typeof isFinite
}
declare module 'core-js/fn/number/is-integer' {
    declare     var isInteger: typeof undefined;
    declare module.exports: typeof isInteger
}
declare module 'core-js/fn/number/is-nan' {
    declare     var isNaN: typeof undefined;
    declare module.exports: typeof isNaN
}
declare module 'core-js/fn/number/is-safe-integer' {
    declare     var isSafeInteger: typeof undefined;
    declare module.exports: typeof isSafeInteger
}
declare module 'core-js/fn/number/max-safe-integer' {
    declare     var MAX_SAFE_INTEGER: typeof undefined;
    declare module.exports: typeof MAX_SAFE_INTEGER
}
declare module 'core-js/fn/number/min-safe-integer' {
    declare     var MIN_SAFE_INTEGER: typeof undefined;
    declare module.exports: typeof MIN_SAFE_INTEGER
}
declare module 'core-js/fn/number/parse-float' {
    declare     var parseFloat: typeof undefined;
    declare module.exports: typeof parseFloat
}
declare module 'core-js/fn/number/parse-int' {
    declare     var parseInt: typeof undefined;
    declare module.exports: typeof parseInt
}
declare module 'core-js/fn/number/random' {
    declare     var random: typeof undefined;
    declare module.exports: typeof random
}
declare module 'core-js/fn/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/fn/object/assign' {
    declare     var assign: typeof undefined;
    declare module.exports: typeof assign
}
declare module 'core-js/fn/object/classof' {
    declare     var classof: typeof undefined;
    declare module.exports: typeof classof
}
declare module 'core-js/fn/object/create' {
    declare     var create: typeof undefined;
    declare module.exports: typeof create
}
declare module 'core-js/fn/object/define' {
    declare     var define: typeof undefined;
    declare module.exports: typeof define
}
declare module 'core-js/fn/object/define-properties' {
    declare     var defineProperties: typeof undefined;
    declare module.exports: typeof defineProperties
}
declare module 'core-js/fn/object/define-property' {
    declare     var defineProperty: typeof undefined;
    declare module.exports: typeof defineProperty
}
declare module 'core-js/fn/object/entries' {
    declare     var entries: typeof undefined;
    declare module.exports: typeof entries
}
declare module 'core-js/fn/object/freeze' {
    declare     var freeze: typeof undefined;
    declare module.exports: typeof freeze
}
declare module 'core-js/fn/object/get-own-property-descriptor' {
    declare     var getOwnPropertyDescriptor: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptor
}
declare module 'core-js/fn/object/get-own-property-descriptors' {
    declare     var getOwnPropertyDescriptors: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptors
}
declare module 'core-js/fn/object/get-own-property-names' {
    declare     var getOwnPropertyNames: typeof undefined;
    declare module.exports: typeof getOwnPropertyNames
}
declare module 'core-js/fn/object/get-own-property-symbols' {
    declare     var getOwnPropertySymbols: typeof undefined;
    declare module.exports: typeof getOwnPropertySymbols
}
declare module 'core-js/fn/object/get-prototype-of' {
    declare     var getPrototypeOf: typeof undefined;
    declare module.exports: typeof getPrototypeOf
}
declare module 'core-js/fn/object/is' {
    declare     var is: typeof undefined;
    declare module.exports: typeof is
}
declare module 'core-js/fn/object/is-extensible' {
    declare     var isExtensible: typeof undefined;
    declare module.exports: typeof isExtensible
}
declare module 'core-js/fn/object/is-frozen' {
    declare     var isFrozen: typeof undefined;
    declare module.exports: typeof isFrozen
}
declare module 'core-js/fn/object/is-object' {
    declare     var isObject: typeof undefined;
    declare module.exports: typeof isObject
}
declare module 'core-js/fn/object/is-sealed' {
    declare     var isSealed: typeof undefined;
    declare module.exports: typeof isSealed
}
declare module 'core-js/fn/object/keys' {
    declare     var keys: typeof undefined;
    declare module.exports: typeof keys
}
declare module 'core-js/fn/object/make' {
    declare     var make: typeof undefined;
    declare module.exports: typeof make
}
declare module 'core-js/fn/object/prevent-extensions' {
    declare     var preventExtensions: typeof undefined;
    declare module.exports: typeof preventExtensions
}
declare module 'core-js/fn/object/seal' {
    declare     var seal: typeof undefined;
    declare module.exports: typeof seal
}
declare module 'core-js/fn/object/set-prototype-of' {
    declare     var setPrototypeOf: typeof undefined;
    declare module.exports: typeof setPrototypeOf
}
declare module 'core-js/fn/object/values' {
    declare     var values: typeof undefined;
    declare module.exports: typeof values
}
declare module 'core-js/fn/reflect' {
    declare     var Reflect: typeof undefined;
    declare module.exports: typeof Reflect
}
declare module 'core-js/fn/reflect/apply' {
    declare     var apply: typeof undefined;
    declare module.exports: typeof apply
}
declare module 'core-js/fn/reflect/construct' {
    declare     var construct: typeof undefined;
    declare module.exports: typeof construct
}
declare module 'core-js/fn/reflect/define-property' {
    declare     var defineProperty: typeof undefined;
    declare module.exports: typeof defineProperty
}
declare module 'core-js/fn/reflect/delete-property' {
    declare     var deleteProperty: typeof undefined;
    declare module.exports: typeof deleteProperty
}
declare module 'core-js/fn/reflect/enumerate' {
    declare     var enumerate: typeof undefined;
    declare module.exports: typeof enumerate
}
declare module 'core-js/fn/reflect/get' {
    declare     var get: typeof undefined;
    declare module.exports: typeof get
}
declare module 'core-js/fn/reflect/get-own-property-descriptor' {
    declare     var getOwnPropertyDescriptor: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptor
}
declare module 'core-js/fn/reflect/get-prototype-of' {
    declare     var getPrototypeOf: typeof undefined;
    declare module.exports: typeof getPrototypeOf
}
declare module 'core-js/fn/reflect/has' {
    declare     var has: typeof undefined;
    declare module.exports: typeof has
}
declare module 'core-js/fn/reflect/is-extensible' {
    declare     var isExtensible: typeof undefined;
    declare module.exports: typeof isExtensible
}
declare module 'core-js/fn/reflect/own-keys' {
    declare     var ownKeys: typeof undefined;
    declare module.exports: typeof ownKeys
}
declare module 'core-js/fn/reflect/prevent-extensions' {
    declare     var preventExtensions: typeof undefined;
    declare module.exports: typeof preventExtensions
}
declare module 'core-js/fn/reflect/set' {
    declare     var set: typeof undefined;
    declare module.exports: typeof set
}
declare module 'core-js/fn/reflect/set-prototype-of' {
    declare     var setPrototypeOf: typeof undefined;
    declare module.exports: typeof setPrototypeOf
}
declare module 'core-js/fn/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/fn/regexp/escape' {
    declare     var escape: typeof undefined;
    declare module.exports: typeof escape
}
declare module 'core-js/fn/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/fn/string/at' {
    declare     var at: typeof undefined;
    declare module.exports: typeof at
}
declare module 'core-js/fn/string/code-point-at' {
    declare     var codePointAt: typeof undefined;
    declare module.exports: typeof codePointAt
}
declare module 'core-js/fn/string/ends-with' {
    declare     var endsWith: typeof undefined;
    declare module.exports: typeof endsWith
}
declare module 'core-js/fn/string/escape-html' {
    declare     var escapeHTML: typeof undefined;
    declare module.exports: typeof escapeHTML
}
declare module 'core-js/fn/string/from-code-point' {
    declare     var fromCodePoint: typeof undefined;
    declare module.exports: typeof fromCodePoint
}
declare module 'core-js/fn/string/includes' {
    declare     var includes: typeof undefined;
    declare module.exports: typeof includes
}
declare module 'core-js/fn/string/lpad' {
    declare     var lpad: typeof undefined;
    declare module.exports: typeof lpad
}
declare module 'core-js/fn/string/raw' {
    declare     var raw: typeof undefined;
    declare module.exports: typeof raw
}
declare module 'core-js/fn/string/repeat' {
    declare     var repeat: typeof undefined;
    declare module.exports: typeof repeat
}
declare module 'core-js/fn/string/rpad' {
    declare     var rpad: typeof undefined;
    declare module.exports: typeof rpad
}
declare module 'core-js/fn/string/starts-with' {
    declare     var startsWith: typeof undefined;
    declare module.exports: typeof startsWith
}
declare module 'core-js/fn/string/unescape-html' {
    declare     var unescapeHTML: typeof undefined;
    declare module.exports: typeof unescapeHTML
}
declare module 'core-js/fn/symbol' {
    declare     var Symbol: typeof undefined;
    declare module.exports: typeof Symbol
}
declare module 'core-js/fn/symbol/for' {
    declare     var _for: typeof undefined;
    declare module.exports: typeof _for
}
declare module 'core-js/fn/symbol/has-instance' {
    declare     var hasInstance: typeof undefined;
    declare module.exports: typeof hasInstance
}
declare module 'core-js/fn/symbol/is-concat-spreadable' {
    declare     var isConcatSpreadable: typeof undefined;
    declare module.exports: typeof isConcatSpreadable
}
declare module 'core-js/fn/symbol/iterator' {
    declare     var iterator: typeof undefined;
    declare module.exports: typeof iterator
}
declare module 'core-js/fn/symbol/key-for' {
    declare     var keyFor: typeof undefined;
    declare module.exports: typeof keyFor
}
declare module 'core-js/fn/symbol/match' {
    declare     var match: typeof undefined;
    declare module.exports: typeof match
}
declare module 'core-js/fn/symbol/replace' {
    declare     var replace: typeof undefined;
    declare module.exports: typeof replace
}
declare module 'core-js/fn/symbol/search' {
    declare     var search: typeof undefined;
    declare module.exports: typeof search
}
declare module 'core-js/fn/symbol/species' {
    declare     var species: typeof undefined;
    declare module.exports: typeof species
}
declare module 'core-js/fn/symbol/split' {
    declare     var split: typeof undefined;
    declare module.exports: typeof split
}
declare module 'core-js/fn/symbol/to-primitive' {
    declare     var toPrimitive: typeof undefined;
    declare module.exports: typeof toPrimitive
}
declare module 'core-js/fn/symbol/to-string-tag' {
    declare     var toStringTag: typeof undefined;
    declare module.exports: typeof toStringTag
}
declare module 'core-js/fn/symbol/unscopables' {
    declare     var unscopables: typeof undefined;
    declare module.exports: typeof unscopables
}
declare module 'core-js/es5' {
    declare module.exports: typeof core
}
declare module 'core-js/es6' {
    declare module.exports: typeof core
}
declare module 'core-js/es6/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/es6/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/es6/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/es6/math' {
    declare     var Math: typeof undefined;
    declare module.exports: typeof Math
}
declare module 'core-js/es6/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/es6/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/es6/promise' {
    declare     var Promise: typeof undefined;
    declare module.exports: typeof Promise
}
declare module 'core-js/es6/reflect' {
    declare     var Reflect: typeof undefined;
    declare module.exports: typeof Reflect
}
declare module 'core-js/es6/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/es6/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/es6/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/es6/symbol' {
    declare     var Symbol: typeof undefined;
    declare module.exports: typeof Symbol
}
declare module 'core-js/es6/weak-map' {
    declare     var WeakMap: typeof undefined;
    declare module.exports: typeof WeakMap
}
declare module 'core-js/es6/weak-set' {
    declare     var WeakSet: typeof undefined;
    declare module.exports: typeof WeakSet
}
declare module 'core-js/es7' {
    declare module.exports: typeof core
}
declare module 'core-js/es7/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/es7/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/es7/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/es7/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/es7/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/es7/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/js' {
    declare module.exports: typeof core
}
declare module 'core-js/js/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/web' {
    declare module.exports: typeof core
}
declare module 'core-js/web/dom' {
    declare module.exports: typeof core
}
declare module 'core-js/web/immediate' {
    declare module.exports: typeof core
}
declare module 'core-js/web/timers' {
    declare module.exports: typeof core
}
declare module 'core-js/library' {
    declare module.exports: typeof core
}
declare module 'core-js/library/shim' {
    declare module.exports: typeof core
}
declare module 'core-js/library/core' {
    declare module.exports: typeof core
}
declare module 'core-js/library/core/$for' {
    declare module.exports: typeof $for
}
declare module 'core-js/library/core/_' {
    declare     var _: typeof undefined;
    declare module.exports: typeof _
}
declare module 'core-js/library/core/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/library/core/date' {
    declare     var Date: typeof undefined;
    declare module.exports: typeof Date
}
declare module 'core-js/library/core/delay' {
    declare     var delay: typeof undefined;
    declare module.exports: typeof delay
}
declare module 'core-js/library/core/dict' {
    declare     var Dict: typeof undefined;
    declare module.exports: typeof Dict
}
declare module 'core-js/library/core/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/library/core/global' {
    declare     var global: typeof undefined;
    declare module.exports: typeof global
}
declare module 'core-js/library/core/log' {
    declare     var log: typeof undefined;
    declare module.exports: typeof log
}
declare module 'core-js/library/core/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/library/core/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/library/core/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/library/fn/$for' {
    declare module.exports: typeof $for
}
declare module 'core-js/library/fn/_' {
    declare     var _: typeof undefined;
    declare module.exports: typeof _
}
declare module 'core-js/library/fn/clear-immediate' {
    declare     var clearImmediate: typeof undefined;
    declare module.exports: typeof clearImmediate
}
declare module 'core-js/library/fn/delay' {
    declare     var delay: typeof undefined;
    declare module.exports: typeof delay
}
declare module 'core-js/library/fn/dict' {
    declare     var Dict: typeof undefined;
    declare module.exports: typeof Dict
}
declare module 'core-js/library/fn/get-iterator' {
    declare     var getIterator: typeof undefined;
    declare module.exports: typeof getIterator
}
declare module 'core-js/library/fn/global' {
    declare     var global: typeof undefined;
    declare module.exports: typeof global
}
declare module 'core-js/library/fn/is-iterable' {
    declare     var isIterable: typeof undefined;
    declare module.exports: typeof isIterable
}
declare module 'core-js/library/fn/log' {
    declare     var log: typeof undefined;
    declare module.exports: typeof log
}
declare module 'core-js/library/fn/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/library/fn/promise' {
    declare     var Promise: typeof undefined;
    declare module.exports: typeof Promise
}
declare module 'core-js/library/fn/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/library/fn/set-immediate' {
    declare     var setImmediate: typeof undefined;
    declare module.exports: typeof setImmediate
}
declare module 'core-js/library/fn/set-interval' {
    declare     var setInterval: typeof undefined;
    declare module.exports: typeof setInterval
}
declare module 'core-js/library/fn/set-timeout' {
    declare     var setTimeout: typeof undefined;
    declare module.exports: typeof setTimeout
}
declare module 'core-js/library/fn/weak-map' {
    declare     var WeakMap: typeof undefined;
    declare module.exports: typeof WeakMap
}
declare module 'core-js/library/fn/weak-set' {
    declare     var WeakSet: typeof undefined;
    declare module.exports: typeof WeakSet
}
declare module 'core-js/library/fn/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/library/fn/array/concat' {
    declare     var concat: typeof undefined;
    declare module.exports: typeof concat
}
declare module 'core-js/library/fn/array/copy-within' {
    declare     var copyWithin: typeof undefined;
    declare module.exports: typeof copyWithin
}
declare module 'core-js/library/fn/array/entries' {
    declare     var entries: typeof undefined;
    declare module.exports: typeof entries
}
declare module 'core-js/library/fn/array/every' {
    declare     var every: typeof undefined;
    declare module.exports: typeof every
}
declare module 'core-js/library/fn/array/fill' {
    declare     var fill: typeof undefined;
    declare module.exports: typeof fill
}
declare module 'core-js/library/fn/array/filter' {
    declare     var filter: typeof undefined;
    declare module.exports: typeof filter
}
declare module 'core-js/library/fn/array/find' {
    declare     var find: typeof undefined;
    declare module.exports: typeof find
}
declare module 'core-js/library/fn/array/find-index' {
    declare     var findIndex: typeof undefined;
    declare module.exports: typeof findIndex
}
declare module 'core-js/library/fn/array/for-each' {
    declare     var forEach: typeof undefined;
    declare module.exports: typeof forEach
}
declare module 'core-js/library/fn/array/from' {
    declare     var from: typeof undefined;
    declare module.exports: typeof from
}
declare module 'core-js/library/fn/array/includes' {
    declare     var includes: typeof undefined;
    declare module.exports: typeof includes
}
declare module 'core-js/library/fn/array/index-of' {
    declare     var indexOf: typeof undefined;
    declare module.exports: typeof indexOf
}
declare module 'core-js/library/fn/array/join' {
    declare     var join: typeof undefined;
    declare module.exports: typeof join
}
declare module 'core-js/library/fn/array/keys' {
    declare     var keys: typeof undefined;
    declare module.exports: typeof keys
}
declare module 'core-js/library/fn/array/last-index-of' {
    declare     var lastIndexOf: typeof undefined;
    declare module.exports: typeof lastIndexOf
}
declare module 'core-js/library/fn/array/map' {
    declare     var map: typeof undefined;
    declare module.exports: typeof map
}
declare module 'core-js/library/fn/array/of' {
    declare     var of: typeof undefined;
    declare module.exports: typeof of
}
declare module 'core-js/library/fn/array/pop' {
    declare     var pop: typeof undefined;
    declare module.exports: typeof pop
}
declare module 'core-js/library/fn/array/push' {
    declare     var push: typeof undefined;
    declare module.exports: typeof push
}
declare module 'core-js/library/fn/array/reduce' {
    declare     var reduce: typeof undefined;
    declare module.exports: typeof reduce
}
declare module 'core-js/library/fn/array/reduce-right' {
    declare     var reduceRight: typeof undefined;
    declare module.exports: typeof reduceRight
}
declare module 'core-js/library/fn/array/reverse' {
    declare     var reverse: typeof undefined;
    declare module.exports: typeof reverse
}
declare module 'core-js/library/fn/array/shift' {
    declare     var shift: typeof undefined;
    declare module.exports: typeof shift
}
declare module 'core-js/library/fn/array/slice' {
    declare     var slice: typeof undefined;
    declare module.exports: typeof slice
}
declare module 'core-js/library/fn/array/some' {
    declare     var some: typeof undefined;
    declare module.exports: typeof some
}
declare module 'core-js/library/fn/array/sort' {
    declare     var sort: typeof undefined;
    declare module.exports: typeof sort
}
declare module 'core-js/library/fn/array/splice' {
    declare     var splice: typeof undefined;
    declare module.exports: typeof splice
}
declare module 'core-js/library/fn/array/turn' {
    declare     var turn: typeof undefined;
    declare module.exports: typeof turn
}
declare module 'core-js/library/fn/array/unshift' {
    declare     var unshift: typeof undefined;
    declare module.exports: typeof unshift
}
declare module 'core-js/library/fn/array/values' {
    declare     var values: typeof undefined;
    declare module.exports: typeof values
}
declare module 'core-js/library/fn/date' {
    declare     var Date: typeof undefined;
    declare module.exports: typeof Date
}
declare module 'core-js/library/fn/date/add-locale' {
    declare     var addLocale: typeof undefined;
    declare module.exports: typeof addLocale
}
declare module 'core-js/library/fn/date/format' {
    declare     var format: typeof undefined;
    declare module.exports: typeof format
}
declare module 'core-js/library/fn/date/formatUTC' {
    declare     var formatUTC: typeof undefined;
    declare module.exports: typeof formatUTC
}
declare module 'core-js/library/fn/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/library/fn/function/has-instance' {
    declare     var hasInstance: (value: any) => boolean;
    declare module.exports: typeof hasInstance
}
declare module 'core-js/library/fn/function/name' {

}
declare module 'core-js/library/fn/function/part' {
    declare     var part: typeof undefined;
    declare module.exports: typeof part
}
declare module 'core-js/library/fn/math' {
    declare     var Math: typeof undefined;
    declare module.exports: typeof Math
}
declare module 'core-js/library/fn/math/acosh' {
    declare     var acosh: typeof undefined;
    declare module.exports: typeof acosh
}
declare module 'core-js/library/fn/math/asinh' {
    declare     var asinh: typeof undefined;
    declare module.exports: typeof asinh
}
declare module 'core-js/library/fn/math/atanh' {
    declare     var atanh: typeof undefined;
    declare module.exports: typeof atanh
}
declare module 'core-js/library/fn/math/cbrt' {
    declare     var cbrt: typeof undefined;
    declare module.exports: typeof cbrt
}
declare module 'core-js/library/fn/math/clz32' {
    declare     var clz32: typeof undefined;
    declare module.exports: typeof clz32
}
declare module 'core-js/library/fn/math/cosh' {
    declare     var cosh: typeof undefined;
    declare module.exports: typeof cosh
}
declare module 'core-js/library/fn/math/expm1' {
    declare     var expm1: typeof undefined;
    declare module.exports: typeof expm1
}
declare module 'core-js/library/fn/math/fround' {
    declare     var fround: typeof undefined;
    declare module.exports: typeof fround
}
declare module 'core-js/library/fn/math/hypot' {
    declare     var hypot: typeof undefined;
    declare module.exports: typeof hypot
}
declare module 'core-js/library/fn/math/imul' {
    declare     var imul: typeof undefined;
    declare module.exports: typeof imul
}
declare module 'core-js/library/fn/math/log10' {
    declare     var log10: typeof undefined;
    declare module.exports: typeof log10
}
declare module 'core-js/library/fn/math/log1p' {
    declare     var log1p: typeof undefined;
    declare module.exports: typeof log1p
}
declare module 'core-js/library/fn/math/log2' {
    declare     var log2: typeof undefined;
    declare module.exports: typeof log2
}
declare module 'core-js/library/fn/math/sign' {
    declare     var sign: typeof undefined;
    declare module.exports: typeof sign
}
declare module 'core-js/library/fn/math/sinh' {
    declare     var sinh: typeof undefined;
    declare module.exports: typeof sinh
}
declare module 'core-js/library/fn/math/tanh' {
    declare     var tanh: typeof undefined;
    declare module.exports: typeof tanh
}
declare module 'core-js/library/fn/math/trunc' {
    declare     var trunc: typeof undefined;
    declare module.exports: typeof trunc
}
declare module 'core-js/library/fn/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/library/fn/number/epsilon' {
    declare     var EPSILON: typeof undefined;
    declare module.exports: typeof EPSILON
}
declare module 'core-js/library/fn/number/is-finite' {
    declare     var isFinite: typeof undefined;
    declare module.exports: typeof isFinite
}
declare module 'core-js/library/fn/number/is-integer' {
    declare     var isInteger: typeof undefined;
    declare module.exports: typeof isInteger
}
declare module 'core-js/library/fn/number/is-nan' {
    declare     var isNaN: typeof undefined;
    declare module.exports: typeof isNaN
}
declare module 'core-js/library/fn/number/is-safe-integer' {
    declare     var isSafeInteger: typeof undefined;
    declare module.exports: typeof isSafeInteger
}
declare module 'core-js/library/fn/number/max-safe-integer' {
    declare     var MAX_SAFE_INTEGER: typeof undefined;
    declare module.exports: typeof MAX_SAFE_INTEGER
}
declare module 'core-js/library/fn/number/min-safe-integer' {
    declare     var MIN_SAFE_INTEGER: typeof undefined;
    declare module.exports: typeof MIN_SAFE_INTEGER
}
declare module 'core-js/library/fn/number/parse-float' {
    declare     var parseFloat: typeof undefined;
    declare module.exports: typeof parseFloat
}
declare module 'core-js/library/fn/number/parse-int' {
    declare     var parseInt: typeof undefined;
    declare module.exports: typeof parseInt
}
declare module 'core-js/library/fn/number/random' {
    declare     var random: typeof undefined;
    declare module.exports: typeof random
}
declare module 'core-js/library/fn/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/library/fn/object/assign' {
    declare     var assign: typeof undefined;
    declare module.exports: typeof assign
}
declare module 'core-js/library/fn/object/classof' {
    declare     var classof: typeof undefined;
    declare module.exports: typeof classof
}
declare module 'core-js/library/fn/object/create' {
    declare     var create: typeof undefined;
    declare module.exports: typeof create
}
declare module 'core-js/library/fn/object/define' {
    declare     var define: typeof undefined;
    declare module.exports: typeof define
}
declare module 'core-js/library/fn/object/define-properties' {
    declare     var defineProperties: typeof undefined;
    declare module.exports: typeof defineProperties
}
declare module 'core-js/library/fn/object/define-property' {
    declare     var defineProperty: typeof undefined;
    declare module.exports: typeof defineProperty
}
declare module 'core-js/library/fn/object/entries' {
    declare     var entries: typeof undefined;
    declare module.exports: typeof entries
}
declare module 'core-js/library/fn/object/freeze' {
    declare     var freeze: typeof undefined;
    declare module.exports: typeof freeze
}
declare module 'core-js/library/fn/object/get-own-property-descriptor' {
    declare     var getOwnPropertyDescriptor: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptor
}
declare module 'core-js/library/fn/object/get-own-property-descriptors' {
    declare     var getOwnPropertyDescriptors: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptors
}
declare module 'core-js/library/fn/object/get-own-property-names' {
    declare     var getOwnPropertyNames: typeof undefined;
    declare module.exports: typeof getOwnPropertyNames
}
declare module 'core-js/library/fn/object/get-own-property-symbols' {
    declare     var getOwnPropertySymbols: typeof undefined;
    declare module.exports: typeof getOwnPropertySymbols
}
declare module 'core-js/library/fn/object/get-prototype-of' {
    declare     var getPrototypeOf: typeof undefined;
    declare module.exports: typeof getPrototypeOf
}
declare module 'core-js/library/fn/object/is' {
    declare     var is: typeof undefined;
    declare module.exports: typeof is
}
declare module 'core-js/library/fn/object/is-extensible' {
    declare     var isExtensible: typeof undefined;
    declare module.exports: typeof isExtensible
}
declare module 'core-js/library/fn/object/is-frozen' {
    declare     var isFrozen: typeof undefined;
    declare module.exports: typeof isFrozen
}
declare module 'core-js/library/fn/object/is-object' {
    declare     var isObject: typeof undefined;
    declare module.exports: typeof isObject
}
declare module 'core-js/library/fn/object/is-sealed' {
    declare     var isSealed: typeof undefined;
    declare module.exports: typeof isSealed
}
declare module 'core-js/library/fn/object/keys' {
    declare     var keys: typeof undefined;
    declare module.exports: typeof keys
}
declare module 'core-js/library/fn/object/make' {
    declare     var make: typeof undefined;
    declare module.exports: typeof make
}
declare module 'core-js/library/fn/object/prevent-extensions' {
    declare     var preventExtensions: typeof undefined;
    declare module.exports: typeof preventExtensions
}
declare module 'core-js/library/fn/object/seal' {
    declare     var seal: typeof undefined;
    declare module.exports: typeof seal
}
declare module 'core-js/library/fn/object/set-prototype-of' {
    declare     var setPrototypeOf: typeof undefined;
    declare module.exports: typeof setPrototypeOf
}
declare module 'core-js/library/fn/object/values' {
    declare     var values: typeof undefined;
    declare module.exports: typeof values
}
declare module 'core-js/library/fn/reflect' {
    declare     var Reflect: typeof undefined;
    declare module.exports: typeof Reflect
}
declare module 'core-js/library/fn/reflect/apply' {
    declare     var apply: typeof undefined;
    declare module.exports: typeof apply
}
declare module 'core-js/library/fn/reflect/construct' {
    declare     var construct: typeof undefined;
    declare module.exports: typeof construct
}
declare module 'core-js/library/fn/reflect/define-property' {
    declare     var defineProperty: typeof undefined;
    declare module.exports: typeof defineProperty
}
declare module 'core-js/library/fn/reflect/delete-property' {
    declare     var deleteProperty: typeof undefined;
    declare module.exports: typeof deleteProperty
}
declare module 'core-js/library/fn/reflect/enumerate' {
    declare     var enumerate: typeof undefined;
    declare module.exports: typeof enumerate
}
declare module 'core-js/library/fn/reflect/get' {
    declare     var get: typeof undefined;
    declare module.exports: typeof get
}
declare module 'core-js/library/fn/reflect/get-own-property-descriptor' {
    declare     var getOwnPropertyDescriptor: typeof undefined;
    declare module.exports: typeof getOwnPropertyDescriptor
}
declare module 'core-js/library/fn/reflect/get-prototype-of' {
    declare     var getPrototypeOf: typeof undefined;
    declare module.exports: typeof getPrototypeOf
}
declare module 'core-js/library/fn/reflect/has' {
    declare     var has: typeof undefined;
    declare module.exports: typeof has
}
declare module 'core-js/library/fn/reflect/is-extensible' {
    declare     var isExtensible: typeof undefined;
    declare module.exports: typeof isExtensible
}
declare module 'core-js/library/fn/reflect/own-keys' {
    declare     var ownKeys: typeof undefined;
    declare module.exports: typeof ownKeys
}
declare module 'core-js/library/fn/reflect/prevent-extensions' {
    declare     var preventExtensions: typeof undefined;
    declare module.exports: typeof preventExtensions
}
declare module 'core-js/library/fn/reflect/set' {
    declare     var set: typeof undefined;
    declare module.exports: typeof set
}
declare module 'core-js/library/fn/reflect/set-prototype-of' {
    declare     var setPrototypeOf: typeof undefined;
    declare module.exports: typeof setPrototypeOf
}
declare module 'core-js/library/fn/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/library/fn/regexp/escape' {
    declare     var escape: typeof undefined;
    declare module.exports: typeof escape
}
declare module 'core-js/library/fn/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/library/fn/string/at' {
    declare     var at: typeof undefined;
    declare module.exports: typeof at
}
declare module 'core-js/library/fn/string/code-point-at' {
    declare     var codePointAt: typeof undefined;
    declare module.exports: typeof codePointAt
}
declare module 'core-js/library/fn/string/ends-with' {
    declare     var endsWith: typeof undefined;
    declare module.exports: typeof endsWith
}
declare module 'core-js/library/fn/string/escape-html' {
    declare     var escapeHTML: typeof undefined;
    declare module.exports: typeof escapeHTML
}
declare module 'core-js/library/fn/string/from-code-point' {
    declare     var fromCodePoint: typeof undefined;
    declare module.exports: typeof fromCodePoint
}
declare module 'core-js/library/fn/string/includes' {
    declare     var includes: typeof undefined;
    declare module.exports: typeof includes
}
declare module 'core-js/library/fn/string/lpad' {
    declare     var lpad: typeof undefined;
    declare module.exports: typeof lpad
}
declare module 'core-js/library/fn/string/raw' {
    declare     var raw: typeof undefined;
    declare module.exports: typeof raw
}
declare module 'core-js/library/fn/string/repeat' {
    declare     var repeat: typeof undefined;
    declare module.exports: typeof repeat
}
declare module 'core-js/library/fn/string/rpad' {
    declare     var rpad: typeof undefined;
    declare module.exports: typeof rpad
}
declare module 'core-js/library/fn/string/starts-with' {
    declare     var startsWith: typeof undefined;
    declare module.exports: typeof startsWith
}
declare module 'core-js/library/fn/string/unescape-html' {
    declare     var unescapeHTML: typeof undefined;
    declare module.exports: typeof unescapeHTML
}
declare module 'core-js/library/fn/symbol' {
    declare     var Symbol: typeof undefined;
    declare module.exports: typeof Symbol
}
declare module 'core-js/library/fn/symbol/for' {
    declare     var _for: typeof undefined;
    declare module.exports: typeof _for
}
declare module 'core-js/library/fn/symbol/has-instance' {
    declare     var hasInstance: typeof undefined;
    declare module.exports: typeof hasInstance
}
declare module 'core-js/library/fn/symbol/is-concat-spreadable' {
    declare     var isConcatSpreadable: typeof undefined;
    declare module.exports: typeof isConcatSpreadable
}
declare module 'core-js/library/fn/symbol/iterator' {
    declare     var iterator: typeof undefined;
    declare module.exports: typeof iterator
}
declare module 'core-js/library/fn/symbol/key-for' {
    declare     var keyFor: typeof undefined;
    declare module.exports: typeof keyFor
}
declare module 'core-js/library/fn/symbol/match' {
    declare     var match: typeof undefined;
    declare module.exports: typeof match
}
declare module 'core-js/library/fn/symbol/replace' {
    declare     var replace: typeof undefined;
    declare module.exports: typeof replace
}
declare module 'core-js/library/fn/symbol/search' {
    declare     var search: typeof undefined;
    declare module.exports: typeof search
}
declare module 'core-js/library/fn/symbol/species' {
    declare     var species: typeof undefined;
    declare module.exports: typeof species
}
declare module 'core-js/library/fn/symbol/split' {
    declare     var split: typeof undefined;
    declare module.exports: typeof split
}
declare module 'core-js/library/fn/symbol/to-primitive' {
    declare     var toPrimitive: typeof undefined;
    declare module.exports: typeof toPrimitive
}
declare module 'core-js/library/fn/symbol/to-string-tag' {
    declare     var toStringTag: typeof undefined;
    declare module.exports: typeof toStringTag
}
declare module 'core-js/library/fn/symbol/unscopables' {
    declare     var unscopables: typeof undefined;
    declare module.exports: typeof unscopables
}
declare module 'core-js/library/es5' {
    declare module.exports: typeof core
}
declare module 'core-js/library/es6' {
    declare module.exports: typeof core
}
declare module 'core-js/library/es6/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/library/es6/function' {
    declare     var Function: typeof undefined;
    declare module.exports: typeof Function
}
declare module 'core-js/library/es6/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/library/es6/math' {
    declare     var Math: typeof undefined;
    declare module.exports: typeof Math
}
declare module 'core-js/library/es6/number' {
    declare     var Number: typeof undefined;
    declare module.exports: typeof Number
}
declare module 'core-js/library/es6/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/library/es6/promise' {
    declare     var Promise: typeof undefined;
    declare module.exports: typeof Promise
}
declare module 'core-js/library/es6/reflect' {
    declare     var Reflect: typeof undefined;
    declare module.exports: typeof Reflect
}
declare module 'core-js/library/es6/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/library/es6/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/library/es6/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/library/es6/symbol' {
    declare     var Symbol: typeof undefined;
    declare module.exports: typeof Symbol
}
declare module 'core-js/library/es6/weak-map' {
    declare     var WeakMap: typeof undefined;
    declare module.exports: typeof WeakMap
}
declare module 'core-js/library/es6/weak-set' {
    declare     var WeakSet: typeof undefined;
    declare module.exports: typeof WeakSet
}
declare module 'core-js/library/es7' {
    declare module.exports: typeof core
}
declare module 'core-js/library/es7/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/library/es7/map' {
    declare     var Map: typeof undefined;
    declare module.exports: typeof Map
}
declare module 'core-js/library/es7/object' {
    declare     var Object: typeof undefined;
    declare module.exports: typeof Object
}
declare module 'core-js/library/es7/regexp' {
    declare     var RegExp: typeof undefined;
    declare module.exports: typeof RegExp
}
declare module 'core-js/library/es7/set' {
    declare     var Set: typeof undefined;
    declare module.exports: typeof Set
}
declare module 'core-js/library/es7/string' {
    declare     var String: typeof undefined;
    declare module.exports: typeof String
}
declare module 'core-js/library/js' {
    declare module.exports: typeof core
}
declare module 'core-js/library/js/array' {
    declare     var Array: typeof undefined;
    declare module.exports: typeof Array
}
declare module 'core-js/library/web' {
    declare module.exports: typeof core
}
declare module 'core-js/library/web/dom' {
    declare module.exports: typeof core
}
declare module 'core-js/library/web/immediate' {
    declare module.exports: typeof core
}
declare module 'core-js/library/web/timers' {
    declare module.exports: typeof core
}