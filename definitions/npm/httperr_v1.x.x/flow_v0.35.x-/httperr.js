

declare module 'httperr' {
		declare interface HttpErr {
		HttpError: HttpErrorStatic,
		createHttpError(
		status: number, title: string, init?: (config: Config) => void
	): HttpErrorStatic,
		badRequest: ErrorBuilder,
		unauthorized: ErrorBuilder,
		paymentRequired: ErrorBuilder,
		forbidden: ErrorBuilder,
		notFound: ErrorBuilder,
		methodNotAllowed: ErrorBuilder,
		notAcceptable: ErrorBuilder,
		proxyAuthenticationRequired: ErrorBuilder,
		requestTimeout: ErrorBuilder,
		conflict: ErrorBuilder,
		gone: ErrorBuilder,
		lengthRequired: ErrorBuilder,
		preconditionFailed: ErrorBuilder,
		requestEntityTooLarge: ErrorBuilder,
		requestUriTooLong: ErrorBuilder,
		unsupportedMediaType: ErrorBuilder,
		requestedRangeNotSatisfiable: ErrorBuilder,
		expectationFailed: ErrorBuilder,
		imATeapot: ErrorBuilder,
		authenticationTimeout: ErrorBuilder,
		enhanceYourCalm: ErrorBuilder,
		unprocessableEntity: ErrorBuilder,
		locked: ErrorBuilder,
		methodFailure: ErrorBuilder,
		failedDependency: ErrorBuilder,
		unorderedCollection: ErrorBuilder,
		upgradeRequired: ErrorBuilder,
		preconditionRequired: ErrorBuilder,
		tooManyRequests: ErrorBuilder,
		requestHeaderFieldsTooLarge: ErrorBuilder,
		loginTimeout: ErrorBuilder,
		noResponse: ErrorBuilder,
		retryWith: ErrorBuilder,
		blockedByWindowsParentalControls: ErrorBuilder,
		redirect: ErrorBuilder,
		unavailableForLegalReasons: ErrorBuilder,
		requestHeaderTooLarge: ErrorBuilder,
		certError: ErrorBuilder,
		noCert: ErrorBuilder,
		httpToHttps: ErrorBuilder,
		clientClosedRequest: ErrorBuilder,
		internalServerError: ErrorBuilder,
		notImplemented: ErrorBuilder,
		badGateway: ErrorBuilder,
		serviceUnavailable: ErrorBuilder,
		gatewayTimeout: ErrorBuilder,
		httpVersionNotSupported: ErrorBuilder,
		variantAlsoNegotiates: ErrorBuilder,
		insufficientStorage: ErrorBuilder,
		loopDetected: ErrorBuilder,
		bandwidthLimitExceeded: ErrorBuilder,
		notExtended: ErrorBuilder,
		networkAuthenticationRequired: ErrorBuilder,
		originError: ErrorBuilder,
		connectionTimedOut: ErrorBuilder,
		proxyDeclinedRequest: ErrorBuilder,
		aTimeoutOccured: ErrorBuilder,
		networkReadTimeoutError: ErrorBuilder,
		networkConnectTimeoutError: ErrorBuilder,
		BadRequest: ErrorBuilder,
		Unauthorized: ErrorBuilder,
		PaymentRequired: ErrorBuilder,
		Forbidden: ErrorBuilder,
		NotFound: ErrorBuilder,
		MethodNotAllowed: ErrorBuilder,
		NotAcceptable: ErrorBuilder,
		ProxyAuthenticationRequired: ErrorBuilder,
		RequestTimeout: ErrorBuilder,
		Conflict: ErrorBuilder,
		Gone: ErrorBuilder,
		LengthRequired: ErrorBuilder,
		PreconditionFailed: ErrorBuilder,
		RequestEntityTooLarge: ErrorBuilder,
		RequestUriTooLong: ErrorBuilder,
		UnsupportedMediaType: ErrorBuilder,
		RequestedRangeNotSatisfiable: ErrorBuilder,
		ExpectationFailed: ErrorBuilder,
		ImATeapot: ErrorBuilder,
		AuthenticationTimeout: ErrorBuilder,
		EnhanceYourCalm: ErrorBuilder,
		UnprocessableEntity: ErrorBuilder,
		Locked: ErrorBuilder,
		MethodFailure: ErrorBuilder,
		FailedDependency: ErrorBuilder,
		UnorderedCollection: ErrorBuilder,
		UpgradeRequired: ErrorBuilder,
		PreconditionRequired: ErrorBuilder,
		TooManyRequests: ErrorBuilder,
		RequestHeaderFieldsTooLarge: ErrorBuilder,
		LoginTimeout: ErrorBuilder,
		NoResponse: ErrorBuilder,
		RetryWith: ErrorBuilder,
		BlockedByWindowsParentalControls: ErrorBuilder,
		Redirect: ErrorBuilder,
		UnavailableForLegalReasons: ErrorBuilder,
		RequestHeaderTooLarge: ErrorBuilder,
		CertError: ErrorBuilder,
		NoCert: ErrorBuilder,
		HttpToHttps: ErrorBuilder,
		ClientClosedRequest: ErrorBuilder,
		InternalServerError: ErrorBuilder,
		NotImplemented: ErrorBuilder,
		BadGateway: ErrorBuilder,
		ServiceUnavailable: ErrorBuilder,
		GatewayTimeout: ErrorBuilder,
		HttpVersionNotSupported: ErrorBuilder,
		VariantAlsoNegotiates: ErrorBuilder,
		InsufficientStorage: ErrorBuilder,
		LoopDetected: ErrorBuilder,
		BandwidthLimitExceeded: ErrorBuilder,
		NotExtended: ErrorBuilder,
		NetworkAuthenticationRequired: ErrorBuilder,
		OriginError: ErrorBuilder,
		ConnectionTimedOut: ErrorBuilder,
		ProxyDeclinedRequest: ErrorBuilder,
		ATimeoutOccured: ErrorBuilder,
		NetworkReadTimeoutError: ErrorBuilder,
		NetworkConnectTimeoutError: ErrorBuilder,
		400: ErrorBuilder,
		401: ErrorBuilder,
		402: ErrorBuilder,
		403: ErrorBuilder,
		404: ErrorBuilder,
		405: ErrorBuilder,
		406: ErrorBuilder,
		407: ErrorBuilder,
		408: ErrorBuilder,
		409: ErrorBuilder,
		410: ErrorBuilder,
		411: ErrorBuilder,
		412: ErrorBuilder,
		413: ErrorBuilder,
		414: ErrorBuilder,
		415: ErrorBuilder,
		416: ErrorBuilder,
		417: ErrorBuilder,
		418: ErrorBuilder,
		419: ErrorBuilder,
		420: ErrorBuilder,
		422: ErrorBuilder,
		423: ErrorBuilder,
		424: ErrorBuilder,
		425: ErrorBuilder,
		426: ErrorBuilder,
		428: ErrorBuilder,
		429: ErrorBuilder,
		431: ErrorBuilder,
		440: ErrorBuilder,
		444: ErrorBuilder,
		449: ErrorBuilder,
		450: ErrorBuilder,
		451: ErrorBuilder,
		494: ErrorBuilder,
		495: ErrorBuilder,
		496: ErrorBuilder,
		497: ErrorBuilder,
		499: ErrorBuilder,
		500: ErrorBuilder,
		501: ErrorBuilder,
		502: ErrorBuilder,
		503: ErrorBuilder,
		504: ErrorBuilder,
		505: ErrorBuilder,
		506: ErrorBuilder,
		507: ErrorBuilder,
		508: ErrorBuilder,
		509: ErrorBuilder,
		510: ErrorBuilder,
		511: ErrorBuilder,
		520: ErrorBuilder,
		522: ErrorBuilder,
		523: ErrorBuilder,
		524: ErrorBuilder,
		598: ErrorBuilder,
		599: ErrorBuilder
	}

	declare interface HttpErrorStatic {
		new (config?: string | Error | Config, extra?: {
		
	}): HttpError
	}

	declare interface HttpError {
		title: string,
		code: string,
		statusCode: number,
		toObject(...skip: (string | RegExp)[]): any
	}

	declare interface Config {
		message?: string,
		cause?: Error,
		details?: string,
		allowed?: string[],
		retryAfter?: any,
		parameters?: any,
		location?: any
	}

	declare interface ErrorBuilder {
		(config?: string | Error | Config): HttpError,
		new (config?: string | Error | Config): HttpError
	}

			declare module.exports: HttpErr


}