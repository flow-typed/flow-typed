/**
 * Flowtype definitions for ldclient-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * The names of events to which users of the client can subscribe.
 */
declare
export type LaunchDarkly$LDEventName = "ready" | "change";


/**
 * The types of values a feature flag can have.
 * 
Flags can have any JSON-serializable value.
*/
declare
export type LaunchDarkly$LDFlagValue = any;


/**
 * A map of feature flags from their keys to their values.
 */
declare
export type LaunchDarkly$LDFlagSet = {
    [key: string]: LaunchDarkly$LDFlagValue
};


/**
 * A map of feature flag keys to objects holding changes in their values.
 */
declare
export type LaunchDarkly$LDFlagChangeset = {
    [key: string]: {
        current: LaunchDarkly$LDFlagValue,
        previous: LaunchDarkly$LDFlagValue
    }
};


/**
 * The parameters required to (un)subscribe to/from LaunchDarkly events.
 * 
See LDClient#on and LDClient#off.
*/
declare type LaunchDarkly$LDEventSignature = (
    key: LaunchDarkly$LDEventName,
    callback: (
        current?: LaunchDarkly$LDFlagValue | LaunchDarkly$LDFlagChangeset,
        previous?: LaunchDarkly$LDFlagValue) => void,
    context?: any) => void;


/**
 * LaunchDarkly initialization options.
 */
declare
export interface LaunchDarkly$LDOptions {

    /**
     * The signed user key for Secure Mode.
     * @see  http://docs.launchdarkly.com/docs/js-sdk-reference#secure-mode
     */
    hash: string,

        /**
         * The initial set of flags to use until the remote set is retrieved.
         * 
        If "localStorage" is specified, the flags will be saved locally and
        retrieved from storage. Alternatively an LDFlagSet can be specified
        which will be used as the initial source of flag values.
        */
        bootstrap?: "localStorage" | LaunchDarkly$LDFlagSet
}


/**
 * A LaunchDarkly user object.
 */
declare
export interface LaunchDarkly$LDUser {

    /**
     * A unique string identifying a user.
     */
    key: string,

        /**
         * The user's name.
         * 
        You can search for users on the User page by name.
        */
        name?: string,

        /**
         * The user's first name.
         */
        firstName?: string,

        /**
         * The user's last name.
         */
        lastName?: string,

        /**
         * The user's email address.
         * 
        If an `avatar` URL is not provided, LaunchDarkly will use Gravatar
        to try to display an avatar for the user on the Users page.
        */
        email?: string,

        /**
         * An absolute URL to an avatar image for the user.
         */
        avatar?: string,

        /**
         * The user's IP address.
         * 
        If you provide an IP, LaunchDarkly will use a geolocation service to
        automatically infer a `country` for the user, unless you've already
        specified one.
        */
        ip?: string,

        /**
         * The country associated with the user.
         */
        country?: string,

        /**
         * Whether to show the user on the Users page in LaunchDarkly.
         */
        anonymous?: boolean,

        /**
         * Any additional attributes associated with the user.
         */
        custom?: {
            [key: string]: string | boolean | number | Array<string | boolean | number >
        }
}


/**
 * The LaunchDarkly client's instance interface.
 * @see  http://docs.launchdarkly.com/docs/js-sdk-reference
 */
declare
export interface LaunchDarkly$LDClient {

    /**
     * Identifies a user to LaunchDarkly.
     * 
    This only needs to be called if the user changes identities because
    normally the user's identity is set during client initialization.
     * @param user A map of user options. Must contain at least the `key` property
    which identifies the user.
     * @param hash The signed user key for Secure Mode; see
    http://docs.launchdarkly.com/docs/js-sdk-reference#secure-mode
     * @param onDone A callback to invoke after the user is identified.
    */
    identify: (user: LaunchDarkly$LDUser, hash?: string, onDone?: () => void) => void,

        /**
         * Retrieves a flag's value.
         * @param key The key of the flag for which to retrieve the corresponding value.
         * @param defaultValue The value to use if the flag is not available (for example, if the
        user is offline or a flag is requested that does not exist).
         * @returns  *   The flag's value.
        */
        variation: (
            key: string,
            defaultValue?: LaunchDarkly$LDFlagValue) => LaunchDarkly$LDFlagValue,

        /**
         * Registers an event listener.
         * @param key The name of the event for which to listen. This can be "ready",
        "change", or "change:FLAG-KEY".
         * @param callback The function to execute when the event fires. For the "change"
        event, the callback receives one parameter: an LDFlagChangeset
        describing the changes. For "change:FLAG-KEY" events, the callback
        receives two parameters: the current (new) value and the previous
        value of the relevant flag.
         * @param context The "this" context to use for the callback.
        */
        on: LaunchDarkly$LDEventSignature,

        /**
         * Deregisters an event listener.
         * @param key The name of the event for which to stop listening. This can be
        "ready", "change", or "change:FLAG-KEY".
         * @param callback The function to deregister.
         * @param context The "this" context for the callback.
        */
        off: LaunchDarkly$LDEventSignature,

        /**
         * Track page events to use in goals or A/B tests.
         * 
        LaunchDarkly automatically tracks pageviews and clicks that are
        specified in the Goals section of their dashboard. This can be used
        to track custom goals or other events that do not currently have
        goals.
         * @param key The event to record.
         * @param data Additional information to associate with the event.
        */
        track: (key: string, data?: any) => void,

        /**
         * Returns a map of all available flags to the current user's values.
         */
        allFlags: () => LaunchDarkly$LDFlagSet
}
declare
var LDClient: {
    initialize: (
        key: string,
        user: LaunchDarkly$LDUser,
        options?: LaunchDarkly$LDOptions) => LaunchDarkly$LDClient
};