/**
 * Flowtype definitions for restangular
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'restangular' {
    declare module.exports: typeof restangular
}
declare type restangular$IPromise<T>= {
    call(methodName: string, params?: any): restangular$IPromise<T>,
    get(fieldName: string): restangular$IPromise<T>,
    $object: T
}

declare type restangular$ICollectionPromise<T>= {
    push(object: any): restangular$ICollectionPromise<T>,
    call(methodName: string, params?: any): restangular$ICollectionPromise<T>,
    get(fieldName: string): restangular$ICollectionPromise<T>,
    $object: T[]
}

declare interface restangular$IResponse {
    status: number,
        data: any,
        headers(name: string): string,
        config: {
            method: string,
            url: string,
            params: any
        }
}

declare interface restangular$IProvider {
    setBaseUrl(baseUrl: string): void,
        setExtraFields(fields: string[]): void,
        setParentless(parentless: boolean, routes: string[]): void,
        setDefaultHttpFields(httpFields: any): void,
        addElementTransformer(route: string, transformer: Function): void,
        addElementTransformer(route: string, isCollection: boolean, transformer: Function): void,
        setTransformOnlyServerElements(active: boolean): void,
        setOnElemRestangularized(
            callback: (
                elem: any,
                isCollection: boolean,
                what: string,
                restangular: restangular$IService) => any): void,
        setResponseInterceptor(
            responseInterceptor: (
                data: any,
                operation: string,
                what: string,
                url: string,
                response: restangular$IResponse,
                deferred: angular.IDeferred<any>) => any): void,
        setResponseExtractor(
            responseInterceptor: (
                data: any,
                operation: string,
                what: string,
                url: string,
                response: restangular$IResponse,
                deferred: angular.IDeferred<any>) => any): void,
        addResponseInterceptor(
            responseInterceptor: (
                data: any,
                operation: string,
                what: string,
                url: string,
                response: restangular$IResponse,
                deferred: angular.IDeferred<any>) => any): void,
        setRequestInterceptor(
            requestInterceptor: (element: any, operation: string, what: string, url: string) => any): void,
        addRequestInterceptor(
            requestInterceptor: (element: any, operation: string, what: string, url: string) => any): void,
        setFullRequestInterceptor(
            fullRequestInterceptor: (
                element: any,
                operation: string,
                what: string,
                url: string,
                headers: any,
                params: any,
                httpConfig: angular.IRequestShortcutConfig) => {
                element: any,
                headers: any,
                params: any
            }): void,
        addFullRequestInterceptor(
            requestInterceptor: (
                element: any,
                operation: string,
                what: string,
                url: string,
                headers: any,
                params: any,
                httpConfig: angular.IRequestShortcutConfig) => {
                headers: any,
                params: any,
                element: any,
                httpConfig: angular.IRequestShortcutConfig
            }): void,
        setErrorInterceptor(
            errorInterceptor: (
                response: restangular$IResponse,
                deferred: angular.IDeferred<any>,
                responseHandler: (response: restangular$IResponse) => any) => any): void,
        setRestangularFields(fields: {
            [fieldName: string]: string
        }): void,
        setMethodOverriders(overriders: string[]): void,
        setJsonp(jsonp: boolean): void,
        setDefaultRequestParams(params: any): void,
        setDefaultRequestParams(method: string, params: any): void,
        setDefaultRequestParams(methods: string[], params: any): void,
        setFullResponse(fullResponse: boolean): void,
        setDefaultHeaders(headers: any): void,
        setRequestSuffix(suffix: string): void,
        setUseCannonicalId(useCannonicalId: boolean): void,
        setEncodeIds(encode: boolean): void
}

declare interface restangular$ICustom {
    customGET(path: string, params?: any, headers?: any): restangular$IPromise<any>,
        customGETLIST(path: string, params?: any, headers?: any): restangular$ICollectionPromise<any>,
        customDELETE(path: string, params?: any, headers?: any): restangular$IPromise<any>,
        customPOST(
            elem?: any,
            path?: string,
            params?: any,
            headers?: any): restangular$IPromise<any>,
        customPUT(
            elem?: any,
            path?: string,
            params?: any,
            headers?: any): restangular$IPromise<any>,
        customOperation(
            operation: string,
            path: string,
            params?: any,
            headers?: any,
            elem?: any): restangular$IPromise<any>,
        addRestangularMethod(
            name: string,
            operation: string,
            path?: string,
            params?: any,
            headers?: any,
            elem?: any): restangular$IPromise<any >
}

declare type restangular$IService = {
    one(route: string, id?: number): restangular$IElement,
    one(route: string, id?: string): restangular$IElement,
    oneUrl(route: string, url: string): restangular$IElement,
    all(route: string): restangular$ICollection,
    allUrl(route: string, url: string): restangular$ICollection,
    copy(fromElement: any): restangular$IElement,
    withConfig(
        configurer: (RestangularProvider: restangular$IProvider) => any): restangular$IService,
    restangularizeElement(
        parent: any,
        element: any,
        route: string,
        collection?: any,
        reqParams?: any): restangular$IElement,
    restangularizeCollection(parent: any, element: any, route: string): restangular$ICollection,
    service(route: string, parent?: any): restangular$IScopedService,
    stripRestangular(element: any): any,
    extendModel(route: string, extender: (model: restangular$IElement) => any): void,
    extendCollection(route: string, extender: (collection: restangular$ICollection) => any): void
} & restangular$ICustom & restangular$IProvider


declare type restangular$IScopedService = {
    one(id: number): restangular$IElement,
    one(id: string): restangular$IElement,
    post(
        elementToPost: any,
        queryParams?: any,
        headers?: any): restangular$IPromise<any>,
    post<T>(elementToPost: T, queryParams?: any, headers?: any): restangular$IPromise<T>,
    getList(queryParams?: any, headers?: any): restangular$ICollectionPromise<any>,
    getList<T>(queryParams?: any, headers?: any): restangular$ICollectionPromise<T >
} & restangular$IService


declare type restangular$IElement = {
    get(queryParams?: any, headers?: any): restangular$IPromise<any>,
    get<T>(queryParams?: any, headers?: any): restangular$IPromise<T>,
    getList(
        subElement?: any,
        queryParams?: any,
        headers?: any): restangular$ICollectionPromise<any>,
    getList<T>(
        subElement?: any,
        queryParams?: any,
        headers?: any): restangular$ICollectionPromise<T>,
    put(queryParams?: any, headers?: any): restangular$IPromise<any>,
    post(
        subElement: any,
        elementToPost: any,
        queryParams?: any,
        headers?: any): restangular$IPromise<any>,
    post<T>(
        subElement: any,
        elementToPost: T,
        queryParams?: any,
        headers?: any): restangular$IPromise<T>,
    remove(queryParams?: any, headers?: any): restangular$IPromise<any>,
    head(queryParams?: any, headers?: any): restangular$IPromise<any>,
    trace(queryParams?: any, headers?: any): restangular$IPromise<any>,
    options(queryParams?: any, headers?: any): restangular$IPromise<any>,
    patch(queryParams?: any, headers?: any): restangular$IPromise<any>,
    clone(): restangular$IElement,
    plain(): any,
    plain<T>(): T,
    withHttpConfig(httpConfig: angular.IRequestShortcutConfig): restangular$IElement,
    save(queryParams?: any, headers?: any): restangular$IPromise<any>,
    getRestangularUrl(): string,
    route?: string,
    id?: string,
    reqParams?: any
} & restangular$IService


declare type restangular$ICollection = {
    getList(queryParams?: any, headers?: any): restangular$ICollectionPromise<any>,
    getList<T>(queryParams?: any, headers?: any): restangular$ICollectionPromise<T>,
    post(
        elementToPost: any,
        queryParams?: any,
        headers?: any): restangular$IPromise<any>,
    post<T>(elementToPost: T, queryParams?: any, headers?: any): restangular$IPromise<T>,
    head(queryParams?: any, headers?: any): restangular$IPromise<any>,
    trace(queryParams?: any, headers?: any): restangular$IPromise<any>,
    options(queryParams?: any, headers?: any): restangular$IPromise<any>,
    patch(queryParams?: any, headers?: any): restangular$IPromise<any>,
    putElement(idx: any, params: any, headers: any): restangular$IPromise<any>,
    withHttpConfig(httpConfig: angular.IRequestShortcutConfig): restangular$ICollection,
    clone(): restangular$ICollection,
    plain(): any,
    plain<T>(): T[],
    getRestangularUrl(): string
} & restangular$IService & Array