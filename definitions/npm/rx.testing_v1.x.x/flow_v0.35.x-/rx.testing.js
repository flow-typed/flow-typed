/**
 * Flowtype definitions for rx.testing
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare
export type Rx$TestScheduler = {
    createColdObservable<T>(...records: Rx$Recorded[]): Observable<T>,
    createHotObservable<T>(...records: Rx$Recorded[]): Observable<T>,
    createObserver<T>(): Rx$MockObserver<T>,
    startWithTiming<T>(
        create: () => Observable<T>,
        createdAt: number,
        subscribedAt: number,
        disposedAt: number): Rx$MockObserver<T>,
    startWithDispose<T>(create: () => Observable<T>, disposedAt: number): Rx$MockObserver<T>,
    startWithCreate<T>(create: () => Observable<T>): Rx$MockObserver<T >
} & VirtualTimeScheduler


declare
export var TestScheduler: {
    new(): Rx$TestScheduler
};

declare
export class Recorded {
    constructor(time: number, value: any, equalityComparer?: (x: any, y: any) => boolean): this;
    equals(other: Rx$Recorded): boolean;
    toString(): string;
    time: number;
    value: any
}

declare
export var ReactiveTest: {
    created: number,
    subscribed: number,
    disposed: number,
    onNext(ticks: number, value: any): Rx$Recorded,
    onNext(ticks: number, predicate: (value: any) => boolean): Rx$Recorded,
    onError(ticks: number, exception: any): Rx$Recorded,
    onError(ticks: number, predicate: (exception: any) => boolean): Rx$Recorded,
    onCompleted(ticks: number): Rx$Recorded,
    subscribe(subscribeAt: number, unsubscribeAt?: number): Rx$Subscription
};

declare
export class Subscription {
    constructor(subscribeAt: number, unsubscribeAt?: number): this;
    equals(other: Rx$Subscription): boolean
}

declare
export type Rx$MockObserver<T>= {
    messages: Rx$Recorded[]
} & Observer


declare type Rx$MockObserverStatic = {
    new<T>(scheduler: IScheduler): Rx$MockObserver<T >
} & ObserverStatic


declare
export var MockObserver: Rx$MockObserverStatic;
declare module 'rx.testing' {
    declare module.exports: typeof Rx
}