// @flow
/**
 * Flowtype definitions for cucumber
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export interface cucumber$CallbackStepDefinition {
    pending: () => PromiseLike<any>,
        (error?: any, pending?: string): void
}

declare export interface cucumber$TableDefinition {
    raw: () => Array<any>,
        rows: () => Array<any>,
        rowsHash: () => {},
        hashes: () => {}
}

declare type cucumber$StepDefinitionParam = string | cucumber$CallbackStepDefinition | cucumber$TableDefinition;

declare interface cucumber$StepDefinitionCode {
    (...stepArgs: Array<cucumber$StepDefinitionParam>): PromiseLike<any>| any | void
}

declare interface cucumber$StepDefinitionOptions {
    timeout?: number
}

declare export interface cucumber$StepDefinitions {
    Given(
            pattern: RegExp | string,
            options: cucumber$StepDefinitionOptions,
            code: cucumber$StepDefinitionCode): void,
        Given(pattern: RegExp | string, code: cucumber$StepDefinitionCode): void,
        When(
            pattern: RegExp | string,
            options: cucumber$StepDefinitionOptions,
            code: cucumber$StepDefinitionCode): void,
        When(pattern: RegExp | string, code: cucumber$StepDefinitionCode): void,
        Then(
            pattern: RegExp | string,
            options: cucumber$StepDefinitionOptions,
            code: cucumber$StepDefinitionCode): void,
        Then(pattern: RegExp | string, code: cucumber$StepDefinitionCode): void,
        setDefaultTimeout(time: number): void
}

declare interface cucumber$HookScenario {
    getKeyword(): string,
        getName(): string,
        getDescription(): string,
        getUri(): string,
        getLine(): number,
        getTags(): string[],
        getException(): Error,
        getAttachments(): any[],
        attach(data: any, mimeType?: string, callback?: (err?: any) => void): void,
        isSuccessful(): boolean,
        isFailed(): boolean,
        isPending(): boolean,
        isUndefined(): boolean,
        isSkipped(): boolean
}

declare interface cucumber$HookCode {
    (scenario: cucumber$HookScenario, callback?: cucumber$CallbackStepDefinition): void
}

declare interface cucumber$AroundCode {
    (scenario: cucumber$HookScenario, runScenario?: (error: string, callback?: Function) => void): void
}

declare export interface cucumber$Hooks {
    Before(code: cucumber$HookCode): void,
        After(code: cucumber$HookCode): void,
        Around(code: cucumber$AroundCode): void,
        setDefaultTimeout(time: number): void,
        registerHandler(
            handlerOption: string,
            code: (event: any, callback: cucumber$CallbackStepDefinition) => void): void
}
declare module 'cucumber' {
    declare module.exports: typeof cucumber
}