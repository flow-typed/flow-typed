/**
 * Flowtype definitions for semver
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$SemVerModule: {
        valid: typeof SemVerModule$valid,
        clean: typeof SemVerModule$clean,
        inc: typeof SemVerModule$inc,
        major: typeof SemVerModule$major,
        minor: typeof SemVerModule$minor,
        patch: typeof SemVerModule$patch,
        prerelease: typeof SemVerModule$prerelease,
        gt: typeof SemVerModule$gt,
        gte: typeof SemVerModule$gte,
        lt: typeof SemVerModule$lt,
        lte: typeof SemVerModule$lte,
        eq: typeof SemVerModule$eq,
        neq: typeof SemVerModule$neq,
        cmp: typeof SemVerModule$cmp,
        compare: typeof SemVerModule$compare,
        rcompare: typeof SemVerModule$rcompare,
        diff: typeof SemVerModule$diff,
        validRange: typeof SemVerModule$validRange,
        satisfies: typeof SemVerModule$satisfies,
        maxSatisfying: typeof SemVerModule$maxSatisfying,
        minSatisfying: typeof SemVerModule$minSatisfying,
        gtr: typeof SemVerModule$gtr,
        ltr: typeof SemVerModule$ltr,
        outside: typeof SemVerModule$outside,
    }
    /**
     * Return the parsed version, or null if it's not valid.
     */
declare
function SemVerModule$valid(v: string, loose?: boolean): string


/**
 * Returns cleaned (removed leading/trailing whitespace, remove '=v' prefix) and parsed version, or null if version is invalid.
 */
declare
function SemVerModule$clean(version: string, loose?: boolean): string


/**
 * Return the version incremented by the release type (major, minor, patch, or prerelease), or null if it's not valid.
 */
declare
function SemVerModule$inc(v: string, release: string, loose?: boolean): string


/**
 * Return the major version number.
 */
declare
function SemVerModule$major(v: string, loose?: boolean): number


/**
 * Return the minor version number.
 */
declare
function SemVerModule$minor(v: string, loose?: boolean): number


/**
 * Return the patch version number.
 */
declare
function SemVerModule$patch(v: string, loose?: boolean): number


/**
 * Returns an array of prerelease components, or null if none exist.
 */
declare
function SemVerModule$prerelease(v: string, loose?: boolean): string[]


/**
 * v1>v2
 */
declare
function SemVerModule$gt(v1: string, v2: string, loose?: boolean): boolean


/**
 * v1 >= v2
 */
declare
function SemVerModule$gte(v1: string, v2: string, loose?: boolean): boolean


/**
 * v1<v2
 */
declare
function SemVerModule$lt(v1: string, v2: string, loose?: boolean): boolean


/**
 * v1 <= v2
 */
declare
function SemVerModule$lte(v1: string, v2: string, loose?: boolean): boolean


/**
 * v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings.
 */
declare
function SemVerModule$eq(v1: string, v2: string, loose?: boolean): boolean


/**
 * v1 != v2 The opposite of eq.
 */
declare
function SemVerModule$neq(v1: string, v2: string, loose?: boolean): boolean


/**
 * Pass in a comparison string, and it'll call the corresponding semver comparison function. "===" and "!==" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided.
 */
declare
function SemVerModule$cmp(v1: string, comparator: any, v2: string, loose?: boolean): boolean


/**
 * Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort().
 */
declare
function SemVerModule$compare(v1: string, v2: string, loose?: boolean): number


/**
 * The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort().
 */
declare
function SemVerModule$rcompare(v1: string, v2: string, loose?: boolean): number


/**
 * Returns difference between two versions by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if the versions are the same.
 */
declare
function SemVerModule$diff(v1: string, v2: string, loose?: boolean): string


/**
 * Return the valid range or null if it's not valid
 */
declare
function SemVerModule$validRange(range: string, loose?: boolean): string


/**
 * Return true if the version satisfies the range.
 */
declare
function SemVerModule$satisfies(version: string, range: string, loose?: boolean): boolean


/**
 * Return the highest version in the list that satisfies the range, or null if none of them do.
 */
declare
function SemVerModule$maxSatisfying(versions: string[], range: string, loose?: boolean): string


/**
 * Return the lowest version in the list that satisfies the range, or null if none of them do.
 */
declare
function SemVerModule$minSatisfying(versions: string[], range: string, loose?: boolean): string


/**
 * Return true if version is greater than all the versions possible in the range.
 */
declare
function SemVerModule$gtr(version: string, range: string, loose?: boolean): boolean


/**
 * Return true if version is less than all the versions possible in the range.
 */
declare
function SemVerModule$ltr(version: string, range: string, loose?: boolean): boolean


/**
 * Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.)
 */
declare
function SemVerModule$outside(version: string, range: string, hilo: string, loose?: boolean): boolean

declare class SemVerBase {
    raw: string;
    loose: boolean;
    format(): string;
    inspect(): string;
    toString(): string
}

declare class SemVer mixins SemVerBase {
    constructor(version: string, loose?: boolean): this;
    major: number;
    minor: number;
    patch: number;
    version: string;
    build: string[];
    prerelease: string[];
    compare(other: SemVerModule$SemVer): number;
    compareMain(other: SemVerModule$SemVer): number;
    comparePre(other: SemVerModule$SemVer): number;
    inc(release: string): SemVerModule$SemVer
}

declare class Comparator mixins SemVerBase {
    constructor(comp: string, loose?: boolean): this;
    semver: SemVerModule$SemVer;
    operator: string;
    value: boolean;
    parse(comp: string): void;
    test(version: SemVerModule$SemVer): boolean
}

declare class Range mixins SemVerBase {
    constructor(range: string, loose?: boolean): this;
    set: SemVerModule$Comparator[][];
    parseRange(range: string): SemVerModule$Comparator[];
    test(version: SemVerModule$SemVer): boolean
}
declare interface SemVerStatic {
    SemVer(version: string, loose?: boolean): SemVerModule$SemVer,
        Comparator(comp: string, loose?: boolean): SemVerModule$Comparator,
        Range(range: string, loose?: boolean): SemVerModule$Range,
        clean(version: string, loose?: boolean): string,
        SEMVER_SPEC_VERSION: string,
        valid(v: string, loose?: boolean): string,
        inc(v: string, release: string, loose?: boolean): string,
        major(v: string, loose?: boolean): number,
        minor(v: string, loose?: boolean): number,
        patch(v: string, loose?: boolean): number,
        gt(v1: string, v2: string, loose?: boolean): boolean,
        gte(v1: string, v2: string, loose?: boolean): boolean,
        lt(v1: string, v2: string, loose?: boolean): boolean,
        lte(v1: string, v2: string, loose?: boolean): boolean,
        eq(v1: string, v2: string, loose?: boolean): boolean,
        neq(v1: string, v2: string, loose?: boolean): boolean,
        cmp(v1: string, comparator: any, v2: string, loose?: boolean): boolean,
        compare(v1: string, v2: string, loose?: boolean): number,
        rcompare(v1: string, v2: string, loose?: boolean): number,
        diff(v1: string, v2: string, loose?: boolean): string,
        validRange(range: string, loose?: boolean): string,
        satisfies(version: string, range: string, loose?: boolean): boolean,
        maxSatisfying(versions: string[], range: string, loose?: boolean): string,
        gtr(version: string, range: string, loose?: boolean): boolean,
        ltr(version: string, range: string, loose?: boolean): boolean,
        outside(version: string, range: string, hilo: string, loose?: boolean): boolean
}
declare
var semver: SemVerStatic;
declare module 'semver' {
    declare module.exports: typeof SemVerModule
}