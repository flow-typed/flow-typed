// @flow
/**
 * Flowtype definitions for inversify-restify-utils
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'inversify-restify-utils' {


    declare     export interface interfaces$InversifyRestifyServerConstructor {
        new(kernel: undefined.Kernel): interfaces$InversifyRestifyServer
    }

    declare     export interface interfaces$InversifyRestifyServer {
        setConfig(fn: interfaces$ConfigFunction): interfaces$InversifyRestifyServer,
            build(): restify.Server
    }

    declare     export interface interfaces$ConfigFunction {
        (app: restify.Server): void
    }

    declare     export interface interfaces$HandlerDecoratorFactory {
        (path: string, ...middleware: restify.RequestHandler[]): interfaces$HandlerDecorator
    }

    declare     export interface interfaces$HandlerDecorator {
        (target: any, key: string, value: any): void
    }
    declare     export interface Controller {}
    declare interface ServiceIdentifiers {
        Controller: Symbol
    }
    declare     export var InversifyRestifyServer: interfaces$InversifyRestifyServerConstructor;
    declare     export var Controller: (path: string, ...middleware: restify.RequestHandler[]) => (target: any) => void;
    declare     export var Options: interfaces$HandlerDecoratorFactory;
    declare     export var Get: interfaces$HandlerDecoratorFactory;
    declare     export var Post: interfaces$HandlerDecoratorFactory;
    declare     export var Put: interfaces$HandlerDecoratorFactory;
    declare     export var Patch: interfaces$HandlerDecoratorFactory;
    declare     export var Head: interfaces$HandlerDecoratorFactory;
    declare     export var Delete: interfaces$HandlerDecoratorFactory;
    declare     export var Method: (
        method: string,
        path: string,
        ...middleware: restify.RequestHandler[]) => interfaces$HandlerDecorator;
    declare     export var TYPE: ServiceIdentifiers;
}