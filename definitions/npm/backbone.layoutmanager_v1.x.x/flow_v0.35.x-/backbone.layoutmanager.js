/**
 * Flowtype definitions for backbone.layoutmanager
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type Backbone$LayoutOptions<TModel>= {
    template?: string,
    views?: {
        [viewName: string]: View<TModel >
    }
} & ViewOptions


declare interface Backbone$LayoutManagerOptions {
    manage?: boolean,
        el?: boolean
}

declare class Layout<TModel>mixins View<TModel>{
    template: string;
    constructor(options?: Backbone$LayoutOptions<TModel>): this;
    beforeRender(): void;
    afterRender(): void;
    cleanup(): void;
    fetchTemplate(path: string): (context: any) => string;
    async(): (compiled: (context: any) => void) => void;
    promise(): JQueryPromise<any>;
    getAllOptions(): Backbone$LayoutOptions<TModel>;
    getView(fn?: any): any;
    getViews(fn?: any): any[];
    insertView(selector: any, view?: any): any;
    insertViews(views: any): Backbone$Layout<TModel>;
    remove(): Backbone$Layout<TModel>;
    removeView(fn: any): Backbone$Layout<TModel>;
    render(): Backbone$Layout<TModel>;
    renderViews(): Backbone$Layout<TModel>;
    setView<U>(name: any, view: U, insert?: boolean): U;
    setViews(views: any): Backbone$Layout<TModel>;
    then(fn: () => void): void;
    cache(path: string, contents?: any): any;
    cleanViews(views: any): void;
    configure(options: Backbone$LayoutManagerOptions): void;
    setupView(views: any, options?: Backbone$LayoutOptions<Model>): void
}