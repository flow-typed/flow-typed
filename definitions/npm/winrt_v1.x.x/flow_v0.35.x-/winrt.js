/**
 * Flowtype definitions for winrt
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'UI' {
    declare export interface ICredentialPickerOptions {
        alwaysDisplayDialog: boolean,
            authenticationProtocol: undefined.AuthenticationProtocol,
            callerSavesCredential: boolean,
            caption: string,
            credentialSaveOption: undefined.CredentialSaveOption,
            customAuthenticationProtocol: string,
            errorCode: number,
            message: string,
            previousCredential: undefined.IBuffer,
            targetName: string
    }
    declare export class CredentialPickerOptions mixins undefined.ICredentialPickerOptions {
        alwaysDisplayDialog: boolean;
        authenticationProtocol: undefined.AuthenticationProtocol;
        callerSavesCredential: boolean;
        caption: string;
        credentialSaveOption: undefined.CredentialSaveOption;
        customAuthenticationProtocol: string;
        errorCode: number;
        message: string;
        previousCredential: undefined.IBuffer;
        targetName: string
    }
    declare export interface ICredentialPickerStatics {
        pickAsync(
                options: undefined.CredentialPickerOptions): undefined.IAsyncOperation<undefined.CredentialPickerResults>,
            pickAsync(
                targetName: string,
                message: string): undefined.IAsyncOperation<undefined.CredentialPickerResults>,
            pickAsync(
                targetName: string,
                message: string,
                caption: string): undefined.IAsyncOperation<undefined.CredentialPickerResults >
    }
    declare export class CredentialPickerResults mixins undefined.ICredentialPickerResults {
        credential: undefined.IBuffer;
        credentialDomainName: string;
        credentialPassword: string;
        credentialSaveOption: undefined.CredentialSaveOption;
        credentialSaved: boolean;
        credentialUserName: string;
        errorCode: number
    }
    declare export class CredentialPicker {
        pickAsync(
            options: undefined.CredentialPickerOptions): undefined.IAsyncOperation<undefined.CredentialPickerResults>;
        pickAsync(
            targetName: string,
            message: string): undefined.IAsyncOperation<undefined.CredentialPickerResults>;
        pickAsync(
            targetName: string,
            message: string,
            caption: string): undefined.IAsyncOperation<undefined.CredentialPickerResults >
    }
    declare export interface ICredentialPickerResults {
        credential: undefined.IBuffer,
            credentialDomainName: string,
            credentialPassword: string,
            credentialSaveOption: undefined.CredentialSaveOption,
            credentialSaved: boolean,
            credentialUserName: string,
            errorCode: number
    }
    declare module 'ApplicationSettings' {
        declare     export interface ISettingsCommandFactory {
            create(
                settingsCommandId: any,
                label: string,
                handler: undefined.UICommandInvokedHandler): undefined.SettingsCommand
        }
        declare     export class SettingsCommand mixins undefined.IUICommand {
            constructor(settingsCommandId: any, label: string, handler: undefined.UICommandInvokedHandler): this;
            id: any;
            invoked: undefined.UICommandInvokedHandler;
            label: string
        }
        declare     export interface ISettingsPaneCommandsRequest {
            applicationCommands: undefined.IVector<undefined.SettingsCommand >
        }
        declare     export class SettingsPaneCommandsRequest mixins undefined.ISettingsPaneCommandsRequest {
            applicationCommands: undefined.IVector<undefined.SettingsCommand >
        }
        declare     export interface ISettingsPaneCommandsRequestedEventArgs {
            request: undefined.SettingsPaneCommandsRequest
        }
        declare     export class SettingsPaneCommandsRequestedEventArgs mixins undefined.ISettingsPaneCommandsRequestedEventArgs {
            request: undefined.SettingsPaneCommandsRequest
        }
        declare     export interface ISettingsPaneStatics {
            edge: undefined.SettingsEdgeLocation,
                getForCurrentView(): undefined.SettingsPane,
                show(): void
        }
        declare     export class SettingsPane mixins undefined.ISettingsPane {
            oncommandsrequested: any;
            edge: undefined.SettingsEdgeLocation;
            getForCurrentView(): undefined.SettingsPane;
            show(): void
        }
        declare     export interface ISettingsPane {
            oncommandsrequested: any
        }
    }

    declare module 'ViewManagement' {

        /**
         * Defines an instance of a window (app view) and the information that describes it.
         */
        declare     export class ApplicationView {

            /**
             * Gets the window (app view) for the current app.
             */
            getForCurrentView(): ApplicationView;

            /**
             * Attempts to unsnap a previously snapped app. This call will only succeed when the app is running in the foreground.
             */
            tryUnsnap(): boolean;

            /**
             * Gets the state of the current app view.
             */
            value: undefined.ApplicationViewState;

            /**
             * Indicates whether the app terminates when the last window is closed.
             */
            terminateAppOnFinalViewClose: boolean;

            /**
             * Gets the current orientation of the window (app view) with respect to the display.
             */
            orientation: ApplicationViewOrientation;

            /**
             * Gets or sets the displayed title of the window.
             */
            title: string;

            /**
             * Gets or sets whether screen capture is enabled for the window (app view).
             */
            isScreenCaptureEnabled: boolean;

            /**
             * Gets whether the window (app view) is on the Windows lock screen.
             */
            isOnLockScreen: boolean;

            /**
             * Gets whether the window(app view) is full screen or not.
             */
            isFullScreen: boolean;

            /**
             * Gets the current ID of the window (app view) .
             */
            id: number;

            /**
             * Gets whether the current window (app view) is adjacent to the right edge of the screen.
             */
            adjacentToRightDisplayEdge: boolean;

            /**
             * Gets whether the current window (app view) is adjacent to the left edge of the screen.
             */
            adjacentToLeftDisplayEdge: number;

            /**
             * Gets the title bar of the app.
             */
            titleBar: ApplicationViewTitleBar
        }
        declare     export interface IInputPaneVisibilityEventArgs {
            ensuredFocusedElementInView: boolean,
                occludedRect: undefined.Rect
        }
        declare     export class InputPaneVisibilityEventArgs mixins undefined.IInputPaneVisibilityEventArgs {
            ensuredFocusedElementInView: boolean;
            occludedRect: undefined.Rect
        }
        declare     export interface IInputPane {
            occludedRect: undefined.Rect,
                onshowing: any,
                onhiding: any
        }
        declare     export class InputPane mixins undefined.IInputPane {
            occludedRect: undefined.Rect;
            onshowing: any;
            onhiding: any;
            getForCurrentView(): undefined.InputPane
        }
        declare     export interface IInputPaneStatics {
            getForCurrentView(): undefined.InputPane
        }
        declare     export interface IAccessibilitySettings {
            highContrast: boolean,
                highContrastScheme: string,
                onhighcontrastchanged: any
        }
        declare     export class AccessibilitySettings mixins undefined.IAccessibilitySettings {
            highContrast: boolean;
            highContrastScheme: string;
            onhighcontrastchanged: any
        }
        declare     export interface IUISettings {
            animationsEnabled: boolean,
                caretBlinkRate: number,
                caretBrowsingEnabled: boolean,
                caretWidth: number,
                cursorSize: undefined.Size,
                doubleClickTime: number,
                handPreference: undefined.HandPreference,
                messageDuration: number,
                mouseHoverTime: number,
                scrollBarArrowSize: undefined.Size,
                scrollBarSize: undefined.Size,
                scrollBarThumbBoxSize: undefined.Size,
                uIElementColor(desiredElement: undefined.UIElementType): undefined.Color
        }
        declare     export class UISettings mixins undefined.IUISettings {
            animationsEnabled: boolean;
            caretBlinkRate: number;
            caretBrowsingEnabled: boolean;
            caretWidth: number;
            cursorSize: undefined.Size;
            doubleClickTime: number;
            handPreference: undefined.HandPreference;
            messageDuration: number;
            mouseHoverTime: number;
            scrollBarArrowSize: undefined.Size;
            scrollBarSize: undefined.Size;
            scrollBarThumbBoxSize: undefined.Size;
            uIElementColor(desiredElement: undefined.UIElementType): undefined.Color
        }
        declare     export class ApplicationViewTitleBar {

            /**
             * Gets or sets the color of the title bar background.
             */
            backgroundColor: Color;

            /**
             * Gets or sets the background color of the title bar buttons.
             */
            buttonBackgroundColor: Color;

            /**
             * Gets or sets the foreground color of the title bar buttons.
             */
            buttonForegroundColor: Color;

            /**
             * Gets or sets the background color of a title bar button when the pointer is over it.
             */
            buttonHoverBackgroundColor: Color;

            /**
             * Gets or sets the foreground color of a title bar button when the pointer is over it.
             */
            buttonHoverForegroundColor: Color;

            /**
             * Gets or sets the background color of a title bar button when it's inactive.
             */
            buttonInactiveBackgroundColor: Color;

            /**
             * Gets or sets the foreground color of a title bar button when it's inactive.
             */
            buttonInactiveForegroundColor: Color;

            /**
             * Gets or sets the background color of a title bar button when it's pressed.
             */
            buttonPressedBackgroundColor: Color;

            /**
             * Gets or sets the foreground color of a title bar button when it's pressed.
             */
            buttonPressedForegroundColor: Color;

            /**
             * Gets or sets the color of the title bar foreground.
             */
            foregroundColor: Color;

            /**
             * Gets or sets the color of the title bar background when it's inactive.
             */
            inactiveBackgroundColor: Color;

            /**
             * Gets or sets the color of the title bar foreground when it's inactive.
             */
            inactiveForegroundColor: Color
        }
    }

    declare module 'Input' {
        declare     export interface PointerDeviceUsage {
            usagePage: number,
                usage: number,
                minLogical: number,
                maxLogical: number,
                minPhysical: number,
                maxPhysical: number,
                unit: number,
                physicalMultiplier: number
        }
        declare     export interface MouseDelta {
            x: number,
                y: number
        }
        declare     export interface IMouseCapabilities {
            horizontalWheelPresent: number,
                mousePresent: number,
                numberOfButtons: number,
                swapButtons: number,
                verticalWheelPresent: number
        }
        declare     export interface IKeyboardCapabilities {
            keyboardPresent: number
        }
        declare     export interface ITouchCapabilities {
            contacts: number,
                touchPresent: number
        }
        declare     export interface IPointerDeviceStatics {
            getPointerDevice(pointerId: number): undefined.PointerDevice,
                getPointerDevices(): undefined.IVectorView<undefined.PointerDevice >
        }
        declare     export class PointerDevice mixins undefined.IPointerDevice {
            isIntegrated: boolean;
            maxContacts: number;
            physicalDeviceRect: undefined.Rect;
            pointerDeviceType: undefined.PointerDeviceType;
            screenRect: undefined.Rect;
            supportedUsages: undefined.IVectorView<undefined.PointerDeviceUsage>;
            getPointerDevice(pointerId: number): undefined.PointerDevice;
            getPointerDevices(): undefined.IVectorView<undefined.PointerDevice >
        }
        declare     export interface IPointerDevice {
            isIntegrated: boolean,
                maxContacts: number,
                physicalDeviceRect: undefined.Rect,
                pointerDeviceType: undefined.PointerDeviceType,
                screenRect: undefined.Rect,
                supportedUsages: undefined.IVectorView<undefined.PointerDeviceUsage >
        }
        declare     export interface IMouseEventArgs {
            mouseDelta: undefined.MouseDelta
        }
        declare     export interface IMouseDevice {
            onmousemoved: any
        }
        declare     export class MouseDevice mixins undefined.IMouseDevice {
            onmousemoved: any;
            getForCurrentView(): undefined.MouseDevice
        }
        declare     export class MouseEventArgs mixins undefined.IMouseEventArgs {
            mouseDelta: undefined.MouseDelta
        }
        declare     export interface IMouseDeviceStatics {
            getForCurrentView(): undefined.MouseDevice
        }
        declare     export class MouseCapabilities mixins undefined.IMouseCapabilities {
            horizontalWheelPresent: number;
            mousePresent: number;
            numberOfButtons: number;
            swapButtons: number;
            verticalWheelPresent: number
        }
        declare     export class KeyboardCapabilities mixins undefined.IKeyboardCapabilities {
            keyboardPresent: number
        }
        declare     export class TouchCapabilities mixins undefined.ITouchCapabilities {
            contacts: number;
            touchPresent: number
        }
        declare     export interface IEdgeGestureEventArgs {
            kind: undefined.EdgeGestureKind
        }
        declare     export class EdgeGestureEventArgs mixins undefined.IEdgeGestureEventArgs {
            kind: undefined.EdgeGestureKind
        }
        declare     export interface IEdgeGestureStatics {
            getForCurrentView(): undefined.EdgeGesture
        }
        declare     export class EdgeGesture mixins undefined.IEdgeGesture {
            onstarting: any;
            oncompleted: any;
            oncanceled: any;
            getForCurrentView(): undefined.EdgeGesture
        }
        declare     export interface IEdgeGesture {
            onstarting: any,
                oncompleted: any,
                oncanceled: any
        }
        declare     export interface ManipulationDelta {
            translation: undefined.Point,
                scale: number,
                rotation: number,
                expansion: number
        }
        declare     export interface ManipulationVelocities {
            linear: undefined.Point,
                angular: number,
                expansion: number
        }
        declare     export interface CrossSlideThresholds {
            selectionStart: number,
                speedBumpStart: number,
                speedBumpEnd: number,
                rearrangeStart: number
        }
        declare     export interface ITappedEventArgs {
            pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point,
                tapCount: number
        }
        declare     export interface IRightTappedEventArgs {
            pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point
        }
        declare     export interface IHoldingEventArgs {
            holdingState: undefined.HoldingState,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point
        }
        declare     export interface IDraggingEventArgs {
            draggingState: undefined.DraggingState,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point
        }
        declare     export interface IManipulationStartedEventArgs {
            cumulative: undefined.ManipulationDelta,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point
        }
        declare     export interface IManipulationUpdatedEventArgs {
            cumulative: undefined.ManipulationDelta,
                delta: undefined.ManipulationDelta,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point,
                velocities: undefined.ManipulationVelocities
        }
        declare     export interface IManipulationInertiaStartingEventArgs {
            cumulative: undefined.ManipulationDelta,
                delta: undefined.ManipulationDelta,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point,
                velocities: undefined.ManipulationVelocities
        }
        declare     export interface IManipulationCompletedEventArgs {
            cumulative: undefined.ManipulationDelta,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point,
                velocities: undefined.ManipulationVelocities
        }
        declare     export interface ICrossSlidingEventArgs {
            crossSlidingState: undefined.CrossSlidingState,
                pointerDeviceType: undefined.PointerDeviceType,
                position: undefined.Point
        }
        declare     export interface IMouseWheelParameters {
            charTranslation: undefined.Point,
                deltaRotationAngle: number,
                deltaScale: number,
                pageTranslation: undefined.Point
        }
        declare     export interface IGestureRecognizer {
            autoProcessInertia: boolean,
                crossSlideExact: boolean,
                crossSlideHorizontally: boolean,
                crossSlideThresholds: undefined.CrossSlideThresholds,
                gestureSettings: undefined.GestureSettings,
                inertiaExpansion: number,
                inertiaExpansionDeceleration: number,
                inertiaRotationAngle: number,
                inertiaRotationDeceleration: number,
                inertiaTranslationDeceleration: number,
                inertiaTranslationDisplacement: number,
                isActive: boolean,
                isInertial: boolean,
                manipulationExact: boolean,
                mouseWheelParameters: undefined.MouseWheelParameters,
                pivotCenter: undefined.Point,
                pivotRadius: number,
                showGestureFeedback: boolean,
                canBeDoubleTap(value: undefined.PointerPoint): boolean,
                processDownEvent(value: undefined.PointerPoint): void,
                processMoveEvents(value: undefined.IVector<undefined.PointerPoint>): void,
                processUpEvent(value: undefined.PointerPoint): void,
                processMouseWheelEvent(
                    value: undefined.PointerPoint,
                    isShiftKeyDown: boolean,
                    isControlKeyDown: boolean): void,
                processInertia(): void,
                completeGesture(): void,
                ontapped: any,
                onrighttapped: any,
                onholding: any,
                ondragging: any,
                onmanipulationstarted: any,
                onmanipulationupdated: any,
                onmanipulationinertiastarting: any,
                onmanipulationcompleted: any,
                oncrosssliding: any
        }
        declare     export class MouseWheelParameters mixins undefined.IMouseWheelParameters {
            charTranslation: undefined.Point;
            deltaRotationAngle: number;
            deltaScale: number;
            pageTranslation: undefined.Point
        }
        declare     export class GestureRecognizer mixins undefined.IGestureRecognizer {
            autoProcessInertia: boolean;
            crossSlideExact: boolean;
            crossSlideHorizontally: boolean;
            crossSlideThresholds: undefined.CrossSlideThresholds;
            gestureSettings: undefined.GestureSettings;
            inertiaExpansion: number;
            inertiaExpansionDeceleration: number;
            inertiaRotationAngle: number;
            inertiaRotationDeceleration: number;
            inertiaTranslationDeceleration: number;
            inertiaTranslationDisplacement: number;
            isActive: boolean;
            isInertial: boolean;
            manipulationExact: boolean;
            mouseWheelParameters: undefined.MouseWheelParameters;
            pivotCenter: undefined.Point;
            pivotRadius: number;
            showGestureFeedback: boolean;
            canBeDoubleTap(value: undefined.PointerPoint): boolean;
            processDownEvent(value: undefined.PointerPoint): void;
            processMoveEvents(value: undefined.IVector<undefined.PointerPoint>): void;
            processUpEvent(value: undefined.PointerPoint): void;
            processMouseWheelEvent(
                value: undefined.PointerPoint,
                isShiftKeyDown: boolean,
                isControlKeyDown: boolean): void;
            processInertia(): void;
            completeGesture(): void;
            ontapped: any;
            onrighttapped: any;
            onholding: any;
            ondragging: any;
            onmanipulationstarted: any;
            onmanipulationupdated: any;
            onmanipulationinertiastarting: any;
            onmanipulationcompleted: any;
            oncrosssliding: any
        }
        declare     export class TappedEventArgs mixins undefined.ITappedEventArgs {
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point;
            tapCount: number
        }
        declare     export class RightTappedEventArgs mixins undefined.IRightTappedEventArgs {
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point
        }
        declare     export class HoldingEventArgs mixins undefined.IHoldingEventArgs {
            holdingState: undefined.HoldingState;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point
        }
        declare     export class DraggingEventArgs mixins undefined.IDraggingEventArgs {
            draggingState: undefined.DraggingState;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point
        }
        declare     export class ManipulationStartedEventArgs mixins undefined.IManipulationStartedEventArgs {
            cumulative: undefined.ManipulationDelta;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point
        }
        declare     export class ManipulationUpdatedEventArgs mixins undefined.IManipulationUpdatedEventArgs {
            cumulative: undefined.ManipulationDelta;
            delta: undefined.ManipulationDelta;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point;
            velocities: undefined.ManipulationVelocities
        }
        declare     export class ManipulationInertiaStartingEventArgs mixins undefined.IManipulationInertiaStartingEventArgs {
            cumulative: undefined.ManipulationDelta;
            delta: undefined.ManipulationDelta;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point;
            velocities: undefined.ManipulationVelocities
        }
        declare     export class ManipulationCompletedEventArgs mixins undefined.IManipulationCompletedEventArgs {
            cumulative: undefined.ManipulationDelta;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point;
            velocities: undefined.ManipulationVelocities
        }
        declare     export class CrossSlidingEventArgs mixins undefined.ICrossSlidingEventArgs {
            crossSlidingState: undefined.CrossSlidingState;
            pointerDeviceType: undefined.PointerDeviceType;
            position: undefined.Point
        }
        declare     export interface IPointerPointStatics {
            getCurrentPoint(pointerId: number): undefined.PointerPoint,
                getIntermediatePoints(pointerId: number): undefined.IVector<undefined.PointerPoint>,
                getCurrentPoint(
                    pointerId: number,
                    transform: undefined.IPointerPointTransform): undefined.PointerPoint,
                getIntermediatePoints(
                    pointerId: number,
                    transform: undefined.IPointerPointTransform): undefined.IVector<undefined.PointerPoint >
        }
        declare     export class PointerPoint mixins undefined.IPointerPoint {
            frameId: number;
            isInContact: boolean;
            pointerDevice: undefined.PointerDevice;
            pointerId: number;
            position: undefined.Point;
            properties: undefined.PointerPointProperties;
            rawPosition: undefined.Point;
            timestamp: number;
            getCurrentPoint(pointerId: number): undefined.PointerPoint;
            getIntermediatePoints(pointerId: number): undefined.IVector<undefined.PointerPoint>;
            getCurrentPoint(
                pointerId: number,
                transform: undefined.IPointerPointTransform): undefined.PointerPoint;
            getIntermediatePoints(
                pointerId: number,
                transform: undefined.IPointerPointTransform): undefined.IVector<undefined.PointerPoint >
        }
        declare     export interface IPointerPointTransform {
            inverse: undefined.IPointerPointTransform,
                tryTransform(inPoint: undefined.Point): {
                    outPoint: undefined.Point,
                    returnValue: boolean
                },
                transformBounds(rect: undefined.Rect): undefined.Rect
        }
        declare     export interface IPointerPoint {
            frameId: number,
                isInContact: boolean,
                pointerDevice: undefined.PointerDevice,
                pointerId: number,
                position: undefined.Point,
                properties: undefined.PointerPointProperties,
                rawPosition: undefined.Point,
                timestamp: number
        }
        declare     export class PointerPointProperties mixins undefined.IPointerPointProperties {
            contactRect: undefined.Rect;
            contactRectRaw: undefined.Rect;
            isBarrelButtonPressed: boolean;
            isCanceled: boolean;
            isEraser: boolean;
            isHorizontalMouseWheel: boolean;
            isInRange: boolean;
            isInverted: boolean;
            isLeftButtonPressed: boolean;
            isMiddleButtonPressed: boolean;
            isPrimary: boolean;
            isRightButtonPressed: boolean;
            isXButton1Pressed: boolean;
            isXButton2Pressed: boolean;
            mouseWheelDelta: number;
            orientation: number;
            pointerUpdateKind: undefined.PointerUpdateKind;
            pressure: number;
            touchConfidence: boolean;
            twist: number;
            xTilt: number;
            yTilt: number;
            hasUsage(usagePage: number, usageId: number): boolean;
            getUsageValue(usagePage: number, usageId: number): number
        }
        declare     export interface IPointerPointProperties {
            contactRect: undefined.Rect,
                contactRectRaw: undefined.Rect,
                isBarrelButtonPressed: boolean,
                isCanceled: boolean,
                isEraser: boolean,
                isHorizontalMouseWheel: boolean,
                isInRange: boolean,
                isInverted: boolean,
                isLeftButtonPressed: boolean,
                isMiddleButtonPressed: boolean,
                isPrimary: boolean,
                isRightButtonPressed: boolean,
                isXButton1Pressed: boolean,
                isXButton2Pressed: boolean,
                mouseWheelDelta: number,
                orientation: number,
                pointerUpdateKind: undefined.PointerUpdateKind,
                pressure: number,
                touchConfidence: boolean,
                twist: number,
                xTilt: number,
                yTilt: number,
                hasUsage(usagePage: number, usageId: number): boolean,
                getUsageValue(usagePage: number, usageId: number): number
        }
        declare     export interface IPointerVisualizationSettings {
            isBarrelButtonFeedbackEnabled: boolean,
                isContactFeedbackEnabled: boolean
        }
        declare     export interface IPointerVisualizationSettingsStatics {
            getForCurrentView(): undefined.PointerVisualizationSettings
        }
        declare     export class PointerVisualizationSettings mixins undefined.IPointerVisualizationSettings {
            isBarrelButtonFeedbackEnabled: boolean;
            isContactFeedbackEnabled: boolean;
            getForCurrentView(): undefined.PointerVisualizationSettings
        }
        declare module 'Inking' {
            declare         export interface IInkDrawingAttributes {
                color: undefined.Color,
                    fitToCurve: boolean,
                    ignorePressure: boolean,
                    penTip: undefined.PenTipShape,
                    size: undefined.Size
            }
            declare         export class InkDrawingAttributes mixins undefined.IInkDrawingAttributes {
                color: undefined.Color;
                fitToCurve: boolean;
                ignorePressure: boolean;
                penTip: undefined.PenTipShape;
                size: undefined.Size
            }
            declare         export interface IInkStrokeRenderingSegment {
                bezierControlPoint1: undefined.Point,
                    bezierControlPoint2: undefined.Point,
                    position: undefined.Point,
                    pressure: number,
                    tiltX: number,
                    tiltY: number,
                    twist: number
            }
            declare         export class InkStrokeRenderingSegment mixins undefined.IInkStrokeRenderingSegment {
                bezierControlPoint1: undefined.Point;
                bezierControlPoint2: undefined.Point;
                position: undefined.Point;
                pressure: number;
                tiltX: number;
                tiltY: number;
                twist: number
            }
            declare         export interface IInkStroke {
                boundingRect: undefined.Rect,
                    drawingAttributes: undefined.InkDrawingAttributes,
                    recognized: boolean,
                    selected: boolean,
                    getRenderingSegments(): undefined.IVectorView<undefined.InkStrokeRenderingSegment>,
                    clone(): undefined.InkStroke
            }
            declare         export class InkStroke mixins undefined.IInkStroke {
                boundingRect: undefined.Rect;
                drawingAttributes: undefined.InkDrawingAttributes;
                recognized: boolean;
                selected: boolean;
                getRenderingSegments(): undefined.IVectorView<undefined.InkStrokeRenderingSegment>;
                clone(): undefined.InkStroke
            }
            declare         export interface IInkStrokeBuilder {
                beginStroke(pointerPoint: undefined.PointerPoint): void,
                    appendToStroke(pointerPoint: undefined.PointerPoint): undefined.PointerPoint,
                    endStroke(pointerPoint: undefined.PointerPoint): undefined.InkStroke,
                    createStroke(points: undefined.IIterable<undefined.Point>): undefined.InkStroke,
                    setDefaultDrawingAttributes(drawingAttributes: undefined.InkDrawingAttributes): void
            }
            declare         export class InkStrokeBuilder mixins undefined.IInkStrokeBuilder {
                beginStroke(pointerPoint: undefined.PointerPoint): void;
                appendToStroke(pointerPoint: undefined.PointerPoint): undefined.PointerPoint;
                endStroke(pointerPoint: undefined.PointerPoint): undefined.InkStroke;
                createStroke(points: undefined.IIterable<undefined.Point>): undefined.InkStroke;
                setDefaultDrawingAttributes(drawingAttributes: undefined.InkDrawingAttributes): void
            }
            declare         export interface IInkRecognitionResult {
                boundingRect: undefined.Rect,
                    getTextCandidates(): undefined.IVectorView<string>,
                    getStrokes(): undefined.IVectorView<undefined.InkStroke >
            }
            declare         export class InkRecognitionResult mixins undefined.IInkRecognitionResult {
                boundingRect: undefined.Rect;
                getTextCandidates(): undefined.IVectorView<string>;
                getStrokes(): undefined.IVectorView<undefined.InkStroke >
            }
            declare         export interface IInkStrokeContainer {
                boundingRect: undefined.Rect,
                    addStroke(stroke: undefined.InkStroke): void,
                    deleteSelected(): undefined.Rect,
                    moveSelected(translation: undefined.Point): undefined.Rect,
                    selectWithPolyLine(polyline: undefined.IIterable<undefined.Point>): undefined.Rect,
                    selectWithLine(from: undefined.Point, to: undefined.Point): undefined.Rect,
                    copySelectedToClipboard(): void,
                    pasteFromClipboard(position: undefined.Point): undefined.Rect,
                    canPasteFromClipboard(): boolean,
                    loadAsync(
                        inputStream: undefined.IInputStream): undefined.IAsyncActionWithProgress<number>,
                    saveAsync(
                        outputStream: undefined.IOutputStream): undefined.IAsyncOperationWithProgress<number, number>,
                    updateRecognitionResults(
                        recognitionResults: undefined.IVectorView<undefined.InkRecognitionResult>): void,
                    getStrokes(): undefined.IVectorView<undefined.InkStroke>,
                    getRecognitionResults(): undefined.IVectorView<undefined.InkRecognitionResult >
            }
            declare         export class InkStrokeContainer mixins undefined.IInkStrokeContainer {
                boundingRect: undefined.Rect;
                addStroke(stroke: undefined.InkStroke): void;
                deleteSelected(): undefined.Rect;
                moveSelected(translation: undefined.Point): undefined.Rect;
                selectWithPolyLine(polyline: undefined.IIterable<undefined.Point>): undefined.Rect;
                selectWithLine(from: undefined.Point, to: undefined.Point): undefined.Rect;
                copySelectedToClipboard(): void;
                pasteFromClipboard(position: undefined.Point): undefined.Rect;
                canPasteFromClipboard(): boolean;
                loadAsync(
                    inputStream: undefined.IInputStream): undefined.IAsyncActionWithProgress<number>;
                saveAsync(
                    outputStream: undefined.IOutputStream): undefined.IAsyncOperationWithProgress<number,
                number>;
                updateRecognitionResults(
                    recognitionResults: undefined.IVectorView<undefined.InkRecognitionResult>): void;
                getStrokes(): undefined.IVectorView<undefined.InkStroke>;
                getRecognitionResults(): undefined.IVectorView<undefined.InkRecognitionResult >
            }
            declare         export interface IInkRecognizer {
                name: string
            }
            declare         export class InkRecognizer mixins undefined.IInkRecognizer {
                name: string
            }
            declare         export interface IInkRecognizerContainer {
                setDefaultRecognizer(recognizer: undefined.InkRecognizer): void,
                    recognizeAsync(
                        strokeCollection: undefined.InkStrokeContainer,
                        recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >> ,
                    getRecognizers(): undefined.IVectorView<undefined.InkRecognizer >
            }
            declare         export class InkRecognizerContainer mixins undefined.IInkRecognizerContainer {
                setDefaultRecognizer(recognizer: undefined.InkRecognizer): void;
                recognizeAsync(
                    strokeCollection: undefined.InkStrokeContainer,
                    recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >> ;
                getRecognizers(): undefined.IVectorView<undefined.InkRecognizer >
            }
            declare         export type IInkManager = {
                    mode: undefined.InkManipulationMode,
                    processPointerDown(pointerPoint: undefined.PointerPoint): void,
                    processPointerUpdate(pointerPoint: undefined.PointerPoint): any,
                    processPointerUp(pointerPoint: undefined.PointerPoint): undefined.Rect,
                    setDefaultDrawingAttributes(drawingAttributes: undefined.InkDrawingAttributes): void,
                    recognizeAsync(
                        strokeCollection: undefined.InkStrokeContainer,
                        recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >> ,
                    recognizeAsync(
                        recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >>
                } & &

                declare         export class InkManager mixins undefined.IInkManager, undefined.IInkStrokeContainer, undefined.IInkRecognizerContainer {
                mode: undefined.InkManipulationMode;
                boundingRect: undefined.Rect;
                processPointerDown(pointerPoint: undefined.PointerPoint): void;
                processPointerUpdate(pointerPoint: undefined.PointerPoint): any;
                processPointerUp(pointerPoint: undefined.PointerPoint): undefined.Rect;
                setDefaultDrawingAttributes(drawingAttributes: undefined.InkDrawingAttributes): void;
                recognizeAsync(
                    recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >> ;
                addStroke(stroke: undefined.InkStroke): void;
                deleteSelected(): undefined.Rect;
                moveSelected(translation: undefined.Point): undefined.Rect;
                selectWithPolyLine(polyline: undefined.IIterable<undefined.Point>): undefined.Rect;
                selectWithLine(from: undefined.Point, to: undefined.Point): undefined.Rect;
                copySelectedToClipboard(): void;
                pasteFromClipboard(position: undefined.Point): undefined.Rect;
                canPasteFromClipboard(): boolean;
                loadAsync(
                    inputStream: undefined.IInputStream): undefined.IAsyncActionWithProgress<number>;
                saveAsync(
                    outputStream: undefined.IOutputStream): undefined.IAsyncOperationWithProgress<number,
                number>;
                updateRecognitionResults(
                    recognitionResults: undefined.IVectorView<undefined.InkRecognitionResult>): void;
                getStrokes(): undefined.IVectorView<undefined.InkStroke>;
                getRecognitionResults(): undefined.IVectorView<undefined.InkRecognitionResult>;
                setDefaultRecognizer(recognizer: undefined.InkRecognizer): void;
                recognizeAsync(
                    strokeCollection: undefined.InkStrokeContainer,
                    recognitionTarget: undefined.InkRecognitionTarget): undefined.IAsyncOperation<undefined.IVectorView<undefined.InkRecognitionResult >> ;
                getRecognizers(): undefined.IVectorView<undefined.InkRecognizer >
            }
        }

    }

    declare module 'Popups' {
        declare     export interface IMessageDialog {
            cancelCommandIndex: number,
                commands: undefined.IVector<undefined.IUICommand>,
                content: string,
                defaultCommandIndex: number,
                options: undefined.MessageDialogOptions,
                title: string,
                showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export interface IMessageDialogFactory {
            create(content: string): undefined.MessageDialog,
                createWithTitle(content: string, title: string): undefined.MessageDialog
        }
        declare     export class MessageDialog mixins undefined.IMessageDialog {
            constructor(content: string): this;
            constructor(content: string, title: string): this;
            cancelCommandIndex: number;
            commands: undefined.IVector<undefined.IUICommand>;
            content: string;
            defaultCommandIndex: number;
            options: undefined.MessageDialogOptions;
            title: string;
            showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export interface UICommandInvokedHandler {
            (command: undefined.IUICommand): void
        }
        declare     export interface IUICommand {
            id: any,
                invoked: undefined.UICommandInvokedHandler,
                label: string
        }
        declare     export interface IUICommandFactory {
            create(label: string): undefined.UICommand,
                createWithHandler(label: string, action: undefined.UICommandInvokedHandler): undefined.UICommand,
                createWithHandlerAndId(
                    label: string,
                    action: undefined.UICommandInvokedHandler,
                    commandId: any): undefined.UICommand
        }
        declare     export class UICommand mixins undefined.IUICommand {
            constructor(label: string): this;
            constructor(label: string, action: undefined.UICommandInvokedHandler): this;
            constructor(label: string, action: undefined.UICommandInvokedHandler, commandId: any): this;
            constructor(): this;
            id: any;
            invoked: undefined.UICommandInvokedHandler;
            label: string
        }
        declare     export class UICommandSeparator mixins undefined.IUICommand {
            id: any;
            invoked: undefined.UICommandInvokedHandler;
            label: string
        }
        declare     export interface IPopupMenu {
            commands: undefined.IVector<undefined.IUICommand>,
                showAsync(
                    invocationPoint: undefined.Point): undefined.IAsyncOperation<undefined.IUICommand>,
                showForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<undefined.IUICommand>,
                showForSelectionAsync(
                    selection: undefined.Rect,
                    preferredPlacement: undefined.Placement): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export class PopupMenu mixins undefined.IPopupMenu {
            commands: undefined.IVector<undefined.IUICommand>;
            showAsync(
                invocationPoint: undefined.Point): undefined.IAsyncOperation<undefined.IUICommand>;
            showForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<undefined.IUICommand>;
            showForSelectionAsync(
                selection: undefined.Rect,
                preferredPlacement: undefined.Placement): undefined.IAsyncOperation<undefined.IUICommand >
        }
    }

    declare module 'StartScreen' {
        declare     export interface ISecondaryTile {
            arguments: string,
                backgroundColor: undefined.Color,
                displayName: string,
                foregroundText: undefined.ForegroundText,
                lockScreenBadgeLogo: undefined.Uri,
                lockScreenDisplayBadgeAndTileText: boolean,
                logo: undefined.Uri,
                shortName: string,
                smallLogo: undefined.Uri,
                tileId: string,
                tileOptions: undefined.TileOptions,
                wideLogo: undefined.Uri,
                requestCreateAsync(): undefined.IAsyncOperation<boolean>,
                requestCreateAsync(invocationPoint: undefined.Point): undefined.IAsyncOperation<boolean>,
                requestCreateForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<boolean>,
                requestCreateForSelectionAsync(
                    selection: undefined.Rect,
                    preferredPlacement: undefined.Placement): undefined.IAsyncOperation<boolean>,
                requestDeleteAsync(): undefined.IAsyncOperation<boolean>,
                requestDeleteAsync(invocationPoint: undefined.Point): undefined.IAsyncOperation<boolean>,
                requestDeleteForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<boolean>,
                requestDeleteForSelectionAsync(
                    selection: undefined.Rect,
                    preferredPlacement: undefined.Placement): undefined.IAsyncOperation<boolean>,
                updateAsync(): undefined.IAsyncOperation<boolean >
        }
        declare     export interface ISecondaryTileFactory {
            createTile(
                    tileId: string,
                    shortName: string,
                    displayName: string,
                    arguments: string,
                    tileOptions: undefined.TileOptions,
                    logoReference: undefined.Uri): undefined.SecondaryTile,
                createWideTile(
                    tileId: string,
                    shortName: string,
                    displayName: string,
                    arguments: string,
                    tileOptions: undefined.TileOptions,
                    logoReference: undefined.Uri,
                    wideLogoReference: undefined.Uri): undefined.SecondaryTile,
                createWithId(tileId: string): undefined.SecondaryTile
        }
        declare     export class SecondaryTile mixins undefined.ISecondaryTile {
            constructor(tileId: string, shortName: string, displayName: string, args: string, tileOptions: undefined.TileOptions, logoReference: undefined.Uri): this;
            constructor(tileId: string, shortName: string, displayName: string, args: string, tileOptions: undefined.TileOptions, logoReference: undefined.Uri, wideLogoReference: undefined.Uri): this;
            constructor(tileId: string): this;
            constructor(): this;
            arguments: string;
            backgroundColor: undefined.Color;
            displayName: string;
            foregroundText: undefined.ForegroundText;
            lockScreenBadgeLogo: undefined.Uri;
            lockScreenDisplayBadgeAndTileText: boolean;
            logo: undefined.Uri;
            shortName: string;
            smallLogo: undefined.Uri;
            tileId: string;
            tileOptions: undefined.TileOptions;
            wideLogo: undefined.Uri;
            requestCreateAsync(): undefined.IAsyncOperation<boolean>;
            requestCreateAsync(invocationPoint: undefined.Point): undefined.IAsyncOperation<boolean>;
            requestCreateForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<boolean>;
            requestCreateForSelectionAsync(
                selection: undefined.Rect,
                preferredPlacement: undefined.Placement): undefined.IAsyncOperation<boolean>;
            requestDeleteAsync(): undefined.IAsyncOperation<boolean>;
            requestDeleteAsync(invocationPoint: undefined.Point): undefined.IAsyncOperation<boolean>;
            requestDeleteForSelectionAsync(selection: undefined.Rect): undefined.IAsyncOperation<boolean>;
            requestDeleteForSelectionAsync(
                selection: undefined.Rect,
                preferredPlacement: undefined.Placement): undefined.IAsyncOperation<boolean>;
            updateAsync(): undefined.IAsyncOperation<boolean>;
            exists(tileId: string): boolean;
            findAllAsync(): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >> ;
            findAllAsync(
                applicationId: string): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >> ;
            findAllForPackageAsync(): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >>
        }
        declare     export interface ISecondaryTileStatics {
            exists(tileId: string): boolean,
                findAllAsync(): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >> ,
                findAllAsync(
                    applicationId: string): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >> ,
                findAllForPackageAsync(): undefined.IAsyncOperation<undefined.IVectorView<undefined.SecondaryTile >>
        }
    }

    declare module 'Text' {
        declare     export class TextConstants {
            autoColor: undefined.Color;
            maxUnitCount: number;
            minUnitCount: number;
            undefinedColor: undefined.Color;
            undefinedFloatValue: number;
            undefinedFontStretch: undefined.FontStretch;
            undefinedFontStyle: undefined.FontStyle;
            undefinedInt32Value: number
        }
        declare     export interface ITextConstantsStatics {
            autoColor: undefined.Color,
                maxUnitCount: number,
                minUnitCount: number,
                undefinedColor: undefined.Color,
                undefinedFloatValue: number,
                undefinedFontStretch: undefined.FontStretch,
                undefinedFontStyle: undefined.FontStyle,
                undefinedInt32Value: number
        }
        declare     export interface ITextDocument {
            caretType: undefined.CaretType,
                defaultTabStop: number,
                selection: undefined.ITextSelection,
                undoLimit: number,
                canCopy(): boolean,
                canPaste(): boolean,
                canRedo(): boolean,
                canUndo(): boolean,
                applyDisplayUpdates(): number,
                batchDisplayUpdates(): number,
                beginUndoGroup(): void,
                endUndoGroup(): void,
                getDefaultCharacterFormat(): undefined.ITextCharacterFormat,
                getDefaultParagraphFormat(): undefined.ITextParagraphFormat,
                getRange(startPosition: number, endPosition: number): undefined.ITextRange,
                getRangeFromPoint(point: undefined.Point, options: undefined.PointOptions): undefined.ITextRange,
                getText(options: undefined.TextGetOptions): string,
                loadFromStream(options: undefined.TextSetOptions, value: undefined.IRandomAccessStream): void,
                redo(): void,
                saveToStream(options: undefined.TextGetOptions, value: undefined.IRandomAccessStream): void,
                setDefaultCharacterFormat(value: undefined.ITextCharacterFormat): void,
                setDefaultParagraphFormat(value: undefined.ITextParagraphFormat): void,
                setText(options: undefined.TextSetOptions, value: string): void,
                undo(): void
        }
        declare     export interface ITextRange {
            character: string,
                characterFormat: undefined.ITextCharacterFormat,
                endPosition: number,
                formattedText: undefined.ITextRange,
                gravity: undefined.RangeGravity,
                length: number,
                link: string,
                paragraphFormat: undefined.ITextParagraphFormat,
                startPosition: number,
                storyLength: number,
                text: string,
                canPaste(format: number): boolean,
                changeCase(value: undefined.LetterCase): void,
                collapse(value: boolean): void,
                copy(): void,
                cut(): void,
                delete_(unit: undefined.TextRangeUnit, count: number): number,
                endOf(unit: undefined.TextRangeUnit, extend: boolean): number,
                expand(unit: undefined.TextRangeUnit): number,
                findText(value: string, scanLength: number, options: undefined.FindOptions): number,
                getCharacterUtf32(offset: number): number,
                getClone(): undefined.ITextRange,
                getIndex(unit: undefined.TextRangeUnit): number,
                getPoint(
                    horizontalAlign: undefined.HorizontalCharacterAlignment,
                    verticalAlign: undefined.VerticalCharacterAlignment,
                    options: undefined.PointOptions): undefined.Point,
                getRect(options: undefined.PointOptions): {
                    rect: undefined.Rect,
                    hit: number
                },
                getText(options: undefined.TextGetOptions): string,
                getTextViaStream(options: undefined.TextGetOptions, value: undefined.IRandomAccessStream): void,
                inRange(range: undefined.ITextRange): boolean,
                insertImage(
                    width: number,
                    height: number,
                    ascent: number,
                    verticalAlign: undefined.VerticalCharacterAlignment,
                    alternateText: string,
                    value: undefined.IRandomAccessStream): void,
                inStory(range: undefined.ITextRange): boolean,
                isEqual(range: undefined.ITextRange): boolean,
                move(unit: undefined.TextRangeUnit, count: number): number,
                moveEnd(unit: undefined.TextRangeUnit, count: number): number,
                moveStart(unit: undefined.TextRangeUnit, count: number): number,
                paste(format: number): void,
                scrollIntoView(value: undefined.PointOptions): void,
                matchSelection(): void,
                setIndex(unit: undefined.TextRangeUnit, index: number, extend: boolean): void,
                setPoint(point: undefined.Point, options: undefined.PointOptions, extend: boolean): void,
                setRange(startPosition: number, endPosition: number): void,
                setText(options: undefined.TextSetOptions, value: string): void,
                setTextViaStream(options: undefined.TextSetOptions, value: undefined.IRandomAccessStream): void,
                startOf(unit: undefined.TextRangeUnit, extend: boolean): number
        }
        declare     export type ITextSelection = {
            options: undefined.SelectionOptions,
            type: undefined.SelectionType,
            endKey(unit: undefined.TextRangeUnit, extend: boolean): number,
            homeKey(unit: undefined.TextRangeUnit, extend: boolean): number,
            moveDown(unit: undefined.TextRangeUnit, count: number, extend: boolean): number,
            moveLeft(unit: undefined.TextRangeUnit, count: number, extend: boolean): number,
            moveRight(unit: undefined.TextRangeUnit, count: number, extend: boolean): number,
            moveUp(unit: undefined.TextRangeUnit, count: number, extend: boolean): number,
            typeText(value: string): void
        }
        declare     export interface ITextCharacterFormat {
            allCaps: undefined.FormatEffect,
                backgroundColor: undefined.Color,
                bold: undefined.FormatEffect,
                fontStretch: undefined.FontStretch,
                fontStyle: undefined.FontStyle,
                foregroundColor: undefined.Color,
                hidden: undefined.FormatEffect,
                italic: undefined.FormatEffect,
                kerning: number,
                languageTag: string,
                linkType: undefined.LinkType,
                name: string,
                outline: undefined.FormatEffect,
                position: number,
                protectedText: undefined.FormatEffect,
                size: number,
                smallCaps: undefined.FormatEffect,
                spacing: number,
                strikethrough: undefined.FormatEffect,
                subscript: undefined.FormatEffect,
                superscript: undefined.FormatEffect,
                textScript: undefined.TextScript,
                underline: undefined.UnderlineType,
                weight: number,
                setClone(value: undefined.ITextCharacterFormat): void,
                getClone(): undefined.ITextCharacterFormat,
                isEqual(format: undefined.ITextCharacterFormat): boolean
        }
        declare     export interface ITextParagraphFormat {
            alignment: undefined.ParagraphAlignment,
                firstLineIndent: number,
                keepTogether: undefined.FormatEffect,
                keepWithNext: undefined.FormatEffect,
                leftIndent: number,
                lineSpacing: number,
                lineSpacingRule: undefined.LineSpacingRule,
                listAlignment: undefined.MarkerAlignment,
                listLevelIndex: number,
                listStart: number,
                listStyle: undefined.MarkerStyle,
                listTab: number,
                listType: undefined.MarkerType,
                noLineNumber: undefined.FormatEffect,
                pageBreakBefore: undefined.FormatEffect,
                rightIndent: number,
                rightToLeft: undefined.FormatEffect,
                spaceAfter: number,
                spaceBefore: number,
                style: undefined.ParagraphStyle,
                tabCount: number,
                widowControl: undefined.FormatEffect,
                addTab(
                    position: number,
                    align: undefined.TabAlignment,
                    leader: undefined.TabLeader): void,
                clearAllTabs(): void,
                deleteTab(position: number): void,
                getClone(): undefined.ITextParagraphFormat,
                getTab(
                    index: number): {
                    position: number,
                    align: undefined.TabAlignment,
                    leader: undefined.TabLeader
                },
                isEqual(format: undefined.ITextParagraphFormat): boolean,
                setClone(format: undefined.ITextParagraphFormat): void,
                setIndents(start: number, left: number, right: number): void,
                setLineSpacing(rule: undefined.LineSpacingRule, spacing: number): void
        }
        declare     export interface FontWeight {
            weight: number
        }
        declare     export interface IFontWeights {}
        declare     export interface IFontWeightsStatics {
            black: undefined.FontWeight,
                bold: undefined.FontWeight,
                extraBlack: undefined.FontWeight,
                extraBold: undefined.FontWeight,
                extraLight: undefined.FontWeight,
                light: undefined.FontWeight,
                medium: undefined.FontWeight,
                normal: undefined.FontWeight,
                semiBold: undefined.FontWeight,
                semiLight: undefined.FontWeight,
                thin: undefined.FontWeight
        }
        declare     export class FontWeights mixins undefined.IFontWeights {
            black: undefined.FontWeight;
            bold: undefined.FontWeight;
            extraBlack: undefined.FontWeight;
            extraBold: undefined.FontWeight;
            extraLight: undefined.FontWeight;
            light: undefined.FontWeight;
            medium: undefined.FontWeight;
            normal: undefined.FontWeight;
            semiBold: undefined.FontWeight;
            semiLight: undefined.FontWeight;
            thin: undefined.FontWeight
        }
    }

    declare module 'Core' {
        declare     export class CoreApplication {
            mainView: undefined.CoreApplicationView;
            views: undefined.IVectorView<undefined.CoreApplicationView>;
            id: string;
            properties: undefined.IPropertySet;
            incrementApplicationUseCount(): void;
            decrementApplicationUseCount(): void;
            createNewView(runtimeType: string, entryPoint: string): undefined.CoreApplicationView;
            exit(): void;
            onexiting: any;
            onsuspending: any;
            onresuming: any;
            getCurrentView(): undefined.CoreApplicationView;
            run(viewSource: undefined.IFrameworkViewSource): void;
            runWithActivationFactories(activationFactoryCallback: undefined.IGetActivationFactory): void
        }
        declare     export class CoreApplicationView mixins undefined.ICoreApplicationView {
            coreWindow: undefined.CoreWindow;
            isHosted: boolean;
            isMain: boolean;
            onactivated: any
        }
        declare     export interface IFrameworkView {
            initialize(applicationView: undefined.CoreApplicationView): void,
                setWindow(window: undefined.CoreWindow): void,
                load(entryPoint: string): void,
                run(): void,
                uninitialize(): void
        }
        declare     export interface IFrameworkViewSource {
            createView(): undefined.IFrameworkView
        }
        declare     export interface ICoreApplication {
            id: string,
                properties: undefined.IPropertySet,
                onsuspending: any,
                onresuming: any,
                getCurrentView(): undefined.CoreApplicationView,
                run(viewSource: undefined.IFrameworkViewSource): void,
                runWithActivationFactories(activationFactoryCallback: undefined.IGetActivationFactory): void
        }
        declare     export interface ICoreApplicationUseCount {
            incrementApplicationUseCount(): void,
                decrementApplicationUseCount(): void
        }
        declare     export interface ICoreApplicationExit {
            exit(): void,
                onexiting: any
        }
        declare     export interface ICoreImmersiveApplication {
            mainView: undefined.CoreApplicationView,
                views: undefined.IVectorView<undefined.CoreApplicationView>,
                createNewView(runtimeType: string, entryPoint: string): undefined.CoreApplicationView
        }
        declare     export interface ICoreApplicationView {
            coreWindow: undefined.CoreWindow,
                isHosted: boolean,
                isMain: boolean,
                onactivated: any
        }
        declare     export interface IResourceManager {
            allResourceMaps: undefined.IMapView<string, undefined.ResourceMap>,
                defaultContext: undefined.ResourceContext,
                mainResourceMap: undefined.ResourceMap,
                loadPriFiles(files: undefined.IIterable<undefined.IStorageFile>): void,
                unloadPriFiles(files: undefined.IIterable<undefined.IStorageFile>): void
        }
        declare     export class ResourceMap mixins undefined.IResourceMap, undefined.IMapView<string, undefined.NamedResource>, undefined.IIterable<undefined.IKeyValuePair<string, undefined.NamedResource >> {
            uri: undefined.Uri;
            size: number;
            getValue(resource: string): undefined.ResourceCandidate;
            getValue(
                resource: string,
                context: undefined.ResourceContext): undefined.ResourceCandidate;
            getSubtree(reference: string): undefined.ResourceMap;
            lookup(key: string): undefined.NamedResource;
            hasKey(key: string): boolean;
            split(): {
                first: undefined.IMapView<string,
                undefined.NamedResource>,
                second: undefined.IMapView<string,
                undefined.NamedResource >
            };
            first(): undefined.IIterator<undefined.IKeyValuePair<string,
            undefined.NamedResource >>
        }
        declare     export class ResourceContext mixins undefined.IResourceContext {
            languages: undefined.IVectorView<string>;
            qualifierValues: undefined.IObservableMap<string,
            string>;
            reset(): void;
            reset(qualifierNames: undefined.IIterable<string>): void;
            overrideToMatch(result: undefined.IIterable<undefined.ResourceQualifier>): void;
            clone(): undefined.ResourceContext;
            createMatchingContext(
                result: undefined.IIterable<undefined.ResourceQualifier>): undefined.ResourceContext
        }
        declare     export interface IResourceManagerStatics {
            current: undefined.ResourceManager,
                isResourceReference(resourceReference: string): boolean
        }
        declare     export class ResourceManager mixins undefined.IResourceManager {
            allResourceMaps: undefined.IMapView<string,
            undefined.ResourceMap>;
            defaultContext: undefined.ResourceContext;
            mainResourceMap: undefined.ResourceMap;
            loadPriFiles(files: undefined.IIterable<undefined.IStorageFile>): void;
            unloadPriFiles(files: undefined.IIterable<undefined.IStorageFile>): void;
            current: undefined.ResourceManager;
            isResourceReference(resourceReference: string): boolean
        }
        declare     export interface IResourceQualifier {
            isDefault: boolean,
                isMatch: boolean,
                qualifierName: string,
                qualifierValue: string,
                score: number
        }
        declare     export class ResourceQualifier mixins undefined.IResourceQualifier {
            isDefault: boolean;
            isMatch: boolean;
            qualifierName: string;
            qualifierValue: string;
            score: number
        }
        declare     export interface IResourceContext {
            languages: undefined.IVectorView<string>,
                qualifierValues: undefined.IObservableMap<string, string>,
                reset(): void,
                reset(qualifierNames: undefined.IIterable<string>): void,
                overrideToMatch(result: undefined.IIterable<undefined.ResourceQualifier>): void,
                clone(): undefined.ResourceContext
        }
        declare     export interface IResourceContextStatics {
            createMatchingContext(
                result: undefined.IIterable<undefined.ResourceQualifier>): undefined.ResourceContext
        }
        declare     export interface IResourceCandidate {
            isDefault: boolean,
                isMatch: boolean,
                isMatchAsDefault: boolean,
                qualifiers: undefined.IVectorView<undefined.ResourceQualifier>,
                valueAsString: string,
                getValueAsFileAsync(): undefined.IAsyncOperation<undefined.StorageFile>,
                getQualifierValue(qualifierName: string): string
        }
        declare     export class ResourceCandidate mixins undefined.IResourceCandidate {
            isDefault: boolean;
            isMatch: boolean;
            isMatchAsDefault: boolean;
            qualifiers: undefined.IVectorView<undefined.ResourceQualifier>;
            valueAsString: string;
            getValueAsFileAsync(): undefined.IAsyncOperation<undefined.StorageFile>;
            getQualifierValue(qualifierName: string): string
        }
        declare     export interface INamedResource {
            candidates: undefined.IVectorView<undefined.ResourceCandidate>,
                uri: undefined.Uri,
                resolve(): undefined.ResourceCandidate,
                resolve(resourceContext: undefined.ResourceContext): undefined.ResourceCandidate,
                resolveAll(): undefined.IVectorView<undefined.ResourceCandidate>,
                resolveAll(
                    resourceContext: undefined.ResourceContext): undefined.IVectorView<undefined.ResourceCandidate >
        }
        declare     export class NamedResource mixins undefined.INamedResource {
            candidates: undefined.IVectorView<undefined.ResourceCandidate>;
            uri: undefined.Uri;
            resolve(): undefined.ResourceCandidate;
            resolve(resourceContext: undefined.ResourceContext): undefined.ResourceCandidate;
            resolveAll(): undefined.IVectorView<undefined.ResourceCandidate>;
            resolveAll(
                resourceContext: undefined.ResourceContext): undefined.IVectorView<undefined.ResourceCandidate >
        }
        declare     export type IResourceMap = {
                uri: undefined.Uri,
                getValue(resource: string): undefined.ResourceCandidate,
                getValue(
                    resource: string,
                    context: undefined.ResourceContext): undefined.ResourceCandidate,
                getSubtree(reference: string): undefined.ResourceMap
            } & &

            declare     export class ResourceMapIterator mixins undefined.IIterator<undefined.IKeyValuePair<string, undefined.NamedResource >> {
            current: undefined.IKeyValuePair<string,
            undefined.NamedResource>;
            hasCurrent: boolean;
            moveNext(): boolean;
            getMany(): {
                items: undefined.IKeyValuePair<string,
                undefined.NamedResource>[],
                returnValue: number
            }
        }
        declare     export class ResourceMapMapView mixins undefined.IMapView<string, undefined.ResourceMap>, undefined.IIterable<undefined.IKeyValuePair<string, undefined.ResourceMap >> {
            size: number;
            lookup(key: string): undefined.ResourceMap;
            hasKey(key: string): boolean;
            split(): {
                first: undefined.IMapView<string,
                undefined.ResourceMap>,
                second: undefined.IMapView<string,
                undefined.ResourceMap >
            };
            first(): undefined.IIterator<undefined.IKeyValuePair<string,
            undefined.ResourceMap >>
        }
        declare     export class ResourceMapMapViewIterator mixins undefined.IIterator<undefined.IKeyValuePair<string, undefined.ResourceMap >> {
            current: undefined.IKeyValuePair<string,
            undefined.ResourceMap>;
            hasCurrent: boolean;
            moveNext(): boolean;
            getMany(): {
                items: undefined.IKeyValuePair<string,
                undefined.ResourceMap>[],
                returnValue: number
            }
        }
        declare     export class ResourceQualifierObservableMap mixins undefined.IObservableMap<string, string>, undefined.IMap<string, string>, undefined.IIterable<undefined.IKeyValuePair<string, string >> {
            size: number;
            onmapchanged: any;
            lookup(key: string): string;
            hasKey(key: string): boolean;
            getView(): undefined.IMapView<string,
            string>;
            insert(key: string, value: string): boolean;
            remove(key: string): void;
            clear(): void;
            first(): undefined.IIterator<undefined.IKeyValuePair<string,
            string >>
        }
        declare     export class ResourceQualifierMapView mixins undefined.IMapView<string, string>, undefined.IIterable<undefined.IKeyValuePair<string, string >> {
            size: number;
            lookup(key: string): string;
            hasKey(key: string): boolean;
            split(): {
                first: undefined.IMapView<string,
                string>,
                second: undefined.IMapView<string,
                string >
            };
            first(): undefined.IIterator<undefined.IKeyValuePair<string,
            string >>
        }
        declare     export class ResourceQualifierVectorView mixins undefined.IVectorView<undefined.ResourceQualifier>, undefined.IIterable<undefined.ResourceQualifier>{
            size: number;
            getAt(index: number): undefined.ResourceQualifier;
            indexOf(value: undefined.ResourceQualifier): {
                index: number,
                returnValue: boolean
            };
            getMany(
                startIndex: number): {
                items: undefined.ResourceQualifier[],
                returnValue: number
            };
            first(): undefined.IIterator<undefined.ResourceQualifier>;
            toString(): string;
            toLocaleString(): string;
            concat(...items: undefined.ResourceQualifier[][]): undefined.ResourceQualifier[];
            join(seperator: string): string;
            pop(): undefined.ResourceQualifier;
            push(...items: undefined.ResourceQualifier[]): void;
            reverse(): undefined.ResourceQualifier[];
            shift(): undefined.ResourceQualifier;
            slice(start: number): undefined.ResourceQualifier[];
            slice(start: number, end: number): undefined.ResourceQualifier[];
            sort(): undefined.ResourceQualifier[];
            sort(
                compareFn: (a: undefined.ResourceQualifier, b: undefined.ResourceQualifier) => number): undefined.ResourceQualifier[];
            splice(start: number): undefined.ResourceQualifier[];
            splice(
                start: number,
                deleteCount: number,
                ...items: undefined.ResourceQualifier[]): undefined.ResourceQualifier[];
            unshift(...items: undefined.ResourceQualifier[]): number;
            lastIndexOf(searchElement: undefined.ResourceQualifier): number;
            lastIndexOf(searchElement: undefined.ResourceQualifier, fromIndex: number): number;
            every(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean): boolean;
            every(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean,
                thisArg: any): boolean;
            some(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean): boolean;
            some(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean,
                thisArg: any): boolean;
            forEach(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => void): void;
            forEach(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => void,
                thisArg: any): void;
            map(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => any): any[];
            map(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => any,
                thisArg: any): any[];
            filter(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean): undefined.ResourceQualifier[];
            filter(
                callbackfn: (
                    value: undefined.ResourceQualifier,
                    index: number,
                    array: undefined.ResourceQualifier[]) => boolean,
                thisArg: any): undefined.ResourceQualifier[];
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceQualifier[]) => any): any;
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceQualifier[]) => any,
                initialValue: any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceQualifier[]) => any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceQualifier[]) => any,
                initialValue: any): any;
            length: number
        }
        declare     export class ResourceCandidateVectorView mixins undefined.IVectorView<undefined.ResourceCandidate>, undefined.IIterable<undefined.ResourceCandidate>{
            size: number;
            getAt(index: number): undefined.ResourceCandidate;
            indexOf(value: undefined.ResourceCandidate): {
                index: number,
                returnValue: boolean
            };
            getMany(
                startIndex: number): {
                items: undefined.ResourceCandidate[],
                returnValue: number
            };
            first(): undefined.IIterator<undefined.ResourceCandidate>;
            toString(): string;
            toLocaleString(): string;
            concat(...items: undefined.ResourceCandidate[][]): undefined.ResourceCandidate[];
            join(seperator: string): string;
            pop(): undefined.ResourceCandidate;
            push(...items: undefined.ResourceCandidate[]): void;
            reverse(): undefined.ResourceCandidate[];
            shift(): undefined.ResourceCandidate;
            slice(start: number): undefined.ResourceCandidate[];
            slice(start: number, end: number): undefined.ResourceCandidate[];
            sort(): undefined.ResourceCandidate[];
            sort(
                compareFn: (a: undefined.ResourceCandidate, b: undefined.ResourceCandidate) => number): undefined.ResourceCandidate[];
            splice(start: number): undefined.ResourceCandidate[];
            splice(
                start: number,
                deleteCount: number,
                ...items: undefined.ResourceCandidate[]): undefined.ResourceCandidate[];
            unshift(...items: undefined.ResourceCandidate[]): number;
            lastIndexOf(searchElement: undefined.ResourceCandidate): number;
            lastIndexOf(searchElement: undefined.ResourceCandidate, fromIndex: number): number;
            every(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean): boolean;
            every(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean,
                thisArg: any): boolean;
            some(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean): boolean;
            some(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean,
                thisArg: any): boolean;
            forEach(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => void): void;
            forEach(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => void,
                thisArg: any): void;
            map(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => any): any[];
            map(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => any,
                thisArg: any): any[];
            filter(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean): undefined.ResourceCandidate[];
            filter(
                callbackfn: (
                    value: undefined.ResourceCandidate,
                    index: number,
                    array: undefined.ResourceCandidate[]) => boolean,
                thisArg: any): undefined.ResourceCandidate[];
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceCandidate[]) => any): any;
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceCandidate[]) => any,
                initialValue: any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceCandidate[]) => any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: undefined.ResourceCandidate[]) => any,
                initialValue: any): any;
            length: number
        }
        declare     export class ResourceContextLanguagesVectorView mixins undefined.IVectorView<string>, undefined.IIterable<string>{
            size: number;
            getAt(index: number): string;
            indexOf(value: string): {
                index: number,
                returnValue: boolean
            };
            getMany(startIndex: number): {
                items: string[],
                returnValue: number
            };
            first(): undefined.IIterator<string>;
            toString(): string;
            toLocaleString(): string;
            concat(...items: string[][]): string[];
            join(seperator: string): string;
            pop(): string;
            push(...items: string[]): void;
            reverse(): string[];
            shift(): string;
            slice(start: number): string[];
            slice(start: number, end: number): string[];
            sort(): string[];
            sort(compareFn: (a: string, b: string) => number): string[];
            splice(start: number): string[];
            splice(start: number, deleteCount: number, ...items: string[]): string[];
            unshift(...items: string[]): number;
            lastIndexOf(searchElement: string): number;
            lastIndexOf(searchElement: string, fromIndex: number): number;
            every(
                callbackfn: (value: string, index: number, array: string[]) => boolean): boolean;
            every(
                callbackfn: (value: string, index: number, array: string[]) => boolean,
                thisArg: any): boolean;
            some(
                callbackfn: (value: string, index: number, array: string[]) => boolean): boolean;
            some(
                callbackfn: (value: string, index: number, array: string[]) => boolean,
                thisArg: any): boolean;
            forEach(callbackfn: (value: string, index: number, array: string[]) => void): void;
            forEach(
                callbackfn: (value: string, index: number, array: string[]) => void,
                thisArg: any): void;
            map(callbackfn: (value: string, index: number, array: string[]) => any): any[];
            map(
                callbackfn: (value: string, index: number, array: string[]) => any,
                thisArg: any): any[];
            filter(
                callbackfn: (value: string, index: number, array: string[]) => boolean): string[];
            filter(
                callbackfn: (value: string, index: number, array: string[]) => boolean,
                thisArg: any): string[];
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: string[]) => any): any;
            reduce(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: string[]) => any,
                initialValue: any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: string[]) => any): any;
            reduceRight(
                callbackfn: (
                    previousValue: any,
                    currentValue: any,
                    currentIndex: number,
                    array: string[]) => any,
                initialValue: any): any;
            length: number
        }
        declare     export interface IApplicationDataManagerStatics {
            createForPackageFamily(packageFamilyName: string): undefined.ApplicationData
        }
        declare     export interface IApplicationDataManager {}
        declare     export class ApplicationDataManager mixins undefined.IApplicationDataManager {
            createForPackageFamily(packageFamilyName: string): undefined.ApplicationData
        }
        declare     export interface IKeyDerivationParameters {
            iterationCount: number,
                kdfGenericBinary: undefined.IBuffer
        }
        declare     export interface IKeyDerivationParametersStatics {
            buildForPbkdf2(
                    pbkdf2Salt: undefined.IBuffer,
                    iterationCount: number): undefined.KeyDerivationParameters,
                buildForSP800108(
                    label: undefined.IBuffer,
                    context: undefined.IBuffer): undefined.KeyDerivationParameters,
                buildForSP80056a(
                    algorithmId: undefined.IBuffer,
                    partyUInfo: undefined.IBuffer,
                    partyVInfo: undefined.IBuffer,
                    suppPubInfo: undefined.IBuffer,
                    suppPrivInfo: undefined.IBuffer): undefined.KeyDerivationParameters
        }
        declare     export class KeyDerivationParameters mixins undefined.IKeyDerivationParameters {
            iterationCount: number;
            kdfGenericBinary: undefined.IBuffer;
            buildForPbkdf2(
                pbkdf2Salt: undefined.IBuffer,
                iterationCount: number): undefined.KeyDerivationParameters;
            buildForSP800108(
                label: undefined.IBuffer,
                context: undefined.IBuffer): undefined.KeyDerivationParameters;
            buildForSP80056a(
                algorithmId: undefined.IBuffer,
                partyUInfo: undefined.IBuffer,
                partyVInfo: undefined.IBuffer,
                suppPubInfo: undefined.IBuffer,
                suppPrivInfo: undefined.IBuffer): undefined.KeyDerivationParameters
        }
        declare     export interface ICryptographicKey {
            keySize: number,
                export (): undefined.IBuffer,
                export (BlobType: undefined.CryptographicPrivateKeyBlobType): undefined.IBuffer,
                exportPublicKey(): undefined.IBuffer,
                exportPublicKey(BlobType: undefined.CryptographicPublicKeyBlobType): undefined.IBuffer
        }
        declare     export class CryptographicKey mixins undefined.ICryptographicKey {
            keySize: number;
            export (): undefined.IBuffer;
            export (BlobType: undefined.CryptographicPrivateKeyBlobType): undefined.IBuffer;
            exportPublicKey(): undefined.IBuffer;
            exportPublicKey(BlobType: undefined.CryptographicPublicKeyBlobType): undefined.IBuffer
        }
        declare     export interface IHashComputation {
            append(data: undefined.IBuffer): void,
                getValueAndReset(): undefined.IBuffer
        }
        declare     export class CryptographicHash mixins undefined.IHashComputation {
            append(data: undefined.IBuffer): void;
            getValueAndReset(): undefined.IBuffer
        }
        declare     export interface IHashAlgorithmProvider {
            algorithmName: string,
                hashLength: number,
                hashData(data: undefined.IBuffer): undefined.IBuffer,
                createHash(): undefined.CryptographicHash
        }
        declare     export interface IMacAlgorithmProvider {
            algorithmName: string,
                macLength: number,
                createKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey
        }
        declare     export interface IKeyDerivationAlgorithmProvider {
            algorithmName: string,
                createKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey
        }
        declare     export interface ISymmetricKeyAlgorithmProvider {
            algorithmName: string,
                blockLength: number,
                createSymmetricKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey
        }
        declare     export interface IAsymmetricKeyAlgorithmProvider {
            algorithmName: string,
                createKeyPair(keySize: number): undefined.CryptographicKey,
                importKeyPair(keyBlob: undefined.IBuffer): undefined.CryptographicKey,
                importKeyPair(
                    keyBlob: undefined.IBuffer,
                    BlobType: undefined.CryptographicPrivateKeyBlobType): undefined.CryptographicKey,
                importPublicKey(keyBlob: undefined.IBuffer): undefined.CryptographicKey,
                importPublicKey(
                    keyBlob: undefined.IBuffer,
                    BlobType: undefined.CryptographicPublicKeyBlobType): undefined.CryptographicKey
        }
        declare     export interface IEncryptedAndAuthenticatedData {
            authenticationTag: undefined.IBuffer,
                encryptedData: undefined.IBuffer
        }
        declare     export class EncryptedAndAuthenticatedData mixins undefined.IEncryptedAndAuthenticatedData {
            authenticationTag: undefined.IBuffer;
            encryptedData: undefined.IBuffer
        }
        declare     export interface ICryptographicEngineStatics {
            encrypt(
                    key: undefined.CryptographicKey,
                    data: undefined.IBuffer,
                    iv: undefined.IBuffer): undefined.IBuffer,
                decrypt(
                    key: undefined.CryptographicKey,
                    data: undefined.IBuffer,
                    iv: undefined.IBuffer): undefined.IBuffer,
                encryptAndAuthenticate(
                    key: undefined.CryptographicKey,
                    data: undefined.IBuffer,
                    nonce: undefined.IBuffer,
                    authenticatedData: undefined.IBuffer): undefined.EncryptedAndAuthenticatedData,
                decryptAndAuthenticate(
                    key: undefined.CryptographicKey,
                    data: undefined.IBuffer,
                    nonce: undefined.IBuffer,
                    authenticationTag: undefined.IBuffer,
                    authenticatedData: undefined.IBuffer): undefined.IBuffer,
                sign(key: undefined.CryptographicKey, data: undefined.IBuffer): undefined.IBuffer,
                verifySignature(
                    key: undefined.CryptographicKey,
                    data: undefined.IBuffer,
                    signature: undefined.IBuffer): boolean,
                deriveKeyMaterial(
                    key: undefined.CryptographicKey,
                    parameters: undefined.KeyDerivationParameters,
                    desiredKeySize: number): undefined.IBuffer
        }
        declare     export class CryptographicEngine {
            encrypt(
                key: undefined.CryptographicKey,
                data: undefined.IBuffer,
                iv: undefined.IBuffer): undefined.IBuffer;
            decrypt(
                key: undefined.CryptographicKey,
                data: undefined.IBuffer,
                iv: undefined.IBuffer): undefined.IBuffer;
            encryptAndAuthenticate(
                key: undefined.CryptographicKey,
                data: undefined.IBuffer,
                nonce: undefined.IBuffer,
                authenticatedData: undefined.IBuffer): undefined.EncryptedAndAuthenticatedData;
            decryptAndAuthenticate(
                key: undefined.CryptographicKey,
                data: undefined.IBuffer,
                nonce: undefined.IBuffer,
                authenticationTag: undefined.IBuffer,
                authenticatedData: undefined.IBuffer): undefined.IBuffer;
            sign(key: undefined.CryptographicKey, data: undefined.IBuffer): undefined.IBuffer;
            verifySignature(
                key: undefined.CryptographicKey,
                data: undefined.IBuffer,
                signature: undefined.IBuffer): boolean;
            deriveKeyMaterial(
                key: undefined.CryptographicKey,
                parameters: undefined.KeyDerivationParameters,
                desiredKeySize: number): undefined.IBuffer
        }
        declare     export interface IHashAlgorithmProviderStatics {
            openAlgorithm(algorithm: string): undefined.HashAlgorithmProvider
        }
        declare     export class HashAlgorithmProvider mixins undefined.IHashAlgorithmProvider {
            algorithmName: string;
            hashLength: number;
            hashData(data: undefined.IBuffer): undefined.IBuffer;
            createHash(): undefined.CryptographicHash;
            openAlgorithm(algorithm: string): undefined.HashAlgorithmProvider
        }
        declare     export interface IMacAlgorithmProviderStatics {
            openAlgorithm(algorithm: string): undefined.MacAlgorithmProvider
        }
        declare     export class MacAlgorithmProvider mixins undefined.IMacAlgorithmProvider {
            algorithmName: string;
            macLength: number;
            createKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey;
            openAlgorithm(algorithm: string): undefined.MacAlgorithmProvider
        }
        declare     export interface IKeyDerivationAlgorithmProviderStatics {
            openAlgorithm(algorithm: string): undefined.KeyDerivationAlgorithmProvider
        }
        declare     export class KeyDerivationAlgorithmProvider mixins undefined.IKeyDerivationAlgorithmProvider {
            algorithmName: string;
            createKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey;
            openAlgorithm(algorithm: string): undefined.KeyDerivationAlgorithmProvider
        }
        declare     export interface ISymmetricKeyAlgorithmProviderStatics {
            openAlgorithm(algorithm: string): undefined.SymmetricKeyAlgorithmProvider
        }
        declare     export class SymmetricKeyAlgorithmProvider mixins undefined.ISymmetricKeyAlgorithmProvider {
            algorithmName: string;
            blockLength: number;
            createSymmetricKey(keyMaterial: undefined.IBuffer): undefined.CryptographicKey;
            openAlgorithm(algorithm: string): undefined.SymmetricKeyAlgorithmProvider
        }
        declare     export interface IAsymmetricKeyAlgorithmProviderStatics {
            openAlgorithm(algorithm: string): undefined.AsymmetricKeyAlgorithmProvider
        }
        declare     export class AsymmetricKeyAlgorithmProvider mixins undefined.IAsymmetricKeyAlgorithmProvider {
            algorithmName: string;
            createKeyPair(keySize: number): undefined.CryptographicKey;
            importKeyPair(keyBlob: undefined.IBuffer): undefined.CryptographicKey;
            importKeyPair(
                keyBlob: undefined.IBuffer,
                BlobType: undefined.CryptographicPrivateKeyBlobType): undefined.CryptographicKey;
            importPublicKey(keyBlob: undefined.IBuffer): undefined.CryptographicKey;
            importPublicKey(
                keyBlob: undefined.IBuffer,
                BlobType: undefined.CryptographicPublicKeyBlobType): undefined.CryptographicKey;
            openAlgorithm(algorithm: string): undefined.AsymmetricKeyAlgorithmProvider
        }
        declare     export interface IHashAlgorithmNamesStatics {
            md5: string,
                sha1: string,
                sha256: string,
                sha384: string,
                sha512: string
        }
        declare     export class HashAlgorithmNames {
            md5: string;
            sha1: string;
            sha256: string;
            sha384: string;
            sha512: string
        }
        declare     export interface IMacAlgorithmNamesStatics {
            aesCmac: string,
                hmacMd5: string,
                hmacSha1: string,
                hmacSha256: string,
                hmacSha384: string,
                hmacSha512: string
        }
        declare     export class MacAlgorithmNames {
            aesCmac: string;
            hmacMd5: string;
            hmacSha1: string;
            hmacSha256: string;
            hmacSha384: string;
            hmacSha512: string
        }
        declare     export interface ISymmetricAlgorithmNamesStatics {
            aesCbc: string,
                aesCbcPkcs7: string,
                aesCcm: string,
                aesEcb: string,
                aesEcbPkcs7: string,
                aesGcm: string,
                desCbc: string,
                desCbcPkcs7: string,
                desEcb: string,
                desEcbPkcs7: string,
                rc2Cbc: string,
                rc2CbcPkcs7: string,
                rc2Ecb: string,
                rc2EcbPkcs7: string,
                rc4: string,
                tripleDesCbc: string,
                tripleDesCbcPkcs7: string,
                tripleDesEcb: string,
                tripleDesEcbPkcs7: string
        }
        declare     export class SymmetricAlgorithmNames {
            aesCbc: string;
            aesCbcPkcs7: string;
            aesCcm: string;
            aesEcb: string;
            aesEcbPkcs7: string;
            aesGcm: string;
            desCbc: string;
            desCbcPkcs7: string;
            desEcb: string;
            desEcbPkcs7: string;
            rc2Cbc: string;
            rc2CbcPkcs7: string;
            rc2Ecb: string;
            rc2EcbPkcs7: string;
            rc4: string;
            tripleDesCbc: string;
            tripleDesCbcPkcs7: string;
            tripleDesEcb: string;
            tripleDesEcbPkcs7: string
        }
        declare     export interface IAsymmetricAlgorithmNamesStatics {
            dsaSha1: string,
                dsaSha256: string,
                ecdsaP256Sha256: string,
                ecdsaP384Sha384: string,
                ecdsaP521Sha512: string,
                rsaOaepSha1: string,
                rsaOaepSha256: string,
                rsaOaepSha384: string,
                rsaOaepSha512: string,
                rsaPkcs1: string,
                rsaSignPkcs1Sha1: string,
                rsaSignPkcs1Sha256: string,
                rsaSignPkcs1Sha384: string,
                rsaSignPkcs1Sha512: string,
                rsaSignPssSha1: string,
                rsaSignPssSha256: string,
                rsaSignPssSha384: string,
                rsaSignPssSha512: string
        }
        declare     export class AsymmetricAlgorithmNames {
            dsaSha1: string;
            dsaSha256: string;
            ecdsaP256Sha256: string;
            ecdsaP384Sha384: string;
            ecdsaP521Sha512: string;
            rsaOaepSha1: string;
            rsaOaepSha256: string;
            rsaOaepSha384: string;
            rsaOaepSha512: string;
            rsaPkcs1: string;
            rsaSignPkcs1Sha1: string;
            rsaSignPkcs1Sha256: string;
            rsaSignPkcs1Sha384: string;
            rsaSignPkcs1Sha512: string;
            rsaSignPssSha1: string;
            rsaSignPssSha256: string;
            rsaSignPssSha384: string;
            rsaSignPssSha512: string
        }
        declare     export interface IKeyDerivationAlgorithmNamesStatics {
            pbkdf2Md5: string,
                pbkdf2Sha1: string,
                pbkdf2Sha256: string,
                pbkdf2Sha384: string,
                pbkdf2Sha512: string,
                sp800108CtrHmacMd5: string,
                sp800108CtrHmacSha1: string,
                sp800108CtrHmacSha256: string,
                sp800108CtrHmacSha384: string,
                sp800108CtrHmacSha512: string,
                sp80056aConcatMd5: string,
                sp80056aConcatSha1: string,
                sp80056aConcatSha256: string,
                sp80056aConcatSha384: string,
                sp80056aConcatSha512: string
        }
        declare     export class KeyDerivationAlgorithmNames {
            pbkdf2Md5: string;
            pbkdf2Sha1: string;
            pbkdf2Sha256: string;
            pbkdf2Sha384: string;
            pbkdf2Sha512: string;
            sp800108CtrHmacMd5: string;
            sp800108CtrHmacSha1: string;
            sp800108CtrHmacSha256: string;
            sp800108CtrHmacSha384: string;
            sp800108CtrHmacSha512: string;
            sp80056aConcatMd5: string;
            sp80056aConcatSha1: string;
            sp80056aConcatSha256: string;
            sp80056aConcatSha384: string;
            sp80056aConcatSha512: string
        }
        declare     export interface SignalHandler {
            (signalNotifier: undefined.SignalNotifier, timedOut: boolean): void
        }
        declare     export class SignalNotifier mixins undefined.ISignalNotifier {
            enable(): void;
            terminate(): void;
            attachToEvent(name: string, handler: undefined.SignalHandler): undefined.SignalNotifier;
            attachToEvent(
                name: string,
                handler: undefined.SignalHandler,
                timeout: number): undefined.SignalNotifier;
            attachToSemaphore(name: string, handler: undefined.SignalHandler): undefined.SignalNotifier;
            attachToSemaphore(
                name: string,
                handler: undefined.SignalHandler,
                timeout: number): undefined.SignalNotifier
        }
        declare     export interface ISignalNotifierStatics {
            attachToEvent(name: string, handler: undefined.SignalHandler): undefined.SignalNotifier,
                attachToEvent(
                    name: string,
                    handler: undefined.SignalHandler,
                    timeout: number): undefined.SignalNotifier,
                attachToSemaphore(name: string, handler: undefined.SignalHandler): undefined.SignalNotifier,
                attachToSemaphore(
                    name: string,
                    handler: undefined.SignalHandler,
                    timeout: number): undefined.SignalNotifier
        }
        declare     export interface IPreallocatedWorkItemFactory {
            createWorkItem(handler: undefined.WorkItemHandler): undefined.PreallocatedWorkItem,
                createWorkItemWithPriority(
                    handler: undefined.WorkItemHandler,
                    priority: undefined.WorkItemPriority): undefined.PreallocatedWorkItem,
                createWorkItemWithPriorityAndOptions(
                    handler: undefined.WorkItemHandler,
                    priority: undefined.WorkItemPriority,
                    options: undefined.WorkItemOptions): undefined.PreallocatedWorkItem
        }
        declare     export class PreallocatedWorkItem mixins undefined.IPreallocatedWorkItem {
            constructor(handler: undefined.WorkItemHandler): this;
            constructor(handler: undefined.WorkItemHandler, priority: undefined.WorkItemPriority): this;
            constructor(handler: undefined.WorkItemHandler, priority: undefined.WorkItemPriority, options: undefined.WorkItemOptions): this;
            runAsync(): undefined.IAsyncAction
        }
        declare     export interface IPreallocatedWorkItem {
            runAsync(): undefined.IAsyncAction
        }
        declare     export interface ISignalNotifier {
            enable(): void,
                terminate(): void
        }
        declare module 'AnimationMetrics' {
            declare         export interface IPropertyAnimation {
                control1: undefined.Point,
                    control2: undefined.Point,
                    delay: number,
                    duration: number,
                    type: undefined.PropertyAnimationType
            }
            declare         export type IScaleAnimation = {
                finalScaleX: number,
                finalScaleY: number,
                initialScaleX: number,
                initialScaleY: number,
                normalizedOrigin: undefined.Point
            }
            declare         export type IOpacityAnimation = {
                finalOpacity: number,
                initialOpacity: number
            }
            declare         export interface IAnimationDescription {
                animations: undefined.IVectorView<undefined.IPropertyAnimation>,
                    delayLimit: number,
                    staggerDelay: number,
                    staggerDelayFactor: number,
                    zOrder: number
            }
            declare         export interface IAnimationDescriptionFactory {
                createInstance(
                    effect: undefined.AnimationEffect,
                    target: undefined.AnimationEffectTarget): undefined.AnimationDescription
            }
            declare         export class AnimationDescription mixins undefined.IAnimationDescription {
                constructor(effect: undefined.AnimationEffect, target: undefined.AnimationEffectTarget): this;
                animations: undefined.IVectorView<undefined.IPropertyAnimation>;
                delayLimit: number;
                staggerDelay: number;
                staggerDelayFactor: number;
                zOrder: number
            }
            declare         export class PropertyAnimation mixins undefined.IPropertyAnimation {
                control1: undefined.Point;
                control2: undefined.Point;
                delay: number;
                duration: number;
                type: undefined.PropertyAnimationType
            }
            declare         export class ScaleAnimation mixins undefined.IScaleAnimation, undefined.IPropertyAnimation {
                finalScaleX: number;
                finalScaleY: number;
                initialScaleX: number;
                initialScaleY: number;
                normalizedOrigin: undefined.Point;
                control1: undefined.Point;
                control2: undefined.Point;
                delay: number;
                duration: number;
                type: undefined.PropertyAnimationType
            }
            declare         export class TranslationAnimation mixins undefined.IPropertyAnimation {
                control1: undefined.Point;
                control2: undefined.Point;
                delay: number;
                duration: number;
                type: undefined.PropertyAnimationType
            }
            declare         export class OpacityAnimation mixins undefined.IOpacityAnimation, undefined.IPropertyAnimation {
                finalOpacity: number;
                initialOpacity: number;
                control1: undefined.Point;
                control2: undefined.Point;
                delay: number;
                duration: number;
                type: undefined.PropertyAnimationType
            }
        }

        declare     export interface CorePhysicalKeyStatus {
            repeatCount: number,
                scanCode: number,
                isExtendedKey: boolean,
                isMenuKeyDown: boolean,
                wasKeyDown: boolean,
                isKeyReleased: boolean
        }
        declare     export interface CoreProximityEvaluation {
            score: number,
                adjustedPoint: undefined.Point
        }
        declare     export interface ICoreWindowEventArgs {
            handled: boolean
        }
        declare     export type IAutomationProviderRequestedEventArgs = {
            automationProvider: any
        }
        declare     export type ICharacterReceivedEventArgs = {
            keyCode: number,
            keyStatus: undefined.CorePhysicalKeyStatus
        }
        declare     export type IInputEnabledEventArgs = {
            inputEnabled: boolean
        }
        declare     export type IKeyEventArgs = {
            keyStatus: undefined.CorePhysicalKeyStatus,
            virtualKey: undefined.VirtualKey
        }
        declare     export type IPointerEventArgs = {
            currentPoint: undefined.PointerPoint,
            keyModifiers: undefined.VirtualKeyModifiers,
            getIntermediatePoints(): undefined.IVector<undefined.PointerPoint >
        }
        declare     export type ITouchHitTestingEventArgs = {
            boundingBox: undefined.Rect,
            point: undefined.Point,
            proximityEvaluation: undefined.CoreProximityEvaluation,
            evaluateProximity(controlBoundingBox: undefined.Rect): undefined.CoreProximityEvaluation,
            evaluateProximity(controlVertices: undefined.Point[]): undefined.CoreProximityEvaluation
        }
        declare     export type IWindowActivatedEventArgs = {
            windowActivationState: undefined.CoreWindowActivationState
        }
        declare     export type IWindowSizeChangedEventArgs = {
            size: undefined.Size
        }
        declare     export type IVisibilityChangedEventArgs = {
            visible: boolean
        }
        declare     export interface ICoreWindow {
            automationHostProvider: any,
                bounds: undefined.Rect,
                customProperties: undefined.IPropertySet,
                dispatcher: undefined.CoreDispatcher,
                flowDirection: undefined.CoreWindowFlowDirection,
                isInputEnabled: boolean,
                pointerCursor: undefined.CoreCursor,
                pointerPosition: undefined.Point,
                visible: boolean,
                activate(): void,
                close(): void,
                getAsyncKeyState(virtualKey: undefined.VirtualKey): undefined.CoreVirtualKeyStates,
                getKeyState(virtualKey: undefined.VirtualKey): undefined.CoreVirtualKeyStates,
                releasePointerCapture(): void,
                setPointerCapture(): void,
                onactivated: any,
                onautomationproviderrequested: any,
                oncharacterreceived: any,
                onclosed: any,
                oninputenabled: any,
                onkeydown: any,
                onkeyup: any,
                onpointercapturelost: any,
                onpointerentered: any,
                onpointerexited: any,
                onpointermoved: any,
                onpointerpressed: any,
                onpointerreleased: any,
                ontouchhittesting: any,
                onpointerwheelchanged: any,
                onsizechanged: any,
                onvisibilitychanged: any
        }
        declare     export class CoreDispatcher mixins undefined.ICoreDispatcher, undefined.ICoreAcceleratorKeys {
            hasThreadAccess: boolean;
            processEvents(options: undefined.CoreProcessEventsOption): void;
            runAsync(
                priority: undefined.CoreDispatcherPriority,
                agileCallback: undefined.DispatchedHandler): undefined.IAsyncAction;
            runIdleAsync(agileCallback: undefined.IdleDispatchedHandler): undefined.IAsyncAction;
            onacceleratorkeyactivated: any
        }
        declare     export class CoreCursor mixins undefined.ICoreCursor {
            constructor(type: undefined.CoreCursorType, id: number): this;
            id: number;
            type: undefined.CoreCursorType
        }
        declare     export class CoreWindow mixins undefined.ICoreWindow {
            automationHostProvider: any;
            bounds: undefined.Rect;
            customProperties: undefined.IPropertySet;
            dispatcher: undefined.CoreDispatcher;
            flowDirection: undefined.CoreWindowFlowDirection;
            isInputEnabled: boolean;
            pointerCursor: undefined.CoreCursor;
            pointerPosition: undefined.Point;
            visible: boolean;
            activate(): void;
            close(): void;
            getAsyncKeyState(virtualKey: undefined.VirtualKey): undefined.CoreVirtualKeyStates;
            getKeyState(virtualKey: undefined.VirtualKey): undefined.CoreVirtualKeyStates;
            releasePointerCapture(): void;
            setPointerCapture(): void;
            onactivated: any;
            onautomationproviderrequested: any;
            oncharacterreceived: any;
            onclosed: any;
            oninputenabled: any;
            onkeydown: any;
            onkeyup: any;
            onpointercapturelost: any;
            onpointerentered: any;
            onpointerexited: any;
            onpointermoved: any;
            onpointerpressed: any;
            onpointerreleased: any;
            ontouchhittesting: any;
            onpointerwheelchanged: any;
            onsizechanged: any;
            onvisibilitychanged: any;
            getForCurrentThread(): undefined.CoreWindow
        }
        declare     export class WindowActivatedEventArgs mixins undefined.IWindowActivatedEventArgs, undefined.ICoreWindowEventArgs {
            windowActivationState: undefined.CoreWindowActivationState;
            handled: boolean
        }
        declare     export class AutomationProviderRequestedEventArgs mixins undefined.IAutomationProviderRequestedEventArgs, undefined.ICoreWindowEventArgs {
            automationProvider: any;
            handled: boolean
        }
        declare     export class CharacterReceivedEventArgs mixins undefined.ICharacterReceivedEventArgs, undefined.ICoreWindowEventArgs {
            keyCode: number;
            keyStatus: undefined.CorePhysicalKeyStatus;
            handled: boolean
        }
        declare     export class CoreWindowEventArgs mixins undefined.ICoreWindowEventArgs {
            handled: boolean
        }
        declare     export class InputEnabledEventArgs mixins undefined.IInputEnabledEventArgs, undefined.ICoreWindowEventArgs {
            inputEnabled: boolean;
            handled: boolean
        }
        declare     export class KeyEventArgs mixins undefined.IKeyEventArgs, undefined.ICoreWindowEventArgs {
            keyStatus: undefined.CorePhysicalKeyStatus;
            virtualKey: undefined.VirtualKey;
            handled: boolean
        }
        declare     export class PointerEventArgs mixins undefined.IPointerEventArgs, undefined.ICoreWindowEventArgs {
            currentPoint: undefined.PointerPoint;
            keyModifiers: undefined.VirtualKeyModifiers;
            handled: boolean;
            getIntermediatePoints(): undefined.IVector<undefined.PointerPoint >
        }
        declare     export class TouchHitTestingEventArgs mixins undefined.ITouchHitTestingEventArgs, undefined.ICoreWindowEventArgs {
            boundingBox: undefined.Rect;
            point: undefined.Point;
            proximityEvaluation: undefined.CoreProximityEvaluation;
            handled: boolean;
            evaluateProximity(controlBoundingBox: undefined.Rect): undefined.CoreProximityEvaluation;
            evaluateProximity(controlVertices: undefined.Point[]): undefined.CoreProximityEvaluation
        }
        declare     export class WindowSizeChangedEventArgs mixins undefined.IWindowSizeChangedEventArgs, undefined.ICoreWindowEventArgs {
            size: undefined.Size;
            handled: boolean
        }
        declare     export class VisibilityChangedEventArgs mixins undefined.IVisibilityChangedEventArgs, undefined.ICoreWindowEventArgs {
            visible: boolean;
            handled: boolean
        }
        declare     export interface ICoreWindowStatic {
            getForCurrentThread(): undefined.CoreWindow
        }
        declare     export interface DispatchedHandler {
            (): void
        }
        declare     export interface IdleDispatchedHandler {
            (e: undefined.IdleDispatchedHandlerArgs): void
        }
        declare     export class IdleDispatchedHandlerArgs mixins undefined.IIdleDispatchedHandlerArgs {
            isDispatcherIdle: boolean
        }
        declare     export type IAcceleratorKeyEventArgs = {
            eventType: undefined.CoreAcceleratorKeyEventType,
            keyStatus: undefined.CorePhysicalKeyStatus,
            virtualKey: undefined.VirtualKey
        }
        declare     export interface ICoreAcceleratorKeys {
            onacceleratorkeyactivated: any
        }
        declare     export class AcceleratorKeyEventArgs mixins undefined.IAcceleratorKeyEventArgs, undefined.ICoreWindowEventArgs {
            eventType: undefined.CoreAcceleratorKeyEventType;
            keyStatus: undefined.CorePhysicalKeyStatus;
            virtualKey: undefined.VirtualKey;
            handled: boolean
        }
        declare     export type ICoreDispatcher = {
            hasThreadAccess: boolean,
            processEvents(options: undefined.CoreProcessEventsOption): void,
            runAsync(
                priority: undefined.CoreDispatcherPriority,
                agileCallback: undefined.DispatchedHandler): undefined.IAsyncAction,
            runIdleAsync(agileCallback: undefined.IdleDispatchedHandler): undefined.IAsyncAction
        }
        declare     export interface IIdleDispatchedHandlerArgs {
            isDispatcherIdle: boolean
        }
        declare     export class CoreAcceleratorKeys mixins undefined.ICoreAcceleratorKeys {
            onacceleratorkeyactivated: any
        }
        declare     export interface ICoreCursor {
            id: number,
                type: undefined.CoreCursorType
        }
        declare     export interface ICoreCursorFactory {
            createCursor(type: undefined.CoreCursorType, id: number): undefined.CoreCursor
        }
        declare     export interface IInitializeWithCoreWindow {
            initialize(window: undefined.CoreWindow): void
        }
        declare     export interface ICoreWindowResizeManager {
            notifyLayoutCompleted(): void
        }
        declare     export interface ICoreWindowResizeManagerStatics {
            getForCurrentView(): undefined.CoreWindowResizeManager
        }
        declare     export class CoreWindowResizeManager mixins undefined.ICoreWindowResizeManager {
            notifyLayoutCompleted(): void;
            getForCurrentView(): undefined.CoreWindowResizeManager
        }
        declare     export interface ICoreWindowPopupShowingEventArgs {
            setDesiredSize(value: undefined.Size): void
        }
        declare     export class CoreWindowPopupShowingEventArgs mixins undefined.ICoreWindowPopupShowingEventArgs {
            setDesiredSize(value: undefined.Size): void
        }
        declare     export interface ICoreWindowDialog {
            backButtonCommand: undefined.UICommandInvokedHandler,
                cancelCommandIndex: number,
                commands: undefined.IVector<undefined.IUICommand>,
                defaultCommandIndex: number,
                isInteractionDelayed: number,
                maxSize: undefined.Size,
                minSize: undefined.Size,
                title: string,
                onshowing: any,
                showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export interface ICoreWindowDialogFactory {
            createWithTitle(title: string): undefined.CoreWindowDialog
        }
        declare     export class CoreWindowDialog mixins undefined.ICoreWindowDialog {
            constructor(title: string): this;
            constructor(): this;
            backButtonCommand: undefined.UICommandInvokedHandler;
            cancelCommandIndex: number;
            commands: undefined.IVector<undefined.IUICommand>;
            defaultCommandIndex: number;
            isInteractionDelayed: number;
            maxSize: undefined.Size;
            minSize: undefined.Size;
            title: string;
            onshowing: any;
            showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export interface ICoreWindowFlyout {
            backButtonCommand: undefined.UICommandInvokedHandler,
                commands: undefined.IVector<undefined.IUICommand>,
                defaultCommandIndex: number,
                isInteractionDelayed: number,
                maxSize: undefined.Size,
                minSize: undefined.Size,
                title: string,
                onshowing: any,
                showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
        declare     export interface ICoreWindowFlyoutFactory {
            create(position: undefined.Point): undefined.CoreWindowFlyout,
                createWithTitle(position: undefined.Point, title: string): undefined.CoreWindowFlyout
        }
        declare     export class CoreWindowFlyout mixins undefined.ICoreWindowFlyout {
            constructor(position: undefined.Point): this;
            constructor(position: undefined.Point, title: string): this;
            backButtonCommand: undefined.UICommandInvokedHandler;
            commands: undefined.IVector<undefined.IUICommand>;
            defaultCommandIndex: number;
            isInteractionDelayed: number;
            maxSize: undefined.Size;
            minSize: undefined.Size;
            title: string;
            onshowing: any;
            showAsync(): undefined.IAsyncOperation<undefined.IUICommand >
        }
    }

    declare module 'WebUI' {
        declare     export interface IActivatedDeferral {
            complete(): void
        }
        declare     export class ActivatedDeferral mixins undefined.IActivatedDeferral {
            complete(): void
        }
        declare     export interface IActivatedOperation {
            getDeferral(): undefined.ActivatedDeferral
        }
        declare     export class ActivatedOperation mixins undefined.IActivatedOperation {
            getDeferral(): undefined.ActivatedDeferral
        }
        declare     export interface IActivatedEventArgsDeferral {
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUILaunchActivatedEventArgs mixins undefined.ILaunchActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            arguments: string;
            tileId: string;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUISearchActivatedEventArgs mixins undefined.ISearchActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            language: string;
            queryText: string;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIShareTargetActivatedEventArgs mixins undefined.IShareTargetActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            shareOperation: undefined.ShareOperation;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIFileActivatedEventArgs mixins undefined.IFileActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            files: undefined.IVectorView<undefined.IStorageItem>;
            verb: string;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIProtocolActivatedEventArgs mixins undefined.IProtocolActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            uri: undefined.Uri;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIFileOpenPickerActivatedEventArgs mixins undefined.IFileOpenPickerActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            fileOpenPickerUI: undefined.FileOpenPickerUI;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIFileSavePickerActivatedEventArgs mixins undefined.IFileSavePickerActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            fileSavePickerUI: undefined.FileSavePickerUI;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUICachedFileUpdaterActivatedEventArgs mixins undefined.ICachedFileUpdaterActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            cachedFileUpdaterUI: undefined.CachedFileUpdaterUI;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIContactPickerActivatedEventArgs mixins undefined.IContactPickerActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            contactPickerUI: undefined.ContactPickerUI;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIDeviceActivatedEventArgs mixins undefined.IDeviceActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            deviceInformationId: string;
            verb: string;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUIPrintTaskSettingsActivatedEventArgs mixins undefined.IPrintTaskSettingsActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            configuration: undefined.PrintTaskConfiguration;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export class WebUICameraSettingsActivatedEventArgs mixins undefined.ICameraSettingsActivatedEventArgs, undefined.IActivatedEventArgs, undefined.IActivatedEventArgsDeferral {
            videoDeviceController: any;
            videoDeviceExtension: any;
            kind: undefined.ActivationKind;
            previousExecutionState: undefined.ApplicationExecutionState;
            splashScreen: undefined.SplashScreen;
            activatedOperation: undefined.ActivatedOperation
        }
        declare     export interface ActivatedEventHandler {
            (sender: any, eventArgs: undefined.IActivatedEventArgs): void
        }
        declare     export interface ResumingEventHandler {
            (sender: any): void
        }
        declare     export interface SuspendingEventHandler {
            (sender: any, e: undefined.ISuspendingEventArgs): void
        }
        declare     export interface NavigatedEventHandler {
            (sender: any, e: undefined.IWebUINavigatedEventArgs): void
        }
        declare     export interface IWebUINavigatedEventArgs {
            navigatedOperation: undefined.WebUINavigatedOperation
        }
        declare     export class WebUINavigatedOperation mixins undefined.IWebUINavigatedOperation {
            getDeferral(): undefined.WebUINavigatedDeferral
        }
        declare     export class SuspendingDeferral mixins undefined.ISuspendingDeferral {
            complete(): void
        }
        declare     export class SuspendingOperation mixins undefined.ISuspendingOperation {
            deadline: Date;
            getDeferral(): undefined.SuspendingDeferral
        }
        declare     export class SuspendingEventArgs mixins undefined.ISuspendingEventArgs {
            suspendingOperation: undefined.SuspendingOperation
        }
        declare     export interface IWebUIBackgroundTaskInstance {
            succeeded: boolean
        }
        declare     export interface IWebUIBackgroundTaskInstanceStatics {
            current: undefined.IWebUIBackgroundTaskInstance
        }
        declare     export class WebUIBackgroundTaskInstanceRuntimeClass mixins undefined.IWebUIBackgroundTaskInstance, undefined.IBackgroundTaskInstance {
            succeeded: boolean;
            instanceId: string;
            progress: number;
            suspendedCount: number;
            task: undefined.BackgroundTaskRegistration;
            triggerDetails: any;
            oncanceled: any;
            getDeferral(): undefined.BackgroundTaskDeferral
        }
        declare     export class WebUIBackgroundTaskInstance {
            current: undefined.IWebUIBackgroundTaskInstance
        }
        declare     export interface IWebUINavigatedDeferral {
            complete(): void
        }
        declare     export class WebUINavigatedDeferral mixins undefined.IWebUINavigatedDeferral {
            complete(): void
        }
        declare     export interface IWebUINavigatedOperation {
            getDeferral(): undefined.WebUINavigatedDeferral
        }
        declare     export class WebUINavigatedEventArgs mixins undefined.IWebUINavigatedEventArgs {
            navigatedOperation: undefined.WebUINavigatedOperation
        }
        declare     export interface IWebUIActivationStatics {
            onactivated: any,
                onsuspending: any,
                onresuming: any,
                onnavigated: any
        }
        declare     export class WebUIApplication {
            onactivated: any;
            onsuspending: any;
            onresuming: any;
            onnavigated: any
        }
    }

    declare export interface IColors {}
    declare export interface IColorsStatics {
        aliceBlue: undefined.Color,
            antiqueWhite: undefined.Color,
            aqua: undefined.Color,
            aquamarine: undefined.Color,
            azure: undefined.Color,
            beige: undefined.Color,
            bisque: undefined.Color,
            black: undefined.Color,
            blanchedAlmond: undefined.Color,
            blue: undefined.Color,
            blueViolet: undefined.Color,
            brown: undefined.Color,
            burlyWood: undefined.Color,
            cadetBlue: undefined.Color,
            chartreuse: undefined.Color,
            chocolate: undefined.Color,
            coral: undefined.Color,
            cornflowerBlue: undefined.Color,
            cornsilk: undefined.Color,
            crimson: undefined.Color,
            cyan: undefined.Color,
            darkBlue: undefined.Color,
            darkCyan: undefined.Color,
            darkGoldenrod: undefined.Color,
            darkGray: undefined.Color,
            darkGreen: undefined.Color,
            darkKhaki: undefined.Color,
            darkMagenta: undefined.Color,
            darkOliveGreen: undefined.Color,
            darkOrange: undefined.Color,
            darkOrchid: undefined.Color,
            darkRed: undefined.Color,
            darkSalmon: undefined.Color,
            darkSeaGreen: undefined.Color,
            darkSlateBlue: undefined.Color,
            darkSlateGray: undefined.Color,
            darkTurquoise: undefined.Color,
            darkViolet: undefined.Color,
            deepPink: undefined.Color,
            deepSkyBlue: undefined.Color,
            dimGray: undefined.Color,
            dodgerBlue: undefined.Color,
            firebrick: undefined.Color,
            floralWhite: undefined.Color,
            forestGreen: undefined.Color,
            fuchsia: undefined.Color,
            gainsboro: undefined.Color,
            ghostWhite: undefined.Color,
            gold: undefined.Color,
            goldenrod: undefined.Color,
            gray: undefined.Color,
            green: undefined.Color,
            greenYellow: undefined.Color,
            honeydew: undefined.Color,
            hotPink: undefined.Color,
            indianRed: undefined.Color,
            indigo: undefined.Color,
            ivory: undefined.Color,
            khaki: undefined.Color,
            lavender: undefined.Color,
            lavenderBlush: undefined.Color,
            lawnGreen: undefined.Color,
            lemonChiffon: undefined.Color,
            lightBlue: undefined.Color,
            lightCoral: undefined.Color,
            lightCyan: undefined.Color,
            lightGoldenrodYellow: undefined.Color,
            lightGray: undefined.Color,
            lightGreen: undefined.Color,
            lightPink: undefined.Color,
            lightSalmon: undefined.Color,
            lightSeaGreen: undefined.Color,
            lightSkyBlue: undefined.Color,
            lightSlateGray: undefined.Color,
            lightSteelBlue: undefined.Color,
            lightYellow: undefined.Color,
            lime: undefined.Color,
            limeGreen: undefined.Color,
            linen: undefined.Color,
            magenta: undefined.Color,
            maroon: undefined.Color,
            mediumAquamarine: undefined.Color,
            mediumBlue: undefined.Color,
            mediumOrchid: undefined.Color,
            mediumPurple: undefined.Color,
            mediumSeaGreen: undefined.Color,
            mediumSlateBlue: undefined.Color,
            mediumSpringGreen: undefined.Color,
            mediumTurquoise: undefined.Color,
            mediumVioletRed: undefined.Color,
            midnightBlue: undefined.Color,
            mintCream: undefined.Color,
            mistyRose: undefined.Color,
            moccasin: undefined.Color,
            navajoWhite: undefined.Color,
            navy: undefined.Color,
            oldLace: undefined.Color,
            olive: undefined.Color,
            oliveDrab: undefined.Color,
            orange: undefined.Color,
            orangeRed: undefined.Color,
            orchid: undefined.Color,
            paleGoldenrod: undefined.Color,
            paleGreen: undefined.Color,
            paleTurquoise: undefined.Color,
            paleVioletRed: undefined.Color,
            papayaWhip: undefined.Color,
            peachPuff: undefined.Color,
            peru: undefined.Color,
            pink: undefined.Color,
            plum: undefined.Color,
            powderBlue: undefined.Color,
            purple: undefined.Color,
            red: undefined.Color,
            rosyBrown: undefined.Color,
            royalBlue: undefined.Color,
            saddleBrown: undefined.Color,
            salmon: undefined.Color,
            sandyBrown: undefined.Color,
            seaGreen: undefined.Color,
            seaShell: undefined.Color,
            sienna: undefined.Color,
            silver: undefined.Color,
            skyBlue: undefined.Color,
            slateBlue: undefined.Color,
            slateGray: undefined.Color,
            snow: undefined.Color,
            springGreen: undefined.Color,
            steelBlue: undefined.Color,
            tan: undefined.Color,
            teal: undefined.Color,
            thistle: undefined.Color,
            tomato: undefined.Color,
            transparent: undefined.Color,
            turquoise: undefined.Color,
            violet: undefined.Color,
            wheat: undefined.Color,
            white: undefined.Color,
            whiteSmoke: undefined.Color,
            yellow: undefined.Color,
            yellowGreen: undefined.Color
    }
    declare export class Colors mixins undefined.IColors {
        aliceBlue: undefined.Color;
        antiqueWhite: undefined.Color;
        aqua: undefined.Color;
        aquamarine: undefined.Color;
        azure: undefined.Color;
        beige: undefined.Color;
        bisque: undefined.Color;
        black: undefined.Color;
        blanchedAlmond: undefined.Color;
        blue: undefined.Color;
        blueViolet: undefined.Color;
        brown: undefined.Color;
        burlyWood: undefined.Color;
        cadetBlue: undefined.Color;
        chartreuse: undefined.Color;
        chocolate: undefined.Color;
        coral: undefined.Color;
        cornflowerBlue: undefined.Color;
        cornsilk: undefined.Color;
        crimson: undefined.Color;
        cyan: undefined.Color;
        darkBlue: undefined.Color;
        darkCyan: undefined.Color;
        darkGoldenrod: undefined.Color;
        darkGray: undefined.Color;
        darkGreen: undefined.Color;
        darkKhaki: undefined.Color;
        darkMagenta: undefined.Color;
        darkOliveGreen: undefined.Color;
        darkOrange: undefined.Color;
        darkOrchid: undefined.Color;
        darkRed: undefined.Color;
        darkSalmon: undefined.Color;
        darkSeaGreen: undefined.Color;
        darkSlateBlue: undefined.Color;
        darkSlateGray: undefined.Color;
        darkTurquoise: undefined.Color;
        darkViolet: undefined.Color;
        deepPink: undefined.Color;
        deepSkyBlue: undefined.Color;
        dimGray: undefined.Color;
        dodgerBlue: undefined.Color;
        firebrick: undefined.Color;
        floralWhite: undefined.Color;
        forestGreen: undefined.Color;
        fuchsia: undefined.Color;
        gainsboro: undefined.Color;
        ghostWhite: undefined.Color;
        gold: undefined.Color;
        goldenrod: undefined.Color;
        gray: undefined.Color;
        green: undefined.Color;
        greenYellow: undefined.Color;
        honeydew: undefined.Color;
        hotPink: undefined.Color;
        indianRed: undefined.Color;
        indigo: undefined.Color;
        ivory: undefined.Color;
        khaki: undefined.Color;
        lavender: undefined.Color;
        lavenderBlush: undefined.Color;
        lawnGreen: undefined.Color;
        lemonChiffon: undefined.Color;
        lightBlue: undefined.Color;
        lightCoral: undefined.Color;
        lightCyan: undefined.Color;
        lightGoldenrodYellow: undefined.Color;
        lightGray: undefined.Color;
        lightGreen: undefined.Color;
        lightPink: undefined.Color;
        lightSalmon: undefined.Color;
        lightSeaGreen: undefined.Color;
        lightSkyBlue: undefined.Color;
        lightSlateGray: undefined.Color;
        lightSteelBlue: undefined.Color;
        lightYellow: undefined.Color;
        lime: undefined.Color;
        limeGreen: undefined.Color;
        linen: undefined.Color;
        magenta: undefined.Color;
        maroon: undefined.Color;
        mediumAquamarine: undefined.Color;
        mediumBlue: undefined.Color;
        mediumOrchid: undefined.Color;
        mediumPurple: undefined.Color;
        mediumSeaGreen: undefined.Color;
        mediumSlateBlue: undefined.Color;
        mediumSpringGreen: undefined.Color;
        mediumTurquoise: undefined.Color;
        mediumVioletRed: undefined.Color;
        midnightBlue: undefined.Color;
        mintCream: undefined.Color;
        mistyRose: undefined.Color;
        moccasin: undefined.Color;
        navajoWhite: undefined.Color;
        navy: undefined.Color;
        oldLace: undefined.Color;
        olive: undefined.Color;
        oliveDrab: undefined.Color;
        orange: undefined.Color;
        orangeRed: undefined.Color;
        orchid: undefined.Color;
        paleGoldenrod: undefined.Color;
        paleGreen: undefined.Color;
        paleTurquoise: undefined.Color;
        paleVioletRed: undefined.Color;
        papayaWhip: undefined.Color;
        peachPuff: undefined.Color;
        peru: undefined.Color;
        pink: undefined.Color;
        plum: undefined.Color;
        powderBlue: undefined.Color;
        purple: undefined.Color;
        red: undefined.Color;
        rosyBrown: undefined.Color;
        royalBlue: undefined.Color;
        saddleBrown: undefined.Color;
        salmon: undefined.Color;
        sandyBrown: undefined.Color;
        seaGreen: undefined.Color;
        seaShell: undefined.Color;
        sienna: undefined.Color;
        silver: undefined.Color;
        skyBlue: undefined.Color;
        slateBlue: undefined.Color;
        slateGray: undefined.Color;
        snow: undefined.Color;
        springGreen: undefined.Color;
        steelBlue: undefined.Color;
        tan: undefined.Color;
        teal: undefined.Color;
        thistle: undefined.Color;
        tomato: undefined.Color;
        transparent: undefined.Color;
        turquoise: undefined.Color;
        violet: undefined.Color;
        wheat: undefined.Color;
        white: undefined.Color;
        whiteSmoke: undefined.Color;
        yellow: undefined.Color;
        yellowGreen: undefined.Color
    }
    declare export interface Color {
        a: number,
            r: number,
            g: number,
            b: number
    }
    declare export interface IColorHelper {}
    declare export interface IColorHelperStatics {
        fromArgb(a: number, r: number, g: number, b: number): undefined.Color
    }
    declare export class ColorHelper mixins undefined.IColorHelper {
        fromArgb(a: number, r: number, g: number, b: number): undefined.Color
    }
    declare module 'Notifications' {
        declare     export interface IToastDismissedEventArgs {
            reason: undefined.ToastDismissalReason
        }
        declare     export interface IToastFailedEventArgs {
            errorCode: number
        }
        declare     export interface ITileUpdateManagerStatics {
            createTileUpdaterForApplication(): undefined.TileUpdater,
                createTileUpdaterForApplication(applicationId: string): undefined.TileUpdater,
                createTileUpdaterForSecondaryTile(tileId: string): undefined.TileUpdater,
                getTemplateContent(type: undefined.TileTemplateType): undefined.XmlDocument
        }
        declare     export class TileUpdater mixins undefined.ITileUpdater {
            setting: undefined.NotificationSetting;
            update(notification: undefined.TileNotification): void;
            clear(): void;
            enableNotificationQueue(enable: boolean): void;
            addToSchedule(scheduledTile: undefined.ScheduledTileNotification): void;
            removeFromSchedule(scheduledTile: undefined.ScheduledTileNotification): void;
            getScheduledTileNotifications(): undefined.IVectorView<undefined.ScheduledTileNotification>;
            startPeriodicUpdate(
                tileContent: undefined.Uri,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void;
            startPeriodicUpdate(
                tileContent: undefined.Uri,
                startTime: Date,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void;
            stopPeriodicUpdate(): void;
            startPeriodicUpdateBatch(
                tileContents: undefined.IIterable<undefined.Uri>,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void;
            startPeriodicUpdateBatch(
                tileContents: undefined.IIterable<undefined.Uri>,
                startTime: Date,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void
        }
        declare     export interface ITileUpdater {
            setting: undefined.NotificationSetting,
                update(notification: undefined.TileNotification): void,
                clear(): void,
                enableNotificationQueue(enable: boolean): void,
                addToSchedule(scheduledTile: undefined.ScheduledTileNotification): void,
                removeFromSchedule(scheduledTile: undefined.ScheduledTileNotification): void,
                getScheduledTileNotifications(): undefined.IVectorView<undefined.ScheduledTileNotification>,
                startPeriodicUpdate(
                    tileContent: undefined.Uri,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void,
                startPeriodicUpdate(
                    tileContent: undefined.Uri,
                    startTime: Date,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void,
                stopPeriodicUpdate(): void,
                startPeriodicUpdateBatch(
                    tileContents: undefined.IIterable<undefined.Uri>,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void,
                startPeriodicUpdateBatch(
                    tileContents: undefined.IIterable<undefined.Uri>,
                    startTime: Date,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void
        }
        declare     export class TileNotification mixins undefined.ITileNotification {
            constructor(content: undefined.XmlDocument): this;
            content: undefined.XmlDocument;
            expirationTime: Date;
            tag: string
        }
        declare     export class ScheduledTileNotification mixins undefined.IScheduledTileNotification {
            constructor(content: undefined.XmlDocument, deliveryTime: Date): this;
            content: undefined.XmlDocument;
            deliveryTime: Date;
            expirationTime: Date;
            id: string;
            tag: string
        }
        declare     export interface IBadgeUpdateManagerStatics {
            createBadgeUpdaterForApplication(): undefined.BadgeUpdater,
                createBadgeUpdaterForApplication(applicationId: string): undefined.BadgeUpdater,
                createBadgeUpdaterForSecondaryTile(tileId: string): undefined.BadgeUpdater,
                getTemplateContent(type: undefined.BadgeTemplateType): undefined.XmlDocument
        }
        declare     export class BadgeUpdater mixins undefined.IBadgeUpdater {
            update(notification: undefined.BadgeNotification): void;
            clear(): void;
            startPeriodicUpdate(
                badgeContent: undefined.Uri,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void;
            startPeriodicUpdate(
                badgeContent: undefined.Uri,
                startTime: Date,
                requestedInterval: undefined.PeriodicUpdateRecurrence): void;
            stopPeriodicUpdate(): void
        }
        declare     export interface IBadgeUpdater {
            update(notification: undefined.BadgeNotification): void,
                clear(): void,
                startPeriodicUpdate(
                    badgeContent: undefined.Uri,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void,
                startPeriodicUpdate(
                    badgeContent: undefined.Uri,
                    startTime: Date,
                    requestedInterval: undefined.PeriodicUpdateRecurrence): void,
                stopPeriodicUpdate(): void
        }
        declare     export class BadgeNotification mixins undefined.IBadgeNotification {
            constructor(content: undefined.XmlDocument): this;
            content: undefined.XmlDocument;
            expirationTime: Date
        }
        declare     export interface IToastNotificationManagerStatics {
            createToastNotifier(): undefined.ToastNotifier,
                createToastNotifier(applicationId: string): undefined.ToastNotifier,
                getTemplateContent(type: undefined.ToastTemplateType): undefined.XmlDocument
        }
        declare     export class ToastNotifier mixins undefined.IToastNotifier {
            setting: undefined.NotificationSetting;
            show(notification: undefined.ToastNotification): void;
            hide(notification: undefined.ToastNotification): void;
            addToSchedule(scheduledToast: undefined.ScheduledToastNotification): void;
            removeFromSchedule(scheduledToast: undefined.ScheduledToastNotification): void;
            getScheduledToastNotifications(): undefined.IVectorView<undefined.ScheduledToastNotification >
        }
        declare     export interface IToastNotifier {
            setting: undefined.NotificationSetting,
                show(notification: undefined.ToastNotification): void,
                hide(notification: undefined.ToastNotification): void,
                addToSchedule(scheduledToast: undefined.ScheduledToastNotification): void,
                removeFromSchedule(scheduledToast: undefined.ScheduledToastNotification): void,
                getScheduledToastNotifications(): undefined.IVectorView<undefined.ScheduledToastNotification >
        }
        declare     export class ToastNotification mixins undefined.IToastNotification {
            constructor(content: undefined.XmlDocument): this;
            content: undefined.XmlDocument;
            expirationTime: Date;
            ondismissed: any;
            onactivated: any;
            onfailed: any
        }
        declare     export class ScheduledToastNotification mixins undefined.IScheduledToastNotification {
            constructor(content: undefined.XmlDocument, deliveryTime: Date): this;
            constructor(content: undefined.XmlDocument, deliveryTime: Date, snoozeInterval: number, maximumSnoozeCount: number): this;
            content: undefined.XmlDocument;
            deliveryTime: Date;
            id: string;
            maximumSnoozeCount: number;
            snoozeInterval: number
        }
        declare     export interface ITileNotificationFactory {
            createTileNotification(content: undefined.XmlDocument): undefined.TileNotification
        }
        declare     export interface ITileNotification {
            content: undefined.XmlDocument,
                expirationTime: Date,
                tag: string
        }
        declare     export interface IBadgeNotificationFactory {
            createBadgeNotification(content: undefined.XmlDocument): undefined.BadgeNotification
        }
        declare     export interface IBadgeNotification {
            content: undefined.XmlDocument,
                expirationTime: Date
        }
        declare     export interface IToastNotificationFactory {
            createToastNotification(content: undefined.XmlDocument): undefined.ToastNotification
        }
        declare     export interface IToastNotification {
            content: undefined.XmlDocument,
                expirationTime: Date,
                ondismissed: any,
                onactivated: any,
                onfailed: any
        }
        declare     export class ToastDismissedEventArgs mixins undefined.IToastDismissedEventArgs {
            reason: undefined.ToastDismissalReason
        }
        declare     export class ToastFailedEventArgs mixins undefined.IToastFailedEventArgs {
            errorCode: number
        }
        declare     export interface IScheduledToastNotificationFactory {
            createScheduledToastNotification(
                    content: undefined.XmlDocument,
                    deliveryTime: Date): undefined.ScheduledToastNotification,
                createScheduledToastNotification(
                    content: undefined.XmlDocument,
                    deliveryTime: Date,
                    snoozeInterval: number,
                    maximumSnoozeCount: number): undefined.ScheduledToastNotification
        }
        declare     export interface IScheduledToastNotification {
            content: undefined.XmlDocument,
                deliveryTime: Date,
                id: string,
                maximumSnoozeCount: number,
                snoozeInterval: number
        }
        declare     export interface IScheduledTileNotificationFactory {
            createScheduledTileNotification(
                content: undefined.XmlDocument,
                deliveryTime: Date): undefined.ScheduledTileNotification
        }
        declare     export interface IScheduledTileNotification {
            content: undefined.XmlDocument,
                deliveryTime: Date,
                expirationTime: Date,
                id: string,
                tag: string
        }
        declare     export class TileUpdateManager {
            createTileUpdaterForApplication(): undefined.TileUpdater;
            createTileUpdaterForApplication(applicationId: string): undefined.TileUpdater;
            createTileUpdaterForSecondaryTile(tileId: string): undefined.TileUpdater;
            getTemplateContent(type: undefined.TileTemplateType): undefined.XmlDocument
        }
        declare     export class BadgeUpdateManager {
            createBadgeUpdaterForApplication(): undefined.BadgeUpdater;
            createBadgeUpdaterForApplication(applicationId: string): undefined.BadgeUpdater;
            createBadgeUpdaterForSecondaryTile(tileId: string): undefined.BadgeUpdater;
            getTemplateContent(type: undefined.BadgeTemplateType): undefined.XmlDocument
        }
        declare     export class ToastNotificationManager {
            createToastNotifier(): undefined.ToastNotifier;
            createToastNotifier(applicationId: string): undefined.ToastNotifier;
            getTemplateContent(type: undefined.ToastTemplateType): undefined.XmlDocument
        }
    }

}