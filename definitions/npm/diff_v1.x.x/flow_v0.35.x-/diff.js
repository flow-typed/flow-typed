/**
 * Flowtype definitions for diff
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare
var npm$namespace$JsDiff: {
    diffChars: typeof JsDiff$diffChars,
    diffWords: typeof JsDiff$diffWords,
    diffWordsWithSpace: typeof JsDiff$diffWordsWithSpace,
    diffJson: typeof JsDiff$diffJson,
    diffLines: typeof JsDiff$diffLines,
    diffCss: typeof JsDiff$diffCss,
    createPatch: typeof JsDiff$createPatch,
    createTwoFilesPatch: typeof JsDiff$createTwoFilesPatch,
    structuredPatch: typeof JsDiff$structuredPatch,
    applyPatch: typeof JsDiff$applyPatch,
    applyPatches: typeof JsDiff$applyPatches,
    parsePatch: typeof JsDiff$parsePatch,
    convertChangesToXML: typeof JsDiff$convertChangesToXML,
    convertChangesToDMP: typeof JsDiff$convertChangesToDMP,
}
declare interface JsDiff$IDiffResult {
    value: string,
        count?: number,
        added?: boolean,
        removed?: boolean
}

declare interface JsDiff$IBestPath {
    newPos: number,
        componenets: JsDiff$IDiffResult[]
}

declare interface JsDiff$IHunk {
    oldStart: number,
        oldLines: number,
        newStart: number,
        newLines: number,
        lines: string[]
}

declare interface JsDiff$IUniDiff {
    oldFileName: string,
        newFileName: string,
        oldHeader: string,
        newHeader: string,
        hunks: JsDiff$IHunk[]
}

declare class Diff {
    ignoreWhitespace: boolean;
    constructor(ignoreWhitespace?: boolean): this;
    diff(oldString: string, newString: string): JsDiff$IDiffResult[];
    pushComponent(
        components: JsDiff$IDiffResult[],
        value: string,
        added: boolean,
        removed: boolean): void;
    extractCommon(
        basePath: JsDiff$IBestPath,
        newString: string,
        oldString: string,
        diagonalPath: number): number;
    equals(left: string, right: string): boolean;
    join(left: string, right: string): string;
    tokenize(value: string): any
}

declare
function JsDiff$diffChars(oldStr: string, newStr: string): JsDiff$IDiffResult[]

declare
function JsDiff$diffWords(oldStr: string, newStr: string): JsDiff$IDiffResult[]

declare
function JsDiff$diffWordsWithSpace(oldStr: string, newStr: string): JsDiff$IDiffResult[]

declare
function JsDiff$diffJson(oldObj: Object, newObj: Object): JsDiff$IDiffResult[]

declare
function JsDiff$diffLines(oldStr: string, newStr: string): JsDiff$IDiffResult[]

declare
function JsDiff$diffCss(oldStr: string, newStr: string): JsDiff$IDiffResult[]

declare
function JsDiff$createPatch(
    fileName: string,
    oldStr: string,
    newStr: string,
    oldHeader: string,
    newHeader: string,
    options?: {
        context: number
    }): string

declare
function JsDiff$createTwoFilesPatch(
    oldFileName: string,
    newFileName: string,
    oldStr: string,
    newStr: string,
    oldHeader: string,
    newHeader: string,
    options?: {
        context: number
    }): string

declare
function JsDiff$structuredPatch(
    oldFileName: string,
    newFileName: string,
    oldStr: string,
    newStr: string,
    oldHeader: string,
    newHeader: string,
    options?: {
        context: number
    }): JsDiff$IUniDiff

declare
function JsDiff$applyPatch(oldStr: string, uniDiff: string | JsDiff$IUniDiff | JsDiff$IUniDiff[]): string

declare
function JsDiff$applyPatches(
    uniDiff: JsDiff$IUniDiff[],
    options: {
        loadFile: (index: number, callback: (err: Error, data: string) => void) => void,
        patched: (index: number, content: string) => void,
        complete: (err?: Error) => void
    }): void

declare
function JsDiff$parsePatch(diffStr: string, options?: {
    strict: boolean
}): JsDiff$IUniDiff[]

declare
function JsDiff$convertChangesToXML(changes: JsDiff$IDiffResult[]): string

declare
function JsDiff$convertChangesToDMP(changes: JsDiff$IDiffResult[]): {
    0: number,
    1: string
}[] declare module 'diff' {
    declare module.exports: typeof JsDiff
}