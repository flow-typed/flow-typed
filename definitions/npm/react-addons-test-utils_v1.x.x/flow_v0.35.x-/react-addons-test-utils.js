/**
 * Flowtype definitions for react-addons-test-utils
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface ___React$OptionalEventProperties {
    bubbles?: boolean,
        cancelable?: boolean,
        currentTarget?: EventTarget,
        defaultPrevented?: boolean,
        eventPhase?: number,
        isTrusted?: boolean,
        nativeEvent?: Event,
        preventDefault(): void,
        stopPropagation(): void,
        target?: EventTarget,
        timeStamp?: Date,
        type?: string
}

declare type ___React$SyntheticEventData = {
    altKey?: boolean,
    button?: number,
    buttons?: number,
    clientX?: number,
    clientY?: number,
    changedTouches?: TouchList,
    charCode?: boolean,
    clipboardData?: DataTransfer,
    ctrlKey?: boolean,
    deltaMode?: number,
    deltaX?: number,
    deltaY?: number,
    deltaZ?: number,
    detail?: number,
    getModifierState(key: string): boolean,
    key?: string,
    keyCode?: number,
    locale?: string,
    location?: number,
    metaKey?: boolean,
    pageX?: number,
    pageY?: number,
    relatedTarget?: EventTarget,
    repeat?: boolean,
    screenX?: number,
    screenY?: number,
    shiftKey?: boolean,
    targetTouches?: TouchList,
    touches?: TouchList,
    view?: AbstractView,
    which?: number
} & ___React$OptionalEventProperties


declare interface ___React$EventSimulator {
    (element: Element | Component<any, any>, eventData?: ___React$SyntheticEventData): void
}

declare interface ___React$MockedComponentClass {
    new(): any
}

declare class ShallowRenderer {
    getRenderOutput<E>(): E;
    getRenderOutput(): ReactElement<any>;
    render(element: ReactElement<any>, context?: any): void;
    unmount(): void
}


declare
var npm$namespace$TestUtils: {
    renderIntoDocument: typeof TestUtils$renderIntoDocument,
    mockComponent: typeof TestUtils$mockComponent,
    isElementOfType: typeof TestUtils$isElementOfType,
    isDOMComponent: typeof TestUtils$isDOMComponent,
    isCompositeComponent: typeof TestUtils$isCompositeComponent,
    isCompositeComponentWithType: typeof TestUtils$isCompositeComponentWithType,
    findAllInRenderedTree: typeof TestUtils$findAllInRenderedTree,
    scryRenderedDOMComponentsWithClass: typeof TestUtils$scryRenderedDOMComponentsWithClass,
    findRenderedDOMComponentWithClass: typeof TestUtils$findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithTag: typeof TestUtils$scryRenderedDOMComponentsWithTag,
    findRenderedDOMComponentWithTag: typeof TestUtils$findRenderedDOMComponentWithTag,
    scryRenderedComponentsWithType: typeof TestUtils$scryRenderedComponentsWithType,
    findRenderedComponentWithType: typeof TestUtils$findRenderedComponentWithType,
    createRenderer: typeof TestUtils$createRenderer,
}
declare
export var blur: ___React$EventSimulator;

declare
export var change: ___React$EventSimulator;

declare
export var click: ___React$EventSimulator;

declare
export var copy: ___React$EventSimulator;

declare
export var cut: ___React$EventSimulator;

declare
export var doubleClick: ___React$EventSimulator;

declare
export var drag: ___React$EventSimulator;

declare
export var dragEnd: ___React$EventSimulator;

declare
export var dragEnter: ___React$EventSimulator;

declare
export var dragExit: ___React$EventSimulator;

declare
export var dragLeave: ___React$EventSimulator;

declare
export var dragOver: ___React$EventSimulator;

declare
export var dragStart: ___React$EventSimulator;

declare
export var drop: ___React$EventSimulator;

declare
export var focus: ___React$EventSimulator;

declare
export var input: ___React$EventSimulator;

declare
export var keyDown: ___React$EventSimulator;

declare
export var keyPress: ___React$EventSimulator;

declare
export var keyUp: ___React$EventSimulator;

declare
export var mouseDown: ___React$EventSimulator;

declare
export var mouseEnter: ___React$EventSimulator;

declare
export var mouseLeave: ___React$EventSimulator;

declare
export var mouseMove: ___React$EventSimulator;

declare
export var mouseOut: ___React$EventSimulator;

declare
export var mouseOver: ___React$EventSimulator;

declare
export var mouseUp: ___React$EventSimulator;

declare
export var paste: ___React$EventSimulator;

declare
export var scroll: ___React$EventSimulator;

declare
export var submit: ___React$EventSimulator;

declare
export var touchCancel: ___React$EventSimulator;

declare
export var touchEnd: ___React$EventSimulator;

declare
export var touchMove: ___React$EventSimulator;

declare
export var touchStart: ___React$EventSimulator;

declare
export var wheel: ___React$EventSimulator;

declare
export function TestUtils$renderIntoDocument<T>(element: DOMElement<any, T>): T

declare
export function TestUtils$mockComponent(mocked: ___React$MockedComponentClass, mockTagName?: string): typeof TestUtils

declare
export function TestUtils$isElementOfType<T>(element: ReactElement<any>, type: string): ReactHTMLElement

declare
export function TestUtils$isDOMComponent(instance: ReactInstance): Element

declare
export function TestUtils$isCompositeComponent(instance: ReactInstance): Component

declare
export function TestUtils$isCompositeComponentWithType<T, C>(instance: ReactInstance, type: ClassType<any, T, C>): T

declare
export function TestUtils$findAllInRenderedTree(root: Component<any, any>, fn: (i: ReactInstance) => boolean): ReactInstance[]

declare
export function TestUtils$scryRenderedDOMComponentsWithClass(root: Component<any, any>, className: string): Element[]

declare
export function TestUtils$findRenderedDOMComponentWithClass(root: Component<any, any>, className: string): Element

declare
export function TestUtils$scryRenderedDOMComponentsWithTag(root: Component<any, any>, tagName: string): Element[]

declare
export function TestUtils$findRenderedDOMComponentWithTag(root: Component<any, any>, tagName: string): Element

declare
export function TestUtils$scryRenderedComponentsWithType<T, C>(root: Component<any, any>, type: ClassType<any, T, C>): T[]

declare
export function TestUtils$findRenderedComponentWithType<T, C>(root: Component<any, any>, type: ClassType<any, T, C>): T

declare
export function TestUtils$createRenderer(): ___React$ShallowRendererdeclare module 'react-addons-test-utils' {
    declare module.exports: typeof TestUtils
}