/**
 * Flowtype definitions for office-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'Types' {
    declare export type ItemRead = {
        subject: any,

        /**
         * Displays a reply form that includes the sender and all the recipients of the selected message
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyAllForm(htmlBody: string): void,

        /**
         * Displays a reply form that includes only the sender of the selected message
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyForm(htmlBody: string): void,

        /**
         * Gets an array of entities found in an message
         */
        getEntities(): Office$Entities,

        /**
         * Gets an array of entities of the specified entity type found in an message
         * @param entityType One of the EntityType enumeration values
         */
        getEntitiesByType(entityType: undefined.EntityType): Office$Entities,

        /**
         * Returns well-known entities that pass the named filter defined in the manifest XML file
         * @param name A TableData object with the headers and rows
         */
        getFilteredEntitiesByName(name: string): Office$Entities,

        /**
         * Returns string values in the currently selected message object that match the regular expressions defined in the manifest XML file
         */
        getRegExMatches(): string[],

        /**
         * Returns string values that match the named regular expression defined in the manifest XML file
         */
        getRegExMatchesByName(name: string): string[]
    }
    declare export type ItemCompose = {
        body: Office$Body,
        subject: any,

        /**
         * Adds a file to a message as an attachment
         * @param uri The URI that provides the location of the file to attach to the message. The maximum length is 2048 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addFileAttachmentAsync(
            uri: string,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Adds an Exchange item, such as a message, as an attachment to the message
         * @param itemId The Exchange identifier of the item to attach. The maximum length is 100 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addItemAttachmentAsync(
            itemId: any,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Removes an attachment from a message
         * @param attachmentIndex The index of the attachment to remove. The maximum length of the string is 100 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        removeAttachmentAsync(
            attachmentIndex: string,
            option?: any,
            callback?: (result: Office$AsyncResult) => void): void
    }
    declare export type MessageCompose = {
        attachments: Office$AttachmentDetails[],
        body: Office$Body,
        bcc: Office$Recipients,
        cc: Office$Recipients,
        subject: Office$Subject,
        to: Office$Recipients,

        /**
         * Adds a file to a message as an attachment
         * @param uri The URI that provides the location of the file to attach to the message. The maximum length is 2048 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addFileAttachmentAsync(
            uri: string,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Adds an Exchange item, such as a message, as an attachment to the message
         * @param itemId The Exchange identifier of the item to attach. The maximum length is 100 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addItemAttachmentAsync(
            itemId: any,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Removes an attachment from a message
         * @param attachmentIndex The index of the attachment to remove. The maximum length of the string is 100 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        removeAttachmentAsync(
            attachmentIndex: string,
            option?: any,
            callback?: (result: Office$AsyncResult) => void): void
    }
    declare export type MessageRead = {
        cc: Office$EmailAddressDetails[],
        from: Office$EmailAddressDetails,
        internetMessageId: string,
        normalizedSubject: string,
        sender: Office$EmailAddressDetails,
        subject: string,
        to: Office$EmailAddressDetails,

        /**
         * Displays a reply form that includes the sender and all the recipients of the selected message
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyAllForm(htmlBody: string): void,

        /**
         * Displays a reply form that includes only the sender of the selected message
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyForm(htmlBody: string): void,

        /**
         * Gets an array of entities found in an message
         */
        getEntities(): Office$Entities,

        /**
         * Gets an array of entities of the specified entity type found in an message
         * @param entityType One of the EntityType enumeration values
         */
        getEntitiesByType(entityType: undefined.EntityType): Office$Entities,

        /**
         * Returns well-known entities that pass the named filter defined in the manifest XML file
         * @param name A TableData object with the headers and rows
         */
        getFilteredEntitiesByName(name: string): Office$Entities,

        /**
         * Returns string values in the currently selected message object that match the regular expressions defined in the manifest XML file
         */
        getRegExMatches(): string[],

        /**
         * Returns string values that match the named regular expression defined in the manifest XML file
         */
        getRegExMatchesByName(name: string): string[]
    }
    declare export type AppointmentCompose = {
        body: Office$Body,
        end: Office$Time,
        location: Office$Location,
        optionalAttendees: Office$Recipients,
        requiredAttendees: Office$Recipients,
        start: Office$Time,
        subject: Office$Subject,

        /**
         * Adds a file to an appointment as an attachment
         * @param uri The URI that provides the location of the file to attach to the appointment. The maximum length is 2048 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addFileAttachmentAsync(
            uri: string,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Adds an Exchange item, such as a message, as an attachment to the appointment
         * @param itemId The Exchange identifier of the item to attach. The maximum length is 100 characters
         * @param attachmentName The name of the attachment that is shown while the attachment is uploading. The maximum length is 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        addItemAttachmentAsync(
            itemId: any,
            attachmentName: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Removes an attachment from a appointment
         * @param attachmentIndex The index of the attachment to remove. The maximum length of the string is 100 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional callback method
         */
        removeAttachmentAsync(
            attachmentIndex: string,
            option?: any,
            callback?: (result: Office$AsyncResult) => void): void
    }
    declare export type AppointmentRead = {
        attachments: Office$AttachmentDetails[],
        end: Date,
        location: string,
        normalizedSubject: string,
        optionalAttendees: Office$EmailAddressDetails,
        organizer: Office$EmailAddressDetails,
        requiredAttendees: Office$EmailAddressDetails,
        resources: string[],
        start: Date,
        subject: string,

        /**
         * Displays a reply form that includes the organizer and all the attendees of the selected appointment item
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyAllForm(htmlBody: string): void,

        /**
         * Displays a reply form that includes only the organizer of the selected appointment item
         * @param htmlBody A string that contains text and HTML and that represents the body of the reply form. The string is limited to 32 KB
         */
        displayReplyForm(htmlBody: string): void,

        /**
         * Gets an array of entities found in an appointment
         */
        getEntities(): Office$Entities,

        /**
         * Gets an array of entities of the specified entity type found in an appointment
         * @param entityType One of the EntityType enumeration values
         */
        getEntitiesByType(entityType: undefined.EntityType): Office$Entities,

        /**
         * Returns well-known entities that pass the named filter defined in the manifest XML file
         * @param name A TableData object with the headers and rows
         */
        getFilteredEntitiesByName(name: string): Office$Entities,

        /**
         * Returns string values in the currently selected appointment object that match the regular expressions defined in the manifest XML file
         */
        getRegExMatches(): string[],

        /**
         * Returns string values that match the named regular expression defined in the manifest XML file
         */
        getRegExMatchesByName(name: string): string[]
    }
}


declare module 'cast' {
    declare module 'item' {
        declare     function toAppointmentCompose(item: Office$Item): undefined.AppointmentCompose
        declare     function toAppointmentRead(item: Office$Item): undefined.AppointmentRead
        declare     function toAppointment(item: Office$Item): Office$Appointment
        declare     function toMessageCompose(item: Office$Item): undefined.MessageCompose
        declare     function toMessageRead(item: Office$Item): undefined.MessageRead
        declare     function toMessage(item: Office$Item): Office$Message
        declare     function toItemCompose(item: Office$Item): undefined.ItemCompose
        declare     function toItemRead(item: Office$Item): undefined.ItemRead
    }

}


declare
export interface Office$AttachmentDetails {
    attachmentType: undefined.AttachmentType,
        contentType: string,
        id: string,
        isInline: boolean,
        name: string,
        size: number
}

declare
export interface Office$Contact {
    personName: string,
        businessName: string,
        phoneNumbers: Office$PhoneNumber[],
        emailAddresses: string[],
        urls: string[],
        addresses: string[],
        contactString: string
}

declare
export interface Office$Context {
    contentLanguage: string,
        displayLanguage: string,
        license: string,
        touchEnabled: boolean,
        ui: Office$UI,
        requirements: {

            /**
             * Check if the specified requirement set is supported by the host Office application.
             * @param name - Set name. e.g.: "MatrixBindings".
             * @param minVersion - The minimum required version.
             */
            isSetSupported(name: string, minVersion?: number): boolean
        }
}

declare
export interface Office$CustomProperties {

    /**
     * Returns the value of the specified custom property
     * @param name The name of the property to be returned
     */
    get(name: string): any,

        /**
         * Sets the specified property to the specified value
         * @param name The name of the property to be set
         * @param value The value of the property to be set
         */
        set(name: string, value: string): void,

        /**
         * Removes the specified property from the custom property collection.
         * @param name The name of the property to be removed
         */
        remove(name: string): void,

        /**
         * Saves the custom property collection to the server
         * @param callback The optional callback method
         * @param userContext Optional variable for any state data that is passed to the saveAsync method
         */
        saveAsync(callback?: (result: Office$AsyncResult) => void, userContext?: any): void
}

declare
export interface Office$EmailAddressDetails {
    emailAddress: string,
        displayName: string,
        appointmentResponse: undefined.ResponseType,
        recipientType: undefined.RecipientType
}

declare
export interface Office$EmailUser {
    name: string,
        userId: string
}

declare
export interface Office$Entities {
    addresses: string[],
        taskSuggestions: string[],
        meetingSuggestions: Office$MeetingSuggestion[],
        emailAddresses: string[],
        urls: string[],
        phoneNumbers: Office$PhoneNumber[],
        contacts: Office$Contact[]
}

declare
export interface Office$Item {
    dateTimeCreated: Date,
        dateTimeModified: Date,
        itemClass: string,
        itemId: string,
        itemType: undefined.ItemType,

        /**
         * Asynchronously loads custom properties that are specific to the item and a app for Office
         * @param callback The optional callback method
         * @param userContext Optional variable for any state data that is passed to the asynchronous method
         */
        loadCustomPropertiesAsync(callback?: (result: Office$AsyncResult) => void, userContext?: any): void
}

declare
export type Office$Appointment = {} & Office$Item


declare
export interface Office$Body {

    /**
     * Gets a value that indicates whether the content is in HTML or text format
     * @param tableData A TableData object with the headers and rows
     * @param options Any optional parameters or state data passed to the method
     * @param callback The optional method to call when the getTypeAsync method returns
     */
    getTypeAsync(options?: any, callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Adds the specified content to the beginning of the item body
         * @param data The string to be inserted at the beginning of the body. The string is limited to 1,000,000 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        prependAsync(
            data: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Replaces the selection in the body with the specified text
         * @param data The string to be inserted at the beginning of the body. The string is limited to 1,000,000 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        setSelectedDataAsync(
            data: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void
}

declare
export interface Office$Location {

    /**
     * Begins an asynchronous request for the location of an appointment
     * @param options Any optional parameters or state data passed to the method
     * @param callback The optional method to call when the string is inserted
     */
    getAsync(options?: any, callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Begins an asynchronous request to set the location of an appointment
         * @param data The location of the appointment. The string is limited to 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the location is set
         */
        setAsync(
            location: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void
}

declare
export interface Office$Mailbox {
    item: Office$Item,
        userProfile: Office$UserProfile,

        /**
         * Gets a Date object from a dictionary containing time information
         * @param timeValue A Date object
         */
        convertToLocalClientTime(timeValue: Date): any,

        /**
         * Gets a dictionary containing time information in local client time
         * @param input A dictionary containing a date. The dictionary should contain the following fields: year, month, date, hours, minutes, seconds, time zone, time zone offset
         */
        convertToUtcClientTime(input: any): Date,

        /**
         * Displays an existing calendar appointment
         * @param itemId The Exchange Web Services (EWS) identifier for an existing calendar appointment
         */
        displayAppointmentForm(itemId: any): void,

        /**
         * Displays an existing message
         * @param itemId The Exchange Web Services (EWS) identifier for an existing message
         */
        displayMessageForm(itemId: any): void,

        /**
         * Displays a form for creating a new calendar appointment
         * @param requiredAttendees An array of strings containing the email addresses or an array containing an EmailAddressDetails object for each of the required attendees for the appointment. The array is limited to a maximum of 100 entries
         * @param optionalAttendees An array of strings containing the email addresses or an array containing an EmailAddressDetails object for each of the optional attendees for the appointment. The array is limited to a maximum of 100 entries
         * @param start A Date object specifying the start date and time of the appointment
         * @param end A Date object specifying the end date and time of the appointment
         * @param location A string containing the location of the appointment. The string is limited to a maximum of 255 characters
         * @param resources An array of strings containing the resources required for the appointment. The array is limited to a maximum of 100 entries
         * @param subject A string containing the subject of the appointment. The string is limited to a maximum of 255 characters
         * @param body The body of the appointment message. The body content is limited to a maximum size of 32 KB
         */
        displayNewAppointmentForm(
            requiredAttendees: any,
            optionalAttendees: any,
            start: Date,
            end: Date,
            location: string,
            resources: string[],
            subject: string,
            body: string): void,

        /**
         * Gets a string that contains a token used to get an attachment or item from an Exchange Server
         * @param callback The optional method to call when the string is inserted
         * @param userContext Optional variable for any state data that is passed to the asynchronous method
         */
        getCallbackTokenAsync(callback?: (result: Office$AsyncResult) => void, userContext?: any): void,

        /**
         * Gets a token identifying the user and the app for Office
         * @param callback The optional method to call when the string is inserted
         * @param userContext Optional variable for any state data that is passed to the asynchronous method
         */
        getUserIdentityTokenAsync(callback?: (result: Office$AsyncResult) => void, userContext?: any): void,

        /**
         * Makes an asynchronous request to an Exchange Web Services (EWS) service on the Exchange server that hosts the user’s mailbox
         * @param data The EWS request
         * @param callback The optional method to call when the string is inserted
         * @param userContext Optional variable for any state data that is passed to the asynchronous method
         */
        makeEwsRequestAsync(
            data: any,
            callback?: (result: Office$AsyncResult) => void,
            userContext?: any): void
}

declare
export type Office$Message = {
    conversationId: string
} & Office$Item


declare
export type Office$MeetingRequest = {
    start: Date,
    end: Date,
    location: string,
    optionalAttendees: Office$EmailAddressDetails[],
    requiredAttendees: Office$EmailAddressDetails[]
} & Office$Message


declare
export interface Office$MeetingSuggestion {
    meetingString: string,
        attendees: Office$EmailAddressDetails[],
        location: string,
        subject: string,
        start: Date,
        end: Date
}

declare
export interface Office$PhoneNumber {
    phoneString: string,
        originalPhoneString: string,
        type: string
}

declare
export interface Office$Recipients {

    /**
     * Begins an asynchronous request to add a recipient list to an appointment or message
     * @param recipients The recipients to add to the recipients list
     * @param options Any optional parameters or state data passed to the method
     * @param callback The optional method to call when the string is inserted
     */
    addAsync(
            recipients: any,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Begins an asynchronous request to get the recipient list for an appointment or message
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        getAsync(options?: any, callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Begins an asynchronous request to set the recipient list for an appointment or message
         * @param recipients The recipients to add to the recipients list
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        setAsync(
            recipients: any,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void
}

declare
export interface Office$RoamingSettings {

    /**
     * Retrieves the specified setting
     * @param name The case-sensitive name of the setting to retrieve
     */
    get(name: string): any,

        /**
         * Removes the specified setting
         * @param name The case-sensitive name of the setting to remove
         */
        remove(name: string): void,

        /**
         * Saves the settings
         * @param callback A function that is invoked when the callback returns, whose only parameter is of type AsyncResult
         */
        saveAsync(callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Sets or creates the specified setting
         * @param name The case-sensitive name of the setting to set or create
         * @param value Specifies the value to be stored
         */
        set(name: string, value: any): void
}

declare
export interface Office$Subject {

    /**
     * Begins an asynchronous request to get the subject of an appointment or message
     * @param options Any optional parameters or state data passed to the method
     * @param callback The optional method to call when the string is inserted
     */
    getAsync(options?: any, callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Begins an asynchronous call to set the subject of an appointment or message
         * @param data The subject of the appointment. The string is limited to 255 characters
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        setAsync(
            data: string,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void
}

declare
export interface Office$TaskSuggestion {
    assignees: Office$EmailUser[],
        taskString: string
}

declare
export interface Office$Time {

    /**
     * Begins an asynchronous request to get the start or end time
     * @param options Any optional parameters or state data passed to the method
     * @param callback The optional method to call when the string is inserted
     */
    getAsync(options?: any, callback?: (result: Office$AsyncResult) => void): void,

        /**
         * Begins an asynchronous request to set the start or end time
         * @param dateTime A date-time object in Coordinated Universal Time (UTC)
         * @param options Any optional parameters or state data passed to the method
         * @param callback The optional method to call when the string is inserted
         */
        setAsync(
            dateTime: Date,
            options?: any,
            callback?: (result: Office$AsyncResult) => void): void
}

declare
export interface Office$UserProfile {
    displayName: string,
        emailAddress: string,
        timeZone: string
}
declare module 'OfficeExtension' {

    /**
     * An abstract proxy object that represents an object in an Office document. You create proxy objects from the context (or from other proxy objects), add commands to a queue to act on the object, and then synchronize the proxy object state with the document by calling "context.sync()". 
     */
    declare class ClientObject {

        /**
         * The request context associated with the object 
         */
        context: ClientRequestContext;

        /**
         * Returns a boolean value for whether the corresponding object is a null object. You must call "context.sync()" before reading the isNullObject property. 
         */
        isNullObject: boolean
    }
    declare interface LoadOption {
        select?: string | string[],
            expand?: string | string[],
            top?: number,
            skip?: number
    }

    /**
     * An abstract RequestContext object that facilitates requests to the host Office application. The "Excel.run" and "Word.run" methods provide a request context. 
     */
    declare class ClientRequestContext {
        constructor(url?: string): this;

        /**
         * Collection of objects that are tracked for automatic adjustments based on surrounding changes in the document. 
         */
        trackedObjects: TrackedObjects;

        /**
         * Request headers 
         */
        requestHeaders: {
            [name: string]: string
        };

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties. 
         */
        load(object: ClientObject, option?: string | string[] | LoadOption): void;

        /**
         * Queues up a command to recursively load the specified properties of the object and its navigation properties.
         * You must call "context.sync()" before reading the properties.
         * @param object The object to be loaded.
         * @param options The key-value pairing of load options for the types, such as { "Workbook": "worksheets,tables",  "Worksheet": "tables",  "Tables": "name" }
         * @param maxDepth The maximum recursive depth.
         */
        loadRecursive(
            object: ClientObject,
            options: {
                [typeName: string]: string | string[] | LoadOption
            },
            maxDepth?: number): void;

        /**
         * Adds a trace message to the queue. If the promise returned by "context.sync()" is rejected due to an error, this adds a ".traceMessages" array to the OfficeExtension.Error object, containing all trace messages that were executed. These messages can help you monitor the program execution sequence and detect the cause of the error. 
         */
        trace(message: string): void;

        /**
         * Synchronizes the state between JavaScript proxy objects and the Office document, by executing instructions queued on the request context and retrieving properties of loaded Office objects for use in your code. This method returns a promise, which is resolved when the synchronization is complete. 
         */
        sync<T>(passThroughValue?: T): IPromise<T >
    }

    /**
     * Contains the result for methods that return primitive types. The object's value property is retrieved from the document after "context.sync()" is invoked. 
     */
    declare class ClientResult<T>{

        /**
         * The value of the result that is retrieved from the document after "context.sync()" is invoked. 
         */
        value: T
    }

    /**
     * The error object returned by "context.sync()", if a promise is rejected due to an error while processing the request. 
     */
    declare class Error {

        /**
         * Error name: "OfficeExtension.Error".
         */
        name: string;

        /**
         * The error message passed through from the host Office application. 
         */
        message: string;

        /**
         * Stack trace, if applicable. 
         */
        stack: string;

        /**
         * Error code string, such as "InvalidArgument". 
         */
        code: string;

        /**
         * Trace messages (if any) that were added via a "context.trace()" invocation before calling "context.sync()". If there was an error, this contains all trace messages that were executed before the error occurred. These messages can help you monitor the program execution sequence and detect the case of the error. 
         */
        traceMessages: Array<string>;

        /**
         * Debug info, if applicable. The ".errorLocation" property can describe the object and method or property that caused the error. 
         */
        debugInfo: {

            /**
             * If applicable, will return the object type and the name of the method or property that caused the error. 
             */
            errorLocation?: string
        }
    }
    declare class ErrorCodes {
        accessDenied: string;
        generalException: string;
        activityLimitReached: string
    }

    /**
     * An IPromise object that represents a deferred interaction with the host Office application. 
     */
    declare interface IPromise<R>{

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => IPromise<U>): IPromise<U>,

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => U): IPromise<U>,

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => void): IPromise<U>,

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => U,
            onRejected?: (error: any) => IPromise<U>): IPromise<U>,

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(onFulfilled?: (value: R) => U, onRejected?: (error: any) => U): IPromise<U>,

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => U,
            onRejected?: (error: any) => void): IPromise<U>,

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => IPromise<U>): IPromise<U>,

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => U): IPromise<U>,

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => void): IPromise<U >
    }

    /**
     * An Promise object that represents a deferred interaction with the host Office application. The publically-consumable OfficeExtension.Promise is available starting in ExcelApi 1.2 and WordApi 1.2. Promises can be chained via ".then", and errors can be caught via ".catch". Remember to always use a ".catch" on the outer promise, and to return intermediary promises so as not to break the promise chain. When a "native" Promise implementation is available, OfficeExtension.Promise will switch to use the native Promise instead. 
     */
    declare export class Promise<R>mixins IPromise<R>{

        /**
         * Creates a new promise based on a function that accepts resolve and reject handlers.
         */
        constructor(func: (
            resolve: (value?: R | IPromise<R>) => void,
            reject: (error?: any) => void) => void): this;

        /**
         * Creates a promise that resolves when all of the child promises resolve.
         */
        all<U>(promises: OfficeExtension.IPromise<U>[]): IPromise<U[]>;

        /**
         * Creates a promise that is resolved.
         */
        resolve<U>(value: U): IPromise<U>;

        /**
         * Creates a promise that is rejected.
         */
        reject<U>(error: any): IPromise<U>;
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => IPromise<U>): IPromise<U>;

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => U): IPromise<U>;

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => IPromise<U>,
            onRejected?: (error: any) => void): IPromise<U>;

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => U,
            onRejected?: (error: any) => IPromise<U>): IPromise<U>;

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(onFulfilled?: (value: R) => U, onRejected?: (error: any) => U): IPromise<U>;

        /**
         * This method will be called once the previous promise has been resolved.
         * Both the onFulfilled on onRejected callbacks are optional.
        If either or both are omitted, the next onFulfilled/onRejected in the chain will be called called.
         * @returns  A new promise for the value or error that was returned from onFulfilled/onRejected.
        */
        then<U>(
            onFulfilled?: (value: R) => U,
            onRejected?: (error: any) => void): IPromise<U>;

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => IPromise<U>): IPromise<U>;

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => U): IPromise<U>;

        /**
         * Catches failures or exceptions from actions within the promise, or from an unhandled exception earlier in the call stack.
         * @param onRejected function to be called if or when the promise rejects.
         */
        catch<U>(onRejected?: (error: any) => void): IPromise<U >
    }

    /**
     * Collection of tracked objects, contained within a request context. See "context.trackedObjects" for more information. 
     */
    declare class TrackedObjects {

        /**
         * Track a new object for automatic adjustment based on surrounding changes in the document. Only some object types require this. If you are using an object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created. 
         */
        add(object: ClientObject): void;

        /**
         * Track a new object for automatic adjustment based on surrounding changes in the document. Only some object types require this. If you are using an object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created. 
         */
        add(objects: ClientObject[]): void;

        /**
         * Release the memory associated with an object that was previously added to this collection. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect. 
         */
        remove(object: ClientObject): void;

        /**
         * Release the memory associated with an object that was previously added to this collection. Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect. 
         */
        remove(objects: ClientObject[]): void
    }
    declare export class EventHandlers<T>{
        constructor(context: ClientRequestContext, parentObject: ClientObject, name: string, eventInfo: EventInfo<T>): this;
        add(handler: (args: T) => IPromise<any>): EventHandlerResult<T>;
        remove(handler: (args: T) => IPromise<any>): void;
        removeAll(): void
    }
    declare export class EventHandlerResult<T>{
        constructor(context: ClientRequestContext, handlers: EventHandlers<T>, handler: (args: T) => IPromise<any>): this;
        remove(): void
    }
    declare export interface EventInfo<T>{
        registerFunc: (callback: (args: any) => void) => IPromise<any>,
        unregisterFunc: (callback: (args: any) => void) => IPromise<any>,
        eventArgsTransformFunc: (args: any) => IPromise<T >
    }

    /**
     * Request URL and headers 
     */
    declare interface RequestUrlAndHeaderInfo {

        /**
         * Request URL 
         */
        url: string,

            /**
             * Request headers 
             */
            headers?: {
                [name: string]: string
            }
    }
}
declare module 'Excel' {
    declare interface ThreeArrowsSet {
        [index: number]: Icon,
        redDownArrow: Icon,
            yellowSideArrow: Icon,
            greenUpArrow: Icon
    }
    declare interface ThreeArrowsGraySet {
        [index: number]: Icon,
        grayDownArrow: Icon,
            graySideArrow: Icon,
            grayUpArrow: Icon
    }
    declare interface ThreeFlagsSet {
        [index: number]: Icon,
        redFlag: Icon,
            yellowFlag: Icon,
            greenFlag: Icon
    }
    declare interface ThreeTrafficLights1Set {
        [index: number]: Icon,
        redCircleWithBorder: Icon,
            yellowCircle: Icon,
            greenCircle: Icon
    }
    declare interface ThreeTrafficLights2Set {
        [index: number]: Icon,
        redTrafficLight: Icon,
            yellowTrafficLight: Icon,
            greenTrafficLight: Icon
    }
    declare interface ThreeSignsSet {
        [index: number]: Icon,
        redDiamond: Icon,
            yellowTriangle: Icon,
            greenCircle: Icon
    }
    declare interface ThreeSymbolsSet {
        [index: number]: Icon,
        redCrossSymbol: Icon,
            yellowExclamationSymbol: Icon,
            greenCheckSymbol: Icon
    }
    declare interface ThreeSymbols2Set {
        [index: number]: Icon,
        redCross: Icon,
            yellowExclamation: Icon,
            greenCheck: Icon
    }
    declare interface FourArrowsSet {
        [index: number]: Icon,
        redDownArrow: Icon,
            yellowDownInclineArrow: Icon,
            yellowUpInclineArrow: Icon,
            greenUpArrow: Icon
    }
    declare interface FourArrowsGraySet {
        [index: number]: Icon,
        grayDownArrow: Icon,
            grayDownInclineArrow: Icon,
            grayUpInclineArrow: Icon,
            grayUpArrow: Icon
    }
    declare interface FourRedToBlackSet {
        [index: number]: Icon,
        blackCircle: Icon,
            grayCircle: Icon,
            pinkCircle: Icon,
            redCircle: Icon
    }
    declare interface FourRatingSet {
        [index: number]: Icon,
        oneBar: Icon,
            twoBars: Icon,
            threeBars: Icon,
            fourBars: Icon
    }
    declare interface FourTrafficLightsSet {
        [index: number]: Icon,
        blackCircleWithBorder: Icon,
            redCircleWithBorder: Icon,
            yellowCircle: Icon,
            greenCircle: Icon
    }
    declare interface FiveArrowsSet {
        [index: number]: Icon,
        redDownArrow: Icon,
            yellowDownInclineArrow: Icon,
            yellowSideArrow: Icon,
            yellowUpInclineArrow: Icon,
            greenUpArrow: Icon
    }
    declare interface FiveArrowsGraySet {
        [index: number]: Icon,
        grayDownArrow: Icon,
            grayDownInclineArrow: Icon,
            graySideArrow: Icon,
            grayUpInclineArrow: Icon,
            grayUpArrow: Icon
    }
    declare interface FiveRatingSet {
        [index: number]: Icon,
        noBars: Icon,
            oneBar: Icon,
            twoBars: Icon,
            threeBars: Icon,
            fourBars: Icon
    }
    declare interface FiveQuartersSet {
        [index: number]: Icon,
        whiteCircleAllWhiteQuarters: Icon,
            circleWithThreeWhiteQuarters: Icon,
            circleWithTwoWhiteQuarters: Icon,
            circleWithOneWhiteQuarter: Icon,
            blackCircle: Icon
    }
    declare interface ThreeStarsSet {
        [index: number]: Icon,
        silverStar: Icon,
            halfGoldStar: Icon,
            goldStar: Icon
    }
    declare interface ThreeTrianglesSet {
        [index: number]: Icon,
        redDownTriangle: Icon,
            yellowDash: Icon,
            greenUpTriangle: Icon
    }
    declare interface FiveBoxesSet {
        [index: number]: Icon,
        noFilledBoxes: Icon,
            oneFilledBox: Icon,
            twoFilledBoxes: Icon,
            threeFilledBoxes: Icon,
            fourFilledBoxes: Icon
    }
    declare interface IconCollections {
        threeArrows: ThreeArrowsSet,
            threeArrowsGray: ThreeArrowsGraySet,
            threeFlags: ThreeFlagsSet,
            threeTrafficLights1: ThreeTrafficLights1Set,
            threeTrafficLights2: ThreeTrafficLights2Set,
            threeSigns: ThreeSignsSet,
            threeSymbols: ThreeSymbolsSet,
            threeSymbols2: ThreeSymbols2Set,
            fourArrows: FourArrowsSet,
            fourArrowsGray: FourArrowsGraySet,
            fourRedToBlack: FourRedToBlackSet,
            fourRating: FourRatingSet,
            fourTrafficLights: FourTrafficLightsSet,
            fiveArrows: FiveArrowsSet,
            fiveArrowsGray: FiveArrowsGraySet,
            fiveRating: FiveRatingSet,
            fiveQuarters: FiveQuartersSet,
            threeStars: ThreeStarsSet,
            threeTriangles: ThreeTrianglesSet,
            fiveBoxes: FiveBoxesSet
    }
    declare var icons: IconCollections;

    /**
     * Provides information about the binding that raised the SelectionChanged event.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface BindingSelectionChangedEventArgs {

        /**
         * Gets the Binding object that represents the binding that raised the SelectionChanged event.
         * 
        [Api set: ExcelApi 1.2]
        */
        binding: Excel.Binding,

            /**
             * Gets the number of columns selected.
             * 
            [Api set: ExcelApi 1.2]
            */
            columnCount: number,

            /**
             * Gets the number of rows selected.
             * 
            [Api set: ExcelApi 1.2]
            */
            rowCount: number,

            /**
             * Gets the index of the first column of the selection (zero-based).
             * 
            [Api set: ExcelApi 1.2]
            */
            startColumn: number,

            /**
             * Gets the index of the first row of the selection (zero-based).
             * 
            [Api set: ExcelApi 1.2]
            */
            startRow: number
    }

    /**
     * Provides information about the binding that raised the DataChanged event.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface BindingDataChangedEventArgs {

        /**
         * Gets the Binding object that represents the binding that raised the DataChanged event.
         * 
        [Api set: ExcelApi 1.2]
        */
        binding: Excel.Binding
    }

    /**
     * Provides information about the document that raised the SelectionChanged event.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface SelectionChangedEventArgs {

        /**
         * Gets the workbook object that raised the SelectionChanged event.
         * 
        [Api set: ExcelApi 1.2]
        */
        workbook: Excel.Workbook
    }

    /**
     * Represents the Excel application that manages the workbook.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Application mixins OfficeExtension.ClientObject {

        /**
         * Returns the calculation mode used in the workbook. See Excel.CalculationMode for details. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        calculationMode: string;

        /**
         * Recalculate all currently opened workbooks in Excel.
         * @param calculationType Specifies the calculation type to use. See Excel.CalculationType for details.

        [Api set: ExcelApi 1.1]
        */
        calculate(calculationType: string): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Application;
        toJSON(): {
            calculationMode: string
        }
    }

    /**
     * Workbook is the top level object which contains related workbook objects such as worksheets, tables, ranges, etc.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Workbook mixins OfficeExtension.ClientObject {

        /**
         * Represents Excel application instance that contains this workbook. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        application: Excel.Application;

        /**
         * Represents a collection of bindings that are part of the workbook. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        bindings: Excel.BindingCollection;

        /**
         * Represents Excel application instance that contains this workbook. Read-only.
         * 
        [Api set: ExcelApi 1.2]
        */
        functions: Excel.Functions;

        /**
         * Represents a collection of workbook scoped named items (named ranges and constants). Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        names: Excel.NamedItemCollection;

        /**
         * Represents a collection of PivotTables associated with the workbook. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        pivotTables: Excel.PivotTableCollection;

        /**
         * Represents a collection of tables associated with the workbook. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        tables: Excel.TableCollection;

        /**
         * Represents a collection of worksheets associated with the workbook. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        worksheets: Excel.WorksheetCollection;

        /**
         * Gets the currently selected range from the workbook.
         * 
        [Api set: ExcelApi 1.1]
        */
        getSelectedRange(): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Workbook;

        /**
         * Occurs when the selection in the document is changed.
         * 
        [Api set: ExcelApi 1.2]
        */
        onSelectionChanged: OfficeExtension.EventHandlers<Excel.SelectionChangedEventArgs>;
        toJSON(): {}
    }

    /**
     * An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Worksheet mixins OfficeExtension.ClientObject {

        /**
         * Returns collection of charts that are part of the worksheet. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        charts: Excel.ChartCollection;

        /**
         * Collection of PivotTables that are part of the worksheet. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        pivotTables: Excel.PivotTableCollection;

        /**
         * Returns sheet protection object for a worksheet.
         * 
        [Api set: ExcelApi 1.2]
        */
        protection: Excel.WorksheetProtection;

        /**
         * Collection of tables that are part of the worksheet. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        tables: Excel.TableCollection;

        /**
         * Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        id: string;

        /**
         * The display name of the worksheet.
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * The zero-based position of the worksheet within the workbook.
         * 
        [Api set: ExcelApi 1.1]
        */
        position: number;

        /**
         * The Visibility of the worksheet.
         * 
        [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]
        */
        visibility: string;

        /**
         * Activate the worksheet in the Excel UI.
         * 
        [Api set: ExcelApi 1.1]
        */
        activate(): void;

        /**
         * Deletes the worksheet from the workbook.
         * 
        [Api set: ExcelApi 1.1]
        */
        delete(): void;

        /**
         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid.
         * @param row The row number of the cell to be retrieved. Zero-indexed.
         * @param column the column number of the cell to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getCell(row: number, column: number): Excel.Range;

        /**
         * Gets the range object specified by the address or name.
         * @param address The address or the name of the range. If not specified, the entire worksheet range is returned.

        [Api set: ExcelApi 1.1]
        */
        getRange(address?: string): Excel.Range;

        /**
         * The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the worksheet is blank, this function will return the top left cell.
         * @param valuesOnly Considers only cells with values as used cells (ignores formatting). [Api set: ExcelApi 1.2]

        [Api set: ExcelApi 1.1]
        */
        getUsedRange(valuesOnly?: boolean): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Worksheet;
        toJSON(): {
            id: string,
            name: string,
            position: number,
            protection: WorksheetProtection,
            visibility: string
        }
    }

    /**
     * Represents a collection of worksheet objects that are part of the workbook.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class WorksheetCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.Worksheet>;

        /**
         * Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.
         * @param name The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.

        [Api set: ExcelApi 1.1]
        */
        add(name?: string): Excel.Worksheet;

        /**
         * Gets the currently active worksheet in the workbook.
         * 
        [Api set: ExcelApi 1.1]
        */
        getActiveWorksheet(): Excel.Worksheet;

        /**
         * Gets a worksheet object using its Name or ID.
         * @param key The Name or ID of the worksheet.

        [Api set: ExcelApi 1.1]
        */
        getItem(key: string): Excel.Worksheet;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.WorksheetCollection;
        toJSON(): {}
    }

    /**
     * Represents the protection of a sheet object.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class WorksheetProtection mixins OfficeExtension.ClientObject {

        /**
         * Sheet protection options. Read-Only.
         * 
        [Api set: ExcelApi 1.2]
        */
        options: Excel.WorksheetProtectionOptions;

        /**
         * Indicates if the worksheet is protected. Read-Only.
         * 
        [Api set: ExcelApi 1.2]
        */
        protected: boolean;

        /**
         * Protects a worksheet. Fails if the worksheet has been protected.
         * @param options sheet protection options.

        [Api set: ExcelApi 1.2]
        */
        protect(options?: Excel.WorksheetProtectionOptions): void;

        /**
         * Unprotects a worksheet.
         * 
        [Api set: ExcelApi 1.2]
        */
        unprotect(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.WorksheetProtection;
        toJSON(): {
            options: WorksheetProtectionOptions,
            protected: boolean
        }
    }

    /**
     * Represents the options in sheet protection.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface WorksheetProtectionOptions {

        /**
         * Represents the worksheet protection option of allowing using auto filter feature.
         * 
        [Api set: ExcelApi 1.2]
        */
        allowAutoFilter?: boolean,

            /**
             * Represents the worksheet protection option of allowing deleting columns.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowDeleteColumns?: boolean,

            /**
             * Represents the worksheet protection option of allowing deleting rows.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowDeleteRows?: boolean,

            /**
             * Represents the worksheet protection option of allowing formatting cells.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowFormatCells?: boolean,

            /**
             * Represents the worksheet protection option of allowing formatting columns.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowFormatColumns?: boolean,

            /**
             * Represents the worksheet protection option of allowing formatting rows.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowFormatRows?: boolean,

            /**
             * Represents the worksheet protection option of allowing inserting columns.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowInsertColumns?: boolean,

            /**
             * Represents the worksheet protection option of allowing inserting hyperlinks.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowInsertHyperlinks?: boolean,

            /**
             * Represents the worksheet protection option of allowing inserting rows.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowInsertRows?: boolean,

            /**
             * Represents the worksheet protection option of allowing using PivotTable feature.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowPivotTables?: boolean,

            /**
             * Represents the worksheet protection option of allowing using sort feature.
             * 
            [Api set: ExcelApi 1.2]
            */
            allowSort?: boolean
    }

    /**
     * Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Range mixins OfficeExtension.ClientObject {

        /**
         * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.RangeFormat;

        /**
         * Represents the range sort of the current range.
         * 
        [Api set: ExcelApi 1.2]
        */
        sort: Excel.RangeSort;

        /**
         * The worksheet containing the current range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        worksheet: Excel.Worksheet;

        /**
         * Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. Sheet1!A1:B4). Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        address: string;

        /**
         * Represents range reference for the specified range in the language of the user. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        addressLocal: string;

        /**
         * Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        cellCount: number;

        /**
         * Represents the total number of columns in the range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        columnCount: number;

        /**
         * Represents if all columns of the current range are hidden.
         * 
        [Api set: ExcelApi 1.2]
        */
        columnHidden: boolean;

        /**
         * Represents the column number of the first cell in the range. Zero-indexed. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        columnIndex: number;

        /**
         * Represents the formula in A1-style notation.
         * 
        [Api set: ExcelApi 1.1]
        */
        formulas: Array<Array<any >> ;

        /**
         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
         * 
        [Api set: ExcelApi 1.1]
        */
        formulasLocal: Array<Array<any >> ;

        /**
         * Represents the formula in R1C1-style notation.
         * 
        [Api set: ExcelApi 1.2]
        */
        formulasR1C1: Array<Array<any >> ;

        /**
         * Represents if all cells of the current range are hidden.
         * 
        [Api set: ExcelApi 1.2]
        */
        hidden: boolean;

        /**
         * Represents Excel's number format code for the given cell.
         * 
        [Api set: ExcelApi 1.1]
        */
        numberFormat: Array<Array<any >> ;

        /**
         * Returns the total number of rows in the range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        rowCount: number;

        /**
         * Represents if all rows of the current range are hidden.
         * 
        [Api set: ExcelApi 1.2]
        */
        rowHidden: boolean;

        /**
         * Returns the row number of the first cell in the range. Zero-indexed. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        rowIndex: number;

        /**
         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        text: Array<Array<any >> ;

        /**
         * Represents the type of data of each cell. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        valueTypes: Array<Array<string >> ;

        /**
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
         * 
        [Api set: ExcelApi 1.1]
        */
        values: Array<Array<any >> ;

        /**
         * Clear range values, format, fill, border, etc.
         * @param applyTo Determines the type of clear action. See Excel.ClearApplyTo for details.

        [Api set: ExcelApi 1.1]
        */
        clear(applyTo?: string): void;

        /**
         * Deletes the cells associated with the range.
         * @param shift Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.

        [Api set: ExcelApi 1.1]
        */
        delete(shift: string): void;

        /**
         * Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E16".
         * @param anotherRange The range object or address or range name.

        [Api set: ExcelApi 1.1]
        */
        getBoundingRect(anotherRange: Excel.Range | string): Excel.Range;

        /**
         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it's stays within the worksheet grid. The returned cell is located relative to the top left cell of the range.
         * @param row Row number of the cell to be retrieved. Zero-indexed.
         * @param column Column number of the cell to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getCell(row: number, column: number): Excel.Range;

        /**
         * Gets a column contained in the range.
         * @param column Column number of the range to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getColumn(column: number): Excel.Range;

        /**
         * Gets a certain number of columns to the right of the current Range object.
         * @param count The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.

        [Api set: ExcelApi 1.2]
        */
        getColumnsAfter(count?: number): Excel.Range;

        /**
         * Gets a certain number of columns to the left of the current Range object.
         * @param count The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.

        [Api set: ExcelApi 1.2]
        */
        getColumnsBefore(count?: number): Excel.Range;

        /**
         * Gets an object that represents the entire column of the range.
         * 
        [Api set: ExcelApi 1.1]
        */
        getEntireColumn(): Excel.Range;

        /**
         * Gets an object that represents the entire row of the range.
         * 
        [Api set: ExcelApi 1.1]
        */
        getEntireRow(): Excel.Range;

        /**
         * Gets the range object that represents the rectangular intersection of the given ranges.
         * @param anotherRange The range object or range address that will be used to determine the intersection of ranges.

        [Api set: ExcelApi 1.1]
        */
        getIntersection(anotherRange: Excel.Range | string): Excel.Range;

        /**
         * Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".
         * 
        [Api set: ExcelApi 1.1]
        */
        getLastCell(): Excel.Range;

        /**
         * Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".
         * 
        [Api set: ExcelApi 1.1]
        */
        getLastColumn(): Excel.Range;

        /**
         * Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".
         * 
        [Api set: ExcelApi 1.1]
        */
        getLastRow(): Excel.Range;

        /**
         * Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an exception will be thrown.
         * @param rowOffset The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.
         * @param columnOffset The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.

        [Api set: ExcelApi 1.1]
        */
        getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;

        /**
         * Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.
         * @param deltaRows The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.
         * @param deltaColumns The number of columnsby which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.

        [Api set: ExcelApi 1.2]
        */
        getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;

        /**
         * Gets a row contained in the range.
         * @param row Row number of the range to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getRow(row: number): Excel.Range;

        /**
         * Gets a certain number of rows above the current Range object.
         * @param count The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.

        [Api set: ExcelApi 1.2]
        */
        getRowsAbove(count?: number): Excel.Range;

        /**
         * Gets a certain number of rows below the current Range object.
         * @param count The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.

        [Api set: ExcelApi 1.2]
        */
        getRowsBelow(count?: number): Excel.Range;

        /**
         * Returns the used range of the given range object.
         * @param valuesOnly Considers only cells with values as used cells. [Api set: ExcelApi 1.2]

        [Api set: ExcelApi 1.1]
        */
        getUsedRange(valuesOnly?: boolean): Excel.Range;

        /**
         * Represents the visible rows of the current range.
         * 
        [Api set: ExcelApi 1.3]
        */
        getVisibleView(): Excel.RangeView;

        /**
         * Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.
         * @param shift Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.

        [Api set: ExcelApi 1.1]
        */
        insert(shift: string): Excel.Range;

        /**
         * Merge the range cells into one region in the worksheet.
         * @param across Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.

        [Api set: ExcelApi 1.2]
        */
        merge(across?: boolean): void;

        /**
         * Selects the specified range in the Excel UI.
         * 
        [Api set: ExcelApi 1.1]
        */
        select(): void;

        /**
         * Unmerge the range cells into separate cells.
         * 
        [Api set: ExcelApi 1.2]
        */
        unmerge(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Range;

        /**
         * Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.
         */
        track(): Excel.Range;

        /**
         * Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call "context.sync()" before the memory release takes effect.
         */
        untrack(): Excel.Range;
        toJSON(): {
            address: string,
            addressLocal: string,
            cellCount: number,
            columnCount: number,
            columnHidden: boolean,
            columnIndex: number,
            format: RangeFormat,
            formulas: any[][],
            formulasLocal: any[][],
            formulasR1C1: any[][],
            hidden: boolean,
            numberFormat: any[][],
            rowCount: number,
            rowHidden: boolean,
            rowIndex: number,
            text: any[][],
            values: any[][],
            valueTypes: string[][]
        }
    }

    /**
     * Represents a string reference of the form SheetName!A1:B5, or a global or local named range
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface RangeReference {
        address: string
    }

    /**
     * RangeView represents a set of visible cells of the parent range.
     * 
    [Api set: ExcelApi 1.3]
    */
    declare class RangeView mixins OfficeExtension.ClientObject {

        /**
         * Represents a collection of range views associated with the range. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        rows: Excel.RangeViewCollection;

        /**
         * Represents the cell addresses of the RangeView.
         * 
        [Api set: ExcelApi 1.3]
        */
        cellAddresses: Array<Array<any >> ;

        /**
         * Returns the number of visible columns. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        columnCount: number;

        /**
         * Represents the formula in A1-style notation.
         * 
        [Api set: ExcelApi 1.3]
        */
        formulas: Array<Array<any >> ;

        /**
         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
         * 
        [Api set: ExcelApi 1.3]
        */
        formulasLocal: Array<Array<any >> ;

        /**
         * Represents the formula in R1C1-style notation.
         * 
        [Api set: ExcelApi 1.3]
        */
        formulasR1C1: Array<Array<any >> ;

        /**
         * Returns a value that represents the index of the RangeView. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        index: number;

        /**
         * Represents Excel's number format code for the given cell.
         * 
        [Api set: ExcelApi 1.3]
        */
        numberFormat: Array<Array<any >> ;

        /**
         * Returns the number of visible rows. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        rowCount: number;

        /**
         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        text: Array<Array<any >> ;

        /**
         * Represents the type of data of each cell. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        valueTypes: Array<Array<string >> ;

        /**
         * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
         * 
        [Api set: ExcelApi 1.3]
        */
        values: Array<Array<any >> ;

        /**
         * Gets the parent range associated with the current RangeView.
         * 
        [Api set: ExcelApi 1.3]
        */
        getRange(): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeView;
        toJSON(): {
            cellAddresses: any[][],
            columnCount: number,
            formulas: any[][],
            formulasLocal: any[][],
            formulasR1C1: any[][],
            index: number,
            numberFormat: any[][],
            rowCount: number,
            text: any[][],
            values: any[][],
            valueTypes: string[][]
        }
    }

    /**
     * Represents a collection of worksheet objects that are part of the workbook.
     * 
    [Api set: ExcelApi 1.3]
    */
    declare class RangeViewCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.RangeView>;

        /**
         * Gets a RangeView Row via it's index. Zero-Indexed.
         * @param index Index of the visible row.

        [Api set: ExcelApi 1.3]
        */
        getItemAt(index: number): Excel.RangeView;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeViewCollection;
        toJSON(): {}
    }

    /**
     * Setting represents a key-value pair of a setting persisted to the document.
     * 
    [Api set: ExcelApi 1.3]
    */
    declare class Setting mixins OfficeExtension.ClientObject {

        /**
         * Represents the value stored for this setting.
         * 
        [Api set: ExcelApi 1.3]
        */
        value: any;

        /**
         * Returns the key that represents the id of the Setting. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        key: string;

        /**
         * Deletes the setting.
         * 
        [Api set: ExcelApi 1.3]
        */
        delete(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Setting;
        toJSON(): {
            key: string
        }
    }

    /**
     * A collection of all the nameditem objects that are part of the workbook or worksheet, depending on how it was reached.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class NamedItemCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.NamedItem>;

        /**
         * Gets a nameditem object using its name
         * @param name nameditem name.

        [Api set: ExcelApi 1.1]
        */
        getItem(name: string): Excel.NamedItem;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.NamedItemCollection;
        toJSON(): {}
    }

    /**
     * Represents a defined name for a range of cells or value. Names can be primitive named objects (as seen in the type below), range object, reference to a range. This object can be used to obtain range object associated with names.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class NamedItem mixins OfficeExtension.ClientObject {

        /**
         * The name of the object. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        type: string;

        /**
         * Represents the value computed by the name's formula. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        value: any;

        /**
         * Specifies whether the object is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        visible: boolean;

        /**
         * Returns the range object that is associated with the name. Throws an exception if the named item's type is not a range.
         * 
        [Api set: ExcelApi 1.1]
        */
        getRange(): Excel.Range;

        /**
         * Returns the range object that is associated with the name. Returns a null object if the named item's type is not a range
         * 
        [Api set: ExcelApi 1.1]
        */
        getRangeOrNullObject(): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.NamedItem;
        toJSON(): {
            name: string,
            type: string,
            value: any,
            visible: boolean
        }
    }

    /**
     * Represents an Office.js binding that is defined in the workbook.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Binding mixins OfficeExtension.ClientObject {

        /**
         * Represents binding identifier. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        id: string;

        /**
         * Returns the type of the binding. See Excel.BindingType for details. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        type: string;

        /**
         * Deletes the binding.
         * 
        [Api set: ExcelApi 1.3]
        */
        delete(): void;

        /**
         * Returns the range represented by the binding. Will throw an error if binding is not of the correct type.
         * 
        [Api set: ExcelApi 1.1]
        */
        getRange(): Excel.Range;

        /**
         * Returns the table represented by the binding. Will throw an error if binding is not of the correct type.
         * 
        [Api set: ExcelApi 1.1]
        */
        getTable(): Excel.Table;

        /**
         * Returns the text represented by the binding. Will throw an error if binding is not of the correct type.
         * 
        [Api set: ExcelApi 1.1]
        */
        getText(): OfficeExtension.ClientResult<string>;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Binding;

        /**
         * Occurs when data or formatting within the binding is changed.
         * 
        [Api set: ExcelApi 1.2]
        */
        onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;

        /**
         * Occurs when the selection is changed within the binding.
         * 
        [Api set: ExcelApi 1.2]
        */
        onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;
        toJSON(): {
            id: string,
            type: string
        }
    }

    /**
     * Represents the collection of all the binding objects that are part of the workbook.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class BindingCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.Binding>;

        /**
         * Returns the number of bindings in the collection. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Add a new binding to a particular Range.
         * @param range Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name
         * @param bindingType Type of binding. See Excel.BindingType.
         * @param id Name of binding.

        [Api set: ExcelApi 1.3]
        */
        add(range: Excel.Range | string, bindingType: string, id: string): Excel.Binding;

        /**
         * Add a new binding based on a named item in the workbook.
         * @param name Name from which to create binding.
         * @param bindingType Type of binding. See Excel.BindingType.
         * @param id Name of binding.

        [Api set: ExcelApi 1.3]
        */
        addFromNamedItem(name: string, bindingType: string, id: string): Excel.Binding;

        /**
         * Add a new binding based on the current selection.
         * @param bindingType Type of binding. See Excel.BindingType.
         * @param id Name of binding.

        [Api set: ExcelApi 1.3]
        */
        addFromSelection(bindingType: string, id: string): Excel.Binding;

        /**
         * Gets a binding object by ID.
         * @param id Id of the binding object to be retrieved.

        [Api set: ExcelApi 1.1]
        */
        getItem(id: string): Excel.Binding;

        /**
         * Gets a binding object based on its position in the items array.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.Binding;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.BindingCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class TableCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.Table>;

        /**
         * Returns the number of tables in the workbook. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.
         * @param address A Range object, or a string address or name of the range representing the data source. If the address does not contain a sheet name, the currently-active sheet is used. [Api set: ExcelApi 1.1 for string parameter; 1.3 for accepting a Range object as well]
         * @param hasHeaders Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.

        [Api set: ExcelApi 1.1]
        */
        add(address: Excel.Range | string, hasHeaders: boolean): Excel.Table;

        /**
         * Gets a table by Name or ID.
         * @param key Name or ID of the table to be retrieved.

        [Api set: ExcelApi 1.1]
        */
        getItem(key: number | string): Excel.Table;

        /**
         * Gets a table based on its position in the collection.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.Table;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.TableCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents an Excel table.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Table mixins OfficeExtension.ClientObject {

        /**
         * Represents a collection of all the columns in the table. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        columns: Excel.TableColumnCollection;

        /**
         * Represents a collection of all the rows in the table. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        rows: Excel.TableRowCollection;

        /**
         * Represents the sorting for the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        sort: Excel.TableSort;

        /**
         * The worksheet containing the current table. Read-only.
         * 
        [Api set: ExcelApi 1.2]
        */
        worksheet: Excel.Worksheet;

        /**
         * Indicates whether the first column contains special formatting.
         * 
        [Api set: ExcelApi 1.3]
        */
        highlightFirstColumn: boolean;

        /**
         * Indicates whether the last column contains special formatting.
         * 
        [Api set: ExcelApi 1.3]
        */
        highlightLastColumn: boolean;

        /**
         * Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        id: number;

        /**
         * Name of the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
         * 
        [Api set: ExcelApi 1.3]
        */
        showBandedColumns: boolean;

        /**
         * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
         * 
        [Api set: ExcelApi 1.3]
        */
        showBandedRows: boolean;

        /**
         * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
         * 
        [Api set: ExcelApi 1.3]
        */
        showFilterButton: boolean;

        /**
         * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
         * 
        [Api set: ExcelApi 1.1]
        */
        showHeaders: boolean;

        /**
         * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
         * 
        [Api set: ExcelApi 1.1]
        */
        showTotals: boolean;

        /**
         * Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.
         * 
        [Api set: ExcelApi 1.1]
        */
        style: string;

        /**
         * Clears all the filters currently applied on the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        clearFilters(): void;

        /**
         * Converts the table into a normal range of cells. All data is preserved.
         * 
        [Api set: ExcelApi 1.2]
        */
        convertToRange(): Excel.Range;

        /**
         * Deletes the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        delete(): void;

        /**
         * Gets the range object associated with the data body of the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        getDataBodyRange(): Excel.Range;

        /**
         * Gets the range object associated with header row of the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        getHeaderRowRange(): Excel.Range;

        /**
         * Gets the range object associated with the entire table.
         * 
        [Api set: ExcelApi 1.1]
        */
        getRange(): Excel.Range;

        /**
         * Gets the range object associated with totals row of the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        getTotalRowRange(): Excel.Range;

        /**
         * Reapplies all the filters currently on the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        reapplyFilters(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Table;
        toJSON(): {
            highlightFirstColumn: boolean,
            highlightLastColumn: boolean,
            id: number,
            name: string,
            showBandedColumns: boolean,
            showBandedRows: boolean,
            showFilterButton: boolean,
            showHeaders: boolean,
            showTotals: boolean,
            style: string
        }
    }

    /**
     * Represents a collection of all the columns that are part of the table.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class TableColumnCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.TableColumn>;

        /**
         * Returns the number of columns in the table. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Adds a new column to the table.
         * @param index Specifies the relative position of the new column. If null or -1, the addition happens at the end. Columns with a higher index will be shifted to the side. Zero-indexed.
         * @param values A 2-dimensional array of unformatted values of the table column.
         * @param name Specifies the name of the new column. If null, the default name will be used.

        [Api set: ExcelApi 1.1 requires an index smaller than the total column count; 1.4 allows index to be optional (null or -1) and will append a column at the end; 1.4 allows name parameter at creation time.]
        */
        add(
            index?: number,
            values?: Array<Array<boolean | string | number >> | boolean | string | number,
            name?: string): Excel.TableColumn;

        /**
         * Gets a column object by Name or ID.
         * @param key Column Name or ID.

        [Api set: ExcelApi 1.1]
        */
        getItem(key: number | string): Excel.TableColumn;

        /**
         * Gets a column based on its position in the collection.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.TableColumn;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.TableColumnCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a column in a table.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class TableColumn mixins OfficeExtension.ClientObject {

        /**
         * Retrieve the filter applied to the column.
         * 
        [Api set: ExcelApi 1.2]
        */
        filter: Excel.Filter;

        /**
         * Returns a unique key that identifies the column within the table. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        id: number;

        /**
         * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        index: number;

        /**
         * Represents the name of the table column.
         * 
        [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]
        */
        name: string;

        /**
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
         * 
        [Api set: ExcelApi 1.1]
        */
        values: Array<Array<any >> ;

        /**
         * Deletes the column from the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        delete(): void;

        /**
         * Gets the range object associated with the data body of the column.
         * 
        [Api set: ExcelApi 1.1]
        */
        getDataBodyRange(): Excel.Range;

        /**
         * Gets the range object associated with the header row of the column.
         * 
        [Api set: ExcelApi 1.1]
        */
        getHeaderRowRange(): Excel.Range;

        /**
         * Gets the range object associated with the entire column.
         * 
        [Api set: ExcelApi 1.1]
        */
        getRange(): Excel.Range;

        /**
         * Gets the range object associated with the totals row of the column.
         * 
        [Api set: ExcelApi 1.1]
        */
        getTotalRowRange(): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.TableColumn;
        toJSON(): {
            id: number,
            index: number,
            name: string,
            values: any[][]
        }
    }

    /**
     * Represents a collection of all the rows that are part of the table.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class TableRowCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.TableRow>;

        /**
         * Returns the number of rows in the table. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Adds one or more rows to the table. The return object will be the top of the newly added row(s).
         * @param index Specifies the relative position of the new row. If null or -1, the addition happens at the end. Any rows below the inserted row are shifted downwards. Zero-indexed.
         * @param values A 2-dimensional array of unformatted values of the table row.

        [Api set: ExcelApi 1.1 for adding a single row; 1.4 allows adding of multiple rows.]
        */
        add(
            index?: number,
            values?: Array<Array<boolean | string | number >> | boolean | string | number): Excel.TableRow;

        /**
         * Gets a row based on its position in the collection.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.TableRow;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.TableRowCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a row in a table.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class TableRow mixins OfficeExtension.ClientObject {

        /**
         * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        index: number;

        /**
         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
         * 
        [Api set: ExcelApi 1.1]
        */
        values: Array<Array<any >> ;

        /**
         * Deletes the row from the table.
         * 
        [Api set: ExcelApi 1.1]
        */
        delete(): void;

        /**
         * Returns the range object associated with the entire row.
         * 
        [Api set: ExcelApi 1.1]
        */
        getRange(): Excel.Range;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.TableRow;
        toJSON(): {
            index: number,
            values: any[][]
        }
    }

    /**
     * A format object encapsulating the range's font, fill, borders, alignment, and other properties.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class RangeFormat mixins OfficeExtension.ClientObject {

        /**
         * Collection of border objects that apply to the overall range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        borders: Excel.RangeBorderCollection;

        /**
         * Returns the fill object defined on the overall range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.RangeFill;

        /**
         * Returns the font object defined on the overall range. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.RangeFont;

        /**
         * Returns the format protection object for a range.
         * 
        [Api set: ExcelApi 1.2]
        */
        protection: Excel.FormatProtection;

        /**
         * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.
         * 
        [Api set: ExcelApi 1.2]
        */
        columnWidth: number;

        /**
         * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        horizontalAlignment: string;

        /**
         * Gets or sets the height of all rows in the range. If the row heights are not uniform null will be returned.
         * 
        [Api set: ExcelApi 1.2]
        */
        rowHeight: number;

        /**
         * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        verticalAlignment: string;

        /**
         * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting
         * 
        [Api set: ExcelApi 1.1]
        */
        wrapText: boolean;

        /**
         * Changes the width of the columns of the current range to achieve the best fit, based on the current data in the columns.
         * 
        [Api set: ExcelApi 1.2]
        */
        autofitColumns(): void;

        /**
         * Changes the height of the rows of the current range to achieve the best fit, based on the current data in the columns.
         * 
        [Api set: ExcelApi 1.2]
        */
        autofitRows(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeFormat;
        toJSON(): {
            columnWidth: number,
            fill: RangeFill,
            font: RangeFont,
            horizontalAlignment: string,
            protection: FormatProtection,
            rowHeight: number,
            verticalAlignment: string,
            wrapText: boolean
        }
    }

    /**
     * Represents the format protection of a range object.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class FormatProtection mixins OfficeExtension.ClientObject {

        /**
         * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.
         * 
        [Api set: ExcelApi 1.2]
        */
        formulaHidden: boolean;

        /**
         * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.
         * 
        [Api set: ExcelApi 1.2]
        */
        locked: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.FormatProtection;
        toJSON(): {
            formulaHidden: boolean,
            locked: boolean
        }
    }

    /**
     * Represents the background of a range object.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class RangeFill mixins OfficeExtension.ClientObject {

        /**
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange")
         * 
        [Api set: ExcelApi 1.1]
        */
        color: string;

        /**
         * Resets the range background.
         * 
        [Api set: ExcelApi 1.1]
        */
        clear(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeFill;
        toJSON(): {
            color: string
        }
    }

    /**
     * Represents the border of an object.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class RangeBorder mixins OfficeExtension.ClientObject {

        /**
         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").
         * 
        [Api set: ExcelApi 1.1]
        */
        color: string;

        /**
         * Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        sideIndex: string;

        /**
         * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        style: string;

        /**
         * Specifies the weight of the border around a range. See Excel.BorderWeight for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        weight: string;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeBorder;
        toJSON(): {
            color: string,
            sideIndex: string,
            style: string,
            weight: string
        }
    }

    /**
     * Represents the border objects that make up range border.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class RangeBorderCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.RangeBorder>;

        /**
         * Number of border objects in the collection. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Gets a border object using its name
         * @param index Index value of the border object to be retrieved. See Excel.BorderIndex for details.

        [Api set: ExcelApi 1.1]
        */
        getItem(index: string): Excel.RangeBorder;

        /**
         * Gets a border object using its index
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.RangeBorder;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeBorderCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * This object represents the font attributes (font name, font size, color, etc.) for an object.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class RangeFont mixins OfficeExtension.ClientObject {

        /**
         * Represents the bold status of font.
         * 
        [Api set: ExcelApi 1.1]
        */
        bold: boolean;

        /**
         * HTML color code representation of the text color. E.g. #FF0000 represents Red.
         * 
        [Api set: ExcelApi 1.1]
        */
        color: string;

        /**
         * Represents the italic status of the font.
         * 
        [Api set: ExcelApi 1.1]
        */
        italic: boolean;

        /**
         * Font name (e.g. "Calibri")
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Font size.
         * 
        [Api set: ExcelApi 1.1]
        */
        size: number;

        /**
         * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        underline: string;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.RangeFont;
        toJSON(): {
            bold: boolean,
            color: string,
            italic: boolean,
            name: string,
            size: number,
            underline: string
        }
    }

    /**
     * A collection of all the chart objects on a worksheet.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.Chart>;

        /**
         * Returns the number of charts in the worksheet. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Creates a new chart.
         * @param type Represents the type of a chart. See Excel.ChartType for details.
         * @param sourceData The Range object corresponding to the source data.
         * @param seriesBy Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy for details.

        [Api set: ExcelApi 1.1]
        */
        add(type: string, sourceData: Excel.Range, seriesBy?: string): Excel.Chart;

        /**
         * Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.
         * @param name Name of the chart to be retrieved.

        [Api set: ExcelApi 1.1]
        */
        getItem(name: string): Excel.Chart;

        /**
         * Gets a chart based on its position in the collection.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.Chart;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a chart object in a workbook.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class Chart mixins OfficeExtension.ClientObject {

        /**
         * Represents chart axes. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        axes: Excel.ChartAxes;

        /**
         * Represents the datalabels on the chart. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        dataLabels: Excel.ChartDataLabels;

        /**
         * Encapsulates the format properties for the chart area. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartAreaFormat;

        /**
         * Represents the legend for the chart. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        legend: Excel.ChartLegend;

        /**
         * Represents either a single series or collection of series in the chart. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        series: Excel.ChartSeriesCollection;

        /**
         * Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        title: Excel.ChartTitle;

        /**
         * The worksheet containing the current chart. Read-only.
         * 
        [Api set: ExcelApi 1.2]
        */
        worksheet: Excel.Worksheet;

        /**
         * Represents the height, in points, of the chart object.
         * 
        [Api set: ExcelApi 1.1]
        */
        height: number;

        /**
         * The distance, in points, from the left side of the chart to the worksheet origin.
         * 
        [Api set: ExcelApi 1.1]
        */
        left: number;

        /**
         * Represents the name of a chart object.
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
         * 
        [Api set: ExcelApi 1.1]
        */
        top: number;

        /**
         * Represents the width, in points, of the chart object.
         * 
        [Api set: ExcelApi 1.1]
        */
        width: number;

        /**
         * Deletes the chart object.
         * 
        [Api set: ExcelApi 1.1]
        */
        delete(): void;

        /**
         * Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
         *   The aspect ratio is preserved as part of the resizing.
         * @param height (Optional) The desired height of the resulting image.
         * @param width (Optional) The desired width of the resulting image.
         * @param fittingMode (Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set)."

        [Api set: ExcelApi 1.2]
        */
        getImage(
            width?: number,
            height?: number,
            fittingMode?: string): OfficeExtension.ClientResult<string>;

        /**
         * Resets the source data for the chart.
         * @param sourceData The Range object corresponding to the source data.
         * @param seriesBy Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, Columns. See Excel.ChartSeriesBy for details.

        [Api set: ExcelApi 1.1]
        */
        setData(sourceData: Excel.Range, seriesBy?: string): void;

        /**
         * Positions the chart relative to cells on the worksheet.
         * @param startCell The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell, depending on the user's right-to-left display settings.
         * @param endCell (Optional) The end cell. If specified, the chart's width and height will be set to fully cover up this cell/range.

        [Api set: ExcelApi 1.1]
        */
        setPosition(startCell: Excel.Range | string, endCell?: Excel.Range | string): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Chart;
        toJSON(): {
            axes: ChartAxes,
            dataLabels: ChartDataLabels,
            format: ChartAreaFormat,
            height: number,
            left: number,
            legend: ChartLegend,
            name: string,
            title: ChartTitle,
            top: number,
            width: number
        }
    }

    /**
     * Encapsulates the format properties for the overall chart area.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAreaFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of an object, which includes background formatting information. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAreaFormat;
        toJSON(): {
            fill: ChartFill,
            font: ChartFont
        }
    }

    /**
     * Represents a collection of chart series.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartSeriesCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.ChartSeries>;

        /**
         * Returns the number of series in the collection. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Retrieves a series based on its position in the collection
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.ChartSeries;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartSeriesCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a series in a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartSeries mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartSeriesFormat;

        /**
         * Represents a collection of all points in the series. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        points: Excel.ChartPointsCollection;

        /**
         * Represents the name of a series in a chart.
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartSeries;
        toJSON(): {
            format: ChartSeriesFormat,
            name: string
        }
    }

    /**
     * encapsulates the format properties for the chart series
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartSeriesFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of a chart series, which includes background formating information. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Represents line formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        line: Excel.ChartLineFormat;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartSeriesFormat;
        toJSON(): {
            fill: ChartFill,
            line: ChartLineFormat
        }
    }

    /**
     * A collection of all the chart points within a series inside a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartPointsCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.ChartPoint>;

        /**
         * Returns the number of chart points in the collection. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        count: number;

        /**
         * Retrieve a point based on its position within the series.
         * @param index Index value of the object to be retrieved. Zero-indexed.

        [Api set: ExcelApi 1.1]
        */
        getItemAt(index: number): Excel.ChartPoint;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartPointsCollection;
        toJSON(): {
            count: number
        }
    }

    /**
     * Represents a point of a series in a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartPoint mixins OfficeExtension.ClientObject {

        /**
         * Encapsulates the format properties chart point. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartPointFormat;

        /**
         * Returns the value of a chart point. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        value: any;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartPoint;
        toJSON(): {
            format: ChartPointFormat,
            value: any
        }
    }

    /**
     * Represents formatting object for chart points.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartPointFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of a chart, which includes background formating information. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartPointFormat;
        toJSON(): {
            fill: ChartFill
        }
    }

    /**
     * Represents the chart axes.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAxes mixins OfficeExtension.ClientObject {

        /**
         * Represents the category axis in a chart. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        categoryAxis: Excel.ChartAxis;

        /**
         * Represents the series axis of a 3-dimensional chart. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        seriesAxis: Excel.ChartAxis;

        /**
         * Represents the value axis in an axis. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        valueAxis: Excel.ChartAxis;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAxes;
        toJSON(): {
            categoryAxis: ChartAxis,
            seriesAxis: ChartAxis,
            valueAxis: ChartAxis
        }
    }

    /**
     * Represents a single axis in a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAxis mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of a chart object, which includes line and font formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartAxisFormat;

        /**
         * Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        majorGridlines: Excel.ChartGridlines;

        /**
         * Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        minorGridlines: Excel.ChartGridlines;

        /**
         * Represents the axis title. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        title: Excel.ChartAxisTitle;

        /**
         * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
         * 
        [Api set: ExcelApi 1.1]
        */
        majorUnit: any;

        /**
         * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
         * 
        [Api set: ExcelApi 1.1]
        */
        maximum: any;

        /**
         * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
         * 
        [Api set: ExcelApi 1.1]
        */
        minimum: any;

        /**
         * Represents the interval between two minor tick marks. "Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
         * 
        [Api set: ExcelApi 1.1]
        */
        minorUnit: any;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAxis;
        toJSON(): {
            format: ChartAxisFormat,
            majorGridlines: ChartGridlines,
            majorUnit: any,
            maximum: any,
            minimum: any,
            minorGridlines: ChartGridlines,
            minorUnit: any,
            title: ChartAxisTitle
        }
    }

    /**
     * Encapsulates the format properties for the chart axis.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAxisFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Represents chart line formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        line: Excel.ChartLineFormat;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAxisFormat;
        toJSON(): {
            font: ChartFont,
            line: ChartLineFormat
        }
    }

    /**
     * Represents the title of a chart axis.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAxisTitle mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of chart axis title. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartAxisTitleFormat;

        /**
         * Represents the axis title.
         * 
        [Api set: ExcelApi 1.1]
        */
        text: string;

        /**
         * A boolean that specifies the visibility of an axis title.
         * 
        [Api set: ExcelApi 1.1]
        */
        visible: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAxisTitle;
        toJSON(): {
            format: ChartAxisTitleFormat,
            text: string,
            visible: boolean
        }
    }

    /**
     * Represents the chart axis title formatting.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartAxisTitleFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartAxisTitleFormat;
        toJSON(): {
            font: ChartFont
        }
    }

    /**
     * Represents a collection of all the data labels on a chart point.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartDataLabels mixins OfficeExtension.ClientObject {

        /**
         * Represents the format of chart data labels, which includes fill and font formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartDataLabelFormat;

        /**
         * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        position: string;

        /**
         * String representing the separator used for the data labels on a chart.
         * 
        [Api set: ExcelApi 1.1]
        */
        separator: string;

        /**
         * Boolean value representing if the data label bubble size is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showBubbleSize: boolean;

        /**
         * Boolean value representing if the data label category name is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showCategoryName: boolean;

        /**
         * Boolean value representing if the data label legend key is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showLegendKey: boolean;

        /**
         * Boolean value representing if the data label percentage is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showPercentage: boolean;

        /**
         * Boolean value representing if the data label series name is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showSeriesName: boolean;

        /**
         * Boolean value representing if the data label value is visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        showValue: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartDataLabels;
        toJSON(): {
            format: ChartDataLabelFormat,
            position: string,
            separator: string,
            showBubbleSize: boolean,
            showCategoryName: boolean,
            showLegendKey: boolean,
            showPercentage: boolean,
            showSeriesName: boolean,
            showValue: boolean
        }
    }

    /**
     * Encapsulates the format properties for the chart data labels.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartDataLabelFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of the current chart data label. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartDataLabelFormat;
        toJSON(): {
            fill: ChartFill,
            font: ChartFont
        }
    }

    /**
     * Represents major or minor gridlines on a chart axis.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartGridlines mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of chart gridlines. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartGridlinesFormat;

        /**
         * Boolean value representing if the axis gridlines are visible or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        visible: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartGridlines;
        toJSON(): {
            format: ChartGridlinesFormat,
            visible: boolean
        }
    }

    /**
     * Encapsulates the format properties for chart gridlines.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartGridlinesFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents chart line formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        line: Excel.ChartLineFormat;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartGridlinesFormat;
        toJSON(): {
            line: ChartLineFormat
        }
    }

    /**
     * Represents the legend in a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartLegend mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartLegendFormat;

        /**
         * Boolean value for whether the chart legend should overlap with the main body of the chart.
         * 
        [Api set: ExcelApi 1.1]
        */
        overlay: boolean;

        /**
         * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        position: string;

        /**
         * A boolean value the represents the visibility of a ChartLegend object.
         * 
        [Api set: ExcelApi 1.1]
        */
        visible: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartLegend;
        toJSON(): {
            format: ChartLegendFormat,
            overlay: boolean,
            position: string,
            visible: boolean
        }
    }

    /**
     * Encapsulates the format properties of a chart legend.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartLegendFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of an object, which includes background formating information. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartLegendFormat;
        toJSON(): {
            fill: ChartFill,
            font: ChartFont
        }
    }

    /**
     * Represents a chart title object of a chart.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartTitle mixins OfficeExtension.ClientObject {

        /**
         * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        format: Excel.ChartTitleFormat;

        /**
         * Boolean value representing if the chart title will overlay the chart or not.
         * 
        [Api set: ExcelApi 1.1]
        */
        overlay: boolean;

        /**
         * Represents the title text of a chart.
         * 
        [Api set: ExcelApi 1.1]
        */
        text: string;

        /**
         * A boolean value the represents the visibility of a chart title object.
         * 
        [Api set: ExcelApi 1.1]
        */
        visible: boolean;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartTitle;
        toJSON(): {
            format: ChartTitleFormat,
            overlay: boolean,
            text: string,
            visible: boolean
        }
    }

    /**
     * Provides access to the office art formatting for chart title.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartTitleFormat mixins OfficeExtension.ClientObject {

        /**
         * Represents the fill format of an object, which includes background formating information. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        fill: Excel.ChartFill;

        /**
         * Represents the font attributes (font name, font size, color, etc.) for an object. Read-only.
         * 
        [Api set: ExcelApi 1.1]
        */
        font: Excel.ChartFont;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartTitleFormat;
        toJSON(): {
            fill: ChartFill,
            font: ChartFont
        }
    }

    /**
     * Represents the fill formatting for a chart element.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartFill mixins OfficeExtension.ClientObject {

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartFill;

        /**
         * Clear the fill color of a chart element.
         * 
        [Api set: ExcelApi 1.1]
        */
        clear(): void;

        /**
         * Sets the fill formatting of a chart element to a uniform color.
         * @param color HTML color code representing the color of the border line, of the form #RRGGBB (e.g. "FFA500") or as a named HTML color (e.g. "orange").

        [Api set: ExcelApi 1.1]
        */
        setSolidColor(color: string): void;
        toJSON(): {}
    }

    /**
     * Enapsulates the formatting options for line elements.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartLineFormat mixins OfficeExtension.ClientObject {

        /**
         * HTML color code representing the color of lines in the chart.
         * 
        [Api set: ExcelApi 1.1]
        */
        color: string;

        /**
         * Clear the line format of a chart element.
         * 
        [Api set: ExcelApi 1.1]
        */
        clear(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartLineFormat;
        toJSON(): {
            color: string
        }
    }

    /**
     * This object represents the font attributes (font name, font size, color, etc.) for a chart object.
     * 
    [Api set: ExcelApi 1.1]
    */
    declare class ChartFont mixins OfficeExtension.ClientObject {

        /**
         * Represents the bold status of font.
         * 
        [Api set: ExcelApi 1.1]
        */
        bold: boolean;

        /**
         * HTML color code representation of the text color. E.g. #FF0000 represents Red.
         * 
        [Api set: ExcelApi 1.1]
        */
        color: string;

        /**
         * Represents the italic status of the font.
         * 
        [Api set: ExcelApi 1.1]
        */
        italic: boolean;

        /**
         * Font name (e.g. "Calibri")
         * 
        [Api set: ExcelApi 1.1]
        */
        name: string;

        /**
         * Size of the font (e.g. 11)
         * 
        [Api set: ExcelApi 1.1]
        */
        size: number;

        /**
         * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.
         * 
        [Api set: ExcelApi 1.1]
        */
        underline: string;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.ChartFont;
        toJSON(): {
            bold: boolean,
            color: string,
            italic: boolean,
            name: string,
            size: number,
            underline: string
        }
    }

    /**
     * Manages sorting operations on Range objects.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class RangeSort mixins OfficeExtension.ClientObject {

        /**
         * Perform a sort operation.
         * @param fields The list of conditions to sort on.
         * @param matchCase Whether to have the casing impact string ordering.
         * @param hasHeaders Whether the range has a header.
         * @param orientation Whether the operation is sorting rows or columns.
         * @param method The ordering method used for Chinese characters.

        [Api set: ExcelApi 1.2]
        */
        apply(
            fields: Array<Excel.SortField>,
            matchCase?: boolean,
            hasHeaders?: boolean,
            orientation?: string,
            method?: string): void;
        toJSON(): {}
    }

    /**
     * Manages sorting operations on Table objects.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class TableSort mixins OfficeExtension.ClientObject {

        /**
         * Represents the current conditions used to last sort the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        fields: Array<Excel.SortField>;

        /**
         * Represents whether the casing impacted the last sort of the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        matchCase: boolean;

        /**
         * Represents Chinese character ordering method last used to sort the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        method: string;

        /**
         * Perform a sort operation.
         * @param fields The list of conditions to sort on.
         * @param matchCase Whether to have the casing impact string ordering.
         * @param method The ordering method used for Chinese characters.

        [Api set: ExcelApi 1.2]
        */
        apply(fields: Array<Excel.SortField>, matchCase?: boolean, method?: string): void;

        /**
         * Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons.
         * 
        [Api set: ExcelApi 1.2]
        */
        clear(): void;

        /**
         * Reapplies the current sorting parameters to the table.
         * 
        [Api set: ExcelApi 1.2]
        */
        reapply(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.TableSort;
        toJSON(): {
            fields: SortField[],
            matchCase: boolean,
            method: string
        }
    }

    /**
     * Represents a condition in a sorting operation.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface SortField {

        /**
         * Represents whether the sorting is done in an ascending fashion.
         * 
        [Api set: ExcelApi 1.2]
        */
        ascending?: boolean,

            /**
             * Represents the color that is the target of the condition if the sorting is on font or cell color.
             * 
            [Api set: ExcelApi 1.2]
            */
            color?: string,

            /**
             * Represents additional sorting options for this field.
             * 
            [Api set: ExcelApi 1.2]
            */
            dataOption?: string,

            /**
             * Represents the icon that is the target of the condition if the sorting is on the cell's icon.
             * 
            [Api set: ExcelApi 1.2]
            */
            icon?: Excel.Icon,

            /**
             * Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
             * 
            [Api set: ExcelApi 1.2]
            */
            key: number,

            /**
             * Represents the type of sorting of this condition.
             * 
            [Api set: ExcelApi 1.2]
            */
            sortOn?: string
    }

    /**
     * Manages the filtering of a table's column.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class Filter mixins OfficeExtension.ClientObject {

        /**
         * The currently applied filter on the given column.
         * 
        [Api set: ExcelApi 1.2]
        */
        criteria: Excel.FilterCriteria;

        /**
         * Apply the given filter criteria on the given column.
         * @param criteria The criteria to apply.

        [Api set: ExcelApi 1.2]
        */
        apply(criteria: Excel.FilterCriteria): void;

        /**
         * Apply a "Bottom Item" filter to the column for the given number of elements.
         * @param count The number of elements from the bottom to show.

        [Api set: ExcelApi 1.2]
        */
        applyBottomItemsFilter(count: number): void;

        /**
         * Apply a "Bottom Percent" filter to the column for the given percentage of elements.
         * @param percent The percentage of elements from the bottom to show.

        [Api set: ExcelApi 1.2]
        */
        applyBottomPercentFilter(percent: number): void;

        /**
         * Apply a "Cell Color" filter to the column for the given color.
         * @param color The background color of the cells to show.

        [Api set: ExcelApi 1.2]
        */
        applyCellColorFilter(color: string): void;

        /**
         * Apply a "Icon" filter to the column for the given criteria strings.
         * @param criteria1 The first criteria string.
         * @param criteria2 The second criteria string.
         * @param oper The operator that describes how the two criteria are joined.

        [Api set: ExcelApi 1.2]
        */
        applyCustomFilter(criteria1: string, criteria2?: string, oper?: string): void;

        /**
         * Apply a "Dynamic" filter to the column.
         * @param criteria The dynamic criteria to apply.

        [Api set: ExcelApi 1.2]
        */
        applyDynamicFilter(criteria: string): void;

        /**
         * Apply a "Font Color" filter to the column for the given color.
         * @param color The font color of the cells to show.

        [Api set: ExcelApi 1.2]
        */
        applyFontColorFilter(color: string): void;

        /**
         * Apply a "Icon" filter to the column for the given icon.
         * @param icon The icons of the cells to show.

        [Api set: ExcelApi 1.2]
        */
        applyIconFilter(icon: Excel.Icon): void;

        /**
         * Apply a "Top Item" filter to the column for the given number of elements.
         * @param count The number of elements from the top to show.

        [Api set: ExcelApi 1.2]
        */
        applyTopItemsFilter(count: number): void;

        /**
         * Apply a "Top Percent" filter to the column for the given percentage of elements.
         * @param percent The percentage of elements from the top to show.

        [Api set: ExcelApi 1.2]
        */
        applyTopPercentFilter(percent: number): void;

        /**
         * Apply a "Values" filter to the column for the given values.
         * @param values The list of values to show.

        [Api set: ExcelApi 1.2]
        */
        applyValuesFilter(values: Array<string | Excel.FilterDatetime>): void;

        /**
         * Clear the filter on the given column.
         * 
        [Api set: ExcelApi 1.2]
        */
        clear(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.Filter;
        toJSON(): {
            criteria: FilterCriteria
        }
    }

    /**
     * Represents the filtering criteria applied to a column.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface FilterCriteria {

        /**
         * The HTML color string used to filter cells. Used with "cellColor" and "fontColor" filtering.
         * 
        [Api set: ExcelApi 1.2]
        */
        color?: string,

            /**
             * The first criterion used to filter data. Used as an operator in the case of "custom" filtering.
             *    For example ">50" for number greater than 50 or "=s" for values ending in "s".
              
               Used as a number in the case of top/bottom items/percents. E.g. "5" for the top 5 items if filterOn is set to "topItems"

            [Api set: ExcelApi 1.2]
            */
            criterion1?: string,

            /**
             * The second criterion used to filter data. Only used as an operator in the case of "custom" filtering.
             * 
            [Api set: ExcelApi 1.2]
            */
            criterion2?: string,

            /**
             * The dynamic criteria from the Excel.DynamicFilterCriteria set to apply on this column. Used with "dynamic" filtering.
             * 
            [Api set: ExcelApi 1.2]
            */
            dynamicCriteria?: string,

            /**
             * The property used by the filter to determine whether the values should stay visible.
             * 
            [Api set: ExcelApi 1.2]
            */
            filterOn: string,

            /**
             * The icon used to filter cells. Used with "icon" filtering.
             * 
            [Api set: ExcelApi 1.2]
            */
            icon?: Excel.Icon,

            /**
             * The operator used to combine criterion 1 and 2 when using "custom" filtering.
             * 
            [Api set: ExcelApi 1.2]
            */
            operator?: string,

            /**
             * The set of values to be used as part of "values" filtering.
             * 
            [Api set: ExcelApi 1.2]
            */
            values?: Array<string | Excel.FilterDatetime >
    }

    /**
     * Represents how to filter a date when filtering on values.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface FilterDatetime {

        /**
         * The date in ISO8601 format used to filter data.
         * 
        [Api set: ExcelApi 1.2]
        */
        date: string,

            /**
             * How specific the date should be used to keep data. For example, if the date is 2005-04-02 and the specifity is set to "month", the filter operation will keep all rows with a date in the month of april 2009.
             * 
            [Api set: ExcelApi 1.2]
            */
            specificity: string
    }

    /**
     * Represents a cell icon.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare interface Icon {

        /**
         * Represents the index of the icon in the given set.
         * 
        [Api set: ExcelApi 1.2]
        */
        index: number,

            /**
             * Represents the set that the icon is part of.
             * 
            [Api set: ExcelApi 1.2]
            */
            set: string
    }

    /**
     * Represents a collection of all the PivotTables that are part of the workbook or worksheet.
     * 
    [Api set: ExcelApi 1.3]
    */
    declare class PivotTableCollection mixins OfficeExtension.ClientObject {

        /**
         * Gets the loaded child items in this collection. 
         */
        items: Array<Excel.PivotTable>;

        /**
         * Gets a PivotTable by name.
         * @param name Name of the PivotTable to be retrieved.

        [Api set: ExcelApi 1.3]
        */
        getItem(name: string): Excel.PivotTable;

        /**
         * Refreshes all the PivotTables in the collection.
         * 
        [Api set: ExcelApi 1.3]
        */
        refreshAll(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(
            option?: string | string[] | OfficeExtension.LoadOption): Excel.PivotTableCollection;
        toJSON(): {}
    }

    /**
     * Represents an Excel PivotTable.
     * 
    [Api set: ExcelApi 1.3]
    */
    declare class PivotTable mixins OfficeExtension.ClientObject {

        /**
         * The worksheet containing the current PivotTable. Read-only.
         * 
        [Api set: ExcelApi 1.3]
        */
        worksheet: Excel.Worksheet;

        /**
         * Name of the PivotTable.
         * 
        [Api set: ExcelApi 1.3]
        */
        name: string;

        /**
         * Refreshes the PivotTable.
         * 
        [Api set: ExcelApi 1.3]
        */
        refresh(): void;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): Excel.PivotTable;
        toJSON(): {
            name: string
        }
    }
    declare module 'BindingType' {
        declare     var range: string;
        declare     var table: string;
        declare     var text: string;
    }

    declare module 'BorderIndex' {
        declare     var edgeTop: string;
        declare     var edgeBottom: string;
        declare     var edgeLeft: string;
        declare     var edgeRight: string;
        declare     var insideVertical: string;
        declare     var insideHorizontal: string;
        declare     var diagonalDown: string;
        declare     var diagonalUp: string;
    }

    declare module 'BorderLineStyle' {
        declare     var none: string;
        declare     var continuous: string;
        declare     var dash: string;
        declare     var dashDot: string;
        declare     var dashDotDot: string;
        declare     var dot: string;
        declare     var double: string;
        declare     var slantDashDot: string;
    }

    declare module 'BorderWeight' {
        declare     var hairline: string;
        declare     var thin: string;
        declare     var medium: string;
        declare     var thick: string;
    }

    declare module 'CalculationMode' {
        declare     var automatic: string;
        declare     var automaticExceptTables: string;
        declare     var manual: string;
    }

    declare module 'CalculationType' {
        declare     var recalculate: string;
        declare     var full: string;
        declare     var fullRebuild: string;
    }

    declare module 'ClearApplyTo' {
        declare     var all: string;
        declare     var formats: string;
        declare     var contents: string;
    }

    declare module 'ChartDataLabelPosition' {
        declare     var invalid: string;
        declare     var none: string;
        declare     var center: string;
        declare     var insideEnd: string;
        declare     var insideBase: string;
        declare     var outsideEnd: string;
        declare     var left: string;
        declare     var right: string;
        declare     var top: string;
        declare     var bottom: string;
        declare     var bestFit: string;
        declare     var callout: string;
    }

    declare module 'ChartLegendPosition' {
        declare     var invalid: string;
        declare     var top: string;
        declare     var bottom: string;
        declare     var left: string;
        declare     var right: string;
        declare     var corner: string;
        declare     var custom: string;
    }

    declare module 'ChartSeriesBy' {
        declare     var auto: string;
        declare     var columns: string;
        declare     var rows: string;
    }

    declare module 'ChartType' {
        declare     var invalid: string;
        declare     var columnClustered: string;
        declare     var columnStacked: string;
        declare     var columnStacked100: string;
        declare     var _3DColumnClustered: string;
        declare     var _3DColumnStacked: string;
        declare     var _3DColumnStacked100: string;
        declare     var barClustered: string;
        declare     var barStacked: string;
        declare     var barStacked100: string;
        declare     var _3DBarClustered: string;
        declare     var _3DBarStacked: string;
        declare     var _3DBarStacked100: string;
        declare     var lineStacked: string;
        declare     var lineStacked100: string;
        declare     var lineMarkers: string;
        declare     var lineMarkersStacked: string;
        declare     var lineMarkersStacked100: string;
        declare     var pieOfPie: string;
        declare     var pieExploded: string;
        declare     var _3DPieExploded: string;
        declare     var barOfPie: string;
        declare     var xyscatterSmooth: string;
        declare     var xyscatterSmoothNoMarkers: string;
        declare     var xyscatterLines: string;
        declare     var xyscatterLinesNoMarkers: string;
        declare     var areaStacked: string;
        declare     var areaStacked100: string;
        declare     var _3DAreaStacked: string;
        declare     var _3DAreaStacked100: string;
        declare     var doughnutExploded: string;
        declare     var radarMarkers: string;
        declare     var radarFilled: string;
        declare     var surface: string;
        declare     var surfaceWireframe: string;
        declare     var surfaceTopView: string;
        declare     var surfaceTopViewWireframe: string;
        declare     var bubble: string;
        declare     var bubble3DEffect: string;
        declare     var stockHLC: string;
        declare     var stockOHLC: string;
        declare     var stockVHLC: string;
        declare     var stockVOHLC: string;
        declare     var cylinderColClustered: string;
        declare     var cylinderColStacked: string;
        declare     var cylinderColStacked100: string;
        declare     var cylinderBarClustered: string;
        declare     var cylinderBarStacked: string;
        declare     var cylinderBarStacked100: string;
        declare     var cylinderCol: string;
        declare     var coneColClustered: string;
        declare     var coneColStacked: string;
        declare     var coneColStacked100: string;
        declare     var coneBarClustered: string;
        declare     var coneBarStacked: string;
        declare     var coneBarStacked100: string;
        declare     var coneCol: string;
        declare     var pyramidColClustered: string;
        declare     var pyramidColStacked: string;
        declare     var pyramidColStacked100: string;
        declare     var pyramidBarClustered: string;
        declare     var pyramidBarStacked: string;
        declare     var pyramidBarStacked100: string;
        declare     var pyramidCol: string;
        declare     var _3DColumn: string;
        declare     var line: string;
        declare     var _3DLine: string;
        declare     var _3DPie: string;
        declare     var pie: string;
        declare     var xyscatter: string;
        declare     var _3DArea: string;
        declare     var area: string;
        declare     var doughnut: string;
        declare     var radar: string;
    }

    declare module 'ChartUnderlineStyle' {
        declare     var none: string;
        declare     var single: string;
    }

    declare module 'DeleteShiftDirection' {
        declare     var up: string;
        declare     var left: string;
    }

    declare module 'DynamicFilterCriteria' {
        declare     var unknown: string;
        declare     var aboveAverage: string;
        declare     var allDatesInPeriodApril: string;
        declare     var allDatesInPeriodAugust: string;
        declare     var allDatesInPeriodDecember: string;
        declare     var allDatesInPeriodFebruray: string;
        declare     var allDatesInPeriodJanuary: string;
        declare     var allDatesInPeriodJuly: string;
        declare     var allDatesInPeriodJune: string;
        declare     var allDatesInPeriodMarch: string;
        declare     var allDatesInPeriodMay: string;
        declare     var allDatesInPeriodNovember: string;
        declare     var allDatesInPeriodOctober: string;
        declare     var allDatesInPeriodQuarter1: string;
        declare     var allDatesInPeriodQuarter2: string;
        declare     var allDatesInPeriodQuarter3: string;
        declare     var allDatesInPeriodQuarter4: string;
        declare     var allDatesInPeriodSeptember: string;
        declare     var belowAverage: string;
        declare     var lastMonth: string;
        declare     var lastQuarter: string;
        declare     var lastWeek: string;
        declare     var lastYear: string;
        declare     var nextMonth: string;
        declare     var nextQuarter: string;
        declare     var nextWeek: string;
        declare     var nextYear: string;
        declare     var thisMonth: string;
        declare     var thisQuarter: string;
        declare     var thisWeek: string;
        declare     var thisYear: string;
        declare     var today: string;
        declare     var tomorrow: string;
        declare     var yearToDate: string;
        declare     var yesterday: string;
    }

    declare module 'FilterDatetimeSpecificity' {
        declare     var year: string;
        declare     var month: string;
        declare     var day: string;
        declare     var hour: string;
        declare     var minute: string;
        declare     var second: string;
    }

    declare module 'FilterOn' {
        declare     var bottomItems: string;
        declare     var bottomPercent: string;
        declare     var cellColor: string;
        declare     var dynamic: string;
        declare     var fontColor: string;
        declare     var values: string;
        declare     var topItems: string;
        declare     var topPercent: string;
        declare     var icon: string;
        declare     var custom: string;
    }

    declare module 'FilterOperator' {
        declare     var and: string;
        declare     var or: string;
    }

    declare module 'HorizontalAlignment' {
        declare     var general: string;
        declare     var left: string;
        declare     var center: string;
        declare     var right: string;
        declare     var fill: string;
        declare     var justify: string;
        declare     var centerAcrossSelection: string;
        declare     var distributed: string;
    }

    declare module 'IconSet' {
        declare     var invalid: string;
        declare     var threeArrows: string;
        declare     var threeArrowsGray: string;
        declare     var threeFlags: string;
        declare     var threeTrafficLights1: string;
        declare     var threeTrafficLights2: string;
        declare     var threeSigns: string;
        declare     var threeSymbols: string;
        declare     var threeSymbols2: string;
        declare     var fourArrows: string;
        declare     var fourArrowsGray: string;
        declare     var fourRedToBlack: string;
        declare     var fourRating: string;
        declare     var fourTrafficLights: string;
        declare     var fiveArrows: string;
        declare     var fiveArrowsGray: string;
        declare     var fiveRating: string;
        declare     var fiveQuarters: string;
        declare     var threeStars: string;
        declare     var threeTriangles: string;
        declare     var fiveBoxes: string;
    }

    declare module 'ImageFittingMode' {
        declare     var fit: string;
        declare     var fitAndCenter: string;
        declare     var fill: string;
    }

    declare module 'InsertShiftDirection' {
        declare     var down: string;
        declare     var right: string;
    }

    declare module 'NamedItemType' {
        declare     var string: string;
        declare     var integer: string;
        declare     var double: string;
        declare     var boolean: string;
        declare     var range: string;
        declare     var error: string;
    }

    declare module 'RangeUnderlineStyle' {
        declare     var none: string;
        declare     var single: string;
        declare     var double: string;
        declare     var singleAccountant: string;
        declare     var doubleAccountant: string;
    }

    declare module 'SheetVisibility' {
        declare     var visible: string;
        declare     var hidden: string;
        declare     var veryHidden: string;
    }

    declare module 'RangeValueType' {
        declare     var unknown: string;
        declare     var empty: string;
        declare     var string: string;
        declare     var integer: string;
        declare     var double: string;
        declare     var boolean: string;
        declare     var error: string;
    }

    declare module 'SortOrientation' {
        declare     var rows: string;
        declare     var columns: string;
    }

    declare module 'SortOn' {
        declare     var value: string;
        declare     var cellColor: string;
        declare     var fontColor: string;
        declare     var icon: string;
    }

    declare module 'SortDataOption' {
        declare     var normal: string;
        declare     var textAsNumber: string;
    }

    declare module 'SortMethod' {
        declare     var pinYin: string;
        declare     var strokeCount: string;
    }

    declare module 'VerticalAlignment' {
        declare     var top: string;
        declare     var center: string;
        declare     var bottom: string;
        declare     var justify: string;
        declare     var distributed: string;
        declare     var mixed: string;
    }


    /**
     * An object containing the result of a function-evaluation operation
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class FunctionResult<T>mixins OfficeExtension.ClientObject {

        /**
         * Error value (such as "#DIV/0") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.
         * 
        [Api set: ExcelApi 1.2]
        */
        error: string;

        /**
         * The value of function evaluation. The value field will be populated only if no error has occurred (i.e., the Error property is not set).
         * 
        [Api set: ExcelApi 1.2]
        */
        value: T;

        /**
         * Queues up a command to load the specified properties of the object. You must call "context.sync()" before reading the properties.
         */
        load(option?: string | string[] | OfficeExtension.LoadOption): FunctionResult<T>;
        toJSON(): {
            error: string,
            value: T
        }
    }

    /**
     * An object for evaluating Excel functions.
     * 
    [Api set: ExcelApi 1.2]
    */
    declare class Functions mixins OfficeExtension.ClientObject {

        /**
         * Returns the absolute value of a number, a number without its sign.
         * @param number Is the real number for which you want the absolute value.

        [Api set: ExcelApi 1.2]
        */
        abs(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the accrued interest for a security that pays periodic interest.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param firstInterest Is the security's first interest date, expressed as a serial date number.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param rate Is the security's annual coupon rate.
         * @param par Is the security's par value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.
         * @param calcMethod Is a logical value: to accrued interest from issue date = TRUE or omitted; to calculate from last coupon payment date = FALSE.

        [Api set: ExcelApi 1.2]
        */
        accrInt(
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            firstInterest: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            par: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            calcMethod?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the accrued interest for a security that pays interest at maturity.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param settlement Is the security's maturity date, expressed as a serial date number.
         * @param rate Is the security's annual coupon rate.
         * @param par Is the security's par value.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        accrIntM(
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            par: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the arccosine of a number, in radians in the range 0 to Pi. The arccosine is the angle whose cosine is Number.
         * @param number Is the cosine of the angle you want and must be from -1 to 1.

        [Api set: ExcelApi 1.2]
        */
        acos(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse hyperbolic cosine of a number.
         * @param number Is any real number equal to or greater than 1.

        [Api set: ExcelApi 1.2]
        */
        acosh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the arccotangent of a number, in radians in the range 0 to Pi.
         * @param number Is the cotangent of the angle you want.

        [Api set: ExcelApi 1.2]
        */
        acot(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse hyperbolic cotangent of a number.
         * @param number Is the hyperbolic cotangent of the angle that you want.

        [Api set: ExcelApi 1.2]
        */
        acoth(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the prorated linear depreciation of an asset for each accounting period.
         * @param cost Is the cost of the asset.
         * @param datePurchased Is the date the asset is purchased.
         * @param firstPeriod Is the date of the end of the first period.
         * @param salvage Is the salvage value at the end of life of the asset.
         * @param period Is the period.
         * @param rate Is the rate of depreciation.
         * @param basis Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.

        [Api set: ExcelApi 1.2]
        */
        amorDegrc(
            cost: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            datePurchased: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            firstPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            salvage: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            period: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the prorated linear depreciation of an asset for each accounting period.
         * @param cost Is the cost of the asset.
         * @param datePurchased Is the date the asset is purchased.
         * @param firstPeriod Is the date of the end of the first period.
         * @param salvage Is the salvage value at the end of life of the asset.
         * @param period Is the period.
         * @param rate Is the rate of depreciation.
         * @param basis Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.

        [Api set: ExcelApi 1.2]
        */
        amorLinc(
            cost: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            datePurchased: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            firstPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            salvage: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            period: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE.
         * @param values List of parameters, whose elements are 1 to 255 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.

        [Api set: ExcelApi 1.2]
        */
        and(
            ...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<boolean>;

        /**
         * Converts a Roman numeral to Arabic.
         * @param text Is the Roman numeral you want to convert.

        [Api set: ExcelApi 1.2]
        */
        arabic(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of areas in a reference. An area is a range of contiguous cells or a single cell.
         * @param reference Is a reference to a cell or range of cells and can refer to multiple areas.

        [Api set: ExcelApi 1.2]
        */
        areas(
            reference: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Changes full-width (double-byte) characters to half-width (single-byte) characters. Use with double-byte character sets (DBCS).
         * @param text Is a text, or a reference to a cell containing a text.

        [Api set: ExcelApi 1.2]
        */
        asc(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the arcsine of a number in radians, in the range -Pi/2 to Pi/2.
         * @param number Is the sine of the angle you want and must be from -1 to 1.

        [Api set: ExcelApi 1.2]
        */
        asin(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse hyperbolic sine of a number.
         * @param number Is any real number equal to or greater than 1.

        [Api set: ExcelApi 1.2]
        */
        asinh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the arctangent of a number in radians, in the range -Pi/2 to Pi/2.
         * @param number Is the tangent of the angle you want.

        [Api set: ExcelApi 1.2]
        */
        atan(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the arctangent of the specified x- and y- coordinates, in radians between -Pi and Pi, excluding -Pi.
         * @param xNum Is the x-coordinate of the point.
         * @param yNum Is the y-coordinate of the point.

        [Api set: ExcelApi 1.2]
        */
        atan2(
            xNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            yNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse hyperbolic tangent of a number.
         * @param number Is any real number between -1 and 1 excluding -1 and 1.

        [Api set: ExcelApi 1.2]
        */
        atanh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the average of the absolute deviations of data points from their mean. Arguments can be numbers or names, arrays, or references that contain numbers.
         * @param values List of parameters, whose elements are 1 to 255 arguments for which you want the average of the absolute deviations.

        [Api set: ExcelApi 1.2]
        */
        aveDev(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the average (arithmetic mean) of its arguments, which can be numbers or names, arrays, or references that contain numbers.
         * @param values List of parameters, whose elements are 1 to 255 numeric arguments for which you want the average.

        [Api set: ExcelApi 1.2]
        */
        average(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the average (arithmetic mean) of its arguments, evaluating text and FALSE in arguments as 0; TRUE evaluates as 1. Arguments can be numbers, names, arrays, or references.
         * @param values List of parameters, whose elements are 1 to 255 arguments for which you want the average.

        [Api set: ExcelApi 1.2]
        */
        averageA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Finds average(arithmetic mean) for the cells specified by a given condition or criteria.
         * @param range Is the range of cells you want evaluated.
         * @param criteria Is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.
         * @param averageRange Are the actual cells to be used to find the average. If omitted, the cells in range are used.

        [Api set: ExcelApi 1.2]
        */
        averageIf(
            range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            criteria: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            averageRange?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Finds average(arithmetic mean) for the cells specified by a given set of conditions or criteria.
         * @param averageRange Are the actual cells to be used to find the average.
         * @param values List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.

        [Api set: ExcelApi 1.2]
        */
        averageIfs(
            averageRange: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ...values: Array<Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any >
            |
            number |
            string |
            boolean>): FunctionResult<number>;

        /**
         * Converts a number to text (baht).
         * @param number Is a number that you want to convert.

        [Api set: ExcelApi 1.2]
        */
        bahtText(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Converts a number into a text representation with the given radix (base).
         * @param number Is the number that you want to convert.
         * @param radix Is the base Radix that you want to convert the number into.
         * @param minLength Is the minimum length of the returned string.  If omitted leading zeros are not added.

        [Api set: ExcelApi 1.2]
        */
        base(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            radix: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            minLength?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the modified Bessel function In(x).
         * @param x Is the value at which to evaluate the function.
         * @param n Is the order of the Bessel function.

        [Api set: ExcelApi 1.2]
        */
        besselI(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            n: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Bessel function Jn(x).
         * @param x Is the value at which to evaluate the function.
         * @param n Is the order of the Bessel function.

        [Api set: ExcelApi 1.2]
        */
        besselJ(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            n: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the modified Bessel function Kn(x).
         * @param x Is the value at which to evaluate the function.
         * @param n Is the order of the function.

        [Api set: ExcelApi 1.2]
        */
        besselK(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            n: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Bessel function Yn(x).
         * @param x Is the value at which to evaluate the function.
         * @param n Is the order of the function.

        [Api set: ExcelApi 1.2]
        */
        besselY(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            n: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the beta probability distribution function.
         * @param x Is the value between A and B at which to evaluate the function.
         * @param alpha Is a parameter to the distribution and must be greater than 0.
         * @param beta Is a parameter to the distribution and must be greater than 0.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.
         * @param A Is an optional lower bound to the interval of x. If omitted, A = 0.
         * @param B Is an optional upper bound to the interval of x. If omitted, B = 1.

        [Api set: ExcelApi 1.2]
        */
        beta_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            A?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            B?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the cumulative beta probability density function (BETA.DIST).
         * @param probability Is a probability associated with the beta distribution.
         * @param alpha Is a parameter to the distribution and must be greater than 0.
         * @param beta Is a parameter to the distribution and must be greater than 0.
         * @param A Is an optional lower bound to the interval of x. If omitted, A = 0.
         * @param B Is an optional upper bound to the interval of x. If omitted, B = 1.

        [Api set: ExcelApi 1.2]
        */
        beta_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            A?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            B?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a binary number to decimal.
         * @param number Is the binary number you want to convert.

        [Api set: ExcelApi 1.2]
        */
        bin2Dec(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a binary number to hexadecimal.
         * @param number Is the binary number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        bin2Hex(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a binary number to octal.
         * @param number Is the binary number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        bin2Oct(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the individual term binomial distribution probability.
         * @param numberS Is the number of successes in trials.
         * @param trials Is the number of independent trials.
         * @param probabilityS Is the probability of success on each trial.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        binom_Dist(
            numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the probability of a trial result using a binomial distribution.
         * @param trials Is the number of independent trials.
         * @param probabilityS Is the probability of success on each trial.
         * @param numberS Is the number of successes in trials.
         * @param numberS2 If provided this function returns the probability that the number of successful trials shall lie between numberS and numberS2.

        [Api set: ExcelApi 1.2]
        */
        binom_Dist_Range(
            trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberS2?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
         * @param trials Is the number of Bernoulli trials.
         * @param probabilityS Is the probability of success on each trial, a number between 0 and 1 inclusive.
         * @param alpha Is the criterion value, a number between 0 and 1 inclusive.

        [Api set: ExcelApi 1.2]
        */
        binom_Inv(
            trials: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a bitwise 'And' of two numbers.
         * @param number1 Is the decimal representation of the binary number you want to evaluate.
         * @param number2 Is the decimal representation of the binary number you want to evaluate.

        [Api set: ExcelApi 1.2]
        */
        bitand(
            number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a number shifted left by shift_amount bits.
         * @param number Is the decimal representation of the binary number you want to evaluate.
         * @param shiftAmount Is the number of bits that you want to shift Number left by.

        [Api set: ExcelApi 1.2]
        */
        bitlshift(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            shiftAmount: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a bitwise 'Or' of two numbers.
         * @param number1 Is the decimal representation of the binary number you want to evaluate.
         * @param number2 Is the decimal representation of the binary number you want to evaluate.

        [Api set: ExcelApi 1.2]
        */
        bitor(
            number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a number shifted right by shift_amount bits.
         * @param number Is the decimal representation of the binary number you want to evaluate.
         * @param shiftAmount Is the number of bits that you want to shift Number right by.

        [Api set: ExcelApi 1.2]
        */
        bitrshift(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            shiftAmount: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a bitwise 'Exclusive Or' of two numbers.
         * @param number1 Is the decimal representation of the binary number you want to evaluate.
         * @param number2 Is the decimal representation of the binary number you want to evaluate.

        [Api set: ExcelApi 1.2]
        */
        bitxor(
            number1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            number2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the value you want to round.
         * @param significance Is the multiple to which you want to round.
         * @param mode When given and nonzero this function will round away from zero.

        [Api set: ExcelApi 1.2]
        */
        ceiling_Math(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mode?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the value you want to round.
         * @param significance Is the multiple to which you want to round.

        [Api set: ExcelApi 1.2]
        */
        ceiling_Precise(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the character specified by the code number from the character set for your computer.
         * @param number Is a number between 1 and 255 specifying which character you want.

        [Api set: ExcelApi 1.2]
        */
        char(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the left-tailed probability of the chi-squared distribution.
         * @param x Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param degFreedom Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param cumulative Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.

        [Api set: ExcelApi 1.2]
        */
        chiSq_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the right-tailed probability of the chi-squared distribution.
         * @param x Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param degFreedom Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        chiSq_Dist_RT(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the left-tailed probability of the chi-squared distribution.
         * @param probability Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.
         * @param degFreedom Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        chiSq_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the right-tailed probability of the chi-squared distribution.
         * @param probability Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.
         * @param degFreedom Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        chiSq_Inv_RT(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Chooses a value or action to perform from a list of values, based on an index number.
         * @param indexNum Specifies which value argument is selected. indexNum must be between 1 and 254, or a formula or a reference to a number between 1 and 254.
         * @param values List of parameters, whose elements are 1 to 254 numbers, cell references, defined names, formulas, functions, or text arguments from which CHOOSE selects.

        [Api set: ExcelApi 1.2]
        */
        choose(
            indexNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ...values: Array<Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number | string | boolean>;

        /**
         * Removes all nonprintable characters from text.
         * @param text Is any worksheet information from which you want to remove nonprintable characters.

        [Api set: ExcelApi 1.2]
        */
        clean(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns a numeric code for the first character in a text string, in the character set used by your computer.
         * @param text Is the text for which you want the code of the first character.

        [Api set: ExcelApi 1.2]
        */
        code(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of columns in an array or reference.
         * @param array Is an array or array formula, or a reference to a range of cells for which you want the number of columns.

        [Api set: ExcelApi 1.2]
        */
        columns(
            array: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of combinations for a given number of items.
         * @param number Is the total number of items.
         * @param numberChosen Is the number of items in each combination.

        [Api set: ExcelApi 1.2]
        */
        combin(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of combinations with repetitions for a given number of items.
         * @param number Is the total number of items.
         * @param numberChosen Is the number of items in each combination.

        [Api set: ExcelApi 1.2]
        */
        combina(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts real and imaginary coefficients into a complex number.
         * @param realNum Is the real coefficient of the complex number.
         * @param iNum Is the imaginary coefficient of the complex number.
         * @param suffix Is the suffix for the imaginary component of the complex number.

        [Api set: ExcelApi 1.2]
        */
        complex(
            realNum: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            iNum: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            suffix?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Joins several text strings into one text string.
         * @param values List of parameters, whose elements are 1 to 255 text strings to be joined into a single text string and can be text strings, numbers, or single-cell references.

        [Api set: ExcelApi 1.2]
        */
        concatenate(
            ...values: Array<string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<string>;

        /**
         * Returns the confidence interval for a population mean, using a normal distribution.
         * @param alpha Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.
         * @param standardDev Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.
         * @param size Is the sample size.

        [Api set: ExcelApi 1.2]
        */
        confidence_Norm(
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            size: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the confidence interval for a population mean, using a Student's T distribution.
         * @param alpha Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.
         * @param standardDev Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.
         * @param size Is the sample size.

        [Api set: ExcelApi 1.2]
        */
        confidence_T(
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            size: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a number from one measurement system to another.
         * @param number Is the value in from_units to convert.
         * @param fromUnit Is the units for number.
         * @param toUnit Is the units for the result.

        [Api set: ExcelApi 1.2]
        */
        convert(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            fromUnit: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            toUnit: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cosine of an angle.
         * @param number Is the angle in radians for which you want the cosine.

        [Api set: ExcelApi 1.2]
        */
        cos(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic cosine of a number.
         * @param number Is any real number.

        [Api set: ExcelApi 1.2]
        */
        cosh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cotangent of an angle.
         * @param number Is the angle in radians for which you want the cotangent.

        [Api set: ExcelApi 1.2]
        */
        cot(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic cotangent of a number.
         * @param number Is the angle in radians for which you want the hyperbolic cotangent.

        [Api set: ExcelApi 1.2]
        */
        coth(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Counts the number of cells in a range that contain numbers.
         * @param values List of parameters, whose elements are 1 to 255 arguments that can contain or refer to a variety of different types of data, but only numbers are counted.

        [Api set: ExcelApi 1.2]
        */
        count(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Counts the number of cells in a range that are not empty.
         * @param values List of parameters, whose elements are 1 to 255 arguments representing the values and cells you want to count. Values can be any type of information.

        [Api set: ExcelApi 1.2]
        */
        countA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Counts the number of empty cells in a specified range of cells.
         * @param range Is the range from which you want to count the empty cells.

        [Api set: ExcelApi 1.2]
        */
        countBlank(
            range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Counts the number of cells within a range that meet the given condition.
         * @param range Is the range of cells from which you want to count nonblank cells.
         * @param criteria Is the condition in the form of a number, expression, or text that defines which cells will be counted.

        [Api set: ExcelApi 1.2]
        */
        countIf(
            range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            criteria: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Counts the number of cells specified by a given set of conditions or criteria.
         * @param values List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition in the form of a number, expression, or text that defines which cells will be counted.

        [Api set: ExcelApi 1.2]
        */
        countIfs(
            ...values: Array<Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any >
            |
            number |
            string |
            boolean>): FunctionResult<number>;

        /**
         * Returns the number of days from the beginning of the coupon period to the settlement date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupDayBs(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of days in the coupon period that contains the settlement date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupDays(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of days from the settlement date to the next coupon date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupDaysNc(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the next coupon date after the settlement date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupNcd(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of coupons payable between the settlement date and maturity date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupNum(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the previous coupon date before the settlement date.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        coupPcd(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cosecant of an angle.
         * @param number Is the angle in radians for which you want the cosecant.

        [Api set: ExcelApi 1.2]
        */
        csc(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic cosecant of an angle.
         * @param number Is the angle in radians for which you want the hyperbolic cosecant.

        [Api set: ExcelApi 1.2]
        */
        csch(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cumulative interest paid between two periods.
         * @param rate Is the interest rate.
         * @param nper Is the total number of payment periods.
         * @param pv Is the present value.
         * @param startPeriod Is the first period in the calculation.
         * @param endPeriod Is the last period in the calculation.
         * @param type Is the timing of the payment.

        [Api set: ExcelApi 1.2]
        */
        cumIPmt(
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            nper: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pv: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            startPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            endPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            type: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cumulative principal paid on a loan between two periods.
         * @param rate Is the interest rate.
         * @param nper Is the total number of payment periods.
         * @param pv Is the present value.
         * @param startPeriod Is the first period in the calculation.
         * @param endPeriod Is the last period in the calculation.
         * @param type Is the timing of the payment.

        [Api set: ExcelApi 1.2]
        */
        cumPrinc(
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            nper: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pv: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            startPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            endPeriod: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            type: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Averages the values in a column in a list or database that match conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        daverage(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dcount(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dcountA(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Extracts from a database a single record that matches the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dget(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | boolean | string>;

        /**
         * Returns the largest number in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dmax(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the smallest number in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dmin(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Multiplies the values in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dproduct(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Estimates the standard deviation based on a sample from selected database entries.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dstDev(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Calculates the standard deviation based on the entire population of selected database entries.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dstDevP(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Adds the numbers in the field (column) of records in the database that match the conditions you specify.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dsum(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Estimates variance based on a sample from selected database entries.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dvar(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Calculates variance based on the entire population of selected database entries.
         * @param database Is the range of cells that makes up the list or database. A database is a list of related data.
         * @param field Is either the label of the column in double quotation marks or a number that represents the column's position in the list.
         * @param criteria Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.

        [Api set: ExcelApi 1.2]
        */
        dvarP(
            database: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            field: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            criteria: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number that represents the date in Microsoft Excel date-time code.
         * @param year Is a number from 1900 or 1904 (depending on the workbook's date system) to 9999.
         * @param month Is a number from 1 to 12 representing the month of the year.
         * @param day Is a number from 1 to 31 representing the day of the month.

        [Api set: ExcelApi 1.2]
        */
        date(
            year: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            month: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            day: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a date in the form of text to a number that represents the date in Microsoft Excel date-time code.
         * @param dateText Is text that represents a date in a Microsoft Excel date format, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.

        [Api set: ExcelApi 1.2]
        */
        datevalue(
            dateText: string |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the day of the month, a number from 1 to 31.
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel.

        [Api set: ExcelApi 1.2]
        */
        day(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of days between the two dates.
         * @param endDate startDate and endDate are the two dates between which you want to know the number of days.
         * @param startDate startDate and endDate are the two dates between which you want to know the number of days.

        [Api set: ExcelApi 1.2]
        */
        days(
            endDate: string |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            startDate: string |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of days between two dates based on a 360-day year (twelve 30-day months).
         * @param startDate startDate and endDate are the two dates between which you want to know the number of days.
         * @param endDate startDate and endDate are the two dates between which you want to know the number of days.
         * @param method Is a logical value specifying the calculation method: U.S. (NASD) = FALSE or omitted; European = TRUE.

        [Api set: ExcelApi 1.2]
        */
        days360(
            startDate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            endDate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            method?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the depreciation of an asset for a specified period using the fixed-declining balance method.
         * @param cost Is the initial cost of the asset.
         * @param salvage Is the salvage value at the end of the life of the asset.
         * @param life Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param period Is the period for which you want to calculate the depreciation. Period must use the same units as Life.
         * @param month Is the number of months in the first year. If month is omitted, it is assumed to be 12.

        [Api set: ExcelApi 1.2]
        */
        db(
            cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            period: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            month?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Changes half-width (single-byte) characters within a character string to full-width (double-byte) characters. Use with double-byte character sets (DBCS).
         * @param text Is a text, or a reference to a cell containing a text.

        [Api set: ExcelApi 1.2]
        */
        dbcs(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.
         * @param cost Is the initial cost of the asset.
         * @param salvage Is the salvage value at the end of the life of the asset.
         * @param life Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param period Is the period for which you want to calculate the depreciation. Period must use the same units as Life.
         * @param factor Is the rate at which the balance declines. If Factor is omitted, it is assumed to be 2 (the double-declining balance method).

        [Api set: ExcelApi 1.2]
        */
        ddb(
            cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            period: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            factor?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a decimal number to binary.
         * @param number Is the decimal integer you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        dec2Bin(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a decimal number to hexadecimal.
         * @param number Is the decimal integer you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        dec2Hex(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a decimal number to octal.
         * @param number Is the decimal integer you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        dec2Oct(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a text representation of a number in a given base into a decimal number.
         * @param number Is the number that you want to convert.
         * @param radix Is the base Radix of the number you are converting.

        [Api set: ExcelApi 1.2]
        */
        decimal(
            number: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            radix: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts radians to degrees.
         * @param angle Is the angle in radians that you want to convert.

        [Api set: ExcelApi 1.2]
        */
        degrees(
            angle: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Tests whether two numbers are equal.
         * @param number1 Is the first number.
         * @param number2 Is the second number.

        [Api set: ExcelApi 1.2]
        */
        delta(
            number1: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            number2?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sum of squares of deviations of data points from their sample mean.
         * @param values List of parameters, whose elements are 1 to 255 arguments, or an array or array reference, on which you want DEVSQ to calculate.

        [Api set: ExcelApi 1.2]
        */
        devSq(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the discount rate for a security.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param pr Is the security's price per $100 face value.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        disc(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a number to text, using currency format.
         * @param number Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.
         * @param decimals Is the number of digits to the right of the decimal point. The number is rounded as necessary; if omitted, Decimals = 2.

        [Api set: ExcelApi 1.2]
        */
        dollar(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.
         * @param fractionalDollar Is a number expressed as a fraction.
         * @param fraction Is the integer to use in the denominator of the fraction.

        [Api set: ExcelApi 1.2]
        */
        dollarDe(
            fractionalDollar: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            fraction: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.
         * @param decimalDollar Is a decimal number.
         * @param fraction Is the integer to use in the denominator of a fraction.

        [Api set: ExcelApi 1.2]
        */
        dollarFr(
            decimalDollar: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            fraction: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the annual duration of a security with periodic interest payments.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param coupon Is the security's annual coupon rate.
         * @param yld Is the security's annual yield.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        duration(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            coupon: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the value you want to round.
         * @param significance Is the multiple to which you want to round.

        [Api set: ExcelApi 1.2]
        */
        ecma_Ceiling(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the serial number of the date that is the indicated number of months before or after the start date.
         * @param startDate Is a serial date number that represents the start date.
         * @param months Is the number of months before or after startDate.

        [Api set: ExcelApi 1.2]
        */
        edate(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            months: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the effective annual interest rate.
         * @param nominalRate Is the nominal interest rate.
         * @param npery Is the number of compounding periods per year.

        [Api set: ExcelApi 1.2]
        */
        effect(
            nominalRate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            npery: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the serial number of the last day of the month before or after a specified number of months.
         * @param startDate Is a serial date number that represents the start date.
         * @param months Is the number of months before or after the startDate.

        [Api set: ExcelApi 1.2]
        */
        eoMonth(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            months: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the error function.
         * @param lowerLimit Is the lower bound for integrating ERF.
         * @param upperLimit Is the upper bound for integrating ERF.

        [Api set: ExcelApi 1.2]
        */
        erf(
            lowerLimit: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            upperLimit?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the complementary error function.
         * @param x Is the lower bound for integrating ERF.

        [Api set: ExcelApi 1.2]
        */
        erfC(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the complementary error function.
         * @param X Is the lower bound for integrating ERFC.PRECISE.

        [Api set: ExcelApi 1.2]
        */
        erfC_Precise(
            X: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the error function.
         * @param X Is the lower bound for integrating ERF.PRECISE.

        [Api set: ExcelApi 1.2]
        */
        erf_Precise(
            X: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a number matching an error value.
         * @param errorVal Is the error value for which you want the identifying number, and can be an actual error value or a reference to a cell containing an error value.

        [Api set: ExcelApi 1.2]
        */
        error_Type(
            errorVal: string |
            number |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a positive number up and negative number down to the nearest even integer.
         * @param number Is the value to round.

        [Api set: ExcelApi 1.2]
        */
        even(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether two text strings are exactly the same, and returns TRUE or FALSE. EXACT is case-sensitive.
         * @param text1 Is the first text string.
         * @param text2 Is the second text string.

        [Api set: ExcelApi 1.2]
        */
        exact(
            text1: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            text2: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns e raised to the power of a given number.
         * @param number Is the exponent applied to the base e. The constant e equals 2.71828182845904, the base of the natural logarithm.

        [Api set: ExcelApi 1.2]
        */
        exp(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the exponential distribution.
         * @param x Is the value of the function, a nonnegative number.
         * @param lambda Is the parameter value, a positive number.
         * @param cumulative Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.

        [Api set: ExcelApi 1.2]
        */
        expon_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            lambda: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the future value of an initial principal after applying a series of compound interest rates.
         * @param principal Is the present value.
         * @param schedule Is an array of interest rates to apply.

        [Api set: ExcelApi 1.2]
        */
        fvschedule(
            principal: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            schedule: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.
         * @param x Is the value at which to evaluate the function, a nonnegative number.
         * @param degFreedom1 Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param cumulative Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.

        [Api set: ExcelApi 1.2]
        */
        f_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.
         * @param x Is the value at which to evaluate the function, a nonnegative number.
         * @param degFreedom1 Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        f_Dist_RT(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.
         * @param probability Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.
         * @param degFreedom1 Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        f_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.
         * @param probability Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.
         * @param degFreedom1 Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.
         * @param degFreedom2 Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.

        [Api set: ExcelApi 1.2]
        */
        f_Inv_RT(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom1: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom2: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the factorial of a number, equal to 12*3...* Number.
         * @param number Is the nonnegative number you want the factorial of.

        [Api set: ExcelApi 1.2]
        */
        fact(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the double factorial of a number.
         * @param number Is the value for which to return the double factorial.

        [Api set: ExcelApi 1.2]
        */
        factDouble(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the logical value FALSE.
         * 
        [Api set: ExcelApi 1.2]
        */
        false(): FunctionResult<boolean>;

        /**
         * Returns the starting position of one text string within another text string. FIND is case-sensitive.
         * @param findText Is the text you want to find. Use double quotes (empty text) to match the first character in withinText; wildcard characters not allowed.
         * @param withinText Is the text containing the text you want to find.
         * @param startNum Specifies the character at which to start the search. The first character in withinText is character number 1. If omitted, startNum = 1.

        [Api set: ExcelApi 1.2]
        */
        find(
            findText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            withinText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Finds the starting position of one text string within another text string. FINDB is case-sensitive. Use with double-byte character sets (DBCS).
         * @param findText Is the text you want to find.
         * @param withinText Is the text containing the text you want to find.
         * @param startNum Specifies the character at which to start the search.

        [Api set: ExcelApi 1.2]
        */
        findB(
            findText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            withinText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Fisher transformation.
         * @param x Is the value for which you want the transformation, a number between -1 and 1, excluding -1 and 1.

        [Api set: ExcelApi 1.2]
        */
        fisher(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.
         * @param y Is the value for which you want to perform the inverse of the transformation.

        [Api set: ExcelApi 1.2]
        */
        fisherInv(
            y: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number to the specified number of decimals and returns the result as text with or without commas.
         * @param number Is the number you want to round and convert to text.
         * @param decimals Is the number of digits to the right of the decimal point. If omitted, Decimals = 2.
         * @param noCommas Is a logical value: do not display commas in the returned text = TRUE; do display commas in the returned text = FALSE or omitted.

        [Api set: ExcelApi 1.2]
        */
        fixed(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            noCommas?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the value you want to round.
         * @param significance Is the multiple to which you want to round.
         * @param mode When given and nonzero this function will round towards zero.

        [Api set: ExcelApi 1.2]
        */
        floor_Math(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mode?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the numeric value you want to round.
         * @param significance Is the multiple to which you want to round.

        [Api set: ExcelApi 1.2]
        */
        floor_Precise(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the future value of an investment based on periodic, constant payments and a constant interest rate.
         * @param rate Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper Is the total number of payment periods in the investment.
         * @param pmt Is the payment made each period; it cannot change over the life of the investment.
         * @param pv Is the present value, or the lump-sum amount that a series of future payments is worth now. If omitted, Pv = 0.
         * @param type Is a value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.

        [Api set: ExcelApi 1.2]
        */
        fv(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Gamma function value.
         * @param x Is the value for which you want to calculate Gamma.

        [Api set: ExcelApi 1.2]
        */
        gamma(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the natural logarithm of the gamma function.
         * @param x Is the value for which you want to calculate GAMMALN, a positive number.

        [Api set: ExcelApi 1.2]
        */
        gammaLn(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the natural logarithm of the gamma function.
         * @param x Is the value for which you want to calculate GAMMALN.PRECISE, a positive number.

        [Api set: ExcelApi 1.2]
        */
        gammaLn_Precise(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the gamma distribution.
         * @param x Is the value at which you want to evaluate the distribution, a nonnegative number.
         * @param alpha Is a parameter to the distribution, a positive number.
         * @param beta Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.DIST returns the standard gamma distribution.
         * @param cumulative Is a logical value: return the cumulative distribution function = TRUE; return the probability mass function = FALSE or omitted.

        [Api set: ExcelApi 1.2]
        */
        gamma_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.
         * @param probability Is the probability associated with the gamma distribution, a number between 0 and 1, inclusive.
         * @param alpha Is a parameter to the distribution, a positive number.
         * @param beta Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.INV returns the inverse of the standard gamma distribution.

        [Api set: ExcelApi 1.2]
        */
        gamma_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns 0.5 less than the standard normal cumulative distribution.
         * @param x Is the value for which you want the distribution.

        [Api set: ExcelApi 1.2]
        */
        gauss(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the greatest common divisor.
         * @param values List of parameters, whose elements are 1 to 255 values.

        [Api set: ExcelApi 1.2]
        */
        gcd(
            ...values: Array<number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Tests whether a number is greater than a threshold value.
         * @param number Is the value to test against step.
         * @param step Is the threshold value.

        [Api set: ExcelApi 1.2]
        */
        geStep(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            step?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the geometric mean of an array or range of positive numeric data.
         * @param values List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the mean.

        [Api set: ExcelApi 1.2]
        */
        geoMean(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Looks for a value in the top row of a table or array of values and returns the value in the same column from a row you specify.
         * @param lookupValue Is the value to be found in the first row of the table and can be a value, a reference, or a text string.
         * @param tableArray Is a table of text, numbers, or logical values in which data is looked up. tableArray can be a reference to a range or a range name.
         * @param rowIndexNum Is the row number in tableArray from which the matching value should be returned. The first row of values in the table is row 1.
         * @param rangeLookup Is a logical value: to find the closest match in the top row (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.

        [Api set: ExcelApi 1.2]
        */
        hlookup(
            lookupValue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            tableArray: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>,
            rowIndexNum: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>,
            rangeLookup?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;

        /**
         * Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.
         * @param values List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the harmonic mean.

        [Api set: ExcelApi 1.2]
        */
        harMean(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Converts a Hexadecimal number to binary.
         * @param number Is the hexadecimal number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        hex2Bin(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a hexadecimal number to decimal.
         * @param number Is the hexadecimal number you want to convert.

        [Api set: ExcelApi 1.2]
        */
        hex2Dec(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a hexadecimal number to octal.
         * @param number Is the hexadecimal number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        hex2Oct(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel, or text in time format, such as 16:48:00 or 4:48:00 PM.

        [Api set: ExcelApi 1.2]
        */
        hour(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hypergeometric distribution.
         * @param sampleS Is the number of successes in the sample.
         * @param numberSample Is the size of the sample.
         * @param populationS Is the number of successes in the population.
         * @param numberPop Is the population size.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        hypGeom_Dist(
            sampleS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberSample: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            populationS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberPop: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Creates a shortcut or jump that opens a document stored on your hard drive, a network server, or on the Internet.
         * @param linkLocation Is the text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.
         * @param friendlyName Is text or a number that is displayed in the cell. If omitted, the cell displays the linkLocation text.

        [Api set: ExcelApi 1.2]
        */
        hyperlink(
            linkLocation: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            friendlyName?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;

        /**
         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.
         * @param number Is the value you want to round.
         * @param significance Is the optional multiple to which you want to round.

        [Api set: ExcelApi 1.2]
        */
        iso_Ceiling(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE.
         * @param logicalTest Is any value or expression that can be evaluated to TRUE or FALSE.
         * @param valueIfTrue Is the value that is returned if logicalTest is TRUE. If omitted, TRUE is returned. You can nest up to seven IF functions.
         * @param valueIfFalse Is the value that is returned if logicalTest is FALSE. If omitted, FALSE is returned.

        [Api set: ExcelApi 1.2]
        */
        if (
            logicalTest: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            valueIfTrue?: Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            valueIfFalse?: Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;

        /**
         * Returns the absolute value (modulus) of a complex number.
         * @param inumber Is a complex number for which you want the absolute value.

        [Api set: ExcelApi 1.2]
        */
        imAbs(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the argument q, an angle expressed in radians.
         * @param inumber Is a complex number for which you want the argument.

        [Api set: ExcelApi 1.2]
        */
        imArgument(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the complex conjugate of a complex number.
         * @param inumber Is a complex number for which you want the conjugate.

        [Api set: ExcelApi 1.2]
        */
        imConjugate(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cosine of a complex number.
         * @param inumber Is a complex number for which you want the cosine.

        [Api set: ExcelApi 1.2]
        */
        imCos(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic cosine of a complex number.
         * @param inumber Is a complex number for which you want the hyperbolic cosine.

        [Api set: ExcelApi 1.2]
        */
        imCosh(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cotangent of a complex number.
         * @param inumber Is a complex number for which you want the cotangent.

        [Api set: ExcelApi 1.2]
        */
        imCot(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the cosecant of a complex number.
         * @param inumber Is a complex number for which you want the cosecant.

        [Api set: ExcelApi 1.2]
        */
        imCsc(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic cosecant of a complex number.
         * @param inumber Is a complex number for which you want the hyperbolic cosecant.

        [Api set: ExcelApi 1.2]
        */
        imCsch(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the quotient of two complex numbers.
         * @param inumber1 Is the complex numerator or dividend.
         * @param inumber2 Is the complex denominator or divisor.

        [Api set: ExcelApi 1.2]
        */
        imDiv(
            inumber1: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            inumber2: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the exponential of a complex number.
         * @param inumber Is a complex number for which you want the exponential.

        [Api set: ExcelApi 1.2]
        */
        imExp(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the natural logarithm of a complex number.
         * @param inumber Is a complex number for which you want the natural logarithm.

        [Api set: ExcelApi 1.2]
        */
        imLn(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the base-10 logarithm of a complex number.
         * @param inumber Is a complex number for which you want the common logarithm.

        [Api set: ExcelApi 1.2]
        */
        imLog10(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the base-2 logarithm of a complex number.
         * @param inumber Is a complex number for which you want the base-2 logarithm.

        [Api set: ExcelApi 1.2]
        */
        imLog2(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a complex number raised to an integer power.
         * @param inumber Is a complex number you want to raise to a power.
         * @param number Is the power to which you want to raise the complex number.

        [Api set: ExcelApi 1.2]
        */
        imPower(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the product of 1 to 255 complex numbers.
         * @param values Inumber1, Inumber2,... are from 1 to 255 complex numbers to multiply.

        [Api set: ExcelApi 1.2]
        */
        imProduct(
            ...values: Array<Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the real coefficient of a complex number.
         * @param inumber Is a complex number for which you want the real coefficient.

        [Api set: ExcelApi 1.2]
        */
        imReal(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the secant of a complex number.
         * @param inumber Is a complex number for which you want the secant.

        [Api set: ExcelApi 1.2]
        */
        imSec(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic secant of a complex number.
         * @param inumber Is a complex number for which you want the hyperbolic secant.

        [Api set: ExcelApi 1.2]
        */
        imSech(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sine of a complex number.
         * @param inumber Is a complex number for which you want the sine.

        [Api set: ExcelApi 1.2]
        */
        imSin(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic sine of a complex number.
         * @param inumber Is a complex number for which you want the hyperbolic sine.

        [Api set: ExcelApi 1.2]
        */
        imSinh(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the square root of a complex number.
         * @param inumber Is a complex number for which you want the square root.

        [Api set: ExcelApi 1.2]
        */
        imSqrt(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the difference of two complex numbers.
         * @param inumber1 Is the complex number from which to subtract inumber2.
         * @param inumber2 Is the complex number to subtract from inumber1.

        [Api set: ExcelApi 1.2]
        */
        imSub(
            inumber1: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            inumber2: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sum of complex numbers.
         * @param values List of parameters, whose elements are from 1 to 255 complex numbers to add.

        [Api set: ExcelApi 1.2]
        */
        imSum(
            ...values: Array<Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the tangent of a complex number.
         * @param inumber Is a complex number for which you want the tangent.

        [Api set: ExcelApi 1.2]
        */
        imTan(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the imaginary coefficient of a complex number.
         * @param inumber Is a complex number for which you want the imaginary coefficient.

        [Api set: ExcelApi 1.2]
        */
        imaginary(
            inumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number down to the nearest integer.
         * @param number Is the real number you want to round down to an integer.

        [Api set: ExcelApi 1.2]
        */
        int(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the interest rate for a fully invested security.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param investment Is the amount invested in the security.
         * @param redemption Is the amount to be received at maturity.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        intRate(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            investment: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.
         * @param rate Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per Is the period for which you want to find the interest and must be in the range 1 to Nper.
         * @param nper Is the total number of payment periods in an investment.
         * @param pv Is the present value, or the lump-sum amount that a series of future payments is worth now.
         * @param fv Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, Fv = 0.
         * @param type Is a logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.

        [Api set: ExcelApi 1.2]
        */
        ipmt(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the internal rate of return for a series of cash flows.
         * @param values Is an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.
         * @param guess Is a number that you guess is close to the result of IRR; 0.1 (10 percent) if omitted.

        [Api set: ExcelApi 1.2]
        */
        irr(
            values: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            guess?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a value is an error (#VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!) excluding #N/A, and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isErr(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Checks whether a value is an error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!), and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isError(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns TRUE if the number is even.
         * @param number Is the value to test.

        [Api set: ExcelApi 1.2]
        */
        isEven(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a reference is to a cell containing a formula, and returns TRUE or FALSE.
         * @param reference Is a reference to the cell you want to test.  Reference can be a cell reference, a formula, or name that refers to a cell.

        [Api set: ExcelApi 1.2]
        */
        isFormula(
            reference: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Checks whether a value is a logical value (TRUE or FALSE), and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isLogical(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Checks whether a value is #N/A, and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isNA(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Checks whether a value is not text (blank cells are not text), and returns TRUE or FALSE.
         * @param value Is the value you want tested: a cell; a formula; or a name referring to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isNonText(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Checks whether a value is a number, and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isNumber(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns TRUE if the number is odd.
         * @param number Is the value to test.

        [Api set: ExcelApi 1.2]
        */
        isOdd(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a value is text, and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isText(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns the ISO week number in the year for a given date.
         * @param date Is the date-time code used by Microsoft Excel for date and time calculation.

        [Api set: ExcelApi 1.2]
        */
        isoWeekNum(
            date: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the interest paid during a specific period of an investment.
         * @param rate Interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per Period for which you want to find the interest.
         * @param nper Number of payment periods in an investment.
         * @param pv Lump sum amount that a series of future payments is right now.

        [Api set: ExcelApi 1.2]
        */
        ispmt(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a value is a reference, and returns TRUE or FALSE.
         * @param value Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.

        [Api set: ExcelApi 1.2]
        */
        isref(
            value: Excel.Range |
            number |
            string |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns the kurtosis of a data set.
         * @param values List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the kurtosis.

        [Api set: ExcelApi 1.2]
        */
        kurt(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the k-th largest value in a data set. For example, the fifth largest number.
         * @param array Is the array or range of data for which you want to determine the k-th largest value.
         * @param k Is the position (from the largest) in the array or cell range of the value to return.

        [Api set: ExcelApi 1.2]
        */
        large(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the least common multiple.
         * @param values List of parameters, whose elements are 1 to 255 values for which you want the least common multiple.

        [Api set: ExcelApi 1.2]
        */
        lcm(
            ...values: Array<number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the specified number of characters from the start of a text string.
         * @param text Is the text string containing the characters you want to extract.
         * @param numChars Specifies how many characters you want LEFT to extract; 1 if omitted.

        [Api set: ExcelApi 1.2]
        */
        left(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numChars?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the specified number of characters from the start of a text string. Use with double-byte character sets (DBCS).
         * @param text Is the text string containing the characters you want to extract.
         * @param numBytes Specifies how many characters you want LEFT to return.

        [Api set: ExcelApi 1.2]
        */
        leftb(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numBytes?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the number of characters in a text string.
         * @param text Is the text whose length you want to find. Spaces count as characters.

        [Api set: ExcelApi 1.2]
        */
        len(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of characters in a text string. Use with double-byte character sets (DBCS).
         * @param text Is the text whose length you want to find.

        [Api set: ExcelApi 1.2]
        */
        lenb(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the natural logarithm of a number.
         * @param number Is the positive real number for which you want the natural logarithm.

        [Api set: ExcelApi 1.2]
        */
        ln(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the logarithm of a number to the base you specify.
         * @param number Is the positive real number for which you want the logarithm.
         * @param base Is the base of the logarithm; 10 if omitted.

        [Api set: ExcelApi 1.2]
        */
        log(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            base?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the base-10 logarithm of a number.
         * @param number Is the positive real number for which you want the base-10 logarithm.

        [Api set: ExcelApi 1.2]
        */
        log10(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
         * @param x Is the value at which to evaluate the function, a positive number.
         * @param mean Is the mean of ln(x).
         * @param standardDev Is the standard deviation of ln(x), a positive number.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        logNorm_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
         * @param probability Is a probability associated with the lognormal distribution, a number between 0 and 1, inclusive.
         * @param mean Is the mean of ln(x).
         * @param standardDev Is the standard deviation of ln(x), a positive number.

        [Api set: ExcelApi 1.2]
        */
        logNorm_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Looks up a value either from a one-row or one-column range or from an array. Provided for backward compatibility.
         * @param lookupValue Is a value that LOOKUP searches for in lookupVector and can be a number, text, a logical value, or a name or reference to a value.
         * @param lookupVector Is a range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.
         * @param resultVector Is a range that contains only one row or column, the same size as lookupVector.

        [Api set: ExcelApi 1.2]
        */
        lookup(
            lookupValue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            lookupVector: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            resultVector?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;

        /**
         * Converts all letters in a text string to lowercase.
         * @param text Is the text you want to convert to lowercase. Characters in Text that are not letters are not changed.

        [Api set: ExcelApi 1.2]
        */
        lower(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the Macauley modified duration for a security with an assumed par value of $100.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param coupon Is the security's annual coupon rate.
         * @param yld Is the security's annual yield.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        mduration(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            coupon: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.
         * @param values Is an array or a reference to cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.
         * @param financeRate Is the interest rate you pay on the money used in the cash flows.
         * @param reinvestRate Is the interest rate you receive on the cash flows as you reinvest them.

        [Api set: ExcelApi 1.2]
        */
        mirr(
            values: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            financeRate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            reinvestRate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a number rounded to the desired multiple.
         * @param number Is the value to round.
         * @param multiple Is the multiple to which you want to round number.

        [Api set: ExcelApi 1.2]
        */
        mround(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            multiple: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the relative position of an item in an array that matches a specified value in a specified order.
         * @param lookupValue Is the value you use to find the value you want in the array, a number, text, or logical value, or a reference to one of these.
         * @param lookupArray Is a contiguous range of cells containing possible lookup values, an array of values, or a reference to an array.
         * @param matchType Is a number 1, 0, or -1 indicating which value to return.

        [Api set: ExcelApi 1.2]
        */
        match(
            lookupValue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            lookupArray: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            matchType?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the largest value in a set of values. Ignores logical values and text.
         * @param values List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.

        [Api set: ExcelApi 1.2]
        */
        max(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the largest value in a set of values. Does not ignore logical values and text.
         * @param values List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.

        [Api set: ExcelApi 1.2]
        */
        maxA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the median, or the number in the middle of the set of given numbers.
         * @param values List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the median.

        [Api set: ExcelApi 1.2]
        */
        median(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the characters from the middle of a text string, given a starting position and length.
         * @param text Is the text string from which you want to extract the characters.
         * @param startNum Is the position of the first character you want to extract. The first character in Text is 1.
         * @param numChars Specifies how many characters to return from Text.

        [Api set: ExcelApi 1.2]
        */
        mid(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numChars: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns characters from the middle of a text string, given a starting position and length. Use with double-byte character sets (DBCS).
         * @param text Is the text string containing the characters you want to extract.
         * @param startNum Is the position of the first character you want to extract in text.
         * @param numBytes Specifies how many characters to return from text.

        [Api set: ExcelApi 1.2]
        */
        midb(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numBytes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the smallest number in a set of values. Ignores logical values and text.
         * @param values List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.

        [Api set: ExcelApi 1.2]
        */
        min(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the smallest value in a set of values. Does not ignore logical values and text.
         * @param values List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.

        [Api set: ExcelApi 1.2]
        */
        minA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the minute, a number from 0 to 59.
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:00 or 4:48:00 PM.

        [Api set: ExcelApi 1.2]
        */
        minute(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the remainder after a number is divided by a divisor.
         * @param number Is the number for which you want to find the remainder after the division is performed.
         * @param divisor Is the number by which you want to divide Number.

        [Api set: ExcelApi 1.2]
        */
        mod(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            divisor: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the month, a number from 1 (January) to 12 (December).
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel.

        [Api set: ExcelApi 1.2]
        */
        month(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the multinomial of a set of numbers.
         * @param values List of parameters, whose elements are 1 to 255 values for which you want the multinomial.

        [Api set: ExcelApi 1.2]
        */
        multiNomial(
            ...values: Array<number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Converts non-number value to a number, dates to serial numbers, TRUE to 1, anything else to 0 (zero).
         * @param value Is the value you want converted.

        [Api set: ExcelApi 1.2]
        */
        n(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.
         * @param rate Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param pmt Is the payment made each period; it cannot change over the life of the investment.
         * @param pv Is the present value, or the lump-sum amount that a series of future payments is worth now.
         * @param fv Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, zero is used.
         * @param type Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.

        [Api set: ExcelApi 1.2]
        */
        nper(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the error value #N/A (value not available).
         * 
        [Api set: ExcelApi 1.2]
        */
        na(): FunctionResult<number | string>;

        /**
         * Returns the negative binomial distribution, the probability that there will be Number_f failures before the Number_s-th success, with Probability_s probability of a success.
         * @param numberF Is the number of failures.
         * @param numberS Is the threshold number of successes.
         * @param probabilityS Is the probability of a success; a number between 0 and 1.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        negBinom_Dist(
            numberF: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            probabilityS: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of whole workdays between two dates.
         * @param startDate Is a serial date number that represents the start date.
         * @param endDate Is a serial date number that represents the end date.
         * @param holidays Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.

        [Api set: ExcelApi 1.2]
        */
        networkDays(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            endDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            holidays?: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of whole workdays between two dates with custom weekend parameters.
         * @param startDate Is a serial date number that represents the start date.
         * @param endDate Is a serial date number that represents the end date.
         * @param weekend Is a number or string specifying when weekends occur.
         * @param holidays Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.

        [Api set: ExcelApi 1.2]
        */
        networkDays_Intl(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            endDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            weekend?: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            holidays?: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the annual nominal interest rate.
         * @param effectRate Is the effective interest rate.
         * @param npery Is the number of compounding periods per year.

        [Api set: ExcelApi 1.2]
        */
        nominal(
            effectRate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            npery: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the normal distribution for the specified mean and standard deviation.
         * @param x Is the value for which you want the distribution.
         * @param mean Is the arithmetic mean of the distribution.
         * @param standardDev Is the standard deviation of the distribution, a positive number.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        norm_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.
         * @param probability Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.
         * @param mean Is the arithmetic mean of the distribution.
         * @param standardDev Is the standard deviation of the distribution, a positive number.

        [Api set: ExcelApi 1.2]
        */
        norm_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the standard normal distribution (has a mean of zero and a standard deviation of one).
         * @param z Is the value for which you want the distribution.
         * @param cumulative Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.

        [Api set: ExcelApi 1.2]
        */
        norm_S_Dist(
            z: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).
         * @param probability Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.

        [Api set: ExcelApi 1.2]
        */
        norm_S_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Changes FALSE to TRUE, or TRUE to FALSE.
         * @param logical Is a value or expression that can be evaluated to TRUE or FALSE.

        [Api set: ExcelApi 1.2]
        */
        not(
            logical: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<boolean>;

        /**
         * Returns the current date and time formatted as a date and time.
         * 
        [Api set: ExcelApi 1.2]
        */
        now(): FunctionResult<number>;

        /**
         * Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).
         * @param rate Is the rate of discount over the length of one period.
         * @param values List of parameters, whose elements are 1 to 254 payments and income, equally spaced in time and occurring at the end of each period.

        [Api set: ExcelApi 1.2]
        */
        npv(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Converts text to number in a locale-independent manner.
         * @param text Is the string representing the number you want to convert.
         * @param decimalSeparator Is the character used as the decimal separator in the string.
         * @param groupSeparator Is the character used as the group separator in the string.

        [Api set: ExcelApi 1.2]
        */
        numberValue(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            decimalSeparator?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            groupSeparator?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts an octal number to binary.
         * @param number Is the octal number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        oct2Bin(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts an octal number to decimal.
         * @param number Is the octal number you want to convert.

        [Api set: ExcelApi 1.2]
        */
        oct2Dec(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts an octal number to hexadecimal.
         * @param number Is the octal number you want to convert.
         * @param places Is the number of characters to use.

        [Api set: ExcelApi 1.2]
        */
        oct2Hex(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            places?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a positive number up and negative number down to the nearest odd integer.
         * @param number Is the value to round.

        [Api set: ExcelApi 1.2]
        */
        odd(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value of a security with an odd first period.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param firstCoupon Is the security's first coupon date, expressed as a serial date number.
         * @param rate Is the security's interest rate.
         * @param yld Is the security's annual yield.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        oddFPrice(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            firstCoupon: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the yield of a security with an odd first period.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param firstCoupon Is the security's first coupon date, expressed as a serial date number.
         * @param rate Is the security's interest rate.
         * @param pr Is the security's price.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        oddFYield(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            firstCoupon: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value of a security with an odd last period.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param lastInterest Is the security's last coupon date, expressed as a serial date number.
         * @param rate Is the security's interest rate.
         * @param yld Is the security's annual yield.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        oddLPrice(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            lastInterest: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the yield of a security with an odd last period.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param lastInterest Is the security's last coupon date, expressed as a serial date number.
         * @param rate Is the security's interest rate.
         * @param pr Is the security's price.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        oddLYield(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            lastInterest: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether any of the arguments are TRUE, and returns TRUE or FALSE. Returns FALSE only if all arguments are FALSE.
         * @param values List of parameters, whose elements are 1 to 255 conditions that you want to test that can be either TRUE or FALSE.

        [Api set: ExcelApi 1.2]
        */
        or(
            ...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<boolean>;

        /**
         * Returns the number of periods required by an investment to reach a specified value.
         * @param rate Is the interest rate per period.
         * @param pv Is the present value of the investment.
         * @param fv Is the desired future value of the investment.

        [Api set: ExcelApi 1.2]
        */
        pduration(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, exclusive) of the data set.
         * @param array Is the array or range of data with numeric values that defines relative standing.
         * @param x Is the value for which you want to know the rank.
         * @param significance Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).

        [Api set: ExcelApi 1.2]
        */
        percentRank_Exc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, inclusive) of the data set.
         * @param array Is the array or range of data with numeric values that defines relative standing.
         * @param x Is the value for which you want to know the rank.
         * @param significance Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).

        [Api set: ExcelApi 1.2]
        */
        percentRank_Inc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            significance?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.
         * @param array Is the array or range of data that defines relative standing.
         * @param k Is the percentile value that is between 0 through 1, inclusive.

        [Api set: ExcelApi 1.2]
        */
        percentile_Exc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.
         * @param array Is the array or range of data that defines relative standing.
         * @param k Is the percentile value that is between 0 through 1, inclusive.

        [Api set: ExcelApi 1.2]
        */
        percentile_Inc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of permutations for a given number of objects that can be selected from the total objects.
         * @param number Is the total number of objects.
         * @param numberChosen Is the number of objects in each permutation.

        [Api set: ExcelApi 1.2]
        */
        permut(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.
         * @param number Is the total number of objects.
         * @param numberChosen Is the number of objects in each permutation.

        [Api set: ExcelApi 1.2]
        */
        permutationa(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberChosen: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the value of the density function for a standard normal distribution.
         * @param x Is the number for which you want the density of the standard normal distribution.

        [Api set: ExcelApi 1.2]
        */
        phi(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the value of Pi, 3.14159265358979, accurate to 15 digits.
         * 
        [Api set: ExcelApi 1.2]
        */
        pi(): FunctionResult<number>;

        /**
         * Calculates the payment for a loan based on constant payments and a constant interest rate.
         * @param rate Is the interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper Is the total number of payments for the loan.
         * @param pv Is the present value: the total amount that a series of future payments is worth now.
         * @param fv Is the future value, or a cash balance you want to attain after the last payment is made, 0 (zero) if omitted.
         * @param type Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.

        [Api set: ExcelApi 1.2]
        */
        pmt(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Poisson distribution.
         * @param x Is the number of events.
         * @param mean Is the expected numeric value, a positive number.
         * @param cumulative Is a logical value: for the cumulative Poisson probability, use TRUE; for the Poisson probability mass function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        poisson_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the result of a number raised to a power.
         * @param number Is the base number, any real number.
         * @param power Is the exponent, to which the base number is raised.

        [Api set: ExcelApi 1.2]
        */
        power(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            power: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.
         * @param rate Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param per Specifies the period and must be in the range 1 to nper.
         * @param nper Is the total number of payment periods in an investment.
         * @param pv Is the present value: the total amount that a series of future payments is worth now.
         * @param fv Is the future value, or cash balance you want to attain after the last payment is made.
         * @param type Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.

        [Api set: ExcelApi 1.2]
        */
        ppmt(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value of a security that pays periodic interest.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param rate Is the security's annual coupon rate.
         * @param yld Is the security's annual yield.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        price(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value of a discounted security.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param discount Is the security's discount rate.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        priceDisc(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            discount: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value of a security that pays interest at maturity.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param rate Is the security's interest rate at date of issue.
         * @param yld Is the security's annual yield.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        priceMat(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            yld: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Multiplies all the numbers given as arguments.
         * @param values List of parameters, whose elements are 1 to 255 numbers, logical values, or text representations of numbers that you want to multiply.

        [Api set: ExcelApi 1.2]
        */
        product(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Converts a text string to proper case; the first letter in each word to uppercase, and all other letters to lowercase.
         * @param text Is text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.

        [Api set: ExcelApi 1.2]
        */
        proper(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the present value of an investment: the total amount that a series of future payments is worth now.
         * @param rate Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper Is the total number of payment periods in an investment.
         * @param pmt Is the payment made each period and cannot change over the life of the investment.
         * @param fv Is the future value, or a cash balance you want to attain after the last payment is made.
         * @param type Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.

        [Api set: ExcelApi 1.2]
        */
        pv(
            rate: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the quartile of a data set, based on percentile values from 0..1, exclusive.
         * @param array Is the array or cell range of numeric values for which you want the quartile value.
         * @param quart Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.

        [Api set: ExcelApi 1.2]
        */
        quartile_Exc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            quart: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the quartile of a data set, based on percentile values from 0..1, inclusive.
         * @param array Is the array or cell range of numeric values for which you want the quartile value.
         * @param quart Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.

        [Api set: ExcelApi 1.2]
        */
        quartile_Inc(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            quart: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the integer portion of a division.
         * @param numerator Is the dividend.
         * @param denominator Is the divisor.

        [Api set: ExcelApi 1.2]
        */
        quotient(
            numerator: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            denominator: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts degrees to radians.
         * @param angle Is an angle in degrees that you want to convert.

        [Api set: ExcelApi 1.2]
        */
        radians(
            angle: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).
         * 
        [Api set: ExcelApi 1.2]
        */
        rand(): FunctionResult<number>;

        /**
         * Returns a random number between the numbers you specify.
         * @param bottom Is the smallest integer RANDBETWEEN will return.
         * @param top Is the largest integer RANDBETWEEN will return.

        [Api set: ExcelApi 1.2]
        */
        randBetween(
            bottom: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            top: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the average rank is returned.
         * @param number Is the number for which you want to find the rank.
         * @param ref Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.
         * @param order Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.

        [Api set: ExcelApi 1.2]
        */
        rank_Avg(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ref: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            order?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the top rank of that set of values is returned.
         * @param number Is the number for which you want to find the rank.
         * @param ref Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.
         * @param order Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.

        [Api set: ExcelApi 1.2]
        */
        rank_Eq(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ref: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            order?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the interest rate per period of a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.
         * @param nper Is the total number of payment periods for the loan or investment.
         * @param pmt Is the payment made each period and cannot change over the life of the loan or investment.
         * @param pv Is the present value: the total amount that a series of future payments is worth now.
         * @param fv Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, uses Fv = 0.
         * @param type Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.
         * @param guess Is your guess for what the rate will be; if omitted, Guess = 0.1 (10 percent).

        [Api set: ExcelApi 1.2]
        */
        rate(
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pmt: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            type?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            guess?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the amount received at maturity for a fully invested security.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param investment Is the amount invested in the security.
         * @param discount Is the security's discount rate.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        received(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            investment: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            discount: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Replaces part of a text string with a different text string.
         * @param oldText Is text in which you want to replace some characters.
         * @param startNum Is the position of the character in oldText that you want to replace with newText.
         * @param numChars Is the number of characters in oldText that you want to replace.
         * @param newText Is the text that will replace characters in oldText.

        [Api set: ExcelApi 1.2]
        */
        replace(
            oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numChars: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Replaces part of a text string with a different text string. Use with double-byte character sets (DBCS).
         * @param oldText Is text in which you want to replace some characters.
         * @param startNum Is the position of the character in oldText that you want to replace with newText.
         * @param numBytes Is the number of characters in oldText that you want to replace with newText.
         * @param newText Is the text that will replace characters in oldText.

        [Api set: ExcelApi 1.2]
        */
        replaceB(
            oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numBytes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Repeats text a given number of times. Use REPT to fill a cell with a number of instances of a text string.
         * @param text Is the text you want to repeat.
         * @param numberTimes Is a positive number specifying the number of times to repeat text.

        [Api set: ExcelApi 1.2]
        */
        rept(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numberTimes: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the specified number of characters from the end of a text string.
         * @param text Is the text string that contains the characters you want to extract.
         * @param numChars Specifies how many characters you want to extract, 1 if omitted.

        [Api set: ExcelApi 1.2]
        */
        right(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numChars?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the specified number of characters from the end of a text string. Use with double-byte character sets (DBCS).
         * @param text Is the text string containing the characters you want to extract.
         * @param numBytes Specifies how many characters you want to extract.

        [Api set: ExcelApi 1.2]
        */
        rightb(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numBytes?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Converts an Arabic numeral to Roman, as text.
         * @param number Is the Arabic numeral you want to convert.
         * @param form Is the number specifying the type of Roman numeral you want.

        [Api set: ExcelApi 1.2]
        */
        roman(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            form?: boolean |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Rounds a number to a specified number of digits.
         * @param number Is the number you want to round.
         * @param numDigits Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero to the nearest integer.

        [Api set: ExcelApi 1.2]
        */
        round(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number down, toward zero.
         * @param number Is any real number that you want rounded down.
         * @param numDigits Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.

        [Api set: ExcelApi 1.2]
        */
        roundDown(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Rounds a number up, away from zero.
         * @param number Is any real number that you want rounded up.
         * @param numDigits Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.

        [Api set: ExcelApi 1.2]
        */
        roundUp(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numDigits: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of rows in a reference or array.
         * @param array Is an array, an array formula, or a reference to a range of cells for which you want the number of rows.

        [Api set: ExcelApi 1.2]
        */
        rows(
            array: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns an equivalent interest rate for the growth of an investment.
         * @param nper Is the number of periods for the investment.
         * @param pv Is the present value of the investment.
         * @param fv Is the future value of the investment.

        [Api set: ExcelApi 1.2]
        */
        rri(
            nper: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            pv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            fv: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the secant of an angle.
         * @param number Is the angle in radians for which you want the secant.

        [Api set: ExcelApi 1.2]
        */
        sec(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic secant of an angle.
         * @param number Is the angle in radians for which you want the hyperbolic secant.

        [Api set: ExcelApi 1.2]
        */
        sech(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the second, a number from 0 to 59.
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:23 or 4:48:47 PM.

        [Api set: ExcelApi 1.2]
        */
        second(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sum of a power series based on the formula.
         * @param x Is the input value to the power series.
         * @param n Is the initial power to which you want to raise x.
         * @param m Is the step by which to increase n for each term in the series.
         * @param coefficients Is a set of coefficients by which each successive power of x is multiplied.

        [Api set: ExcelApi 1.2]
        */
        seriesSum(
            x: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            n: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            m: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            coefficients: Excel.Range |
            string |
            number |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sheet number of the referenced sheet.
         * @param value Is the name of a sheet or a reference that you want the sheet number of.  If omitted the number of the sheet containing the function is returned.

        [Api set: ExcelApi 1.2]
        */
        sheet(
            value?: Excel.Range | string | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the number of sheets in a reference.
         * @param reference Is a reference for which you want to know the number of sheets it contains.  If omitted the number of sheets in the workbook containing the function is returned.

        [Api set: ExcelApi 1.2]
        */
        sheets(
            reference?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sign of a number: 1 if the number is positive, zero if the number is zero, or -1 if the number is negative.
         * @param number Is any real number.

        [Api set: ExcelApi 1.2]
        */
        sign(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the sine of an angle.
         * @param number Is the angle in radians for which you want the sine. Degrees * PI()/180 = radians.

        [Api set: ExcelApi 1.2]
        */
        sin(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic sine of a number.
         * @param number Is any real number.

        [Api set: ExcelApi 1.2]
        */
        sinh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.
         * @param values List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the skewness.

        [Api set: ExcelApi 1.2]
        */
        skew(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.
         * @param values List of parameters, whose elements are 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.

        [Api set: ExcelApi 1.2]
        */
        skew_p(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the straight-line depreciation of an asset for one period.
         * @param cost Is the initial cost of the asset.
         * @param salvage Is the salvage value at the end of the life of the asset.
         * @param life Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).

        [Api set: ExcelApi 1.2]
        */
        sln(
            cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the k-th smallest value in a data set. For example, the fifth smallest number.
         * @param array Is an array or range of numerical data for which you want to determine the k-th smallest value.
         * @param k Is the position (from the smallest) in the array or range of the value to return.

        [Api set: ExcelApi 1.2]
        */
        small(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            k: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the square root of a number.
         * @param number Is the number for which you want the square root.

        [Api set: ExcelApi 1.2]
        */
        sqrt(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the square root of (number  Pi).
         * @param number Is the number by which p is multiplied.

        [Api set: ExcelApi 1.2]
        */
        sqrtPi(
            number: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Estimates standard deviation based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         * @param values List of parameters, whose elements are 1 to 255 values corresponding to a sample of a population and can be values or names or references to values.

        [Api set: ExcelApi 1.2]
        */
        stDevA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Calculates standard deviation based on an entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         * @param values List of parameters, whose elements are 1 to 255 values corresponding to a population and can be values, names, arrays, or references that contain values.

        [Api set: ExcelApi 1.2]
        */
        stDevPA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).
         * @param values List of parameters, whose elements are 1 to 255 numbers corresponding to a population and can be numbers or references that contain numbers.

        [Api set: ExcelApi 1.2]
        */
        stDev_P(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Estimates standard deviation based on a sample (ignores logical values and text in the sample).
         * @param values List of parameters, whose elements are 1 to 255 numbers corresponding to a sample of a population and can be numbers or references that contain numbers.

        [Api set: ExcelApi 1.2]
        */
        stDev_S(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns a normalized value from a distribution characterized by a mean and standard deviation.
         * @param x Is the value you want to normalize.
         * @param mean Is the arithmetic mean of the distribution.
         * @param standardDev Is the standard deviation of the distribution, a positive number.

        [Api set: ExcelApi 1.2]
        */
        standardize(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            mean: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            standardDev: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Replaces existing text with new text in a text string.
         * @param text Is the text or the reference to a cell containing text in which you want to substitute characters.
         * @param oldText Is the existing text you want to replace. If the case of oldText does not match the case of text, SUBSTITUTE will not replace the text.
         * @param newText Is the text you want to replace oldText with.
         * @param instanceNum Specifies which occurrence of oldText you want to replace. If omitted, every instance of oldText is replaced.

        [Api set: ExcelApi 1.2]
        */
        substitute(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            oldText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            newText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            instanceNum?: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns a subtotal in a list or database.
         * @param functionNum Is the number 1 to 11 that specifies the summary function for the subtotal.
         * @param values List of parameters, whose elements are 1 to 254 ranges or references for which you want the subtotal.

        [Api set: ExcelApi 1.2]
        */
        subtotal(
            functionNum: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ...values: Array<Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Adds all the numbers in a range of cells.
         * @param values List of parameters, whose elements are 1 to 255 numbers to sum. Logical values and text are ignored in cells, included if typed as arguments.

        [Api set: ExcelApi 1.2]
        */
        sum(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Adds the cells specified by a given condition or criteria.
         * @param range Is the range of cells you want evaluated.
         * @param criteria Is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.
         * @param sumRange Are the actual cells to sum. If omitted, the cells in range are used.

        [Api set: ExcelApi 1.2]
        */
        sumIf(
            range: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            criteria: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            sumRange?: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Adds the cells specified by a given set of conditions or criteria.
         * @param sumRange Are the actual cells to sum.
         * @param values List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.

        [Api set: ExcelApi 1.2]
        */
        sumIfs(
            sumRange: Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            ...values: Array<Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any >
            |
            number |
            string |
            boolean>): FunctionResult<number>;

        /**
         * Returns the sum of the squares of the arguments. The arguments can be numbers, arrays, names, or references to cells that contain numbers.
         * @param values List of parameters, whose elements are 1 to 255 numbers, arrays, names, or references to arrays for which you want the sum of the squares.

        [Api set: ExcelApi 1.2]
        */
        sumSq(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the sum-of-years' digits depreciation of an asset for a specified period.
         * @param cost Is the initial cost of the asset.
         * @param salvage Is the salvage value at the end of the life of the asset.
         * @param life Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param per Is the period and must use the same units as Life.

        [Api set: ExcelApi 1.2]
        */
        syd(
            cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            per: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.
         * @param value Is the value to test.

        [Api set: ExcelApi 1.2]
        */
        t(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the bond-equivalent yield for a treasury bill.
         * @param settlement Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param discount Is the Treasury bill's discount rate.

        [Api set: ExcelApi 1.2]
        */
        tbillEq(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            discount: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the price per $100 face value for a treasury bill.
         * @param settlement Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param discount Is the Treasury bill's discount rate.

        [Api set: ExcelApi 1.2]
        */
        tbillPrice(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            discount: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the yield for a treasury bill.
         * @param settlement Is the Treasury bill's settlement date, expressed as a serial date number.
         * @param maturity Is the Treasury bill's maturity date, expressed as a serial date number.
         * @param pr Is the Treasury Bill's price per $100 face value.

        [Api set: ExcelApi 1.2]
        */
        tbillYield(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the left-tailed Student's t-distribution.
         * @param x Is the numeric value at which to evaluate the distribution.
         * @param degFreedom Is an integer indicating the number of degrees of freedom that characterize the distribution.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        t_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the two-tailed Student's t-distribution.
         * @param x Is the numeric value at which to evaluate the distribution.
         * @param degFreedom Is an integer indicating the number of degrees of freedom that characterize the distribution.

        [Api set: ExcelApi 1.2]
        */
        t_Dist_2T(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the right-tailed Student's t-distribution.
         * @param x Is the numeric value at which to evaluate the distribution.
         * @param degFreedom Is an integer indicating the number of degrees of freedom that characterize the distribution.

        [Api set: ExcelApi 1.2]
        */
        t_Dist_RT(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the left-tailed inverse of the Student's t-distribution.
         * @param probability Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.
         * @param degFreedom Is a positive integer indicating the number of degrees of freedom to characterize the distribution.

        [Api set: ExcelApi 1.2]
        */
        t_Inv(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the two-tailed inverse of the Student's t-distribution.
         * @param probability Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.
         * @param degFreedom Is a positive integer indicating the number of degrees of freedom to characterize the distribution.

        [Api set: ExcelApi 1.2]
        */
        t_Inv_2T(
            probability: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            degFreedom: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the tangent of an angle.
         * @param number Is the angle in radians for which you want the tangent. Degrees * PI()/180 = radians.

        [Api set: ExcelApi 1.2]
        */
        tan(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the hyperbolic tangent of a number.
         * @param number Is any real number.

        [Api set: ExcelApi 1.2]
        */
        tanh(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a value to text in a specific number format.
         * @param value Is a number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.
         * @param formatText Is a number format in text form from the Category box on the Number tab in the Format Cells dialog box (not General).

        [Api set: ExcelApi 1.2]
        */
        text(
            value: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            formatText: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Converts hours, minutes, and seconds given as numbers to an Excel serial number, formatted with a time format.
         * @param hour Is a number from 0 to 23 representing the hour.
         * @param minute Is a number from 0 to 59 representing the minute.
         * @param second Is a number from 0 to 59 representing the second.

        [Api set: ExcelApi 1.2]
        */
        time(
            hour: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            minute: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            second: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a text time to an Excel serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.
         * @param timeText Is a text string that gives a time in any one of the Microsoft Excel time formats (date information in the string is ignored).

        [Api set: ExcelApi 1.2]
        */
        timevalue(
            timeText: string |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the current date formatted as a date.
         * 
        [Api set: ExcelApi 1.2]
        */
        today(): FunctionResult<number>;

        /**
         * Removes all spaces from a text string except for single spaces between words.
         * @param text Is the text from which you want spaces removed.

        [Api set: ExcelApi 1.2]
        */
        trim(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the mean of the interior portion of a set of data values.
         * @param array Is the range or array of values to trim and average.
         * @param percent Is the fractional number of data points to exclude from the top and bottom of the data set.

        [Api set: ExcelApi 1.2]
        */
        trimMean(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            percent: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the logical value TRUE.
         * 
        [Api set: ExcelApi 1.2]
        */
        true(): FunctionResult<boolean>;

        /**
         * Truncates a number to an integer by removing the decimal, or fractional, part of the number.
         * @param number Is the number you want to truncate.
         * @param numDigits Is a number specifying the precision of the truncation, 0 (zero) if omitted.

        [Api set: ExcelApi 1.2]
        */
        trunc(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            numDigits?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64.
         * @param value Can be any value.

        [Api set: ExcelApi 1.2]
        */
        type(
            value: boolean |
            string |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a number to text, using currency format.
         * @param number Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.
         * @param decimals Is the number of digits to the right of the decimal point.

        [Api set: ExcelApi 1.2]
        */
        usdollar(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            decimals?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the Unicode character referenced by the given numeric value.
         * @param number Is the Unicode number representing a character.

        [Api set: ExcelApi 1.2]
        */
        unichar(
            number: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Returns the number (code point) corresponding to the first character of the text.
         * @param text Is the character that you want the Unicode value of.

        [Api set: ExcelApi 1.2]
        */
        unicode(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Converts a text string to all uppercase letters.
         * @param text Is the text you want converted to uppercase, a reference or a text string.

        [Api set: ExcelApi 1.2]
        */
        upper(
            text: string | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<string>;

        /**
         * Looks for a value in the leftmost column of a table, and then returns a value in the same row from a column you specify. By default, the table must be sorted in an ascending order.
         * @param lookupValue Is the value to be found in the first column of the table, and can be a value, a reference, or a text string.
         * @param tableArray Is a table of text, numbers, or logical values, in which data is retrieved. tableArray can be a reference to a range or a range name.
         * @param colIndexNum Is the column number in tableArray from which the matching value should be returned. The first column of values in the table is column 1.
         * @param rangeLookup Is a logical value: to find the closest match in the first column (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.

        [Api set: ExcelApi 1.2]
        */
        vlookup(
            lookupValue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            tableArray: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>,
            colIndexNum: Excel.Range | number | Excel.RangeReference | Excel.FunctionResult<any>,
            rangeLookup?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number | string | boolean>;

        /**
         * Converts a text string that represents a number to a number.
         * @param text Is the text enclosed in quotation marks or a reference to a cell containing the text you want to convert.

        [Api set: ExcelApi 1.2]
        */
        value(
            text: string |
            boolean |
            number |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Estimates variance based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         * @param values List of parameters, whose elements are 1 to 255 value arguments corresponding to a sample of a population.

        [Api set: ExcelApi 1.2]
        */
        varA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Calculates variance based on the entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.
         * @param values List of parameters, whose elements are 1 to 255 value arguments corresponding to a population.

        [Api set: ExcelApi 1.2]
        */
        varPA(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Calculates variance based on the entire population (ignores logical values and text in the population).
         * @param values List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a population.

        [Api set: ExcelApi 1.2]
        */
        var_P(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Estimates variance based on a sample (ignores logical values and text in the sample).
         * @param values List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a sample of a population.

        [Api set: ExcelApi 1.2]
        */
        var_S(
            ...values: Array<number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<number>;

        /**
         * Returns the depreciation of an asset for any period you specify, including partial periods, using the double-declining balance method or some other method you specify.
         * @param cost Is the initial cost of the asset.
         * @param salvage Is the salvage value at the end of the life of the asset.
         * @param life Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).
         * @param startPeriod Is the starting period for which you want to calculate the depreciation, in the same units as Life.
         * @param endPeriod Is the ending period for which you want to calculate the depreciation, in the same units as Life.
         * @param factor Is the rate at which the balance declines, 2 (double-declining balance) if omitted.
         * @param noSwitch Switch to straight-line depreciation when depreciation is greater than the declining balance = FALSE or omitted; do not switch = TRUE.

        [Api set: ExcelApi 1.2]
        */
        vdb(
            cost: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            salvage: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            life: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            startPeriod: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            endPeriod: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            factor?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            noSwitch?: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the week number in the year.
         * @param serialNumber Is the date-time code used by Microsoft Excel for date and time calculation.
         * @param returnType Is a number (1 or 2) that determines the type of the return value.

        [Api set: ExcelApi 1.2]
        */
        weekNum(
            serialNumber: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            returnType?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a number from 1 to 7 identifying the day of the week of a date.
         * @param serialNumber Is a number that represents a date.
         * @param returnType Is a number: for Sunday=1 through Saturday=7, use 1; for Monday=1 through Sunday=7, use 2; for Monday=0 through Sunday=6, use 3.

        [Api set: ExcelApi 1.2]
        */
        weekday(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            returnType?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the Weibull distribution.
         * @param x Is the value at which to evaluate the function, a nonnegative number.
         * @param alpha Is a parameter to the distribution, a positive number.
         * @param beta Is a parameter to the distribution, a positive number.
         * @param cumulative Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.

        [Api set: ExcelApi 1.2]
        */
        weibull_Dist(
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            alpha: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            beta: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            cumulative: boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the serial number of the date before or after a specified number of workdays.
         * @param startDate Is a serial date number that represents the start date.
         * @param days Is the number of nonweekend and non-holiday days before or after startDate.
         * @param holidays Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.

        [Api set: ExcelApi 1.2]
        */
        workDay(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            days: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            holidays?: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.
         * @param startDate Is a serial date number that represents the start date.
         * @param days Is the number of nonweekend and non-holiday days before or after startDate.
         * @param weekend Is a number or string specifying when weekends occur.
         * @param holidays Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.

        [Api set: ExcelApi 1.2]
        */
        workDay_Intl(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            days: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            weekend?: number |
            string |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            holidays?: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the internal rate of return for a schedule of cash flows.
         * @param values Is a series of cash flows that correspond to a schedule of payments in dates.
         * @param dates Is a schedule of payment dates that corresponds to the cash flow payments.
         * @param guess Is a number that you guess is close to the result of XIRR.

        [Api set: ExcelApi 1.2]
        */
        xirr(
            values: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            dates: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            guess?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the net present value for a schedule of cash flows.
         * @param rate Is the discount rate to apply to the cash flows.
         * @param values Is a series of cash flows that correspond to a schedule of payments in dates.
         * @param dates Is a schedule of payment dates that corresponds to the cash flow payments.

        [Api set: ExcelApi 1.2]
        */
        xnpv(
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            values: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            dates: number |
            string |
            Excel.Range |
            boolean |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns a logical 'Exclusive Or' of all arguments.
         * @param values List of parameters, whose elements are 1 to 254 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.

        [Api set: ExcelApi 1.2]
        */
        xor(
            ...values: Array<boolean | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any >> ): FunctionResult<boolean>;

        /**
         * Returns the year of a date, an integer in the range 1900 - 9999.
         * @param serialNumber Is a number in the date-time code used by Microsoft Excel.

        [Api set: ExcelApi 1.2]
        */
        year(
            serialNumber: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the year fraction representing the number of whole days between start_date and end_date.
         * @param startDate Is a serial date number that represents the start date.
         * @param endDate Is a serial date number that represents the end date.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        yearFrac(
            startDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            endDate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the yield on a security that pays periodic interest.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param rate Is the security's annual coupon rate.
         * @param pr Is the security's price per $100 face value.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param frequency Is the number of coupon payments per year.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        yield(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            frequency: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the annual yield for a discounted security. For example, a treasury bill.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param pr Is the security's price per $100 face value.
         * @param redemption Is the security's redemption value per $100 face value.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        yieldDisc(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            redemption: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the annual yield of a security that pays interest at maturity.
         * @param settlement Is the security's settlement date, expressed as a serial date number.
         * @param maturity Is the security's maturity date, expressed as a serial date number.
         * @param issue Is the security's issue date, expressed as a serial date number.
         * @param rate Is the security's interest rate at date of issue.
         * @param pr Is the security's price per $100 face value.
         * @param basis Is the type of day count basis to use.

        [Api set: ExcelApi 1.2]
        */
        yieldMat(
            settlement: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            maturity: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            issue: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            rate: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            pr: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>,
            basis?: number |
            string |
            boolean |
            Excel.Range |
            Excel.RangeReference |
            Excel.FunctionResult<any>): FunctionResult<number>;

        /**
         * Returns the one-tailed P-value of a z-test.
         * @param array Is the array or range of data against which to test X.
         * @param x Is the value to test.
         * @param sigma Is the population (known) standard deviation. If omitted, the sample standard deviation is used.

        [Api set: ExcelApi 1.2]
        */
        z_Test(
            array: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            x: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>,
            sigma?: number | Excel.Range | Excel.RangeReference | Excel.FunctionResult<any>): FunctionResult<number>;
        toJSON(): {}
    }
    declare module 'ErrorCodes' {
        declare     var accessDenied: string;
        declare     var apiNotFound: string;
        declare     var generalException: string;
        declare     var insertDeleteConflict: string;
        declare     var invalidArgument: string;
        declare     var invalidBinding: string;
        declare     var invalidOperation: string;
        declare     var invalidReference: string;
        declare     var invalidSelection: string;
        declare     var itemAlreadyExists: string;
        declare     var itemNotFound: string;
        declare     var notImplemented: string;
        declare     var unsupportedOperation: string;
    }


    /**
     * The RequestContext object facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the request context is required to get access to the Excel object model from the add-in.
     */
    declare class RequestContext mixins OfficeExtension.ClientRequestContext {
        constructor(url?: string): this;
        workbook: Workbook
    }

    /**
     * Executes a batch script that performs actions on the Excel object model, using a new RequestContext. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.
     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of "context.sync()"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.
     */
    declare function run<T>(
        batch: (context: Excel.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T >
}

declare
var npm$namespace$Word: {
        run: typeof Word$run,
    }
    /**
     * The RequestContext object facilitates requests to the Word application. Since the Office add-in and the Word application run in two different processes, the request context is required to get access to the Word object model from the add-in.
     */
declare class RequestContext mixins OfficeExtension.ClientRequestContext {
    constructor(url?: string): this;
    document: Word$Document
}


/**
 * Executes a batch script that performs actions on the Excel object model, using a new RequestContext. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.
 * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of "context.sync()"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.
 */
declare
function Word$run<T>(
        batch: (context: Excel.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T >
    declare
var npm$namespace$OneNote: {
    run: typeof OneNote$run,
}
declare class RequestContext mixins OfficeExtension.ClientRequestContext {
    constructor(url?: string): this;
    application: OneNote$Application
}


/**
 * Executes a batch script that performs actions on the Excel object model, using a new RequestContext. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.
 * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of "context.sync()"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.
 */
declare
function OneNote$run<T>(
    batch: (context: Excel.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T >