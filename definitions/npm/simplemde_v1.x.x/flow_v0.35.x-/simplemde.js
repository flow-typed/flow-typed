/**
 * Flowtype definitions for simplemde
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface SimpleMDE$AutoSaveOptions {
    enabled?: boolean,
        delay?: number,
        uniqueId: string
}

declare interface SimpleMDE$BlockStyleOptions {
    bold?: string,
        code?: string,
        italic?: string
}

declare interface SimpleMDE$InsertTextOptions {
    horizontalRule?: string[],
        image?: string[],
        link?: string[],
        table?: string[]
}

declare interface SimpleMDE$ParsingOptions {
    allowAtxHeaderWithoutSpace?: boolean,
        strikethrough?: boolean,
        underscoresBreakWords?: boolean
}

declare interface SimpleMDE$RenderingOptions {
    singleLineBreaks?: boolean,
        codeSyntaxHighlighting: boolean
}

declare interface SimpleMDE$ShortcutsArray {
    [action: string]: string,
    toggleBlockquote?: string,
        toggleBold?: string,
        cleanBlock?: string,
        toggleHeadingSmaller?: string,
        toggleItalic?: string,
        drawLink?: string,
        toggleUnorderedList?: string,
        togglePreview?: string,
        toggleCodeBlock?: string,
        drawImage?: string,
        toggleOrderedList?: string,
        toggleHeadingBigger?: string,
        toggleSideBySide?: string,
        toggleFullScreen?: string
}

declare interface SimpleMDE$StatusBarItem {
    className: string,
        defaultValue: (element: HTMLElement) => void,
        onUpdate: (element: HTMLElement) => void
}

declare interface SimpleMDE$ToolbarIcon {
    name: string,
        action: string | ((editor: SimpleMDE) => void),
        className: string,
        title: string
}

declare interface SimpleMDE$Options {
    autoDownloadFontAwesome?: boolean,
        autofocus?: boolean,
        autosave?: SimpleMDE$AutoSaveOptions,
        blockStyles?: SimpleMDE$BlockStyleOptions,
        element?: HTMLElement,
        forceSync?: boolean,
        hideIcons?: string[],
        indentWithTabs?: boolean,
        initialValue?: string,
        insertTexts?: SimpleMDE$InsertTextOptions,
        lineWrapping?: boolean,
        parsingConfig?: SimpleMDE$ParsingOptions,
        placeholder?: string,
        previewRender?: (markdownPlaintext: string, previewElement?: HTMLElement) => string,
        promptURLs?: boolean,
        renderingConfig?: SimpleMDE$RenderingOptions,
        shortcuts?: SimpleMDE$ShortcutsArray,
        showIcons?: string[],
        spellChecker?: boolean,
        status?: boolean | Array<string | SimpleMDE$StatusBarItem>,
        styleSelectedText?: boolean,
        tabSize?: number,
        toolbar?: boolean | Array<string | SimpleMDE$ToolbarIcon>,
        toolbarTips?: boolean
}
declare class SimpleMDE {
    constructor(): this;
    constructor(options: SimpleMDE$Options): this;
    value(): string;
    value(val: string): void;
    codemirror: any;
    toTextArea(): void;
    isPreviewActive(): boolean;
    isSideBySideActive(): boolean;
    isFullscreenActive(): boolean;
    clearAutosavedValue(): void;
    toggleBold: (editor: SimpleMDE) => void;
    toggleItalic: (editor: SimpleMDE) => void;
    toggleStrikethrough: (editor: SimpleMDE) => void;
    toggleHeadingSmaller: (editor: SimpleMDE) => void;
    toggleHeadingBigger: (editor: SimpleMDE) => void;
    toggleHeading1: (editor: SimpleMDE) => void;
    toggleHeading2: (editor: SimpleMDE) => void;
    toggleHeading3: (editor: SimpleMDE) => void;
    toggleCodeBlock: (editor: SimpleMDE) => void;
    toggleBlockquote: (editor: SimpleMDE) => void;
    toggleUnorderedList: (editor: SimpleMDE) => void;
    toggleOrderedList: (editor: SimpleMDE) => void;
    cleanBlock: (editor: SimpleMDE) => void;
    drawLink: (editor: SimpleMDE) => void;
    drawImage: (editor: SimpleMDE) => void;
    drawTable: (editor: SimpleMDE) => void;
    drawHorizontalRule: (editor: SimpleMDE) => void;
    togglePreview: (editor: SimpleMDE) => void;
    toggleSideBySide: (editor: SimpleMDE) => void;
    toggleFullScreen: (editor: SimpleMDE) => void;
    undo: (editor: SimpleMDE) => void;
    redo: (editor: SimpleMDE) => void
}