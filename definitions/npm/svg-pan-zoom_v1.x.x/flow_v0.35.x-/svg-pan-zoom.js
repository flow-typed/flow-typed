/**
 * Flowtype definitions for svg-pan-zoom
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface SvgPanZoom$Options {
    viewportSelector?: string | HTMLElement | SVGElement,
        panEnabled?: boolean,
        controlIconsEnabled?: boolean,
        zoomEnabled?: boolean,
        dblClickZoomEnabled?: boolean,
        mouseWheelZoomEnabled?: boolean,
        preventMouseEventsDefault?: boolean,
        zoomScaleSensitivity?: number,
        minZoom?: number,
        maxZoom?: number,
        fit?: boolean,
        contain?: boolean,
        center?: boolean,
        refreshRate?: number | "auto",
        beforeZoom?: (oldScale: number, newScale: number) => boolean,
        onZoom?: (newScale: number) => void,
        beforePan?: (
            oldPan: SvgPanZoom$Point,
            newPan: SvgPanZoom$Point) => boolean | SvgPanZoom$PointModifier,
        onPan?: (newPan: SvgPanZoom$Point) => void,
        customEventsHandler?: SvgPanZoom$CustomEventHandler,
        eventsListenerElement?: SVGElement
}

declare interface SvgPanZoom$CustomEventHandler {
    haltEventListeners: string[],
        init: (options: SvgPanZoom$CustomEventOptions) => void,
        destroy: Function
}

declare interface SvgPanZoom$CustomEventOptions {
    svgElement: SVGSVGElement,
        instance: SvgPanZoom$Instance
}

declare interface SvgPanZoom$Point {
    x: number,
        y: number
}

declare interface SvgPanZoom$PointModifier {
    x: number | boolean,
        y: number | boolean
}

declare interface SvgPanZoom$Instance {

    /**
     * Creates a new SvgPanZoom instance with given element selector.
     * @param  selector of the tag on which it is to be applied.
     * @param  provides customization options at the initialization of the object.
     * @return  Current instance
     */
    (svg: string | HTMLElement | SVGElement, options?: SvgPanZoom$Options): SvgPanZoom$Instance,

    /**
     * Enables Panning on svg element
     * @return  Current instance
     */
    enablePan(): SvgPanZoom$Instance,

        /**
         * Disables panning on svg element
         * @return  Current instance
         */
        disablePan(): SvgPanZoom$Instance,

        /**
         * Checks if Panning is enabled or not
         * @return  true or false based on panning settings
         */
        isPanEnabled(): boolean,
        setBeforePan(fn: (point: SvgPanZoom$Point) => void): SvgPanZoom$Instance,
        setOnPan(fn: (x: number, y: number) => void): SvgPanZoom$Instance,

        /**
         * Pan to a rendered position
         * @param  {x: 0, y: 0}
         * @return  Current instance
         */
        pan(point: SvgPanZoom$Point): SvgPanZoom$Instance,

        /**
         * Relatively pan the graph by a specified rendered position vector
         * @param  {x: 0, y: 0}
         * @return  Current instance
         */
        panBy(point: SvgPanZoom$Point): SvgPanZoom$Instance,

        /**
         * Get pan vector
         * @return  {x: 0, y: 0}
         * @return  Current instance
         */
        getPan(): SvgPanZoom$Point,
        resetPan(): SvgPanZoom$Instance,
        enableZoom(): SvgPanZoom$Instance,
        disableZoom(): SvgPanZoom$Instance,
        isZoomEnabled(): boolean,
        enableControlIcons(): SvgPanZoom$Instance,
        disableControlIcons(): SvgPanZoom$Instance,
        isControlIconsEnabled(): boolean,
        enableDblClickZoom(): SvgPanZoom$Instance,
        disableDblClickZoom(): SvgPanZoom$Instance,
        isDblClickZoomEnabled(): boolean,
        enableMouseWheelZoom(): SvgPanZoom$Instance,
        disableMouseWheelZoom(): SvgPanZoom$Instance,
        isMouseWheelZoomEnabled(): boolean,
        setZoomScaleSensitivity(scale: number): SvgPanZoom$Instance,
        setMinZoom(zoom: number): SvgPanZoom$Instance,
        setMaxZoom(zoom: number): SvgPanZoom$Instance,
        setBeforeZoom(fn: (scale: number) => void): SvgPanZoom$Instance,
        setOnZoom(fn: (scale: number) => void): SvgPanZoom$Instance,
        zoom(scale: number): void,
        zoomIn(): SvgPanZoom$Instance,
        zoomOut(): SvgPanZoom$Instance,
        zoomBy(scale: number): SvgPanZoom$Instance,
        zoomAtPoint(scale: number, point: SvgPanZoom$Point): SvgPanZoom$Instance,
        zoomAtPointBy(scale: number, point: SvgPanZoom$Point): SvgPanZoom$Instance,
        resetZoom(): SvgPanZoom$Instance,

        /**
         * Get zoom scale/level
         * @return  zoom scale
         */
        getZoom(): number,

        /**
         * Adjust viewport size (only) so it will fit in SVG
         * Does not center image
         * @return  Current instance
         */
        fit(): SvgPanZoom$Instance,

        /**
         * Adjust viewport size (only) so it will contain in SVG
         * Does not center image
         * @return  Current instance
         */
        contain(): SvgPanZoom$Instance,

        /**
         * Adjust viewport pan (only) so it will be centered in SVG
         * Does not zoom/fit image
         * @return  Current instance
         */
        center(): SvgPanZoom$Instance,

        /**
         * Recalculates cached svg dimensions and controls position
         * @return  Current instance
         */
        resize(): SvgPanZoom$Instance,
        reset(): SvgPanZoom$Instance,

        /**
         * Update content cached BorderBox
         * Use when viewport contents change
         * @return  Current instance
         */
        updateBBox(): SvgPanZoom$Instance,
        destroy(): void
}
declare var svgPanZoom: SvgPanZoom$Instance;
declare module 'svg-pan-zoom' {
    declare module.exports: typeof svgPanZoom
}