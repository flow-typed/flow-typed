/**
 * Flowtype definitions for imagesloaded
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare type ImagesLoaded$ElementSelector = Element | NodeList | Array<Element>| string;


/**
 * interface for an image currently loading or completed 
 */
declare interface ImagesLoaded$LoadingImage {
    img: HTMLImageElement,
        isLoaded: boolean
}

declare interface ImagesLoaded$ImagesLoadedCallback {
    (instance?: ImagesLoaded$ImagesLoaded): void
}

declare interface ImagesLoaded$ImagesLoadedListener {
    (instance: ImagesLoaded$ImagesLoaded, image?: ImagesLoaded$LoadingImage): void
}

declare interface ImagesLoaded$ImagesLoaded {
    new(
        elem: ImagesLoaded$ElementSelector,
        callback: ImagesLoaded$ImagesLoadedCallback): ImagesLoaded$ImagesLoaded,
    images: Array<ImagesLoaded$LoadingImage>,
        on(event: string, listener: ImagesLoaded$ImagesLoadedListener): void,
        off(event: string, listener: ImagesLoaded$ImagesLoadedListener): void
}

declare interface ImagesLoaded$ImagesLoadedConstructor {

    /**
     * Creates a new ImagesLoaded object with the provided callback
     * @param elem Element, NodeList, Element array, or selector string for images to watch
     * @param callback function triggered after all images have been loaded
     */
    (elem: ImagesLoaded$ElementSelector, callback?: ImagesLoaded$ImagesLoadedCallback): ImagesLoaded$ImagesLoaded
}
declare
var imagesLoaded: ImagesLoaded$ImagesLoadedConstructor;
declare module 'imagesloaded' {
    declare module.exports: typeof imagesLoaded
}
declare interface JQuery {
    imagesLoaded(
        callback?: ImagesLoaded$ImagesLoadedCallback): JQueryDeferred<ImagesLoaded$ImagesLoaded >
}