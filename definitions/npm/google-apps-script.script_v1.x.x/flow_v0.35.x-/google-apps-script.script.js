// @flow
/**
 * Flowtype definitions for google-apps-script.script
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'Script' {

    /**
     * An object used to determine whether the user needs to authorize this script to use
     *   one or more services, and to provide the URL for an authorization dialog. If the script
      is published as an add-on that uses
      installable triggers, this information
      can be used to control access to sections of code for which the user lacks the necessary
      authorization. Alternately, the add-on can ask the user to open the URL for the
      authorization dialog to resolve the problem.

    This object is returned by
      ScriptApp.getAuthorizationInfo(authMode). In almost all cases,
      scripts should call
      ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL), since no other
      authorization mode requires that users grant authorization.
    */
    declare     export interface AuthorizationInfo {
        getAuthorizationStatus(): AuthorizationStatus,
            getAuthorizationUrl(): string
    }

    /**
     * A builder for clock triggers.
     */
    declare     export interface ClockTriggerBuilder {
        after(durationMilliseconds: Integer): ClockTriggerBuilder,
            at(date: Date): ClockTriggerBuilder,
            atDate(year: Integer, month: Integer, day: Integer): ClockTriggerBuilder,
            atHour(hour: Integer): ClockTriggerBuilder,
            create(): Trigger,
            everyDays(n: Integer): ClockTriggerBuilder,
            everyHours(n: Integer): ClockTriggerBuilder,
            everyMinutes(n: Integer): ClockTriggerBuilder,
            everyWeeks(n: Integer): ClockTriggerBuilder,
            inTimezone(timezone: string): ClockTriggerBuilder,
            nearMinute(minute: Integer): ClockTriggerBuilder,
            onMonthDay(day: Integer): ClockTriggerBuilder,
            onWeekDay(day: Base.Weekday): ClockTriggerBuilder
    }

    /**
     * A builder for document triggers.
     */
    declare     export interface DocumentTriggerBuilder {
        create(): Trigger,
            onOpen(): DocumentTriggerBuilder
    }

    /**
     * A builder for form triggers.
     */
    declare     export interface FormTriggerBuilder {
        create(): Trigger,
            onFormSubmit(): FormTriggerBuilder,
            onOpen(): FormTriggerBuilder
    }

    /**
     * Access and manipulate script publishing and triggers. This class allows users to create script
     *   triggers and control publishing the script as a service.
     */
    declare     export interface ScriptApp {
        AuthMode: AuthMode,
            AuthorizationStatus: AuthorizationStatus,
            EventType: EventType,
            InstallationSource: InstallationSource,
            TriggerSource: TriggerSource,
            WeekDay: Base.Weekday,
            deleteTrigger(trigger: Trigger): void,
            getAuthorizationInfo(authMode: AuthMode): AuthorizationInfo,
            getInstallationSource(): InstallationSource,
            getOAuthToken(): string,
            getProjectKey(): string,
            getProjectTriggers(): Trigger[],
            getService(): Service,
            getUserTriggers(document: Document.Document): Trigger[],
            getUserTriggers(form: Forms.Form): Trigger[],
            getUserTriggers(spreadsheet: Spreadsheet.Spreadsheet): Trigger[],
            invalidateAuth(): void,
            newStateToken(): StateTokenBuilder,
            newTrigger(functionName: string): TriggerBuilder,
            getScriptTriggers(): Trigger[]
    }

    /**
     * Builder for spreadsheet triggers.
     */
    declare     export interface SpreadsheetTriggerBuilder {
        create(): Trigger,
            onChange(): SpreadsheetTriggerBuilder,
            onEdit(): SpreadsheetTriggerBuilder,
            onFormSubmit(): SpreadsheetTriggerBuilder,
            onOpen(): SpreadsheetTriggerBuilder
    }

    /**
     * Allows scripts to create state tokens that can be used in callback APIs (like OAuth flows).
     * 
          // Reusable function to generate a callback URL, assuming the script has been published as a
          // web app (necessary to obtain the URL programmatically). If the script has not been published
          // as a web app, set `var url` in the first line to the URL of your script project (which
          // cannot be obtained programmatically).
          function getCallbackURL(callbackFunction){
            var url = ScriptApp.getService().getUrl();      // Ends in /exec (for a web app)
            url = url.slice(0, -4) + 'usercallback?state='; // Change /exec to /usercallback
            var stateToken = ScriptApp.newStateToken()
                .withMethod(callbackFunction)
                .withTimeout(120)
                .createToken();
            return url + stateToken;
          }
    */
    declare     export interface StateTokenBuilder {
        createToken(): string,
            withArgument(name: string, value: string): StateTokenBuilder,
            withMethod(method: string): StateTokenBuilder,
            withTimeout(seconds: Integer): StateTokenBuilder
    }

    /**
     * A script trigger.
     */
    declare     export interface Trigger {
        getEventType(): EventType,
            getHandlerFunction(): string,
            getTriggerSource(): TriggerSource,
            getTriggerSourceId(): string,
            getUniqueId(): string
    }

    /**
     * A generic builder for script triggers.
     */
    declare     export interface TriggerBuilder {
        forDocument(document: Document.Document): DocumentTriggerBuilder,
            forDocument(key: string): DocumentTriggerBuilder,
            forForm(form: Forms.Form): FormTriggerBuilder,
            forForm(key: string): FormTriggerBuilder,
            forSpreadsheet(sheet: Spreadsheet.Spreadsheet): SpreadsheetTriggerBuilder,
            forSpreadsheet(key: string): SpreadsheetTriggerBuilder,
            timeBased(): ClockTriggerBuilder
    }
}
declare var ScriptApp: undefined.ScriptApp;