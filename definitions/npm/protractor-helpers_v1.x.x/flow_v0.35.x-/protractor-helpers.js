/**
 * Flowtype definitions for protractor-helpers
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface protractor$IProtractorLocatorStrategy {
    dataHook(
            hook: string,
            optParentElement?: protractor$ElementFinder,
            optRootSelector?: string): webdriver.Locator,
        dataHookAll(
            hook: string,
            optParentElement?: protractor$ElementFinder,
            optRootSelector?: string): webdriver.Locator
}
declare
function $data(hook: string): protractor$ElementFinderdeclare
function $$data(hook: string): protractor$ElementArrayFinderdeclare interface jasmine$Matchers {
    toBePresent(): boolean,
        toBeDisplayed(): boolean,
        toHaveCountOf(expectedCount: number): boolean,
        toHaveText(expectedText: string): boolean,
        toMatchRegex(regex: RegExp): boolean,
        toMatchMoney(expectedValue: number, currencySymbol?: string): boolean,
        toMatchMoneyWithFraction(expectedValue: number, currencySymbol?: string): boolean,
        toHaveValue(actual: string | number): boolean,
        toHaveClass(className: string): boolean,
        toHaveUrl(url: string): boolean,
        toBeDisabled(): boolean,
        toBeChecked(): boolean,
        toBeValid(): boolean,
        toBeInvalid(): boolean,
        toBeInvalidRequired(): boolean,
        toMatchTranslated(translationId: string, interpolateParams?: any): boolean,
        toMatchTranslated(translationId: string[], interpolateParams?: any): boolean
}
declare module 'protractor-helpers' {
    declare function not(arg: undefined.IThenable<any>): undefined.IThenable<boolean >
        declare function translate(translationId: string, interpolateParams?: any): undefined.IThenable<string >
        declare function safeGet(url: string): void
    declare function maximizeWindow(width?: number, height?: number): void
    declare function resetPosition(): void
    declare function moveToElement(hook: string): void
    declare function displayHover(element: protractor$ElementFinder): void
    declare function waitForElement(element: protractor$ElementFinder, timeout?: number): void
    declare function waitForElementToDisappear(element: protractor$ElementFinder, timeout?: number): void
    declare function selectOptionByText(select: protractor$ElementFinder, text: string): void
    declare function selectOptionByIndex(select: protractor$ElementFinder, index: number): void
    declare function selectOption(option: protractor$ElementFinder): void
    declare function isFirefox(): boolean
    declare function isIE(): boolean
    declare function createMessage(actual: string, message: string, isNot: any): string
    declare function clearAndSetValue(input: protractor$ElementFinder, value: string): void
    declare function hasClass(
        element: protractor$ElementFinder,
        className: string): undefined.IThenable<boolean >
        declare function hasValue(
        element: protractor$ElementFinder,
        expectedValue: string): undefined.IThenable<boolean >
        declare function hasLink(element: protractor$ElementFinder, url: string): undefined.IThenable<boolean >
        declare function isDisabled(element: protractor$ElementFinder): undefined.IThenable<boolean >
        declare function isChecked(element: protractor$ElementFinder): undefined.IThenable<boolean >
        declare function getFilteredConsoleErrors(): undefined.IThenable<string[] >
}