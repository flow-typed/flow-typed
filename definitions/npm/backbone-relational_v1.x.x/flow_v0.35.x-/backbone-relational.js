/**
 * Flowtype definitions for backbone-relational
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare class RelationalModel mixins Model {

    /**
     * Do not use, prefer TypeScript's extend functionality.
     */
    relations: any;
    subModelTypes: any;
    subModelTypeAttribute: any;
    initializeRelations(options: any): void;
    updateRelations(options: any): void;
    queue(func: any): void;
    processQueue(): void;
    getRelation(name: string): Backbone$Relation;
    getRelations(): Backbone$Relation[];
    fetchRelated(key: string, options?: any, update?: boolean): any;
    toJSON(): any;
    setup(): void;
    build(attributes: any, options?: any): void;
    findOrCreate(attributes: string, options?: any): void;
    findOrCreate(attributes: number, options?: any): void;
    findOrCreate(attributes: any, options?: any): void
}

declare
export class Relation mixins Model {
    options: any;
    instance: any;
    key: any;
    keyContents: any;
    relatedModel: any;
    relatedCollection: any;
    reverseRelation: any;
    related: any;
    checkPreconditions(): boolean;
    setRelated(related: Model): void;
    setRelated(related: Collection<Model>): void;
    getReverseRelations(model: Backbone$RelationalModel): Backbone$Relation;
    destroy(): void
}

declare
export class HasOne mixins Relation {
    collectionType: any;
    findRelated(options: any): Model;
    setKeyContents(keyContents: string): void;
    setKeyContents(keyContents: string[]): void;
    setKeyContents(keyContents: number): void;
    setKeyContents(keyContents: number[]): void;
    setKeyContents(keyContents: Collection<Model>): void;
    onChange(model: Model, attr: any, options: any): void;
    handleAddition(model: Model, coll: Collection<Model>, options: any): void;
    handleRemoval(model: Model, coll: Collection<Model>, options: any): void;
    handleReset(coll: Collection<Model>, options: any): void;
    tryAddRelated(model: Model, coll: any, options: any): void;
    addRelated(model: Model, options: any): void;
    removeRelated(model: Model, coll: any, options: any): void
}

declare
export class HasMany mixins Relation {
    collectionType: any;
    findRelated(options: any): Model;
    setKeyContents(keyContents: string): void;
    setKeyContents(keyContents: number): void;
    setKeyContents(keyContents: Model): void;
    onChange(model: Model, attr: any, options: any): void;
    tryAddRelated(model: Model, coll: any, options: any): void;
    addRelated(model: Model, options: any): void;
    removeRelated(model: Model, coll: any, options: any): void
}

declare
export class Store mixins Events {
    initializeRelation(
        model: << UNKNOWN PARAM FORMAT >> ,
        relation: << UNKNOWN PARAM FORMAT >> ,
        options: << UNKNOWN PARAM FORMAT >> ): void;
    addModelScope(scope: any): void;
    removeModelScope(scope: << UNKNOWN PARAM FORMAT >> ): void;
    addSubModels(
        subModelTypes: Backbone$RelationalModel,
        superModelType: Backbone$RelationalModel): void;
    setupSuperModel(modelType: Backbone$RelationalModel): void;
    addReverseRelation(relation: any): void;
    addOrphanRelation(relation: any): void;
    processOrphanRelations(): void;
    retroFitRelation(relation: Backbone$RelationalModel, create: boolean): Collection<Model>;
    getCollection(type: Backbone$RelationalModel, create: boolean): Collection<Model>;
    getObjectByName(name: string): any;
    resolveIdForItem(type: any, item: any): any;
    find(type: any, item: string): Backbone$RelationalModel;
    find(type: any, item: number): Backbone$RelationalModel;
    find(type: any, item: Backbone$RelationalModel): Backbone$RelationalModel;
    find(type: any, item: any): Backbone$RelationalModel;
    register(model: Backbone$RelationalModel): void;
    checkId(model: Backbone$RelationalModel, id: any): void;
    update(model: Backbone$RelationalModel): void;
    unregister(
        model: Backbone$RelationalModel,
        collection: Collection<Model>,
        options: any): void;
    reset(): void
}