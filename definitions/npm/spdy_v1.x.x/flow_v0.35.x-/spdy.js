/**
 * Flowtype definitions for spdy
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'spdy' {

    declare var npm$namespace$agent: {
        create: typeof agent$create,
    }
    declare export class Agent mixins undefined.Agent {}

    declare export class PlainAgent mixins undefined.Agent {}

    declare export function agent$create(base: any, options: https$AgentOptions): agent$Agent | agent$PlainAgent

    declare export type agent$AgentOptions = {
        port?: number,
        spdy?: {
            plain?: boolean,
            ssl?: boolean,
            x - forwarded -
            for?: string,
            protocol?: string,
            protocols?: string[]
        }
    }
    declare export interface Handle {
        create(options: Object, stream: any, socket: socket$Socket): Handle,
            getStream(callback?: Function): any,
            assignSocket(socket: socket$Socket, options: Object): void,
            assignClientRequest(req: any): void,
            assignRequest(req: any): void,
            assignResponse(res: any): void,
            emitRequest(): void,
            emitResponse(status: any, headers: any): void
    }

    declare var npm$namespace$request: {
        onNewListener: typeof request$onNewListener,
    }
    declare export function request$onNewListener(type: string): void

    declare var npm$namespace$response: {
        writeHead: typeof response$writeHead,
        end: typeof response$end,
    }
    declare export function response$writeHead(statusCode: number, reason: string, obj: Object): void

    declare export function response$end(data: any, encoding: string, callback: Function): void

    declare var npm$namespace$server: {
        create: typeof server$create,
    }
    declare export type server$Server = {}

    declare export type server$PlainServer = {}

    declare export type server$IncomingMessage = {}

    declare export type server$ServerResponse = {
        push(filename: string, options: server$PushOptions): any
    }

    declare export function server$create(base: any, options: agent$AgentOptions): agent$Agent | agent$PlainAgent

    declare export type server$Protocol = "h2" |
        "spdy/3.1" |
        "spdy/3" |
        "spdy/2" |
        "http/1.1" |
        "http/1.0";

    declare export interface server$PushOptions {
        status?: number,
            method?: string,
            request?: any,
            response?: any
    }

    declare export type server$ServerOptions = {
        spdy?: {
            protocols?: server$Protocol[],
            plain?: boolean,
            x - forwarded -
            for?: boolean,
            connection?: {
                windowSize?: number,
                autoSpdy31?: boolean
            }
        }
    }
    declare export type http$Server = {}

    declare export type http$AgentOptions = {
        port?: number,
        spdy?: {
            plain?: boolean,
            ssl?: boolean,
            x - forwarded -
            for?: string,
            protocol?: string,
            protocols?: string[]
        }
    }

    declare class Agent {
        maxSockets: number;
        sockets: any;
        requests: any;
        constructor(opts?: http$AgentOptions): this;

        /**
         * Destroy any sockets that are currently in use by the agent.
         * It is usually not necessary to do this. However, if you are using an agent with KeepAlive enabled,
        then it is best to explicitly shut down the agent when you know that it will no longer be used. Otherwise,
        sockets may hang open for quite a long time before the server terminates them.
        */
        destroy(): void
    }

    declare export type http$IncomingMessage = {}

    declare export type http$ServerResponse = {
        push(filename: string, options: server$PushOptions): any
    }

    declare export type https$Server = {}

    declare export type https$ServerOptions = {
        spdy?: {
            protocols?: server$Protocol[],
            plain?: boolean,
            x - forwarded -
            for?: boolean,
            connection?: {
                windowSize?: number,
                autoSpdy31?: boolean
            }
        }
    }

    declare class Agent mixins http$Agent {}

    declare export type https$AgentOptions = {
        port?: number,
        spdy?: {
            plain?: boolean,
            ssl?: boolean,
            x - forwarded -
            for?: string,
            protocol?: string,
            protocols?: string[]
        }
    }

    declare export type tls$Server = {}

    declare interface tls$SecureContext {
        context: any
    }

    declare export type net$Server = {}

    declare interface net$ListenOptions {
        port?: number,
            host?: string,
            backlog?: number,
            path?: string,
            exclusive?: boolean
    }
    declare export interface socket$Socket {}
    declare export type Agent = agent$Agent;
    declare export type PlainAgent = agent$PlainAgent;
    declare export type AgentOptions = {
        port?: number,
        spdy?: {
            plain?: boolean,
            ssl?: boolean,
            x - forwarded -
            for?: string,
            protocol?: string,
            protocols?: string[]
        }
    }
    declare export interface Socket {}
    declare export type Server = {}
    declare export type IncomingMessage = {}
    declare export type ServerRequest = server$IncomingMessage;
    declare export type ServerResponse = {
        push(filename: string, options: server$PushOptions): any
    }
    declare export type PlainServer = {}
    declare export type ServerOptions = {
        spdy?: {
            protocols?: server$Protocol[],
            plain?: boolean,
            x - forwarded -
            for?: boolean,
            connection?: {
                windowSize?: number,
                autoSpdy31?: boolean
            }
        }
    }
    declare export function createAgent(base: any, options: https$AgentOptions): https$Agent | agent$PlainAgent
    declare export function createServer(
        base: any,
        options: https$ServerOptions,
        handler: (request: http$IncomingMessage, response: http$ServerResponse) => void): net$Server
}