/**
 * Flowtype definitions for dojox.uuid
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid.html
 * 
Deprecated.  Should require dojox/uuid modules directly rather than trying to access them through
this module.
*/
declare interface dojox$uuid {}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid/generateRandomUuid.html
 * 
This function generates random UUIDs, meaning "version 4" UUIDs.
A typical generated value would be something like this:
"3b12f1df-5232-4804-897e-917bf397618a"

For more information about random UUIDs, see sections 4.4 and
4.5 of RFC 4122: http://tools.ietf.org/html/rfc4122#section-4.4

This generator function is designed to be small and fast,
but not necessarily good.

Small: This generator has a small footprint. Once comments are
stripped, it's only about 25 lines of code, and it doesn't
dojo.require() any other modules.

Fast: This generator can generate lots of new UUIDs fairly quickly
(at least, more quickly than the other dojo UUID generators).

Not necessarily good: We use Math.random() as our source
of randomness, which may or may not provide much randomness.
*/
declare interface uuid$generateRandomUuid {
    (): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid/generateTimeBasedUuid.html
 * 
This function generates time-based UUIDs, meaning "version 1" UUIDs.
For more info, see
http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
http://www.infonuovo.com/dma/csdocs/sketch/instidid.htm
http://kruithof.xs4all.nl/uuid/uuidgen
http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20
http://jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html
 * @param node OptionalA 12-character hex string representing either a pseudo-node orhardware-node (an IEEE 802.3 network node).  A hardware-nodewill be something like "017bf397618a", always with the first bitbeing 0.  A pseudo-node will be something like "f17bf397618a",always with the first bit being 1.
*/
declare interface uuid$generateTimeBasedUuid {
    (node?: String): void
}


/**
 * Returns the 'node' value that will be included in generated UUIDs.
 */
declare interface generateTimeBasedUuid$getNode {
    (): void
}


/**
 * 
 * @param node Optional
 */
declare interface generateTimeBasedUuid$isValidNode {
    (node: String): void
}


/**
 * Sets the 'node' value that will be included in generated UUIDs.
 * @param node Optional
 */
declare interface generateTimeBasedUuid$setNode {
    (node: String): void
}


/**
 * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid/Uuid.html
 * 
This is the constructor for the Uuid class.  The Uuid class offers
methods for inspecting existing UUIDs.
 * @param input Optional
*/
declare interface uuid$Uuid {
    (input?: String): void
}


/**
 * Compares this UUID to another UUID, and returns 0, 1, or -1.
 * This implementation is intended to match the sample implementation
in IETF RFC 4122: http://www.ietf.org/rfc/rfc4122.txt
 * @param otherUuid 
*/
declare interface Uuid$compare {
    (otherUuid: undefined.Uuid): void
}


/**
 * Returns the default generator.  See setGenerator().
 */
declare interface Uuid$getGenerator {
    (): void
}


/**
 * Returns the 'node' value that will be included in generated UUIDs.
 */
declare interface Uuid$getNode {
    (): void
}


/**
 * If this is a version 1 UUID (a time-based UUID), this method returns
 * the timestamp value encoded in the UUID.  The caller can ask for the
timestamp to be returned either as a JavaScript Date object or as a
15-character string of hex digits.
 * @param returnType Optional
*/
declare interface Uuid$getTimestamp {
    (returnType: String): any
}


/**
 * Returns a variant code that indicates what type of UUID this is.
 * Returns one of the enumerated dojox.uuid.variant values.
 */
declare interface Uuid$getVariant {
    (): void
}


/**
 * Returns a version number that indicates what type of UUID this is.
 * Returns one of the enumerated dojox.uuid.version values.
 */
declare interface Uuid$getVersion {
    (): void
}


/**
 * Returns true if this UUID is equal to the otherUuid, or false otherwise.
 * @param otherUuid 
 */
declare interface Uuid$isEqual {
    (otherUuid: undefined.Uuid): void
}


/**
 * Returns true if the UUID was initialized with a valid value.
 */
declare interface Uuid$isValid {
    (): void
}


/**
 * Sets the default generator, which will be used by the
 * "new dojox.uuid.Uuid()" constructor if no parameters
are passed in.
 * @param generator Optional
*/
declare interface Uuid$setGenerator {
    (generator: Function): void
}


/**
 * This method returns a standard 36-character string representing
 * the UUID, such as "3b12f1df-5232-4804-897e-917bf397618a".
 */
declare interface Uuid$toString {
    (): void
}

declare module '_base' {

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid/_base.variant.html
     */
    declare interface variant {

        /**
         * 
         */
        DCE: string,

            /**
             * 
             */
            MICROSOFT: string,

            /**
             * 
             */
            NCS: string,

            /**
             * 
             */
            UNKNOWN: string
    }

    /**
     * Permalink: http://dojotoolkit.org/api/1.9/dojox/uuid/_base.version.html
     */
    declare interface version {

        /**
         * 
         */
        DCE_SECURITY: number,

            /**
             * 
             */
            NAME_BASED_MD5: number,

            /**
             * 
             */
            NAME_BASED_SHA1: number,

            /**
             * 
             */
            RANDOM: number,

            /**
             * 
             */
            TIME_BASED: number,

            /**
             * 
             */
            UNKNOWN: number
    }
}
declare module 'dojox/uuid' {
    declare var exp: dojox$uuid;
    declare module.exports: typeof exp
}
declare module 'dojox/uuid/generateRandomUuid' {
    declare var exp: undefined.generateRandomUuid;
    declare module.exports: typeof exp
}
declare module 'dojox/uuid/generateTimeBasedUuid' {
    declare var exp: undefined.generateTimeBasedUuid;
    declare module.exports: typeof exp
}
declare module 'dojox/uuid/Uuid' {
    declare var exp: undefined.Uuid;
    declare module.exports: typeof exp
}
declare module 'dojox/uuid/_base.variant' {
    declare var exp: undefined.variant;
    declare module.exports: typeof exp
}
declare module 'dojox/uuid/_base.version' {
    declare var exp: undefined.version;
    declare module.exports: typeof exp
}