// @flow
/**
 * Flowtype definitions for valerie
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Extensions to KO functions to provide validation
 * 
Version 1.2 - added more static methods to valerie object
*/
declare interface KnockoutObservable<T>{
    validate(
        validationOptions?: Valerie$ValidationOptions): Valerie$PropertyValidationState<KnockoutObservable<T >>
}
declare interface KnockoutComputed<T>{
    validate(
        validationOptions?: Valerie$ValidationOptions): Valerie$PropertyValidationState<KnockoutComputed<T >>
}
declare interface KnockoutObservableArray<T>{
    validate(
        validationOptions?: Valerie$ValidationOptions): Valerie$PropertyValidationState<KnockoutObservableArray<T >>
}
declare interface KnockoutObservableArrayFunctions<T>{

        /**
         * Creates and sets a model validation state on a Knockout observable array.<br/>
         * <i>[fluent]</i>
         * @name  ko.observableArray#validateAsModel
         * @method  * 
         * @fluent  * 
         * @param  the options to use when creating the
        validation state
         * @return  the validation state belonging to the observable array
        */
        validateAsModel(): Valerie$ValidatableModel<KnockoutObservableArray<T >>
    }
    /**
     * Valerie BindingHandlers
     */
declare interface KnockoutBindingHandlers {

    /**
     * Validates entries that can be checked, i.e. check boxes and radio buttons.
     * Functions in the same way as the <b>ko.bindingHandlers.checked</b> binding handler, with the following
    alterations:
    <ul>
         <li>registers a blur event handler so validation messages for selections can be displayed</li>
         <li>registers a click event handler so validation state can be marked as touched</i>
    </ul>
     * @name  ko.bindingHandlers.validatedChecked
    */
    validatedChecked: KnockoutBindingHandler,

        /**
         * Validates options selected in a select list.
         * Functions in the same way as the <b>ko.bindingHandlers.selectedOptions</b> binding handler, with the
        following alterations:
        <ul>
             <li>registers a blur event handler so validation messages for selections can be displayed</li>
             <li>registers a click event handler so validation state can be marked as touched</i>
        </ul>
         * @name  ko.bindingHandlers.validatedSelectedOptions
        */
        validatedSelectedOptions: KnockoutBindingHandler,

        /**
         * Validates entries that can be keyed or selected.
         * Functions in the same way as the <b>ko.bindingHandlers.value</b> binding handler, with the following
        alterations:
        <ul>
             <li>registers a blur event handler:
             <ul>
                 <li>to display validation messages as entries or selections lose focus</li>
                 <li>to reformat successfully parsed textual entries</li>
             </ul>
             </li>
             <li>
                 registers a focus event handler to pause the update of any existing visible validation message
             </li>
             <li>
                 registers a key-up event handler which validates the entry as it's being entered; this allows other
                 entries that are shown conditionally to be available before the user tabs out of this entry
             </li>
        </ul>
         * @name  ko.bindingHandlers.validatedValue
        */
        validatedValue: KnockoutBindingHandler,

        /**
         * Disables the element when the chosen property or model has failed or is pending validation, enabled
         * otherwise.
         * @name  ko.bindingHandlers.disabledWhenNotValid
         */
        disabledWhenNotValid: KnockoutBindingHandler,

        /**
         * Disables the element when the chosen property or model has been touched and has failed or is pending
         * validation, enabled otherwise.<br/>
         * @name  ko.bindingHandlers.disabledWhenTouchedAndNotValid
         */
        disabledWhenTouchedAndNotValid: KnockoutBindingHandler,

        /**
         * Enables the element when the chosen property or model is applicable, disabled otherwise.
         * @name  ko.bindingHandlers.enabledWhenApplicable
         */
        enabledWhenApplicable: KnockoutBindingHandler,

        /**
         * Sets the text of the element to be a formatted representation of the specified property.
         * @name  ko.bindingHandlers.formattedText
         */
        formattedText: KnockoutBindingHandler,

        /**
         * Sets CSS classes on the element based on the validation state of the chosen property or model.</br>
         * The names of the CSS classes used are held in the <b>ko.bindingHandlers.validationCss.classNames</b> object,
        by default they are:
        <ul>
             <li><b>failed</b> - if validation failed</li>
             <li><b>focused</b> - if the element is in focus</li>
             <li><b>passed</b> - if validation passed</li>
             <li><b>pending</b> - if validation is pending</li>
             <li><b>required</b> - if an entry is required</li>
             <li><b>showMessage</b> - if a validation message should be shown</li>
             <li><b>touched</b> - set if the model or entry has been "touched"</li>
             <li><b>untouched</b> - set if the model or entry has not been "touched"</li>
        </ul>
         * @name  ko.bindingHandlers.validationCss
        */
        validationCss: KnockoutBindingHandler,

        /**
         * Makes the element behave like a validation message for the chosen property or model:
         * <ul>
             <li>makes the element visible if the value is invalid</li>
             <li>sets the text of the element to be the underlying validation state's message</li>
        </ul>
         * @name  ko.bindingHandlers.validationMessage
        */
        validationMessage: KnockoutBindingHandler,

        /**
         * Sets the text of the element to be the underlying validation state's message.
         * @name  ko.bindingHandlers.validationMessageText
         */
        validationMessageText: KnockoutBindingHandler,

        /**
         * Sets the text of the element to be the underlying validation state's name.
         * @name  ko.bindingHandlers.validationName
         */
        validationName: KnockoutBindingHandler,

        /**
         * Makes the element visible if the chosen property or model is applicable, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenApplicable
         */
        visibleWhenApplicable: KnockoutBindingHandler,

        /**
         * Makes the element visible when the entry bound to the chosen property is in focus, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenFocused
         */
        visibleWhenFocused: KnockoutBindingHandler,

        /**
         * Makes the element visible when the chosen property or model has failed validation, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenInvalid
         */
        visibleWhenInvalid: KnockoutBindingHandler,

        /**
         * Makes the element visible when the summary for the chosen model is not empty, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenSummaryNotEmpty
         */
        visibleWhenSummaryNotEmpty: KnockoutBindingHandler,

        /**
         * Makes the element visible if the chosen property or model has been touched, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenTouched
         */
        visibleWhenTouched: KnockoutBindingHandler,

        /**
         * Makes the element visible if the chosen property or model is untouched, invisible otherwise.
         * @name  ko.bindingHandlers.visibleWhenUntouched
         */
        visibleWhenUntouched: KnockoutBindingHandler,

        /**
         * Makes the element visible if the chosen property or model has passed validation.
         * @name  ko.bindingHandlers.visibleWhenValid
         */
        visibleWhenValid: KnockoutBindingHandler
}
declare var valerie: Valerie$Static;
declare module 'Rules' {

}