// @flow
/**
 * Flowtype definitions for breeze
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'promises' {
    declare     export interface IPromise<T>{
        then<U>(onFulfill: (value: T) => U, onReject?: (reason: any) => U): IPromise<U>,
        then<U>(
            onFulfill: (value: T) => IPromise<U>,
            onReject?: (reason: any) => U): IPromise<U>,
        then<U>(
            onFulfill: (value: T) => U,
            onReject?: (reason: any) => IPromise<U>): IPromise<U>,
        then<U>(
            onFulfill: (value: T) => IPromise<U>,
            onReject?: (reason: any) => IPromise<U>): IPromise<U>,
        catch<U>(onRejected: (reason: any) => U): IPromise<U>,
        catch<U>(onRejected: (reason: any) => IPromise<U>): IPromise<U>,
        finally(finallyCallback: () => any): IPromise<T >
    }
    declare     export interface IDeferred<T>{
        promise: IPromise<T>,
        resolve(value: T): void,
        reject(reason: any): void
    }
    declare     export interface IPromiseService {
        defer<T>(): IDeferred<T>,
            reject(reason?: any): IPromise<any>,
            resolve<T>(object: T): IPromise<T>,
            resolve<T>(object: IPromise<T>): IPromise<T >
    }
}
declare module 'breeze' {
    declare module.exports: typeof breeze
}