/**
 * Flowtype definitions for universal-analytics
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface UniversalAnalytics {
    (accountID: string, uuid?: string, opts?: Object): UniversalAnalytics$Client
}
declare interface UniversalAnalytics$Client {
    debug(): UniversalAnalytics$Client,
        send(): void,
        pageview(path: string): UniversalAnalytics$Client,
        pageview(path: string, callback?: (err: any) => void): void,
        pageview(params: Object): UniversalAnalytics$Client,
        pageview(params: Object, callback?: (err: any) => void): void,
        pageview(path: string, hostname: string): UniversalAnalytics$Client,
        pageview(path: string, hostname: string, callback?: (err: any) => void): void,
        pageview(path: string, title: string, hostname: string): UniversalAnalytics$Client,
        pageview(
            path: string,
            title: string,
            hostname: string,
            callback?: (err: any) => void): void,
        event(category: string, action: string): UniversalAnalytics$Client,
        event(category: string, action: string, callback?: (err: any) => void): void,
        event(category: string, action: string, label: string): UniversalAnalytics$Client,
        event(
            category: string,
            action: string,
            label: string,
            callback?: (err: any) => void): void,
        event(
            category: string,
            action: string,
            label: string,
            value: any): UniversalAnalytics$Client,
        event(
            category: string,
            action: string,
            label: string,
            value: any,
            callback?: (err: any) => void): void,
        event(
            category: string,
            action: string,
            label: string,
            value: any,
            params: Object,
            callback?: (err: any) => void): void,
        event(params: Object): UniversalAnalytics$Client,
        event(params: Object, callback: (err: any) => void): void,
        transaction(id: string): UniversalAnalytics$Client,
        transaction(id: string, callback: (err: any) => void): void,
        transaction(id: string, revenue: number): UniversalAnalytics$Client,
        transaction(id: string, revenue: number, callback: (err: any) => void): void,
        transaction(id: string, revenue: number, shipping: number): UniversalAnalytics$Client,
        transaction(
            id: string,
            revenue: number,
            shipping: number,
            callback: (err: any) => void): void,
        transaction(
            id: string,
            revenue: number,
            shipping: number,
            taxping: number): UniversalAnalytics$Client,
        transaction(
            id: string,
            revenue: number,
            shipping: number,
            taxping: number,
            callback: (err: any) => void): void,
        transaction(
            id: string,
            revenue: number,
            shipping: number,
            taxping: number,
            affiliation: string): UniversalAnalytics$Client,
        transaction(
            id: string,
            revenue: number,
            shipping: number,
            taxping: number,
            affiliation: string,
            callback: (err: any) => void): void,
        transaction(params: Object): UniversalAnalytics$Client,
        transaction(params: Object, callback: (err: any) => void): void,
        item(price: number): UniversalAnalytics$Client,
        item(price: number, callback: (err: any) => void): void,
        item(price: number, quantity: number): UniversalAnalytics$Client,
        item(price: number, quantity: number, callback: (err: any) => void): void,
        item(price: number, quantity: number, sku: number): UniversalAnalytics$Client,
        item(
            price: number,
            quantity: number,
            sku: number,
            callback: (err: any) => void): void,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string): UniversalAnalytics$Client,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string,
            callback: (err: any) => void): void,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string,
            variation: string): UniversalAnalytics$Client,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string,
            variation: string,
            callback: (err: any) => void): void,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string,
            variation: string,
            params: Object): UniversalAnalytics$Client,
        item(
            price: number,
            quantity: number,
            sku: number,
            name: string,
            variation: string,
            params: Object,
            callback: (err: any) => void): void,
        item(params: Object): UniversalAnalytics$Client,
        item(params: Object, callback: (err: any) => void): void,
        exception(description: string): UniversalAnalytics$Client,
        exception(description: string, callback: (err: any) => void): void,
        exception(description: string, fatal: boolean): UniversalAnalytics$Client,
        exception(description: string, fatal: boolean, callback: (err: any) => void): void,
        exception(params: Object): UniversalAnalytics$Client,
        exception(params: Object, callback: (err: any) => void): void,
        timing(category: string): UniversalAnalytics$Client,
        timing(category: string, callback: (err: any) => void): void,
        timing(category: string, variable: string): UniversalAnalytics$Client,
        timing(category: string, variable: string, callback: (err: any) => void): void,
        timing(category: string, variable: string, time: number): UniversalAnalytics$Client,
        timing(
            category: string,
            variable: string,
            time: number,
            callback: (err: any) => void): void,
        timing(
            category: string,
            variable: string,
            time: number,
            label: string): UniversalAnalytics$Client,
        timing(
            category: string,
            variable: string,
            time: number,
            label: string,
            callback: (err: any) => void): void,
        timing(params: Object): UniversalAnalytics$Client,
        timing(params: Object, callback: (err: any) => void): void,
        middleware(accountID: string, options?: any): any
}
declare module 'universal-analytics' {
    declare module.exports: typeof UniversalAnalytics
}