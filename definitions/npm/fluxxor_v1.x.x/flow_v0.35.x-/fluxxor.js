// @flow
/**
 * Flowtype definitions for fluxxor
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$Fluxxor: {
    createStore: typeof Fluxxor$createStore,
}
declare class Dispatcher {
    constructor(stores: any): this;
    addStore(name: string, store: Fluxxor$Store): void;
    dispatch(action: Function): void;
    doDispatchLoop(action: Function): void;
    waitForStores(store: Fluxxor$Store, stores: string[], fn: Function): void
}

declare class Flux mixins EventEmitter3.EventEmitter {
    constructor(stores: any, actions: any): this;
    addActions(actions: any): void;
    addAction(...args: Array<string | Function>): void;
    addAction(names: string[], action: Function): void;
    store(name: string): any;
    addStore(name: string, store: Fluxxor$Store): void;
    addStores(stores: any): void;
    stores: any;
    actions: any
}

declare type Fluxxor$Store = {
    bindActions(...args: Array<string | Function>): void,
    bindActions(args: Array<string | Function>): void,
    waitFor(stores: string[], fn: Function): void
}

declare interface Fluxxor$StoreSpec {
    initialize(instance?: any, options?: {}): void,
        actions?: any
}

declare interface Fluxxor$StoreClass {
    new(options?: {}): any
}

declare interface Fluxxor$Context {
    flux: Fluxxor$Flux
}

declare interface Fluxxor$FluxMixin {
    getFlux(): Fluxxor$Flux
}

declare interface Fluxxor$FluxChildMixin {
    getFlux(): Fluxxor$Flux
}

declare interface Fluxxor$StoreWatchMixin<StoreState>{
    getStateFromFlux(): StoreState
}

declare function Fluxxor$createStore(spec: Fluxxor$StoreSpec): Fluxxor$StoreClass

declare var version: string;
declare module 'fluxxor' {
    declare module.exports: typeof Fluxxor
}