/**
 * Flowtype definitions for jsdeferred
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Loop {
    begin?: number,
        end?: number,
        step?: number
}
declare interface ConnectOption {
    target: any,
        args?: any[],
        ok?: number,
        ng?: number
}
declare interface RetryOption {
    wait: number
}
declare interface DeferredizedFunction {
    (...arg: any[]): Deferred
}
declare interface DeferredizedFunctionWithNumber {
    (n: number): Deferred
}
declare interface FunctionWithNumber {
    (i: number, o?: any): any
}
declare interface ErrorCallback {
    (d: Deferred, ...args: any[]): any
}
declare class Deferred {
    methods: string[];
    isDeferred(obj: any): boolean;
    next(fun: Function): Deferred;
    chain(...args: any[]): Deferred;
    wait(n: number): Deferred;
    call(fun?: Function, ...args: any[]): Deferred;
    parallel(dl: any): Deferred;
    earlier(dl: any): Deferred;
    loop(n: number, fun: FunctionWithNumber): Deferred;
    loop(n: Loop, fun: FunctionWithNumber): Deferred;
    repeat(n: number, fun: FunctionWithNumber): Deferred;
    register(name: string, fun: DeferredizedFunction): void;
    connect(funo: any, options: string): DeferredizedFunction;
    connect(funo: Function, options?: ConnectOption): DeferredizedFunction;
    retry(
        retryCount: number,
        funcDeferred: DeferredizedFunctionWithNumber,
        options?: RetryOption): Deferred;
    define(obj?: any, list?: string[]): any;
    constructor(): this;
    next(fun: Function): Deferred;
    wait(n: number): Deferred;
    error(fun: ErrorCallback): Deferred;
    call(val?: any): Deferred;
    fail(err: any): Deferred;
    cancel(): Deferred;
    parallel(dl: any): Deferred;
    loop(n: number, fun: FunctionWithNumber): Deferred;
    loop(n: Loop, fun: FunctionWithNumber): Deferred
}
declare interface JQueryXHR {
    next(fun: Function): Deferred
}
declare function chain(...args: any[]): Deferreddeclare function wait(n: number): Deferreddeclare function call(fun?: Function, ...args: any[]): Deferreddeclare function parallel(dl: any): Deferreddeclare function earlier(dl: any): Deferreddeclare function loop(n: number, fun: FunctionWithNumber): Deferreddeclare function repeat(n: number, fun: FunctionWithNumber): Deferreddeclare function next(fun: Function): Deferred