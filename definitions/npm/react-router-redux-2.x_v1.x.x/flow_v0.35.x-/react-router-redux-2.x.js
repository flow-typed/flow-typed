// @flow
/**
 * Flowtype definitions for react-router-redux-2.x
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$ReactRouterRedux: {
    routeReducer: typeof ReactRouterRedux$routeReducer,
    syncHistory: typeof ReactRouterRedux$syncHistory,
}
declare var TRANSITION: string;

declare var UPDATE_LOCATION: string;

declare var push: ReactRouterRedux$PushAction;

declare var replace: ReactRouterRedux$ReplaceAction;

declare var go: ReactRouterRedux$GoAction;

declare var goBack: ReactRouterRedux$GoForwardAction;

declare var goForward: ReactRouterRedux$GoBackAction;

declare var routeActions: ReactRouterRedux$RouteActions;

declare type ReactRouterRedux$LocationDescriptor = H.LocationDescriptor;

declare type ReactRouterRedux$PushAction = (nextLocation: ReactRouterRedux$LocationDescriptor) => void;

declare type ReactRouterRedux$ReplaceAction = (nextLocation: ReactRouterRedux$LocationDescriptor) => void;

declare type ReactRouterRedux$GoAction = (n: number) => void;

declare type ReactRouterRedux$GoForwardAction = () => void;

declare type ReactRouterRedux$GoBackAction = () => void;

declare interface ReactRouterRedux$RouteActions {
    push: ReactRouterRedux$PushAction,
        replace: ReactRouterRedux$ReplaceAction,
        go: ReactRouterRedux$GoAction,
        goForward: ReactRouterRedux$GoForwardAction,
        goBack: ReactRouterRedux$GoBackAction
}

declare type ReactRouterRedux$HistoryMiddleware = {
    listenForReplays(store: R.Store<any>, selectLocationState?: Function): void,
    unsubscribe(): void
}

declare function ReactRouterRedux$routeReducer(state?: any, options?: any): R.Reducer<any >

    declare function ReactRouterRedux$syncHistory(history: H.History): ReactRouterRedux$HistoryMiddlewaredeclare module 'react-router-redux' {
    declare module.exports: typeof ReactRouterRedux
}