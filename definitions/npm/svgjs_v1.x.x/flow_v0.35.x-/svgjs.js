/**
 * Flowtype definitions for svgjs
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export type svgjs$LinkedHTMLElement = {
    instance: svgjs$Element
} & HTMLElement


declare export interface svgjs$Library {
    (selector: string): svgjs$Doc,
    (domElement: HTMLElement): svgjs$Doc,
    create(name: string): any,
        Element: svgjs$ElementStatic,
        supported: boolean,
        get(id: string): svgjs$Element,
        extend(parent: Object, obj: Object): void
}

declare export type svgjs$Doc = {
    svg(data: string): any,
    pattern(w: number, h: number, add: (e: svgjs$Element) => void): svgjs$Element,
    defs(): svgjs$Defs,
    clear(): void,
    mask(): svgjs$Mask
} & svgjs$Element


declare export interface svgjs$Filter {
    gaussianBlur(values: string): svgjs$Filter,
        colorMatrix(name: string, value: number): svgjs$Filter,
        colorMatrix(name: string, matrix: number[]): svgjs$Filter,
        componentTransfer(
            components: {
                rgb?: svgjs$FilterComponentTransfer,
                g?: svgjs$FilterComponentTransfer
            }): svgjs$Filter,
        offset(x: number, y: number): svgjs$Filter,
        blend(): svgjs$Filter, in (source: svgjs$FilterSource): svgjs$Filter,
        sourceAlpha: svgjs$FilterSource,
        source: svgjs$FilterSource
}

declare export interface svgjs$FilterSource {}

declare export interface svgjs$FilterComponentTransfer {
    type: string,
        tableValues?: string,
        slope?: number,
        intercept: number,
        amplitude: number,
        exponent: number,
        offset: number
}

declare export type svgjs$Element = {
    node: svgjs$LinkedHTMLElement,
    nested(): svgjs$Doc,
    animate(duration?: number, ease?: string, delay?: number): svgjs$Animation,
    animate(info: {
        ease?: string,
        duration?: number,
        delay?: number
    }): svgjs$Animation,
    attr(name: string): any,
    attr(obj: Object): svgjs$Element,
    attr(name: string, value: any, namespace?: string): svgjs$Element,
    viewbox(): svgjs$Viewbox,
    viewbox(x: number, y: number, w: number, h: number): svgjs$Element,
    viewbox(obj: svgjs$Viewbox): svgjs$Element,
    move(x: number, y: number, anchor?: boolean): svgjs$Element,
    x(x: number, anchor?: boolean): svgjs$Element,
    y(y: number, anchor?: boolean): svgjs$Element,
    x(): number,
    y(): number,
    center(x: number, y: number, anchor?: boolean): svgjs$Element,
    cx(x: number, anchor?: boolean): svgjs$Element,
    cy(y: number, anchor?: boolean): svgjs$Element,
    cx(): number,
    cy(): number,
    size(w: number, h: number, anchor?: boolean): svgjs$Element,
    show(): svgjs$Element,
    hide(): svgjs$Element,
    visible(): boolean,
    remove(): void,
    each(
        iterator: (i?: number, children?: svgjs$Element[]) => void,
        deep?: boolean): void,
    filter(adder: (filter: svgjs$Filter) => void): svgjs$Element,
    transform(t: svgjs$Transform): svgjs$Element,
    transform(): svgjs$Transform,
    style(name: string, value: string): svgjs$Element,
    style(obj: Object): svgjs$Element,
    style(name: string): string,
    style(): string,
    bbox(): svgjs$BBox,
    rbox(): svgjs$RBox,
    doc(): svgjs$Doc,
    data(name: string): any,
    data(name: string, value: any): svgjs$Element,
    remember(name: string, value: any): svgjs$Element,
    remember(obj: Object): svgjs$Element,
    remember(name: string): any,
    forget(...keys: string[]): svgjs$Element,
    fill(fill: {
        color?: string,
        opacity?: number
    }): svgjs$Element,
    fill(color: string): svgjs$Element,
    fill(pattern: svgjs$Element): svgjs$Element,
    stroke(data: {
        color?: string,
        opacity?: number,
        width?: number
    }): svgjs$Element,
    stroke(color: string): svgjs$Element,
    opacity(o: number): svgjs$Element,
    rotate(d: number, cx?: number, cy?: number): svgjs$Element,
    skew(x: number, y: number): svgjs$Element,
    scale(x: number, y: number): svgjs$Element,
    translate(x: number, y: number): svgjs$Element,
    maskWith(element: svgjs$Element): svgjs$Element,
    masker: svgjs$Element,
    unmask(): svgjs$Element,
    clipWith(element: svgjs$Element): svgjs$Element,
    clipper: svgjs$Element,
    unclip(): svgjs$Element,
    front(): svgjs$Element,
    back(): svgjs$Element,
    forward(): svgjs$Element,
    backward(): svgjs$Element,
    siblings(): svgjs$Element[],
    position(): number,
    next(): svgjs$Element,
    previous(): svgjs$Element,
    before(element: svgjs$Element): svgjs$Element,
    after(element: svgjs$Element): svgjs$Element,
    click(cb: Function): void,
    on(event: string, cb: Function): void,
    off(event: string, cb: Function): void
} & svgjs$Text & svgjs$Parent


declare export type svgjs$Mask = {
    add(element: svgjs$Element): svgjs$Mask
} & svgjs$Element


declare export interface svgjs$Text {
    content: string,
        font(
            font: {
                family?: string,
                size?: number,
                anchor?: string,
                leading?: string
            }): svgjs$Element,
        tspan(text: string): svgjs$Element,
        path(data: string): svgjs$Element,
        plot(data: string): svgjs$Element,
        track: svgjs$Element
}

declare export type svgjs$ElementStatic = {
    new(node: any): svgjs$Element
} & svgjs$Parent


declare export type svgjs$Defs = {} & svgjs$Element


declare export interface svgjs$Animation {
    stop(): svgjs$Animation,
        attr(name: string, value: any, namespace?: string): svgjs$Animation,
        attr(obj: Object): svgjs$Animation,
        attr(name: string): any,
        viewbox(x: number, y: number, w: number, h: number): svgjs$Animation,
        move(x: number, y: number, anchor?: boolean): svgjs$Animation,
        x(x: number, anchor?: boolean): svgjs$Animation,
        y(y: number, anchor?: boolean): svgjs$Animation,
        center(x: number, y: number, anchor?: boolean): svgjs$Animation,
        cx(x: number, anchor?: boolean): svgjs$Animation,
        cy(y: number, anchor?: boolean): svgjs$Animation,
        size(w: number, h: number, anchor?: boolean): svgjs$Animation,
        during(cb: (pos: number) => void): svgjs$Animation,
        to(value: number): svgjs$Animation,
        after(cb: () => void): svgjs$Animation
}

declare export interface svgjs$Parent {
    put(element: svgjs$Element, i?: number): svgjs$Element,
        add(element: svgjs$Element, i?: number): svgjs$Element,
        children(): svgjs$Element[],
        rect(w: number, h: number): svgjs$Element,
        ellipse(w: number, h: number): svgjs$Element,
        circle(diameter: number): svgjs$Element,
        line(x1: number, y1: number, x2: number, y2: number): svgjs$Element,
        polyline(data: string): svgjs$Element,
        polyline(points: number[][]): svgjs$Element,
        polygon(data: string): svgjs$Element,
        polygon(points: number[][]): svgjs$Element,
        path(data: string): svgjs$Element,
        image(url: string, w?: number, h?: number): svgjs$Element,
        text(text: string): svgjs$Element,
        text(adder: (element: svgjs$Element) => void): svgjs$Element,
        use(element: svgjs$Element): svgjs$Element,
        group(): svgjs$Element
}

declare export interface svgjs$BBox {
    height: number,
        width: number,
        y: number,
        x: number,
        cx: number,
        cy: number,
        merge(bbox: svgjs$BBox): svgjs$BBox
}

declare export type svgjs$RBox = {} & svgjs$BBox


declare export interface svgjs$Attributes {
    (name: string, value: any): void,
    (obj: Object): void,
    (name: string): any
}

declare export interface svgjs$Viewbox {
    x: number,
        y: number,
        width: number,
        height: number,
        zoom?: number
}

declare export interface svgjs$Transform {
    x?: number,
        y?: number,
        rotation?: number,
        cx?: number,
        cy?: number,
        scaleX?: number,
        scaleY?: number,
        skewX?: number,
        skewY?: number,
        matrix?: string,
        a?: number,
        b?: number,
        c?: number,
        d?: number,
        e?: number,
        f?: number
}
declare var SVG: svgjs$Library;
declare module 'svg.js' {
    declare module.exports: typeof SVG
}