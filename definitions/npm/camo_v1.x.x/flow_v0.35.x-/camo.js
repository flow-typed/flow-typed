/**
 * Flowtype definitions for camo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'camo' {
    declare type TypeOrArray<Type>= Type | Type[];

    /**
     * Supported type constructors for document properties
     */
    declare export type SchemaTypeConstructor = TypeOrArray<StringConstructor >
        |
        TypeOrArray<NumberConstructor >
        |
        TypeOrArray<BooleanConstructor >
        |
        TypeOrArray<DateConstructor >
        |
        TypeOrArray<ObjectConstructor >
        |
        TypeOrArray<ArrayConstructor>;

    /**
     * Supported types for document properties
     */
    declare export type SchemaType = TypeOrArray<string |
        number |
        boolean |
        Date |
        Object>;

    /**
     * Document property with options
     */
    declare export interface SchemaTypeOptions<Type>{

        /**
         * Type of data
         */
        type: SchemaTypeConstructor,

        /**
         * Default value
         */
        default?: Type,

        /**
         * Min value (only with Number)
         */
        min?: number,

        /**
         * Max value (only with Number)
         */
        max?: number,

        /**
         * Posible options
         */
        choices?: Type[],

        /**
         * RegEx to match value
         */
        match?: RegExp,

        /**
         * Validation function
         * @param value Value taken
         * @returns  true (validation ok) or false (validation wrong)
         */
        validate(value: Type): boolean,

        /**
         * Unique value (like ids)
         */
        unique?: boolean,

        /**
         * Required field
         */
        required?: boolean
    }

    /**
     * Document property type or options
     */
    declare export type SchemaTypeExtended = SchemaTypeConstructor | SchemaTypeOptions<SchemaType>;

    /**
     * Schema passed to Document.create()
     */
    declare interface DocumentSchema {
        [property: string]: SchemaType,

        /**
         * Document id
         */
        _id?: string
    }

    /**
     * Camo document instance
     */
    declare class DocumentInstance<Schema>{
        save(): Promise<Schema>;
        loadOne(): Promise<Schema>;
        loadMany(): Promise<Schema>;
        delete(): Promise<Schema>;
        deleteOne(): Promise<Schema>;
        deleteMany(): Promise<Schema>;
        loadOneAndDelete(): Promise<Schema>;
        count(): Promise<Schema>;
        preValidate(): Promise<Schema>;
        postValidate(): Promise<Schema>;
        preSave(): Promise<Schema>;
        postSave(): Promise<Schema>;
        preDelete(): Promise<Schema>;
        postDelete(): Promise<Schema >
    }

    /**
     * Camo document
     */
    declare export class Document {
        [property: string]: SchemaTypeExtended | string | DocumentInstance<any>;

        /**
         * Static method to define the collection name
         * @returns  The collection name
         */
        collectionName(): string;

        /**
         * Creates a camo document instance
         * @returns  A camo document instance
         */
        create<Schema>(schema: Schema): DocumentInstance<Schema >
    }

    /**
     * Connect function
     * @param uri Connection URI
     */
    declare export function connect(uri: string): Promise<any >
}