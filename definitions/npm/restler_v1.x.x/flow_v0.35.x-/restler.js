/**
 * Flowtype definitions for restler
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'restler' {


    /**
     * Interface for resler class.
     * @interface  
     */
    declare interface RestlerStatic {

        /**
         * Create a DELETE request.
         * @param  A url address.
         * @param  Options.
         * @return  Result.
         */
        del(url: string, options?: Object): RestlerResult,

            /**
             * Create a GET request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            get(url: string, options?: RestlerOptions): RestlerResult,

            /**
             * Create a HEAD request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            head(url: string, options?: RestlerOptions): RestlerResult,

            /**
             * Send json data via GET method.
             * @param  A url address.
             * @param  JSON body
             * @param  Options.
             * @return  Result.
             */
            json(
                url: string,
                data?: any,
                options?: RestlerOptions,
                method?: string): RestlerResult,

            /**
             * Create a PATCH request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            patch(url: string, options?: RestlerOptions): RestlerResult,

            /**
             * Send json  data  via PATCH method.
             * @param  A url address.
             * @param  JSON body
             * @param  Options.
             * @return  Result.
             */
            patchJson(url: string, data?: any, options?: RestlerOptions): RestlerResult,

            /**
             * Create a POST request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            post(url: string, options?: RestlerOptions): RestlerResult,

            /**
             * Send json data via POST method.
             * @param  A url address.
             * @param  JSON body
             * @param  Options.
             * @return  Result.
             */
            postJson(url: string, data?: any, options?: RestlerOptions): RestlerResult,

            /**
             * Create a PUT request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            put(url: string, options?: RestlerOptions): RestlerResult,

            /**
             * Send json data via PUT method.
             * @param  A url address.
             * @param  JSON body
             * @param  Options.
             * @return  Result.
             */
            putJson(url: string, data?: any, options?: RestlerOptions): RestlerResult,

            /**
             * Create a PUT request.
             * @param  A url address.
             * @param  Options.
             * @return  Result.
             */
            service(url: string, options?: RestlerOptions): RestlerResult
    }

    /**
     * Interface for the header.
     * @interface  
     */
    declare interface RestlerOptionsHeader {
        [headerName: string]: string
    }

    /**
     * Interface for restler options.
     * @interface  
     */
    declare interface RestlerOptions {

        /**
         * OAuth Bearer Token.
         * @type  
         */
        accessToken?: string,

            /**
             * HTTP Agent instance to use. If not defined globalAgent will be used. If false opts out of connection pooling with an Agent, defaults request to Connection: close.
             * @type  
             */
            agent?: any,

            /**
             * A http.Client instance if you want to reuse or implement some kind of connection pooling.
             * @type  
             */
            client?: any,

            /**
             * Data to be added to the body of the request.
             * @type  
             */
            data?: any,

            /**
             * Encoding of the response body
             * @type  
             */
            decoding?: string,

            /**
             * Encoding of the request body.
             * @type  
             */
            encoding?: string,

            /**
             * If set will recursively follow redirects.
             * @type  
             */
            followRedirects?: boolean,

            /**
             * A hash of HTTP headers to be sent.
             * @type  
             */
            headers?: RestlerOptionsHeader,

            /**
             * Request method
             * @type  
             */
            method?: string,

            /**
             * If set the data passed will be formatted as <code>multipart/form-encoded</code>.
             * @type  
             */
            multipart?: boolean,

            /**
             * A function that will be called on the returned data. Use any of predefined <code>restler.parsers</code>.
             * @type  
             */
            parser?: any,

            /**
             * Basic auth password.
             * @type  
             */
            password?: string,

            /**
             * Query string variables as a javascript object, will override the querystring in the URL.
             * @type  
             */
            query?: any,

            /**
             * If true, the server certificate is verified against the list of supplied CAs.
             * An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent.
             * @type  
             */
            rejectUnauthorized?: boolean,

            /**
             * Emit the timeout event when the response does not return within the said value (in ms).
             * @type  
             */
            timeout?: number,

            /**
             * Basic auth username.
             * @type  
             */
            username?: string,

            /**
             * Options for xml2js.
             * @type  
             */
            xml2js?: any
    }

    /**
     * Interface for restler result.
     * @interface  
     */
    declare interface RestlerResult {

        /**
         * Adds the listener function to the end of the listeners array for the event named eventName.
         * @param  The name of the event.
         * @param  The callback function
         */
        on(
            eventName: string,
            listener: (data?: any, response?: http.ServerResponse) => void): RestlerResult
    }
    declare var restler: RestlerStatic;
    declare module.exports: typeof restler
}