// @flow
/**
 * Flowtype definitions for canvas-gauges
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare export type CanvasGauges$FontStyle = "normal" | "italic" | "oblique";

declare export type CanvasGauges$FontWeight = "normal" |
    "bold" |
    "bolder" |
    "lighter" |
    "100" |
    "200" |
    "300" |
    "400" |
    "500" |
    "600" |
    "700" |
    "800" |
    "900";

declare export type CanvasGauges$RenderTarget = string | HTMLElement;

declare export interface CanvasGauges$AnimationRule {
    (percent: number): number
}

declare export interface CanvasGauges$Highlight {
    from: number,
        to: number,
        color: string
}

declare export type CanvasGauges$MajorTicks = string[] | number[];

declare export interface CanvasGauges$GenericOptions {
    renderTo: CanvasGauges$RenderTarget,
        width?: number,
        height?: number,
        minValue?: number,
        maxValue?: number,
        value?: number,
        units?: string | boolean,
        majorTicks?: CanvasGauges$MajorTicks,
        minorTicks?: number,
        strokeTicks?: boolean,
        animatedValue?: boolean,
        animateOnInit?: boolean,
        title?: string | boolean,
        borders?: boolean,
        valueInt?: number,
        valueDec?: number,
        majorTicksInt?: number,
        majorTicksDec?: number,
        animation?: boolean,
        animationDuration?: number,
        animationRule?: string | CanvasGauges$AnimationRule,
        colorPlate?: string,
        colorMajorTicks?: string,
        colorMinorTicks?: string,
        colorTitle?: string,
        colorUnits?: string,
        colorNumbers?: string,
        colorNeedle?: string,
        colorNeedleEnd?: string,
        colorValueText?: string,
        colorValueTextShadow?: string,
        colorBorderShadow?: string,
        colorBorderOuter?: string,
        colorBorderOuterEnd?: string,
        colorBorderMiddle?: string,
        colorBorderMiddleEnd?: string,
        colorBorderInner?: string,
        colorBorderInnerEnd?: string,
        colorValueBoxRect?: string,
        colorValueBoxRectEnd?: string,
        colorValueBoxBackground?: string,
        colorValueBoxShadow?: string,
        colorNeedleShadowUp?: string,
        colorNeedleShadowDown?: string,
        needle?: boolean,
        needleShadow?: boolean,
        needleType?: string,
        needleStart?: number,
        needleEnd?: number,
        needleWidth?: number,
        borderOuterWidth?: number,
        borderMiddleWidth?: number,
        borderInnerWidth?: number,
        borderShadowWidth?: number,
        valueBox?: boolean,
        valueBoxWidth?: number,
        valueBoxStroke?: number,
        valueText?: string,
        valueTextShadow?: boolean,
        valueBoxBorderRadius?: number,
        highlights?: CanvasGauges$Highlight[],
        highlightsWidth?: number,
        fontNumbers?: string,
        fontTitle?: string,
        fontUnits?: string,
        fontValue?: string,
        fontTitleSize?: number,
        fontValueSize?: number,
        fontUnitsSize?: number,
        fontNumbersSize?: number,
        fontTitleStyle?: CanvasGauges$FontStyle,
        fontValueStyle?: CanvasGauges$FontStyle,
        fontUnitsStyle?: CanvasGauges$FontStyle,
        fontNumbersStyle?: CanvasGauges$FontStyle,
        fontTitleWeight?: CanvasGauges$FontWeight,
        fontValueWeight?: CanvasGauges$FontWeight,
        fontUnitsWeight?: CanvasGauges$FontWeight,
        fontNumbersWeight?: CanvasGauges$FontWeight
}

declare export type CanvasGauges$RadialGaugeOptions = {
    ticksAngle?: number,
    startAngle?: number,
    colorNeedleCircleOuter?: string,
    colorNeedleCircleOuterEnd?: string,
    colorNeedleCircleInner?: string,
    colorNeedleCircleInnerEnd?: string,
    needleCircleSize?: number,
    needleCircleInner?: boolean,
    needleCircleOuter?: boolean,
    animationTarget?: string
} & CanvasGauges$GenericOptions


declare export type CanvasGauges$LinearGaugeOptions = {
    borderRadius?: number,
    barBeginCircle?: number,
    barWidth?: number,
    barStrokeWidth?: number,
    barProgress?: boolean,
    colorBar?: string,
    colorBarEnd?: string,
    colorBarStroke?: string,
    colorBarProgress?: string,
    colorBarProgressEnd?: string,
    tickSide?: string,
    needleSide?: string,
    numberSide?: string,
    ticksWidth?: number,
    ticksWidthMinor?: number,
    ticksPadding?: number,
    barLength?: number
} & CanvasGauges$GenericOptions


declare export interface CanvasGauges$DrawEventCallback {
    (percent: number): any
}

declare export interface CanvasGauges$EndEventCallback {
    (): any
}

declare export interface CanvasGauges$rules {
    linear: CanvasGauges$AnimationRule,
        quad: CanvasGauges$AnimationRule,
        dequad: CanvasGauges$AnimationRule,
        quint: CanvasGauges$AnimationRule,
        dequint: CanvasGauges$AnimationRule,
        cycle: CanvasGauges$AnimationRule,
        decycle: CanvasGauges$AnimationRule,
        bounce: CanvasGauges$AnimationRule,
        debounce: CanvasGauges$AnimationRule,
        elastic: CanvasGauges$AnimationRule,
        delastic: CanvasGauges$AnimationRule
}

declare export class Animation {
    duration: number;
    rule: string | CanvasGauges$AnimationRule;
    draw: CanvasGauges$DrawEventCallback;
    end: CanvasGauges$EndEventCallback;
    rules: CanvasGauges$rules;
    constructor(rule?: string | CanvasGauges$AnimationRule, duration?: number, draw?: CanvasGauges$DrawEventCallback, end?: CanvasGauges$EndEventCallback): this;
    animate(
        draw?: CanvasGauges$DrawEventCallback,
        end?: CanvasGauges$EndEventCallback): any;
    destroy(): any
}

declare export class SmartCanvas {
    element: HTMLCanvasElement;
    elementClone: HTMLCanvasElement;
    context: CanvasRenderingContext2D;
    contextClone: CanvasRenderingContext2D;
    drawWidth: number;
    drawHeight: number;
    drawX: number;
    drawY: number;
    minSide: number;
    width: number;
    height: number;
    constructor(element: HTMLCanvasElement, width?: number, height?: number): this;
    init(): any;
    onRedraw(): any;
    destroy(): any;
    commit(): CanvasGauges$SmartCanvas;
    redraw(): CanvasGauges$SmartCanvas;
    pixelRatio: number;
    redraw(): any;
    collection: Array<CanvasGauges$SmartCanvas >
}

declare export class DomObserver {
    Type: CanvasGauges$BaseGauge;
    mutationsObserved: boolean;
    isObservable: boolean;
    options: CanvasGauges$GenericOptions;
    element: string;
    type: string;
    constructor(options: CanvasGauges$GenericOptions, element: string, type: string): this;
    isValidNode(node: Node | HTMLElement): boolean;
    traverse(): any;
    observe(records: MutationRecord[]): any;
    process(node: Node | HTMLElement): CanvasGauges$BaseGauge;
    parse(value: any): any;
    toDashed(camelCase: string): string;
    toAttributeName(str: string): string;
    domReady(handler: Function): any
}

declare export class BaseGauge {
    type: CanvasGauges$BaseGauge;
    options: CanvasGauges$GenericOptions;
    canvas: CanvasGauges$SmartCanvas;
    animation: CanvasGauges$Animation;
    value: number;
    constructor(options: CanvasGauges$GenericOptions): this;
    update(options: CanvasGauges$GenericOptions): CanvasGauges$BaseGauge;
    destroy(): any;
    draw(): CanvasGauges$BaseGauge;
    initialize(type: string, options: CanvasGauges$GenericOptions): any
}

declare export class RadialGauge mixins BaseGauge {
    type: CanvasGauges$RadialGauge;
    options: CanvasGauges$RadialGaugeOptions;
    constructor(options: CanvasGauges$RadialGaugeOptions): this;
    draw(): CanvasGauges$RadialGauge
}

declare export class LinearGauge mixins BaseGauge {
    type: CanvasGauges$LinearGauge;
    options: CanvasGauges$LinearGaugeOptions;
    constructor(options: CanvasGauges$LinearGaugeOptions): this;
    draw(): CanvasGauges$LinearGauge
}

declare export type CanvasGauges$Collection = {
    get: (id: number | string) => CanvasGauges$BaseGauge
} & Array
declare module 'canvas-gauges' {
    declare module.exports: typeof CanvasGauges
}
declare interface Document {
    gauges: CanvasGauges$Collection
}
declare interface Window {
    BaseGauge: CanvasGauges$BaseGauge,
        RadialGauge: CanvasGauges$RadialGauge,
        LinearGauge: CanvasGauges$LinearGauge
}