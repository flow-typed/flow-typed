/**
 * Flowtype definitions for js-data
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JSData$JSDataPromise<R>{
    then<U>(
        onFulfilled?: (value: R) => U | JSData$JSDataPromise<U>,
        onRejected?: (error: any) => U | JSData$JSDataPromise<U>): JSData$JSDataPromise<U>,
    catch<U>(
        onRejected?: (error: any) => U | JSData$JSDataPromise<U>): JSData$JSDataPromise<U>,
    finally(finallyCb?: () => any): JSData$JSDataPromise<R >
}

declare type JSData$DSConfiguration = {
    actions?: Object,
    allowSimpleWhere?: boolean,
    basePath?: string,
    bypassCache?: boolean,
    cacheResponse?: boolean,
    clearEmptyQueries?: boolean,
    debug?: boolean,
    defaultAdapter?: string,
    defaultFilter?: (
        collection: Array<any>,
        resourceName: string,
        params: JSData$DSFilterArg,
        options: JSData$DSConfiguration) => Array<any>,
    defaultValues?: Object,
    eagerEject?: boolean,
    endpoint?: string,
    error?: boolean | ((message?: any, ...optionalParams: any[]) => void),
    fallbackAdapters?: Array<string>,
    findAllFallbackAdapters?: Array<string>,
    findAllStrategy?: string,
    findFallbackAdapters?: Array<string>,
    findStrategy?: string,
    findStrictCache?: boolean,
    idAttribute?: string,
    ignoredChanges?: Array<RegExp | string>,
    ignoreMissing?: boolean,
    instanceEvents?: boolean,
    keepChangeHistory?: boolean,
    linkRelations?: boolean,
    log?: boolean | ((message?: any, ...optionalParams: any[]) => void),
    maxAge?: number,
    notify?: boolean,
    omit?: Array<string | RegExp>,
    onConflict?: string,
    reapAction?: string,
    reapInterval?: number,
    relationsEnumerable?: boolean,
    resetHistoryOnInject?: boolean,
    returnMeta?: boolean,
    scopes?: Object,
    strategy?: string,
    upsert?: boolean,
    useClass?: boolean | any,
    useFilter?: boolean,
    watchChanges?: boolean
} & JSData$IDSResourceLifecycleEventHandlers


declare type JSData$DSResourceDefinitionConfiguration = {
    computed?: any,
    meta?: any,
    methods?: any,
    name: string,
    relations?: {
        hasMany?: Object,
        hasOne?: Object,
        belongsTo?: Object
    }
} & JSData$DSConfiguration


declare interface JSData$DSFilterParams {
    where?: Object,
        limit?: number,
        skip?: number,
        offset?: number,
        orderBy?: string | Array<string>| Array<Array<string >> ,
        sort?: string | Array<string>| Array<Array<string >>
}

declare type JSData$DSFilterArg = JSData$DSFilterParams | Object;

declare type JSData$DSAdapterOperationConfiguration = {
    adapter?: string,
    params?: {
        [paramName: string]: string | number | boolean
    }
} & JSData$DSConfiguration


declare type JSData$DSSaveConfiguration = {
    changesOnly?: boolean
} & JSData$DSAdapterOperationConfiguration


declare type JSData$DSCollection<T>= {
    fetch(
        params?: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    params: JSData$DSFilterArg,
    resourceName: string
} & Array


declare interface JSData$DSEvents {
    on(name: string, handler: (...args: any[]) => void): void,
        off(name: string, handler: (...args: any[]) => void): void,
        emit(name: string, ...args: any[]): void
}

declare type JSData$DS = {
    new(config?: JSData$DSConfiguration): JSData$DS,
    errors: JSData$DSErrors,
    definitions: any,
    adapters: any,
    defaults: JSData$DSConfiguration,
    changeHistory(resourceName: string, id: string | number): Array<Object>,
    changes(
        resourceName: string,
        id: string | number,
        options?: {
            ignoredChanges: Array<string | RegExp >
        }): Object,
    clear<T>(): Array<T & JSData$DSInstanceShorthands<T >> ,
    compute<T>(
        resourceName: string,
        idOrInstance: number | string | T): T & JSData$DSInstanceShorthands<T>,
    create<T>(
        resourceName: string,
        attrs: Object,
        options?: JSData$DSConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    createCollection<T>(
        resourceName: string,
        array?: Array<T>,
        params?: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): JSData$DSCollection<T & JSData$DSInstanceShorthands<T >> ,
    createInstance<T>(
        resourceName: string,
        attrs?: Object,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    destroy(
        resourceName: string,
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    destroyAll(
        resourceName: string,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    digest(): void,
    eject<T>(
        resourceName: string,
        id: string | number,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    ejectAll<T>(
        resourceName: string,
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    filter<T>(
        resourceName: string,
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    find<T>(
        resourceName: string,
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    findAll<T>(
        resourceName: string,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    get<T>(
        resourceName: string,
        id: string | number): T & JSData$DSInstanceShorthands<T>,
    getAll<T>(
        resourceName: string,
        ids?: Array<string | number>): Array<T & JSData$DSInstanceShorthands<T >> ,
    hasChanges(resourceName: string, id: string | number): boolean,
    inject<TInject,
    U>(
        resourceName: string,
        attrs: TInject,
        options?: JSData$DSConfiguration): U & JSData$DSInstanceShorthands<U>,
    inject<TInject,
    U>(
        resourceName: string,
        items: Array<TInject>,
        options?: JSData$DSConfiguration): Array<U & JSData$DSInstanceShorthands<U >> ,
    is(resourceName: string, object: Object): boolean,
    lastModified(resourceName: string, id?: string | number): number,
    lastSaved(resourceName: string, id?: string | number): number,
    loadRelations<T>(
        resourceName: string,
        idOrInstance: string | number,
        relations: string | Array<string>,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    previous<T>(
        resourceName: string,
        id: string | number): T & JSData$DSInstanceShorthands<T>,
    reap(resourceName: string): JSData$JSDataPromise<void>,
    refresh<T>(
        resourceName: string,
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    refreshAll<T>(
        resourceName: string,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    revert<T>(
        resourceName: string,
        id: string | number): T & JSData$DSInstanceShorthands<T>,
    save<T>(
        resourceName: string,
        id: string | number,
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    update<T>(
        resourceName: string,
        id: string | number,
        attrs: Object,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    updateAll<T>(
        resourceName: string,
        attrs: Object,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    defineResource<T>(
        resourceNameOrDefinition: string | JSData$DSResourceDefinitionConfiguration): JSData$DSResourceDefinition<T>,
    defineResource<T,
    TActions>(
        resourceNameOrDefinition: string | JSData$DSResourceDefinitionConfiguration): JSData$DSResourceDefinition<T>& TActions,
    registerAdapter(
        adapterId: string,
        adapter: JSData$IDSAdapter,
        options?: {
            default: boolean
        }): void
} & JSData$DSEvents


declare type JSData$DSResourceDefinition<T>= {
    changeHistory(id: string | number): Array<Object>,
    changes(
        id: string | number,
        options?: {
            ignoredChanges: Array<string | RegExp >
        }): Object,
    clear(): Array<T & JSData$DSInstanceShorthands<T >> ,
    compute(idOrInstance: number | string | T): T & JSData$DSInstanceShorthands<T>,
    create(
        attrs: Object,
        options?: JSData$DSConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    createCollection(
        array?: Array<T>,
        params?: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): JSData$DSCollection<T & JSData$DSInstanceShorthands<T >> ,
    createInstance(
        attrs?: Object,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    destroy(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    destroyAll(
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    digest(): void,
    eject(
        id: string | number,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    ejectAll(
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    filter(
        params: JSData$DSFilterArg,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    find(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    findAll(
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    get(id: string | number): T & JSData$DSInstanceShorthands<T>,
    getAll(ids?: Array<string | number>): Array<T & JSData$DSInstanceShorthands<T >> ,
    hasChanges(id: string | number): boolean,
    inject<TInject>(
        attrs: TInject,
        options?: JSData$DSConfiguration): T & JSData$DSInstanceShorthands<T>,
    inject<TInject>(
        items: Array<TInject>,
        options?: JSData$DSConfiguration): Array<T & JSData$DSInstanceShorthands<T >> ,
    is(object: Object): boolean,
    lastModified(id?: string | number): number,
    lastSaved(id?: string | number): number,
    loadRelations(
        idOrInstance: string | number,
        relations: string | Array<string>,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    previous(id: string | number): T & JSData$DSInstanceShorthands<T>,
    reap(): JSData$JSDataPromise<void>,
    refresh(
        id: string | number,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    refreshAll(
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>> ,
    revert(id: string | number): T & JSData$DSInstanceShorthands<T>,
    save(
        id: string | number,
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    update(
        id: string | number,
        attrs: Object,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    updateAll(
        attrs: Object,
        params?: JSData$DSFilterArg,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<Array<T & JSData$DSInstanceShorthands<T >>>
} & JSData$DSResourceDefinitionConfiguration & JSData$DSEvents


declare export type JSData$DSInstanceShorthands<T>= {
    DSCompute(): void,
    DSRefresh(
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSSave(
        options?: JSData$DSSaveConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSUpdate(
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSDestroy(options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<void>,
    DSCreate(
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSLoadRelations(
        relations: string | Array<string>,
        options?: JSData$DSAdapterOperationConfiguration): JSData$JSDataPromise<T & JSData$DSInstanceShorthands<T >> ,
    DSChangeHistory(): Array<Object>,
    DSChanges(): Object,
    DSHasChanges(): boolean,
    DSLastModified(): number,
    DSLastSaved(): number,
    DSPrevious(): T & JSData$DSInstanceShorthands<T>,
    DSRevert(): T & JSData$DSInstanceShorthands<T >
} & JSData$DSEvents


declare type JSData$DSSyncLifecycleHookHandler = (resource: JSData$DSResourceDefinition<any>, data: any) => void;

declare type JSData$DSAsyncLifecycleHookHandler = (
    resource: JSData$DSResourceDefinition<any>,
    data: any) => JSData$JSDataPromise<any>;

declare type JSData$DSAsyncLifecycleHookHandlerCb = (
    resource: JSData$DSResourceDefinition<any>,
    data: any,
    cb: (err: Error, data: any) => void) => void;

declare interface JSData$IDSResourceLifecycleValidateEventHandlers {
    beforeValidate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb,
        validate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb,
        afterValidate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleCreateEventHandlers {
    beforeCreate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb,
        afterCreate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleUpdateEventHandlers {
    beforeUpdate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb,
        afterUpdate?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleDestroyEventHandlers {
    beforeDestroy?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb,
        afterDestroy?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleCreateInstanceEventHandlers {
    beforeCreateInstance?: JSData$DSSyncLifecycleHookHandler,
        afterCreateInstance?: JSData$DSSyncLifecycleHookHandler
}

declare interface JSData$IDSResourceLifecycleInjectEventHandlers {
    beforeInject?: JSData$DSSyncLifecycleHookHandler,
        afterInject?: JSData$DSSyncLifecycleHookHandler
}

declare interface JSData$IDSResourceLifecycleEjectEventHandlers {
    beforeEject?: JSData$DSSyncLifecycleHookHandler,
        afterEject?: JSData$DSSyncLifecycleHookHandler
}

declare interface JSData$IDSResourceLifecycleReapEventHandlers {
    beforeReap?: JSData$DSSyncLifecycleHookHandler,
        afterReap?: JSData$DSSyncLifecycleHookHandler
}

declare interface JSData$IDSResourceLifecycleFindEventHandlers {
    afterFind?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleFindAllEventHandlers {
    afterFindAll?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleLoadRelationsEventHandlers {
    afterLoadRelations?: JSData$DSAsyncLifecycleHookHandler | JSData$DSAsyncLifecycleHookHandlerCb
}

declare interface JSData$IDSResourceLifecycleCreateCollectionEventHandlers {
    beforeCreateCollection?: JSData$DSSyncLifecycleHookHandler,
        afterCreateCollection?: JSData$DSSyncLifecycleHookHandler
}

declare type JSData$IDSResourceLifecycleEventHandlers = {} & JSData$IDSResourceLifecycleCreateEventHandlers & JSData$IDSResourceLifecycleCreateInstanceEventHandlers & JSData$IDSResourceLifecycleValidateEventHandlers & JSData$IDSResourceLifecycleUpdateEventHandlers & JSData$IDSResourceLifecycleDestroyEventHandlers & JSData$IDSResourceLifecycleInjectEventHandlers & JSData$IDSResourceLifecycleEjectEventHandlers & JSData$IDSResourceLifecycleReapEventHandlers & JSData$IDSResourceLifecycleFindEventHandlers & JSData$IDSResourceLifecycleFindAllEventHandlers & JSData$IDSResourceLifecycleLoadRelationsEventHandlers & JSData$IDSResourceLifecycleCreateCollectionEventHandlers


declare interface JSData$DSErrors {
    IllegalArgumentError: JSData$DSError,
        IA: JSData$DSError,
        RuntimeError: JSData$DSError,
        R: JSData$DSError,
        NonexistentResourceError: JSData$DSError,
        NER: JSData$DSError
}

declare type JSData$DSError = {
    new(message?: string): JSData$DSError,
    message: string,
    type: string
} & Error


declare interface JSData$IDSAdapter {
    create(
            config: JSData$DSResourceDefinition<any>,
            attrs: Object,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        destroy(
            config: JSData$DSResourceDefinition<any>,
            id: string | number,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<void>,
        destroyAll(
            config: JSData$DSResourceDefinition<any>,
            params: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<void>,
        find(
            config: JSData$DSResourceDefinition<any>,
            id: string | number,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        findAll(
            config: JSData$DSResourceDefinition<any>,
            params?: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        update(
            config: JSData$DSResourceDefinition<any>,
            id: string | number,
            attrs: Object,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any>,
        updateAll(
            config: JSData$DSResourceDefinition<any>,
            attrs: Object,
            params?: JSData$DSFilterArg,
            options?: JSData$DSConfiguration): JSData$JSDataPromise<any >
}

declare interface JSData$DSActionConfig {
    adapter?: string,
        endpoint?: string,
        pathname?: string,
        method?: string
}

declare interface JSData$DSActionFn {
    (id: string | number, options?: Object): JSData$JSDataPromise<T >
}
declare var JSData: {
    DS: JSData$DS,
    DSErrors: JSData$DSErrors,
    DSUtils: any
};
declare module 'js-data' {
    declare module.exports: typeof JSData
}