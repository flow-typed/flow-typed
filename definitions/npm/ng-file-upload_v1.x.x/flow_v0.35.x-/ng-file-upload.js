// @flow
/**
 * Flowtype definitions for ng-file-upload
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'ng-file-upload' {
    declare     var angularFileUploadDefaultExport: string;
    declare module.exports: typeof angularFileUploadDefaultExport
}
declare module 'angularFileUpload' {
    declare interface ImageDimensions {
        height: number,
            width: number
    }
    declare interface FileUploadOptions {

        /**
         * Standard HTML accept attr, browser specific select popup window
         * @type  
         */
        ngfAccept?: string,

            /**
             * Default true, allow dropping files only for Chrome webkit browser
             * @type  
             */
            ngfAllowDir?: boolean,

            /**
             * Default false, enable firefox image paste by making element contenteditable
             * @type  
             */
            ngfEnableFirefoxPaste?: boolean,

            /**
             * Default false, hides element if file drag&drop is not
             * @type  
             */
            ngfHideOnDropNotAvailable?: boolean,

            /**
             * Validate error name: minDuration
             * @type  
             */
            ngfMinDuration: number | string,
            ngfMinSize?: number | string,

            /**
             * Validate error name: minRatio
             * @type  
             */
            ngfMinRatio?: number | string,

            /**
             * Validate error name: maxDuration
             * @type  
             */
            ngfMaxDuration?: number | string,

            /**
             * Maximum number of files allowed to be selected or dropped, validate error name: maxFiles
             * @type  
             */
            ngfMaxFiles?: number,

            /**
             * Validate error name: maxSize
             * @type  
             */
            ngfMaxSize?: number | string,

            /**
             * Validate error name: maxTotalSize
             * @type  
             */
            ngfMaxTotalSize?: number | string,

            /**
             * Allows selecting multiple files
             * @type  
             */
            ngfMultiple?: boolean,

            /**
             * List of comma separated valid aspect ratio of images in float or 2:3 format
             * @type  
             */
            ngfRatio?: string,

            /**
             * Default false, whether to propagate drag/drop events.
             * @type  
             */
            ngfStopPropagation?: boolean,

            /**
             * Default false, if true file.$error will be set if the dimension or duration
             * values for validations cannot be calculated for example image load error or unsupported video by the browser.
            By default it would assume the file is valid if the duration or dimension cannot be calculated by the browser.
             * @type  
            */
            ngfValidateForce?: boolean
    }
    declare interface ResizeIfFunction {
        (width: number, height: number): boolean
    }
    declare interface FileResizeOptions {
        centerCrop?: boolean,
            height?: number,
            ratio?: number,
            resizeIf?: ResizeIfFunction,
            restoreExif?: boolean,
            quality?: number,
            width?: number
    }
    declare interface IUploadService {

        /**
         * Convert a single file or array of files to a single or array of
         * base64 data url representation of the file(s).
        Could be used to send file in base64 format inside json to the databases
         * @return  
        */
        base64DataUrl(files: File | Array<File>): angular$IPromise<Array<string>| string>,

            /**
             * Convert the file to blob url object or base64 data url based on boolean disallowObjectUrl value
             * @param  
             * @param  * 
             * @return  <string>}
             */
            dataUrl(file: File, disallowObjectUrl?: boolean): angular$IPromise<Blob | string>,

            /**
             * Alternative way of uploading, send the file binary with the file's content-type.
             * Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed.
            This is equivalent to angular $http() but allow you to listen to the progress event for HTML5 browsers.
             * @param  
             * @return  <ImageDimensions>}
            */
            http<T>(config: IRequestConfig): IUploadPromise<T>,

            /**
             * Get image file dimensions
             * @param  
             * @return  <ImageDimensions>}
             */
            imageDimensions(file: File): angular$IPromise<ImageDimensions>,

            /**
             * Returns boolean showing if image resize is supported by this browser
             * @return  
             */
            isResizeSupported(): boolean,

            /**
             * Returns boolean showing if resumable upload is supported by this browser
             * @return  
             */
            isResumeSupported(): boolean,

            /**
             * Returns true if there is an upload in progress. Can be used to prompt user before closing browser tab
             * @return  
             */
            isUploadInProgress(): boolean,

            /**
             * Converts the value to json to send data as json string. Same as angular.toJson(obj)
             * @param  
             * @return  
             */
            json(obj: Object): string,

            /**
             * Converts the object to a Blob object with application/json content type
             * for jsob byte streaming support
             * @param  
             * @return  
             */
            jsonBlob(obj: Object): Blob,

            /**
             * Returns a file which will be uploaded with the newName instead of original file name
             * @param  
             * @param  
             * @return  
             */
            rename(file: File, newName: string): Blob,

            /**
             * Resizes an image. Returns a promise
             * @param  
             * @param  * 
             * @param  * 
             * @param  * 
             * @param  * 
             * @param  * 
             * @param  * 
             * @return  <string>}
             */
            resize(file: File, options: FileResizeOptions): angular$IPromise<File>,

            /**
             * Set the default values for ngf-select and ngf-drop directives
             * @param  
             */
            setDefaults(defaultFileUploadOptions: FileUploadOptions): void,

            /**
             * Upload a file. Returns a Promise,
             * @param  
             * @return  
             */
            upload<T>(config: IFileUploadConfigFile): IUploadPromise<T >
    }
    declare type IUploadPromise<T>= {

        /**
         * Cancel/abort the upload in progress.
         * @return  
         */
        abort(): IUploadPromise<T>,
        progress(callback: IHttpPromiseCallback<T>): IUploadPromise<T>,

        /**
         * Access or attach event listeners to the underlying XMLHttpRequest
         * @return  
         */
        xhr(callback: IHttpPromiseCallback<T>): IUploadPromise<T >
    } & IHttpPromise

    declare type IFileUploadConfigFile = {

        /**
         * Specify the file and optional data to be sent to the server.
         * Each field including nested objects will be sent as a form data multipart.
        Samples: {pic: file, username: username}
        {files: files, otherInfo: {id: id, person: person,...}} multiple files (html5)
        {profiles: {[{pic: file1, username: username1}, {pic: file2, username: username2}]} nested array multiple files (html5)
        {file: file, info: Upload.json({id: id, name: name, ...})} send fields as json string
        {file: file, info: Upload.jsonBlob({id: id, name: name, ...})} send fields as json blob, 'application/json' content_type
        {picFile: Upload.rename(file, 'profile.jpg'), title: title} send file with picFile key and profile.jpg file name
         * @type  
        */
        data: any,

        /**
         * upload.php script, node.js route, or servlet url
         * @type  
         */
        url: string,

        /**
         * This is to accommodate server implementations expecting nested data object keys in .key or [key] format.
         * Example: data: {rec: {name: 'N', pic: file}} sent as: rec[name] -> N, rec[pic] -> file
        data: {rec: {name: 'N', pic: file}, objectKey: '.k'} sent as: rec.name -> N, rec.pic -> file
         * @type  
        */
        objectKey?: string,

        /**
         * This is to accommodate server implementations expecting array data object keys in '[i]' or '[]' or
         * ''(multiple entries with same key) format.
        Example: data: {rec: [file[0], file[1], ...]} sent as: rec[0] -> file[0], rec[1] -> file[1],...
        data: {rec: {rec: [f[0], f[1], ...], arrayKey: '[]'} sent as: rec[] -> f[0], rec[] -> f[1],...
         * @type  
        */
        arrayKey?: string,

        /**
         * Uploaded file size so far on the server
         * @type  
         */
        resumeSizeUrl?: string,

        /**
         * Reads the uploaded file size from resumeSizeUrl GET response
         * @type  
         */
        resumeSizeResponseReader?: Function,

        /**
         * Function that returns a prommise which will be resolved to the upload file size on the server.
         * @type  
         */
        resumeSize?: Function,

        /**
         * Upload in chunks of specified size
         * @type  
         */
        resumeChunkSize?: number | string,

        /**
         * Default false, experimental as hotfix for potential library conflicts with other plugins
         * @type  
         */
        disableProgress?: boolean
    } & IRequestConfig

    declare type IFileProgressEvent = {
        config: IFileUploadConfigFile
    } & ProgressEvent

}