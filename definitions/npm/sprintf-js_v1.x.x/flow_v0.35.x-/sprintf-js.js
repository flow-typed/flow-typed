// @flow
/**
 * Flowtype definitions for sprintf-js
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$sprintf_js: {
        sprintf: typeof sprintf_js$sprintf,
        vsprintf: typeof sprintf_js$vsprintf,
    }
    /**
     * sprintf.js is a complete open source JavaScript sprintf implementation for the browser and node.js.
     * Itsprototype is simple:
    string sprintf(string format , [mixed arg1 [, mixed arg2 [ ,...]]])

    ==Placeholders==
    Theplaceholders in the format string are marked by % and are followed by one or more of these elements.  see "fmt" arg for more docs on placeholders.

    ==Argument swapping==
    Youcan also swap the arguments. That is, the order of the placeholders doesn't have to match the order of the arguments. You can do that by simply indicating in the format string which arguments the placeholders refer to:
    sprintf("%2$s %3$s a %1$s", "cracker", "Polly", "wants")
    And, of course, you can repeat the placeholders without having to increase the number of arguments.

    ==Named arguments==
    Format strings may contain replacement fields rather than positional placeholders. Instead of referring to a certain argument, you can now refer to a certain key within an object. Replacement fields are surrounded by rounded parentheses - ( and ) - and begin with a keyword that refers to a key:
    var user = {name: "Dolly"}
    sprintf("Hello %(name)s", user) // Hello Dolly
    Keywords in replacement fields can be optionally followed by any number of keywords or indexes:
    var users = [{name: "Dolly"},{name: "Molly"},{name: "Polly"}]
    sprintf("Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s", {users: users}) // Hello Dolly, Molly and Polly
    Note: mixing positional and named placeholders is not (yet) supported

    ==Computed values==
    Youcan pass in a function as a dynamic value and it will be invoked (with no arguments) in order to compute the value on-the-fly.
    sprintf("Current timestamp: %d", Date.now) // Current timestamp: 1398005382890
    sprintf("Current date and time: %s", function() { return new Date().toString() })
    */
declare export function sprintf_js$sprintf(fmt: string, ...args: any[]): string


/**
 * vsprintf is the same as sprintf except that it accepts an array of arguments, rather than a variable number of arguments:
 * 
vsprintf("The first 4 letters of the english alphabet are: %s, %s, %s and %s", ["a", "b", "c", "d"])
*/
declare export function sprintf_js$vsprintf(fmt: string, args: any[]): stringdeclare module 'sprintf-js' {
    declare module.exports: typeof sprintf_js
}
declare var sprintf: typeof undefined;
declare var vsprintf: typeof undefined;