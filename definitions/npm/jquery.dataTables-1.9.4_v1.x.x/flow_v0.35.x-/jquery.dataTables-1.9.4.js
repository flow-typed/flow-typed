// @flow
/**
 * Flowtype definitions for jquery.dataTables-1.9.4
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface JQuery {
    dataTable(param?: DataTables$Options): DataTables$DataTable
}
declare export interface DataTables$DataTable {
    $(selector: string, opts?: DataTables$RowParams): JQuery,
        $(selector: Node[], opts?: DataTables$RowParams): JQuery,
        $(selector: JQuery, opts?: DataTables$RowParams): JQuery,
        _(selector: string, opts?: DataTables$RowParams): any[],
        _(selector: Node[], opts?: DataTables$RowParams): any[],
        _(selector: JQuery, opts?: DataTables$RowParams): any[],
        fnAddData(data: any, redraw?: boolean): number[],
        fnAdjustColumnSizing(redraw?: boolean): void,
        fnClearTable(redraw?: boolean): void,
        fnClose(node: Node): number,
        fnDeleteRow(index: number, callback?: () => void, redraw?: boolean): any[],
        fnDeleteRow(tr: Node, callback?: () => void, redraw?: boolean): any[],
        fnDestroy(remove?: boolean): void,
        fnDraw(complete?: boolean): void,
        fnFilter(
            input: string,
            column?: number,
            regex?: boolean,
            smart?: boolean,
            showGlobal?: boolean,
            caseInsensitive?: boolean): void,
        fnGetData(row?: Node, col?: number): any,
        fnGetData(row?: number, col?: number): any,
        fnGetNodes(row?: number): any,
        fnGetPosition(node: Node): any,
        fnIsOpen(tr: Node): boolean,
        fnOpen(node: Node, html: string, clazz: string): Node,
        fnOpen(node: Node, html: Node, clazz: string): Node,
        fnOpen(node: Node, html: JQuery, clazz: string): Node,
        fnPageChange(action: string, redraw?: boolean): void,
        fnPageChange(page: number, redraw?: boolean): void,
        fnSetColumnVis(column: number, show: boolean, redraw?: boolean): void,
        fnSettings(): DataTables$Settings,
        fnSort(col: number): void,
        fnSort(col: any[][]): void,
        fnSortListener(node: Node, column: number, callback?: () => void): void,
        fnUpdate(
            data: any,
            row: Node,
            column?: number,
            redraw?: boolean,
            action?: boolean): number,
        fnUpdate(
            data: any,
            dataIndex: number,
            column?: number,
            redraw?: boolean,
            action?: boolean): number,
        fnVersionCheck(version: string): boolean
}

declare export interface DataTables$Static {
    fnVersionCheck(version: string): boolean,
        fnIsDataTable(table: Node): boolean,
        fnTables(visible?: boolean): Node[]
}

declare export interface DataTables$RowParams {
    filter?: string,
        order?: string,
        page?: string
}

declare export interface DataTables$Options {
    aaData?: any[],
        aaSorting?: any[],
        aaSortingFixed?: any[],
        ajax?: any,
        aLengthMenu?: any[],
        aoColumns?: DataTables$ColumnOptions[],
        aoColumnDefs?: DataTables$ColumnDef[],
        aoSearchCols?: any[],
        asStripClasses?: string[],
        bAutoWidth?: boolean,
        bDeferRender?: boolean,
        bDestroy?: boolean,
        bFilter?: boolean,
        bInfo?: boolean,
        bJQueryUI?: boolean,
        bLengthChange?: boolean,
        bPaginate?: boolean,
        bProcessing?: boolean,
        bRetrieve?: boolean,
        bScrollAutoCss?: boolean,
        bScrollCollapse?: boolean,
        bScrollInfinite?: boolean,
        bServerSide?: boolean,
        bSort?: boolean,
        bSortCellsTop?: boolean,
        bSortClasses?: boolean,
        bStateSave?: boolean,
        fnCookieCallback?: DataTables$CookieCallback,
        fnCreatedRow?: DataTables$RowCreatedCallback,
        fnDrawCallback?: DataTables$DrawCallback,
        fnFooterCallback?: DataTables$FooterCallback,
        fnFormatNumber?: DataTables$FormatNumber,
        fnHeaderCallback?: DataTables$HeaderCallback,
        fnInfoCallback?: DataTables$InfoCallback,
        fnInitComplete?: DataTables$InitComplete,
        fnPreDrawCallback?: DataTables$PreDrawCallback,
        fnRowCallback?: DataTables$RowCallback,
        fnStateLoadCallback?: DataTables$StateLoadCallback,
        fnStateLoadParams?: DataTables$StateLoadParams,
        fnStateLoaded?: DataTables$StateLoaded,
        fnStateSaveCallback?: DataTables$StateSaveCallback,
        fnStateSaveParams?: DataTables$StateSaveParams,
        iCookieDuration?: number,
        iDeferLoading?: any,
        iDisplayLength?: number,
        iDisplayStart?: number,
        iScrollLoadGap?: number,
        iTabIndex?: number,
        oLanguage?: DataTables$LanguageOptions,
        oSearch?: any,
        sAjaxDataProp?: string,
        sAjaxSource?: string,
        sCookiePrefix?: string,
        sDom?: string,
        sPaginationType?: string,
        sScrollX?: string,
        sScrollXInner?: string,
        sScrollY?: string,
        sServerMethod?: string
}

declare export interface DataTables$LanguageOptions {
    oAria?: DataTables$AriaOptions,
        oPaginate?: DataTables$PaginateOptions,
        sEmptyTable?: string,
        sInfo?: string,
        sInfoEmpty?: string,
        sInfoFiltered?: string,
        sInfoPostFix?: string,
        sInfoThousands?: string,
        sLengthMenu?: string,
        sLoadingRecords?: string,
        sProcessing?: string,
        sSearch?: string,
        sUrl?: string,
        sZeroRecords?: string
}

declare export interface DataTables$AriaOptions {
    sSortAscending?: string,
        sSortDescending?: string
}

declare export interface DataTables$PaginateOptions {
    sFirst?: string,
        sLast?: string,
        sNext?: string,
        sPrevious?: string
}

declare export interface DataTables$ColumnOptions {
    aDataSort?: number[],
        asSorting?: string[],
        bSearchable?: boolean,
        bSortable?: boolean,
        bVisible?: boolean,
        _bAutoType?: boolean,
        fnCreatedCell?: DataTables$CreatedCell,
        iDataSort?: number,
        mData?: any,
        mRender?: any,
        sCellType?: string,
        sClass?: string,
        sContentPadding?: string,
        sDefaultContent?: string,
        sName?: string,
        sSortDataType?: string,
        sSortingClass?: string,
        sTitle?: string,
        sType?: string,
        sWidth?: string
}

declare export type DataTables$ColumnDef = {
    aTargets: any[]
} & DataTables$ColumnOptions


declare export interface DataTables$Settings {
    oFeatures: DataTables$Features,
        oScroll: DataTables$ScrollingSettings,
        oLanguage: {
            fnInfoCallback: DataTables$InfoCallback
        },
        oBrowser: {
            bScrollOversize: boolean
        },
        aanFeatures: Node[][],
        aoData: DataTables$Row[],
        aiDisplay: number[],
        aiDisplayMaster: number[],
        aoColumns: DataTables$Column[],
        aoHeader: any[],
        aoFooter: any[],
        asDataSearch: string[],
        oPreviousSearch: any,
        aoPreSearchCols: any[],
        aaSorting: any[][],
        aaSortingFixed: any[][],
        asStripeClasses: string[],
        asDestroyStripes: string[],
        sDestroyWidth: number,
        aoRowCallback: DataTables$RowCallback[],
        aoHeaderCallback: DataTables$HeaderCallback[],
        aoFooterCallback: DataTables$FooterCallback[],
        aoDrawCallback: DataTables$DrawCallback[],
        aoRowCreatedCallback: DataTables$RowCreatedCallback[],
        aoPreDrawCallback: DataTables$PreDrawCallback[],
        aoInitComplete: DataTables$InitComplete[],
        aoStateSaveParams: DataTables$StateSaveParams[],
        aoStateLoadParams: DataTables$StateLoadParams[],
        aoStateLoaded: DataTables$StateLoaded[],
        sTableId: string,
        nTable: Node,
        nTHead: Node,
        nTFoot: Node,
        nTBody: Node,
        nTableWrapper: Node,
        bDeferLoading: boolean,
        bInitialized: boolean,
        aoOpenRows: any[],
        sDom: string,
        sPaginationType: string,
        iCookieDuration: number,
        sCookiePrefix: string,
        fnCookieCallback: DataTables$CookieCallback,
        aoStateSave: DataTables$StateSaveCallback[],
        aoStateLoad: DataTables$StateLoadCallback[],
        oLoadedState: any,
        sAjaxSource: string,
        sAjaxDataProp: string,
        bAjaxDataGet: boolean,
        jqXHR: any,
        fnServerData: any,
        aoServerParams: any[],
        sServerMethod: string,
        fnFormatNumber: DataTables$FormatNumber,
        aLengthMenu: any[],
        iDraw: number,
        bDrawing: boolean,
        iDrawError: number,
        _iDisplayLength: number,
        _iDisplayStart: number,
        _iDisplayEnd: number,
        _iRecordsTotal: number,
        _iRecordsDisplay: number,
        bJUI: boolean,
        oClasses: any,
        bFiltered: boolean,
        bSorted: boolean,
        bSortCellsTop: boolean,
        oInit: any,
        aoDestroyCallback: any[],
        fnRecordsTotal: () => number,
        fnRecordsDisplay: () => number,
        fnDisplayEnd: () => number,
        oInstance: any,
        sInstance: string,
        iTabIndex: number,
        nScrollHead: Node,
        nScrollFoot: Node
}

declare export interface DataTables$Features {
    bAutoWidth: boolean,
        bDeferRender: boolean,
        bFilter: boolean,
        bInfo: boolean,
        bLengthChange: boolean,
        bPaginate: boolean,
        bProcessing: boolean,
        bServerSide: boolean,
        bSort: boolean,
        bSortClasses: boolean,
        bStateSave: boolean
}

declare export interface DataTables$ScrollingSettings {
    bAutoCss: boolean,
        bCollapse: boolean,
        bInfinite: boolean,
        iBarWidth: number,
        iLoadGap: number,
        sX: string,
        sY: string
}

declare export interface DataTables$Row {
    nTr: Node,
        _aData: any,
        _aSortData: any[],
        _anHidden: Node[],
        _sRowStripe: string
}

declare export interface DataTables$Column {
    aDataSort: any,
        asSorting: string[],
        bSearchable: boolean,
        bSortable: boolean,
        bVisible: boolean,
        _bAutoType: boolean,
        fnCreatedCell: DataTables$CreatedCell,
        fnGetData: (data: any, specific: string) => any,
        fnSetData: (data: any, value: any) => void,
        mData: any,
        mRender: any,
        nTh: Node,
        nIf: Node,
        sClass: string,
        sContentPadding: string,
        sDefaultContent: string,
        sName: string,
        sSortDataType: string,
        sSortingClass: string,
        sSortingClassJUI: string,
        sTitle: string,
        sType: string,
        sWidth: string,
        sWidthOrig: string
}

declare export interface DataTables$CookieCallback {
    (name: string, data: any, expires: string, path: string, cookie: string): void
}

declare export interface DataTables$RowCreatedCallback {
    (row: Node, data: any[], dataIndex: number): void
}

declare export interface DataTables$DrawCallback {
    (settings: DataTables$Settings): void
}

declare export interface DataTables$FooterCallback {
    (foot: Element, data: any[], start: number, end: number, display: number[]): void
}

declare export interface DataTables$FormatNumber {
    (toFormat: number): string
}

declare export interface DataTables$HeaderCallback {
    (head: Element, data: any[], start: number, end: number, display: number[]): void
}

declare export interface DataTables$InfoCallback {
    (settings: DataTables$Settings, start: number, end: number, max: number, total: number, pre: string): string
}

declare export interface DataTables$InitComplete {
    (settings: DataTables$Settings, json: any): void
}

declare export interface DataTables$PreDrawCallback {
    (settings: DataTables$Settings): boolean
}

declare export interface DataTables$RowCallback {
    (row: DataTables$Settings, data: any[], displayIndex: number, displayIndexFull: number): void
}

declare export interface DataTables$StateLoadCallback {
    (settings: DataTables$Settings): any
}

declare export interface DataTables$StateLoadParams {
    (settings: DataTables$Settings, data: any): void
}

declare export interface DataTables$StateLoaded {
    (settings: DataTables$Settings, data: any): void
}

declare export interface DataTables$StateSaveCallback {
    (settings: any, data: any): void
}

declare export interface DataTables$StateSaveParams {
    (settings: any, data: any): void
}

declare export interface DataTables$CreatedCell {
    (nTd: Node, cellData: any, rowData: any, row: number, col: number): void
}