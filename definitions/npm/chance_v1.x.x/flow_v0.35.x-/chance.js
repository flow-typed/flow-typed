// @flow
/**
 * Flowtype definitions for chance
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Chance$Seeded {
    seed: number
}

declare type Chance$SeededChance = Chance$Chance & Chance$Seeded;

declare interface Chance$ChanceStatic {
    (): Chance$Chance,
    (seed: number): Chance$SeededChance,
    (generator: () => any): Chance$Chance,
    new(): Chance$Chance,
    new(seed: number): Chance$SeededChance,
    new(generator: () => any): Chance$Chance
}

declare interface Chance$Chance {
    bool(opts?: Chance$Options): boolean,
        character(opts?: Chance$Options): string,
        floating(opts?: Chance$Options): number,
        integer(opts?: Chance$Options): number,
        natural(opts?: Chance$Options): number,
        string(opts?: Chance$Options): string,
        paragraph(opts?: Chance$Options): string,
        sentence(opts?: Chance$Options): string,
        syllable(opts?: Chance$Options): string,
        word(opts?: Chance$Options): string,
        age(opts?: Chance$Options): number,
        birthday(): Date,
        birthday(opts?: Chance$Options): Date | string,
        cpf(): string,
        first(opts?: Chance$Options): string,
        last(opts?: Chance$Options): string,
        name(opts?: Chance$Options): string,
        name_prefix(opts?: Chance$Options): string,
        name_suffix(opts?: Chance$Options): string,
        prefix(opts?: Chance$Options): string,
        ssn(opts?: Chance$Options): string,
        suffix(opts?: Chance$Options): string,
        android_id(): string,
        apple_token(): string,
        bb_pin(): string,
        wp7_anid(): string,
        wp8_anid2(): string,
        color(opts?: Chance$Options): string,
        domain(opts?: Chance$Options): string,
        email(opts?: Chance$Options): string,
        fbid(): string,
        google_analytics(): string,
        hashtag(): string,
        ip(): string,
        ipv6(): string,
        klout(): string,
        tld(): string,
        twitter(): string,
        url(opts?: Chance$Options): string,
        address(opts?: Chance$Options): string,
        altitude(opts?: Chance$Options): number,
        areacode(): string,
        city(): string,
        coordinates(opts?: Chance$Options): string,
        country(opts?: Chance$Options): string,
        depth(opts?: Chance$Options): number,
        geohash(opts?: Chance$Options): string,
        latitude(opts?: Chance$Options): number,
        longitude(opts?: Chance$Options): number,
        phone(opts?: Chance$Options): string,
        postal(): string,
        province(opts?: Chance$Options): string,
        state(opts?: Chance$Options): string,
        street(opts?: Chance$Options): string,
        zip(opts?: Chance$Options): string,
        ampm(): string,
        date(): Date,
        date(opts: Chance$DateOptions): Date | string,
        hammertime(): number,
        hour(opts?: Chance$Options): number,
        millisecond(): number,
        minute(): number,
        month(): string,
        month(opts: Chance$Options): Chance$Month,
        second(): number,
        timestamp(): number,
        year(opts?: Chance$Options): string,
        cc(opts?: Chance$Options): string,
        cc_type(): string,
        cc_type(opts: Chance$Options): string | Chance$CreditCardType,
        currency(): Chance$Currency,
        currency_pair(): [Chance$Currency, Chance$Currency],
        dollar(opts?: Chance$Options): string,
        exp(): string,
        exp(opts: Chance$Options): string | Chance$CreditCardExpiration,
        exp_month(opts?: Chance$Options): string,
        exp_year(opts?: Chance$Options): string,
        capitalize(str: string): string,
        mixin(desc: Chance$MixinDescriptor): any,
        pad(num: number, width: number, padChar?: string): string,

        /**
         * 
         * @deprecated  Use pickone
         */
        pick<T>(arr: T[]): T,
        pickone<T>(arr: T[]): T,

        /**
         * 
         * @deprecated  Use pickset 
         */
        pick<T>(arr: T[], count: number): T[],
        pickset<T>(arr: T[], count: number): T[],
        set: Chance$Setter,
        shuffle<T>(arr: T[]): T[],
        d4(): number,
        d6(): number,
        d8(): number,
        d10(): number,
        d12(): number,
        d20(): number,
        d30(): number,
        d100(): number,
        guid(): string,
        hash(opts?: Chance$Options): string,
        n<T>(generator: () => T, count: number, opts?: Chance$Options): T[],
        normal(opts?: Chance$Options): number,
        radio(opts?: Chance$Options): string,
        rpg(dice: string): number[],
        rpg(dice: string, opts?: Chance$Options): number[] | number,
        tv(opts?: Chance$Options): string,
        unique<T>(generator: () => T, count: number, opts?: Chance$Options): T[],
        weighted<T>(values: T[], weights: number[]): T,
        cc_types(): Chance$CreditCardType[],
        mersenne_twister(seed?: number): any,
        months(): Chance$Month[],
        name_prefixes(): Chance$Name[],
        provinces(): Chance$Name[],
        states(): Chance$Name[],
        street_suffix(): Chance$Name,
        street_suffixes(): Chance$Name[]
}

declare interface Chance$Options {
    [id: string]: any
}

declare interface Chance$DateOptions {
    string?: boolean,
        american?: boolean,
        year?: number,
        month?: number,
        day?: number
}

declare interface Chance$Month {
    name: string,
        short_name: string,
        numeric: string
}

declare interface Chance$CreditCardType {
    name: string,
        short_name: string,
        prefix: string,
        length: number
}

declare interface Chance$Currency {
    code: string,
        name: string
}

declare interface Chance$CreditCardExpiration {
    month: string,
        year: string
}

declare interface Chance$MixinDescriptor {
    [id: string]: () => any
}

declare interface Chance$Setter {
    (key: "firstNames", values: string[]): any,
    (key: "lastNames", values: string[]): any,
    (key: "provinces", values: string[]): any,
    (key: "us_states_and_dc", values: string[]): any,
    (key: "territories", values: string[]): any,
    (key: "armed_forces", values: string[]): any,
    (key: "street_suffixes", values: string[]): any,
    (key: "months", values: string[]): any,
    (key: "cc_types", values: string[]): any,
    (key: "currency_types", values: string[]): any,
    (key: string, values: T[]): any
}

declare interface Chance$Name {
    name: string,
        abbreviation: string
}
declare var chance: Chance$Chance;
declare var Chance: Chance$ChanceStatic;
declare module 'chance' {
    declare type ExportedChance = {
        Chance: ExportedChance
    }
    declare     var Chance: ExportedChance;
    declare module.exports: typeof Chance
}