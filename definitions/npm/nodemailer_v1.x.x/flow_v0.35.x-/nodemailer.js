/**
 * Flowtype definitions for nodemailer
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'nodemailer' {

    declare export type Transport = nodemailer$Transport;
    declare export type SendMailOptions = nodemailer$SendMailOptions;
    declare export type SentMessageInfo = nodemailer$SentMessageInfo;

    /**
     * Transporter plugin
     */
    declare export interface Plugin {
        (mail: nodemailer$SendMailOptions, callback?: (error: Error, info: nodemailer$SentMessageInfo) => void): void
    }

    /**
     * This is what you use to send mail
     */
    declare export interface Transporter {

        /**
         * Send a mail with callback
         */
        sendMail(
                mail: nodemailer$SendMailOptions,
                callback: (error: Error, info: nodemailer$SentMessageInfo) => void): void,

            /**
             * Send a mail
             * return Promise
             */
            sendMail(mail: nodemailer$SendMailOptions): Promise<nodemailer$SentMessageInfo>,

            /**
             * Send mail using a template.
             */
            templateSender(
                template?: any,
                defaults?: any): (mailData: any, context: any) => Promise<nodemailer$SentMessageInfo>,

            /**
             * Send mail using a template with a callback.
             */
            templateSender(
                template?: any,
                defaults?: any,
                callback?: (error: Error, info: nodemailer$SentMessageInfo) => void): void,

            /**
             * Attach a plugin. 'compile' and 'stream' plugins can be attached with use(plugin) method
             * @param step is a string, either 'compile' or 'stream' thatd defines when the plugin should be hooked
             * @param pluginFunc is a function that takes two arguments: the mail object and a callback function
             */
            use(step: string, plugin: Plugin): void,

            /**
             * Verifies connection with server
             */
            verify(callback: (error: Error, success?: boolean) => void): void,

            /**
             * Verifies connection with server
             */
            verify(): Promise<void>,

            /**
             * Close all connections
             */
            close(): void
    }

    /**
     * Create a direct transporter
     */
    declare export function createTransport(options?: directTransport.DirectOptions, defaults?: Object): Transporter
}
declare export interface nodemailer$AttachmentObject {

    /**
     * filename to be reported as the name of the attached file, use of unicode is allowed
     */
    filename?: string,

        /**
         * optional content id for using inline images in HTML message source
         */
        cid?: string,

        /**
         * Pathname or URL to use streaming
         */
        path?: string,

        /**
         * String, Buffer or a Stream contents for the attachment
         */
        content: string | Buffer | NodeJS.ReadableStream,

        /**
         * If set and content is string, then encodes the content to a Buffer using the specified encoding. Example values: base64, hex, 'binary' etc. Useful if you want to use binary attachments in a JSON formatted e-mail object.
         */
        encoding?: string,

        /**
         * optional content type for the attachment, if not set will be derived from the filename property
         */
        contentType?: string,

        /**
         * optional content disposition type for the attachment, defaults to 'attachment'
         */
        contentDisposition?: string
}

declare export type nodemailer$SendMailOptions = nodemailer$SendMailOptions;

declare export type nodemailer$SentMessageInfo = nodemailer$SentMessageInfo;

declare export type nodemailer$Transport = nodemailer$Transport;