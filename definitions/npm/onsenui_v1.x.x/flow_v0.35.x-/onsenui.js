/**
 * Flowtype definitions for onsenui
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface stringArray {
    [index: number]: string
}
declare interface objectArray {
    [index: number]: any
}
/**
 * 
 * @description  Should be used as root component of each page. The content inside page component is scrollable
 */
declare interface PageView {

    /**
     * 
     * @return  Device back button handler
     * @description  Get the associated back button handler. This method may return null if no handler is assigned
     */
    getDeviceBackButtonHandler(): any
}
/**
 * 
 * @description  Carousel component
 */
declare interface CarouselView {

    /**
     * 
     * @description  Show next ons-carousel item
     */
    next(): void,

        /**
         * 
         * @description  Show previous ons-carousel item
         */
        prev(): void,

        /**
         * 
         * @description  Show first ons-carousel item
         */
        first(): void,

        /**
         * 
         * @description  Show last ons-carousel item
         */
        last(): void,

        /**
         * 
         * @param  If value is true the carousel will be swipeable
         * @description  Set whether the carousel is swipeable or not
         */
        setSwipeable(swipeable: boolean): void,

        /**
         * 
         * @return  true if the carousel is swipeable
         * @description  Returns whether the carousel is swipeable or not
         */
        isSwipeable(): boolean,

        /**
         * 
         * @param  The index that the carousel should be set to
         * @description  Specify the index of the ons-carousel-item to show
         */
        setActiveCarouselItemIndex(index: number): void,

        /**
         * 
         * @return  The current carousel item index
         * @description  Returns the index of the currently visible ons-carousel-item
         */
        getActiveCarouselItemIndex(): number,

        /**
         * 
         * @param  If true auto scroll will be enabled
         * @description  Enable or disable "auto-scroll" attribute
         */
        setAutoScrollEnabled(enabled: boolean): void,

        /**
         * 
         * @return  true if auto scroll is enabled
         * @description  Returns whether the "auto-scroll" attribute is set or not
         */
        isAutoScrollEnabled(): boolean,

        /**
         * 
         * @param  The desired ratio
         * @description  Set the auto scroll ratio. Must be a value between 0.0 and 1.0
         */
        setAutoScrollRatio(ratio: number): void,

        /**
         * 
         * @return  The current auto scroll ratio
         * @description  Returns the current auto scroll ratio
         */
        getAutoScrollRatio(): number,

        /**
         * 
         * @param  If true the carousel will be overscrollable
         * @description  Set whether the carousel is overscrollable or not
         */
        setOverscrollable(overscrollable: boolean): void,

        /**
         * 
         * @return  Whether the carousel is overscrollable or not
         * @description  Returns whether the carousel is overscrollable or not
         */
        isOverscrollable(): boolean,

        /**
         * 
         * @description  Update the layout of the carousel. Used when adding ons-carousel-items dynamically or to automatically adjust the size
         */
        refresh(): void,

        /**
         * 
         * @return  Whether the carousel is disabled or not
         * @description  Returns whether the dialog is disabled or enabled
         */
        isDisabled(): boolean,

        /**
         * 
         * @param  If true the carousel will be disabled
         * @description  Disable or enable the dialog
         */
        setDisabled(disabled: boolean): void,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @description  Component that adds "pull-to-refresh" to an <ons-page> element
 */
declare interface PullHookView {

    /**
     * 
     * @param  If true the pull hook will be disabled
     * @description  Disable or enable the component
     */
    setDisabled(disabled: boolean): void,

        /**
         * 
         * @return  true if the pull hook is disabled
         * @description  Returns whether the component is disabled or enabled
         */
        isDisabled(): boolean,

        /**
         * 
         * @param  Desired height
         * @description  Specify the height
         */
        setHeight(height: number): void,

        /**
         * 
         * @param  Desired threshold height
         * @description  Specify the threshold height
         */
        setThresholdHeight(thresholdHeight: number): void,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @description  Divides the screen into a left and right section
 */
declare interface SplitView {

    /**
     * 
     * @param  Page URL. Can be either an HTML document or an <ons-template>
     * @description  Show the page specified in pageUrl in the right section
     */
    setMainPage(pageUrl: string): void,

        /**
         * 
         * @param  Page URL. Can be either an HTML document or an <ons-template>
         * @description  Show the page specified in pageUrl in the left section
         */
        setSecondaryPage(pageUrl: string): void,

        /**
         * 
         * @description  Trigger an 'update' event and try to determine if the split behaviour should be changed
         */
        update(): void,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
declare interface dialogOptions {
    animation?: string,
        callback?: any
}
/**
 * 
 * @modifier  android Display an Android style alert dialog
 * @description  Alert dialog that is displayed on top of the current screen
 */
declare interface AlertDialogView {

    /**
     * 
     * @param  Parameter object
     * @param  .animation] Animation name. Available animations are "fade", "slide" and "none"
     * @param  .callback] Function to execute after the dialog has been revealed
     * @description  Show the alert dialog
     */
    show(options?: dialogOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .animation] Animation name. Available animations are "fade", "slide" and "none"
         * @param  .callback] Function to execute after the dialog has been hidden
         * @description  Hide the alert dialog
         */
        hide(options?: dialogOptions): void,

        /**
         * 
         * @description  Returns whether the dialog is visible or not
         * @return  true if the dialog is currently visible
         */
        isShown(): boolean,

        /**
         * 
         * @description  Destroy the alert dialog and remove it from the DOM tree
         */
        destroy(): void,

        /**
         * 
         * @description  Define whether the dialog can be canceled by the user or not
         * @param  If true the dialog will be cancelable
         */
        setCancelable(cancelable: boolean): void,

        /**
         * 
         * @description  Returns whether the dialog is cancelable or not
         * @return  true if the dialog is cancelable
         */
        isCancelable(): boolean,

        /**
         * 
         * @description  Disable or enable the alert dialog
         * @param  If true the dialog will be disabled
         */
        setDisabled(disabled: boolean): void,

        /**
         * 
         * @description  Returns whether the dialog is disabled or enabled
         * @return  true if the dialog is disabled
         */
        isDisabled(): boolean,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @description  Dialog that is displayed on top of current screen
 */
declare interface DialogView {

    /**
     * 
     * @param  Parameter object
     * @param  .animation] Animation name. Available animations are "none", "fade" and "slide"
     * @param  .callback] This function is called after the dialog has been revealed
     * @description  Show the dialog
     */
    show(options?: dialogOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .animation] Animation name. Available animations are "none", "fade" and "slide"
         * @param  .callback] This functions is called after the dialog has been hidden
         * @description  Hide the dialog
         */
        hide(options?: dialogOptions): void,

        /**
         * 
         * @description  Returns whether the dialog is visible or not
         * @return  true if the dialog is visible
         */
        isShown(): boolean,

        /**
         * 
         * @description  Destroy the dialog and remove it from the DOM tree
         */
        destroy(): void,

        /**
         * 
         * @return  Device back button handler
         * @description  Retrieve the back button handler for overriding the default behavior
         */
        getDeviceBackButtonHandler(): any,

        /**
         * 
         * @param  If true the dialog will be cancelable
         * @description  Define whether the dialog can be canceled by the user or not
         */
        setCancelable(cancelable: boolean): void,

        /**
         * 
         * @description  Returns whether the dialog is cancelable or not
         * @return  true if the dialog is cancelable
         */
        isCancelable(): boolean,

        /**
         * 
         * @description  Disable or enable the dialog
         * @param  If true the dialog will be disabled
         */
        setDisabled(disabled: boolean): void,

        /**
         * 
         * @description  Returns whether the dialog is disabled or enabled
         * @return  true if the dialog is disabled
         */
        isDisabled(): boolean,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @modifier  outline Button with outline and transparent background
 * @modifier  light Button that doesn't stand out
 * @modifier  quiet Button with no outline and or background
 * @modifier  cta Button that really stands out
 * @modifier  large Large button that covers the width of the screen
 * @modifier  large--quiet Large quiet button
 * @modifier  large--cta Large call to action button
 * @description  Button component. If you want to place a button in a toolbar, use ons-toolbar-button or ons-back-button instead
 */
declare interface ButtonView {

    /**
     * 
     * @description  Show spinner on the button
     */
    startSpin(): void,

        /**
         * 
         * @description  Remove spinner from button
         */
        stopSpin(): void,

        /**
         * 
         * @return  true if the button is spinning
         * @description  Return whether the spinner is visible or not
         */
        isSpinning(): boolean,

        /**
         * 
         * @description  Set spin animation. Possible values are "slide-left" (default), "slide-right", "slide-up", "slide-down", "expand-left", "expand-right", "expand-up", "expand-down", "zoom-out", "zoom-in"
         * @param  Animation name
         */
        setSpinAnimation(animation: string): void,

        /**
         * 
         * @description  Disable or enable the button
         */
        setDisabled(disabled: boolean): void,

        /**
         * 
         * @return  true if the button is disabled
         * @description  Returns whether the button is disabled or enabled
         */
        isDisabled(): boolean
}
/**
 * 
 * @description  Switch component
 */
declare interface SwitchView {

    /**
     * 
     * @return  true if the switch is on
     * @description  Returns true if the switch is ON
     */
    isChecked(): boolean,

        /**
         * 
         * @param  If true the switch will be set to on
         * @description  Set the value of the switch. isChecked can be either true or false
         */
        setChecked(checked: boolean): void,

        /**
         * 
         * @return  The underlying checkbox element
         * @description  Get inner input[type=checkbox] element
         */
        getCheckboxElement(): HTMLElement,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @description  *     Modal component that masks current screen
Underlying components are not subject to any events while the modal component is shown
*/
declare interface ModalView {

    /**
     * 
     * @description  Toggle modal visibility
     */
    toggle(): void,

        /**
         * 
         * @description  Show modal
         */
        show(): void,

        /**
         * 
         * @description  Hide modal
         */
        hide(): void,

        /**
         * 
         * @return  Device back button handler
         * @description  Retrieve the back button handler
         */
        getDeviceBackButtonHandler(): any
}
declare interface navigatorOptions {
    animation?: string,
        onTransitionEnd?: any
}
/**
 * 
 * @description  A component that provides page stack management and navigation. This component does not have a visible content
 */
declare interface NavigatorView {

    /**
     * 
     * @param  Page URL. Can be either a HTML document or a <code>&lt;ons-template&gt;</code>
     * @param  Parameter object
     * @param  .animation] Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none"
     * @param  .onTransitionEnd] Function that is called when the transition has ended
     * @description  Pushes the specified pageUrl into the page stack
     */
    pushPage(pageUrl: string, options?: navigatorOptions): void,

        /**
         * 
         * @param  The index where it should be inserted
         * @param  Page URL. Can be either a HTML document or a <code>&lt;ons-template&gt;</code>
         * @param  Parameter object
         * @param  .animation] Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none"
         * @description  Insert the specified pageUrl into the page stack with specified index
         */
        insertPage(index: number, pageUrl: string, options?: navigatorOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .onTransitionEnd] Function that is called when the transition has ended
         * @description  Pops the current page from the page stack. The previous page will be displayed
         */
        popPage(options?: navigatorOptions): void,

        /**
         * 
         * @param  Page URL. Can be either a HTML document or an <code>&lt;ons-template&gt;</code>
         * @param  Parameter object
         * @param  .animation] Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none"
         * @param  .onTransitionEnd] Function that is called when the transition has ended
         * @description  Clears page stack and adds the specified pageUrl to the page stack
         */
        resetToPage(pageUrl: string, options?: navigatorOptions): void,

        /**
         * 
         * @return  Current page object
         * @description  Get current page's navigator item. Use this method to access options passed by pushPage() or resetToPage() method
         */
        getCurrentPage(): any,

        /**
         * 
         * @return  List of page objects
         * @description  Retrieve the entire page stack of the navigator
         */
        getPages(): objectArray,

        /**
         * 
         * @return  Device back button handler
         * @description  Retrieve the back button handler for overriding the default behavior
         */
        getDeviceBackButtonHandler(): any,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
declare interface slidingMenuOptions {
    closeMenu?: boolean,
        callback?: any
}
/**
 * 
 * @description  Component for sliding UI where one page is overlayed over another page. The above page can be slided aside to reveal the page behind
 */
declare interface SlidingMenuView {

    /**
     * 
     * @param  Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>
     * @param  Parameter object
     * @param  .closeMenu] If true the menu will be closed
     * @param  .callback] Function that is executed after the page has been set
     * @description  Show the page specified in pageUrl in the main contents pane
     */
    setMainPage(pageUrl: string, options?: slidingMenuOptions): void,

        /**
         * 
         * @param  Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>
         * @param  Parameter object
         * @param  .closeMenu] If true the menu will be closed after the menu page has been set
         * @param  .callback] This function will be executed after the menu page has been set
         * @description  Show the page specified in pageUrl in the side menu pane
         */
        setMenuPage(pageUrl: string, options?: slidingMenuOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .callback] This function will be called after the menu has been opened
         * @description  Slide the above layer to reveal the layer behind
         */
        openMenu(options?: slidingMenuOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .callback] This function will be called after the menu has been closed
         * @description  Slide the above layer to hide the layer behind
         */
        closeMenu(options?: slidingMenuOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .callback] This function will be called after the menu has been opened or closed
         * @description  Slide the above layer to reveal the layer behind if it is currently hidden, otherwise, hide the layer behind
         */
        toggleMenu(options?: slidingMenuOptions): void,

        /**
         * 
         * @return  true if the menu is currently open
         * @description  Returns true if the menu page is open, otherwise false
         */
        isMenuOpened(): boolean,

        /**
         * 
         * @return  Device back button handler
         * @description  Retrieve the back-button handler
         */
        getDeviceBackButtonHandler(): any,

        /**
         * 
         * @param  If true the menu will be swipeable
         * @description  Specify if the menu should be swipeable or not
         */
        setSwipeable(swipeable: boolean): void,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
declare interface tabbarOptions {
    keepPage?: boolean
}
/**
 * 
 * @description  A component to display a tab bar on the bottom of a page. Used with ons-tab to manage pages using tabs
 */
declare interface TabbarView {

    /**
     * 
     * @param  Tab index
     * @param  Parameter object
     * @param  .keepPage] If true the page will not be changed
     * @param  .animation] Animation name. Available animations are "fade" and "none"
     * @return  true if the change was successful
     * @description  Show specified tab page. Animations and other options can be specified by the second parameter
     */
    setActiveTab(index: number, options?: tabbarOptions): boolean,

        /**
         * 
         * @return  The index of the currently active tab
         * @description  Returns tab index on current active tab. If active tab is not found, returns -1
         */
        getActiveTabIndex(): number,

        /**
         * 
         * @param  Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>
         * @description  Displays a new page without changing the active index
         */
        loadPage(url: string): void,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
declare interface popoverOptions {
    animation?: string
}
/**
 * 
 * @modifier  android Display an Android style popover
 * @description  A component that displays a popover next to an element
 */
declare interface PopoverView {

    /**
     * 
     * @param  Target element. Can be either a CSS selector, an event object or a DOM element
     * @param  Parameter object
     * @param  .animation] Animation name. Available animations are "fade" and "none"
     * @description  Open the popover and point it at a target. The target can be either an event, a css selector or a DOM element
     */
    show(target: any, options?: popoverOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .animation] Animation name. Available animations are "fade" and "none"
         * @description  Close the popover
         */
        hide(options?: popoverOptions): void,

        /**
         * 
         * @return  true if the popover is visible
         * @description  Returns whether the popover is visible or not
         */
        isShown(): boolean,

        /**
         * 
         * @description  Destroy the popover and remove it from the DOM tree
         */
        destroy(): void,

        /**
         * 
         * @param  If true the popover will be cancelable
         * @description  Set whether the popover can be canceled by the user when it is shown
         */
        setCancelable(cancelable: boolean): void,

        /**
         * 
         * @return  true if the popover is cancelable
         * @description  Returns whether the popover is cancelable or not
         */
        isCancelable(): boolean,

        /**
         * 
         * @param  If true the popover will be disabled
         * @description  Disable or enable the popover
         */
        setDisabled(disabled: boolean): void,

        /**
         * 
         * @return  true if the popover is disabled
         * @description  Returns whether the popover is disabled or enabled
         */
        isDisabled(): boolean,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
/**
 * 
 * @description  A global object that's used in Onsen UI. This object can be reached from the AngularJS scope
 */
declare interface onsStatic {

    /**
     * 
     * @description  Method used to wait for app initialization. The callback will not be executed until Onsen UI has been completely initialized
     * @param  Function that executes after Onsen UI has been initialized
     */
    ready(callback: any): void,

        /**
         * 
         * @description  Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS
         * @param  AngularJS module name
         * @param  List of AngularJS module dependencies
         * @return  An AngularJS module object
         */
        bootstrap(moduleName?: string, dependencies?: objectArray): any,

        /**
         * 
         * @description  Enable status bar fill feature on iOS7 and above
         */
        enableAutoStatusBarFill(): void,

        /**
         * 
         * @description  Disable status bar fill feature on iOS7 and above
         */
        disableAutoStatusBarFill(): void,

        /**
         * 
         * @param  Name of component, i.e. 'ons-page'
         * @param  $event, jqLite or HTMLElement object
         * @return  Component object. Will return null if no component was found
         * @description  Find parent component object of <code>dom</code> element
         */
        findParentComponentUntil(name: string, dom?: any): any,

        /**
         * 
         * @param  CSS selector
         * @param  DOM element to search from
         * @return  Component object. Will return null if no component was found
         * @description  Find component object using CSS selector
         */
        findComponent(selector: string, dom?: HTMLElement): any,

        /**
         * 
         * @param  Function that executes when device back button is pressed
         * @description  Set default handler for device back button
         */
        setDefaultDeviceBackButtonListener(listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Disable device back button event handler
         */
        disableDeviceBackButtonHandler(): void,

        /**
         * 
         * @description  Enable device back button event handler
         */
        enableDeviceBackButtonHandler(): void,

        /**
         * 
         * @return  Will be true if Onsen UI is initialized
         * @description  Returns true if Onsen UI is initialized
         */
        isReady(): boolean,

        /**
         * 
         * @param  Element to compile
         * @description  Compile Onsen UI components
         */
        compile(dom: HTMLElement): void,

        /**
         * 
         * @return  Will be true if the app is running in Cordova
         * @description  Returns true if running inside Cordova
         */
        isWebView(): boolean,

        /**
         * 
         * @param  Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component
         * @param  Parameter object
         * @param  .parentScope] Parent scope of the dialog. Used to bind models and access scope methods from the dialog
         * @return  Promise object that resolves to the alert dialog component object
         * @description  Create a alert dialog instance from a template
         */
        createAlertDialog(page: string): any,

        /**
         * 
         * @param  Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component
         * @param  Parameter object
         * @param  .parentScope] Parent scope of the dialog. Used to bind models and access scope methods from the dialog
         * @return  Promise object that resolves to the dialog component object
         * @description  Create a dialog instance from a template
         */
        createDialog(page: string): any,

        /**
         * 
         * @param  Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component
         * @param  Parameter object
         * @param  .parentScope] Parent scope of the dialog. Used to bind models and access scope methods from the dialog
         * @return  Promise object that resolves to the popover component object
         * @description  Create a popover instance from a template
         */
        createPopover(page: string): any,

        /**
         * 
         * @description  Utility methods to create different kinds of alert dialogs. There are three methods available: alert, confirm and prompt
         */
        notification: onsNotification,

        /**
         * 
         * @description  Utility methods for orientation detection
         */
        orientation: onsOrientation,

        /**
         * 
         * @description  Utility methods to detect current platform
         */
        platform: onsPlatform
}
declare interface alertOptions {
    message?: string,
        messageHTML?: string,
        buttonLabel?: string,
        buttonLabels?: stringArray,
        primaryButtonIndex?: number,
        cancelable?: boolean,
        animation?: string,
        title?: string,
        modifier?: string,
        callback?: any
}
declare interface onsNotification {

    /**
     * 
     * @param  Parameter object
     * @param  .message] Alert message
     * @param  .messageHTML] Alert message in HTML
     * @param  .buttonLabel] Label for confirmation button. Default is "OK"
     * @param  .animation] Animation name. Available animations are "none", "fade" and "slide"
     * @param  .title] Dialog title. Default is "Alert"
     * @param  .modifier] Modifier for the dialog
     * @param  .callback] Function that executes after dialog has been closed
     * @description  *     Display an alert dialog to show the user a message
    The content of the message can be either simple text or HTML
    Must specify either message or messageHTML
    */
    alert(options: alertOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .message] Confirmation question
         * @param  .messageHTML] Dialog content in HTML
         * @param  .buttonLabels] Labels for the buttons. Default is ["Cancel", "OK"]
         * @param  .primaryButtonIndex] Index of primary button. Default is 1
         * @param  .cancelable] Whether the dialog is cancelable or not. Default is false
         * @param  .animation] Animation name. Available animations are "none", "fade" and "slide"
         * @param  .title] Dialog title. Default is "Confirm"
         * @param  .modifier] Modifier for the dialog
         * @param  .callback]
        Function that executes after the dialog has been closed
        Argument for the function is the index of the button that was pressed or -1 if the dialog was canceled
         * @description  *     Display a dialog to ask the user for confirmation
        The default button labels are "Cancel" and "OK" but they can be customized
        Must specify either message or messageHTML
        */
        confirm(options: alertOptions): void,

        /**
         * 
         * @param  Parameter object
         * @param  .message] Prompt question
         * @param  .messageHTML] Dialog content in HTML
         * @param  .buttonLabel] Label for confirmation button. Default is "OK"
         * @param  .primaryButtonIndex] Index of primary button. Default is 1
         * @param  .cancelable] Whether the dialog is cancelable or not. Default is false
         * @param  .animation] Animation name. Available animations are "none", "fade" and "slide"
         * @param  .title] Dialog title. Default is "Alert"
         * @param  .modifier] Modifier for the dialog
         * @param  .callback]
        Function that executes after the dialog has been closed
        Argument for the function is the value of the input field or null if the dialog was canceled
         * @description  *     Display a dialog with a prompt to ask the user a question
        Must specify either message or messageHTML
        */
        prompt(options: alertOptions): void
}
declare interface onsOrientation {

    /**
     * 
     * @return  Will be true if the current orientation is portrait mode
     * @description  Returns whether the current screen orientation is portrait or not
     */
    isPortrait(): boolean,

        /**
         * 
         * @return  Will be true if the current orientation is landscape mode
         * @description  Returns whether the current screen orientation is landscape or not
         */
        isLandscape(): boolean,

        /**
         * 
         * @description  Add an event listener
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        on(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Add an event listener that's only triggered once
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        once(eventName: string, listener: (eventObject: any) => any): void,

        /**
         * 
         * @description  Remove an event listener. If the listener is not specified all listeners for the event type will be removed
         * @param  Name of the event
         * @param  Function to execute when the event is triggered
         */
        off(eventName: string, listener?: (eventObject: any) => any): void
}
declare interface onsPlatform {

    /**
     * 
     * @description  Returns whether app is running in Cordova
     * @return  
     */
    isWebView(): boolean,

        /**
         * 
         * @description  Returns whether the OS is iOS
         * @return  
         */
        isIOS(): boolean,

        /**
         * 
         * @description  Returns whether the OS is Android
         * @return  
         */
        isAndroid(): boolean,

        /**
         * 
         * @description  Returns whether the device is iPhone
         * @return  
         */
        isIPhone(): boolean,

        /**
         * 
         * @description  Returns whether the device is iPad
         * @return  
         */
        isIPad(): boolean,

        /**
         * 
         * @description  Returns whether the device is BlackBerry
         * @return  
         */
        isBlackBerry(): boolean,

        /**
         * 
         * @description  Returns whether the browser is Opera
         * @return  
         */
        isOpera(): boolean,

        /**
         * 
         * @description  Returns whether the browser is Firefox
         * @return  
         */
        isFirefox(): boolean,

        /**
         * 
         * @description  Returns whether the browser is Safari
         * @return  
         */
        isSafari(): boolean,

        /**
         * 
         * @description  Returns whether the browser is Chrome
         * @return  
         */
        isChrome(): boolean,

        /**
         * 
         * @description  Returns whether the browser is Internet Explorer
         * @return  
         */
        isIE(): boolean,

        /**
         * 
         * @description  Returns whether the iOS version is 7 or above
         * @return  
         */
        isIOS7above(): boolean
}
declare
var ons: onsStatic;