// @flow
/**
 * Flowtype definitions for axe-core
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


declare var npm$namespace$axe: {
    a11yCheck: typeof axe$a11yCheck,
    configure: typeof axe$configure,
    getRules: typeof axe$getRules,
    reset: typeof axe$reset,
    registerPlugin: typeof axe$registerPlugin,
    cleanup: typeof axe$cleanup,
}
declare export type axe$ImpactValue = "minor" | "moderate" | "serious" | "critical";

declare export type axe$TagValue = "wcag2a" | "wcag2aa" | "section508" | "best-practice";

declare export type axe$ReporterVersion = "v1" | "v2";

declare export type axe$RunOnlyType = "rule" | "rules" | "tag" | "tags";

declare export interface axe$ElementContext {
    node?: Object,
        selector?: string,
        include?: any[],
        exclude?: any[]
}

declare export interface axe$RunOnly {
    type: axe$RunOnlyType,
        value?: {
            include?: string[],
            exclude?: string[]
        },
        values?: axe$TagValue[]
}

declare export interface axe$AxeResults {
    url: string,
        timestamp: string,
        passes: axe$Pass[],
        violations: axe$Violation[]
}

declare export interface axe$Pass {
    description: string,
        help: string,
        helpUrl: string,
        id: string,
        impact: axe$ImpactValue,
        tags: axe$TagValue[],
        nodes: axe$NodeResult[]
}

declare export interface axe$Violation {
    description: string,
        help: string,
        helpUrl: string,
        id: string,
        impact: axe$ImpactValue,
        tags: axe$TagValue[],
        nodes: axe$NodeResult[]
}

declare export interface axe$NodeResult {
    html: string,
        impact: axe$ImpactValue,
        target: string[],
        any: axe$CheckResult[],
        all: axe$CheckResult[],
        none: axe$CheckResult[]
}

declare export interface axe$CheckResult {
    id: string,
        impact: string,
        message: string,
        data: any,
        relatedNodes?: axe$RelatedNode[]
}

declare export interface axe$RelatedNode {
    target: string[],
        html: string
}

declare export interface axe$Spec {
    branding?: {
            brand: string,
            application: string
        },
        reporter?: axe$ReporterVersion,
        checks?: axe$Check[],
        rules?: axe$Rule[]
}

declare export interface axe$Check {
    id: string,
        evaluate: Function,
        after?: Function,
        options?: any,
        matches?: string,
        enabled?: boolean
}

declare export interface axe$Rule {
    id: string,
        selector?: string,
        excludeHidden?: boolean,
        enabled?: boolean,
        pageLevel?: boolean,
        any?: string[],
        all?: string[],
        none?: string[],
        tags?: string[],
        matches?: string
}

declare export interface axe$AxePlugin {
    id: string,
        run(...args: any[]): any,
        commands: {
            id: string,
            callback(...args: any[]): void
        }[],
        cleanup(callback: Function): void
}

declare export var plugins: any;


/**
 * Starts analysis on the current document and its subframes
 * @param  The `Context` specification object 
 * @see  Context
 * @param  Options passed into rules or checks, temporarily modifyint them.
 * @param  The function to invoke when analysis is complete.
 * @returns  results  The aXe results object
 */
declare export function axe$a11yCheck(
    context: axe$ElementContext,
    options: {
        runOnly?: axe$RunOnly,
        rules?: Object
    },
    callback: (results: axe$AxeResults) => void): axe$AxeResults


/**
 * Method for configuring the data format used by aXe. Helpful for adding new
 * rules, which must be registered with the library to execute.
 * @param  Object with valid `branding`, `reporter`, `checks` and `rules` data
 */
declare export function axe$configure(spec: axe$Spec): void


/**
 * Searches and returns rules that contain a tag in the list of tags.
 * @param  Optional array of tags
 * @return  Array of rules
 */
declare export function axe$getRules(tags?: string[]): Object[]


/**
 * Restores the default axe configuration
 */
declare export function axe$reset(): void


/**
 * Function to register a plugin configuration in document and its subframes
 * @param  A plugin configuration object
 */
declare export function axe$registerPlugin(plugin: axe$AxePlugin): void


/**
 * Function to clean up plugin configuration in document and its subframes
 */
declare export function axe$cleanup(): voiddeclare module 'axe-core' {
    declare module.exports: typeof axe
}