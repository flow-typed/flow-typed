/**
 * Flowtype definitions for AzureMobileServicesClient
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.0.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'WindowsAzure' {
    declare interface MobileServiceClient {
        new(applicationUrl: string, applicationKey?: string): MobileServiceClient,
        applicationUrl: string,
            applicationKey: string,
            currentUser: User,
            push: Push,
            login(
                provider: string,
                token: string,
                callback: (error: any, user: User) => void): void,
            login(provider: string, token: string): asyncPromise,
            login(provider: string, callback: (error: any, user: User) => void): void,
            login(provider: string): asyncPromise,
            logout(): asyncPromise,
            getTable(tableName: string): MobileServiceTable,
            withFilter(
                serviceFilter: (
                    request: any,
                    next: (request: any, callback: (error: any, response: any) => void) => void,
                    callback: (error: any, response: any) => void) => void): MobileServiceClient,

            /**
             * Invokes the specified custom api and returns a response object.
             * @param apiName The custom api to invoke.
             * @param options Contains additional parameter information, valid values are:
            body: The body of the HTTP request.
            method: The HTTP method to use in the request, with the default being POST,
            parameters: Any additional query string parameters, 
            headers: HTTP request headers, specified as an object.
             * @param callback Optional callback accepting (error, results) parameters.
            */
            invokeApi(
                apiName: string,
                options?: InvokeApiOptions,
                callback?: (error: any, results: any) => void): asyncPromise
    }
    declare interface Push {

        /**
         * Register a push channel with the Mobile Apps backend to start receiving notifications.
         * @param platform The device platform being used - wns, gcm or apns.
         * @param pushChannel The push channel identifier or URI.
         * @param templates An object containing template definitions. Template objects should contain body, headers and tags properties.
         * @param secondaryTiles An object containing template definitions to be used with secondary tiles when using WNS.
         * @param callback Optional callback accepting (error, results) parameters.
         */
        register(
                platform: string,
                pushChannel: string,
                templates?: any,
                secondaryTiles?: any,
                callback?: (error: any, results: any) => void): void,

            /**
             * Invokes the specified custom api and returns a response object.
             * @param pushChannel The push channel identifier or URI.
             * @param callback Optional callback accepting (error, results) parameters.
             */
            unregister(pushChannel: string, callback?: (error: any, results: any) => void): void
    }
    declare interface InvokeApiOptions {
        method?: string,
            body?: any,
            headers?: Object,
            parameters?: Object
    }
    declare interface User {
        getIdentities(): any,
            accessTokens: any,
            level: string,
            userId: string,
            mobileServiceAuthenticationToken: string
    }
    declare interface asyncPromise {
        then(onSuccess: (result: any) => any, onError?: (error: any) => any): asyncPromise,
            done(onSuccess?: (result: any) => void, onError?: (error: any) => void): void
    }
    declare type MobileServiceTable = {
        new(tableName: string, client: MobileServiceClient): MobileServiceTable,
        getTableName(): string,
        getMobileServiceClient(): MobileServiceClient,
        insert(
            instance: any,
            paramsQS: Object,
            callback: (error: any, retInserted: any) => any): void,
        insert(instance: any, paramsQS: Object): asyncPromise,
        insert(instance: any): asyncPromise,
        update(
            instance: any,
            paramsQS: Object,
            callback: (error: any, retUpdated: any) => any): void,
        update(instance: any, paramsQS: Object): asyncPromise,
        update(instance: any): asyncPromise,
        lookup(
            id: number,
            paramsQS: Object,
            callback: (error: any, retValue: any) => any): void,
        lookup(id: number, paramsQS: Object): asyncPromise,
        lookup(id: number): asyncPromise,
        del(instance: any, paramsQS: Object, callback: (error?: any) => void): void,
        del(instance: any, paramsQS: Object): asyncPromise,
        del(instance: any): asyncPromise,
        read(
            query: IQuery,
            paramsQS: Object,
            callback: (error: any, retValues: any) => any): void,
        read(query: IQuery, paramsQS: Object): asyncPromise,
        read(query: IQuery): asyncPromise,
        read(): asyncPromise
    } & IQuery

    declare interface IQuery {
        read(paramsQS?: Object): asyncPromise,
            orderBy(...propName: string[]): IQuery,
            orderByDescending(...propName: string[]): IQuery,
            select(...propNameSelected: string[]): IQuery,
            select(funcProjectionFromThis: () => any): IQuery,
            where(mapObjFilterCriteria: any): IQuery,
            where(funcPredicateOnThis: (...qParams: any[]) => boolean, ...qValues: any[]): IQuery,
            skip(n: number): IQuery,
            take(n: number): IQuery,
            includeTotalCount(): IQuery
    }
    declare interface WindowsAzureStatic {
        MobileServiceClient: MobileServiceClient
    }
}
declare module 'azure-mobile-apps-client' {
    declare module.exports: typeof WindowsAzure
}
declare var WindowsAzure: undefined.WindowsAzureStatic;